<Type Name="ProviderBase" FullName="System.Configuration.Provider.ProviderBase">
  <TypeSignature Language="C#" Value="public abstract class ProviderBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ProviderBase extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.Provider.ProviderBase" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>拡張可能なプロバイダー モデルの基本実装を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 プロバイダー モデルは、メンバーシップ、プロファイル、および保護された構成など、ASP.NET の複数の機能のすべてまたは一部をカプセル化します。 これにより、開発者はカプセル化された機能の複数の実装を提供するサポート クラスを作成することができます。 さらに、開発者は、プロバイダー モデルを使用して、新しい機能を作成できます。 機能コードを複製するか、実装メソッドを変更する必要がある場合は、アプリケーション層を再コーディング機能の複数の実装をサポートする効果的な方法を指定できます。  
  
 <xref:System.Configuration.Provider.ProviderBase> クラスは単純で、いくつかの基本的な方法とプロパティだけは、すべてのプロバイダーに共通します。 機能固有のプロバイダー \(よう <xref:System.Web.Security.MembershipProvider>\) から継承 <xref:System.Configuration.Provider.ProviderBase> し、必要なメソッドとその機能の実装に固有のプロバイダーのサポートが必要なプロパティを確立します。 実装固有のプロバイダー \(よう <xref:System.Web.Security.SqlMembershipProvider>\) 機能固有のプロバイダーから順番に継承 \(この場合、 <xref:System.Web.Security.MembershipProvider>\)。  
  
 プロバイダー モデルの最も重要な側面は、アプリケーション コードから \(たとえば、かどうかデータが永続化されるテキスト ファイルまたはデータベース内\) の実装が抽象化されることです。 構成ファイルは、特定の機能の実装に固有のプロバイダーの種類を指定します。 機能レベルのプロバイダーを構成ファイルからその型を読み込んで機能コードに対するファクトリとして機能します。 アプリケーション開発者は、アプリケーション コードで機能のクラスを使用できます。 実装の種類スワップ アウトでき、構成ファイルで、さまざまな実装方法を受け入れるためにコードを書き直す必要はありません。  
  
 ASP.NET に付属するプロバイダーは、主プロファイルまたはメンバシップのような機能のデータ永続化の実装の抽象化です。 ただし、このモデルは、その他の種類が抽象化され、複数の方法で実装されている機能に適用できます。  
  
   
  
## 例  
 使用する方法の例については、 <xref:System.Configuration.Provider.ProviderBase> を参照してください [Profile Provider Implementation Example](http://msdn.microsoft.com/ja-jp/c36e8a56-b416-40b7-95c1-c662cfb8f906)します。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ProviderBase ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Provider.ProviderBase.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Configuration.Provider.ProviderBase" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public virtual string Description { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.Provider.ProviderBase.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>管理ツールまたはその他のユーザー インターフェイス \(Ui\) での表示に適した簡単でわかりやすい説明を取得します。</summary>
        <value>簡単でわかりやすい説明管理ツールまたは他の Ui での表示に適しています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 構成されているプロバイダーが、説明の値を指定しないかどうか、 <xref:System.Configuration.Provider.ProviderBase.Name%2A> プロパティは、既定値として返されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public virtual void Initialize (string name, System.Collections.Specialized.NameValueCollection config);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(string name, class System.Collections.Specialized.NameValueCollection config) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="config" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="name">プロバイダーのフレンドリ名。</param>
        <param name="config">このプロバイダーの構成で指定された、プロバイダー固有の属性を表す名前と値のペアのコレクション。</param>
        <summary>プロバイダーを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 基本クラスの実装が、プロバイダーの内部で回数の合計には追跡 `Initialize` メソッドが呼び出されています。 プロバイダーが複数回初期化される場合、 `InvalidOperationException` プロバイダーが既に初期化されていることを示すがスローされます。  
  
 機能プロバイダーの呼び出しのほとんどのため <xref:System.Configuration.Provider.ProviderBase.Initialize%2A> プロバイダー固有の初期化を実行する前にこのメソッドは、二重の初期化を防ぐために中央の場所。  
  
   
  
## 例  
 使用する方法の例については <xref:System.Configuration.Provider.ProviderBase.Initialize%2A>, を参照してください [Profile Provider Implementation Example](http://msdn.microsoft.com/ja-jp/c36e8a56-b416-40b7-95c1-c662cfb8f906)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロバイダーの名前は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">プロバイダーの名前は、長さが 0 です。</exception>
        <exception cref="T:System.InvalidOperationException">呼び出す試み <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" /> プロバイダー、プロバイダーは既に初期化された後にします。</exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.Provider.ProviderBase.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>構成中に、プロバイダーの参照に使用されるフレンドリ名を取得します。</summary>
        <value>構成中に、プロバイダーを参照するために使用する表示名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この文字列の推奨パターンは: \[*プロバイダー作成者*\] \[*実装型*\] \[*機能*\] プロバイダー。 ただし、 <xref:System.Configuration.Provider.ProviderBase.Description%2A> プロパティもわかりやすい説明を提供、 <xref:System.Configuration.Provider.ProviderBase.Name%2A> プロパティは、プロバイダーの識別子として使用します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>