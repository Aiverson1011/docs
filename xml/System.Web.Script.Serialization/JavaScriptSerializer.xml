<Type Name="JavaScriptSerializer" FullName="System.Web.Script.Serialization.JavaScriptSerializer">
  <TypeSignature Language="C#" Value="public class JavaScriptSerializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit JavaScriptSerializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Script.Serialization.JavaScriptSerializer" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>[Json.NET](http://www.newtonsoft.com/json) 使用されるシリアル化および逆シリアル化する必要があります。 AJAX 対応アプリケーションにシリアル化および逆シリアル化の機能を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Script.Serialization.JavaScriptSerializer> クラス、非同期通信レイヤーによって、ブラウザーと Web サーバーの間で渡されるデータを逆シリアル化およびシリアル化には内部的に使用します。 シリアライザーのインスタンスにアクセスできません。 ただし、このクラスは、パブリック API を公開します。 したがって、JavaScript Object Notation \(JSON\) をマネージ コードで作業するときに、クラスを使用できます。  
  
 オブジェクトをシリアル化を使用して、 <xref:System.Web.Script.Serialization.JavaScriptSerializer.Serialize%2A> メソッドです。 JSON 文字列を逆シリアル化を使用して、 <xref:System.Web.Script.Serialization.JavaScriptSerializer.Deserialize%2A> または <xref:System.Web.Script.Serialization.JavaScriptSerializer.DeserializeObject%2A> メソッドです。 ネイティブにサポートされていない型を逆シリアル化およびシリアル化する <xref:System.Web.Script.Serialization.JavaScriptSerializer>, を使用してカスタムのコンバーターを実装、 <xref:System.Web.Script.Serialization.JavaScriptConverter> クラスです。 使用して、コンバーターを登録、 <xref:System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters%2A> メソッドです。  
  
## マネージ型と JSON の間のマッピング  
 次の表は、シリアル化のプロセスは、マネージ型と JSON の間のマッピングを示します。 これらのマネージ型がサポートされている <xref:System.Web.Script.Serialization.JavaScriptSerializer>します。 JSON 文字列をマネージ型にシリアル化する場合は、同じマッピングが適用されます。 ただし、逆シリアル化は非対称で、します。シリアル化可能なすべてのマネージ型は、JSON から逆シリアル化することができます。  
  
> [!NOTE]
>  多次元配列は 1 次元の配列としてシリアル化され、フラットな配列として使用する必要があります。  
  
|マネージ型|JSON と同じ|  
|-----------|--------------|  
|<xref:System.String> \(Utf\-8 エンコーディングのみ\)。|String|  
|<xref:System.Char>|String|  
|1 つの null 文字 \(など、\\0\)|Null|  
|<xref:System.Boolean>|ブール型。 として JSON で表現された `true` または `false`|  
|`null` \(`null` のオブジェクト参照と <xref:System.Nullable> 値の型\)。|文字列の値は null|  
|<xref:System.DBNull>|文字列の値は null|  
|数値 \(または、数値型と互換性のある\) のプリミティブ型: <xref:System.Byte>, 、<xref:System.SByte>, 、<xref:System.Int16>, 、<xref:System.Int32>, 、<xref:System.Int64>, 、<xref:System.UInt16>, 、<xref:System.UInt32>, 、<xref:System.UInt64>, 、<xref:System.Double>, 、および <xref:System.Single>です。 カルチャに依存しない文字列形式が使用されます。|数値|  
|<xref:System.DateTime>|JSON で表される日付オブジェクト"\\\/Date \(タイマー刻みの数\) \\\/"です。 タイマー刻みの数は、01 1970 年 1 月、UTC の午前 0 時から経過したタイマー刻み \(ミリ秒\) の数を示す正または負 long 値です。<br /><br /> サポートされる値は日付の最大 <xref:System.DateTime.MaxValue> \(12\/31\/9999 11時 59分: 59 PM\) と、サポートされている日付の最小値は <xref:System.DateTime.MinValue> \(1\/1\/0001 12時 00分: 00\)。|  
|整数型の列挙|等価の列挙値の整数|  
|型を実装する <xref:System.Collections.IEnumerable> または <xref:System.Collections.Generic.IEnumerable%601?displayProperty=fullName> いるもの実装になっていない <xref:System.Collections.IDictionary> または <xref:System.Collections.Generic.IDictionary%602?displayProperty=fullName>です。 など、型を含む <xref:System.Array>, 、<xref:System.Collections.ArrayList>, 、および <xref:System.Collections.Generic.List%601>です。|JSON 配列の構文を使用する配列|  
|型を実装する <xref:System.Collections.IDictionary> または <xref:System.Collections.Generic.IDictionary%602?displayProperty=fullName>です。 など、型を含む <xref:System.Collections.Generic.Dictionary%602> と <xref:System.Collections.Hashtable>です。|JSON ディクショナリの構文を使用する JavaScript オブジェクト|  
|カスタムの具象 \(抽象型\) 型を持つパブリック インスタンス プロパティを持つは get アクセサーまたはパブリック インスタンス フィールドです。<br /><br /> 書き込み専用のパブリック プロパティ、パブリック プロパティまたはパブリック フィールドの属性でマークされたことに注意してください <xref:System.Web.Script.Serialization.ScriptIgnoreAttribute>, 、これらの型のパブリックのインデックス付きプロパティは無視されます。|JSON ディクショナリの構文を使用する JavaScript オブジェクト。 "\_ \_Type"という名前の特殊なメタデータ プロパティは、逆シリアル化を確実に含まれています。 パブリック インスタンス プロパティが get し、set アクセサーを逆シリアル化を確認することを確認してください。|  
|<xref:System.Guid>|GUID の文字列表現|  
|<xref:System.Uri>|戻り値の文字列形式 <xref:System.Uri.GetComponents%2A>|  
  
   
  
## 例  
 最初の例では、データ オブジェクトを逆シリアル化およびシリアル化する方法の簡単な説明を提供します。 クラス名の下に表示されるユーザーが必要です。  
  
 [!code-csharp[System.Web.Script.Serialization.JavaScriptSerializer\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.script.serialization.javascriptserializer/cs/default.aspx.cs#1)]
 [!code-vb[System.Web.Script.Serialization.JavaScriptSerializer\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.script.serialization.javascriptserializer/vb/default.aspx.vb#1)]  
  
 [!code-csharp[System.Web.Script.Serialization.JavaScriptSerializer\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.script.serialization.javascriptserializer/cs/person.cs#2)]
 [!code-vb[System.Web.Script.Serialization.JavaScriptSerializer\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.script.serialization.javascriptserializer/vb/person.vb#2)]  
  
 次の例では、使用するより複雑な完全なプロジェクト、 <xref:System.Web.Script.Serialization.JavaScriptSerializer> クラスを保存および JSON のシリアル化を使用して、オブジェクトの状態を復元します。 このコードに対して提供されているカスタム コンバーターを使用して、 <xref:System.Web.Script.Serialization.JavaScriptConverter> クラスです。  
  
 [!code-csharp[System.Web.Script.Serialization\#4](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.Script.Serialization/CS/Default.aspx#4)]
 [!code-vb[System.Web.Script.Serialization\#4](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.Script.Serialization/VB/Default.aspx#4)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JavaScriptSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptSerializer.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>型リゾルバーを持たない <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 インスタンス、 <xref:System.Web.Script.Serialization.JavaScriptSerializer> クラスの型の競合回避モジュールが、シリアル化された JSON 文字列に型のメタデータ プロパティ \(名前は"\_ \_type"\) を含めないなし。 型のメタデータ プロパティを使って、 <xref:System.Web.Script.Serialization.JavaScriptSerializer.Deserialize%2A> と <xref:System.Web.Script.Serialization.JavaScriptSerializer.DeserializeObject%2A> メソッドは、適切な管理を特定する JSON 文字列を変換する型にします。 型の競合回避モジュールの詳細については、次を参照してください。、 <xref:System.Web.Script.Serialization.JavaScriptTypeResolver> クラスです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JavaScriptSerializer (System.Web.Script.Serialization.JavaScriptTypeResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.Script.Serialization.JavaScriptTypeResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptSerializer.#ctor(System.Web.Script.Serialization.JavaScriptTypeResolver)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resolver" Type="System.Web.Script.Serialization.JavaScriptTypeResolver" />
      </Parameters>
      <Docs>
        <param name="resolver">カスタムの型リゾルバー オブジェクト。</param>
        <summary>カスタムの型リゾルバーを持つ <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オブジェクトをシリアル化時に、 <xref:System.Web.Script.Serialization.JavaScriptSerializer> クラスは、 `resolver` 型のメタデータ プロパティ \("\_ \_type"\) のシリアル化された JSON 文字列に含める適切な値を決定するパラメーターです。 同様に、時、 <xref:System.Web.Script.Serialization.JavaScriptSerializer> クラスが JSON 文字列を逆シリアル化がリゾルバー インスタンスを使用して適切なマネージ型に型のメタデータ プロパティ値を解決します。  
  
 設定することができます、 `resolver` パラメーターを `null`, 、呼び出すことと同じである、 <xref:System.Web.Script.Serialization.JavaScriptSerializer.%23ctor%2A> コンス トラクターです。  
  
 インスタンス <xref:System.Web.Script.Serialization.JavaScriptSerializer> 特別な種類の競合回避モジュールを使用するクライアント スクリプトから Web サービスを呼び出す非同期通信レイヤーで使用されています。 この種類の競合回避モジュールでは、逆シリアル化することができますの種類を制限、Web サービスのメソッドのシグネチャまたは付いてで定義されている、 <xref:System.Web.Script.Services.GenerateScriptTypeAttribute> を適用します。 この組み込みの型リゾルバーをプログラムで変更することはできません。  
  
> [!IMPORTANT]
>  カスタムの型リゾルバーで初期化されたこのオブジェクトのインスタンスを使用すると、セキュリティ上のリスクが発生することができます。 このオブジェクトを使用して、信頼されたデータだけです。 詳細については、次を参照してください。 [Untrusted Data Security Risks](http://go.microsoft.com/fwlink/?LinkId=330378)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Script.Serialization.JavaScriptTypeResolver" />
        <altmember cref="T:System.Web.Script.Serialization.SimpleTypeResolver" />
      </Docs>
    </Member>
    <Member MemberName="ConvertToType">
      <MemberSignature Language="C#" Value="public object ConvertToType (object obj, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ConvertToType(object obj, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType(System.Object,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="obj">変換対象のオブジェクト。</param>
        <param name="targetType">オブジェクトの変換後の型。</param>
        <summary>指定したオブジェクトを指定した型に変換します。</summary>
        <returns>シリアル化された JSON 文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、 <xref:System.Web.Script.Serialization.JavaScriptSerializer> インスタンスでのカスタムのコンバーターが登録されると、型、シリアライザーの呼び出しをシリアル化する、 <xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A> は JSON 形式の文字列に変換する名前\/値ペアのディクショナリを取得します。  
  
 <xref:System.Web.Script.Serialization.JavaScriptSerializer.Serialize%2A> のインスタンスが登録されている場合またはオブジェクト グラフが複雑すぎる場合、メソッドは例外をスローできますできます <xref:System.Web.Script.Serialization.JavaScriptConverter> コンバーター再帰が発生します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">結果として得られる JSON 形式の文字列の値を超えると <see cref="P:System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength" />です。  
  
 または  
  
 <paramref name="obj" /> 循環参照が含まれています。 循環参照には、子オブジェクトが親オブジェクトへの参照と、親オブジェクトが子オブジェクトへの参照が発生します。</exception>
        <exception cref="T:System.ArgumentException">定義されている再帰制限 <see cref="P:System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit" /> を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertToType&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T ConvertToType&lt;T&gt; (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T ConvertToType&lt;T&gt;(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <c>obj</c> の変換後の型。</typeparam>
        <param name="obj">変換対象のオブジェクト。</param>
        <summary>指定したオブジェクトを指定した型に変換します。</summary>
        <returns>ターゲットの型に変換されたオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType%2A> メソッドによって表されるオブジェクトのインスタンスに変換を行おうと `obj` 型のインスタンスに `T`します。 この変換中には、オブジェクト参照の等価性が維持されている保証はありません。 したがってとは限りませんが `obj` と `T` 、同じオブジェクトを参照してください。  
  
 <xref:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType%2A> 派生したクラスを実装する場合に使用するためのものでは、 <xref:System.Web.Script.Serialization.JavaScriptConverter>です。 コンバーター コードする必要がありますが、シリアライザーが、渡されるディクショナリ内の値をとることができるし、その値を型のインスタンスに変換 `T`です。 このタスクを実行するカスタムの変換コードを再実装するには、代わりに呼び出すことができます、 <xref:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType%2A> コンバーター コードからメソッドです。  
  
   
  
## 例  
 次の例を使用する方法を示しています、 <xref:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType%2A> を入手する方法、 <xref:System.Web.UI.WebControls.ListItem> オブジェクトと、コンバーターに渡されるディクショナリの値。 このコード例が示されている例の一部は、 <xref:System.Web.Script.Serialization.JavaScriptSerializer> クラスです。  
  
 [!code-csharp[System.Web.Script.Serialization\#5](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.Script.Serialization/CS/App_Code/ListItemCollectionConverter.cs#5)]
 [!code-vb[System.Web.Script.Serialization\#5](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.Script.Serialization/VB/App_Code/ListItemCollectionConverter.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="obj" /> \(またはの入れ子になったメンバー <paramref name="obj" />\)カスタム型ではなく、シリアライザーに関連付けられている型の競合回避モジュールは、対応するマネージ型を見つけられないかを示す"\_ \_type"プロパティが含まれています。  
  
 または  
  
 <paramref name="obj" /> \(またはの入れ子になったメンバー <paramref name="obj" />\)カスタム型ではなく、対応する JSON 文字列を逆シリアル化の結果を予想される対象の型に割り当てることができないことを示す"\_ \_type"プロパティが含まれています。  
  
 または  
  
 <paramref name="obj" /> \(またはの入れ子になったメンバー <paramref name="obj" />\)いずれかを示す"\_ \_type"プロパティを含む <see cref="T:System.Object" /> または非インスタンス化可能な型 \(抽象型やインターフェイスなど\)。  
  
 または  
  
 変換が試み <paramref name="obj" /> 配列と同様のマネージ型にサポートされていない使用して逆シリアル化対象として使用します。  
  
 または  
  
 変換することはできません <paramref name="obj" /> に <paramref name="T" />します。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="obj" /> ディクショナリ型は、文字列以外のキー値が発生しました。  
  
 または  
  
 <paramref name="obj" /> 型では利用できないメンバーの定義が含まれています <paramref name="T" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public object Deserialize (string input, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Deserialize(string input, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptSerializer.Deserialize(System.String,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="input">逆シリアル化する JSON 文字列。</param>
        <param name="targetType">生成されるオブジェクトの型。</param>
        <summary>JSON 形式の文字列を指定した型のオブジェクトに変換します。</summary>
        <returns>逆シリアル化されたオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この逆シリアル化メソッドを特定の種類、方法は、オブジェクト グラフのルートのキャストは試行されませんが、 <xref:System.Web.Script.Serialization.JavaScriptSerializer.Deserialize%2A> メソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">長さ <paramref name="input" /> の値を超える <see cref="P:System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength" />します。  
  
 または  
  
 定義されている再帰制限 <see cref="P:System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit" /> を超えています。  
  
 または  
  
 <paramref name="input" /> 予期しない文字シーケンスが含まれています。  
  
 または  
  
 <paramref name="input" /> ディクショナリ型は、文字列以外のキー値が発生しました。  
  
 または  
  
 <paramref name="input" /> 対象の型では利用できないメンバーの定義が含まれます。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="input" /> カスタム型ではなく、シリアライザーに現在関連付けられている型の競合回避モジュールは、対応するマネージ型を見つけられないかを示す"\_ \_type"プロパティが含まれています。  
  
 または  
  
 <paramref name="input" /> カスタム型ではなく、対応する JSON 文字列を逆シリアル化の結果を予想される対象の型に割り当てることができないことを示す"\_ \_type"プロパティが含まれています。  
  
 または  
  
 <paramref name="input" /> いずれかを示す"\_ \_type"プロパティを含む <see cref="T:System.Object" /> または非インスタンス化可能な型 \(抽象型やインターフェイスなど\)。  
  
 または  
  
 JSON 配列を JSON シリアル化解除のターゲットとして使用するにはサポートされていない配列のようなマネージ型に変換しようとしました。  
  
 または  
  
 変換することはできません <paramref name="input" /> 対象の型にします。</exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T Deserialize&lt;T&gt; (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T Deserialize&lt;T&gt;(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptSerializer.Deserialize``1(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">生成されるオブジェクトの型。</typeparam>
        <param name="input">逆シリアル化する JSON 文字列。</param>
        <summary>指定した JSON 文字列を指定した型 <paramref name="T" /> のオブジェクトに変換します。</summary>
        <returns>逆シリアル化されたオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Script.Serialization.JavaScriptSerializer.Deserialize%2A> メソッドは最初に使用して、 <xref:System.Web.Script.Serialization.JavaScriptSerializer.DeserializeObject%2A> メソッドは、オブジェクト グラフしようとして、入力結果をキャストを取得する `T`です。  
  
 逆シリアル化中に、シリアライザーの現在の型リゾルバーは、参照される配列、ディクショナリ型の内部に入れ子になっている要素を変換するときに使用するマネージ型を決定します。 逆シリアル化プロセスがの入れ子になったすべての要素を反復処理結果として、 `input`です。 型の競合回避モジュールの詳細については、次を参照してください。、 <xref:System.Web.Script.Serialization.JavaScriptTypeResolver> クラスです。  
  
   
  
## 例  
 次の例では、データ オブジェクトを逆シリアル化およびシリアル化する方法の簡単な説明を提供します。 クラス名の下に表示されるユーザーが必要です。  
  
<!-- TODO: review snippet reference  [!CODE [System.Web.Script.JavaScriptSerializer\#1](System.Web.Script.JavaScriptSerializer#1)]  -->  
  
<!-- TODO: review snippet reference  [!CODE [System.Web.Script.JavaScriptSerializer\#2](System.Web.Script.JavaScriptSerializer#2)]  -->  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="input" /> の値より長く <see cref="P:System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength" />します。  
  
 または  
  
 定義されている再帰制限 <see cref="P:System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit" /> を超えています。  
  
 または  
  
 <paramref name="input" /> 予期しない文字シーケンスが含まれています。  
  
 または  
  
 <paramref name="input" /> ディクショナリ型は、文字列以外のキー値が発生しました。  
  
 または  
  
 <paramref name="input" /> 型では利用できないメンバーの定義が含まれています <paramref name="T" />します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="input" /> カスタム型ではなく、シリアライザーに関連付けられている型の競合回避モジュールは、対応するマネージ型を見つけられないかを示す"\_ \_type"プロパティが含まれています。  
  
 または  
  
 <paramref name="input" /> カスタム型ではなく、対応する JSON 文字列を逆シリアル化の結果を予想される対象の型に割り当てることができないことを示す"\_ \_type"プロパティが含まれています。  
  
 または  
  
 <paramref name="input" /> いずれかを示す"\_ \_type"プロパティを含む <see cref="T:System.Object" /> または非インスタンス化可能な型 \(抽象型やインターフェイスなど\)。  
  
 または  
  
 JSON 配列を JSON シリアル化解除のターゲットとして使用するにはサポートされていない配列のようなマネージ型に変換しようとしました。  
  
 または  
  
 変換することはできません <paramref name="input" /> に <paramref name="T" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="DeserializeObject">
      <MemberSignature Language="C#" Value="public object DeserializeObject (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object DeserializeObject(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptSerializer.DeserializeObject(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">逆シリアル化する JSON 文字列。</param>
        <summary>指定した JSON 文字列をオブジェクト グラフに変換します。</summary>
        <returns>逆シリアル化されたオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この逆シリアル化メソッドは、特定の種類に、オブジェクト グラフのルートをキャストするを試みないでと同様、 <xref:System.Web.Script.Serialization.JavaScriptSerializer.Deserialize%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="input" /> の値より長く <see cref="P:System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength" />します。  
  
 または  
  
 定義されている再帰制限 <see cref="P:System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit" /> を超えています。  
  
 または  
  
 <paramref name="input" /> 予期しない文字シーケンスが含まれています。  
  
 または  
  
 <paramref name="input" /> ディクショナリ型は、文字列以外のキー値が発生しました。  
  
 または  
  
 <paramref name="input" /> 対象の型では利用できないメンバーの定義が含まれます。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="input" /> カスタム型ではなく、シリアライザーに現在関連付けられている型の競合回避モジュールは、対応するマネージ型を見つけられないかを示す"\_ \_type"プロパティが含まれています。  
  
 または  
  
 <paramref name="input" /> カスタム型ではなく、対応する JSON 文字列を逆シリアル化の結果を予想される対象の型に割り当てることができないことを示す"\_ \_type"プロパティが含まれています。  
  
 または  
  
 <paramref name="input" /> いずれかを示す"\_ \_type"プロパティを含む <see cref="T:System.Object" /> または非インスタンス化可能な型 \(抽象型やインターフェイスなど\)。  
  
 または  
  
 JSON 配列を JSON シリアル化解除のターゲットとして使用するにはサポートされていない配列のようなマネージ型に変換しようとしました。  
  
 または  
  
 変換することはできません <paramref name="input" /> 対象の型にします。</exception>
      </Docs>
    </Member>
    <Member MemberName="MaxJsonLength">
      <MemberSignature Language="C#" Value="public int MaxJsonLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxJsonLength" />
      <MemberSignature Language="DocId" Value="P:System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> クラスによって受け入れられる JSON 文字列の最大長を取得または設定します。</summary>
        <value>JSON 文字列の最大長。 既定値は 2,097,152 文字です。これは Unicode 文字列データでは 4 MB に相当します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値、 <xref:System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength%2A> のみと明示的にインスタンスを作成するのにプロパティが適用される、 <xref:System.Web.Script.Serialization.JavaScriptSerializer> クラスです。 使用して、 `jsonSerialization` 非同期通信レイヤーによって使用される内部シリアライザー インスタンスの最大の長さを設定する構成ファイルの要素。 シリアル化の構成要素の詳細については、次を参照してください。 [How to: Configure Web Services in ASP.NET AJAX](http://msdn.microsoft.com/ja-jp/ea4fb56e-bc1d-405a-9877-00cf5e552a30)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">1 よりも小さい値に設定されます。</exception>
        <altmember cref="P:System.Web.Configuration.ScriptingJsonSerializationSection.MaxJsonLength" />
      </Docs>
    </Member>
    <Member MemberName="RecursionLimit">
      <MemberSignature Language="C#" Value="public int RecursionLimit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RecursionLimit" />
      <MemberSignature Language="DocId" Value="P:System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>処理されるオブジェクト レベル数の制限値を取得または設定します。</summary>
        <value>オブジェクト レベル数。 既定値は 100 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit%2A> プロパティは、オブジェクトの階層のレベル数を参照する <xref:System.Web.Script.Serialization.JavaScriptSerializer> 、次の場合に処理されます。  
  
-   ときに、 <xref:System.Web.Script.Serialization.JavaScriptSerializer> クラスが JSON 文字列を逆シリアル化します。  
  
-   ときに、 <xref:System.Web.Script.Serialization.JavaScriptSerializer> クラスがシリアル化中に、オブジェクト グラフをウォークします。  
  
 値 <xref:System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit%2A> のみと明示的にインスタンスを作成するを適用、 <xref:System.Web.Script.Serialization.JavaScriptSerializer> クラスです。 使用して、 `jsonSerialization` の非同期通信レイヤーによって使用される内部シリアライザーのインスタンスを処理するオブジェクト レベル数を設定する構成ファイルの要素。 シリアル化の構成要素の詳細については、次を参照してください。 [How to: Configure Web Services in ASP.NET AJAX](http://msdn.microsoft.com/ja-jp/ea4fb56e-bc1d-405a-9877-00cf5e552a30)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">1 よりも小さい値に設定されます。</exception>
        <altmember cref="P:System.Web.Configuration.ScriptingJsonSerializationSection.RecursionLimit" />
      </Docs>
    </Member>
    <Member MemberName="RegisterConverters">
      <MemberSignature Language="C#" Value="public void RegisterConverters (System.Collections.Generic.IEnumerable&lt;System.Web.Script.Serialization.JavaScriptConverter&gt; converters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterConverters(class System.Collections.Generic.IEnumerable`1&lt;class System.Web.Script.Serialization.JavaScriptConverter&gt; converters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters(System.Collections.Generic.IEnumerable{System.Web.Script.Serialization.JavaScriptConverter})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="converters" Type="System.Collections.Generic.IEnumerable&lt;System.Web.Script.Serialization.JavaScriptConverter&gt;" />
      </Parameters>
      <Docs>
        <param name="converters">登録するカスタムのコンバーターが格納されている配列。</param>
        <summary>カスタムのコンバーターを <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> インスタンスに登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 1 つまたは複数のカスタムのコンバーターを登録する、 <xref:System.Web.Script.Serialization.JavaScriptSerializer> インスタンスを使用して、 <xref:System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters%2A> メソッドです。 カスタムのコンバーターが登録されると、 <xref:System.Web.Script.Serialization.JavaScriptSerializer> マネージ型をシリアル化とマネージ型を JSON 文字列を逆シリアル化するコンバーターを使用します。  
  
 複数のコンバーターは、同じに登録できる <xref:System.Web.Script.Serialization.JavaScriptSerializer> インスタンス、およびこれらのコンバーターは、同じ型のサポートを指定できます。 特定の種類に対して登録されている最後のコンバーターで使用される 1 つは、その結果、 <xref:System.Web.Script.Serialization.JavaScriptSerializer> 型をシリアル化します。  
  
 カスタムのコンバーターの詳細については、次を参照してください。、 <xref:System.Web.Script.Serialization.JavaScriptConverter> クラスです。  
  
   
  
## 例  
 次の例では、カスタムのコンバーターを登録する方法、 <xref:System.Web.Script.Serialization.JavaScriptSerializer> インスタンス。 このコード例が示されている例の一部は、 <xref:System.Web.Script.Serialization.JavaScriptSerializer>クラスです。  
  
 [!code-csharp[System.Web.Script.Serialization\#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.Script.Serialization/CS/Default.aspx#1)]
 [!code-vb[System.Web.Script.Serialization\#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.Script.Serialization/VB/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="converters" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public string Serialize (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Serialize(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptSerializer.Serialize(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">シリアル化するオブジェクト。</param>
        <summary>オブジェクトを JSON 文字列に変換します。</summary>
        <returns>シリアル化された JSON 文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、 <xref:System.Web.Script.Serialization.JavaScriptSerializer> インスタンスでのカスタムのコンバーターが登録されると、型、シリアライザーの呼び出しをシリアル化する、 <xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A> JSON 文字列に変換される名前\/値ペアのディクショナリを取得します。  
  
 <xref:System.Web.Script.Serialization.JavaScriptSerializer.Serialize%2A> のインスタンスが登録されている場合またはオブジェクト グラフが複雑すぎる場合、メソッドは例外をスローできますできます <xref:System.Web.Script.Serialization.JavaScriptConverter> コンバーター再帰が発生します。  
  
   
  
## 例  
 次の例では、データ オブジェクトを逆シリアル化およびシリアル化する方法の簡単な説明を提供します。 クラス名の下に表示されるユーザーが必要です。  
  
<!-- TODO: review snippet reference  [!CODE [System.Web.Script.JavaScriptSerializer\#1](System.Web.Script.JavaScriptSerializer#1)]  -->  
  
<!-- TODO: review snippet reference  [!CODE [System.Web.Script.JavaScriptSerializer\#2](System.Web.Script.JavaScriptSerializer#2)]  -->  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">生成された JSON 文字列の値を超える <see cref="P:System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength" />します。  
  
 または  
  
 <paramref name="obj" /> 循環参照が含まれています。 循環参照には、子オブジェクトが親オブジェクトへの参照と、親オブジェクトが子オブジェクトへの参照が発生します。</exception>
        <exception cref="T:System.ArgumentException">定義されている再帰制限 <see cref="P:System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit" /> を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public void Serialize (object obj, System.Text.StringBuilder output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Serialize(object obj, class System.Text.StringBuilder output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptSerializer.Serialize(System.Object,System.Text.StringBuilder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="output" Type="System.Text.StringBuilder" />
      </Parameters>
      <Docs>
        <param name="obj">シリアル化するオブジェクト。</param>
        <param name="output">JSON 文字列を書き込むために使用される <see cref="T:System.Text.StringBuilder" /> オブジェクト。</param>
        <summary>オブジェクトをシリアル化し、生成された JSON 文字列を指定の <see cref="T:System.Text.StringBuilder" /> オブジェクトに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、 <xref:System.Web.Script.Serialization.JavaScriptSerializer> インスタンスでのカスタムのコンバーターが登録されると、型、シリアライザーの呼び出しをシリアル化する、 <xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A> JSON 文字列に変換される名前\/値ペアのディクショナリを取得します。  
  
 <xref:System.Web.Script.Serialization.JavaScriptSerializer.Serialize%2A> のインスタンスが登録されている場合またはオブジェクト グラフが複雑すぎる場合、メソッドは例外をスローできますできます <xref:System.Web.Script.Serialization.JavaScriptConverter> コンバーター再帰が発生します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">生成された JSON 文字列の値を超える <see cref="P:System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength" />します。  
  
 または  
  
 <paramref name="obj" /> 循環参照が含まれています。 循環参照には、子オブジェクトが親オブジェクトへの参照と、親オブジェクトが子オブジェクトへの参照が発生します。</exception>
        <exception cref="T:System.ArgumentException">定義されている再帰制限 <see cref="P:System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit" /> を超えています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="output" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Serialize">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>オブジェクトを JSON 文字列に変換します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>