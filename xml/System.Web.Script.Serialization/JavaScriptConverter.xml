<Type Name="JavaScriptConverter" FullName="System.Web.Script.Serialization.JavaScriptConverter">
  <TypeSignature Language="C#" Value="public abstract class JavaScriptConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit JavaScriptConverter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Script.Serialization.JavaScriptConverter" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>カスタム型コンバーターの抽象基本クラスを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Script.Serialization.JavaScriptConverter> クラスを使用すると、シリアル化を実装し、逆シリアル化のプロセスでネイティブにサポートされていないマネージ型の場合、 <xref:System.Web.Script.Serialization.JavaScriptSerializer> クラスです。 使用することも <xref:System.Web.Script.Serialization.JavaScriptConverter> シリアル化および逆シリアル化プロセスをより詳細に制御する必要がある場合。  
  
 <xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A> プロパティは、カスタムのコンバーターがコンバーターのサービスを提供する型を示します。  
  
 カスタムのコンバーターを使用する必要があることを示す、 <xref:System.Web.Script.Serialization.JavaScriptSerializer> インスタンス、インスタンスに、コンバーターを登録する必要があります。 使用している場合、 <xref:System.Web.Script.Serialization.JavaScriptSerializer> クラスを直接、使用する必要があります、 <xref:System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters%2A> コンバーターを登録します。 それ以外の場合、ECMAScript \(JavaScript\) からの Web メソッドを呼び出す場合に、カスタムのコンバーターを使用するには、するには登録を追加して、 `converters` 構成ファイル内の要素。 詳細については、「[How to: Configure Web Services in ASP.NET AJAX](http://msdn.microsoft.com/ja-jp/ea4fb56e-bc1d-405a-9877-00cf5e552a30)」を参照してください。  
  
 ときに、 <xref:System.Web.Script.Serialization.JavaScriptSerializer> インスタンスが登録されると、カスタムのコンバーターを持っている、型、シリアライザーの呼び出しをシリアル化する、 <xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A> メソッドです。 同様に、時、 <xref:System.Web.Script.Serialization.JavaScriptSerializer> インスタンスは、JavaScript Object Notation \(JSON\) 文字列を逆シリアル化しが JSON 文字列内の型のコンピューターで、シリアライザーの呼び出しに関連付けられているカスタムのコンバーターを認識、 <xref:System.Web.Script.Serialization.JavaScriptConverter.Deserialize%2A> メソッドです。  
  
   
  
## 例  
 次の例では、カスタムのコンバーターを作成する方法、 <xref:System.Web.UI.WebControls.ListItemCollection> クラスです。  
  
 [!code-csharp[System.Web.Script.Serialization\#2](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.Script.Serialization/CS/App_Code/ListItemCollectionConverter.cs#2)]
 [!code-vb[System.Web.Script.Serialization\#2](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.Script.Serialization/VB/App_Code/ListItemCollectionConverter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>When you inherit from <see cref="T:System.Web.Script.Serialization.JavaScriptConverter" />, you must override the following members:  
  
-   <see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)" />  
  
-   <see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)" />  
  
-   <see cref="P:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes" /><see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> provides the <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> method that will be used by implementers of <see cref="T:System.Web.Script.Serialization.JavaScriptConverter" />. Converter code must be able to take a value that is contained in the dictionary that the serializer passes to it, and then convert that value into an object of type <paramref name="T" />. Rather than re-implementing the custom conversion code to accomplish this, you can call the <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> method.</para>
    </block>
    <altmember cref="T:System.Web.Configuration.Converter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected JavaScriptConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptConverter.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.Script.Serialization.JavaScriptConverter" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public abstract object Deserialize (System.Collections.Generic.IDictionary&lt;string,object&gt; dictionary, Type type, System.Web.Script.Serialization.JavaScriptSerializer serializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Deserialize(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; dictionary, class System.Type type, class System.Web.Script.Serialization.JavaScriptSerializer serializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dictionary" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="serializer" Type="System.Web.Script.Serialization.JavaScriptSerializer" />
      </Parameters>
      <Docs>
        <param name="dictionary">
          <see cref="T:System.Collections.Generic.IDictionary`2" /> 名前\/値ペアとして格納されているプロパティのデータのインスタンス。</param>
        <param name="type">生成されるオブジェクトの型。</param>
        <param name="serializer">
          <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> インスタンス。</param>
        <summary>派生クラスでオーバーライドされた場合は、指定した型のオブジェクトに提供されているディクショナリを変換します。</summary>
        <returns>逆シリアル化されたオブジェクト。</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>The <see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)" /> method iterates through the values in the <paramref name="dictionary" /> parameter to construct an instance of the type requested in the <paramref name="type" /> parameter. Although a converter can directly use values from <paramref name="dictionary" />, we recommend that the converter implementer use the <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> method instead. The converter should call this method of the <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> instance available from the <paramref name="serializer" /> parameter.  
  
 The <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> method enables converter to pass a property value from <paramref name="dictionary" />, and then return a value of the expected type. In some cases, a converter for a custom type might be working with properties that themselves have registered converters (for example, type A has a property of type B, and type B is also associated with a custom converter). In that case, invoking <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> makes sure that custom converters will be recursively invoked for property data that is contained in the dictionary. When the converter has iterated through all entries in the dictionary, it returns a constructed instance of the target type.  
  
 If the converter encounters a problem during deserialization, it should throw an <see cref="T:System.InvalidOperationException" /> error that describes the problem.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IDictionary&lt;string,object&gt; Serialize (object obj, System.Web.Script.Serialization.JavaScriptSerializer serializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Serialize(object obj, class System.Web.Script.Serialization.JavaScriptSerializer serializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="serializer" Type="System.Web.Script.Serialization.JavaScriptSerializer" />
      </Parameters>
      <Docs>
        <param name="obj">シリアル化するオブジェクト。</param>
        <param name="serializer">シリアル化を担当するオブジェクト。</param>
        <summary>派生クラスでオーバーライドされた場合は、名前\/値ペアのディクショナリを作成します。</summary>
        <returns>オブジェクトのデータを表すキー\/値ペアを格納するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 カスタムのコンバーターで登録された、型をシリアル化する場合、 <xref:System.Web.Script.Serialization.JavaScriptSerializer> インスタンス起動、 <xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>The return value of <see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)" /> must be an <see cref="T:System.Collections.Generic.IDictionary`2" /> instance with zero or more name/value pairs that represent an object’s data to be converted to JSON. The converter itself does not serialize data as JSON. Instead, the converter builds a dictionary of name/value pairs that contain the property names (the string key for the dictionary) and corresponding property values (the object value in the dictionary). The <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> instance subsequently converts these to JSON.  
  
 If the converter encounters an exception, it should throw an <see cref="T:System.InvalidOperationException" /> error that describes the problem.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SupportedTypes">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerable&lt;Type&gt; SupportedTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; SupportedTypes" />
      <MemberSignature Language="DocId" Value="P:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスでオーバーライドされた場合は、サポートされる型のコレクションを取得します。</summary>
        <value>実装するオブジェクト <see cref="T:System.Collections.Generic.IEnumerable`1" /> 、コンバーターでサポートされる型を表します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A> プロパティは、コンバーターでサポートされている型を一覧表示します。 実行時に、 <xref:System.Web.Script.Serialization.JavaScriptSerializer> インスタンスでは、このプロパティを使用して、その対応するカスタムのコンバーターをマネージ型のマッピングを判断します。  
  
   
  
## 例  
 次の例では、上書きする方法、 <xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A> 派生クラスのプロパティです。 この例では、コンバーターでのみサポートしている、 <xref:System.Web.UI.WebControls.ListItemCollection> 型です。 このコード例が示されている例の一部は、 <xref:System.Web.Script.Serialization.JavaScriptConverter> クラスです。  
  
 [!code-csharp[System.Web.Script.Serialization\#3](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.Script.Serialization/CS/App_Code/ListItemCollectionConverter.cs#3)]
 [!code-vb[System.Web.Script.Serialization\#3](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.Script.Serialization/VB/App_Code/ListItemCollectionConverter.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="P:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes" /> must always return a collection, and the collection must contain at least one entry.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>