<Type Name="DataAdapter" FullName="System.Data.Common.DataAdapter">
  <TypeSignature Language="C#" Value="public class DataAdapter : System.ComponentModel.Component, System.Data.IDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataAdapter extends System.ComponentModel.Component implements class System.Data.IDataAdapter" />
  <TypeSignature Language="DocId" Value="T:System.Data.Common.DataAdapter" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.IDataAdapter</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <see cref="T:System.Data.DataSet" /> へのデータの格納およびデータ ソースの更新に使用される、一連の SQL コマンドおよびデータベース接続を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Data.Common.DataAdapter> serves as a bridge between a <xref:System.Data.DataSet> and a data source for retrieving and saving data. The <xref:System.Data.Common.DataAdapter> provides this bridge by mapping <xref:System.Data.Common.DataAdapter.Fill%2A>, which changes the data in the <xref:System.Data.DataSet> to match the data in the data source, and <xref:System.Data.IDataAdapter.Update%2A>, which changes the data in the data source to match the data in the <xref:System.Data.DataSet>.  
  
 If you are connecting to a SQL Server database, you can increase overall performance by using the <xref:System.Data.SqlClient.SqlDataAdapter> along with its associated <xref:System.Data.SqlClient.SqlCommand> and <xref:System.Data.SqlClient.SqlConnection> objects. For OLE DB\-supported data sources, use the <xref:System.Data.Common.DataAdapter> with its associated <xref:System.Data.OleDb.OleDbCommand> and <xref:System.Data.OleDb.OleDbConnection> objects. For ODBC\-supported data sources, use the <xref:System.Data.Common.DataAdapter> with its associated <xref:System.Data.Odbc.OdbcCommand> and <xref:System.Data.Odbc.OdbcConnection> objects. For Oracle databases, use the <xref:System.Data.Common.DataAdapter> with its associated <xref:System.Data.OracleClient.OracleCommand> and <xref:System.Data.OracleClient.OracleConnection> objects.  
  
 When an instance of <xref:System.Data.Common.DataAdapter> is created, the read\/write properties are set to initial values. For a list of these values, see the <xref:System.Data.Common.DataAdapter> constructor.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DataAdapter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Data.Common.DataAdapter" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 When an instance of <xref:System.Data.Common.DataAdapter> is created, the following read\/write properties are set to the following initial values.  
  
|Properties|Initial value|  
|----------------|-------------------|  
|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  
|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  
|<xref:System.Data.Common.DataAdapter.TableMappings%2A>|An array of <xref:System.Data.Common.DataAdapter.TableMappings%2A> objects.|  
  
 You can change the value of any of these properties through a separate call to the property.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DataAdapter (System.Data.Common.DataAdapter from);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Data.Common.DataAdapter from) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.#ctor(System.Data.Common.DataAdapter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="from" Type="System.Data.Common.DataAdapter" />
      </Parameters>
      <Docs>
        <param name="from">A <see cref="T:System.Data.Common.DataAdapter" /> 新しいを作成するために使用 <see cref="T:System.Data.Common.DataAdapter" />します。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Data.Common.DataAdapter" /> 、同じ型の既存のオブジェクトからのクラスです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このオーバー ロード、 <xref:System.Data.Common.DataAdapter> コンス トラクターは、使用するための .NET Framework データ プロバイダーによって複製実装で使用するようなコンス トラクターを実装する場合。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptChangesDuringFill">
      <MemberSignature Language="C#" Value="public bool AcceptChangesDuringFill { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AcceptChangesDuringFill" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を示す値かどうか <see cref="M:System.Data.DataRow.AcceptChanges" /> で呼び出される、 <see cref="T:System.Data.DataRow" /> に追加された後、 <see cref="T:System.Data.DataTable" /> のいずれかの中に、 **塗りつぶし** 操作します。</summary>
        <value>
          <see langword="true" /> 場合 <see cref="M:System.Data.DataRow.AcceptChanges" /> で呼び出される、 <see cref="T:System.Data.DataRow" />。 そうしないと <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 `false`, 、<xref:System.Data.DataRow.AcceptChanges%2A> が呼び出されないと、新しく追加された行が挿入された行として扱われます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptChangesDuringUpdate">
      <MemberSignature Language="C#" Value="public bool AcceptChangesDuringUpdate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AcceptChangesDuringUpdate" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DataAdapter.AcceptChangesDuringUpdate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定するかどうか <see cref="M:System.Data.DataRow.AcceptChanges" /> 中に呼び出されますが、 <see cref="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)" />です。</summary>
        <value>
          <see langword="true" /> 場合 <see cref="M:System.Data.DataRow.AcceptChanges" /> 中に呼び出されますが、 <see cref="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)" />。 そうしないと <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出し中に、 `Update` のメソッド、 `DataAdapter`, 、データベースは出力パラメーター、または結果セットの最初の返されたレコードとして、ADO.NET アプリケーションにデータを送信することができます。 これらの値を取得することで、更新対象となる <xref:System.Data.DataRow> 内の対応する列を更新できます。 既定では、ADO.NET の呼び出し、 `AcceptChanges` のメソッド、 `DataRow` の更新の後です。 ただし、マージする場合、更新された行に戻す別 <xref:System.Data.DataTable>, 、主キー列の元の値をすることがあります。 たとえば、id 列など、データベース内の自動インクリメント列に対応する主キー列にはデータベースが割り当てられているで割り当てられた元の値と一致しない、 `DataRow`です。 既定では、 `AcceptChanges` 、更新プログラムと元の値であった可能性があります行の後に暗黙的に呼び出されます <xref:System.Data.DataColumn.AutoIncrement%2A> ADO.NET によって割り当てられた値は失われます。 元の値を保持することができます、 `DataRow` ようにすることで `ADO.NET` を呼び出すこと `AcceptChanges` 設定で、行に対する更新プログラムを実行した後、 <xref:System.Data.Common.DataAdapter.AcceptChangesDuringUpdate%2A> プロパティを `false`, 、元の値が保護されます。  
  
> [!NOTE]
>  設定、 `AcceptChangesDuringUpdate` プロパティを `false` すべてのデータ変更に適用され、だけでなくを挿入します。 編集または同一の更新の行を削除する場合、およびへの呼び出しを抑制する `AcceptChanges` 設定ではなく、挿入、に対してのみ `AccceptChangesDuringUpdate` に `false`, のイベント ハンドラーを使用して、 `RowUpdated` のイベント、 `DataAdapter`です。 イベント ハンドラーを確認できます、 <xref:System.Data.Common.RowUpdatedEventArgs.StatementType%2A> データ変更は、挿入、およびを判別する `true`, 、設定、 <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> のプロパティ、 <xref:System.Data.Common.RowUpdatedEventArgs> に <xref:System.Data.UpdateStatus.SkipCurrentRow>します。 使用例を含む詳細については、「[Retrieving Identity or Autonumber Values](http://msdn.microsoft.com/ja-jp/d6b7f9cb-81be-44e1-bb94-56137954876d)」を参照してください。  
  
   
  
## 例  
 次の例では、`DataTable` から変更行を抽出し、<xref:System.Data.SqlClient.SqlDataAdapter> でデータ ソースを更新して、新しい ID 列値を取得します。 設定して、 `AcceptChangesDuringUpdate` のプロパティ、 <xref:System.Data.SqlClient.SqlDataAdapter> に `false` 元の自動インクリメント値を保持するために、新しいデータにマージできます元 <xref:System.Data.DataTable>, 新しい id 値が元の自動インクリメント値と一致しない場合でも、 `DataTable`です。  
  
 [!code-csharp[DataWorks SqlClient.AcceptChangesDuringUpdate\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlClient.AcceptChangesDuringUpdate/CS/source.cs#1)]
 [!code-vb[DataWorks SqlClient.AcceptChangesDuringUpdate\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlClient.AcceptChangesDuringUpdate/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneInternals">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.DataAdapter CloneInternals ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.DataAdapter CloneInternals() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.CloneInternals" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("CloneInternals() has been deprecated.  Use the DataAdapter(DataAdapter from) constructor.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DataAdapter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスのコピーを作成 <see cref="T:System.Data.Common.DataAdapter" />します。</summary>
        <returns>複製されたインスタンスの <see cref="T:System.Data.Common.DataAdapter" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは推奨されません。<xref:System.Data.Common.DataAdapter.%23ctor%2A> コンス トラクターは、このメソッドの代わりに使用する必要があります。  
  
 すべてのコマンド、 <xref:System.Data.Common.DataAdapter.TableMappings%2A>, 、 <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>, 、および <xref:System.Data.Common.DataAdapter.MissingMappingAction%2A> を複製します。 ただし、コマンドの接続はコピーが共有されません。 したがって、複製された <xref:System.Data.Common.DataAdapter> 元と同じ接続に対して使用できます。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Data.Common.DataAdapter.CloneInternals" /> in a derived class, be sure to call the base class's <see cref="M:System.Data.Common.DataAdapter.CloneInternals" /> method.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ContinueUpdateOnError">
      <MemberSignature Language="C#" Value="public bool ContinueUpdateOnError { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContinueUpdateOnError" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DataAdapter.ContinueUpdateOnError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または行の更新中にエラーと例外を生成するを発生したかどうかを指定する値を設定します。</summary>
        <value>
          <see langword="true" /> 例外を生成せずに、更新プログラムを続行するにはそれ以外の場合 <see langword="false" />します。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 `ContinueUpdateOnError` に設定されている `true`, 、行の更新中にエラーが発生したときに例外がスローされません。 行の更新はスキップされ、エラー情報に配置、 <xref:System.Data.DataRow.RowError%2A> エラー行のプロパティです。<xref:System.Data.Common.DataAdapter> に 2 行目以降の更新を続けます。  
  
 場合 `ContinueUpdateOnError` に設定されている `false`, 、行の更新中にエラーが発生したときに、例外がスローされます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTableMappings">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.DataTableMappingCollection CreateTableMappings ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.DataTableMappingCollection CreateTableMappings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.CreateTableMappings" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DataTableMappingCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>新しい <see cref="T:System.Data.Common.DataTableMappingCollection" /> を作成します。</summary>
        <returns>新しいテーブル マッピング コレクションです。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.Data.Common.DataAdapter" /> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method is called by the public <xref:System.IDisposable.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. **languageKeyword tag is not supported!!!!**  
 invokes the protected **languageKeyword tag is not supported!!!!**  
 method with the **parameterReference tag is not supported!!!!**  
 parameter set to **languageKeyword tag is not supported!!!!**  
. <xref:System.Object.Finalize%2A> invokes **languageKeyword tag is not supported!!!!**  
 with **parameterReference tag is not supported!!!!**  
 set to **languageKeyword tag is not supported!!!!**  
.  
  
 When the **parameterReference tag is not supported!!!!**  
 parameter is **languageKeyword tag is not supported!!!!**  
, this method releases all resources held by any managed objects that this <xref:System.Data.Common.DataAdapter> references. This method invokes the **languageKeyword tag is not supported!!!!**  
 method of each referenced object.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> can be called multiple times by other objects. When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been disposed of in an earlier call to <see langword="Dispose" />. For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
 For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public virtual int Fill (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.Fill(System.Data.DataSet)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">A <see cref="T:System.Data.DataSet" /> なレコードを格納して、必要に応じて、スキーマです。</param>
        <summary>内の行の更新を追加するか、 <see cref="T:System.Data.DataSet" /> データ ソースのものと一致します。</summary>
        <returns>行の数が正常に追加または内で更新、 <see cref="T:System.Data.DataSet" />です。 これは、行を返さないステートメントの影響を受ける行には含まれません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.Common.DataAdapter.Fill%2A> メソッドが関連付けられている、指定した SELECT ステートメントを使用してデータ ソースから行を取得 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> プロパティです。 SELECT ステートメントに関連付けられている接続オブジェクトは、有効である必要がありますが、開いておく必要はありません。 前に、接続が閉じられた場合 <xref:System.Data.Common.DataAdapter.Fill%2A> が呼び出されるは、データの取得を開くと、次に終了します。 接続が開いている場合の前に <xref:System.Data.Common.DataAdapter.Fill%2A> が呼び出されると、未処理のままにします。  
  
 <xref:System.Data.Common.DataAdapter.Fill%2A> 操作し、変換先に行を追加する <xref:System.Data.DataTable> 内のオブジェクト、 <xref:System.Data.DataSet>, 、作成、 <xref:System.Data.DataTable> オブジェクトのかどうかは、まだ存在しません。 作成するときに <xref:System.Data.DataTable> オブジェクト、 <xref:System.Data.Common.DataAdapter.Fill%2A> 操作が正常に列名のメタデータのみを作成します。 ただし場合、 <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> にプロパティが設定されている `AddWithKey`, 、適切な主キーおよび制約も作成します。  
  
 `SelectCommand` が OUTER JOIN の結果を返す場合、`DataAdapter` は、生成される <xref:System.Data.DataTable.PrimaryKey%2A> に <xref:System.Data.DataTable> 値を設定しません。 重複する行が正しく反映されるようにする主キーを明示的に定義する必要があります。 詳細については、「[Defining a Primary Key for a Table](http://msdn.microsoft.com/ja-jp/2ea85959-e763-4669-8bd9-46a9dab894bd)」を参照してください。  
  
 データ アダプターの設定中に重複した列が発生すると、 <xref:System.Data.DataTable>, 、パターン"columnname1"、"columnname2"、"columnname3"などを使用して、その後の列に名前が生成されます。 受信データに名前のない列が含まれている場合に置かれて、 <xref:System.Data.DataSet> に従ってパターン"Column1"、"Column2"などです。 複数の結果セットが追加されたとき、 <xref:System.Data.DataSet> 各結果セットが別のテーブルに配置されます。 整数値を指定したテーブル名 \(たとえば、"Table"、"Table1"、"Table2"およびなど\) に追加することによって追加の結果セットと呼びます。 列とテーブルの名前を使用するアプリケーションでは、これらの名前付けパターンとの競合が発生しないことを確認してください。  
  
 SELECT ステートメントが設定に使用すると、 <xref:System.Data.DataSet> 複数の結果を返すバッチの SQL ステートメントなど、エラーが含まれる結果のいずれかの場合それ以降のすべての結果はスキップされに追加されません、 <xref:System.Data.DataSet>です。  
  
 使用することができます、 <xref:System.Data.Common.DataAdapter.Fill%2A> メソッドで複数回同じ <xref:System.Data.DataTable>します。 主キーが存在する場合は、受信した行が既に存在する一致する行にマージされます。 受信した行が追加された主キーが存在しない場合、 <xref:System.Data.DataTable>です。  
  
> [!NOTE]
>  実装、複数の結果を返すバッチの SQL ステートメントを処理するときに <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> の .NET Framework Data Provider for OLE DB は、最初の結果だけのスキーマ情報を取得します。 複数の結果のスキーマ情報を取得するには使用 <xref:System.Data.Common.DbDataAdapter.Fill%2A> で、 <xref:System.Data.MissingSchemaAction> に設定 `AddWithKey`します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDataReader dataReader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable dataTable, class System.Data.IDataReader dataReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="dataReader" Type="System.Data.IDataReader" />
      </Parameters>
      <Docs>
        <param name="dataTable">A <see cref="T:System.Data.DataTable" /> なレコードを格納します。</param>
        <param name="dataReader">
          <see cref="T:System.Data.IDataReader" /> のインスタンス。</param>
        <summary>内の行の更新を追加するか、 <see cref="T:System.Data.DataTable" /> 一致するように、データ ソースを使用して、 <see cref="T:System.Data.DataTable" /> 名前と、指定した <see cref="T:System.Data.IDataReader" />します。</summary>
        <returns>行の数が正常に追加または内で更新、 <see cref="T:System.Data.DataTable" />です。 これは、行を返さないステートメントの影響を受ける行には含まれません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 「解説」を参照してください `System.Data.Common.DataAdapter.Fill(System.Data.DataSet)` の詳細。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable[] dataTables, System.Data.IDataReader dataReader, int startRecord, int maxRecords);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable[] dataTables, class System.Data.IDataReader dataReader, int32 startRecord, int32 maxRecords) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTables" Type="System.Data.DataTable[]" />
        <Parameter Name="dataReader" Type="System.Data.IDataReader" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dataTables">コレクション <see cref="T:System.Data.DataTable" /> なレコードを格納するオブジェクト。</param>
        <param name="dataReader">
          <see cref="T:System.Data.IDataReader" /> のインスタンス。</param>
        <param name="startRecord">開始レコードの 0 から始まるインデックス。</param>
        <param name="maxRecords">レコードの最大数を示す整数。</param>
        <summary>コレクション内の指定した範囲内の行の更新を追加または <see cref="T:System.Data.DataTable" /> データ ソースのものと一致するオブジェクト。</summary>
        <returns>行の数が正常に追加または内で更新、 <see cref="T:System.Data.DataTable" />です。 これは、行を返さないステートメントの影響を受ける行には含まれません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 「解説」を参照してください `System.Data.Common.DataAdapter.Fill(System.Data.DataSet)` の詳細。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataSet dataSet, string srcTable, System.Data.IDataReader dataReader, int startRecord, int maxRecords);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet, string srcTable, class System.Data.IDataReader dataReader, int32 startRecord, int32 maxRecords) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="srcTable" Type="System.String" />
        <Parameter Name="dataReader" Type="System.Data.IDataReader" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dataSet">A <see cref="T:System.Data.DataSet" /> なレコードを格納します。</param>
        <param name="srcTable">ソース テーブルの名前を示す文字列。</param>
        <param name="dataReader">
          <see cref="T:System.Data.IDataReader" /> のインスタンス。</param>
        <param name="startRecord">開始レコードの 0 から始まるインデックス。</param>
        <param name="maxRecords">レコードの最大数を示す整数。</param>
        <summary>指定された範囲内の行の更新を追加するか、 <see cref="T:System.Data.DataSet" /> 一致するように、データ ソースを使用して、 <see cref="T:System.Data.DataSet" /> と <see cref="T:System.Data.DataTable" /> 名。</summary>
        <returns>行の数が正常に追加または内で更新、 <see cref="T:System.Data.DataSet" />です。 これは、行を返さないステートメントの影響を受ける行には含まれません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 「解説」を参照してください `System.Data.Common.DataAdapter.Fill(System.Data.DataSet)` の詳細。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FillError">
      <MemberSignature Language="C#" Value="public event System.Data.FillErrorEventHandler FillError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.FillErrorEventHandler FillError" />
      <MemberSignature Language="DocId" Value="E:System.Data.Common.DataAdapter.FillError" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.FillErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>格納操作中にエラーが発生したときに返されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 **FillError** イベントにより、エラーの発生後に、fill 操作を続行する必要があるかどうかを判断します。 場合の例、 **FillError** イベントが発生する可能性は。  
  
-   追加されるデータ、 `DataSet` 有効桁数を失うことがなく、共通言語ランタイム型に変換できません。  
  
-   追加する行に適用される制約に違反するデータを格納する、 `DataColumn` で、 `DataSet`です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FillLoadOption">
      <MemberSignature Language="C#" Value="public System.Data.LoadOption FillLoadOption { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.LoadOption FillLoadOption" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DataAdapter.FillLoadOption" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.LoadOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、 <see cref="T:System.Data.LoadOption" /> 、アダプターを設定する方法を決定する、 <see cref="T:System.Data.DataTable" /> から、 <see cref="T:System.Data.Common.DbDataReader" />です。</summary>
        <value>
          <see cref="T:System.Data.LoadOption" /> 値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.LoadOption" />
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public virtual System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataSet">
          <see cref="T:System.Data.DataSet" /> データ ソースからスキーマを格納します。</param>
        <param name="schemaType">
          <see cref="T:System.Data.SchemaType" /> 値のいずれか。</param>
        <summary>追加、 <see cref="T:System.Data.DataTable" /> を指定した <see cref="T:System.Data.DataSet" /> をデータ ソースに基づいて、指定された一致するようにスキーマを構成および <see cref="T:System.Data.SchemaType" />です。</summary>
        <returns>A <see cref="T:System.Data.DataTable" /> データ ソースからスキーマ情報を格納しているオブジェクトが返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.Common.DataAdapter.FillSchema%2A> メソッドを使用してデータ ソースからスキーマを取得、 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>です。 接続オブジェクトに関連付けられている、 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 、有効である必要がありますそれを開く必要はありません。 前に、接続が閉じられて場合 <xref:System.Data.Common.DataAdapter.FillSchema%2A> が呼び出されると、オープン データを取得して、閉じられます。 接続が開いている場合の前に <xref:System.Data.Common.DataAdapter.FillSchema%2A> が呼び出されると、未処理のままにします。  
  
 A <xref:System.Data.Common.DataAdapter.FillSchema%2A> 操作を追加、 <xref:System.Data.DataTable> 変換先に <xref:System.Data.DataSet>します。 これは、後、列を追加、 <xref:System.Data.DataColumnCollection> の <xref:System.Data.DataTable>, 、次の構成と <xref:System.Data.DataColumn> プロパティ、データ ソースに存在する場合。  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>。 設定する必要があります <xref:System.Data.DataColumn.AutoIncrementStep%2A> と <xref:System.Data.DataColumn.AutoIncrementSeed%2A> とは別にします。  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DataAdapter.FillSchema%2A> 構成も、 <xref:System.Data.DataTable.PrimaryKey%2A> と <xref:System.Data.DataTable.Constraints%2A> に従って、次の規則のプロパティ。  
  
-   1 つまたは複数の主キー列がによって返された場合、 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, の主キー列として使用されている、 <xref:System.Data.DataTable>です。  
  
-   主キー列が返らない場合でも一意の列を場合は、すべての一意の列は null 値を許容場合だけ、主キーとして一意の列が使用されます。 任意の列は null を許容すると場合、 <xref:System.Data.UniqueConstraint> に追加、 <xref:System.Data.ConstraintCollection>, が、 <xref:System.Data.DataTable.PrimaryKey%2A> プロパティが設定されていません。  
  
-   主キー列がの主キー列として使用される主キー列と一意の列の両方が返される場合は、 <xref:System.Data.DataTable>です。  
  
> [!NOTE]
>  基になるデータ ストアでサポートされていない列属性はできるようにする、 <xref:System.Data.DataColumn>, 、それが原因で一部の列属性が正しく変換されません。 たとえば、 [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)] tinyint のデータ型である id 列は、一方、 <xref:System.Data.DataColumn> のみ Int16、Int32、および Int64 があることができます、 <xref:System.Data.DataColumn.AutoIncrement%2A> プロパティ セット。`FillSchema` 無視される場合に、 <xref:System.Data.DataColumn> データ ソースを正確にミラー化できません、例外はスローされません。  
  
 主キーおよび一意の制約に追加されたことに注意してください、 <xref:System.Data.ConstraintCollection> 前述の規則が、その他の制約に従って、型は追加されません。  
  
 一意のクラスター化する場合は、または SQL Server テーブルに複数の列にインデックスが定義されているされ、クラスター化インデックス内の列の名前が返されますが、主キー制約を列の個別のセットを定義します。 、または主キー列の名前を返すには、主キー インデックスの名前を指定する SELECT ステートメントでクエリ ヒントを使用します。 クエリ ヒントを指定する方法の詳細については、次を参照してください。 [Query Hint \(Transact\-SQL\)](http://msdn.microsoft.com/library/ms181714.aspx)します。  
  
 場合、 <xref:System.Data.Common.DataAdapter> 重複する列を設定中に検出すると、 <xref:System.Data.DataTable>, 、パターンを使用して、それ以降の列に名前が生成されます"*columnname*1"、"*columnname*2「,」*columnname*3"のようにします。 受信データに名前のない列が含まれている場合に置かれて、 <xref:System.Data.DataSet> に従ってパターン"Column1"、"Column2"などです。 複数の結果セットが追加されたとき、 <xref:System.Data.DataSet> 各結果セットが別のテーブルに配置されます。 整数値を指定したテーブル名 \(たとえば、"Table"、"Table1"、"Table2"およびなど\) に追加することによって追加の結果セットと呼びます。 列とテーブルの名前を使用するアプリケーションでは、これらの名前付けパターンとの競合が発生しないことを確認してください。  
  
 <xref:System.Data.Common.DataAdapter.FillSchema%2A> すべての行は返されません。 使用して、 <xref:System.Data.Common.DataAdapter.Fill%2A> 行を追加する方法、 <xref:System.Data.DataTable>です。  
  
> [!NOTE]
>  実装、複数の結果を返すバッチの SQL ステートメントを処理するときに <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> の .NET Framework Data Provider for OLE DB は、最初の結果だけのスキーマ情報を取得します。 複数の結果のスキーマ情報を取得するには使用 <xref:System.Data.Common.DbDataAdapter.Fill%2A> で、 <xref:System.Data.MissingSchemaAction> に設定 `AddWithKey`します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.Common.DataAdapter.Fill(System.Data.DataSet)" />
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType, System.Data.IDataReader dataReader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataTable FillSchema(class System.Data.DataTable dataTable, valuetype System.Data.SchemaType schemaType, class System.Data.IDataReader dataReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="dataReader" Type="System.Data.IDataReader" />
      </Parameters>
      <Docs>
        <param name="dataTable">
          <see cref="T:System.Data.DataTable" /> から入力する、 <see cref="T:System.Data.IDataReader" />です。</param>
        <param name="schemaType">
          <see cref="T:System.Data.SchemaType" /> 値のいずれか 1 つ。</param>
        <param name="dataReader">
          <see cref="T:System.Data.IDataReader" /> の入力時に、データ ソースとして使用する、 <see cref="T:System.Data.DataTable" />です。</param>
        <summary>追加、 <see cref="T:System.Data.DataTable" /> を指定した <see cref="T:System.Data.DataSet" />します。</summary>
        <returns>A <see cref="T:System.Data.DataTable" /> データ ソースからスキーマ情報を格納しているオブジェクトが返されます。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, string srcTable, System.Data.IDataReader dataReader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType, string srcTable, class System.Data.IDataReader dataReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="srcTable" Type="System.String" />
        <Parameter Name="dataReader" Type="System.Data.IDataReader" />
      </Parameters>
      <Docs>
        <param name="dataSet">
          <see cref="T:System.Data.DataTable" /> から入力する、 <see cref="T:System.Data.IDataReader" />です。</param>
        <param name="schemaType">
          <see cref="T:System.Data.SchemaType" /> 値のいずれか。</param>
        <param name="srcTable">テーブル マップに使用するソース テーブルの名前。</param>
        <param name="dataReader">
          <see cref="T:System.Data.IDataReader" /> の入力時に、データ ソースとして使用する、 <see cref="T:System.Data.DataTable" />です。</param>
        <summary>追加、 <see cref="T:System.Data.DataTable" /> を指定した <see cref="T:System.Data.DataSet" />します。</summary>
        <returns>
          <see cref="T:System.Data.DataSet" /> に追加された <see cref="T:System.Data.DataTable" /> オブジェクトのコレクションへの参照。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFillParameters">
      <MemberSignature Language="C#" Value="public virtual System.Data.IDataParameter[] GetFillParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.IDataParameter[] GetFillParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.GetFillParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>SQL SELECT ステートメントを実行するときに、ユーザーによって設定パラメーターを取得します。</summary>
        <returns>配列 <see cref="T:System.Data.IDataParameter" /> パラメーターを格納するオブジェクトがユーザーによって設定されます。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasTableMappings">
      <MemberSignature Language="C#" Value="protected bool HasTableMappings ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool HasTableMappings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.HasTableMappings" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>示すかどうか、 <see cref="T:System.Data.Common.DataTableMappingCollection" /> が作成されました。</summary>
        <returns>
          <see langword="true" /> 場合、 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 以外の場合に作成されたされた <see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MissingMappingAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingMappingAction MissingMappingAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingMappingAction MissingMappingAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DataAdapter.MissingMappingAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.MissingMappingAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>受信データに対応するテーブルまたは列を実行するアクションを決定します。</summary>
        <value>
          <see cref="T:System.Data.MissingMappingAction" /> 値のいずれか。 既定値は、<see langword="Passthrough" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.Common.DataAdapter.TableMappings%2A> プロパティは、返されるレコードの間のマスターのマップを提供し、 <xref:System.Data.DataSet>です。  
  
   
  
## 例  
 次の例では、派生クラスでは、 <xref:System.Data.OleDb.OleDbDataAdapter> し、一部のプロパティを設定します。  
  
 [!code-csharp[Classic WebData DataAdapter.MissingMappingAction Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataAdapter.MissingMappingAction Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataAdapter.MissingMappingAction Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataAdapter.MissingMappingAction Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">設定されている値が、 <see cref="T:System.Data.MissingMappingAction" /> 値。</exception>
        <altmember cref="P:System.Data.Common.DataAdapter.MissingSchemaAction" />
      </Docs>
    </Member>
    <Member MemberName="MissingSchemaAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingSchemaAction MissingSchemaAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingSchemaAction MissingSchemaAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DataAdapter.MissingSchemaAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.MissingSchemaAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>既存のときに実行するアクションを指定する <see cref="T:System.Data.DataSet" /> スキーマが受信するデータと一致しません。</summary>
        <value>
          <see cref="T:System.Data.MissingSchemaAction" /> 値のいずれか。 既定値は、<see langword="Add" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例では、派生クラスでは、 <xref:System.Data.OleDb.OleDbDataAdapter> し、一部のプロパティを設定します。  
  
 [!code-csharp[Classic WebData DataAdapter.MissingMappingAction Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataAdapter.MissingMappingAction Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataAdapter.MissingMappingAction Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataAdapter.MissingMappingAction Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">設定されている値が、 <see cref="T:System.Data.MissingSchemaAction" /> 値。</exception>
        <altmember cref="P:System.Data.Common.DataAdapter.MissingMappingAction" />
      </Docs>
    </Member>
    <Member MemberName="OnFillError">
      <MemberSignature Language="C#" Value="protected virtual void OnFillError (System.Data.FillErrorEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFillError(class System.Data.FillErrorEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.FillErrorEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Data.FillErrorEventArgs" /> オブジェクト。</param>
        <summary>エラーが発生したときに呼び出される、 <see langword="Fill" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetFillLoadOption">
      <MemberSignature Language="C#" Value="public void ResetFillLoadOption ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetFillLoadOption() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.ResetFillLoadOption" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>リセット <see cref="P:System.Data.Common.DataAdapter.FillLoadOption" /> に対する既定の状態と原因 <see cref="M:System.Data.Common.DataAdapter.Fill(System.Data.DataSet)" /> を優先する <see cref="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill" />です。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnProviderSpecificTypes">
      <MemberSignature Language="C#" Value="public virtual bool ReturnProviderSpecificTypes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReturnProviderSpecificTypes" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DataAdapter.ReturnProviderSpecificTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定するかどうか、 <see langword="Fill" /> メソッドは、プロバイダー固有の値または共通の CLS 準拠の値を返す必要があります。</summary>
        <value>
          <see langword="true" /> 場合、 <see langword="Fill" /> メソッドは、プロバイダー固有の値を返す必要があります。 そうしないと <see langword="false" /> 共通の CLS 準拠の値を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定値は `false` です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeAcceptChangesDuringFill">
      <MemberSignature Language="C#" Value="public virtual bool ShouldSerializeAcceptChangesDuringFill ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldSerializeAcceptChangesDuringFill() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>指定するかどうか、 <see cref="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill" /> プロパティを永続化する必要があります。</summary>
        <returns>
          <see langword="true" /> 場合、 <see cref="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill" /> プロパティが永続化された <see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeFillLoadOption">
      <MemberSignature Language="C#" Value="public virtual bool ShouldSerializeFillLoadOption ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldSerializeFillLoadOption() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>指定するかどうか、 <see cref="P:System.Data.Common.DataAdapter.FillLoadOption" /> プロパティを永続化する必要があります。</summary>
        <returns>
          <see langword="true" /> 場合、 <see cref="P:System.Data.Common.DataAdapter.FillLoadOption" /> プロパティが永続化された <see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeTableMappings">
      <MemberSignature Language="C#" Value="protected virtual bool ShouldSerializeTableMappings ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShouldSerializeTableMappings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.ShouldSerializeTableMappings" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>1 つかどうかを決定以上 <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクトが存在し、永続化する必要があります。</summary>
        <returns>
          <see langword="true" /> 1 つまたは複数 <see cref="T:System.Data.Common.DataTableMapping" /> オブジェクトが存在します。 それ以外の場合 <see langword="false" />します。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDataAdapter.TableMappings">
      <MemberSignature Language="C#" Value="System.Data.ITableMappingCollection System.Data.IDataAdapter.TableMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.ITableMappingCollection System.Data.IDataAdapter.TableMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.ITableMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ソース テーブルをデータセットのテーブルにマップする方法を示します。</summary>
        <value>返されたレコードの間のマスターのマップを提供するコレクションと <see cref="T:System.Data.DataSet" />です。 既定値は空のコレクションです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Data.Common.DataAdapter> のインスタンスが <xref:System.Data.IDataAdapter> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 詳細については、次を参照してください。 <xref:System.Data.IDataAdapter.TableMappings%2A>します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TableMappings">
      <MemberSignature Language="C#" Value="public System.Data.Common.DataTableMappingCollection TableMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DataTableMappingCollection TableMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DataAdapter.TableMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DataTableMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ソース テーブルの間のマスターのマップを提供するコレクションと取得 <see cref="T:System.Data.DataTable" />します。</summary>
        <value>返されたレコードの間のマスターのマップを提供するコレクションと <see cref="T:System.Data.DataSet" />です。 既定値は空のコレクションです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 変更を調整する場合に、 <xref:System.Data.Common.DataAdapter> を使用して、 <xref:System.Data.Common.DataTableMappingCollection> コレクションで使用される列名、データ ソースが使用する列名に関連付ける、 <xref:System.Data.DataSet>です。  
  
   
  
## 例  
 次のコードの例では、派生クラスでは、 <xref:System.Data.OleDb.OleDbDataAdapter>, を追加するには、 <xref:System.Data.Common.DataTableMapping> オブジェクトをその <xref:System.Data.Common.DataAdapter.TableMappings%2A> の収集と表示の一覧にマップされているソース テーブルです。 この例では、 <xref:System.Data.OleDb.OleDbDataAdapter> が既に作成されています。  
  
 [!code-csharp[Classic WebData DataAdapter.TableMappings Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataAdapter.TableMappings Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataAdapter.TableMappings Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataAdapter.TableMappings Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public virtual int Update (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Update(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">
          <see cref="T:System.Data.DataSet" /> データ ソースを更新するために使用します。</param>
        <summary>それぞれの INSERT、UPDATE、または DELETE ステートメントの問い合わせについては、挿入、更新、または削除された、指定した行に各 <see cref="T:System.Data.DataSet" /> から、 <see cref="T:System.Data.DataTable" /> "Table"という名前</summary>
        <returns>正常に更新された行の数、 <see cref="T:System.Data.DataSet" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 更新プログラムは、行ごとに実行されます。 すべての挿入、変更、および削除された行に対して、 <xref:System.Data.Common.DataAdapter.Update%2A> メソッドで行われた変更の種類を判断する \(挿入、更新または削除\) します。 変更の種類に応じて、 `Insert`, 、`Update,` または `Delete` コマンド テンプレートを変更した行のデータ ソースに反映されるまで実行します。 アプリケーションを呼び出すと、 <xref:System.Data.Common.DataAdapter.Update%2A> 、メソッド、 <xref:System.Data.Common.DataAdapter> を調べ、 <xref:System.Data.DataRow.RowState%2A> プロパティで構成されているインデックスの順序に基づいて、各行の繰り返し必要な INSERT、UPDATE、または DELETE ステートメントを実行し、 <xref:System.Data.DataSet>です。 たとえば、 <xref:System.Data.Common.DataAdapter.Update%2A> 後に、INSERT ステートメントとし、もう 1 つの DELETE ステートメントでは、期限内の行の順序付けに DELETE ステートメントを実行することがあります、 <xref:System.Data.DataTable>です。  
  
 これらのステートメントがバッチ処理として実行されていないことに注意してください。各行が個別に更新されます。 アプリケーションが呼び出すことができます、 <xref:System.Data.DataSet.GetChanges%2A> ときステートメントの種類のシーケンスを制御する必要があります \(たとえば、更新する前に挿入\)。 詳細については、「[Updating the Database with a DataAdapter and the DataSet](http://msdn.microsoft.com/ja-jp/d1bd9a8c-0e29-40e3-bda8-d89176b72fb1)」を参照してください。  
  
 かどうかには、INSERT、UPDATE、または DELETE ステートメントが指定されていませんが、 <xref:System.Data.Common.DataAdapter.Update%2A> メソッドには、例外が生成されます。 ただし、作成、 <xref:System.Data.SqlClient.SqlCommandBuilder> または <xref:System.Data.OleDb.OleDbCommandBuilder> に設定した場合、単一テーブルの更新の SQL ステートメントを自動的に生成するオブジェクト、 `SelectCommand` .NET Framework データ プロバイダーのプロパティです。 によって設定しない追加の SQL ステートメントが次に、生成された、 **CommandBuilder**します。 この生成ロジックではキー列の情報に含まれる、 <xref:System.Data.DataSet>です。 詳細については、「[Automatically Generated Commands](http://msdn.microsoft.com/ja-jp/6e3fb8b5-373b-4f9e-ab03-a22693df8e91)」を参照してください。  
  
 <xref:System.Data.Common.DataAdapter.Update%2A> メソッドは、更新プログラムを実行する前に最初のマッピングに示されたテーブルから行を取得します。<xref:System.Data.Common.DataAdapter.Update%2A> の値を使用して、行を更新、 <xref:System.Data.IDbCommand.UpdatedRowSource%2A> プロパティです。 返されるその他の行は無視されます。  
  
 すべてのデータが読み込まれた後、 <xref:System.Data.DataSet>, 、 <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> イベントを発生すると、ユーザーが、整合性を検査できるようにする <xref:System.Data.DataSet> 行といずれかのコマンドによって返されたパラメーターを出力します。 行が正常に更新した後、その行に対する変更が受け入れられます。  
  
 使用する場合 <xref:System.Data.Common.DataAdapter.Update%2A>, 、実行の順序を次に示します。  
  
1.  値、 <xref:System.Data.DataRow> パラメーターの値に移動します。  
  
2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> イベントが発生します。  
  
3.  コマンドを実行します。  
  
4.  コマンドに設定されている場合 `FirstReturnedRecord`, 、最初に返された結果に格納し、 <xref:System.Data.DataRow>です。  
  
5.  出力パラメーターがある場合に置かれて、 <xref:System.Data.DataRow>です。  
  
6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> イベントが発生します。  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A?displayProperty=fullName> が呼ばれたとき。 これは、両方が生成されます、 <xref:System.Data.DataTable.RowChanging?displayProperty=fullName> と <xref:System.Data.DataTable.RowChanged?displayProperty=fullName> 、更新されたイベント <xref:System.Data.DataRow>です。  
  
 各コマンドに関連付けられている、 <xref:System.Data.Common.DataAdapter> 関連付けられているパラメーターのコレクションを持ちます。 パラメーターがを通じて現在の行にマップされて、 `SourceColumn` と `SourceVersion` a.NET データ プロバイダーのプロパティ `Parameter` クラスです。`SourceColumn` 指す、 <xref:System.Data.DataTable> 列を <xref:System.Data.Common.DataAdapter> 参照を現在の行のパラメーターの値を取得します。  
  
 `SourceColumn` すべてのテーブル マップを適用する前に、マップされていない列の名前を参照します。 場合 `SourceColumn` は存在しない列に、実行されるアクションは、次のいずれかに依存 <xref:System.Data.MissingMappingAction> 値。  
  
|列挙値|実行されるアクション|  
|---------|----------------|  
|`MissingMappingAction.Passthrough`|ソース列名とテーブル名を使用して、 <xref:System.Data.DataSet> マッピングが存在しない場合。|  
|`MissingMappingAction.Ignore`|A <xref:System.SystemException> が生成されます。 マッピングが明示的に設定すると、入力パラメーターのマップが存在しない、通常、エラーの結果です。|  
|`MissingMappingAction.Error`|A <xref:System.SystemException> が生成されます。|  
  
 `SourceColumn` 出力の値にマップするプロパティを使用しても、または入力\/出力パラメーターにバックアップ、 `DataSet`です。 存在しない列を参照する場合、例外が生成されます。  
  
 `SourceVersion` の .NET データ プロバイダーのプロパティ `Parameter` クラスは、列の値の元の現在、または提案済みバージョンを使用するかどうかを決定します。 この機能は元の値は、オプティミスティック同時実行制御違反を確認する UPDATE ステートメントの WHERE 句によく使用されます。  
  
 呼び出す、 <xref:System.Data.DataSet.AcceptChanges%2A> メソッドまたは <xref:System.Data.DataTable.AcceptChanges%2A> メソッドのすべての変更がコミットされます、 <xref:System.Data.DataSet> または <xref:System.Data.DataTable>です。 前にこれらのメソッドのいずれかが呼び出された場合、 <xref:System.Data.Common.DbDataAdapter.Update%2A> メソッドが呼び出されるは変更されませんコミットされたときに、 <xref:System.Data.Common.DbDataAdapter.Update%2A> からさらに変更が加えられたしない限り、メソッドが呼び出されます <xref:System.Data.DataSet.AcceptChanges%2A> または <xref:System.Data.DataTable.AcceptChanges%2A> 呼び出されました。  
  
> [!NOTE]
>  行の更新中にエラーが発生した場合は、例外がスローされ、更新プログラムの実行は廃止されました。 エラーが発生した場合に例外を生成せず、更新操作を続行するには、設定、 <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> プロパティを `true` 呼び出す前に <xref:System.Data.Common.DbDataAdapter.Update%2A>します。 内の行ごとにエラーに応答することがありますも、 `RowUpdated` DataAdapter のイベントです。 内で例外を生成せず、更新操作を続行する、 `RowUpdated` イベント、設定、 <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> のプロパティ、 <xref:System.Data.Common.RowUpdatedEventArgs> に <xref:System.Data.UpdateStatus.Continue>します。  
>   
>  \[データ ソースに反映されるすべての列に対して<xref:System.Data.Common.DataAdapter.Update%2A>, には、パラメーターを追加する必要があります、 `InsertCommand`, 、`UpdateCommand`, 、または `DeleteCommand`です。`SourceColumn` 列の名前に、パラメーターのプロパティを設定する必要があります。 この設定は、パラメーターの値が、手動で設定されていないが、現在処理されている行の特定の列から取得したことを示します。  
  
   
  
## 例  
 次のコードの例では、派生クラス <xref:System.Data.OleDb.OleDbDataAdapter>, 、 <xref:System.Data.Common.DataAdapter.Update%2A> データ ソース。  
  
 [!code-csharp[Classic WebData DataAdapter.IDataAdapter.Update Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataAdapter.IDataAdapter.Update Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">ソース テーブルが正しくありません。</exception>
        <exception cref="T:System.Data.DBConcurrencyException">INSERT、UPDATE、または DELETE ステートメントを実行しようとすると、影響を受けた 0 個のレコードが発生しました。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>追加、 <see cref="T:System.Data.DataTable" /> を指定した <see cref="T:System.Data.DataSet" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Fill">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>内の行の更新を追加するか、 <see cref="T:System.Data.DataSet" /> データ ソースのものと一致します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Data.Common.DataAdapter" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>