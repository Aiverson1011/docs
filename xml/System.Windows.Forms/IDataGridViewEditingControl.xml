<Type Name="IDataGridViewEditingControl" FullName="System.Windows.Forms.IDataGridViewEditingControl">
  <TypeSignature Language="C#" Value="public interface IDataGridViewEditingControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataGridViewEditingControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.IDataGridViewEditingControl" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>セルでホストされるコントロールの一般的な機能を定義、 <see cref="T:System.Windows.Forms.DataGridView" />です。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 このインターフェイスは、コントロールなど、 <xref:System.Windows.Forms.DataGridViewComboBoxEditingControl> と <xref:System.Windows.Forms.DataGridViewTextBoxEditingControl>, 、対応するによってホストされる <xref:System.Windows.Forms.DataGridView> セルなど <xref:System.Windows.Forms.DataGridViewComboBoxCell> と <xref:System.Windows.Forms.DataGridViewTextBoxCell>, が編集モードの場合、します。  
  
 セルの編集コントロールのセットをホストできる種類の <xref:System.Windows.Forms.DataGridViewCell.EditType%2A> プロパティを <xref:System.Type> 編集を表す種類を制御します。 セルが編集モードに入るときに、次の手順が実行されます。  
  
1.  <xref:System.Windows.Forms.DataGridView> コントロール編集コントロール型のインスタンスを作成します。  
  
2.  <xref:System.Windows.Forms.DataGridView> コントロールは、セル <xref:System.Windows.Forms.DataGridViewCell.InitializeEditingControl%2A> メソッドです。 セルの値を編集中のコントロールに転送するには、このメソッドをオーバーライドできます。  
  
3.  <xref:System.Windows.Forms.DataGridView> コントロールが編集コントロールを呼び出す <xref:System.Windows.Forms.IDataGridViewEditingControl.ApplyCellStyleToEditingControl%2A> メソッドを呼び出し、セルの現在のスタイルにします。 セルの外観と一致するように編集コントロールの外観を初期化するには、このメソッドを実装することができます。  
  
4.  <xref:System.Windows.Forms.DataGridView> コントロールが編集コントロールを呼び出す <xref:System.Windows.Forms.IDataGridViewEditingControl.PrepareEditingControlForEdit%2A> メソッドです。 コントロールの値を選択するなどの編集コントロールの最終的な調整を行うには、このメソッドを実装することができます。  
  
 実装の詳細については <xref:System.Windows.Forms.IDataGridViewEditingControl>, を参照してください [How to: Host Controls in Windows Forms DataGridView Cells](http://msdn.microsoft.com/ja-jp/e79a9d4e-64ec-41f5-93ec-f5492633cbb2)します。  
  
 などの型をセル <xref:System.Windows.Forms.DataGridViewCheckBoxCell> 編集のコントロール実装をホストせずに値を指定するためのユーザー インターフェイス \(UI\) を提供する、 <xref:System.Windows.Forms.IDataGridViewEditingCell> インターフェイスです。 ここで UI をセルが編集モードにするかどうかに関係なく表示されます。  
  
 などの他のセル型 <xref:System.Windows.Forms.DataGridViewButtonCell>, 、UI を提供するが、ユーザーが指定した値を格納しないでください。 この場合、セルの種類は実装しない <xref:System.Windows.Forms.IDataGridViewEditingCell> 編集コントロールをホストすることもできます。  
  
   
  
## 例  
 次のコード例から派生したこのインターフェイスの実装を提供する <xref:System.Windows.Forms.DateTimePicker>です。 この例で使用できる例の一部である [How to: Host Controls in Windows Forms DataGridView Cells](http://msdn.microsoft.com/ja-jp/e79a9d4e-64ec-41f5-93ec-f5492633cbb2)です。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCalendarColumn\#300](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/CS/datagridviewcalendarcolumn.cs#300)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn\#300](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/VB/datagridviewcalendarcolumn.vb#300)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.DataGridView" />
    <altmember cref="T:System.Windows.Forms.DataGridViewCell" />
    <altmember cref="T:System.Windows.Forms.IDataGridViewEditingCell" />
    <altmember cref="T:System.Windows.Forms.DataGridViewComboBoxCell" />
    <altmember cref="T:System.Windows.Forms.DataGridViewComboBoxEditingControl" />
    <altmember cref="T:System.Windows.Forms.DataGridViewTextBoxCell" />
    <altmember cref="P:System.Windows.Forms.DataGridViewCell.EditType" />
    <altmember cref="T:System.Windows.Forms.DataGridViewTextBoxEditingControl" />
  </Docs>
  <Members>
    <Member MemberName="ApplyCellStyleToEditingControl">
      <MemberSignature Language="C#" Value="public void ApplyCellStyleToEditingControl (System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyCellStyleToEditingControl(class System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataGridViewEditingControl.ApplyCellStyleToEditingControl(System.Windows.Forms.DataGridViewCellStyle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataGridViewCellStyle" Type="System.Windows.Forms.DataGridViewCellStyle" />
      </Parameters>
      <Docs>
        <param name="dataGridViewCellStyle">
          <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> UI のモデルとして使用します。</param>
        <summary>指定されたセル スタイルを使用して一貫性を維持するには、\(UI\) コントロールのユーザー インターフェイスを変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 通常、このメソッドの実装は、設定、編集コントロールのフォント、背景色、前景色\] などの UI プロパティの対応するプロパティの値に、 `dataGridViewCellStyle`, 、これは、コントロールをホストしているセルのスタイル。  
  
   
  
## 例  
 次のコード例では、このメンバーの実装を提供します。 この例で使用できる例の一部である [How to: Host Controls in Windows Forms DataGridView Cells](http://msdn.microsoft.com/ja-jp/e79a9d4e-64ec-41f5-93ec-f5492633cbb2)です。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCalendarColumn\#303](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/CS/datagridviewcalendarcolumn.cs#303)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn\#303](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/VB/datagridviewcalendarcolumn.vb#303)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
      </Docs>
    </Member>
    <Member MemberName="EditingControlDataGridView">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridView EditingControlDataGridView { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridView EditingControlDataGridView" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlDataGridView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、 <see cref="T:System.Windows.Forms.DataGridView" /> セルを格納しています。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DataGridView" /> を含む、 <see cref="T:System.Windows.Forms.DataGridViewCell" /> 編集されている; <see langword="null" /> が不要に関連付けられている場合 <see cref="T:System.Windows.Forms.DataGridView" />します。</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="EditingControlFormattedValue">
      <MemberSignature Language="C#" Value="public object EditingControlFormattedValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object EditingControlFormattedValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlFormattedValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはエディターによって変更されているセルの書式設定された値を設定します。</summary>
        <value>
          <see cref="T:System.Object" /> セルの書式設定された値を表します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 書式設定された値は、コントロールのユーザー インターフェイスに表示されている値を表します。 書式設定された値が絶対値、データ型も、コントロールに含まれる実際の値を異なる可能性があります。  
  
   
  
## 例  
 次のコード例では、このメンバーの実装を提供します。 この例で使用できる例の一部である [How to: Host Controls in Windows Forms DataGridView Cells](http://msdn.microsoft.com/ja-jp/e79a9d4e-64ec-41f5-93ec-f5492633cbb2)です。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCalendarColumn\#301](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/CS/datagridviewcalendarcolumn.cs#301)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn\#301](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/VB/datagridviewcalendarcolumn.vb#301)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.IDataGridViewEditingControl.GetEditingControlFormattedValue(System.Windows.Forms.DataGridViewDataErrorContexts)" />
        <altmember cref="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlValueChanged" />
      </Docs>
    </Member>
    <Member MemberName="EditingControlRowIndex">
      <MemberSignature Language="C#" Value="public int EditingControlRowIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 EditingControlRowIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlRowIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはホストしているセルの親の行のインデックスを設定します。</summary>
        <value>親の行が存在しない場合、セル、または – 1 を含む行のインデックス。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.IDataGridViewEditingControl> インターフェイスは、対応するを定義しません `ColumnIndex` プロパティです。 使用することができます、 <xref:System.Windows.Forms.IDataGridViewEditingControl.EditingControlDataGridView%2A> 親を取得するプロパティを <xref:System.Windows.Forms.DataGridView> 制御および使用して、 <xref:System.Windows.Forms.DataGridView.CurrentCellAddress%2A?displayProperty=fullName> アクティブなセルの行と列のインデックスを決定するプロパティです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="T:System.Windows.Forms.DataGridViewRow" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.RowIndex" />
      </Docs>
    </Member>
    <Member MemberName="EditingControlValueChanged">
      <MemberSignature Language="C#" Value="public bool EditingControlValueChanged { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EditingControlValueChanged" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlValueChanged" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定の編集コントロールの値が、ホストしているセルの値と異なるかどうかを示す値。</summary>
        <value>
          <see langword="true" /> コントロールの値がセルの値と異なる場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.IDataGridViewEditingControl.EditingControlValueChanged%2A> にプロパティが設定されている `true` ホストしているセルの状態が変更されており、ユーザー インターフェイス \(UI\) がこの値の変更を反映するように更新する必要があることを示します。 所有しているセルまたはテーブルにするには、このプロパティをリセット `false` 更新後です。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Returning <see langword="true" /> in your implementation of this property does not automatically change the displayed value. When the value changes in the editing control, you must notify the <see cref="T:System.Windows.Forms.DataGridView" /> of the change by passing <see langword="true" /> to the <see cref="M:System.Windows.Forms.DataGridView.NotifyCurrentCellDirty(System.Boolean)" /> method.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlFormattedValue" />
        <altmember cref="M:System.Windows.Forms.IDataGridViewEditingControl.GetEditingControlFormattedValue(System.Windows.Forms.DataGridViewDataErrorContexts)" />
      </Docs>
    </Member>
    <Member MemberName="EditingControlWantsInputKey">
      <MemberSignature Language="C#" Value="public bool EditingControlWantsInputKey (System.Windows.Forms.Keys keyData, bool dataGridViewWantsInputKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EditingControlWantsInputKey(valuetype System.Windows.Forms.Keys keyData, bool dataGridViewWantsInputKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataGridViewEditingControl.EditingControlWantsInputKey(System.Windows.Forms.Keys,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
        <Parameter Name="dataGridViewWantsInputKey" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="keyData">A <see cref="T:System.Windows.Forms.Keys" /> が押されたキーを表します。</param>
        <param name="dataGridViewWantsInputKey">
          <see langword="true" /> ときに、 <see cref="T:System.Windows.Forms.DataGridView" /> 処理する必要が、 <see cref="T:System.Windows.Forms.Keys" /> で <c>keyData</c>。 そうしないと、 <see langword="false" />です。</param>
        <summary>指定したキーが通常の入力キーの編集コントロールを処理するか、キーの特別なかを判定、 <see cref="T:System.Windows.Forms.DataGridView" /> 処理する必要があります。</summary>
        <returns>
          <see langword="true" /> 指定したキーが編集中のコントロールで処理する必要が通常の入力キーである場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 編集コントロールが入力されるキーは、コントロールで処理するかを判断するには、このメソッドを実装しで処理するキーを入力するか、 <xref:System.Windows.Forms.DataGridView>です。  
  
 <xref:System.Windows.Forms.IDataGridViewEditingControl.EditingControlWantsInputKey%2A> メソッドは、 <xref:System.Windows.Forms.DataGridView>です。<xref:System.Windows.Forms.DataGridView> に適合 `true` の `dataGridViewWantsInputKey` 処理できる場合、 `keyData`です。 編集コントロールを使用できる場合、 <xref:System.Windows.Forms.DataGridView> 処理、 `keyData`, 、<xref:System.Windows.Forms.IDataGridViewEditingControl.EditingControlWantsInputKey%2A> 返す必要があります `false` と `dataGridViewWantsInputKey` は `true`です。 他の実装 <xref:System.Windows.Forms.IDataGridViewEditingControl.EditingControlWantsInputKey%2A> を無視しても、 `dataGridViewWantsInputKey` の値 `true` を処理し、 `keyData` 編集コントロールにします。  
  
   
  
## 例  
 次のコード例では、このメンバーの実装を提供します。 この例で使用できる例の一部である [How to: Host Controls in Windows Forms DataGridView Cells](http://msdn.microsoft.com/ja-jp/e79a9d4e-64ec-41f5-93ec-f5492633cbb2)です。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCalendarColumn\#305](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/CS/datagridviewcalendarcolumn.cs#305)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn\#305](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/VB/datagridviewcalendarcolumn.vb#305)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="EditingPanelCursor">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Cursor EditingPanelCursor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Cursor EditingPanelCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.IDataGridViewEditingControl.EditingPanelCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マウス ポインターが上にあるときに使用するカーソルを取得、 <see cref="P:System.Windows.Forms.DataGridView.EditingPanel" /> 編集コントロールの上です。</summary>
        <value>A <see cref="T:System.Windows.Forms.Cursor" /> 編集パネルを使用するマウス ポインターを表します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 編集パネルは、 <xref:System.Windows.Forms.Panel> タイミングをホストで制御、編集、 <xref:System.Windows.Forms.DataGridView> コントロールが編集モードにします。 実際の編集コントロールは、ある編集パネルのすべての領域を対応していません。 ここで、 <xref:System.Windows.Forms.IDataGridViewEditingControl.EditingPanelCursor%2A> 実装では、マウス ポインターがコントロール上ではありませんが、パネル上ときに使用するカーソルを返す必要があります。 通常、コントロールが使用する、同じカーソルを取得するされます。 設定する必要があります、ポインターがコントロール上に表示されるカーソルを変更する場合、 <xref:System.Windows.Forms.Control.Cursor%2A> プロパティです。 これを設定するには、コンス トラクターで、 <xref:System.Windows.Forms.IDataGridViewEditingControl> 実装では、または設定すること、 <xref:System.Windows.Forms.IDataGridViewEditingControl.PrepareEditingControlForEdit%2A> 実装します。  
  
   
  
## 例  
 次のコード例では、このメンバーの実装を提供します。 この例で使用できる例の一部である [How to: Host Controls in Windows Forms DataGridView Cells](http://msdn.microsoft.com/ja-jp/e79a9d4e-64ec-41f5-93ec-f5492633cbb2)です。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCalendarColumn\#311](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/CS/datagridviewcalendarcolumn.cs#311)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn\#311](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/VB/datagridviewcalendarcolumn.vb#311)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="T:System.Windows.Forms.Panel" />
        <altmember cref="P:System.Windows.Forms.Control.Cursor" />
        <altmember cref="M:System.Windows.Forms.IDataGridViewEditingControl.PrepareEditingControlForEdit(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetEditingControlFormattedValue">
      <MemberSignature Language="C#" Value="public object GetEditingControlFormattedValue (System.Windows.Forms.DataGridViewDataErrorContexts context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetEditingControlFormattedValue(valuetype System.Windows.Forms.DataGridViewDataErrorContexts context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataGridViewEditingControl.GetEditingControlFormattedValue(System.Windows.Forms.DataGridViewDataErrorContexts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Windows.Forms.DataGridViewDataErrorContexts" />
      </Parameters>
      <Docs>
        <param name="context">ビットごとの組み合わせ <see cref="T:System.Windows.Forms.DataGridViewDataErrorContexts" /> データが必要になるコンテキストを指定する値。</param>
        <summary>セルの書式設定された値を取得します。</summary>
        <returns>
          <see cref="T:System.Object" /> セルの内容の書式設定されたバージョンを表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 書式設定された値は、コントロールのユーザー インターフェイスに表示されている値を表します。 書式設定された値が絶対値、データ型も、コントロールに含まれる実際の値を異なる可能性があります。  
  
 コントロールの書式設定された値を設定するには、使用、 <xref:System.Windows.Forms.IDataGridViewEditingControl.EditingControlFormattedValue%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Changing the return value in your implementation of this method does not automatically change the displayed value. When the value changes in the editing control, you must notify the <see cref="T:System.Windows.Forms.DataGridView" /> of the change by passing <see langword="true" /> to the <see cref="M:System.Windows.Forms.DataGridView.NotifyCurrentCellDirty(System.Boolean)" /> method.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlFormattedValue" />
        <altmember cref="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlValueChanged" />
      </Docs>
    </Member>
    <Member MemberName="PrepareEditingControlForEdit">
      <MemberSignature Language="C#" Value="public void PrepareEditingControlForEdit (bool selectAll);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PrepareEditingControlForEdit(bool selectAll) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataGridViewEditingControl.PrepareEditingControlForEdit(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectAll" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="selectAll">
          <see langword="true" /> すべてのセルの内容を選択それ以外の場合、 <see langword="false" />です。</param>
        <summary>編集するためには、現在選択されているセルを準備します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの目的では、編集するため、コントロールとその内容を準備します。 たとえば、データの末尾にカーソルを置くか、内容を整列する方法を変更することができます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="RepositionEditingControlOnValueChange">
      <MemberSignature Language="C#" Value="public bool RepositionEditingControlOnValueChange { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RepositionEditingControlOnValueChange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.IDataGridViewEditingControl.RepositionEditingControlOnValueChange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはセルの内容を値が変更されるたびに再配置する必要があるかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" /> 内容の位置を変更する必要がある場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 状況によっては、値が変更されたときにセルの内容の位置を変更する必要があります。 たとえば、セルの内容は、テキストをラップし、内容のサイズが大きくなるときの位置を変更する必要があります。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
  </Members>
</Type>