<Type Name="MenuItem" FullName="System.Windows.Forms.MenuItem">
  <TypeSignature Language="C#" Value="public class MenuItem : System.Windows.Forms.Menu" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MenuItem extends System.Windows.Forms.Menu" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.MenuItem" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Menu</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Click")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DesignTimeVisible(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>内で選択されている個々 の項目を表す、 <see cref="T:System.Windows.Forms.MainMenu" /> または <see cref="T:System.Windows.Forms.ContextMenu" />です。<see cref="T:System.Windows.Forms.ToolStripMenuItem" /> は置換し、する機能を追加、 <see cref="T:System.Windows.Forms.MenuItem" /> 以前のバージョンの制御 <see cref="T:System.Windows.Forms.MenuItem" /> を選択した場合に下位互換性と将来の使用の両方を保持します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 ために、 <xref:System.Windows.Forms.MenuItem> 表示するに追加する必要があります、 <xref:System.Windows.Forms.MainMenu> または <xref:System.Windows.Forms.ContextMenu>です。 追加できるサブメニューを作成する <xref:System.Windows.Forms.MenuItem> オブジェクトを <xref:System.Windows.Forms.Menu.MenuItems%2A> 、親 <xref:System.Windows.Forms.MenuItem>します。  
  
 <xref:System.Windows.Forms.MenuItem> クラスには、メニュー項目の機能と外観を構成するためのプロパティが用意されています。 メニュー項目の横にあるチェック マークを表示するには、使用、 <xref:System.Windows.Forms.MenuItem.Checked%2A> プロパティです。 この機能を使用すると、相互に排他的なメニュー項目の一覧で選択されているメニュー項目を識別します。 テキストの色を設定するためのメニュー項目のセットがある場合など、 <xref:System.Windows.Forms.TextBox> コントロールが使用できます、 <xref:System.Windows.Forms.MenuItem.Checked%2A> 色が現在選択されているかを識別するプロパティです。<xref:System.Windows.Forms.MenuItem.Shortcut%2A> を押すことによりメニュー項目を選択することができます、キーの組み合わせを定義するプロパティを使用することができます。  
  
 <xref:System.Windows.Forms.MenuItem> 使用するマルチ ドキュメント インターフェイス \(MDI\) アプリケーションに表示されるオブジェクトを <xref:System.Windows.Forms.MenuItem.MergeMenu%2A> 統合メニュー構造を作成するには、その子フォームの MDI のメニューにマージするメソッドが親のです。<xref:System.Windows.Forms.MenuItem> できませんで再利用できる複数の場所で同時になど、 <xref:System.Windows.Forms.MainMenu> と <xref:System.Windows.Forms.ContextMenu>, 、使用することができます、 <xref:System.Windows.Forms.MenuItem.CloneMenu%2A> のコピーを作成する方法、 <xref:System.Windows.Forms.MenuItem> 別の場所で使用するためです。  
  
 <xref:System.Windows.Forms.MenuItem.Popup> イベントでは、メニューが表示される前にタスクを実行することができます。 たとえば、コードの状態に基づいてメニュー項目を非表示には、このイベントのイベント ハンドラーを作成できます。<xref:System.Windows.Forms.MenuItem.Select> イベントでは、ユーザーがメニュー項目上にマウス ポインターを置いた場合に、アプリケーションのメニュー項目の詳細なヘルプを提供するなどのタスクを実行することができます。  
  
   
  
## 例  
 次のコード例では、フォームのメニュー構造を作成します。 追加するコード例、 <xref:System.Windows.Forms.MenuItem> トップレベルのメニュー項目を表す、フォント サイズを選択するためにサブメニュー項目を追加し、そのメニュー項目を表すアプリケーションの規模の大小のフォントを選択する 2 つのサブメニュー項目を追加します。 例では、必要があること、 <xref:System.Windows.Forms.MainMenu> という名前のオブジェクト `mainMenu1` 4 <xref:System.Windows.Forms.MenuItem> という名前のオブジェクト `menuItem1`, 、`menuItem2`, 、`menuItem3`, 、および `menuItem4`です。  
  
 [!code-cpp[Classic Menu Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu Example/CS/source.cs#1)]
 [!code-vb[Classic Menu Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.MainMenu" />
    <altmember cref="T:System.Windows.Forms.Menu" />
    <altmember cref="T:System.Windows.Forms.MenuMerge" />
    <altmember cref="T:System.Windows.Forms.ContextMenu" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItem ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初期化、 <see cref="T:System.Windows.Forms.MenuItem" /> キャプションを空白にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 空白を作成すると <xref:System.Windows.Forms.MenuItem> このコンス トラクターを使用してプロパティとメソッドの <xref:System.Windows.Forms.MenuItem> クラスの動作と外観を指定する、 <xref:System.Windows.Forms.MenuItem>です。  
  
   
  
## 例  
 次のコード例を作成、 <xref:System.Windows.Forms.MenuItem> コンス トラクターのバージョンを使用します。  
  
 [!code-cpp[Classic MenuItem.MenuItem Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MenuItem Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MenuItem Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MenuItem Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MenuItem Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MenuItem Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItem (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">メニュー項目のキャプションです。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Windows.Forms.MenuItem" /> メニュー項目のキャプションを指定したクラスです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 メニュー項目のキャプションを指定すると、 `text` パラメーターも指定できますアクセス キー、アクセス キーとして使用する文字の前に、'&' 文字を配置することで。 たとえば、アクセス キーとして"File"に"F"を指定するにするはメニュー項目のキャプションを指定"& ファイル"です。 この機能を使用すると、メニューのキーボード ナビゲーションを提供します。  
  
 設定、 `text` パラメーターを"`-`"により、メニュー アイテムは、標準のメニュー項目ではなく、区切り記号 \(水平線\) として表示されます。  
  
   
  
## 例  
 次のコード例を作成、 <xref:System.Windows.Forms.MenuItem> は構築時にメニュー項目のキャプションを指定します。  
  
 [!code-cpp[Classic MenuItem.MenuItem1 Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MenuItem1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MenuItem1 Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MenuItem1 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MenuItem1 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MenuItem1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItem (string text, EventHandler onClick);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, class System.EventHandler onClick) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.#ctor(System.String,System.EventHandler)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="onClick" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="text">メニュー項目のキャプションです。</param>
        <param name="onClick">
          <see cref="T:System.EventHandler" /> を処理する、 <see cref="E:System.Windows.Forms.MenuItem.Click" /> メニュー項目のイベントです。</param>
        <summary>指定されたキャプションとイベント ハンドラーを使用してクラスの新しいインスタンスを初期化、 <see cref="E:System.Windows.Forms.MenuItem.Click" /> メニュー項目のイベントです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 メニュー項目のキャプションを指定すると、 `text` パラメーターも指定できますアクセス キーは '&'、アクセス キーとして使用する文字の前に配置することで。 たとえば、アクセス キーとして"File"に"F"を指定するにするはメニュー項目のキャプションを指定"& ファイル"です。 この機能を使用すると、メニューのキーボード ナビゲーションを提供します。  
  
 設定、 `text` パラメーターを"`-`"により、メニュー アイテムは、標準のメニュー項目ではなく、区切り記号 \(水平線\) として表示されます。  
  
 さらに、このコンス トラクターを使用を処理するデリゲートを指定する、 <xref:System.Windows.Forms.MenuItem.Click> イベントを作成するメニュー項目です。<xref:System.EventHandler> このコンス トラクターに渡すことが処理できるイベント ハンドラーを呼び出すように構成する、 <xref:System.Windows.Forms.MenuItem.Click> イベントです。 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例を作成、 <xref:System.Windows.Forms.MenuItem> キャプションを指定して、オブジェクトと <xref:System.EventHandler> を処理するイベント ハンドラーに接続されているデリゲート、 <xref:System.Windows.Forms.MenuItem.Click> メニュー項目のイベントです。  
  
 [!code-cpp[Classic MenuItem.MenuItem2 Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MenuItem2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MenuItem2 Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MenuItem2 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MenuItem2 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MenuItem2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItem (string text, System.Windows.Forms.MenuItem[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, class System.Windows.Forms.MenuItem[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.#ctor(System.String,System.Windows.Forms.MenuItem[])" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="items" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="text">メニュー項目のキャプションです。</param>
        <param name="items">配列 <see cref="T:System.Windows.Forms.MenuItem" /> メニュー項目のサブメニュー項目を含むオブジェクト。</param>
        <summary>メニュー項目のキャプション、メニュー項目に対して定義されているサブメニュー項目の配列を指定して、クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 メニュー項目のキャプションを指定すると、 `text` パラメーターも指定できますアクセス キーは '&'、アクセス キーとして使用する文字の前に配置することで。 たとえば、アクセス キーとして"File"に"F"を指定するにするはメニュー項目のキャプションを指定"& ファイル"です。 この機能を使用すると、メニューのキーボード ナビゲーションを提供します。  
  
 設定、 `text` パラメーターを"`-`"により、メニュー アイテムは、標準のメニュー項目ではなく、区切り記号 \(水平線\) として表示されます。  
  
 `items` パラメーターでは、このメニュー項目のサブメニューを定義するメニュー項目の配列を代入することができます。 配列内の各項目は、それに割り当てられたメニュー項目の配列をこともできます。 これにより、完全なメニュー構造を作成し、メニュー アイテムのコンス トラクターに割り当てることができます。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例オブジェクトを作成、指定されたキャプション、イベントを処理するメソッドに接続されているイベント ハンドラーで各メニュー項目のサブメニュー項目の配列にします。  
  
 [!code-cpp[Classic MenuItem.MenuItem4 Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MenuItem4 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MenuItem4 Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MenuItem4 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MenuItem4 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MenuItem4 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItem (string text, EventHandler onClick, System.Windows.Forms.Shortcut shortcut);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, class System.EventHandler onClick, valuetype System.Windows.Forms.Shortcut shortcut) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.#ctor(System.String,System.EventHandler,System.Windows.Forms.Shortcut)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="onClick" Type="System.EventHandler" />
        <Parameter Name="shortcut" Type="System.Windows.Forms.Shortcut" />
      </Parameters>
      <Docs>
        <param name="text">メニュー項目のキャプションです。</param>
        <param name="onClick">
          <see cref="T:System.EventHandler" /> を処理する、 <see cref="E:System.Windows.Forms.MenuItem.Click" /> メニュー項目のイベントです。</param>
        <param name="shortcut">
          <see cref="T:System.Windows.Forms.Shortcut" /> 値のいずれか 1 つ。</param>
        <summary>メニュー項目のキャプション、イベント ハンドラー、関連付けられているショートカット キーを指定して、クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 メニュー項目のキャプションを指定すると、 `text` パラメーターも指定できますアクセス キーは '&'、アクセス キーとして使用する文字の前に配置することで。 たとえば、アクセス キーとして"File"に"F"を指定するにするはメニュー項目のキャプションを指定"& ファイル"です。 この機能を使用すると、メニューのキーボード ナビゲーションを提供します。 このコンス トラクターでは、アクセス キーをキーボード ナビゲーションを提供するだけでなく、ショートカット キーを指定することもできます。 ショートカット キーを使用すると、メニュー項目をアクティブ化に使用できるキーの組み合わせを指定できます。  
  
 設定、 `text` パラメーターを"`-`"により、メニュー アイテムは、標準のメニュー項目ではなく、区切り記号 \(水平線\) として表示されます。  
  
 さらに、このコンス トラクターを使用を処理するデリゲートを指定する、 <xref:System.Windows.Forms.MenuItem.Click> イベントを作成するメニュー項目です。<xref:System.EventHandler> このコンス トラクターに渡すことが処理できるイベント ハンドラーを呼び出すように構成する、 <xref:System.Windows.Forms.MenuItem.Click> イベントです。 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、指定されたキャプション、ショートカット キー、およびメニュー項目のイベントを処理するメソッドに接続されているイベント ハンドラーで、オブジェクトを作成します。  
  
 [!code-cpp[Classic MenuItem.MenuItem3 Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MenuItem3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MenuItem3 Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MenuItem3 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MenuItem3 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MenuItem3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItem (System.Windows.Forms.MenuMerge mergeType, int mergeOrder, System.Windows.Forms.Shortcut shortcut, string text, EventHandler onClick, EventHandler onPopup, EventHandler onSelect, System.Windows.Forms.MenuItem[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Forms.MenuMerge mergeType, int32 mergeOrder, valuetype System.Windows.Forms.Shortcut shortcut, string text, class System.EventHandler onClick, class System.EventHandler onPopup, class System.EventHandler onSelect, class System.Windows.Forms.MenuItem[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.#ctor(System.Windows.Forms.MenuMerge,System.Int32,System.Windows.Forms.Shortcut,System.String,System.EventHandler,System.EventHandler,System.EventHandler,System.Windows.Forms.MenuItem[])" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mergeType" Type="System.Windows.Forms.MenuMerge" />
        <Parameter Name="mergeOrder" Type="System.Int32" />
        <Parameter Name="shortcut" Type="System.Windows.Forms.Shortcut" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="onClick" Type="System.EventHandler" />
        <Parameter Name="onPopup" Type="System.EventHandler" />
        <Parameter Name="onSelect" Type="System.EventHandler" />
        <Parameter Name="items" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="mergeType">
          <see cref="T:System.Windows.Forms.MenuMerge" /> 値のいずれか。</param>
        <param name="mergeOrder">位置を相対的にマージされたメニューでこのメニュー項目になります。</param>
        <param name="shortcut">
          <see cref="T:System.Windows.Forms.Shortcut" /> 値のいずれか 1 つ。</param>
        <param name="text">メニュー項目のキャプションです。</param>
        <param name="onClick">
          <see cref="T:System.EventHandler" /> を処理する、 <see cref="E:System.Windows.Forms.MenuItem.Click" /> メニュー項目のイベントです。</param>
        <param name="onPopup">
          <see cref="T:System.EventHandler" /> を処理する、 <see cref="E:System.Windows.Forms.MenuItem.Popup" /> メニュー項目のイベントです。</param>
        <param name="onSelect">
          <see cref="T:System.EventHandler" /> を処理する、 <see cref="E:System.Windows.Forms.MenuItem.Select" /> メニュー項目のイベントです。</param>
        <param name="items">配列 <see cref="T:System.Windows.Forms.MenuItem" /> メニュー項目のサブメニュー項目を含むオブジェクト。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Windows.Forms.MenuItem" /> キャプションを指定して、クラスは定義されているイベント ハンドラーを <see cref="E:System.Windows.Forms.MenuItem.Click" />, 、<see cref="E:System.Windows.Forms.MenuItem.Select" /> と <see cref="E:System.Windows.Forms.MenuItem.Popup" /> イベント、ショートカット キー、マージ型であるとメニュー項目に対して指定された順序です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 メニュー項目のキャプションを指定すると、 `text` パラメーターも指定できますアクセス キーは '&'、アクセス キーとして使用する文字の前に配置することで。 たとえば、アクセス キーとして"File"に"F"を指定するにするはメニュー項目のキャプションを指定"& ファイル"です。 この機能を使用すると、メニューのキーボード ナビゲーションを提供します。  
  
 設定、 `text` パラメーターを"`-`"により、メニュー アイテムは、標準のメニュー項目ではなく、区切り記号 \(水平線\) として表示されます。  
  
 `items` パラメーターでは、このメニュー項目のサブメニューを定義するメニュー項目の配列を代入することができます。 配列内の各項目は、それに割り当てられたメニュー項目の配列をこともできます。 これにより、完全なメニュー構造を作成し、メニュー アイテムのコンス トラクターに割り当てることができます。  
  
 `mergeType` と `mergeOrder` パラメーターを使用すると、このメニュー項目を別のメニューにメニュー項目がマージされた場合の動作を決定します。 指定した値に応じて、 `mergeType` パラメーター、することができますか、追加、削除、置換、またはメニュー項目とのマージされたメニューとサブメニュー項目をマージします。`mergeOrder` パラメーターは、メニューをマージするときに、作成されるメニュー項目を配置する場所を指定します。  
  
 このコンス トラクターを使用して作成するさらに、 <xref:System.Windows.Forms.MenuItem> メニュー項目のクリックを処理するコードにイベント ハンドラーに接続されていることがあるとします。<xref:System.EventHandler> を処理できるイベント ハンドラーを呼び出すために構成するこのコンス トラクターに渡すことか、 <xref:System.Windows.Forms.MenuItem.Click> イベントです。 このコンス トラクターのバージョンを使用すると、接続することも、 <xref:System.Windows.Forms.MenuItem.Popup> と <xref:System.Windows.Forms.MenuItem.Select> イベントでこのメニュー項目が選択されている場合を確認します。 サブメニュー項目の横にチェック マークを表示または、有効またはアプリケーションの状態に基づいてメニュー項目を無効にするかどうかを決定するなどのタスクは、これらのイベントを使用できます。<xref:System.Windows.Forms.MenuItem.Select> と <xref:System.Windows.Forms.MenuItem.Click> に対してのみイベントが発生する <xref:System.Windows.Forms.MenuItem> であるオブジェクトがないメニュー項目を親。 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、キャプションとショートカット キーを持つメニュー項目を作成します。 メニュー項目も定義されているイベント ハンドラーには、 <xref:System.Windows.Forms.MenuItem.Popup>, 、<xref:System.Windows.Forms.MenuItem.Click>, 、および <xref:System.Windows.Forms.MenuItem.Select> イベントです。 このメニュー項目をマージした場合は、メニュー項目をマージ順序 0 を使用してメニューに追加します。  
  
 [!code-cpp[Classic MenuItem.MenuItem5 Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MenuItem5 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MenuItem5 Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MenuItem5 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MenuItem5 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MenuItem5 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MenuItem.Popup" />
        <altmember cref="E:System.Windows.Forms.MenuItem.Select" />
        <altmember cref="E:System.Windows.Forms.MenuItem.Click" />
        <altmember cref="P:System.Windows.Forms.MenuItem.MergeType" />
        <altmember cref="P:System.Windows.Forms.MenuItem.MergeOrder" />
      </Docs>
    </Member>
    <Member MemberName="BarBreak">
      <MemberSignature Language="C#" Value="public bool BarBreak { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BarBreak" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.BarBreak" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を示す値かどうか、 <see cref="T:System.Windows.Forms.MenuItem" /> 新しい行に配置されます \(に追加されたメニュー項目の場合、 <see cref="T:System.Windows.Forms.MainMenu" /> オブジェクト\) または新しい列 \(サブメニュー項目またはメニュー項目に表示される、 <see cref="T:System.Windows.Forms.ContextMenu" />\)。</summary>
        <value>
          <see langword="true" /> メニュー項目は、新しい行または新しい列内に配置されている場合 <see langword="false" /> メニュー項目が既定の位置のままの場合。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することができます、 <xref:System.Windows.Forms.MenuItem.BarBreak%2A> プロパティを各メニュー項目の垂直方向の一覧で水平方向の代わりに互いの横に配置されているメニューを作成します。 トップレベルのメニュー項目の複数の行を含むメニュー バーの作成にこのプロパティを使用することもできます。  
  
 このプロパティが異なる、 <xref:System.Windows.Forms.MenuItem.Break%2A> バーが各メニュー項目の左端に表示されることでプロパティを持つ、 <xref:System.Windows.Forms.MenuItem.Break%2A> プロパティに設定 `true`します。 バーはメニュー項目は、トップレベルのメニュー項目ではない場合にのみ表示されます。  
  
   
  
## 例  
 次のコード例を作成、 <xref:System.Windows.Forms.MenuItem> 2 つのサブメニュー項目を含む。 垂直方向に使用する代わりに 2 つのサブメニュー項目が水平方向に表示、 <xref:System.Windows.Forms.MenuItem.BarBreak%2A> プロパティです。  
  
 [!code-cpp[Classic MenuItem.BarBreak Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.BarBreak Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.BarBreak Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.BarBreak Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.BarBreak Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.BarBreak Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.Break" />
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public bool Break { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Break" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Break" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>項目は、新しい行に配置するかどうかを示す値を取得または \(に追加されたメニュー項目の場合、 <see cref="T:System.Windows.Forms.MainMenu" /> オブジェクト\) または新しい列 \(メニュー項目に表示されるサブメニュー項目の <see cref="T:System.Windows.Forms.ContextMenu" />\)。</summary>
        <value>
          <see langword="true" /> メニュー項目は、新しい行または新しい列内に配置されている場合 <see langword="false" /> メニュー項目が既定の位置のままの場合。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することができます、 <xref:System.Windows.Forms.MenuItem.Break%2A> プロパティを各メニューの垂直方向の一覧で水平方向の代わりに互いの横に配置されているメニューを作成します。 トップレベルのメニュー項目の複数の行を含むメニュー バーの作成にこのプロパティを使用することもできます。  
  
   
  
## 例  
 次のコード例では、上の行と下の行に 1 つのメニュー項目の 2 つのトップレベルのメニュー項目をメニューを作成します。  
  
 [!code-cpp[Classic MenuItem.Break Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Break Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Break Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Break Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Break Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Break Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.BarBreak" />
      </Docs>
    </Member>
    <Member MemberName="Checked">
      <MemberSignature Language="C#" Value="public bool Checked { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Checked" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Checked" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メニュー項目のテキストの横にチェック マークを表示するかどうかを示す値を取得または設定します。</summary>
        <value>
          <see langword="true" /> メニュー項目の横にあるチェック マークがある場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することができます、 <xref:System.Windows.Forms.MenuItem.Checked%2A> 組み合わせることで、アプリケーションの状態を提供するためのメニューでその他のメニュー項目を含むプロパティ。 たとえば、アプリケーション内のテキストに表示されるフォントのサイズを確認する項目のグループ内のメニュー項目のチェック マークを配置できます。 使用することも、 <xref:System.Windows.Forms.MenuItem.Checked%2A> プロパティを相互に排他的なメニュー項目のグループの選択されたメニュー項目を識別します。  
  
> [!NOTE]
>  このプロパティを設定できません `true` トップレベルのメニュー項目にします。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Windows.Forms.MenuItem.Checked%2A> プロパティをアプリケーションで状態を指定します。 この例では、内のテキストの色を指定するメニュー項目のグループが使用される、 <xref:System.Windows.Forms.TextBox> コントロールです。 によって提供されるイベント ハンドラーが使用される、 <xref:System.Windows.Forms.MenuItem.Click> メニュー項目を 3 つのイベントです。 各メニュー項目テキストの色を指定する `menuItemRed` \(赤\)、 `menuItemGreen` \(緑\)、または `menuItemBlue` \(青\)。 イベント ハンドラーは、どのメニュー項目がクリックしてされたかを決定し、選択されたメニュー項目にあるチェック マークを配置、フォームのテキスト色を変更 <xref:System.Windows.Forms.TextBox> コントロールです。 この例では、する必要があります、 <xref:System.Drawing> 名前空間にこのコードが置かれているフォームに追加されています。 例では、する必要があります、 <xref:System.Windows.Forms.TextBox> という名前に、このコード例があるフォームに追加された `textBox1`します。  
  
 [!code-cpp[Classic MenuItem.Checked Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Checked Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Checked Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Checked Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Checked Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Checked Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="T:System.Windows.Forms.MenuItem" /> トップレベルのメニューまたはに子が存在します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event EventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MenuItem.Click" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メニュー項目に対して定義されているショートカット キーまたはアクセス キーを使用して、そのメニュー項目がクリックまたは選択されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Windows.Forms.MenuItem.Click> event occurs when this <xref:System.Windows.Forms.MenuItem> is clicked by the user. This event also occurs if the user selects the menu item using the keyboard and presses the Enter key. It can also occur if an access key or shortcut key is pressed that is associated with the <xref:System.Windows.Forms.MenuItem>. For more information about handling events, see [Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f).  
  
> [!NOTE]
>  If the <xref:System.Windows.Forms.Menu.MenuItems%2A> property for the <xref:System.Windows.Forms.MenuItem> contains any items, this event is not raised. This event is not raised for parent menu items.  
  
   
  
## 例  
 The following code example demonstrates how to use the <xref:System.Windows.Forms.MenuItem.Click> event to perform tasks when a <xref:System.Windows.Forms.MenuItem> is clicked. The example creates a <xref:System.Windows.Forms.MainMenu> called `mainMenu1` and adds two <xref:System.Windows.Forms.MenuItem> objects, `topMenuItem` \(**languageKeyword tag is not supported!!!!**  
\) and `menuItem1` \(**languageKeyword tag is not supported!!!!**  
\). It then connects the **languageKeyword tag is not supported!!!!**  
 event to the `menuItem1_Click` event handler. When the user clicks the **languageKeyword tag is not supported!!!!**  
 menu item, an <xref:System.Windows.Forms.OpenFileDialog> is initialized and displayed. The example requires that you have created a <xref:System.Windows.Forms.Form> named `Form1`.  
  
 [!code-cpp[MenuItemClick\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItemClick/CPP/form1.cpp#1)]
 [!code-csharp[MenuItemClick\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItemClick/CS/form1.cs#1)]
 [!code-vb[MenuItemClick\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItemClick/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneMenu">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MenuItem CloneMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.MenuItem CloneMenu() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.CloneMenu" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.Windows.Forms.MenuItem" /> のコピーを作成します。</summary>
        <returns>A <see cref="T:System.Windows.Forms.MenuItem" /> 複製されたメニュー項目を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.MenuItem> オブジェクトのコピーを入手する場合を除き、複数の場所では使用できません、 <xref:System.Windows.Forms.MenuItem>です。 使用するためには、このメニュー項目のコピーを作成するには、このメソッドを呼び出すことができます、 <xref:System.Windows.Forms.ContextMenu>, 、<xref:System.Windows.Forms.MainMenu>, 、またはその他の <xref:System.Windows.Forms.MenuItem> 、アプリケーション内で。 メニュー項目を複製する際、元のメニュー項目で指定されたイベント ハンドラーは引き続き機能メニュー項目の複製されたバージョンです。 たとえば、作成した場合、 <xref:System.Windows.Forms.MenuItem> で接続されているその <xref:System.Windows.Forms.MenuItem.Click> イベントをイベント ハンドラーです。 メニュー項目を複製する際、複製されたメニュー項目は、同じイベント ハンドラーを呼び出します。  
  
   
  
## 例  
 次のコード例のクローン、 <xref:System.Windows.Forms.MenuItem> で表示、 <xref:System.Windows.Forms.ContextMenu>です。 この例では、する必要があります、 <xref:System.Windows.Forms.MenuItem> 内に存在する、 <xref:System.Windows.Forms.MainMenu> の名前を持つフォームで `menuItem1` と、 <xref:System.Windows.Forms.ContextMenu> という名前のオブジェクト `contextMenu1` フォームにも存在します。  
  
 [!code-cpp[Classic MenuItem.CloneMenu Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.CloneMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.CloneMenu Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.CloneMenu Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.CloneMenu Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.CloneMenu Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneMenu">
      <MemberSignature Language="C#" Value="protected void CloneMenu (System.Windows.Forms.MenuItem itemSrc);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CloneMenu(class System.Windows.Forms.MenuItem itemSrc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.CloneMenu(System.Windows.Forms.MenuItem)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemSrc" Type="System.Windows.Forms.MenuItem" />
      </Parameters>
      <Docs>
        <param name="itemSrc">
          <see cref="T:System.Windows.Forms.MenuItem" /> をコピーするメニュー項目を表します。</param>
        <summary>指定したコピーを作成 <see cref="T:System.Windows.Forms.MenuItem" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既に作成したショートカット メニューまたは別のメニュー構造で使用するため、アプリケーション内でメニュー項目のコピーを作成するには、このメソッドを呼び出します。 このバージョンの <xref:System.Windows.Forms.MenuItem.CloneMenu%2A> を使用すると、特定の <xref:System.Windows.Forms.MenuItem> メソッドを呼び出しているメニュー項目ではなくコピーします。 このメソッドを使用するには、新しい初期化 <xref:System.Windows.Forms.MenuItem> 別のコピーを持つオブジェクト <xref:System.Windows.Forms.MenuItem>します。 メニュー項目を複製する際、元のメニュー項目で指定されたイベント ハンドラーは引き続き機能メニュー項目の複製されたバージョンです。 たとえば、作成した場合、 <xref:System.Windows.Forms.MenuItem> で接続されているその <xref:System.Windows.Forms.MenuItem.Click> イベントをイベント ハンドラーです。 メニュー項目を複製する際、複製されたメニュー項目は、同じイベント ハンドラーを呼び出します。  
  
   
  
## 例  
 次のコード例は、新しいを初期化 <xref:System.Windows.Forms.MenuItem> 、既存のコピーを持つ <xref:System.Windows.Forms.MenuItem> で使用されている、 <xref:System.Windows.Forms.MainMenu> フォームにします。 コードは、複製された追加 <xref:System.Windows.Forms.MenuItem> に、 <xref:System.Windows.Forms.ContextMenu> 形式にします。 この例では、する必要があります、 <xref:System.Windows.Forms.MenuItem> が既に作成され、名前付き `menuItem1` ことと、 <xref:System.Windows.Forms.ContextMenu> コントロールを作成して名前付き `contextMenu1`です。  
  
 [!code-cpp[Classic MenuItem.CloneMenu1 Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.CloneMenu1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.CloneMenu1 Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.CloneMenu1 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.CloneMenu1 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.CloneMenu1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultItem">
      <MemberSignature Language="C#" Value="public bool DefaultItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DefaultItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.DefaultItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メニュー項目が既定のメニュー項目かどうかを示す値を取得または設定します。</summary>
        <value>
          <see langword="true" /> メニュー項目がメニューの既定の項目である場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 メニューの既定のメニュー項目を太字にするとします。 サブメニューをダブルクリックしたときに、既定の項目を格納していると既定の項目が選択されているサブメニューは閉じられます。 使用することができます、 <xref:System.Windows.Forms.MenuItem.DefaultItem%2A> メニューまたはショートカット メニューに必要とされる既定のアクションを示すプロパティです。  
  
   
  
## 例  
 次のコード例では、2 つのサブメニュー項目を含むメニュー項目を作成します。 設定する例を `menuItem2` 、メニュー項目を使用して既定として、 <xref:System.Windows.Forms.MenuItem.DefaultItem%2A> プロパティです。  
  
 [!code-cpp[Classic MenuItem.DefaultItem Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.DefaultItem Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.DefaultItem Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.DefaultItem Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.DefaultItem Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.DefaultItem Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.Windows.Forms.MenuItem" /> で使用されていたリソース \(メモリを除く\) を解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Call <xref:System.Windows.Forms.MenuItem.Dispose%2A> when you are finished using the <xref:System.Windows.Forms.MenuItem>. The <xref:System.Windows.Forms.MenuItem.Dispose%2A> method leaves the <xref:System.Windows.Forms.MenuItem> in an unusable state. After calling <xref:System.Windows.Forms.MenuItem.Dispose%2A>, you must release all references to the <xref:System.Windows.Forms.MenuItem> so the memory it was occupying can be reclaimed by garbage collection.  
  
> [!NOTE]
>  Always call <xref:System.Windows.Forms.MenuItem.Dispose%2A> before you release your last reference to the <xref:System.Windows.Forms.MenuItem>. Otherwise, the resources the <xref:System.Windows.Forms.MenuItem> is using will not be freed until garbage collection calls the <xref:System.Windows.Forms.MenuItem> object's destructor.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawItemEventHandler DrawItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawItemEventHandler DrawItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MenuItem.DrawItem" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに、 <see cref="P:System.Windows.Forms.MenuItem.OwnerDraw" /> にメニュー項目のプロパティが設定されている <see langword="true" /> メニュー項目の描画に要求されるとします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.DrawItemEventArgs> に渡される引数、 <xref:System.Windows.Forms.MenuItem.DrawItem> イベント ハンドラーを提供する <xref:System.Drawing.Graphics> オブジェクト描画およびメニュー項目の画面でグラフィカルなその他の操作を実行することができます。 このイベント ハンドラーを使用すると、アプリケーションのニーズを満たすカスタム メニューを作成します。 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、処理、 <xref:System.Windows.Forms.MenuItem.DrawItem> イベントです。 この例は、項目を使用してメニューを描画、 <xref:System.Drawing.Brush> と <xref:System.Drawing.Font>, 、次に、描画と、 <xref:System.Drawing.Rectangle> メニュー アイテムの周囲します。 使用して、描画が実行、 <xref:System.Drawing.Graphics> のイベント ハンドラーに渡されるオブジェクト、 <xref:System.Windows.Forms.DrawItemEventArgs> パラメーター。 この例では、初期化する必要があります、 <xref:System.Windows.Forms.MenuItem.OwnerDraw%2A> する項目のプロパティを `true`します。 例については、C\# の場合、後に、フォームのコンス トラクターでは、次のコードを追加 `InitializeComponent`, 、このイベントをフックするのには。  
  
 `this.menuItem1.DrawItem += new DrawItemEventHandler(menuItem1_DrawItem);`  
  
 [!code-cpp[OwnerDraw example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/OwnerDraw example/CPP/form1.cpp#1)]
 [!code-csharp[OwnerDraw example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/OwnerDraw example/CS/form1.cs#1)]
 [!code-vb[OwnerDraw example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/OwnerDraw example/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.OwnerDraw" />
        <altmember cref="E:System.Windows.Forms.MenuItem.MeasureItem" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メニュー項目が有効であるどうかを示す値を取得または設定します。</summary>
        <value>
          <see langword="true" /> メニュー項目が有効の場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Windows.Forms.MenuItem> は灰色の状態を示すために無効になっているが表示されます。 親メニュー項目が無効にすると、すべてのサブメニュー項目は表示されません。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.MenuItem.Popup> を決定するイベントかどうか <xref:System.Windows.Forms.MenuItem> に表示されるメニューが表示される前に、オブジェクトの切り取り、コピー、サポートを提供し、削除の各操作が有効にします。 例では、どう `textBox1`, 、 <xref:System.Windows.Forms.TextBox> フォームの control 権限、無効になってに入力フォーカス、およびが有効にする前に選択したテキスト、 <xref:System.Windows.Forms.MenuItem> オブジェクトです。 この例には、その 3 つが必要です <xref:System.Windows.Forms.MenuItem> オブジェクトは、名前付きで作成されます `menuCut`, 、`menuCopy`, 、および `menuDelete` が作成されています。  
  
 [!code-cpp[MenuItem.Popup\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItem.Popup/CPP/form1.cpp#1)]
 [!code-csharp[MenuItem.Popup\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItem.Popup/CS/form1.cs#1)]
 [!code-vb[MenuItem.Popup\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItem.Popup/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public int Index { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Index" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Index" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>親メニュー内のメニュー項目の位置を示す値を取得または設定します。</summary>
        <value>親メニュー内のメニュー項目の位置を表す 0 から始まるインデックス番号。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、親メニューのメニュー項目のコレクションのメニュー項目のインデックス位置を提供します。 このプロパティを使用して、そのメニュー内の別の場所にメニュー項目の位置を変更することができます。 作成するときに、このプロパティを使用することもできる、 <xref:System.Windows.Forms.MenuItem> の作成時にメニュー構造内での位置を指定します。  
  
   
  
## 例  
 次のコード例では、メニュー内の 2 つのメニュー項目の位置を切り替えます。 次のコード例には、2 つが必要です <xref:System.Windows.Forms.MenuItem> オブジェクトが名前付き作成 `menuItem1` と `menuItem2`です。`menuItem1` メニューで、1 つ下のメニュー項目に移動中に `menuItem2` の 1 つの位置を移動します。  
  
 [!code-cpp[Classic MenuItem.Index Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Index Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Index Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Index Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Index Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Index Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">割り当てられた値は、0 未満か、項目数より大きいです。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsParent">
      <MemberSignature Language="C#" Value="public override bool IsParent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsParent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.IsParent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メニュー項目に子メニュー項目が含まれているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> メニュー項目に子メニュー項目が含まれている場合 <see langword="false" /> メニューが独立メニュー項目である場合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを使用することができます、 <xref:System.Windows.Forms.MenuItem.Parent%2A> 全体のメニュー構造を使用してコード内を移動するプロパティです。  
  
   
  
## 例  
 次のコード例に関連付けられているすべてのサブメニューがあるかどうかを決定する <xref:System.Windows.Forms.MenuItem> という `menuItem1`します。 サブメニューがある場合、無効に設定して、 <xref:System.Windows.Forms.MenuItem.Enabled%2A> プロパティを `false`します。 例では、必要があること、 <xref:System.Windows.Forms.MenuItem> 名前付き作成 `menuItem1`します。  
  
 [!code-cpp[Classic MenuItem.IsParent Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.IsParent Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.IsParent Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.IsParent Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.IsParent Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.IsParent Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MdiList">
      <MemberSignature Language="C#" Value="public bool MdiList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MdiList" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.MdiList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メニュー項目に、関連付けられているフォーム内に表示されるマルチ ドキュメント インターフェイス \(MDI\) 子ウィンドウのリストを表示するかどうかを示す値を取得または設定します。</summary>
        <value>
          <see langword="true" /> このメニュー項目に MDI 子ウィンドウの一覧が表示される場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 MDI 子ウィンドウのリストを表示するメニュー項目を選択すると、リストがメニュー項目のサブメニューとして表示されます。 ウィンドウのリストには、MDI 子フォームとして定義されているフォームのみが表示されます。 9 個までの子ウィンドウは、一度に表示できます。 表示されている 9 個を超えるの子ウィンドウがある場合は、ウィンドウのリストの末尾に「詳細 Windows…」メニュー項目が表示されます。 このメニュー項目をクリックすると、ダイアログ ボックスに、現在アクティブな子ウィンドウの完全な一覧が表示されます。  
  
   
  
## 例  
 次のコード例を作成、 <xref:System.Windows.Forms.MenuItem> MDI フォームで現在開いている MDI 子フォームの一覧を表示に使用されます。  
  
 [!code-cpp[Classic MenuItem.MdiList Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MdiList Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MdiList Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MdiList Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MdiList Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MdiList Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MeasureItemEventHandler MeasureItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MeasureItemEventHandler MeasureItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MenuItem.MeasureItem" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MeasureItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メニューにメニュー項目を描画する前に、そのメニュー項目のサイズを確認する必要がある場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントが発生するためには、する必要があります、 <xref:System.Windows.Forms.MenuItem.OwnerDraw%2A> メニュー項目のプロパティに設定 `true`します。 オーナー描画メニューがメニュー項目のサイズを指定する描画される許可するように描画される前に、このイベントが発生します。 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.MenuItem.MeasureItem> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.MenuItem> という `MenuItem1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.MenuItem.MeasureItem> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#499](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#499)]
 [!code-vb[System.Windows.Forms.EventExamples\#499](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#499)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.OwnerDraw" />
        <altmember cref="E:System.Windows.Forms.MenuItem.DrawItem" />
      </Docs>
    </Member>
    <Member MemberName="MenuID">
      <MemberSignature Language="C#" Value="protected int MenuID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MenuID" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.MenuID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メニュー項目の Windows 識別子を示す値を取得します。</summary>
        <value>メニュー項目の Windows 識別子。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MergeMenu">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MenuItem MergeMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.MenuItem MergeMenu() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.MergeMenu" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このマージ <see cref="T:System.Windows.Forms.MenuItem" /> 別 <see cref="T:System.Windows.Forms.MenuItem" /> し、その結果の結合を返します <see cref="T:System.Windows.Forms.MenuItem" />します。</summary>
        <returns>A <see cref="T:System.Windows.Forms.MenuItem" /> マージされたメニュー項目を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このバージョンを呼び出すと <xref:System.Windows.Forms.MenuItem.MergeMenu%2A>, 、 <xref:System.Windows.Forms.MenuItem> 現在メニュー項目をマージできる現在の項目の機能に影響を与えずに別のメニュー項目とのコピーであるが返されます。 このバージョンの <xref:System.Windows.Forms.MenuItem.MergeMenu%2A> メソッドの呼び出しに似ていますが、 <xref:System.Windows.Forms.MenuItem.CloneMenu%2A> パラメーターが含まれていないメソッド。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MergeMenu">
      <MemberSignature Language="C#" Value="public void MergeMenu (System.Windows.Forms.MenuItem itemSrc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MergeMenu(class System.Windows.Forms.MenuItem itemSrc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.MergeMenu(System.Windows.Forms.MenuItem)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemSrc" Type="System.Windows.Forms.MenuItem" />
      </Parameters>
      <Docs>
        <param name="itemSrc">A <see cref="T:System.Windows.Forms.MenuItem" /> この 1 つにマージするメニュー項目を指定します。</param>
        <summary>別のメニュー項目とこのメニュー項目をマージします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 メニュー項目がメニュー項目の値に従ってマージされます <xref:System.Windows.Forms.MenuItem.MergeType%2A> と <xref:System.Windows.Forms.MenuItem.MergeOrder%2A> プロパティです。 このバージョンの <xref:System.Windows.Forms.MenuItem.MergeMenu%2A> メソッドを使用する 2 つのマージを <xref:System.Windows.Forms.MenuItem> 1 つのメニューにオブジェクト \(とそのサブメニュー\)。 メニューのマージは、マルチ ドキュメント インターフェイス \(MDI\) 親フォームと子メニューがあるときに自動的に処理されます。 このバージョンの 2 つを結合するメソッドを使用する <xref:System.Windows.Forms.MenuItem> オブジェクト \(とそのサブメニュー項目\) に配置されて、 <xref:System.Windows.Forms.MainMenu> 内で 1 つのメニューにコントロールを <xref:System.Windows.Forms.ContextMenu>です。 たとえば、このバージョンを呼び出すことができます、 <xref:System.Windows.Forms.MenuItem.MergeMenu%2A> メソッドを単一のファイルを編集\] メニューの \[メニュー項目をマージする <xref:System.Windows.Forms.MenuItem> に追加されによって表示される、 <xref:System.Windows.Forms.ContextMenu>です。  
  
   
  
## 例  
 次のコード例は、このバージョンを使用して、 <xref:System.Windows.Forms.MenuItem.MergeMenu%2A> のコピーを作成する方法、 <xref:System.Windows.Forms.MenuItem> し、別に結合します。 統合 <xref:System.Windows.Forms.MenuItem> に追加し、 <xref:System.Windows.Forms.ContextMenu> コントロールです。 この例では、2 つのメニュー項目が呼び出された `menuItem1` と `menuItem2` そこに含まれるサブメニュー項目が含まれていると <xref:System.Windows.Forms.ContextMenu> という名前 `contextMenu1` メニュー項目を表示します。`menuItem1``menuItem2` それに含まれる別のメニュー項目があります。 呼び出しの後に <xref:System.Windows.Forms.MenuItem.MergeMenu%2A> 行われると、統合メニューを作成します。  
  
 [!code-cpp[Classic MenuItem.MergeMenu1 Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MergeMenu1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MergeMenu1 Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MergeMenu1 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MergeMenu1 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MergeMenu1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MergeOrder">
      <MemberSignature Language="C#" Value="public int MergeOrder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MergeOrder" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.MergeOrder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メニュー項目が別のメニューにマージされた場合に、そのメニュー項目がマージ後のメニューで占める位置を相対的に示す値を取得または設定します。</summary>
        <value>メニュー項目のマージ後の位置を示す 0 から始まるインデックス番号。 既定値は 0 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 メニュー項目をマージする順序は、メニューを構成する場合にこのメニュー項目を実行する相対位置を指定、 <xref:System.Windows.Forms.MenuItem> が含まれているでは別に結合します。  
  
   
  
## 例  
 次のコード例では、使用方法を示します、 <xref:System.Windows.Forms.MenuItem.MergeOrder%2A> マージされたメニューの表示方法を制御するプロパティです。 これは、完全な例では、プロジェクトに追加すると実行の準備完了です。  
  
 [!code-cpp[System.Windows.Forms.MenuItemMergeOrder\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MenuItemMergeOrder/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.MenuItemMergeOrder\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MenuItemMergeOrder/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.MenuItemMergeOrder\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MenuItemMergeOrder/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.MergeType" />
        <altmember cref="M:System.Windows.Forms.MenuItem.MergeMenu" />
      </Docs>
    </Member>
    <Member MemberName="MergeType">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MenuMerge MergeType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.MenuMerge MergeType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.MergeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuMerge</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メニュー項目が別のメニューにマージされた場合に、そのメニュー項目がどのように動作するかを示す値を取得または設定します。</summary>
        <value>A <see cref="T:System.Windows.Forms.MenuMerge" /> メニュー項目のマージの種類を表す値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 メニュー項目のマージの種類では、メニュー項目の動作をマージしている別のメニュー項目と同じ結合順序があることを示します。 マージされたメニューを使用して、2 つ以上の既存のメニューに基づく統合メニューを作成することができます。  
  
   
  
## 例  
 次のコード例を作成、 <xref:System.Windows.Forms.MenuItem> で、 <xref:System.Windows.Forms.MenuItem.MergeType%2A> と <xref:System.Windows.Forms.MenuItem.MergeOrder%2A> メニュー項目が最初の位置にあるマージされたメニューに追加されるように指定します。  
  
 [!code-cpp[Classic MenuItem.MergeType Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MergeType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MergeType Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MergeType Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MergeType Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MergeType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">割り当てられた値は、のいずれかではありません、 <see cref="T:System.Windows.Forms.MenuMerge" /> 値。</exception>
        <altmember cref="T:System.Windows.Forms.MenuMerge" />
        <altmember cref="P:System.Windows.Forms.MenuItem.MergeOrder" />
      </Docs>
    </Member>
    <Member MemberName="Mnemonic">
      <MemberSignature Language="C#" Value="public char Mnemonic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Mnemonic" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Mnemonic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メニュー項目に関連付けられているニーモニック文字を示す値を取得します。</summary>
        <value>メニュー項目に関連付けられているニーモニック文字を表す文字。 テキストでニーモニック文字が指定されていない場合は、NUL 文字 \(ASCII 値 0\) を返す、 <see cref="T:System.Windows.Forms.MenuItem" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ニーモニック文字は、最初の文字のテキストにアンパサンド文字の後 \(&\)、 <xref:System.Windows.Forms.MenuItem>です。 テキストにアンパサンドを表示するために、2 つのアンパサンド文字がまとめて配置されている場合は、このプロパティはニーモニックを返しません。、 <xref:System.Windows.Forms.MenuItem> ニーモニック文字を定義する代わりにします。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.Text" />
      </Docs>
    </Member>
    <Member MemberName="OnClick">
      <MemberSignature Language="C#" Value="protected virtual void OnClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.OnClick(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.MenuItem.Click" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.MenuItem.Click> するときの操作を実行するイベント、 <xref:System.Windows.Forms.MenuItem> をクリックします。 例を作成し、 <xref:System.Windows.Forms.MainMenu> と呼ばれる `mainMenu1` し、2 つ追加 <xref:System.Windows.Forms.MenuItem> オブジェクト、 `topMenuItem` \(`File`\) と `menuItem1` \(`Open`\)。 接続し、 `Click` イベントを `menuItem1_Click` イベント ハンドラーです。 ユーザーがクリックしたとき、 `Open` メニュー項目、 <xref:System.Windows.Forms.OpenFileDialog> は初期化され、表示します。 この例で作成した、 <xref:System.Windows.Forms.Form> という名前 `Form1`します。  
  
 [!code-cpp[MenuItemClick\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItemClick/CPP/form1.cpp#1)]
 [!code-csharp[MenuItemClick\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItemClick/CS/form1.cs#1)]
 [!code-vb[MenuItemClick\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItemClick/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.MenuItem.OnClick(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.MenuItem.OnClick(System.EventArgs)" /> method.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDrawItem">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawItem (System.Windows.Forms.DrawItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawItem(class System.Windows.Forms.DrawItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DrawItemEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.MenuItem.DrawItem" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.MenuItem.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.MenuItem.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" /> method.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.DrawItemEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnInitMenuPopup">
      <MemberSignature Language="C#" Value="protected virtual void OnInitMenuPopup (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInitMenuPopup(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.OnInitMenuPopup(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.MenuItem.Popup" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMeasureItem">
      <MemberSignature Language="C#" Value="protected virtual void OnMeasureItem (System.Windows.Forms.MeasureItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMeasureItem(class System.Windows.Forms.MeasureItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MeasureItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.MeasureItemEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.MenuItem.MeasureItem" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.MenuItem.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.MenuItem.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" /> method.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.MeasureItemEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnPopup">
      <MemberSignature Language="C#" Value="protected virtual void OnPopup (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPopup(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.OnPopup(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.MenuItem.Popup" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.MenuItem.Popup> を決定するイベントかどうか <xref:System.Windows.Forms.MenuItem> に表示されるメニューが表示される前に、オブジェクトの切り取り、コピー、サポートを提供し、削除の各操作が有効にします。 例では、どう `textBox1`, 、 <xref:System.Windows.Forms.TextBox> フォームの control 権限、無効になってに入力フォーカス、およびが有効にする前に選択したテキスト、 <xref:System.Windows.Forms.MenuItem> オブジェクトです。 この例には、その 3 つが必要です <xref:System.Windows.Forms.MenuItem> オブジェクトは、名前付きで作成されます `menuCut`, 、`menuCopy`, 、および `menuDelete` が作成されています。  
  
 [!code-cpp[MenuItem.Popup\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItem.Popup/CPP/form1.cpp#1)]
 [!code-csharp[MenuItem.Popup\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItem.Popup/CS/form1.cs#1)]
 [!code-vb[MenuItem.Popup\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItem.Popup/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.MenuItem.OnPopup(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.MenuItem.OnPopup(System.EventArgs)" /> method.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnSelect">
      <MemberSignature Language="C#" Value="protected virtual void OnSelect (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelect(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.OnSelect(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.MenuItem.Select" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.MenuItem.Select> のイベント、 <xref:System.Windows.Forms.MenuItem> ヘルプ テキストを割り当てるにはクラス、 <xref:System.Windows.Forms.StatusBarPanel> の <xref:System.Windows.Forms.StatusBar> コントロールです。 この例では、する必要があります <xref:System.Windows.Forms.MenuItem> という名前のオブジェクト `menuOpen`, 、`menuSave`, 、および `menuExit` に追加、 <xref:System.Windows.Forms.MainMenu> フォーム上のコントロールです。 例では、する必要があります、 <xref:System.Windows.Forms.StatusBar> という名前のコントロール `statusBar1` 、フォームに追加されています。<xref:System.Windows.Forms.StatusBar> コントロールを含める必要があります、 <xref:System.Windows.Forms.StatusBarPanel>です。  
  
 [!code-cpp[MenuItem.Select\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItem.Select/CPP/form1.cpp#1)]
 [!code-csharp[MenuItem.Select\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItem.Select/CS/form1.cs#1)]
 [!code-vb[MenuItem.Select\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItem.Select/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.MenuItem.OnSelect(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.MenuItem.OnSelect(System.EventArgs)" /> method.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OwnerDraw">
      <MemberSignature Language="C#" Value="public bool OwnerDraw { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OwnerDraw" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.OwnerDraw" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定したコードがメニュー項目を描画するのか、Windows がメニュー項目を描画するのかを示す値を取得または設定します。</summary>
        <value>
          <see langword="true" /> メニュー項目のコードを使用して描画する場合 <see langword="false" /> メニュー項目が Windows によって描画される場合。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、 <xref:System.Windows.Forms.MenuItem.OwnerDraw%2A> にプロパティが設定されている `true`, 、メニュー項目のすべての描画を処理する必要があります。 この機能を使用すると、独自の特別なメニュー表示を作成します。  
  
   
  
## 例  
 次のコード例では、オーナー描画メニュー項目のメニューを示します。 この例のセット、 <xref:System.Windows.Forms.MenuItem.OwnerDraw%2A> プロパティと使用法、 `AddHandler` ステートメントおよび `AddressOf` を処理するデリゲートを指定する演算子、 <xref:System.Windows.Forms.MenuItem.DrawItem> イベントです。 例を実行するにインポートするフォームに貼り付けます、 <xref:System>, 、<xref:System.Windows.Forms>, 、および <xref:System.Drawing> 名前空間。 呼び出す `InitializeMenu` フォームのコンス トラクターからまたは `Load` メソッドです。  
  
 [!code-cpp[System.Windows.Forms.MenuItemOwnerDraw\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MenuItemOwnerDraw/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.MenuItemOwnerDraw\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MenuItemOwnerDraw/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.MenuItemOwnerDraw\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MenuItemOwnerDraw/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Graphics" />
        <altmember cref="T:System.Windows.Forms.Menu" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Menu Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Menu Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Menu</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このメニュー項目が含まれているメニューを示す値を取得します。</summary>
        <value>A <see cref="T:System.Windows.Forms.Menu" /> このメニュー項目が含まれているメニューを表します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを使用するを取得、 <xref:System.Windows.Forms.Menu> サブメニューのオブジェクト。 キャストすることができます、 <xref:System.Windows.Forms.Menu> にこのプロパティによって返されるオブジェクト、 <xref:System.Windows.Forms.MenuItem> オブジェクトを操作します。  
  
   
  
## 例  
 メイン メニューおよびトップレベルのメニュー項目を作成するこの例では `menuItem1` \(`File`\)。 2 つのメニュー項目を作成するも `menuItem2` \(`New`\) と `menuItem3` \(`Open`\) のメニュー項目のリストに追加し、 `menuItem1`します。 その後かどうかを確認する `menuItem3` が親メニューが true の場合と表示については、この親メニューのメッセージ ボックスにします。 この例では、作成済みである必要があります、 <xref:System.Windows.Forms.Form> という `Form1`します。  
  
 [!code-cpp[ParentMenu\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ParentMenu/CPP/form1.cpp#1)]
 [!code-csharp[ParentMenu\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ParentMenu/CS/form1.cs#1)]
 [!code-vb[ParentMenu\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ParentMenu/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformClick">
      <MemberSignature Language="C#" Value="public void PerformClick ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PerformClick() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.PerformClick" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>生成、 <see cref="E:System.Windows.Forms.Control.Click" /> イベントを <see cref="T:System.Windows.Forms.MenuItem" />, 、ユーザーによるクリックをシミュレートします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメニューを使用して、イベント情報を渡さずにコードをメニュー項目をアクティブ化することができます。 たとえば、次の項目に基づいて呼び出すことができますが、アプリケーションで発生するアクション メニューを有効にする、 <xref:System.Windows.Forms.MenuItem.PerformClick%2A> メソッドを <xref:System.Windows.Forms.MenuItem>します。  
  
   
  
## 例  
 使用してプログラムを使用してメニュー項目をクリックしてこの例では、 `PerformClick` メソッドです。 最初に、メイン メニューを作成する \(`mainMenu1`\) を 2 つの追加メニュー項目、 `menuItem1` \(`File`\) と `menuItem2` \(`Edit`\)。 使用することも、 <xref:System.Windows.Forms.MenuItem.Click> メニュー項目がクリックされたときに、データをイベント ハンドラーに送信するイベントです。 使用して、 `PerformClick` メソッドをクリックして、 `File` メニュー項目です。 アプリケーションを起動するときに、 `File` メニュー項目がアクティブになるし、「ファイル\] メニューをクリックします」というテキストを含むメッセージ ボックス。 画面に表示されます。 この例で作成した、 <xref:System.Windows.Forms.Form> という名前 `Form1`します。  
  
 [!code-cpp[PerformClick\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/PerformClick/CPP/form1.cpp#1)]
 [!code-csharp[PerformClick\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/PerformClick/CS/form1.cs#1)]
 [!code-vb[PerformClick\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/PerformClick/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformSelect">
      <MemberSignature Language="C#" Value="public virtual void PerformSelect ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PerformSelect() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.PerformSelect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>発生させる、 <see cref="E:System.Windows.Forms.MenuItem.Select" /> メニュー項目のイベントです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドでは、発生することができます、 <xref:System.Windows.Forms.MenuItem.Select> イベントのイベント ハンドラーにイベント情報を渡さずにします。  
  
   
  
## 例  
 使用してメニュー項目を選択するプログラムを使用してこの例では、 `PerformSelect` メソッドです。 最初に、メイン メニューを作成する \(`mainMenu1`\) を 2 つの追加メニュー項目、 `menuItem1` \(`File`\) と `menuItem2` \(`Edit`\)。 使用することも、 <xref:System.Windows.Forms.MenuItem.Select> メニュー項目を選択すると、イベント ハンドラーにデータを送信するイベントです。 使用して、 `PerformSelect` で選択する方法、 `File` メニュー項目です。 アプリケーションを起動するときに、 `File` メニュー項目を選択し、「メニューが選択されているファイル」というテキストを含むメッセージ ボックス。 画面に表示されます。 この例で作成した、 <xref:System.Windows.Forms.Form> という名前 `Form1`します。  
  
 [!code-cpp[PerformSelect\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/PerformSelect/CPP/form1.cpp#1)]
 [!code-csharp[PerformSelect\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/PerformSelect/CS/form1.cs#1)]
 [!code-vb[PerformSelect\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/PerformSelect/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.MenuItem.PerformClick" />
      </Docs>
    </Member>
    <Member MemberName="Popup">
      <MemberSignature Language="C#" Value="public event EventHandler Popup;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Popup" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MenuItem.Popup" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メニュー項目のリストが表示される前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、メニュー項目に表示するサブメニュー項目がある場合にのみ発生します。 追加、削除、有効にする、無効にするには、このイベント ハンドラーを使用することを確認して、または、表示される前に、アプリケーションの状態に基づいてメニュー項目をオフにします。 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.MenuItem.Popup> を決定するイベントかどうか <xref:System.Windows.Forms.MenuItem> に表示されるメニューが表示される前に、オブジェクトの切り取り、コピー、サポートを提供し、削除の各操作が有効にします。 例では、どう `textBox1`, 、 <xref:System.Windows.Forms.TextBox> フォームの control 権限、無効になってに入力フォーカス、およびが有効にする前に選択したテキスト、 <xref:System.Windows.Forms.MenuItem> オブジェクトです。 この例には、その 3 つが必要です <xref:System.Windows.Forms.MenuItem> オブジェクトは、名前付きで作成されます `menuCut`, 、`menuCopy`, 、および `menuDelete` が作成されています。  
  
 [!code-cpp[MenuItem.Popup\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItem.Popup/CPP/form1.cpp#1)]
 [!code-csharp[MenuItem.Popup\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItem.Popup/CS/form1.cs#1)]
 [!code-vb[MenuItem.Popup\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItem.Popup/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RadioCheck">
      <MemberSignature Language="C#" Value="public bool RadioCheck { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RadioCheck" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.RadioCheck" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはを示す値を設定するかどうか、 <see cref="T:System.Windows.Forms.MenuItem" />, オンになっている場合は、チェック マークの代わりにラジオ ボタンが表示されます。</summary>
        <value>
          <see langword="true" /> ラジオ ボタン、チェック マークの代わりに使用する場合 <see langword="false" /> 標準のチェック マークが、メニュー項目をオンにすると表示されるかどうか。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 チェック マークは、必ずしもメニュー項目のグループを相互に排他的な状態を意味しません。 このプロパティを使用して、メニュー項目のチェック マークが相互に排他的であるユーザーに示すことができます。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Windows.Forms.MenuItem.Checked%2A> アプリケーションの状態を変更するプロパティです。 例では、メニュー項目のグループ提供されているテキストの色を指定するために使用する <xref:System.Windows.Forms.TextBox> コントロールです。 によって提供されるイベント ハンドラーを使用する例では、 <xref:System.Windows.Forms.MenuItem.Click> の 3 つのメニュー項目のイベントです。 各メニュー項目が、色を指定 `menuItemRed`, 、`menuItemGreen`, 、または `menuItemBlue`です。 イベント ハンドラーは、どのメニュー項目がクリックしてされたかを決定し、選択されたメニュー項目にあるチェック マークを配置、フォームのテキスト色を変更 <xref:System.Windows.Forms.TextBox> という名前のコントロール `textBox1`します。 また、例では、 <xref:System.Windows.Forms.MenuItem.RadioCheck%2A> プロパティを相互に排他的にあるメニュー項目を表示するオプション ボタンのチェックを使用する方法について説明します。 この例で必要とする、 <xref:System.Drawing?displayProperty=fullName> 名前空間はこのコードを含むフォームに追加されています。  
  
 [!code-cpp[Classic MenuItem.RadioCheck Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.RadioCheck Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.RadioCheck Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.RadioCheck Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.RadioCheck Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.RadioCheck Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.Checked" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public event EventHandler Select;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Select" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MenuItem.Select" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがメニュー項目の上にポインターを置いた場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは通常、ユーザーがメニュー項目上にマウス ポインターを置いたときに発生します。 ユーザーがメニュー項目までスクロールし、矢印キーでキーボードを使用してメニュー項目を強調表示したときにも、イベントを発生させることができます。 このイベントを使用して、アプリケーションのステータス バーでこのメニュー項目に関連する詳細なヘルプの文字列を表示することができます。 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
> [!NOTE]
>  場合、 <xref:System.Windows.Forms.Menu.MenuItems%2A> プロパティを <xref:System.Windows.Forms.MenuItem> すべての項目を含むこのイベントは発生しません。 このイベントは、親メニュー項目に対しては発生しません。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.MenuItem.Select> のイベント、 <xref:System.Windows.Forms.MenuItem> ヘルプ テキストを割り当てるにはクラス、 <xref:System.Windows.Forms.StatusBarPanel> の <xref:System.Windows.Forms.StatusBar> コントロールです。 この例では、する必要があります <xref:System.Windows.Forms.MenuItem> という名前のオブジェクト `menuOpen`, 、`menuSave`, 、および `menuExit` に追加、 <xref:System.Windows.Forms.MainMenu> フォーム上のコントロールです。 例では、する必要があります、 <xref:System.Windows.Forms.StatusBar> という名前のコントロール `statusBar1` 、フォームに追加されています。<xref:System.Windows.Forms.StatusBar> コントロールを含める必要があります、 <xref:System.Windows.Forms.StatusBarPanel>です。  
  
 [!code-cpp[MenuItem.Select\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItem.Select/CPP/form1.cpp#1)]
 [!code-csharp[MenuItem.Select\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItem.Select/CS/form1.cs#1)]
 [!code-vb[MenuItem.Select\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItem.Select/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MenuItem.Click" />
      </Docs>
    </Member>
    <Member MemberName="Shortcut">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Shortcut Shortcut { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Shortcut Shortcut" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Shortcut" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Shortcut</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メニュー項目に関連付けられているショートカット キーを示す値を取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.Shortcut" /> 値のいずれか。 既定値は、<see langword="Shortcut.None" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ショートカット キーを提供メニュー システムでは、マウスまたはその他のデバイスへのアクセスを持たないそれらのユーザーのアプリケーションへのキーボード アクセスを提供する方法を頻繁にアクティブにユーザーがメニュー項目を使用します。  
  
   
  
## 例  
 次のコード例、メニュー項目を作成、キャプションを設定、ショートカット キーの割り当て、メニュー項目は、表示、およびメニュー項目のショートカット キーの表示を示しています。 この例では、する必要があります、 <xref:System.Windows.Forms.MenuItem> が作成されたという名前 `menuItem1`します。  
  
 [!code-cpp[Classic MenuItem.Text Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Text Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Text Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Text Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">割り当てられた値は、のいずれかではありません、 <see cref="T:System.Windows.Forms.Shortcut" /> 値。</exception>
        <altmember cref="T:System.Windows.Forms.Shortcut" />
      </Docs>
    </Member>
    <Member MemberName="ShowShortcut">
      <MemberSignature Language="C#" Value="public bool ShowShortcut { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowShortcut" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.ShowShortcut" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メニュー項目のキャプションの横に、そのメニュー項目に関連付けられているショートカット キーを表示するかどうかを示す値を取得または設定します。</summary>
        <value>
          <see langword="true" /> メニュー項目のキャプションの横にあるショートカット キーの組み合わせが表示されている場合 <see langword="false" /> 場合、ショートカット キーの組み合わせは表示されます。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを使用すると、メニューからショートカットを非表示にするのにユーザーのメニュー領域を節約するために、または非表示のショートカット キーを非表示にするのにオプションが用意されています。  
  
   
  
## 例  
 次のコード例、メニュー項目を作成、キャプションを設定、ショートカット キーの割り当て、メニュー項目は、表示、およびメニュー項目のショートカット キーの表示を示しています。 この例では、する必要があります、 <xref:System.Windows.Forms.MenuItem> が作成されたという名前 `menuItem1`します。  
  
 [!code-cpp[Classic MenuItem.Text Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Text Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Text Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Text Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.Shortcut" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メニュー項目のキャプションを示す値を取得または設定します。</summary>
        <value>メニュー項目のテキスト キャプション。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 メニュー項目のキャプションを指定する場合は '&'、アクセス キーとして使用する文字の前に配置することでアクセス キーも指定できます。 たとえば、アクセス キーとして"File"に"F"を指定するにするはメニュー項目のキャプションを指定"& ファイル"です。 この機能を使用すると、メニューのキーボード ナビゲーションを提供します。  
  
 このプロパティを設定"`-`"により、メニュー アイテムは、標準のメニュー項目ではなく、区切り記号 \(水平線\) として表示されます。  
  
   
  
## 例  
 次のコード例、メニュー項目を作成、キャプションを設定、ショートカット キーの割り当て、メニュー項目は、表示、およびメニュー項目のショートカット キーの表示を示しています。 この例では、する必要があります、 <xref:System.Windows.Forms.MenuItem> が作成されたという名前 `menuItem1`します。  
  
 [!code-cpp[Classic MenuItem.Text Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Text Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Text Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Text Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.Mnemonic" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>表す文字列を返す、 <see cref="T:System.Windows.Forms.MenuItem" />です。</summary>
        <returns>現在の <see cref="T:System.Windows.Forms.MenuItem" /> を表す文字列。 コントロールの種類と <see cref="P:System.Windows.Forms.MenuItem.Text" /> プロパティを格納する文字列。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メニュー項目を表示するかどうかを示す値を取得または設定します。</summary>
        <value>
          <see langword="true" /> メニュー項目が表示されるメニューに場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを使用して、メニューをマージまたはメニューを無効にすることがなくのメニュー構造を変更することができます。 たとえば、アプリケーション用のメニューから機能のセクション全体を非表示にする場合は、ことができます非表示にするユーザーからこのプロパティを設定して `false`します。  
  
   
  
## 例  
 次のコード例、メニュー項目を作成、キャプションを設定、ショートカット キーの割り当て、メニュー項目は、表示、およびメニュー項目のショートカット キーの表示を示しています。 この例では、する必要があります、 <xref:System.Windows.Forms.MenuItem> が作成されたという名前 `menuItem1`します。  
  
 [!code-cpp[Classic MenuItem.Text Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Text Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Text Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Text Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MergeMenu">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このマージ <see cref="T:System.Windows.Forms.MenuItem" /> 別 <see cref="T:System.Windows.Forms.MenuItem" />します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.MenuItem" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="CloneMenu">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>コピーを作成、 <see cref="T:System.Windows.Forms.MenuItem" />です。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>