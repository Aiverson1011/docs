<Type Name="DragEventArgs" FullName="System.Windows.Forms.DragEventArgs">
  <TypeSignature Language="C#" Value="public class DragEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DragEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.DragEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>データを提供、 <see cref="E:System.Windows.Forms.Control.DragDrop" />, 、<see cref="E:System.Windows.Forms.Control.DragEnter" />, 、または <see cref="E:System.Windows.Forms.Control.DragOver" /> イベントです。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.DragDrop> イベント、ユーザーがコントロール上でオブジェクトをドラッグして、マウス ボタンを離すコントロール上にドロップしたら、ドラッグ アンド ドロップ操作を完了するときに発生します。<xref:System.Windows.Forms.Control.DragEnter> イベント、ユーザーがマウスでオブジェクトをドラッグするときにコントロールにマウス ポインターを移動するときに発生します。<xref:System.Windows.Forms.Control.DragOver> イベント、ユーザー コントロールの上をマウスでオブジェクトをドラッグするときにマウス ポインターを移動するときに発生します。  
  
 A <xref:System.Windows.Forms.DragEventArgs> オブジェクトは、このイベントに関連付けられたデータ、shift キーを押し、CTRL、ALT の各キーの現在の状態、マウス ポインターの場所を指定し、ドラッグ アンド ドロップ効果は、ソースとドラッグ イベントのターゲットで許可されています。  
  
 イベント モデルについては、次を参照してください。 [Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次の例では、2 つのドラッグ アンド ドロップ操作 <xref:System.Windows.Forms.ListBox> コントロールです。 呼び出しの例、 <xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッド、ドラッグ操作の開始時にします。 マウスが移動した場合に、ドラッグ操作が開始以上 <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> 中にマウスの位置から、 <xref:System.Windows.Forms.Control.MouseDown> イベントです。<xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> メソッドを使用中にドラッグする項目のインデックスを確認して、 `MouseDown` イベントです。  
  
 例では、ドラッグ アンド ドロップ操作のカスタムのカーソルを使用しても示します。 この例では 2 つカーソル ファイル `3dwarro.cur` と `3dwno.cur`, 、カスタム ドラッグのアプリケーションのディレクトリに存在および非ドロップ カーソルの場合、それぞれします。 場合に使用されるカスタムのカーソル、 `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> がオンになっています。 カスタムのカーソルが設定されている、 <xref:System.Windows.Forms.Control.GiveFeedback> イベント ハンドラーです。  
  
 キーボードの状態を評価、 <xref:System.Windows.Forms.Control.DragOver> 右側のイベント ハンドラー `ListBox`, ドラッグ操作を決定するには、shift キーを押し、CTRL、alt キーを押し、または CTRL \+ ALT キーの状態に基づいています。 内の場所、 `ListBox` 時にも決定されますが、ドロップが発生する可能性、 `DragOver` イベントです。 削除するデータがない場合、 `String`, 、 <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> に設定されている <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=fullName>します。 削除の状態を表示する最後に、 `DropLocationLabel`<xref:System.Windows.Forms.Label>します。  
  
 右側にドロップするデータ `ListBox` で決定、 <xref:System.Windows.Forms.Control.DragDrop> イベント ハンドラーと `String` の適切な場所にある値を追加、 `ListBox`です。 ドラッグ操作が、フォームの境界の外側に移動しでドラッグ アンド ドロップ操作を取り消したかどうか、 <xref:System.Windows.Forms.Control.QueryContinueDrag> イベント ハンドラーです。  
  
 このコードの抜粋では、使用方法を示します、 <xref:System.Windows.Forms.DragEventArgs> クラスです。 参照してください、 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 完全なコード例のメソッドです。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop\#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop\#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop\#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 次の例をどのように <xref:System.Windows.Forms.DragEventArgs> ソースとターゲットのドラッグ アンド ドロップ操作の間で渡されます。 この例では、 <xref:System.Windows.Forms.ListBox> コントロールは、データのソースと <xref:System.Windows.Forms.RichTextBox> コントロールがターゲットです。 例では、 <xref:System.Windows.Forms.ListBox> コントロールは、有効なファイル名の一覧の読み込みが完了します。 ユーザーから表示されているファイル名のいずれかをドラッグしたときに、 <xref:System.Windows.Forms.ListBox> コントロールを <xref:System.Windows.Forms.RichTextBox> コントロール、ファイル名で参照されているファイルが開きます。  
  
 操作を開始、 <xref:System.Windows.Forms.ListBox> コントロールの MouseDown イベントです。<xref:System.Windows.Forms.RichTextBox.DragEnter> イベント ハンドラーの例を使用して、 <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> データ形式であることを確認する方法を <xref:System.Windows.Forms.RichTextBox> コントロールを表示でき、設定、 <xref:System.Windows.Forms.DragDropEffects> ターゲット コントロールにソース管理からそのデータを指定するプロパティをコピーする必要があります。 最後に、 <xref:System.Windows.Forms.RichTextBox> コントロールのドラッグ アンド ドロップのイベント ハンドラーを使用して、 <xref:System.Windows.Forms.IDataObject.GetData%2A> を開くには、ファイル名を取得します。  
  
 [!code-cpp[RichTextDragDrop\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextDragDrop/CPP/form1.cpp#1)]
 [!code-csharp[RichTextDragDrop\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextDragDrop/CS/form1.cs#1)]
 [!code-vb[RichTextDragDrop\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextDragDrop/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.DragDropEffects" />
    <altmember cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.DragDrop" />
    <altmember cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.DragEnter" />
    <altmember cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.DragOver" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DragEventArgs (System.Windows.Forms.IDataObject data, int keyState, int x, int y, System.Windows.Forms.DragDropEffects allowedEffect, System.Windows.Forms.DragDropEffects effect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.IDataObject data, int32 keyState, int32 x, int32 y, valuetype System.Windows.Forms.DragDropEffects allowedEffect, valuetype System.Windows.Forms.DragDropEffects effect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DragEventArgs.#ctor(System.Windows.Forms.IDataObject,System.Int32,System.Int32,System.Int32,System.Windows.Forms.DragDropEffects,System.Windows.Forms.DragDropEffects)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="data" Type="System.Windows.Forms.IDataObject" />
        <Parameter Name="keyState" Type="System.Int32" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="allowedEffect" Type="System.Windows.Forms.DragDropEffects" />
        <Parameter Name="effect" Type="System.Windows.Forms.DragDropEffects" />
      </Parameters>
      <Docs>
        <param name="data">このイベントと関連付けられたデータ。</param>
        <param name="keyState">Shift、Ctrl、Alt の各キーの現在の状態。</param>
        <param name="x">ピクセル単位でマウス カーソルの x 座標。</param>
        <param name="y">ピクセル単位でマウス カーソルの y 座標。</param>
        <param name="allowedEffect">
          <see cref="T:System.Windows.Forms.DragDropEffects" /> 値のいずれか。</param>
        <param name="effect">
          <see cref="T:System.Windows.Forms.DragDropEffects" /> 値のいずれか。</param>
        <summary>
          <see cref="T:System.Windows.Forms.DragEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.DragDropEffects" />
        <altmember cref="T:System.Windows.Forms.IDataObject" />
      </Docs>
    </Member>
    <Member MemberName="AllowedEffect">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DragDropEffects AllowedEffect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DragDropEffects AllowedEffect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.AllowedEffect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragDropEffects</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ドラッグ イベントの元の場所 \(またはソース\) で実行できるドラッグ アンド ドロップ操作を取得します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DragDropEffects" /> 値のいずれか。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コントロールが呼び出すことによって、ドラッグ アンド ドロップ操作を開始した場合、 <xref:System.Windows.Forms.Control.DoDragDrop%2A?displayProperty=fullName> メソッドを操作の許可された効果を指定します。 たとえば、ファイルが読み取り専用である場合、元のファイルをドラッグすると \(または、CD など読み取り専用のストレージ メディアから\)、ソースが示されますファイルのコピーが、ターゲットに転送されています。  
  
 ドラッグしたデータに対して操作を実行する前に、操作が許可されていることを確認するには、このプロパティを確認する必要があります。  
  
   
  
## 例  
 次の例では、2 つのドラッグ アンド ドロップ操作 <xref:System.Windows.Forms.ListBox> コントロールです。 呼び出しの例、 <xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッド、ドラッグ操作の開始時にします。 マウスが移動した場合に、ドラッグ操作が開始以上 <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> 中にマウスの位置から、 <xref:System.Windows.Forms.Control.MouseDown> イベントです。<xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> メソッドを使用中にドラッグする項目のインデックスを確認して、 `MouseDown` イベントです。  
  
 例では、ドラッグ アンド ドロップ操作のカスタムのカーソルを使用しても示します。 この例では 2 つカーソル ファイル `3dwarro.cur` と `3dwno.cur`, 、カスタム ドラッグのアプリケーションのディレクトリに存在および非ドロップ カーソルの場合、それぞれします。 場合に使用されるカスタムのカーソル、 `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> がオンになっています。 カスタムのカーソルが設定されている、 <xref:System.Windows.Forms.Control.GiveFeedback> イベント ハンドラーです。  
  
 キーボードの状態を評価、 <xref:System.Windows.Forms.Control.DragOver> 右側のイベント ハンドラー `ListBox`, ドラッグ操作を決定するには、shift キーを押し、CTRL、alt キーを押し、または CTRL \+ ALT キーの状態に基づいています。 内の場所、 `ListBox` 時にも決定されますが、ドロップが発生する可能性、 `DragOver` イベントです。 削除するデータがない場合、 `String`, 、 <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> に設定されている <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=fullName>します。 削除の状態を表示する最後に、 `DropLocationLabel`<xref:System.Windows.Forms.Label>します。  
  
 右側にドロップするデータ `ListBox` で決定、 <xref:System.Windows.Forms.Control.DragDrop> イベント ハンドラーと `String` の適切な場所にある値を追加、 `ListBox`です。 ドラッグ操作が、フォームの境界の外側に移動しでドラッグ アンド ドロップ操作を取り消したかどうか、 <xref:System.Windows.Forms.Control.QueryContinueDrag> イベント ハンドラーです。  
  
 このコードの抜粋では、使用方法を示します、 <xref:System.Windows.Forms.DragEventArgs> クラスです。 参照してください、 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 完全なコード例のメソッドです。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop\#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop\#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop\#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DragDropEffects" />
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.IDataObject Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.IDataObject Data" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.IDataObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Windows.Forms.IDataObject" /> このイベントに関連付けられているデータが含まれています。</summary>
        <value>このイベントと関連付けられたデータ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント ハンドラーの本文で使用できます、 <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> データが先となるデータがドラッグされているコントロールの形式の要件と一致するかどうかを決定する方法です。 形式の要件を満たすデータを変換しようとするかどうかをも指定できます。 ドラッグしたデータが形式の要件を満たさない場合に使用して、 <xref:System.Windows.Forms.IDataObject.GetData%2A> データを取得します。  
  
   
  
## 例  
 次の例では、2 つのドラッグ アンド ドロップ操作 <xref:System.Windows.Forms.ListBox> コントロールです。 呼び出しの例、 <xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッド、ドラッグ操作の開始時にします。 マウスが移動した場合に、ドラッグ操作が開始以上 <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> 中にマウスの位置から、 <xref:System.Windows.Forms.Control.MouseDown> イベントです。<xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> メソッドを使用中にドラッグする項目のインデックスを確認して、 `MouseDown` イベントです。  
  
 例では、ドラッグ アンド ドロップ操作のカスタムのカーソルを使用しても示します。 この例では 2 つカーソル ファイル `3dwarro.cur` と `3dwno.cur`, 、カスタム ドラッグのアプリケーションのディレクトリに存在および非ドロップ カーソルの場合、それぞれします。 場合に使用されるカスタムのカーソル、 `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> がオンになっています。 カスタムのカーソルが設定されている、 <xref:System.Windows.Forms.Control.GiveFeedback> イベント ハンドラーです。  
  
 キーボードの状態を評価、 <xref:System.Windows.Forms.Control.DragOver> 右側のイベント ハンドラー `ListBox`, ドラッグ操作を決定するには、shift キーを押し、CTRL、alt キーを押し、または CTRL \+ ALT キーの状態に基づいています。 内の場所、 `ListBox` 時にも決定されますが、ドロップが発生する可能性、 `DragOver` イベントです。 削除するデータがない場合、 `String`, 、 <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> に設定されている <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=fullName>します。 削除の状態を表示する最後に、 `DropLocationLabel`<xref:System.Windows.Forms.Label>します。  
  
 右側にドロップするデータ `ListBox` で決定、 <xref:System.Windows.Forms.Control.DragDrop> イベント ハンドラーと `String` の適切な場所にある値を追加、 `ListBox`です。 ドラッグ操作が、フォームの境界の外側に移動しでドラッグ アンド ドロップ操作を取り消したかどうか、 <xref:System.Windows.Forms.Control.QueryContinueDrag> イベント ハンドラーです。  
  
 このコードの抜粋では、使用方法を示します、 <xref:System.Windows.Forms.DragEventArgs> クラスです。 参照してください、 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 完全なコード例のメソッドです。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop\#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop\#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop\#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.IDataObject" />
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DragDropEffects Effect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DragDropEffects Effect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.Effect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragDropEffects</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ドラッグ アンド ドロップ操作のターゲットのドロップ効果を取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DragDropEffects" /> 値のいずれか。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 By default, the effect applied determines the mouse cursor for the target of a drag\-and\-drop operation. This is useful to provide feedback to the user on the operation that will occur. For example, if you press the CTRL key when you drag a file from a source, specify <xref:System.Windows.Forms.DragDropEffects.Copy?displayProperty=fullName> to indicate the target will try to perform a copy operation.  
  
 To use custom cursors for a drag operation, see <xref:System.Windows.Forms.GiveFeedbackEventArgs.UseDefaultCursors%2A?displayProperty=fullName>.  
  
   
  
## 例  
 The following example demonstrates a drag\-and\-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the **languageKeyword tag is not supported!!!!**  
 event.  
  
 The example also demonstrates using custom cursors for the drag\-and\-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no\-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  
  
 The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right **languageKeyword tag is not supported!!!!**  
, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL\+ALT keys. The location in the **languageKeyword tag is not supported!!!!**  
 where the drop would occur is also determined during the **languageKeyword tag is not supported!!!!**  
 event. If the data to drop is not a **languageKeyword tag is not supported!!!!**  
, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  
  
 The data to drop for the right **languageKeyword tag is not supported!!!!**  
 is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the **languageKeyword tag is not supported!!!!**  
 value is added at the appropriate place in the **languageKeyword tag is not supported!!!!**  
. If the drag operation moves outside the bounds of the form, then the drag\-and\-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  
  
 This code excerpt demonstrates using the <xref:System.Windows.Forms.DragEventArgs> class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop\#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop\#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop\#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DragDropEffects" />
      </Docs>
    </Member>
    <Member MemberName="KeyState">
      <MemberSignature Language="C#" Value="public int KeyState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.KeyState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マウス ボタンの状態と同様に、Shift、Ctrl、Alt の各キーの現在の状態を取得します。</summary>
        <value>Shift、Ctrl、Alt の各キー、およびマウス ボタンの現在の状態。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 特定のキーの状態に依存するドラッグ アンド ドロップ操作の効果を行うことができます。 たとえば、コピーまたはドラッグ アンド ドロップ操作中に ctrl キーまたは SHIFT キーが押されたかどうかに応じてデータを移動することができます。  
  
 設定されているビット、 <xref:System.Windows.Forms.DragEventArgs.KeyState%2A> プロパティは、キーまたは操作中に押されたマウス ボタンを識別します。 たとえば、マウスの左ボタンが押された場合、最初のビット、 <xref:System.Windows.Forms.DragEventArgs.KeyState%2A> プロパティを設定します。 ビットごとの AND 演算子を使用すると、指定したキーの状態をテストします。  
  
 次の表は、特定のイベントに対して使用される値を一覧表示します。  
  
|値|キー|  
|-------|--------|  
|1 \(ビット 0\)|マウスの左ボタンです。|  
|2 \(ビット 1\)|マウスの右ボタンです。|  
|4 \(ビット 2\)|SHIFT キーです。|  
|8 \(ビット 3\)|CTRL キーです。|  
|16 \(4 ビット\)|マウスの中央ボタン。|  
|32 \(ビット 5\)|ALT キーです。|  
  
   
  
## 例  
 次の例では、2 つのドラッグ アンド ドロップ操作 <xref:System.Windows.Forms.ListBox> コントロールです。 呼び出しの例、 <xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッド、ドラッグ操作の開始時にします。 マウスが移動した場合に、ドラッグ操作が開始以上 <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> 中にマウスの位置から、 <xref:System.Windows.Forms.Control.MouseDown> イベントです。<xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> メソッドを使用中にドラッグする項目のインデックスを確認して、 `MouseDown` イベントです。  
  
 例では、ドラッグ アンド ドロップ操作のカスタムのカーソルを使用しても示します。 この例では 2 つカーソル ファイル `3dwarro.cur` と `3dwno.cur`, 、カスタム ドラッグのアプリケーションのディレクトリに存在および非ドロップ カーソルの場合、それぞれします。 場合に使用されるカスタムのカーソル、 `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> がオンになっています。 カスタムのカーソルが設定されている、 <xref:System.Windows.Forms.Control.GiveFeedback> イベント ハンドラーです。  
  
 キーボードの状態を評価、 <xref:System.Windows.Forms.Control.DragOver> 右側のイベント ハンドラー `ListBox`, ドラッグ操作を決定するには、shift キーを押し、CTRL、alt キーを押し、または CTRL \+ ALT キーの状態に基づいています。 内の場所、 `ListBox` 時にも決定されますが、ドロップが発生する可能性、 `DragOver` イベントです。 削除するデータがない場合、 `String`, 、 <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> に設定されている <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=fullName>します。 削除の状態を表示する最後に、 `DropLocationLabel`<xref:System.Windows.Forms.Label>します。  
  
 右側にドロップするデータ `ListBox` で決定、 <xref:System.Windows.Forms.Control.DragDrop> イベント ハンドラーと `String` の適切な場所にある値を追加、 `ListBox`です。 ドラッグ操作が、フォームの境界の外側に移動しでドラッグ アンド ドロップ操作を取り消したかどうか、 <xref:System.Windows.Forms.Control.QueryContinueDrag> イベント ハンドラーです。  
  
 このコードの抜粋では、使用方法を示します、 <xref:System.Windows.Forms.DragEventArgs> クラスです。 参照してください、 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 完全なコード例のメソッドです。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop\#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop\#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop\#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="X">
      <MemberSignature Language="C#" Value="public int X { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 X" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.X" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マウス ポインターの x 座標 \(画面座標\) を取得します。</summary>
        <value>マウス ポインターの x 座標 \(ピクセル単位\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例では、2 つのドラッグ アンド ドロップ操作 <xref:System.Windows.Forms.ListBox> コントロールです。 呼び出しの例、 <xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッド、ドラッグ操作の開始時にします。 マウスが移動した場合に、ドラッグ操作が開始以上 <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> 中にマウスの位置から、 <xref:System.Windows.Forms.Control.MouseDown> イベントです。<xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> メソッドを使用中にドラッグする項目のインデックスを確認して、 `MouseDown` イベントです。  
  
 例では、ドラッグ アンド ドロップ操作のカスタムのカーソルを使用しても示します。 この例では 2 つカーソル ファイル `3dwarro.cur` と `3dwno.cur`, 、カスタム ドラッグのアプリケーションのディレクトリに存在および非ドロップ カーソルの場合、それぞれします。 場合に使用されるカスタムのカーソル、 `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> がオンになっています。 カスタムのカーソルが設定されている、 <xref:System.Windows.Forms.Control.GiveFeedback> イベント ハンドラーです。  
  
 キーボードの状態を評価、 <xref:System.Windows.Forms.Control.DragOver> 右側のイベント ハンドラー `ListBox`, ドラッグ操作を決定するには、shift キーを押し、CTRL、alt キーを押し、または CTRL \+ ALT キーの状態に基づいています。 内の場所、 `ListBox` 時にも決定されますが、ドロップが発生する可能性、 `DragOver` イベントです。 削除するデータがない場合、 `String`, 、 <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> に設定されている <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=fullName>します。 削除の状態を表示する最後に、 `DropLocationLabel`<xref:System.Windows.Forms.Label>します。  
  
 右側にドロップするデータ `ListBox` で決定、 <xref:System.Windows.Forms.Control.DragDrop> イベント ハンドラーと `String` の適切な場所にある値を追加、 `ListBox`です。 ドラッグ操作が、フォームの境界の外側に移動しでドラッグ アンド ドロップ操作を取り消したかどうか、 <xref:System.Windows.Forms.Control.QueryContinueDrag> イベント ハンドラーです。  
  
 このコードの抜粋では、使用方法を示します、 <xref:System.Windows.Forms.DragEventArgs> クラスです。 参照してください、 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 完全なコード例のメソッドです。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop\#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop\#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop\#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DragEventArgs.Y" />
      </Docs>
    </Member>
    <Member MemberName="Y">
      <MemberSignature Language="C#" Value="public int Y { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Y" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.Y" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マウス ポインターの y 座標 \(画面座標\) を取得します。</summary>
        <value>マウス ポインターの y 座標 \(ピクセル単位\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例では、2 つのドラッグ アンド ドロップ操作 <xref:System.Windows.Forms.ListBox> コントロールです。 呼び出しの例、 <xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッド、ドラッグ操作の開始時にします。 マウスが移動した場合に、ドラッグ操作が開始以上 <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> 中にマウスの位置から、 <xref:System.Windows.Forms.Control.MouseDown> イベントです。<xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> メソッドを使用中にドラッグする項目のインデックスを確認して、 `MouseDown` イベントです。  
  
 例では、ドラッグ アンド ドロップ操作のカスタムのカーソルを使用しても示します。 この例では 2 つカーソル ファイル `3dwarro.cur` と `3dwno.cur`, 、カスタム ドラッグのアプリケーションのディレクトリに存在および非ドロップ カーソルの場合、それぞれします。 場合に使用されるカスタムのカーソル、 `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> がオンになっています。 カスタムのカーソルが設定されている、 <xref:System.Windows.Forms.Control.GiveFeedback> イベント ハンドラーです。  
  
 キーボードの状態を評価、 <xref:System.Windows.Forms.Control.DragOver> 右側のイベント ハンドラー `ListBox`, ドラッグ操作を決定するには、shift キーを押し、CTRL、alt キーを押し、または CTRL \+ ALT キーの状態に基づいています。 内の場所、 `ListBox` 時にも決定されますが、ドロップが発生する可能性、 `DragOver` イベントです。 削除するデータがない場合、 `String`, 、 <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> に設定されている <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=fullName>します。 削除の状態を表示する最後に、 `DropLocationLabel`<xref:System.Windows.Forms.Label>します。  
  
 右側にドロップするデータ `ListBox` で決定、 <xref:System.Windows.Forms.Control.DragDrop> イベント ハンドラーと `String` の適切な場所にある値を追加、 `ListBox`です。 ドラッグ操作が、フォームの境界の外側に移動しでドラッグ アンド ドロップ操作を取り消したかどうか、 <xref:System.Windows.Forms.Control.QueryContinueDrag> イベント ハンドラーです。  
  
 このコードの抜粋では、使用方法を示します、 <xref:System.Windows.Forms.DragEventArgs> クラスです。 参照してください、 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 完全なコード例のメソッドです。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop\#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop\#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop\#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DragEventArgs.X" />
      </Docs>
    </Member>
  </Members>
</Type>