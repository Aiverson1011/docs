<Type Name="Control" FullName="System.Windows.Forms.Control">
  <TypeSignature Language="C#" Value="public class Control : System.ComponentModel.Component, IDisposable, System.ComponentModel.ISynchronizeInvoke, System.Windows.Forms.IBindableComponent, System.Windows.Forms.IDropTarget, System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Control extends System.ComponentModel.Component implements class System.ComponentModel.IComponent, class System.ComponentModel.ISynchronizeInvoke, class System.IDisposable, class System.Windows.Forms.IBindableComponent, class System.Windows.Forms.IDropTarget, class System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Control" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISynchronizeInvoke</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Forms.IBindableComponent</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Forms.IDropTarget</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Forms.IWin32Window</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Click")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Design.Serialization.DesignerSerializer("System.Windows.Forms.Design.ControlCodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.ControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Windows.Forms")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>視覚的に表現されるコンポーネントであるコントロールの基本クラスを定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 To create your own control class, inherit from the <xref:System.Windows.Forms.UserControl>, <xref:System.Windows.Forms.Control> classes, or from the other Windows Forms provided controls. For more information about authoring custom controls, see [Developing Custom Windows Forms Controls with the .NET Framework](http://msdn.microsoft.com/ja-jp/236cebc0-bd71-4f18-9fd6-5d0e592375df).  
  
 The <xref:System.Windows.Forms.Control> class implements very basic functionality required by classes that display information to the user. It handles user input through the keyboard and pointing devices. It handles message routing and security. It defines the bounds of a control \(its position and size\), although it does not implement painting. It provides a window handle \(**parameterReference tag is not supported!!!!**  
\).  
  
 Windows Forms controls use ambient properties so child controls can appear like their surrounding environment. An **newTerm tag is not supported!!!!**  
 is a control property that, if not set, is retrieved from the parent control. If the control does not have a <xref:System.Windows.Forms.Control.Parent%2A>, and the property is not set, the control attempts to determine the value of the ambient property through the <xref:System.Windows.Forms.Control.Site%2A> property. If the control is not sited, if the site does not support ambient properties, or if the property is not set on the <xref:System.Windows.Forms.AmbientProperties>, the control uses its own default values. Typically, an ambient property represents a characteristic of a control, such as <xref:System.Windows.Forms.Control.BackColor%2A>, that is communicated to a child control. For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default. Ambient properties provided by the <xref:System.Windows.Forms.Control>class include: <xref:System.Windows.Forms.Control.Cursor%2A>, <xref:System.Windows.Forms.Control.Font%2A>, <xref:System.Windows.Forms.Control.BackColor%2A>, <xref:System.Windows.Forms.Control.ForeColor%2A>, and <xref:System.Windows.Forms.Control.RightToLeft%2A>.  
  
> [!NOTE]
>  To make your Windows Forms application support visual styles, be sure to set the <xref:System.Windows.Forms.FlatStyle> property to **languageKeyword tag is not supported!!!!**  
>  and include a manifest with your executable. A manifest is an XML file that is included either as a resource within your application executable or as a separate file that resides in the same directory as the executable file. For an example of a manifest, see the Example section of the <xref:System.Windows.Forms.FlatStyle> enumeration. For more information about using visual styles, see[Visual Styles](http://msdn.microsoft.com/library/windows/desktop/bb773187.aspx).  
  
 Windows Forms has accessibility support built in, and provides information about your application that enables it to work with accessibility client applications such as screen enlarger and reviewer utilities, voice input utilities, on\-screen keyboards, alternative input devices, and keyboard enhancement utilities. Sometimes you will want to provide additional information to accessibility client applications. There are two ways of providing this additional information. You can set the <xref:System.Windows.Forms.Control.AccessibleName%2A>, <xref:System.Windows.Forms.Control.AccessibleDescription%2A>, <xref:System.Windows.Forms.Control.AccessibleDefaultActionDescription%2A>, and <xref:System.Windows.Forms.Control.AccessibleRole%2A> property values, which will be reported to accessibility client applications. This method is typically used to provide limited accessibility information for existing controls. Alternatively, you can write your own class deriving from the <xref:System.Windows.Forms.AccessibleObject> or <xref:System.Windows.Forms.Control.ControlAccessibleObject> classes, providing as much accessibility information as needed.  
  
> [!NOTE]
>  To maintain better performance, do not set the size of a control in its constructor. The preferred method is to override the <xref:System.Windows.Forms.Control.DefaultSize%2A> property.  
  
> [!NOTE]
>  Do not add data bindings for a <xref:System.Windows.Forms.Control> in its constructor. Doing so will cause errors in code generation and can cause unwanted behavior.  
  
 The majority of the controls in the <xref:System.Windows.Forms> namespace use the underlying Windows common control as a base to build on. For more information about the Windows common controls, see[General Control Reference](http://msdn.microsoft.com/library/windows/desktop/bb775497.aspx).  
  
 To identify Windows Forms controls from a separate process, use a standard **languageKeyword tag is not supported!!!!**  
 call to pass the WM\_GETCONTROLNAME message. WM\_GETCONTROLNAME is independent of the language and Windows hierarchy. For more information, see the "Recommended Solution for Windows Forms" topic in[Automating Windows Forms](http://msdn.microsoft.com/library/ms996405.aspx).  
  
 Use the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property to synchronize access to the control from multiple threads. For more information about multithreaded Windows Forms controls, see [How to: Make Thread\-Safe Calls to Windows Forms Controls](http://msdn.microsoft.com/ja-jp/138f38b6-1099-4fd5-910c-390b41cbad35)  
  
 ]]></format>
    </remarks>
    <threadsafe>Only the following members are thread safe: <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" />, <see cref="M:System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)" />, <see cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)" />, <see cref="P:System.Windows.Forms.Control.InvokeRequired" />, and <see cref="M:System.Windows.Forms.Control.CreateGraphics" /> if the handle for the control has already been created. Calling <see cref="M:System.Windows.Forms.Control.CreateGraphics" /> before the control's handle has been created on a background thread can cause illegal cross thread calls.</threadsafe>
    <altmember cref="T:System.Windows.Forms.Form" />
    <altmember cref="T:System.Windows.Forms.ScrollableControl" />
    <altmember cref="T:System.Windows.Forms.ContainerControl" />
    <altmember cref="T:System.ComponentModel.Component" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Control ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.Control" /> クラスの新しいインスタンスを既定の設定で初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Windows.Forms.Control> class is the base class for all controls used in a Windows Forms application. Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Control (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">コントロールによって表示されるテキスト。</param>
        <summary>テキストを指定して、<see cref="T:System.Windows.Forms.Control" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Windows.Forms.Control> class is the base class for all controls used in a Windows Forms application. Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.  
  
 This version of the <xref:System.Windows.Forms.Control.%23ctor%2A> constructor sets the initial <xref:System.Windows.Forms.Control.Text%2A> property value to the **parameterReference tag is not supported!!!!**  
 parameter value.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Control (System.Windows.Forms.Control parent, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.Control parent, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parent" Type="System.Windows.Forms.Control" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parent">コントロールの親である <see cref="T:System.Windows.Forms.Control" />。</param>
        <param name="text">コントロールによって表示されるテキスト。</param>
        <summary>テキストを指定して、<see cref="T:System.Windows.Forms.Control" /> クラスの新しいインスタンスを子コントロールとして初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Windows.Forms.Control> class is the base class for all controls used in a Windows Forms application. Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.  
  
 This version of the <xref:System.Windows.Forms.Control.%23ctor%2A> constructor sets the initial <xref:System.Windows.Forms.Control.Text%2A> property value to the **parameterReference tag is not supported!!!!**  
 parameter value. The constructor also adds the control to the parent control's <xref:System.Windows.Forms.Control.ControlCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Control (string text, int left, int top, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, int32 left, int32 top, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="top" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">コントロールによって表示されるテキスト。</param>
        <param name="left">コントロールのコンテナーの左端からのコントロールの <see cref="P:System.Drawing.Point.X" /> 位置 \(ピクセル単位\)。 値は <see cref="P:System.Windows.Forms.Control.Left" /> プロパティに代入されます。</param>
        <param name="top">コントロールのコンテナーの上端からのコントロールの <see cref="P:System.Drawing.Point.Y" /> 位置 \(ピクセル単位\)。 値は <see cref="P:System.Windows.Forms.Control.Top" /> プロパティに代入されます。</param>
        <param name="width">コントロールの幅 \(ピクセル単位\)。 値は <see cref="P:System.Windows.Forms.Control.Width" /> プロパティに代入されます。</param>
        <param name="height">コントロールの高さ \(ピクセル単位\)。 値は <see cref="P:System.Windows.Forms.Control.Height" /> プロパティに代入されます。</param>
        <summary>テキスト、サイズ、および位置を指定して、<see cref="T:System.Windows.Forms.Control" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control> クラスは、Windows フォーム アプリケーションで使用されるすべてのコントロールの基本クラスです。 通常、このクラスはクラスのインスタンスを作成するのには使用されない、ため、このコンス トラクターは通常直接呼び出されることがなくは、代わりに派生クラスによって呼び出されます。  
  
 このバージョンの <xref:System.Windows.Forms.Control.%23ctor%2A> コンス トラクターの設定、初期 <xref:System.Windows.Forms.Control.Text%2A>プロパティの値を `text` パラメーターの値。 初期 <xref:System.Windows.Forms.Control.Size%2A> と <xref:System.Windows.Forms.Control.Location%2A> によって決まりますが、コントロールの `left`, 、`top`, 、`width` と `height` パラメーターの値。  
  
> [!NOTE]
>  優れたパフォーマンスを維持するには、コンス トラクターで、コントロールのサイズを設定しないでください。 最良の方法をオーバーライドすること、 <xref:System.Windows.Forms.Control.DefaultSize%2A> プロパティです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Control (System.Windows.Forms.Control parent, string text, int left, int top, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.Control parent, string text, int32 left, int32 top, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parent" Type="System.Windows.Forms.Control" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="top" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parent">コントロールの親である <see cref="T:System.Windows.Forms.Control" />。</param>
        <param name="text">コントロールによって表示されるテキスト。</param>
        <param name="left">コントロールのコンテナーの左端からのコントロールの <see cref="P:System.Drawing.Point.X" /> 位置 \(ピクセル単位\)。 値は <see cref="P:System.Windows.Forms.Control.Left" /> プロパティに代入されます。</param>
        <param name="top">コントロールのコンテナーの上端からのコントロールの <see cref="P:System.Drawing.Point.Y" /> 位置 \(ピクセル単位\)。 値は <see cref="P:System.Windows.Forms.Control.Top" /> プロパティに代入されます。</param>
        <param name="width">コントロールの幅 \(ピクセル単位\)。 値は <see cref="P:System.Windows.Forms.Control.Width" /> プロパティに代入されます。</param>
        <param name="height">コントロールの高さ \(ピクセル単位\)。 値は <see cref="P:System.Windows.Forms.Control.Height" /> プロパティに代入されます。</param>
        <summary>テキスト、サイズ、および位置を指定して、<see cref="T:System.Windows.Forms.Control" /> クラスの新しいインスタンスを子コントロールとして初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Windows.Forms.Control> class is the base class for all controls used in a Windows Forms application. Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.  
  
 This version of the <xref:System.Windows.Forms.Control.%23ctor%2A> constructor sets the initial <xref:System.Windows.Forms.Control.Text%2A> property value to the **parameterReference tag is not supported!!!!**  
 parameter value. The constructor also adds the control to the parent control's <xref:System.Windows.Forms.Control.ControlCollection>. The initial <xref:System.Windows.Forms.Control.Size%2A> and <xref:System.Windows.Forms.Control.Location%2A> of the control are determined by the **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
 and **parameterReference tag is not supported!!!!**  
 parameter values.  
  
> [!NOTE]
>  To maintain better performance, do not set the size of a control in its constructor. The preferred method is to override the <xref:System.Windows.Forms.Control.DefaultSize%2A> property.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityNotifyClients">
      <MemberSignature Language="C#" Value="protected void AccessibilityNotifyClients (System.Windows.Forms.AccessibleEvents accEvent, int childID);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void AccessibilityNotifyClients(valuetype System.Windows.Forms.AccessibleEvents accEvent, int32 childID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accEvent" Type="System.Windows.Forms.AccessibleEvents" />
        <Parameter Name="childID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="accEvent">ユーザー補助クライアント アプリケーションに通知する <see cref="T:System.Windows.Forms.AccessibleEvents" />。</param>
        <param name="childID">ユーザー補助対象のイベントを通知する子 <see cref="T:System.Windows.Forms.Control" />。</param>
        <summary>指定した子コントロールの指定した <see cref="T:System.Windows.Forms.AccessibleEvents" /> をユーザー補助クライアント アプリケーションに通知します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 You must call the <xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A?displayProperty=fullName> method for each <xref:System.Windows.Forms.AccessibleEvents> the accessibility client applications are to be notified of. The <xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A> method is typically called when a property is set or from within an event handler. For example, you might call the <xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A> method and pass in an <xref:System.Windows.Forms.AccessibleEvents> value of **languageKeyword tag is not supported!!!!**  
 from within the event handler for the <xref:System.Windows.Forms.Control.VisibleChanged?displayProperty=fullName> event.  
  
   
  
## 例  
 The following code example demonstrates the creation of an accessibility\-aware chart control, using the <xref:System.Windows.Forms.AccessibleObject> and <xref:System.Windows.Forms.Control.ControlAccessibleObject> classes to expose accessible information. The control plots two curves along with a legend. The `ChartControlAccessibleObject` class, which derives from **languageKeyword tag is not supported!!!!**  
, is used in the <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> method to provide custom accessible information for the chart control. Since the chart legend is not an actual <xref:System.Windows.Forms.Control> \-based control, but instead is drawn by the chart control, it does not any built\-in accessible information. Because of this, the `ChartControlAccessibleObject` class overrides the <xref:System.Windows.Forms.AccessibleObject.GetChild%2A> method to return the `CurveLegendAccessibleObject` that represents accessible information for each part of the legend. When an accessible\-aware application uses this control, the control can provide the necessary accessible information.  
  
 This code excerpt demonstrates calling the <xref:System.Windows.Forms.Control.AccessibilityNotifyClients%2A> method. See the <xref:System.Windows.Forms.AccessibleObject> class overview for the complete code example.  
  
 [!code-cpp[System.Windows.Forms.AccessibleObject\#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/CPP/chartcontrol.cpp#5)]
 [!code-csharp[System.Windows.Forms.AccessibleObject\#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/CS/chartcontrol.cs#5)]
 [!code-vb[System.Windows.Forms.AccessibleObject\#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/VB/chartcontrol.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.AccessibleEvents" />
        <altmember cref="P:System.Windows.Forms.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="AccessibilityNotifyClients">
      <MemberSignature Language="C#" Value="protected void AccessibilityNotifyClients (System.Windows.Forms.AccessibleEvents accEvent, int objectID, int childID);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AccessibilityNotifyClients(valuetype System.Windows.Forms.AccessibleEvents accEvent, int32 objectID, int32 childID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accEvent" Type="System.Windows.Forms.AccessibleEvents" />
        <Parameter Name="objectID" Type="System.Int32" />
        <Parameter Name="childID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="accEvent">ユーザー補助クライアント アプリケーションに通知する <see cref="T:System.Windows.Forms.AccessibleEvents" />。</param>
        <param name="objectID">
          <see cref="T:System.Windows.Forms.AccessibleObject" /> の識別子。</param>
        <param name="childID">ユーザー補助対象のイベントを通知する子 <see cref="T:System.Windows.Forms.Control" />。</param>
        <summary>指定した子コントロールの指定した <see cref="T:System.Windows.Forms.AccessibleEvents" /> をユーザー補助クライアント アプリケーションに通知します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityObject">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.AccessibleObject AccessibilityObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.AccessibleObject AccessibilityObject" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AccessibilityObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールに割り当てられた <see cref="T:System.Windows.Forms.AccessibleObject" /> を取得します。</summary>
        <value>コントロールに割り当てられた <see cref="T:System.Windows.Forms.AccessibleObject" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 To control the instance returned from this method, override the <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> method.  
  
 If no <xref:System.Windows.Forms.AccessibleObject> is currently assigned to the control, a new instance of one is created.  
  
> [!NOTE]
>  To get or set the <xref:System.Windows.Forms.Control.AccessibilityObject%2A> property, you must add a reference to the **languageKeyword tag is not supported!!!!**  
>  assembly installed with the[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].  
  
 For more information about accessible objects, see [Active Accessibility](http://msdn.microsoft.com/library/windows/desktop/dd373592.aspx).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateAccessibilityInstance" />
        <altmember cref="T:System.Windows.Forms.Control.ControlAccessibleObject" />
        <altmember cref="T:System.Windows.Forms.AccessibleObject" />
      </Docs>
    </Member>
    <Member MemberName="AccessibleDefaultActionDescription">
      <MemberSignature Language="C#" Value="public string AccessibleDefaultActionDescription { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccessibleDefaultActionDescription" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AccessibleDefaultActionDescription" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アクセシビリティ クライアント アプリケーションで使用されるコントロールの既定のアクションの説明を取得または設定します。</summary>
        <value>ユーザー補助クライアント アプリケーションによって使用される、コントロールの既定のアクションの説明。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オブジェクトの <xref:System.Windows.Forms.Control.AccessibleDefaultActionDescription%2A> プロパティは、オブジェクトのユーザーの視点からの操作の主要な方法を説明します。 このプロパティは、動詞または短い動詞句を指定する必要があります。  
  
> [!NOTE]
>  すべてのオブジェクトがある既定の操作と、一部のオブジェクトは既定のアクションに関連付けられている必要があります、 <xref:System.Windows.Forms.AccessibleObject.Value%2A?displayProperty=fullName> プロパティには、次の例のようにします。  
  
-   チェック ボックスがオンが「をオフにします」の既定のアクションと「オン」の値  
  
-   チェック ボックスをオフが「確認」の既定のアクションと「オフ」の値  
  
-   「印刷」というラベルのボタンを持つ値はありません「キーを押して、」の既定のアクション。  
  
-   ラベルまたは"Printer"を表示するテキスト ボックス コントロールは、既定のアクションはありませんが、「プリンター」の値は  
  
 ユーザー補助オブジェクトのプロパティの詳細については、次を参照してください。 [Content of Descriptive Properties](http://msdn.microsoft.com/library/windows/desktop/dd318025.aspx)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.AccessibleName" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleRole" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleDescription" />
        <altmember cref="P:System.Windows.Forms.AccessibleObject.DefaultAction" />
      </Docs>
    </Member>
    <Member MemberName="AccessibleDescription">
      <MemberSignature Language="C#" Value="public string AccessibleDescription { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccessibleDescription" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AccessibleDescription" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザー補助クライアント アプリケーションによって使用される、コントロールの説明を取得または設定します。</summary>
        <value>ユーザー補助クライアント アプリケーションによって使用されるコントロールの説明。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 An object's <xref:System.Windows.Forms.Control.AccessibleDescription%2A> property provides a textual description about an object's visual appearance. The description is primarily used to provide greater context for low\-vision or blind users, but can also be used for context searching or other applications.  
  
 The <xref:System.Windows.Forms.Control.AccessibleDescription%2A> property is needed if the description is not obvious, or if it is redundant based on the object's <xref:System.Windows.Forms.Control.AccessibleName%2A>, <xref:System.Windows.Forms.Control.AccessibleRole%2A>, <xref:System.Windows.Forms.AccessibleObject.State%2A>, and <xref:System.Windows.Forms.AccessibleObject.Value%2A> properties. For example, a button with "OK" would not need additional information, but a button that shows a picture of a cactus would. The <xref:System.Windows.Forms.Control.AccessibleName%2A>, and <xref:System.Windows.Forms.Control.AccessibleRole%2A> \(and perhaps <xref:System.Windows.Forms.AccessibleObject.Help%2A>\) properties for the cactus button would describe its purpose, but the <xref:System.Windows.Forms.Control.AccessibleDescription%2A> property would convey information that is less tangible, such as "A button that shows a picture of a cactus."  
  
 For more information about properties of accessible objects, see [Content of Descriptive Properties](http://msdn.microsoft.com/library/windows/desktop/dd318025.aspx).  
  
   
  
## 例  
 The following code example creates an instance of a <xref:System.Windows.Forms.CheckBox> derived class, `MyCheckBox`, assigns it an <xref:System.Drawing.Image> to its <xref:System.Windows.Forms.ButtonBase.Image%2A> property and sets the <xref:System.Windows.Forms.Control.AccessibleName%2A> and <xref:System.Windows.Forms.Control.AccessibleDescription%2A> properties, because the <xref:System.Windows.Forms.Control.Text%2A> property is **languageKeyword tag is not supported!!!!**  
. This example requires that you have a <xref:System.Windows.Forms.Form> named `MyForm`.  
  
 [!code-cpp[Windows.Forms.Control.ControlAccessibleObject\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control.ControlAccessibleObject/CPP/controlaccessibility.cpp#2)]
 [!code-csharp[Windows.Forms.Control.ControlAccessibleObject\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control.ControlAccessibleObject/CS/controlaccessibility.cs#2)]
 [!code-vb[Windows.Forms.Control.ControlAccessibleObject\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control.ControlAccessibleObject/VB/controlaccessibility.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.AccessibleName" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleRole" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleDefaultActionDescription" />
        <altmember cref="P:System.Windows.Forms.AccessibleObject.Description" />
      </Docs>
    </Member>
    <Member MemberName="AccessibleName">
      <MemberSignature Language="C#" Value="public string AccessibleName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccessibleName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AccessibleName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザー補助クライアント アプリケーションによって使用されるコントロールの名前を取得または設定します。</summary>
        <value>ユーザー補助クライアント アプリケーションによって使用されるコントロールの名前。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.AccessibleName%2A> プロパティは、簡単に記述および内のテキストなど、コンテナー内のオブジェクトを識別するラベル、 <xref:System.Windows.Forms.Button>, 、名前、 <xref:System.Windows.Forms.MenuItem>, 、または横に表示されるラベル、 <xref:System.Windows.Forms.TextBox> コントロールです。  
  
 ユーザー補助オブジェクトのプロパティの詳細については、次を参照してください。、"[Content of Descriptive Properties](http://msdn.microsoft.com/library/windows/desktop/dd318025.aspx)します。  
  
   
  
## 例  
 次のコード例は、のインスタンスを作成、 <xref:System.Windows.Forms.CheckBox> 派生クラスを `MyCheckBox`, が割り当てられます、 <xref:System.Drawing.Image> にその <xref:System.Windows.Forms.ButtonBase.Image%2A> プロパティとセット、 <xref:System.Windows.Forms.Control.AccessibleName%2A> と <xref:System.Windows.Forms.Control.AccessibleDescription%2A> プロパティ、 <xref:System.Windows.Forms.Control.Text%2A> プロパティは `null`です。 この例は、 <xref:System.Windows.Forms.Form> という名前 `MyForm`します。  
  
 [!code-cpp[Windows.Forms.Control.ControlAccessibleObject\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control.ControlAccessibleObject/CPP/controlaccessibility.cpp#2)]
 [!code-csharp[Windows.Forms.Control.ControlAccessibleObject\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control.ControlAccessibleObject/CS/controlaccessibility.cs#2)]
 [!code-vb[Windows.Forms.Control.ControlAccessibleObject\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control.ControlAccessibleObject/VB/controlaccessibility.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.AccessibleDescription" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleRole" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleDefaultActionDescription" />
        <altmember cref="P:System.Windows.Forms.AccessibleObject.Name" />
      </Docs>
    </Member>
    <Member MemberName="AccessibleRole">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.AccessibleRole AccessibleRole { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.AccessibleRole AccessibleRole" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AccessibleRole" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleRole</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールのアクセスできる役割を取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.AccessibleRole" /> の値の 1 つ。 既定値は、<see langword="Default" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.AccessibleRole%2A> プロパティは、オブジェクトがどのような種類のユーザー インターフェイス要素であるかを説明します。 コントロールの役割が決定できない場合、<xref:System.Windows.Forms.Control.AccessibleRole%2A> プロパティは `Default` に設定されます。  
  
 ユーザー補助オブジェクトのプロパティの詳細については、次を参照してください。 [Content of Descriptive Properties](http://msdn.microsoft.com/library/windows/desktop/dd318025.aspx)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">割り当てられている値は、のいずれかではない、 <see cref="T:System.Windows.Forms.AccessibleRole" /> 値。</exception>
        <altmember cref="T:System.Windows.Forms.AccessibleRole" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleDescription" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleName" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleDefaultActionDescription" />
        <altmember cref="P:System.Windows.Forms.AccessibleObject.Role" />
      </Docs>
    </Member>
    <Member MemberName="AllowDrop">
      <MemberSignature Language="C#" Value="public virtual bool AllowDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDrop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AllowDrop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがコントロールにドラッグしたデータを、そのコントロールが受け入れることができるかどうかを示す値を取得または設定します。</summary>
        <value>コントロールでドラッグ アンド ドロップ操作を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次のコード例によりイメージまたはイメージ ファイルをフォームにドラッグして、上の点で、表示するユーザーが削除されます。<xref:System.Windows.Forms.Control.OnPaint%2A> メソッドをオーバーライドして、フォームが描画されるたびに、イメージを再描画。 それ以外の場合イメージは、次回の再描画するまで存続はのみです。<xref:System.Windows.Forms.Control.DragEnter> イベント処理メソッドは、フォームにドラッグされているデータの種類を決定し、適切なフィードバックを提供します。<xref:System.Windows.Forms.Control.DragDrop> 場合、イベント処理メソッドが、フォームの画像を表示、 <xref:System.Drawing.Image> データから作成できます。<xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=fullName> と <xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=fullName> 値は、画面座標、例では、 <xref:System.Windows.Forms.Control.PointToClient%2A> をクライアント座標に変換するメソッドです。  
  
 [!code-cpp[Windows.Forms.Control.DragOperations\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CPP/imagedrag.cpp#1)]
 [!code-csharp[Windows.Forms.Control.DragOperations\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CS/imagedrag.cs#1)]
 [!code-vb[Windows.Forms.Control.DragOperations\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/VB/imagedrag.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for unrestricted Clipboard access to set this property to **languageKeyword tag is not supported!!!!**  
. Associated enumeration: the **languageKeyword tag is not supported!!!!**  
 value of <see cref="T:System.Security.Permissions.UIPermissionClipboard" /></permission>
        <block subset="none" type="overrides">
          <para>When overriding the <see cref="P:System.Windows.Forms.Control.AllowDrop" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.AllowDrop" /> property to extend the base implementation. Otherwise, you must provide all the implementation. You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.AllowDrop" /> property; you can override only one if needed.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.DragEventArgs" />
        <altmember cref="E:System.Windows.Forms.Control.DragOver" />
        <altmember cref="E:System.Windows.Forms.Control.DragDrop" />
        <altmember cref="E:System.Windows.Forms.Control.DragEnter" />
        <altmember cref="E:System.Windows.Forms.Control.DragLeave" />
        <altmember cref="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)" />
      </Docs>
    </Member>
    <Member MemberName="Anchor">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.AnchorStyles Anchor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.AnchorStyles Anchor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Anchor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AnchorStyles</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールがバインドされるコンテナーの端を取得または設定し、親のサイズ変更時に、コントロールのサイズがどのように変化するかを決定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.AnchorStyles" /> 値のビットごとの組み合わせ。 既定値は <see langword="Top" /> および <see langword="Left" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Windows.Forms.Control.Anchor%2A> プロパティを定義する方法、コントロールが自動的にサイズ変更、親コントロールがサイズ変更するとします。 親コントロールにコントロールを固定すると、親コントロールがサイズ変更されるとに、固定された端が親コントロールの位置を基準に保つことができます。  
  
 コンテナーの端を 1 つまたは複数のコントロールを固定することができます。 ある場合など、 <xref:System.Windows.Forms.Form> で、 <xref:System.Windows.Forms.Button> が <xref:System.Windows.Forms.Control.Anchor%2A> にプロパティの値が設定されている `Top` と `Bottom`, 、 <xref:System.Windows.Forms.Button> アンカーの上端と下端の端までの距離を維持するために拡大、 <xref:System.Windows.Forms.Form> として、 <xref:System.Windows.Forms.Control.Height%2A> の <xref:System.Windows.Forms.Form> が増加するとします。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.Control.Anchor%2A> と <xref:System.Windows.Forms.Control.Dock%2A> プロパティが相互に排他的です。 は一度に 1 つだけを設定することができ、最後に、設定が優先されます。  
  
   
  
## 例  
 次のコード例では追加、 <xref:System.Windows.Forms.Button> をフォームにし、一部の一般的なプロパティを設定します。 例は、フォームの右下隅にボタンを固定することにより、フォームがサイズ変更すると、相対的な位置関係が維持されるようにします。 次に、設定、 <xref:System.Windows.Forms.Control.BackgroundImage%2A> と同じサイズにボタンのサイズを変更し、 <xref:System.Drawing.Image>です。 その後、設定、 <xref:System.Windows.Forms.Control.TabStop%2A> に `true` し、設定、 <xref:System.Windows.Forms.Control.TabIndex%2A> プロパティです。 最後に、処理するイベント ハンドラーを追加、 <xref:System.Windows.Forms.Control.Click> ボタンのイベントです。 この例は、 <xref:System.Windows.Forms.ImageList> という名前 `imageList1`します。  
  
 [!code-cpp[Windows.Forms.Control Properties\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#3)]
 [!code-csharp[Windows.Forms.Control Properties\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#3)]
 [!code-vb[Windows.Forms.Control Properties\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding the <see cref="P:System.Windows.Forms.Control.Anchor" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.Anchor" /> property to extend the base implementation. Otherwise, you must provide all the implementation. You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.Anchor" /> property; you can override only one if needed.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.AnchorStyles" />
        <altmember cref="P:System.Windows.Forms.Control.Dock" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="AutoScrollOffset">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Point AutoScrollOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point AutoScrollOffset" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AutoScrollOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Point), "0, 0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="M:System.Windows.Forms.ScrollableControl.ScrollControlIntoView(System.Windows.Forms.Control)" /> でのこのコントロールのスクロール先を取得または設定します。</summary>
        <value>スクロール位置を指定する <see cref="T:System.Drawing.Point" />。 既定値は、コントロールの左上隅です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSize">
      <MemberSignature Language="C#" Value="public virtual bool AutoSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AutoSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このクラスでは、このプロパティは使用されません。</summary>
        <value>有効である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This property is not relevant for this class.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSizeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AutoSizeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AutoSizeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.AutoSizeChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このクラスでは、このイベントは使用されません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This event is not relevant for this class.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.BackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-501)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの背景色を取得または設定します。</summary>
        <value>コントロールの背景色を表す <see cref="T:System.Drawing.Color" />。 既定値は <see cref="P:System.Windows.Forms.Control.DefaultBackColor" /> プロパティの値です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Windows.Forms.Control.BackColor%2A> property does not support transparent colors unless the **languageKeyword tag is not supported!!!!**  
 value of <xref:System.Windows.Forms.ControlStyles?displayProperty=fullName> is set to **languageKeyword tag is not supported!!!!**  
.  
  
 The <xref:System.Windows.Forms.Control.BackColor%2A> property is an ambient property. An ambient property is a control property that, if not set, is retrieved from the parent control. For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default. For more information about ambient properties, see the <xref:System.Windows.Forms.AmbientProperties> class or the <xref:System.Windows.Forms.Control> class overview.  
  
   
  
## 例  
 The following code example sets the <xref:System.Windows.Forms.Control.BackColor%2A> and <xref:System.Windows.Forms.Control.ForeColor%2A> of the controls to the default system colors. The code recursively calls itself if the control has any child controls. This code example requires that you have a <xref:System.Windows.Forms.Form> with at least one child control; however, a child container control, like a <xref:System.Windows.Forms.Panel> or <xref:System.Windows.Forms.GroupBox>, with its own child control\(s\) would better demonstrate the recursion.  
  
 [!code-cpp[Windows.Forms.Control Properties\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#1)]
 [!code-csharp[Windows.Forms.Control Properties\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#1)]
 [!code-vb[Windows.Forms.Control Properties\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding the <see cref="P:System.Windows.Forms.Control.BackColor" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.BackColor" /> property to extend the base implementation. Otherwise, you must provide all the implementation. You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.BackColor" /> property; you can override only one if needed.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.AmbientProperties" />
        <altmember cref="E:System.Windows.Forms.Control.BackColorChanged" />
      </Docs>
    </Member>
    <Member MemberName="BackColorChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackColorChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackColorChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.BackColorChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.BackColor" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、 <xref:System.Windows.Forms.Control.BackColor%2A> プロパティがプログラムの変更やユーザー操作によって変更します。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例は、イベント ハンドラーを実行すると実行、 <xref:System.Windows.Forms.Control.Text%2A> プロパティ値が変更されます。<xref:System.Windows.Forms.Control> クラス名のパターンをいくつかの方法には *PropertyName*`Changed` いるときに発生、対応する *PropertyName* 値の変更 \(*PropertyName* 、対応するプロパティの名前を表します\)。  
  
 次のコードを変更する例、 <xref:System.Windows.Forms.Control.ForeColor%2A> の <xref:System.Windows.Forms.TextBox> データを表示します。 例では、文字列に変換する 10 進数と変更、 <xref:System.Windows.Forms.Control.ForeColor%2A> に <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> 負の値とする <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> 数値が正の場合。 この例は、 <xref:System.Windows.Forms.Form>を含む、 <xref:System.Windows.Forms.TextBox>です。  
  
 [!code-cpp[Windows.Forms.Control\_PropertyChangedEvents\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CPP/propertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control\_PropertyChangedEvents\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CS/propertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control\_PropertyChangedEvents\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/VB/propertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.BackColor" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)" />
        <altmember cref="T:System.Drawing.Color" />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImage">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Image BackgroundImage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Image BackgroundImage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.BackgroundImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールに表示される背景イメージを取得または設定します。</summary>
        <value>コントロールの背景に表示するイメージを表す <see cref="T:System.Drawing.Image" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
-   Use the <xref:System.Windows.Forms.Control.BackgroundImage%2A> property to place a graphic image onto a control.  
  
> [!NOTE]
>  Images with translucent or transparent colors are not supported by Windows Forms controls as background images.  
>   
>  This property is not supported on child controls whose <xref:System.Windows.Forms.Form.RightToLeftLayout%2A> property is **languageKeyword tag is not supported!!!!**  
> .  
  
   
  
## 例  
 The following code example adds a <xref:System.Windows.Forms.Button> to a form and sets some of its common properties. The example anchors the button to the bottom\-right corner of the form so it keeps its relative position as the form is resized. Next it sets the <xref:System.Windows.Forms.Control.BackgroundImage%2A> and resizes the button to the same size as the <xref:System.Drawing.Image>. The example then sets the <xref:System.Windows.Forms.Control.TabStop%2A> to **languageKeyword tag is not supported!!!!**  
 and sets the <xref:System.Windows.Forms.Control.TabIndex%2A> property. Lastly, it adds an event handler to handle the <xref:System.Windows.Forms.Control.Click> event of the button. This example requires that you have an <xref:System.Windows.Forms.ImageList> named `imageList1`.  
  
 [!code-cpp[Windows.Forms.Control Properties\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#3)]
 [!code-csharp[Windows.Forms.Control Properties\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#3)]
 [!code-vb[Windows.Forms.Control Properties\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding the <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> property to extend the base implementation. Otherwise, you must provide all the implementation. You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> property; you can override only one if needed.</para>
        </block>
        <altmember cref="T:System.Drawing.Image" />
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageChanged" />
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImageLayout" />
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.BackgroundImageChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、 <xref:System.Windows.Forms.Control.BackgroundImage%2A> プロパティがプログラムの変更やユーザー操作によって変更します。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例は、イベント ハンドラーを実行すると実行、 <xref:System.Windows.Forms.Control.Text%2A> プロパティ値が変更されます。<xref:System.Windows.Forms.Control> クラス名のパターンをいくつかの方法には *PropertyName*`Changed` いるときに発生、対応する *PropertyName* 値の変更 \(*PropertyName* 、対応するプロパティの名前を表します\)。  
  
 次のコードを変更する例、 <xref:System.Windows.Forms.Control.ForeColor%2A> の <xref:System.Windows.Forms.TextBox> データを表示します。 例では、文字列に変換する 10 進数と変更、 <xref:System.Windows.Forms.Control.ForeColor%2A> に <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> 負の値とする <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> 数値が正の場合。 この例は、 <xref:System.Windows.Forms.Form> を含む、 <xref:System.Windows.Forms.TextBox>です。  
  
 [!code-cpp[Windows.Forms.Control\_PropertyChangedEvents\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CPP/propertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control\_PropertyChangedEvents\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CS/propertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control\_PropertyChangedEvents\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/VB/propertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImage" />
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImageLayout" />
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" />
        <altmember cref="T:System.Drawing.Image" />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayout">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImageLayout BackgroundImageLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.BackgroundImageLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ImageLayout" /> 列挙型で定義される背景画像のレイアウトを取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ImageLayout" /> の値の 1 つ \(<see cref="F:System.Windows.Forms.ImageLayout.Center" />、<see cref="F:System.Windows.Forms.ImageLayout.None" />、<see cref="F:System.Windows.Forms.ImageLayout.Stretch" />、<see cref="F:System.Windows.Forms.ImageLayout.Tile" />、または <see cref="F:System.Windows.Forms.ImageLayout.Zoom" />\)。 既定値は <see cref="F:System.Windows.Forms.ImageLayout.Tile" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Windows.Forms.Control.BackgroundImageLayout%2A> プロパティをコントロールに配置したイメージの動作と位置を指定します。<xref:System.Windows.Forms.Control.BackgroundImageLayout%2A> 場合にのみ有効になります、 <xref:System.Windows.Forms.Control.BackgroundImage%2A> プロパティを設定します。  
  
 設定した場合は、サイズの大きなイメージのパフォーマンスを向上できます <xref:System.Windows.Forms.Control.BackgroundImageLayout%2A> 以外の何かに <xref:System.Windows.Forms.ImageLayout.Tile>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定された列挙値が存在しません。</exception>
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImage" />
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" />
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageChanged" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageLayoutChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.BackgroundImageLayout" /> プロパティが変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、 <xref:System.Windows.Forms.Control.BackgroundImageLayout%2A> プログラム、またはユーザーとの対話によってプロパティが変更されました。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.Control.BackgroundImageLayoutChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行するから継承する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.Control>, など、 <xref:System.Windows.Forms.Button> または <xref:System.Windows.Forms.ComboBox>です。 インスタンスを名前 `Control1` イベント ハンドラーが関連付けられていることを確認し、 <xref:System.Windows.Forms.Control.BackgroundImageLayoutChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#9)]
 [!code-vb[System.Windows.Forms.EventExamples\#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImage" />
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImageLayout" />
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageChanged" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="method">パラメーターをとらないメソッドへのデリゲート。</param>
        <summary>コントロールの基になるハンドルが作成されたスレッド上で、指定したデリゲートを非同期的に実行します。</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> 操作の結果を表す <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 デリゲートは、非同期的に呼び出され、このメソッドをすぐに返します。 このメソッドは、コントロールのハンドルを所有するスレッドからでも、任意のスレッドから呼び出すことができます。 コントロールのハンドルがまだ存在しない場合、このメソッドは、コントロールまたはウィンドウ ハンドルを持つフォームが見つかるまで、コントロールの親チェーンを検索します。 適切なハンドルが見つからない場合 <xref:System.Windows.Forms.Control.BeginInvoke%2A> は例外をスローします。 デリゲート メソッド内の例外はトラップし、アプリケーションのトラップされていない例外ハンドラーに送信されると見なされます。  
  
 呼び出すことができます <xref:System.Windows.Forms.Control.EndInvoke%2A> に必要なが、これが必要ない場合、デリゲートの戻り値を取得します。<xref:System.Windows.Forms.Control.EndInvoke%2A> 戻り値を取得するまでブロックされます。  
  
> [!NOTE]
>  コントロールのほとんどのメソッドしか呼べませんスレッドからコントロールが作成されました。 加え、 <xref:System.Windows.Forms.Control.InvokeRequired%2A> プロパティには、コントロールのスレッド セーフである 4 つのメソッドもあります: <xref:System.Windows.Forms.Control.Invoke%2A>, 、<xref:System.Windows.Forms.Control.BeginInvoke%2A>, 、<xref:System.Windows.Forms.Control.EndInvoke%2A>, 、および <xref:System.Windows.Forms.Control.CreateGraphics%2A> コントロールのハンドルが既に作成されている場合。 呼び出す <xref:System.Windows.Forms.Control.CreateGraphics%2A> コントロールのハンドルがバック グラウンド スレッドで作成される前に、可能性がありますバックします。 その他のすべてのメソッド呼び出しの invoke メソッドのいずれかを使用する必要があります、コントロールのスレッドへの呼び出しをマーシャ リングします。 Invoke メソッドは、常に、コントロールのスレッドでコールバックを呼び出します。  
  
> [!NOTE]
>  メッセージを処理するスレッドがアクティブでなくなった場合、例外がスローされます。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.Windows.Forms.Control.BeginInvoke%2A> メソッドです。  
  
 [!code-cpp[Control\_BeginInvoke\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_BeginInvoke/CPP/control_begininvoke.cpp#2)]
 [!code-csharp[Control\_BeginInvoke\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_BeginInvoke/CS/control_begininvoke.cs#2)]
 [!code-vb[Control\_BeginInvoke\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_BeginInvoke/VB/control_begininvoke.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">適切なウィンドウ ハンドルが見つかりません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for the immediate caller to call unmanaged code. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="M:System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)" />
        <altmember cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)" />
        <altmember cref="M:System.Windows.Forms.Control.CreateGraphics" />
        <altmember cref="P:System.Windows.Forms.Control.InvokeRequired" />
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (Delegate method, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">
          <c>args</c> パラメーターに指定されている数および型と同じ数および型のパラメーターをとるメソッドへのデリゲート。</param>
        <param name="args">特定のメソッドに引数として渡すオブジェクトの配列。 引数が必要ない場合は、<see langword="null" /> を指定できます。</param>
        <summary>コントロールの基になるハンドルが作成されたスレッド上で、指定した引数で指定したデリゲートを非同期的に実行します。</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> 操作の結果を表す <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 デリゲートは、非同期的に呼び出され、このメソッドをすぐに返します。 このメソッドは、コントロールのハンドルを所有するスレッドからでも、任意のスレッドから呼び出すことができます。 コントロールのハンドルがまだ存在しない場合、このメソッドは、コントロールまたはウィンドウ ハンドルを持つフォームが見つかるまで、コントロールの親チェーンを検索します。 適切なハンドルが見つからない場合 <xref:System.Windows.Forms.Control.BeginInvoke%2A> は例外をスローします。 デリゲート メソッド内の例外はトラップし、アプリケーションのトラップされていない例外ハンドラーに送信されると見なされます。  
  
 呼び出すことができます <xref:System.Windows.Forms.Control.EndInvoke%2A> に必要なが、これが必要ない場合、デリゲートの戻り値を取得します。<xref:System.Windows.Forms.Control.EndInvoke%2A> 戻り値を取得するまでブロックされます。  
  
> [!NOTE]
>  コントロールのほとんどのメソッドしか呼べませんスレッドからコントロールが作成されました。 加え、 <xref:System.Windows.Forms.Control.InvokeRequired%2A> プロパティには、コントロールのスレッド セーフである 4 つのメソッドもあります: <xref:System.Windows.Forms.Control.Invoke%2A>, 、<xref:System.Windows.Forms.Control.BeginInvoke%2A>, 、<xref:System.Windows.Forms.Control.EndInvoke%2A>, 、および <xref:System.Windows.Forms.Control.CreateGraphics%2A> コントロールのハンドルが既に作成されている場合。 呼び出す <xref:System.Windows.Forms.Control.CreateGraphics%2A> コントロールのハンドルがバック グラウンド スレッドで作成される前に、可能性がありますバックします。 その他のすべてのメソッド呼び出しの invoke メソッドのいずれかを使用する必要があります、コントロールのスレッドへの呼び出しをマーシャ リングします。 Invoke メソッドは、常に、コントロールのスレッドでコールバックを呼び出します。  
  
> [!NOTE]
>  メッセージを処理するスレッドがアクティブでなくなった場合、例外がスローされます。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.Windows.Forms.Control.BeginInvoke%2A> メソッドです。  
  
 [!code-cpp[Control\_BeginInvoke\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_BeginInvoke/CPP/control_begininvoke.cpp#1)]
 [!code-csharp[Control\_BeginInvoke\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_BeginInvoke/CS/control_begininvoke.cs#1)]
 [!code-vb[Control\_BeginInvoke\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_BeginInvoke/VB/control_begininvoke.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">適切なウィンドウ ハンドルが見つかりません。</exception>
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="M:System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)" />
        <altmember cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)" />
        <altmember cref="M:System.Windows.Forms.Control.CreateGraphics" />
        <altmember cref="P:System.Windows.Forms.Control.InvokeRequired" />
      </Docs>
    </Member>
    <Member MemberName="BindingContext">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.BindingContext BindingContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.BindingContext BindingContext" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.BindingContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの <see cref="T:System.Windows.Forms.BindingContext" /> を取得または設定します。</summary>
        <value>コントロールの <see cref="T:System.Windows.Forms.BindingContext" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.BindingContext> の <xref:System.Windows.Forms.Control> 、1 つを返すために使用<xref:System.Windows.Forms.BindingManagerBase> に含まれるすべてのデータ バインド コントロール、 <xref:System.Windows.Forms.Control>です。<xref:System.Windows.Forms.BindingManagerBase> 同期されている同じデータ ソースにバインドされているすべてのコントロールを保持します。 たとえば、設定、 <xref:System.Windows.Forms.BindingManagerBase.Position%2A> のプロパティ、 <xref:System.Windows.Forms.BindingManagerBase> すべてのデータ バインド コントロールを参照する基になるリストで、項目を指定します。  
  
 新しいを作成する方法について <xref:System.Windows.Forms.BindingContext> に割り当てることと、 <xref:System.Windows.Forms.Control.BindingContext%2A> プロパティを参照してください、 <xref:System.Windows.Forms.BindingContext.%23ctor%2A>です。  
  
   
  
## 例  
 次のコード例は、4 つ作成 <xref:System.Windows.Forms.Binding> 5 つのコントロールをバインドするオブジェクト、 <xref:System.Windows.Forms.DateTimePicker> 4 <xref:System.Windows.Forms.TextBox> いくつかのデータ ソースへのコントロールです。<xref:System.Windows.Forms.BindingContext> を使用して取得、 <xref:System.Windows.Forms.BindingManagerBase> データ ソースごとにします。  
  
 [!code-cpp[Classic BindingContext Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic BindingContext Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BindingContext Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic BindingContext Example/CS/source.cs#1)]
 [!code-vb[Classic BindingContext Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic BindingContext Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding the <see cref="P:System.Windows.Forms.Control.BindingContext" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.BindingContext" /> property to extend the base implementation. Otherwise, you must provide all the implementation. You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.BindingContext" /> property; you can override only one if needed.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.BindingContextChanged" />
        <altmember cref="T:System.Windows.Forms.Binding" />
        <altmember cref="T:System.Windows.Forms.BindingManagerBase" />
      </Docs>
    </Member>
    <Member MemberName="BindingContextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BindingContextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BindingContextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.BindingContextChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.BindingContext" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 To add a new <xref:System.Windows.Forms.BindingContext> to the <xref:System.Windows.Forms.Control> through the <xref:System.Windows.Forms.Control.BindingContext%2A> property, see the <xref:System.Windows.Forms.BindingContext.%23ctor%2A> constructor.  
  
 This event is raised if the <xref:System.Windows.Forms.Control.BindingContext%2A> property is changed is changed by either a programmatic modification or user interaction.  
  
 For more information about handling events, see [Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f).  
  
   
  
## 例  
 The following code example adds an <xref:System.EventHandler> delegate to the <xref:System.Windows.Forms.Control.BindingContextChanged> event of a <xref:System.Windows.Forms.TextBox> control.  
  
 [!code-cpp[Classic Control.BindingContextChanged Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Control.BindingContextChanged Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Control.BindingContextChanged Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Control.BindingContextChanged Example/CS/source.cs#1)]
 [!code-vb[Classic Control.BindingContextChanged Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Control.BindingContextChanged Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.BindingContext" />
        <altmember cref="T:System.Windows.Forms.Binding" />
        <altmember cref="T:System.Windows.Forms.BindingManagerBase" />
        <altmember cref="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Bottom">
      <MemberSignature Language="C#" Value="public int Bottom { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Bottom" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Bottom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの下端とコンテナーのクライアント領域の上端の間の距離をピクセルで取得します。</summary>
        <value>
          <see cref="T:System.Int32" /> は、コントロールの下端とコンテナーのクライアント領域の上端の間の距離 \(ピクセル単位\) を示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティの値の合計、 <xref:System.Windows.Forms.Control.Top%2A> プロパティの値、および <xref:System.Windows.Forms.Control.Height%2A> プロパティの値。  
  
 <xref:System.Windows.Forms.Control.Bottom%2A> プロパティは読み取り専用プロパティです。 このプロパティの値を操作するには、値の変更、 <xref:System.Windows.Forms.Control.Top%2A> または <xref:System.Windows.Forms.Control.Height%2A> プロパティまたは呼び出し元、 <xref:System.Windows.Forms.Control.SetBounds%2A>, 、<xref:System.Windows.Forms.Control.SetBoundsCore%2A>, 、<xref:System.Windows.Forms.Control.UpdateBounds%2A>, 、または <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> メソッドです。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Windows.Forms.Control.Bottom%2A> の下限を定義するプロパティ、 <xref:System.Windows.Forms.TextBox> コントロール コンテナーのクライアント領域を基準とします。  
  
 [!code-cpp[Control.KeyUp\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyUp/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyUp\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyUp/CS/form1.cs#1)]
 [!code-vb[Control.KeyUp\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyUp/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Top" />
        <altmember cref="P:System.Windows.Forms.Control.Height" />
      </Docs>
    </Member>
    <Member MemberName="Bounds">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle Bounds { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle Bounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Bounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クライアント以外の要素を含むコントロールの、親コントロールに対する相対的なサイズおよび位置をピクセル単位で取得または設定します。</summary>
        <value>クライアント以外の要素を含むコントロールの、親コントロールに対する相対的なサイズおよび位置を表す <see cref="T:System.Drawing.Rectangle" /> \(ピクセル単位\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コントロールの範囲には、スクロール バー、罫線、タイトル バー、およびメニューなどの非クライアント要素が含まれます。<xref:System.Windows.Forms.Control.SetBoundsCore%2A> メソッドを呼び出して、設定、 <xref:System.Windows.Forms.Control.Bounds%2A> プロパティです。<xref:System.Windows.Forms.Control.Bounds%2A>プロパティは、常にでは変更されません、 `set` メソッドをオーバーライドするため、 <xref:System.Windows.Forms.Control.SetBoundsCore%2A> 、コードが実行されることを確認する方法と、 <xref:System.Windows.Forms.Control.Bounds%2A> プロパティを設定します。  
  
   
  
## 例  
 次のコード例では、3 つが作成されます <xref:System.Windows.Forms.Button> フォームのコントロールし、さまざまなサイズと場所関連プロパティを使用してそのサイズと場所を設定します。 この例である必要があります、 <xref:System.Windows.Forms.Form> を持つ幅と高さには、少なくとも 300 ピクセルです。  
  
 [!code-cpp[Windows.Forms.Control SizeLocation\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CPP/controlsizelocation.cpp#1)]
 [!code-csharp[Windows.Forms.Control SizeLocation\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CS/controlsizelocation.cs#1)]
 [!code-vb[Windows.Forms.Control SizeLocation\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/VB/controlsizelocation.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Top" />
        <altmember cref="P:System.Windows.Forms.Control.Left" />
        <altmember cref="P:System.Windows.Forms.Control.Height" />
        <altmember cref="P:System.Windows.Forms.Control.Width" />
      </Docs>
    </Member>
    <Member MemberName="BringToFront">
      <MemberSignature Language="C#" Value="public void BringToFront ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BringToFront() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.BringToFront" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールを z オーダーの最前面へ移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コントロールは、z オーダーの最前面に移動されます。 コントロールが別のコントロールの子である場合は、子コントロールは、z オーダーの最前面に移動されます。<xref:System.Windows.Forms.Control.BringToFront%2A> トップレベル コントロールのコントロールとそれを発生させない make いない、 <xref:System.Windows.Forms.Control.Paint> イベントです。  
  
   
  
## 例  
 次のコード例は、確実、 <xref:System.Windows.Forms.Label> が呼び出すことによって表示されるその <xref:System.Windows.Forms.Control.BringToFront%2A> メソッドです。 この例である必要があります、 <xref:System.Windows.Forms.Form> で、 <xref:System.Windows.Forms.Panel> 名前付き `panel1`, 、および <xref:System.Windows.Forms.Label> 名前付き `label1`です。  
  
 [!code-cpp[Windows.Forms.Control Members4\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#1)]
 [!code-csharp[Windows.Forms.Control Members4\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#1)]
 [!code-vb[Windows.Forms.Control Members4\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.SendToBack" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateZOrder" />
      </Docs>
    </Member>
    <Member MemberName="CanEnableIme">
      <MemberSignature Language="C#" Value="protected virtual bool CanEnableIme { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanEnableIme" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CanEnableIme" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.ImeMode" /> プロパティをアクティブな値に設定して、IME サポートを有効にできるかどうかを示す値を取得します。</summary>
        <value>常に <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 派生クラスを返すには、このプロパティをオーバーライドして `false` IME がサポートされていない場合。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanFocus">
      <MemberSignature Language="C#" Value="public bool CanFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanFocus" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CanFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールがフォーカスを受け取ることができるかどうかを示す値を取得します。</summary>
        <value>コントロールがフォーカスを受け取ることができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 In order for a control to receive input focus, the control must have a handle assigned to it, and the <xref:System.Windows.Forms.Control.Visible%2A> and <xref:System.Windows.Forms.Control.Enabled%2A> properties must both be set to **languageKeyword tag is not supported!!!!**  
 for both the control and all its parent controls, and the control must be a form or the control's outermost parent must be a form.  
  
   
  
## 例  
 The following code example sets focus to the specified <xref:System.Windows.Forms.Control>, if it can receive focus.  
  
 [!code-cpp[Windows.Forms.ControlMembers6\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CPP/controlmembers6.cpp#1)]
 [!code-csharp[Windows.Forms.ControlMembers6\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CS/controlmembers6.cs#1)]
 [!code-vb[Windows.Forms.ControlMembers6\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/VB/controlmembers6.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Enabled" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.Visible" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="P:System.Windows.Forms.Control.Focused" />
        <altmember cref="P:System.Windows.Forms.Control.CanSelect" />
      </Docs>
    </Member>
    <Member MemberName="CanRaiseEvents">
      <MemberSignature Language="C#" Value="protected override bool CanRaiseEvents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRaiseEvents" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CanRaiseEvents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールでイベントが発生するかどうかを決定します。</summary>
        <value>コントロールが、イベントが固定されていない ActiveX コントロールとしてホストされる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 かどうか、このコントロールは、ActiveX コントロールとしてホストされている、このプロパティは取得 `false` ActiveX コントロールがあるそのイベントが固定されている場合。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSelect">
      <MemberSignature Language="C#" Value="public bool CanSelect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSelect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CanSelect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールを選択できるかどうかを示す値を取得します。</summary>
        <value>コントロールを選択できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This property returns **languageKeyword tag is not supported!!!!**  
 if the **languageKeyword tag is not supported!!!!**  
 value of <xref:System.Windows.Forms.ControlStyles?displayProperty=fullName> is set to **languageKeyword tag is not supported!!!!**  
, is contained in another control, the control itself is visible and enabled, and all its parent controls are visible and enabled.  
  
 The Windows Forms controls in the following list are not selectable and will return a value of **languageKeyword tag is not supported!!!!**  
 for the <xref:System.Windows.Forms.Control.CanSelect%2A> property. Controls derived from these controls are also not selectable.  
  
-   <xref:System.Windows.Forms.Panel>  
  
-   <xref:System.Windows.Forms.GroupBox>  
  
-   <xref:System.Windows.Forms.PictureBox>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.Splitter>  
  
-   <xref:System.Windows.Forms.Label>  
  
-   <xref:System.Windows.Forms.LinkLabel> \(when there is no link present in the control\)  
  
   
  
## 例  
 The following code example selects the specified <xref:System.Windows.Forms.Control>, if it is selectable.  
  
 [!code-cpp[Windows.Forms.ControlMembers6\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CPP/controlmembers6.cpp#2)]
 [!code-csharp[Windows.Forms.ControlMembers6\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CS/controlmembers6.cs#2)]
 [!code-vb[Windows.Forms.ControlMembers6\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/VB/controlmembers6.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Select" />
        <altmember cref="P:System.Windows.Forms.Control.Enabled" />
        <altmember cref="P:System.Windows.Forms.Control.Visible" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="P:System.Windows.Forms.Control.CanFocus" />
      </Docs>
    </Member>
    <Member MemberName="Capture">
      <MemberSignature Language="C#" Value="public bool Capture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Capture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Capture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールがマウスをキャプチャしたかどうかを示す値を取得または設定します。</summary>
        <value>コントロールがマウスをキャプチャした場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 When a control has captured the mouse, it receives mouse input whether or not the cursor is within its borders. The mouse is typically only captured during drag operations.  
  
 Only the foreground window can capture the mouse. When a background window attempts to do so, the window receives messages only for mouse events that occur when the mouse cursor is within the visible portion of the window. Also, even if the foreground window has captured the mouse, the user can still click another window, bringing it to the foreground.  
  
 When the mouse is captured, shortcut keys should not work.  
  
   
  
## 例  
 The following code example demonstrates the <xref:System.Windows.Forms.Control.Capture%2A> property. To run this example paste the following code in a form containing a <xref:System.Windows.Forms.Label> named label1 and two <xref:System.Windows.Forms.ListBox> controls named listbox1 and listbox2. Ensure the form and controls' <xref:System.Windows.Forms.Control.MouseDown> event is associated with the method in this example.  
  
 [!code-cpp[System.Windows.Forms.ControlCapture\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlCapture/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ControlCapture\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlCapture/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ControlCapture\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlCapture/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows to set this property value. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="T:System.Windows.Forms.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="CausesValidation">
      <MemberSignature Language="C#" Value="public bool CausesValidation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CausesValidation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CausesValidation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>そのコントロールが原因で、フォーカスを受け取ると検証が必要なコントロールに対して、検証が実行されるかどうかを示す値を取得または設定します。</summary>
        <value>そのコントロールが原因で、フォーカスを受け取ると検証が必要なコントロールに対して検証が実行される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Windows.Forms.Control.CausesValidation%2A> にプロパティが設定されている `false`, 、 <xref:System.Windows.Forms.Control.Validating> と <xref:System.Windows.Forms.Control.Validated> イベントが抑制されます。  
  
 <xref:System.Windows.Forms.Control.CausesValidation%2A> プロパティの値が通常に設定 `false` ヘルプ\] ボタンなどのコントロールです。  
  
   
  
## 例  
 次のコード例は、派生クラスを使用して<xref:System.Windows.Forms.TextBox> し、ユーザーが入力した電子メール アドレスを検証します。 電子メール アドレスが標準の形式でない場合 \(を含む"@「と」です。"\)、検証に失敗、 <xref:System.Windows.Forms.ErrorProvider> アイコンが表示され、イベントが取り消されました。 フォームのボタンのいずれかがその <xref:System.Windows.Forms.Control.CausesValidation%2A> プロパティに設定 `false`します。 クリックするか、このボタンにフォーカスを設定は、検証をトリガーしません。 この例では、する必要があります、 <xref:System.Windows.Forms.TextBox>, 、 <xref:System.Windows.Forms.ErrorProvider> コントロール、および <xref:System.Windows.Forms.Button> 、フォーム上に作成されました。  
  
 [!code-cpp[Control.Validating\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Validating/CPP/validating.cpp#2)]
 [!code-csharp[Control.Validating\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Validating/CS/validating.cs#2)]
 [!code-vb[Control.Validating\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Validating/VB/validating.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.Validating" />
        <altmember cref="E:System.Windows.Forms.Control.Validated" />
      </Docs>
    </Member>
    <Member MemberName="CausesValidationChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CausesValidationChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CausesValidationChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.CausesValidationChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.CausesValidation" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、 <xref:System.Windows.Forms.Control.CausesValidation%2A> プロパティがプログラムの変更やユーザー操作によって変更します。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.CausesValidation" />
      </Docs>
    </Member>
    <Member MemberName="ChangeUICues">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.UICuesEventHandler ChangeUICues;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.UICuesEventHandler ChangeUICues" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ChangeUICues" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.UICuesEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フォーカスまたはキーボードのユーザー インターフェイス \(UI\) キューが変更されるときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.Control.ChangeUICues> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行するから継承する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.Control>, など、 <xref:System.Windows.Forms.Button> または <xref:System.Windows.Forms.ComboBox>です。 インスタンスを名前 `Control1` イベント ハンドラーが関連付けられていることを確認し、 <xref:System.Windows.Forms.Control.ChangeUICues> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#67](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#67)]
 [!code-vb[System.Windows.Forms.EventExamples\#67](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#67)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.UICues" />
        <altmember cref="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="CheckForIllegalCrossThreadCalls">
      <MemberSignature Language="C#" Value="public static bool CheckForIllegalCrossThreadCalls { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CheckForIllegalCrossThreadCalls" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アプリケーションのデバッグ中に、コントロールの <see cref="P:System.Windows.Forms.Control.Handle" /> プロパティにアクセスする間違ったスレッドによる呼び出しをキャッチするかどうかを示す値を取得または設定します。</summary>
        <value>間違ったスレッドによる呼び出しをキャッチする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 When a thread other than the creating thread of a control tries to access one of that control's methods or properties, it often leads to unpredictable results. A common invalid thread activity is a call on the wrong thread that accesses the control's <xref:System.Windows.Forms.Control.Handle%2A> property. Set <xref:System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls%2A> to **languageKeyword tag is not supported!!!!**  
 to find and diagnose this thread activity more easily while debugging.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event EventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Click" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールがクリックされたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Windows.Forms.Control.Click> event passes an <xref:System.EventArgs> to its event handler, so it only indicates that a click has occurred. If you need more specific mouse information \(button, number of clicks, wheel rotation, or location\), use the <xref:System.Windows.Forms.Control.MouseClick> event. However, the <xref:System.Windows.Forms.Control.MouseClick> event will not be raised if the click is caused by action other than that of the mouse, such as pressing the ENTER key.  
  
 A double\-click is determined by the mouse settings of the user's operating system. The user can set the time between clicks of a mouse button that should be considered a double\-click rather than two clicks. The <xref:System.Windows.Forms.Control.Click> event is raised every time a control is double\-clicked. For example, if you have event handlers for the <xref:System.Windows.Forms.Control.Click> and <xref:System.Windows.Forms.Control.DoubleClick> events of a <xref:System.Windows.Forms.Form>, the <xref:System.Windows.Forms.Control.Click> and <xref:System.Windows.Forms.Control.DoubleClick> events are raised when the form is double\-clicked and both methods are called. If a control is double\-clicked and that control does not support the <xref:System.Windows.Forms.Control.DoubleClick> event, the <xref:System.Windows.Forms.Control.Click> event might be raised twice.  
  
 You must set the **languageKeyword tag is not supported!!!!**  
 value of<xref:System.Windows.Forms.ControlStyles> to **languageKeyword tag is not supported!!!!**  
 for this event to be raised.  
  
> [!NOTE]
>  The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=fullName> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>. If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header \(where the <xref:System.Windows.Forms.TabPage> names appear\), the <xref:System.Windows.Forms.TabControl> raises the appropriate event. However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.  
  
 For more information about handling events, see [Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f).  
  
   
  
## 例  
 The following code example shows the <xref:System.Windows.Forms.Control.Click> event in an event handler.  
  
 [!code-cpp[Control.FindForm\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.FindForm/CPP/form1.cpp#1)]
 [!code-csharp[Control.FindForm\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.FindForm/CS/form1.cs#1)]
 [!code-vb[Control.FindForm\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.FindForm/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Inheriting from a standard Windows Forms control and changing the <see langword="StandardClick" /> or <see langword="StandardDoubleClick" /> values of <see cref="T:System.Windows.Forms.ControlStyles" /> to <see langword="true" /> can cause unexpected behavior or have no effect at all if the control does not support the <see cref="E:System.Windows.Forms.Control.Click" /> or <see cref="E:System.Windows.Forms.Control.DoubleClick" /> events.  
  
 The following table lists Windows Forms controls and which event (<see cref="E:System.Windows.Forms.Control.Click" /> or <see cref="E:System.Windows.Forms.Control.DoubleClick" />) is raised in response to the mouse action specified.  
  
 <list type="table"><listheader><term> Control  
  
 </term><description> Left Mouse Click  
  
 </description><description> Left Mouse Double Click  
  
 </description><description> Right Mouse Click  
  
 </description><description> Right Mouse Double Click  
  
 </description><description> Middle Mouse Click  
  
 </description><description> Middle Mouse Double Click  
  
 </description><description> XButton1 Mouse Click  
  
 </description><description> XButton1 Mouse Double-Click  
  
 </description><description> XButton2 Mouse Click  
  
 </description><description> XButton2 Mouse Double-Click  
  
 </description></listheader><item><term><see cref="T:System.Windows.Forms.MonthCalendar" />,  
  
 <see cref="T:System.Windows.Forms.DateTimePicker" />,  
  
 <see cref="T:System.Windows.Forms.HScrollBar" />,  
  
 <see cref="T:System.Windows.Forms.VScrollBar" /></term><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description></item><item><term><see cref="T:System.Windows.Forms.Button" />,  
  
 <see cref="T:System.Windows.Forms.CheckBox" />,  
  
 <see cref="T:System.Windows.Forms.RichTextBox" />,  
  
 <see cref="T:System.Windows.Forms.RadioButton" /></term><description> Click  
  
 </description><description> Click, Click  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description></item><item><term><see cref="T:System.Windows.Forms.ListBox" />,  
  
 <see cref="T:System.Windows.Forms.CheckedListBox" />,  
  
 <see cref="T:System.Windows.Forms.ComboBox" /></term><description> Click  
  
 </description><description> Click, DoubleClick  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description></item><item><term><see cref="T:System.Windows.Forms.TextBox" />,  
  
 <see cref="T:System.Windows.Forms.DomainUpDown" />,  
  
 <see cref="T:System.Windows.Forms.NumericUpDown" /></term><description> Click  
  
 </description><description> Click, DoubleClick  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description></item><item><term> * <see cref="T:System.Windows.Forms.TreeView" />,  
  
 \* <see cref="T:System.Windows.Forms.ListView" /></term><description> Click  
  
 </description><description> Click, DoubleClick  
  
 </description><description> Click  
  
 </description><description> Click, DoubleClick  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description></item><item><term><see cref="T:System.Windows.Forms.ProgressBar" />,  
  
 <see cref="T:System.Windows.Forms.TrackBar" /></term><description> Click  
  
 </description><description> Click, Click  
  
 </description><description> Click  
  
 </description><description> Click, Click  
  
 </description><description> Click  
  
 </description><description> Click, Click  
  
 </description><description> Click  
  
 </description><description> Click, Click  
  
 </description><description> Click  
  
 </description><description> Click, Click  
  
 </description></item><item><term><see cref="T:System.Windows.Forms.Form" />,  
  
 <see cref="T:System.Windows.Forms.DataGrid" />,  
  
 <see cref="T:System.Windows.Forms.Label" />,  
  
 <see cref="T:System.Windows.Forms.LinkLabel" />,  
  
 <see cref="T:System.Windows.Forms.Panel" />,  
  
 <see cref="T:System.Windows.Forms.GroupBox" />,  
  
 <see cref="T:System.Windows.Forms.PictureBox" />,  
  
 <see cref="T:System.Windows.Forms.Splitter" />,  
  
 <see cref="T:System.Windows.Forms.StatusBar" />,  
  
 <see cref="T:System.Windows.Forms.ToolBar" />,  
  
 <see cref="T:System.Windows.Forms.TabPage" />,  
  
 ** <see cref="T:System.Windows.Forms.TabControl" /></term><description> Click  
  
 </description><description> Click, DoubleClick  
  
 </description><description> Click  
  
 </description><description> Click, DoubleClick  
  
 </description><description> Click  
  
 </description><description> Click, DoubleClick  
  
 </description><description> Click  
  
 </description><description> Click, DoubleClick  
  
 </description><description> Click  
  
 </description><description> Click, DoubleClick  
  
 </description></item></list>  
  
 \* The mouse pointer must be over a child object (<see cref="T:System.Windows.Forms.TreeNode" /> or <see cref="T:System.Windows.Forms.ListViewItem" />).  
  
 ** The <see cref="T:System.Windows.Forms.TabControl" /> must have at least one <see cref="T:System.Windows.Forms.TabPage" /> in its <see cref="P:System.Windows.Forms.TabControl.TabPages" /> collection.</para>
        </block>
        <altmember cref="M:System.Windows.Forms.Control.OnClick(System.EventArgs)" />
        <altmember cref="F:System.Windows.Forms.ControlStyles.StandardClick" />
        <altmember cref="E:System.Windows.Forms.Control.MouseClick" />
        <altmember cref="E:System.Windows.Forms.Control.DoubleClick" />
        <altmember cref="E:System.Windows.Forms.Control.MouseDoubleClick" />
      </Docs>
    </Member>
    <Member MemberName="ClientRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle ClientRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle ClientRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ClientRectangle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールのクライアント領域を表す四角形を取得します。</summary>
        <value>コントロールのクライアント領域を表す <see cref="T:System.Drawing.Rectangle" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The client area of a control is the bounds of the control, minus the nonclient elements such as scroll bars, borders, title bars, and menus.  
  
 Because client coordinates are relative to the upper\-left corner of the client area of the control, the coordinates of the upper\-left corner of the rectangle returned by this property are \(0,0\). You can use this property to obtain the size and coordinates of the client area of the control for tasks such as drawing on the surface of the control.  
  
 For more information about drawing on controls, see [Rendering a Windows Forms Control](http://msdn.microsoft.com/ja-jp/aae8e1e6-4786-432b-a15e-f4c44760d302).  
  
   
  
## 例  
 The following code example enables auto\-scrolling for a form, resizes the form, and ensures that a button remains visible after the form is resized. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.Button> named `button2` on it.  
  
 [!code-cpp[Windows.Forms.Control Member5\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Member5/CPP/controlmembers5.cpp#2)]
 [!code-csharp[Windows.Forms.Control Member5\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Member5/CS/controlmembers5.cs#2)]
 [!code-vb[Windows.Forms.Control Member5\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Member5/VB/controlmembers5.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.ClientSize" />
        <altmember cref="T:System.Windows.Forms.DrawMode" />
      </Docs>
    </Member>
    <Member MemberName="ClientSize">
      <MemberSignature Language="C#" Value="public System.Drawing.Size ClientSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size ClientSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ClientSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールのクライアント領域の高さと幅を取得または設定します。</summary>
        <value>コントロールのクライアント領域の大きさを表す <see cref="T:System.Drawing.Size" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コントロールのクライアント領域は、スクロール バー、罫線、タイトル バー、メニューなどのクライアント以外の要素から、コントロールの範囲です。<xref:System.Windows.Forms.Control.SetClientSizeCore%2A> メソッドを呼び出して、設定、 <xref:System.Windows.Forms.Control.ClientSize%2A>プロパティです。<xref:System.Windows.Forms.Control.ClientSize%2A> プロパティは、常にでは変更されません、 `set` メソッドをオーバーライドするため、 <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> 、コードが実行されることを確認する方法と、 <xref:System.Windows.Forms.Control.ClientSize%2A> プロパティを設定します。  
  
 <xref:System.Drawing.Size.Width%2A?displayProperty=fullName> と <xref:System.Drawing.Size.Height%2A?displayProperty=fullName> プロパティは、コントロールのクライアント領域の高さと幅を表します。 このプロパティを使用して、コントロールのサーフェイスに描画などのタスクのコントロールのクライアント領域のサイズを取得することができます。  
  
 コントロールの描画の詳細については、次を参照してください。 [Windows フォーム コントロールのレンダリング](http://msdn.microsoft.com/ja-jp/aae8e1e6-4786-432b-a15e-f4c44760d302)します。  
  
> [!NOTE]
>  アプリケーションの設定は、このプロパティにバインドできません。 アプリケーションの設定の詳細については、次を参照してください。 [アプリケーション設定の概要](http://msdn.microsoft.com/ja-jp/0dd8bca5-a6bf-4ac4-8eec-5725d08b38dc)します。  
  
   
  
## 例  
 次のコード例では、コントロールがその書式設定されたテキストを対応するように指定したコントロールがサイズ変更します。 フォーマットされたテキストが、 <xref:System.Windows.Forms.Control.Text%2A> コントロールとプロパティが割り当てられている <xref:System.Windows.Forms.Control.Font%2A> テキストに適用します。`AutoSizeControl` この例では方法もやはり、 `textPadding` コントロールのすべての端に適用する余白を表すパラメーターです。 埋め込みをするためには、文字列を揃えます。、 <xref:System.Drawing.ContentAlignment.MiddleCenter?displayProperty=fullName> 、コントロールがサポートされている場合の値。  
  
 [!code-cpp[Windows.Forms.Control Member5\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Member5/CPP/controlmembers5.cpp#1)]
 [!code-csharp[Windows.Forms.Control Member5\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Member5/CS/controlmembers5.cs#1)]
 [!code-vb[Windows.Forms.Control Member5\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Member5/VB/controlmembers5.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.ClientRectangle" />
        <altmember cref="T:System.Windows.Forms.DrawMode" />
      </Docs>
    </Member>
    <Member MemberName="ClientSizeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ClientSizeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ClientSizeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ClientSizeChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.ClientSize" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.Control.ClientSizeChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行するから継承する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.Control>, など、 <xref:System.Windows.Forms.Button> または <xref:System.Windows.Forms.ComboBox>です。 インスタンスを名前 `Control1` イベント ハンドラーが関連付けられていることを確認し、 <xref:System.Windows.Forms.Control.ClientSizeChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#12)]
 [!code-vb[System.Windows.Forms.EventExamples\#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompanyName">
      <MemberSignature Language="C#" Value="public string CompanyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CompanyName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CompanyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Description("ControlCompanyNameDescr")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールを含んでいるアプリケーションの会社または作成者の名前を取得します。</summary>
        <value>コントロールを含んでいるアプリケーションの会社または作成者の名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Windows.Forms.Control.CompanyName%2A> property is a read\-only property. To change the value of this property, set the <xref:System.Reflection.AssemblyCompanyAttribute.Company%2A> property value of the <xref:System.Reflection.AssemblyCompanyAttribute>. The following line of C\# code sets the <xref:System.Windows.Forms.Control.CompanyName%2A> property.  
  
```csharp  
[assembly: AssemblyCompany("Microsoft")]  
```  
  
> [!NOTE]
>  It is strongly recommended that you provide the company name, product name, and product version for your app.  
  
   
  
## 例  
 The following code example displays information about the application in a <xref:System.Windows.Forms.Label> contained by a <xref:System.Windows.Forms.Form>. This example requires that the <xref:System.Windows.Forms.Control.CompanyName%2A>, <xref:System.Windows.Forms.Control.ProductName%2A> and <xref:System.Windows.Forms.Control.ProductVersion%2A> have been set.  
  
 [!code-cpp[Windows.Forms.Control Properties3\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties3/CPP/aboutdialog.cpp#1)]
 [!code-csharp[Windows.Forms.Control Properties3\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties3/CS/aboutdialog.cs#1)]
 [!code-vb[Windows.Forms.Control Properties3\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties3/VB/aboutdialog.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.AssemblyCompanyAttribute.Company" />
        <altmember cref="P:System.Diagnostics.FileVersionInfo.CompanyName" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Forms.Control ctl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Windows.Forms.Control ctl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Contains(System.Windows.Forms.Control)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctl" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="ctl">評価する <see cref="T:System.Windows.Forms.Control" />。</param>
        <summary>指定したコントロールが、コントロールの子かどうかを示す値を取得します。</summary>
        <returns>指定したコントロールがコントロールの子である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 The following code example ensures that a <xref:System.Windows.Forms.Label> is visible by calling its <xref:System.Windows.Forms.Control.BringToFront%2A> method. This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.Panel> named `panel1`, and a <xref:System.Windows.Forms.Label> named `label1`.  
  
 [!code-cpp[Windows.Forms.Control Members4\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#1)]
 [!code-csharp[Windows.Forms.Control Members4\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#1)]
 [!code-vb[Windows.Forms.Control Members4\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.ControlCollection.Contains(System.Windows.Forms.Control)" />
        <altmember cref="P:System.Windows.Forms.Control.Controls" />
        <altmember cref="P:System.Windows.Forms.Control.Parent" />
      </Docs>
    </Member>
    <Member MemberName="ContainsFocus">
      <MemberSignature Language="C#" Value="public bool ContainsFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContainsFocus" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ContainsFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロール、またはその子コントロールの 1 つに、現在入力フォーカスがあるかどうかを示す値を取得します。</summary>
        <value>コントロール、またはその子コントロールの 1 つに、現在入力フォーカスがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 You can use this property to determine whether a control or any of the controls contained within it has the input focus. To determine whether the control has focus, regardless of whether any of its child controls have focus, use the <xref:System.Windows.Forms.Control.Focused%2A> property. To give a control the input focus, use the <xref:System.Windows.Forms.Control.Focus%2A> or <xref:System.Windows.Forms.Control.Select%2A> methods.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.CanFocus" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="P:System.Windows.Forms.Control.Focused" />
        <altmember cref="P:System.Windows.Forms.Control.CanSelect" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenu">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.ContextMenu ContextMenu { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ContextMenu ContextMenu" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ContextMenu" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ContextMenu</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールに関連付けられたショートカット メニューを取得または設定します。</summary>
        <value>コントロールに関連付けられたショートカット メニューを表す <see cref="T:System.Windows.Forms.ContextMenu" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Use a shortcut menus to give context\-specific menu options to users when they right\-click on the control.  
  
   
  
## 例  
 The following code example displays the <xref:System.Windows.Forms.ContextMenu> assigned to a <xref:System.Windows.Forms.TreeView> when the right mouse button is clicked and released. This code requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TreeView> on it. It is also required that the <xref:System.Windows.Forms.TreeView> has a <xref:System.Windows.Forms.ContextMenu> assigned to its <xref:System.Windows.Forms.Control.ContextMenu%2A> property.  
  
 [!code-cpp[Windows.Forms.Control Properties2\#5](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CPP/misccontrolproperties.cpp#5)]
 [!code-csharp[Windows.Forms.Control Properties2\#5](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CS/misccontrolproperties.cs#5)]
 [!code-vb[Windows.Forms.Control Properties2\#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties2/VB/misccontrolproperties.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding the <see cref="P:System.Windows.Forms.Control.ContextMenu" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.ContextMenu" /> property to extend the base implementation. Otherwise, you must provide all the implementation. You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.ContextMenu" /> property; you can override only one if needed.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ContextMenuChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ContextMenuChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ContextMenuChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.ContextMenu" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This event is raised if the <xref:System.Windows.Forms.Control.ContextMenu%2A> property is changed by either a programmatic modification or user interaction.  
  
 For more information about handling events, see [Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f).  
  
   
  
## 例  
 The following code example displays a message when a change occurs to the shortcut menu.  
  
 [!code-cpp[Control\_ContextMenu\_CreateGraphics\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_ContextMenu_CreateGraphics/CPP/control_contextmenu_creategraphics.cpp#2)]
 [!code-csharp[Control\_ContextMenu\_CreateGraphics\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_ContextMenu_CreateGraphics/CS/control_contextmenu_creategraphics.cs#2)]
 [!code-vb[Control\_ContextMenu\_CreateGraphics\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_ContextMenu_CreateGraphics/VB/control_contextmenu_creategraphics.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.ContextMenu" />
        <altmember cref="T:System.Windows.Forms.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuStrip">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.ContextMenuStrip ContextMenuStrip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ContextMenuStrip ContextMenuStrip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ContextMenuStrip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ContextMenuStrip</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このコントロールに関連付けられている <see cref="T:System.Windows.Forms.ContextMenuStrip" /> を取得または設定します。</summary>
        <value>このコントロールの <see cref="T:System.Windows.Forms.ContextMenuStrip" />。<see langword="null" /> がない場合は <see cref="T:System.Windows.Forms.ContextMenuStrip" />。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Windows.Forms.ContextMenu> 、コントロールに割り当てられたが、 <xref:System.Windows.Forms.ContextMenu> よりも優先、 <xref:System.Windows.Forms.ContextMenuStrip>です。  
  
   
  
## 例  
 次のコード例は、3 つを追加する方法を示します <xref:System.Windows.Forms.ToolStripMenuItem> オブジェクトを <xref:System.Windows.Forms.ContextMenuStrip>です。 設定を紹介するさらに、 <xref:System.Windows.Forms.Control.ContextMenuStrip%2A> フォームのプロパティです。  
  
 [!code-csharp[System.Windows.Forms.Control.ContextMenuStrip\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.ContextMenuStrip/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.ContextMenuStrip\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.ContextMenuStrip/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuStripChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ContextMenuStripChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ContextMenuStripChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ContextMenuStripChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.ContextMenuStrip" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about handling events, see [Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f).  
  
   
  
## 例  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.ContextMenuStripChanged> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.ContextMenuStripChanged> event.  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#14](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#14)]
 [!code-vb[System.Windows.Forms.EventExamples\#14](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlAdded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ControlEventHandler ControlAdded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ControlEventHandler ControlAdded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ControlAdded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>新しいコントロールが <see cref="T:System.Windows.Forms.Control.ControlCollection" /> に追加されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about handling events, see [Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f).  
  
   
  
## 例  
 The following code example uses <xref:System.Windows.Forms.Control.ControlAdded> to add a control to a form and displays the name of the added control in a <xref:System.Windows.Forms.MessageBox>.  
  
 [!code-cpp[Control.ControlRemoved\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.ControlRemoved/CPP/form1.cpp#1)]
 [!code-csharp[Control.ControlRemoved\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.ControlRemoved/CS/form1.cs#1)]
 [!code-vb[Control.ControlRemoved\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.ControlRemoved/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Controls" />
        <altmember cref="T:System.Windows.Forms.Control.ControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="ControlRemoved">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ControlEventHandler ControlRemoved;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ControlEventHandler ControlRemoved" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ControlRemoved" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.Control.ControlCollection" /> からコントロールが削除されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about handling events, see [Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f).  
  
   
  
## 例  
 The following code example uses <xref:System.Windows.Forms.Control.ControlRemoved> to remove a control from a form and displays the name of the removed control in a <xref:System.Windows.Forms.MessageBox>.  
  
 [!code-cpp[Control.ControlRemoved\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.ControlRemoved/CPP/form1.cpp#1)]
 [!code-csharp[Control.ControlRemoved\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.ControlRemoved/CS/form1.cs#1)]
 [!code-vb[Control.ControlRemoved\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.ControlRemoved/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Controls" />
        <altmember cref="T:System.Windows.Forms.Control.ControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="Controls">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control.ControlCollection Controls { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control/ControlCollection Controls" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Controls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control+ControlCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロール内に格納されているコントロールのコレクションを取得します。</summary>
        <value>コントロール内に格納されているコントロールのコレクションを表す <see cref="T:System.Windows.Forms.Control.ControlCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Windows.Forms.Control> コントロールのコレクションの親として使用できます。 たとえば、いくつかのコントロールが追加された場合に、 <xref:System.Windows.Forms.Form>, のメンバーである各コントロール、 <xref:System.Windows.Forms.Control.ControlCollection> に割り当てられている、 <xref:System.Windows.Forms.Control.Controls%2A> から派生したフォームのプロパティ、 <xref:System.Windows.Forms.Control> クラスです。  
  
 内のコントロールを操作する、 <xref:System.Windows.Forms.Control.ControlCollection> に割り当てられている、 <xref:System.Windows.Forms.Control.Controls%2A> で使用できるメソッドを使用して、プロパティ、 <xref:System.Windows.Forms.Control.ControlCollection> クラスです。  
  
 いくつかのコントロールを親コントロールを追加する場合は、呼び出すことをお勧めしますが、 <xref:System.Windows.Forms.Control.SuspendLayout%2A> メソッドを追加するコントロールを初期化する前にします。 親コントロールにコントロールを追加した後、 <xref:System.Windows.Forms.Control.ResumeLayout%2A> メソッドです。 そうと、多くのコントロールを持つアプリケーションのパフォーマンスが向上します。  
  
 使用して、 <xref:System.Windows.Forms.Control.Controls%2A> を入れ子になったコントロールを含む、フォームのコントロールすべてを反復処理するプロパティです。 使用して、 <xref:System.Windows.Forms.Control.GetNextControl%2A> タブ オーダーの前または次の子コントロールを取得します。 使用して、 <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> プロパティを取得またはコンテナー コントロールのアクティブなコントロールを設定します。  
  
   
  
## 例  
 次のコード例の削除、 <xref:System.Windows.Forms.Control> から、 <xref:System.Windows.Forms.Control.ControlCollection> 、派生クラスの <xref:System.Windows.Forms.Panel> コレクションのメンバーである場合。 例では、作成済みである必要があります、 <xref:System.Windows.Forms.Panel>, 、 <xref:System.Windows.Forms.Button>, と 1 つ以上 <xref:System.Windows.Forms.RadioButton> の control 権限、 <xref:System.Windows.Forms.Form>です。<xref:System.Windows.Forms.RadioButton> にコントロールを追加、 <xref:System.Windows.Forms.Panel> コントロール、および <xref:System.Windows.Forms.Panel> に追加したコントロール、 <xref:System.Windows.Forms.Form>です。 ラジオ ボタンの名前、ボタンがクリックされたときに `removeButton` から削除、 <xref:System.Windows.Forms.Control.ControlCollection>です。  
  
 [!code-cpp[ControlCollection\#4](~/samples/snippets/cpp/VS_Snippets_Winforms/ControlCollection/CPP/controlcollection.cpp#4)]
 [!code-csharp[ControlCollection\#4](~/samples/snippets/csharp/VS_Snippets_Winforms/ControlCollection/CS/controlcollection.cs#4)]
 [!code-vb[ControlCollection\#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ControlCollection/VB/controlcollection.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Control.ControlCollection" />
        <altmember cref="M:System.Windows.Forms.Control.CreateControlsInstance" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.ResumeLayout" />
      </Docs>
    </Member>
    <Member MemberName="CreateAccessibilityInstance">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.AccessibleObject CreateAccessibilityInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.AccessibleObject CreateAccessibilityInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.CreateAccessibilityInstance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールの新しいユーザー補助オブジェクトを作成します。</summary>
        <returns>コントロールの新しい <see cref="T:System.Windows.Forms.AccessibleObject" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 明示的に <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> メソッドを呼び出さない場合は、<xref:System.Windows.Forms.Control.AccessibilityObject%2A> プロパティが参照されると呼び出されます。  
  
> [!NOTE]
>  取得または設定する、 <xref:System.Windows.Forms.Control.AccessibilityObject%2A> プロパティへの参照を追加する必要があります、 `Accessibility` と一緒にインストールされたアセンブリ、 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]です。  
  
   
  
## 例  
 次のコード例は、ユーザー補助対応のグラフの作成を示しますコントロールを使用して、 <xref:System.Windows.Forms.AccessibleObject> と <xref:System.Windows.Forms.Control.ControlAccessibleObject> をアクセス可能な情報を公開するクラス。 コントロールは、凡例と共に 2 つの曲線をプロットします。`ChartControlAccessibleObject` から派生したクラス `ControlAccessibleObject`, で使用される、 <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> グラフ コントロールのカスタムのアクセス可能な情報を提供するメソッドです。 グラフの凡例は、実際はないため <xref:System.Windows.Forms.Control> \-ベースの制御が、代わりに描画される組み込みれないアクセス可能な情報は、グラフ コントロールでします。 このため、 `ChartControlAccessibleObject` クラスのオーバーライド、 <xref:System.Windows.Forms.AccessibleObject.GetChild%2A> を返すメソッドを `CurveLegendAccessibleObject` 凡例の各部分にアクセス可能な情報を表します。 ユーザー補助対応のアプリケーションでは、このコントロールを使用すると、コントロールは、必要なアクセス可能な情報を提供できます。  
  
 このコードの抜粋では、オーバーライドを示しています、 <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> メソッドです。 参照してください、 <xref:System.Windows.Forms.AccessibleObject> クラスの完全なコード例の概要です。  
  
 [!code-cpp[System.Windows.Forms.AccessibleObject\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/CPP/chartcontrol.cpp#2)]
 [!code-csharp[System.Windows.Forms.AccessibleObject\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/CS/chartcontrol.cs#2)]
 [!code-vb[System.Windows.Forms.AccessibleObject\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/VB/chartcontrol.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.CreateAccessibilityInstance" /> in a derived class, do not call the base class's <see cref="M:System.Windows.Forms.Control.CreateAccessibilityInstance" /> method.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Control.ControlAccessibleObject" />
        <altmember cref="T:System.Windows.Forms.AccessibleObject" />
      </Docs>
    </Member>
    <Member MemberName="CreateControl">
      <MemberSignature Language="C#" Value="public void CreateControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CreateControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.CreateControl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ハンドルおよび子コントロールの作成を含めて、強制的に表示子コントロールを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Windows.Forms.Control.CreateControl%2A> method forces a handle to be created for the control and its child controls. This method is used when you need a handle immediately for manipulation of the control or its children; simply calling a control's constructor does not create the <xref:System.Windows.Forms.Control.Handle%2A>.  
  
 <xref:System.Windows.Forms.Control.CreateControl%2A> does not create a control handle if the control's <xref:System.Windows.Forms.Control.Visible%2A> property is `false`. You can either call the <xref:System.Windows.Forms.Control.CreateHandle%2A> method or access the <xref:System.Windows.Forms.Control.Handle%2A> property to create the control's handle regardless of the control's visibility, but in this case, no window handles are created for the control's children.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="CreateControlsInstance">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.Control.ControlCollection CreateControlsInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.Control/ControlCollection CreateControlsInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.CreateControlsInstance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control+ControlCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールのコントロール コレクションの新しいインスタンスを作成します。</summary>
        <returns>コントロールに割り当てられた <see cref="T:System.Windows.Forms.Control.ControlCollection" /> の新しいインスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>The base class version of this method should not be called by a derived class.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.Control.Controls" />
        <altmember cref="T:System.Windows.Forms.Control.ControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="Created">
      <MemberSignature Language="C#" Value="public bool Created { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Created" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Created" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールが作成されているかどうかを示す値を取得します。</summary>
        <value>コントロールが作成されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Windows.Forms.Control.Created%2A> property returns **languageKeyword tag is not supported!!!!**  
 if the <xref:System.Windows.Forms.Control> was successfully created even though the control's handle might not have been created or recreated yet.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.OnCreateControl" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
      </Docs>
    </Member>
    <Member MemberName="CreateGraphics">
      <MemberSignature Language="C#" Value="public System.Drawing.Graphics CreateGraphics ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Graphics CreateGraphics() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.CreateGraphics" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールの <see cref="T:System.Drawing.Graphics" /> を作成します。</summary>
        <returns>コントロールの <see cref="T:System.Drawing.Graphics" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Drawing.Graphics> を通じて取得するオブジェクト、 <xref:System.Windows.Forms.Control.CreateGraphics%2A> メソッド必要がありますいない通常ために保持されている現在の Windows メッセージの処理が完了した後の次の WM\_PAINT メッセージ オブジェクトを使用して描画何かが消去されます。 キャッシュすることはできませんので、 <xref:System.Drawing.Graphics> 再利用できるようなメソッドを非表示に使用する以外、オブジェクト <xref:System.Drawing.Graphics.MeasureString%2A?displayProperty=fullName>します。 代わりに、呼び出す必要があります <xref:System.Windows.Forms.Control.CreateGraphics%2A> を使用するたびに、 <xref:System.Drawing.Graphics> オブジェクト、し、呼び出す <xref:System.Drawing.Graphics.Dispose%2A> その使用が終了したときにします。 Windows メッセージの詳細については、次を参照してください。 <xref:System.Windows.Forms.Control.WndProc%2A>します。  
  
 仕様では、 <xref:System.Windows.Forms.Control.CreateGraphics%2A> 所有権を呼び出し元のスレッドに設定し、他のスレッドで呼び出される場合は失敗します。  
  
> [!NOTE]
>  加え、 <xref:System.Windows.Forms.Control.InvokeRequired%2A> プロパティには、コントロールのスレッド セーフである 4 つのメソッドもあります: <xref:System.Windows.Forms.Control.Invoke%2A>, 、<xref:System.Windows.Forms.Control.BeginInvoke%2A>, 、<xref:System.Windows.Forms.Control.EndInvoke%2A>, 、および <xref:System.Windows.Forms.Control.CreateGraphics%2A> コントロールのハンドルが既に作成されている場合。 呼び出す <xref:System.Windows.Forms.Control.CreateGraphics%2A> コントロールのハンドルがバック グラウンド スレッドで作成される前に、可能性がありますバックします。 その他のすべてのメソッド呼び出しの invoke メソッドのいずれかを使用する必要があります、コントロールのスレッドへの呼び出しをマーシャ リングします。  
  
   
  
## 例  
 次のコード例では、コントロールがその書式設定されたテキストを対応するように指定したコントロールがサイズ変更します。 フォーマットされたテキストが、 <xref:System.Windows.Forms.Control.Text%2A> コントロールとプロパティが割り当てられている <xref:System.Windows.Forms.Control.Font%2A> テキストに適用します。`AutoSizeControl` この例では方法もやはり、 `textPadding` コントロールのすべての端に適用する余白を表すパラメーターです。 埋め込みをするためへの配置、 `MiddleCenter` の値 <xref:System.Drawing.ContentAlignment?displayProperty=fullName> 、コントロールがサポートされている場合。  
  
 [!code-cpp[Windows.Forms.Control Member5\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Member5/CPP/controlmembers5.cpp#1)]
 [!code-csharp[Windows.Forms.Control Member5\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Member5/CS/controlmembers5.cs#1)]
 [!code-vb[Windows.Forms.Control Member5\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Member5/VB/controlmembers5.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for safe subwindows to call this method. Associated enumeration: **languageKeyword tag is not supported!!!!**  
 value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <altmember cref="T:System.Drawing.Graphics" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="protected virtual void CreateHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void CreateHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.CreateHandle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールのハンドルを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 通常呼び出す必要はありません、 <xref:System.Windows.Forms.Control.CreateHandle%2A> メソッドを直接します。 優先メソッドを呼び出すことです、 <xref:System.Windows.Forms.Control.CreateControl%2A> メソッドで、コントロールが作成されるときに、コントロールとその子コントロールに対して作成されるハンドルを強制します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">オブジェクトは、破棄された状態でです。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows for inheriting classes to call this method. Associated enumeration: **languageKeyword tag is not supported!!!!**  
 value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.CreateHandle" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.CreateHandle" /> method to ensure that the handle is created.</para>
        </block>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CreateParams" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロール ハンドルが作成されるときに必要な作成パラメーターを取得します。</summary>
        <value>コントロールを識別するハンドルを作成するときに必要な作成パラメーターを格納している <see cref="T:System.Windows.Forms.CreateParams" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.CreateParams%2A> プロパティいないオーバーライドして派生コントロールのプロパティを調整するために使用します。 などのプロパティ、 <xref:System.Windows.Forms.CreateParams.Caption%2A?displayProperty=fullName>, 、<xref:System.Windows.Forms.CreateParams.Width%2A?displayProperty=fullName>, 、および <xref:System.Windows.Forms.CreateParams.Height%2A?displayProperty=fullName> など、コントロールに対応するプロパティを設定する必要があります <xref:System.Windows.Forms.Control.Text%2A?displayProperty=fullName>, 、<xref:System.Windows.Forms.Control.Width%2A?displayProperty=fullName> と <xref:System.Windows.Forms.Control.Height%2A?displayProperty=fullName>です。<xref:System.Windows.Forms.CreateParams> 、標準的な Windows のコントロール クラスをラップするか、スタイルを設定するには、Windows フォームの名前空間に用意されていない場合にのみ拡張する必要があります。 コントロールのパラメーターの作成の詳細については、次を参照してください。、 `CreateWindow` と `CreateWindowEx` 関数および [CREATESTRUCT](http://msdn.microsoft.com/library/windows/desktop/ms632603.aspx)ドキュメントの構造体。  
  
   
  
## 例  
 次のコード例を拡張して、 <xref:System.Windows.Forms.Control.CreateParams%2A> のプロパティ、 <xref:System.Windows.Forms.Button> クラスを派生します。<xref:System.Windows.Forms.CreateParams.Style%2A?displayProperty=fullName> プロパティを変更すると、それが原因で表示するボタン、 <xref:System.Drawing.Icon> ではなく、 <xref:System.Drawing.Image>です。 この例では、継承されたクラスがあることが必要です、 <xref:System.Windows.Forms.Button> クラスです。  
  
 [!code-cpp[CreateParams\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/CreateParams/CPP/createparams.cpp#3)]
 [!code-csharp[CreateParams\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/CreateParams/CS/createparams.cs#3)]
 [!code-vb[CreateParams\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CreateParams/VB/createparams.vb#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for the immediate caller to call unmanaged code when getting the property value. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <block subset="none" type="overrides">
          <para>When overriding the <see cref="P:System.Windows.Forms.Control.CreateParams" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.CreateParams" /> property to extend the base implementation. Otherwise, you must provide all the implementation.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="Cursor">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.Cursor Cursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Cursor Cursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Cursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マウス ポインターがコントロールの上にあるときに表示されるカーソルを取得または設定します。</summary>
        <value>マウス ポインターがコントロールの上にあるときに表示されるカーソルを表す <see cref="T:System.Windows.Forms.Cursor" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Assign a <xref:System.Windows.Forms.Cursor> to the <xref:System.Windows.Forms.Control.Cursor%2A> property of the control to change the cursor displayed when the mouse pointer is over the control. To temporarily change the mouse cursor for all controls on your application set the <xref:System.Windows.Forms.Cursor.Current%2A?displayProperty=fullName> property. Typically you would set the <xref:System.Windows.Forms.Cursor.Current%2A?displayProperty=fullName> property to a wait cursor when populating a <xref:System.Windows.Forms.ComboBox> or saving or loading a file.  
  
 The <xref:System.Windows.Forms.Control.Cursor%2A> property is an ambient property. An ambient property is a control property that, if not set, is retrieved from the parent control. For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default. For more information about ambient properties, see the <xref:System.Windows.Forms.AmbientProperties> class or the <xref:System.Windows.Forms.Control> class overview.  
  
   
  
## 例  
 The following code example fills a <xref:System.Windows.Forms.ComboBox> with the user's available logical drives. The example also sets the combo box's <xref:System.Windows.Forms.Cursor> property so the <xref:System.Windows.Forms.Cursors.Hand%2A?displayProperty=fullName> cursor is displayed when the mouse pointer is over the drop\-down button. This code requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.ComboBox> on it.  
  
 [!code-cpp[Windows.Forms.Control Properties2\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CPP/misccontrolproperties.cpp#1)]
 [!code-csharp[Windows.Forms.Control Properties2\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CS/misccontrolproperties.cs#1)]
 [!code-vb[Windows.Forms.Control Properties2\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties2/VB/misccontrolproperties.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for safe subwindows to set this property value. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /></permission>
        <block subset="none" type="overrides">
          <para>When overriding the <see cref="P:System.Windows.Forms.Control.Cursor" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.Cursor" /> property to extend the base implementation. Otherwise, you must provide all the implementation. You are not required to override both the <see langword="get" /> and <see langword="set" /> methods of the <see cref="P:System.Windows.Forms.Control.Cursor" /> property; you can override only one if needed.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Cursor" />
        <altmember cref="T:System.Windows.Forms.Cursors" />
      </Docs>
    </Member>
    <Member MemberName="CursorChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CursorChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CursorChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.CursorChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.Cursor" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This event is raised if the <xref:System.Windows.Forms.Control.Cursor%2A> property is changed by either a programmatic modification or user interaction.  
  
 For more information about handling events, see [Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f).  
  
   
  
## 例  
 The following code example demonstrates changing the mouse cursor using the <xref:System.Windows.Forms.Control.Cursor%2A?displayProperty=fullName> property, the <xref:System.Windows.Forms.Cursor> class, and the <xref:System.Windows.Forms.Cursors> class. The example creates a form that contains a <xref:System.Windows.Forms.ComboBox> control, a <xref:System.Windows.Forms.Panel> control, and a <xref:System.Windows.Forms.ListView> control. The<xref:System.Windows.Forms.ComboBox> contains all cursors provided by the <xref:System.Windows.Forms.Cursors> class. When the user selects a mouse cursor in the <xref:System.Windows.Forms.ComboBox>, the <xref:System.Windows.Forms.Control.Cursor%2A?displayProperty=fullName> property is set to the selected cursor, which updates the cursor for the <xref:System.Windows.Forms.Panel>. The <xref:System.Windows.Forms.ListView> is updated every time the <xref:System.Windows.Forms.Control.CursorChanged?displayProperty=fullName> event occurs.  
  
 [!code-cpp[System.Windows.Forms.Cursors\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Cursors/CPP/cursorexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.Cursors\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Cursors/CS/cursorexample.cs#1)]
 [!code-vb[System.Windows.Forms.Cursors\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Cursors/VB/cursorexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Cursor" />
        <altmember cref="T:System.Windows.Forms.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="DataBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ControlBindingsCollection DataBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ControlBindingsCollection DataBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DataBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ParenthesizePropertyName(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlBindingsCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールのデータ連結を取得します。</summary>
        <value>コントロールの <see cref="T:System.Windows.Forms.ControlBindingsCollection" /> オブジェクトを格納している <see cref="T:System.Windows.Forms.Binding" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Use the <xref:System.Windows.Forms.Control.DataBindings%2A> property to access the <xref:System.Windows.Forms.ControlBindingsCollection>. By adding <xref:System.Windows.Forms.Binding> objects to the collection, you can bind any property of a control to the property of an object.  
  
   
  
## 例  
 The following code example adds <xref:System.Windows.Forms.Binding> objects to the <xref:System.Windows.Forms.ControlBindingsCollection> of five controls: four <xref:System.Windows.Forms.TextBox> controls and a <xref:System.Windows.Forms.DateTimePicker> control. The <xref:System.Windows.Forms.ControlBindingsCollection> is accessed through the <xref:System.Windows.Forms.Control.DataBindings%2A> property of the <xref:System.Windows.Forms.Control> class.  
  
 [!code-cpp[Classic Control.DataBindings Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Control.DataBindings Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Control.DataBindings Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Control.DataBindings Example/CS/source.cs#1)]
 [!code-vb[Classic Control.DataBindings Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Control.DataBindings Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.BindingContext" />
        <altmember cref="T:System.Windows.Forms.Binding" />
        <altmember cref="T:System.Windows.Forms.BindingManagerBase" />
      </Docs>
    </Member>
    <Member MemberName="DefaultBackColor">
      <MemberSignature Language="C#" Value="public static System.Drawing.Color DefaultBackColor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Drawing.Color DefaultBackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultBackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの既定の背景色を取得します。</summary>
        <value>コントロールの既定の背景の <see cref="T:System.Drawing.Color" />。 既定値は、<see cref="P:System.Drawing.SystemColors.Control" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This is the default <xref:System.Windows.Forms.Control.BackColor%2A> property value of a generic top\-level control. Derived classes can have different defaults.  
  
   
  
## 例  
 The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.DefaultBackColor%2A>, <xref:System.Windows.Forms.Control.DefaultFont%2A>, and <xref:System.Windows.Forms.Control.DefaultForeColor%2A> members. To run the example, paste the following code in a form containing a <xref:System.Windows.Forms.ListBox> called ListBox1. Call the `Populate_ListBox` method in the form's constructor or <xref:System.Windows.Forms.Form.Load> event\-handling method.  
  
 [!code-cpp[System.Windows.Forms.ControlDefaultProperties\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ControlDefaultProperties\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ControlDefaultProperties\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.BackColor" />
        <altmember cref="T:System.Drawing.Color" />
        <altmember cref="T:System.Drawing.SystemColors" />
      </Docs>
    </Member>
    <Member MemberName="DefaultCursor">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.Cursor DefaultCursor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Cursor DefaultCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの既定のカーソルを取得または設定します。</summary>
        <value>現在の既定のカーソルを表す <see cref="T:System.Windows.Forms.Cursor" /> 型のオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Override <xref:System.Windows.Forms.Control.DefaultCursor%2A> to configure a default cursor for your control. This is more efficient than setting the cursor in the control's constructor, and gives automatic support for certain cursor\-related designer functions.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultFont">
      <MemberSignature Language="C#" Value="public static System.Drawing.Font DefaultFont { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Font DefaultFont" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultFont" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの既定のフォントを取得します。</summary>
        <value>コントロールの既定の <see cref="T:System.Drawing.Font" />。 返される値は、ユーザーのオペレーティング システム、およびシステムのローカル カルチャの設定によって異なります。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 次の表に、によって返される値 <xref:System.Windows.Forms.Control.DefaultFont%2A> オペレーティング システムおよびローカル カルチャによって異なります。  
  
|システム\/カルチャや|フォント|  
|-----------------|----------|  
|X は、日本語版の Windows NT 4|MS UI Gothic、9 ポイントです。|  
|アラビア語の Windows|Tahoma、8 ポイントです。|  
|その他のオペレーティング システム\/カルチャ|MS Shell Dlg の論理フォント、通常 Microsoft San Serif 8 ポイントです。|  
  
 MS シェルの追加\] ダイアログは、システム レジストリの設定のフォントにマップされます。  
  
 上記のフォントがインストールされていない場合は、Tahoma、8 ポイントは既定のフォントです。 Tahoma、8 ポイントがインストールされていない場合 <xref:System.Windows.Forms.Control.DefaultFont%2A>の値を返す、 <xref:System.Drawing.FontFamily.GenericSansSerif%2A> プロパティ  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.Control.DefaultBackColor%2A>, 、<xref:System.Windows.Forms.Control.DefaultFont%2A>, 、および <xref:System.Windows.Forms.Control.DefaultForeColor%2A> メンバーです。 例を実行するを含むフォームで次のコードを貼り付け、 <xref:System.Windows.Forms.ListBox> ListBox1 と呼ばれます。 呼び出す、 `Populate_ListBox` フォームのコンス トラクター メソッドまたは <xref:System.Windows.Forms.Form.Load> イベント処理メソッドです。  
  
 [!code-cpp[System.Windows.Forms.ControlDefaultProperties\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ControlDefaultProperties\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ControlDefaultProperties\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">クライアント コンピューターでは、既定のフォントまたは地域の代替フォントがインストールされていません。</exception>
        <altmember cref="P:System.Windows.Forms.Control.Font" />
        <altmember cref="T:System.Drawing.Font" />
      </Docs>
    </Member>
    <Member MemberName="DefaultForeColor">
      <MemberSignature Language="C#" Value="public static System.Drawing.Color DefaultForeColor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Drawing.Color DefaultForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの既定の前景色を取得します。</summary>
        <value>コントロールの既定の前景の <see cref="T:System.Drawing.Color" />。 既定値は、<see cref="P:System.Drawing.SystemColors.ControlText" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This is the default <xref:System.Windows.Forms.Control.ForeColor%2A> property value of a nonparented control. Derived classes can have different defaults.  
  
   
  
## 例  
 The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.DefaultBackColor%2A>, <xref:System.Windows.Forms.Control.DefaultFont%2A>, and <xref:System.Windows.Forms.Control.DefaultForeColor%2A> members. To run the example, paste the following code in a form containing a <xref:System.Windows.Forms.ListBox> called ListBox1. Call the `Populate_ListBox` method in the form's constructor or <xref:System.Windows.Forms.Form.Load> event\-handling method.  
  
 [!code-cpp[System.Windows.Forms.ControlDefaultProperties\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ControlDefaultProperties\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ControlDefaultProperties\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.ForeColor" />
        <altmember cref="T:System.Drawing.Color" />
        <altmember cref="T:System.Drawing.SystemColors" />
      </Docs>
    </Member>
    <Member MemberName="DefaultImeMode">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.ImeMode DefaultImeMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImeMode DefaultImeMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultImeMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールがサポートしている既定の IME \(Input Method Editor\) モードを取得します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ImeMode" /> 値のいずれか。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 An Input Method Editor \(IME\) is a program that enables users to enter complex characters and symbols, such as Japanese Kanji characters, by using a standard keyboard.  
  
 As implemented in the <xref:System.Windows.Forms.Control> class, this property always returns the <xref:System.Windows.Forms.ImeMode.Inherit?displayProperty=fullName> value. The <xref:System.Windows.Forms.ImeMode.Inherit> value specifies that the IME mode is inherited from the parent control.  
  
   
  
## 例  
 The following code example overrides the <xref:System.Windows.Forms.Control.DefaultImeMode%2A> property to turn off the Input Method Editor.  
  
 [!code-cpp[Windows.Forms.Control Properties2\#4](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CPP/misccontrolproperties.cpp#4)]
 [!code-csharp[Windows.Forms.Control Properties2\#4](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CS/misccontrolproperties.cs#4)]
 [!code-vb[Windows.Forms.Control Properties2\#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties2/VB/misccontrolproperties.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding the <see cref="P:System.Windows.Forms.Control.DefaultImeMode" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.DefaultImeMode" /> property to extend the base implementation. Otherwise, you must provide all the implementation.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.ImeMode" />
        <altmember cref="P:System.Windows.Forms.Control.ImeMode" />
      </Docs>
    </Member>
    <Member MemberName="DefaultMargin">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.Padding DefaultMargin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding DefaultMargin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultMargin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロール間に既定で指定されている空白をピクセル単位で取得します。</summary>
        <value>コントロール間の既定の空白を表す <see cref="T:System.Windows.Forms.Padding" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultMaximumSize">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Size DefaultMaximumSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultMaximumSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultMaximumSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの既定の最大サイズとして指定されている長さおよび高さをピクセル単位で取得します。</summary>
        <value>コントロールのサイズを表す <see cref="M:System.Drawing.Point.#ctor(System.Drawing.Size)" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultMinimumSize">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Size DefaultMinimumSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultMinimumSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultMinimumSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの既定の最小サイズとして指定されている長さおよび高さをピクセル単位で取得します。</summary>
        <value>コントロールのサイズを表す <see cref="T:System.Drawing.Size" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultPadding">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.Padding DefaultPadding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding DefaultPadding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultPadding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの内容の内部間隔をピクセル単位で取得します。</summary>
        <value>コントロールの内容の内部間隔を表す <see cref="T:System.Windows.Forms.Padding" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultSize">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Size DefaultSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの既定のサイズを取得します。</summary>
        <value>コントロールの既定の <see cref="T:System.Drawing.Size" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Windows.Forms.Control.DefaultSize%2A> property represents the <xref:System.Drawing.Size> of the control when it is initially created. You can adjust the size of the control by setting its <xref:System.Windows.Forms.Control.Size%2A> property value.  
  
> [!NOTE]
>  To maintain better performance, do not set the <xref:System.Drawing.Size> of a control in its constructor. The preferred method is to override the <xref:System.Windows.Forms.Control.DefaultSize%2A> property.  
  
> [!NOTE]
>  On Windows Server 2003 systems, the size of a <xref:System.Windows.Forms.Form> is restricted by the maximum pixel width and height of the monitor.  
  
   
  
## 例  
 The following code example overrides the <xref:System.Windows.Forms.Control.DefaultSize%2A> property, and makes the default size of the form 500 pixels square.  
  
 [!code-cpp[Windows.Forms.Control Properties2\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CPP/misccontrolproperties.cpp#3)]
 [!code-csharp[Windows.Forms.Control Properties2\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CS/misccontrolproperties.cs#3)]
 [!code-vb[Windows.Forms.Control Properties2\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties2/VB/misccontrolproperties.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding the <see cref="P:System.Windows.Forms.Control.DefaultSize" /> property in a derived class, it is preferable to return a <see cref="T:System.Drawing.Size" /> with the desired dimensions rather than to override all the implementation.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.Control.Size" />
        <altmember cref="T:System.Drawing.Size" />
      </Docs>
    </Member>
    <Member MemberName="DefWndProc">
      <MemberSignature Language="C#" Value="protected virtual void DefWndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DefWndProc(valuetype System.Windows.Forms.Message m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.DefWndProc(System.Windows.Forms.Message@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">処理対象の Windows <see cref="T:System.Windows.Forms.Message" />。</param>
        <summary>指定したメッセージを既定のウィンドウ プロシージャに送信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about processing Windows messages, see the [WindowProc function](http://go.microsoft.com/fwlink/?LinkId=181565).  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for the immediate caller to call unmanaged code. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
        <altmember cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="DestroyHandle">
      <MemberSignature Language="C#" Value="protected virtual void DestroyHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DestroyHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.DestroyHandle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールに関連付けられたハンドルを破棄します。</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for the immediate caller to call unmanaged code. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.DestroyHandle" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.DestroyHandle" /> method to ensure that the handle is destroyed.</para>
        </block>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="DeviceDpi">
      <MemberSignature Language="C#" Value="public int DeviceDpi { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DeviceDpi" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DeviceDpi" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールが現在表示されているディスプレイ デバイスの DPI 値を取得します。</summary>
        <value>ディスプレイ デバイスの DPI 値。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayRectangle">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Rectangle DisplayRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle DisplayRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DisplayRectangle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの表示領域を表す四角形を取得します。</summary>
        <value>コントロールの表示領域を表す <see cref="T:System.Drawing.Rectangle" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.DisplayRectangle%2A> プロパティがコントロールの表示領域のクライアントの四角形を返します。 基本コントロール クラスの場合これはクライアントの四角形になります。 ただし、コントロールを継承するときに、クライアント領域の表示領域が異なる場合、変更が必要な場合があります。 表示する四角形が最も小さい <xref:System.Drawing.Rectangle> コントロールを囲むこと、およびコントロールをレイアウトするために使用します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding the <see cref="P:System.Windows.Forms.Control.DisplayRectangle" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.DisplayRectangle" /> property to extend the base implementation. Alternatively, you must provide all the implementation.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.Control.ClientRectangle" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.Windows.Forms.Control" /> とその子コントロールが使用しているアンマネージ リソースを解放します。オプションで、マネージ リソースも解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method is called by the public **languageKeyword tag is not supported!!!!**  
 method and the <xref:System.Object.Finalize%2A> method.**languageKeyword tag is not supported!!!!**  
 invokes the protected **languageKeyword tag is not supported!!!!**  
 method with the **parameterReference tag is not supported!!!!**  
 parameter set to **languageKeyword tag is not supported!!!!**  
. <xref:System.Object.Finalize%2A> invokes **languageKeyword tag is not supported!!!!**  
 with **parameterReference tag is not supported!!!!**  
 set to **languageKeyword tag is not supported!!!!**  
.  
  
 When the **parameterReference tag is not supported!!!!**  
parameter is **languageKeyword tag is not supported!!!!**  
, this method releases all resources held by any managed objects that this <xref:System.Windows.Forms.Control> references. This method invokes the **languageKeyword tag is not supported!!!!**  
 method of each referenced object.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> can be called multiple times by other objects. When overriding <see langword="Dispose(Boolean)" /> be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />. For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
 For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Disposing">
      <MemberSignature Language="C#" Value="public bool Disposing { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Disposing" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Disposing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>基本 <see cref="T:System.Windows.Forms.Control" /> クラスが破棄処理中かどうかを示す値を取得します。</summary>
        <value>基本 <see langword="true" /> クラスが破棄処理中の場合は <see cref="T:System.Windows.Forms.Control" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 When this property returns **languageKeyword tag is not supported!!!!**  
, the base<xref:System.Windows.Forms.Control> class is in the process of disposing. After the control is disposed of, it can no longer be referenced as a valid Windows control. Even though the instance of a control is disposed of, it is still maintained in memory until it is removed from memory through garbage collection. When a control is disposed of, you cannot call its <xref:System.Windows.Forms.Control.RecreateHandle%2A> method.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)" />
        <altmember cref="T:System.GC" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
      </Docs>
    </Member>
    <Member MemberName="Dock">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.DockStyle Dock { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DockStyle Dock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Dock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DockStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの境界のうち、親コントロールにドッキングする境界を取得または設定します。また、コントロールのサイズが親コントロール内でどのように変化するかを決定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DockStyle" /> の値の 1 つ。 既定値は、<see cref="F:System.Windows.Forms.DockStyle.None" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Windows.Forms.Control.Dock%2A> プロパティを定義する方法、コントロールが自動的にサイズ変更、親コントロールがサイズ変更するとします。 たとえば、設定 <xref:System.Windows.Forms.Control.Dock%2A> に <xref:System.Windows.Forms.DockStyle.Left?displayProperty=fullName> 自体を親コントロールの左端に合うように、親コントロールがサイズ変更に応じてサイズを変更し、コントロールです。 コントロールはフォームの z 軸 \(深度\) に沿ってフォーム上のコントロールのビジュアルの重ね順は、Z オーダーでドッキングします。  
  
 コントロールは、その親コンテナーの 1 辺にドッキングされていることができますか、すべての端にドッキングされていることができ、親コンテナーを入力します。  
  
 設定、 <xref:System.Windows.Forms.Control.Margin%2A> ドッキングされたコントロールのプロパティは、コントロールからの距離に影響を与えません、コンテナーの端。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.Control.Anchor%2A> と <xref:System.Windows.Forms.Control.Dock%2A> プロパティが相互に排他的です。 は一度に 1 つだけを設定することができ、最後に、設定が優先されます。  
  
   
  
## 例  
 次のコード例を作成、 <xref:System.Windows.Forms.GroupBox> し、一部の一般的なプロパティを設定します。 例を作成し、 <xref:System.Windows.Forms.TextBox> 設定とその <xref:System.Windows.Forms.Control.Location%2A> グループ ボックス内で。 次に、設定、 <xref:System.Windows.Forms.Control.Text%2A> グループ ボックス、およびフォームの上部に、グループ ボックス ドッキングのプロパティです。 グループ ボックスを無効にするには最後に、 <xref:System.Windows.Forms.Control.Enabled%2A> プロパティを `false`, 、それが原因で無効にするには、そのグループ ボックス内のすべてのコントロールです。  
  
 [!code-cpp[Windows.Forms.Control Properties\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#2)]
 [!code-csharp[Windows.Forms.Control Properties\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#2)]
 [!code-vb[Windows.Forms.Control Properties\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">割り当てられている値は、のいずれかではない、 <see cref="T:System.Windows.Forms.DockStyle" /> 値。</exception>
        <block subset="none" type="overrides">
          <para>When overriding the <see cref="P:System.Windows.Forms.Control.Dock" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.Dock" /> property to extend the base implementation. Otherwise, you must provide all the implementation. You are not required to override both the <see langword="get" /> and <see langword="set" /> methods of the <see cref="P:System.Windows.Forms.Control.Dock" /> property; you can override only one if needed.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.DockStyle" />
        <altmember cref="P:System.Windows.Forms.Control.Anchor" />
        <altmember cref="T:System.Windows.Forms.ScrollableControl.DockPaddingEdges" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="DockChanged">
      <MemberSignature Language="C#" Value="public event EventHandler DockChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DockChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DockChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.Dock" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This event is raised if the <xref:System.Windows.Forms.Control.Dock%2A> property is changed by either a programmatic modification or user interaction.  
  
 For more information about handling events, see [Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f).  
  
   
  
## 例  
 The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes. The <xref:System.Windows.Forms.Control> class has several methods with the name pattern **placeholder tag is not supported!!!!**  
**languageKeyword tag is not supported!!!!**  
 that are raised when the corresponding **placeholder tag is not supported!!!!**  
 value changes\(**placeholder tag is not supported!!!!**  
 represents the name of the corresponding property\).  
  
 The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data. The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> if the number is positive. This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.  
  
 [!code-cpp[Windows.Forms.Control\_PropertyChangedEvents\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CPP/propertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control\_PropertyChangedEvents\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CS/propertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control\_PropertyChangedEvents\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/VB/propertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Dock" />
        <altmember cref="T:System.Windows.Forms.DockStyle" />
      </Docs>
    </Member>
    <Member MemberName="DoDragDrop">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DragDropEffects DoDragDrop (object data, System.Windows.Forms.DragDropEffects allowedEffects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Forms.DragDropEffects DoDragDrop(object data, valuetype System.Windows.Forms.DragDropEffects allowedEffects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragDropEffects</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
        <Parameter Name="allowedEffects" Type="System.Windows.Forms.DragDropEffects" />
      </Parameters>
      <Docs>
        <param name="data">ドラッグするデータ。</param>
        <param name="allowedEffects">
          <see cref="T:System.Windows.Forms.DragDropEffects" /> の値の 1 つ。</param>
        <summary>ドラッグ アンド ドロップ操作を開始します。</summary>
        <returns>ドラッグ アンド ドロップ操作で実行された最終的な処理を表す、<see cref="T:System.Windows.Forms.DragDropEffects" /> 列挙体の値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **parameterReference tag is not supported!!!!**  
 parameter determines which drag operations can occur. If the drag operation needs to interoperate with applications in another process, data should either be a base managed class \(<xref:System.String>, <xref:System.Drawing.Bitmap>, or <xref:System.Drawing.Imaging.Metafile>\), or an object that implements <xref:System.Runtime.Serialization.ISerializable> or <xref:System.Windows.Forms.IDataObject>.  
  
 The following describes how and when events related to drag\-and\-drop operations are raised.  
  
 The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location. It then checks to see if the control is a valid drop target.  
  
 If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag\-and\-drop effect specified. For a list of drag\-and\-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.  
  
 Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.  
  
-   If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.  
  
-   If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.  
  
-   If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.  
  
 If there is a change in the keyboard or mouse button state, the <xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event's <xref:System.Windows.Forms.QueryContinueDragEventArgs>.  
  
-   If the value of <xref:System.Windows.Forms.DragAction> is **languageKeyword tag is not supported!!!!**  
    , the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set. For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.  
  
    > [!NOTE]
    >  The <xref:System.Windows.Forms.Control.DragOver> and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up\-to\-date feedback on the mouse's position.  
  
-   If the value of <xref:System.Windows.Forms.DragAction> is **languageKeyword tag is not supported!!!!**  
    , the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.  
  
-   If the value of <xref:System.Windows.Forms.DragAction> is **languageKeyword tag is not supported!!!!**  
    , the <xref:System.Windows.Forms.Control.DragLeave> event is raised.  
  
> [!NOTE]
>  The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method catches all exceptions and rethrows only the following security or critical exceptions:  
  
-   SecurityException  
  
-   NullReferenceException  
  
-   StackOverflowException  
  
-   OutOfMemoryException  
  
-   ThreadAbortException  
  
-   ExecutionEngineException  
  
-   IndexOutOfRangeException  
  
-   AccessViolationException  
  
   
  
## 例  
 The following code example demonstrates a drag\-and\-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the **languageKeyword tag is not supported!!!!**  
 event.  
  
 The example also demonstrates using custom cursors for the drag\-and\-drop operation. The example requires that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no\-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  
  
 The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right **languageKeyword tag is not supported!!!!**  
, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL\+ALT keys. The location in the **languageKeyword tag is not supported!!!!**  
 where the drop would occur is also determined during the **languageKeyword tag is not supported!!!!**  
 event. If the data to drop is not a **languageKeyword tag is not supported!!!!**  
, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to **languageKeyword tag is not supported!!!!**  
 in <xref:System.Windows.Forms.DragDropEffects>. Finally, the status of the drop is displayed in the `DropLocationLabel` <xref:System.Windows.Forms.Label>.  
  
 The data to drop for the right **languageKeyword tag is not supported!!!!**  
 is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the **languageKeyword tag is not supported!!!!**  
 value is added at the appropriate place in the **languageKeyword tag is not supported!!!!**  
. If the drag operation moves outside the bounds of the form, then the drag\-and\-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#1)]  
  
 The following code example shows how to use the <xref:System.Windows.Forms.DragDropEffects> enumeration to specify how data should be transferred between the controls involved in a drag\-and\-drop operation. This example requires that your form includes a <xref:System.Windows.Forms.RichTextBox> control and a <xref:System.Windows.Forms.ListBox> control and that the <xref:System.Windows.Forms.ListBox> control is populated with a list of valid file names. When the user drags a file name onto the <xref:System.Windows.Forms.RichTextBox> control, the control's <xref:System.Windows.Forms.Control.DragEnter> event is raised. Within the event handler, the <xref:System.Windows.Forms.DragEventArgs.Effect%2A> property of the <xref:System.Windows.Forms.DragEventArgs> is initialized to <xref:System.Windows.Forms.DragDropEffects> to indicate that the data referenced by the file path should be copied to the <xref:System.Windows.Forms.RichTextBox> control.  
  
 [!code-cpp[RichTextDragDrop\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextDragDrop/CPP/form1.cpp#1)]
 [!code-csharp[RichTextDragDrop\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextDragDrop/CS/form1.cs#1)]
 [!code-vb[RichTextDragDrop\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextDragDrop/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.AllowDrop" />
        <altmember cref="E:System.Windows.Forms.Control.DragDrop" />
      </Docs>
    </Member>
    <Member MemberName="DoubleBuffered">
      <MemberSignature Language="C#" Value="protected virtual bool DoubleBuffered { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DoubleBuffered" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DoubleBuffered" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ちらつきを軽減または回避するために、2 次バッファーを使用してコントロールの表面を再描画するかどうかを示す値を取得または設定します。</summary>
        <value>ダブル バッファリングを使用してコントロールの表面を再描画する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Buffered graphics can reduce or eliminate flicker that is caused by progressive redrawing of parts of a displayed surface. Buffered graphics require that the updated graphics data is first written to a buffer. The data in the graphics buffer is then quickly written to displayed surface memory. The relatively quick switch of the displayed graphics memory typically reduces the flicker that can otherwise occur.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.Control.DoubleBuffered%2A> is not a bindable property.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.BufferedGraphics" />
        <altmember cref="T:System.Drawing.BufferedGraphicsContext" />
        <altmember cref="T:System.Drawing.BufferedGraphicsManager" />
        <altmember cref="F:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer" />
      </Docs>
    </Member>
    <Member MemberName="DoubleClick">
      <MemberSignature Language="C#" Value="public event EventHandler DoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DoubleClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールがダブルクリックされたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A double\-click is determined by the mouse settings of the user's operating system. The user can set the time between clicks of a mouse button that should be considered a double\-click rather than two clicks. The <xref:System.Windows.Forms.Control.Click> event is raised every time a control is double\-clicked. For example, if you have event handlers for the <xref:System.Windows.Forms.Control.Click> and <xref:System.Windows.Forms.Control.DoubleClick> events of a <xref:System.Windows.Forms.Form>, the <xref:System.Windows.Forms.Control.Click> and <xref:System.Windows.Forms.Control.DoubleClick> events are raised when the form is double\-clicked and both methods are called. If a control is double\-clicked and that control does not support the <xref:System.Windows.Forms.Control.DoubleClick> event, the <xref:System.Windows.Forms.Control.Click> event might be raised twice.  
  
 You must set the **languageKeyword tag is not supported!!!!**  
 and **languageKeyword tag is not supported!!!!**  
 values of <xref:System.Windows.Forms.ControlStyles> to **languageKeyword tag is not supported!!!!**  
 for this event to be raised. These values might already be set to **languageKeyword tag is not supported!!!!**  
 if you are inheriting from existing Windows Forms controls.  
  
> [!NOTE]
>  The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=fullName> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>. If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header \(where the <xref:System.Windows.Forms.TabPage> names appear\), the <xref:System.Windows.Forms.TabControl> raises the appropriate event. However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.  
  
 For more information about handling events, see [Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f).  
  
   
  
## 例  
 The following code example uses the <xref:System.Windows.Forms.Control.DoubleClick> event of a <xref:System.Windows.Forms.ListBox> to load text files listed in the <xref:System.Windows.Forms.ListBox> into a <xref:System.Windows.Forms.TextBox> control.  
  
 [!code-cpp[Control.DoubleClick\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.DoubleClick/CPP/form1.cpp#1)]
 [!code-csharp[Control.DoubleClick\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.DoubleClick/CS/form1.cs#1)]
 [!code-vb[Control.DoubleClick\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.DoubleClick/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Inheriting from a standard Windows Forms control and changing the <see langword="StandardClick" /> or <see langword="StandardDoubleClick" /> values of <see cref="T:System.Windows.Forms.ControlStyles" /> to <see langword="true" /> can cause unexpected behavior or have no effect at all if the control does not support the <see cref="E:System.Windows.Forms.Control.Click" /> or <see cref="E:System.Windows.Forms.Control.DoubleClick" /> events.  
  
 The following table lists Windows Forms controls and which event (<see cref="E:System.Windows.Forms.Control.Click" /> or <see cref="E:System.Windows.Forms.Control.DoubleClick" />) is raised in response to the mouse action specified.  
  
 <list type="table"><listheader><term> Control  
  
 </term><description> Left Mouse Click  
  
 </description><description> Left Mouse Double Click  
  
 </description><description> Right Mouse Click  
  
 </description><description> Right Mouse Double Click  
  
 </description><description> Middle Mouse Click  
  
 </description><description> Middle Mouse Double Click  
  
 </description><description> XButton1 Mouse Click  
  
 </description><description> XButton1 Mouse Double-Click  
  
 </description><description> XButton2 Mouse Click  
  
 </description><description> XButton2 Mouse Double-Click  
  
 </description></listheader><item><term><see cref="T:System.Windows.Forms.MonthCalendar" />,  
  
 <see cref="T:System.Windows.Forms.DateTimePicker" />,  
  
 <see cref="T:System.Windows.Forms.RichTextBox" />,  
  
 <see cref="T:System.Windows.Forms.HScrollBar" />,  
  
 <see cref="T:System.Windows.Forms.VScrollBar" /></term><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description></item><item><term><see cref="T:System.Windows.Forms.Button" />,  
  
 <see cref="T:System.Windows.Forms.CheckBox" />,  
  
 <see cref="T:System.Windows.Forms.RadioButton" /></term><description> Click  
  
 </description><description> Click, Click  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description></item><item><term><see cref="T:System.Windows.Forms.ListBox" />,  
  
 <see cref="T:System.Windows.Forms.CheckedListBox" />,  
  
 <see cref="T:System.Windows.Forms.ComboBox" /></term><description> Click  
  
 </description><description> Click, DoubleClick  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description></item><item><term><see cref="T:System.Windows.Forms.TextBox" />,  
  
 <see cref="T:System.Windows.Forms.DomainUpDown" />,  
  
 <see cref="T:System.Windows.Forms.NumericUpDown" /></term><description> Click  
  
 </description><description> Click, DoubleClick  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description></item><item><term> * <see cref="T:System.Windows.Forms.TreeView" />,  
  
 \* <see cref="T:System.Windows.Forms.ListView" /></term><description> Click  
  
 </description><description> Click, DoubleClick  
  
 </description><description> Click  
  
 </description><description> Click, DoubleClick  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description><description> none  
  
 </description></item><item><term><see cref="T:System.Windows.Forms.ProgressBar" />,  
  
 <see cref="T:System.Windows.Forms.TrackBar" /></term><description> Click  
  
 </description><description> Click, Click  
  
 </description><description> Click  
  
 </description><description> Click, Click  
  
 </description><description> Click  
  
 </description><description> Click, Click  
  
 </description><description> Click  
  
 </description><description> Click, Click  
  
 </description><description> Click  
  
 </description><description> Click, Click  
  
 </description></item><item><term><see cref="T:System.Windows.Forms.Form" />,  
  
 <see cref="T:System.Windows.Forms.DataGrid" />,  
  
 <see cref="T:System.Windows.Forms.Label" />,  
  
 <see cref="T:System.Windows.Forms.LinkLabel" />,  
  
 <see cref="T:System.Windows.Forms.Panel" />,  
  
 <see cref="T:System.Windows.Forms.GroupBox" />,  
  
 <see cref="T:System.Windows.Forms.PictureBox" />,  
  
 <see cref="T:System.Windows.Forms.Splitter" />,  
  
 <see cref="T:System.Windows.Forms.StatusBar" />,  
  
 <see cref="T:System.Windows.Forms.ToolBar" />,  
  
 <see cref="T:System.Windows.Forms.TabPage" />,  
  
 ** <see cref="T:System.Windows.Forms.TabControl" /></term><description> Click  
  
 </description><description> Click, DoubleClick  
  
 </description><description> Click  
  
 </description><description> Click, DoubleClick  
  
 </description><description> Click  
  
 </description><description> Click, DoubleClick  
  
 </description><description> Click  
  
 </description><description> Click, DoubleClick  
  
 </description><description> Click  
  
 </description><description> Click, DoubleClick  
  
 </description></item></list>  
  
 \* The mouse pointer must be over a child object (<see cref="T:System.Windows.Forms.TreeNode" /> or <see cref="T:System.Windows.Forms.ListViewItem" />).  
  
 ** The <see cref="T:System.Windows.Forms.TabControl" /> must have at least one <see cref="T:System.Windows.Forms.TabPage" /> in its <see cref="P:System.Windows.Forms.TabControl.TabPages" /> collection.</para>
        </block>
        <altmember cref="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)" />
        <altmember cref="F:System.Windows.Forms.ControlStyles.StandardClick" />
        <altmember cref="F:System.Windows.Forms.ControlStyles.StandardDoubleClick" />
        <altmember cref="E:System.Windows.Forms.Control.Click" />
        <altmember cref="E:System.Windows.Forms.Control.MouseClick" />
        <altmember cref="E:System.Windows.Forms.Control.MouseDoubleClick" />
      </Docs>
    </Member>
    <Member MemberName="DpiChangedAfterParent">
      <MemberSignature Language="C#" Value="public event EventHandler DpiChangedAfterParent;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DpiChangedAfterParent" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DpiChangedAfterParent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>親コントロールまたはフォームの DPI が変更した後に、コントロールの DPI 設定がプログラムで変更されたときに発生します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DpiChangedBeforeParent">
      <MemberSignature Language="C#" Value="public event EventHandler DpiChangedBeforeParent;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DpiChangedBeforeParent" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DpiChangedBeforeParent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>親コントロールまたはフォームの DPI 変更イベントが発生する前に、コントロールの DPI 設定がプログラムで変更されたときに発生します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DragDrop">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DragEventHandler DragDrop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DragEventHandler DragDrop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DragDrop" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ドラッグ アンド ドロップ操作が完了したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Windows.Forms.DragEventArgs.X%2A> and <xref:System.Windows.Forms.DragEventArgs.Y%2A> properties of the <xref:System.Windows.Forms.DragEventArgs> are in screen coordinates, not client coordinates. The following line of [!INCLUDE[csprcs](~/includes/csprcs-md.md)] code converts the properties to a client <xref:System.Drawing.Point>.  
  
```  
Point clientPoint = targetControl.PointToClient(new Point(de.X, de.Y));  
```  
  
> [!NOTE]
>  In versions earlier than [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], if you put a <xref:System.Windows.Forms.UserControl> with <xref:System.Windows.Forms.Control.DragEnter> and <xref:System.Windows.Forms.Control.DragDrop> events on a Windows Form and drag and drop something onto the <xref:System.Windows.Forms.UserControl> at design time, the **languageKeyword tag is not supported!!!!**  
>  and **languageKeyword tag is not supported!!!!**  
>  events are raised. However, when you close and reopen the solution, the <xref:System.Windows.Forms.Control.DragEnter> and <xref:System.Windows.Forms.Control.DragDrop> events are not raised again.  
  
 For more information about handling events, see [Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f).  
  
   
  
## 例  
 This code excerpt demonstrates using the <xref:System.Windows.Forms.Control.DragDrop> event. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop\#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#5)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop\#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#5)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop\#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.DragEnter" />
        <altmember cref="E:System.Windows.Forms.Control.DragLeave" />
        <altmember cref="E:System.Windows.Forms.Control.DragOver" />
        <altmember cref="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)" />
        <altmember cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DragEventHandler DragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DragEventHandler DragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DragEnter" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>オブジェクトがコントロールの境界内にドラッグされると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Windows.Forms.Control.DragEnter> event is raised when the user first drags the mouse cursor over the control during a drag\-and\-drop operation.  
  
> [!NOTE]
>  In versions earlier than [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], if you put a <xref:System.Windows.Forms.UserControl> with <xref:System.Windows.Forms.Control.DragEnter> and <xref:System.Windows.Forms.Control.DragDrop> events on a Windows Form and drag and drop something onto the <xref:System.Windows.Forms.UserControl> at design time, the **languageKeyword tag is not supported!!!!**  
>  and **languageKeyword tag is not supported!!!!**  
>  events are raised. However, when you close and reopen the solution, the <xref:System.Windows.Forms.Control.DragEnter> and <xref:System.Windows.Forms.Control.DragDrop> events are not raised again.  
  
 The following describes how and when events related to drag\-and\-drop operations are raised.  
  
 The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location. It then checks to see if the control is a valid drop target.  
  
 If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag\-and\-drop effect specified. For a list of drag\-and\-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.  
  
 Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.  
  
-   If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.  
  
-   If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.  
  
-   If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.  
  
 If there is a change in the keyboard or mouse button state, the<xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event's <xref:System.Windows.Forms.QueryContinueDragEventArgs>.  
  
-   If the value of <xref:System.Windows.Forms.DragAction> is **languageKeyword tag is not supported!!!!**  
    , the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set. For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.  
  
    > [!NOTE]
    >  The <xref:System.Windows.Forms.Control.DragOver> and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up\-to\-date feedback on the mouse's position.  
  
-   If the value of <xref:System.Windows.Forms.DragAction> is **languageKeyword tag is not supported!!!!**  
    , the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.  
  
-   If the value of <xref:System.Windows.Forms.DragAction> is **languageKeyword tag is not supported!!!!**  
    , the <xref:System.Windows.Forms.Control.DragLeave> event is raised.  
  
    > [!NOTE]
    >  The <xref:System.Windows.Forms.DragEventArgs.X%2A> and <xref:System.Windows.Forms.DragEventArgs.Y%2A> properties of the <xref:System.Windows.Forms.DragEventArgs> are in screen coordinates, not client coordinates. The following line of [!INCLUDE[csprcs](~/includes/csprcs-md.md)] code converts the properties to a client <xref:System.Drawing.Point>.  
  
    ```  
    Point clientPoint = targetControl.PointToClient(new Point(de.X, de.Y));  
    ```  
  
 For more information about handling events, see [Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f).  
  
   
  
## 例  
 The following code example demonstrates a drag\-and\-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the **languageKeyword tag is not supported!!!!**  
 event.  
  
 The example also demonstrates using custom cursors for the drag\-and\-drop operation. The example requires that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no\-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  
  
 The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right **languageKeyword tag is not supported!!!!**  
, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL\+ALT keys. The location in the **languageKeyword tag is not supported!!!!**  
 where the drop would occur is also determined during the **languageKeyword tag is not supported!!!!**  
 event. If the data to drop is not a **languageKeyword tag is not supported!!!!**  
, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to **languageKeyword tag is not supported!!!!**  
 in <xref:System.Windows.Forms.DragDropEffects>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  
  
 The data to drop for the right **languageKeyword tag is not supported!!!!**  
 is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the **languageKeyword tag is not supported!!!!**  
 value is added at the appropriate place in the **languageKeyword tag is not supported!!!!**  
. If the drag operation moves outside the bounds of the form, then the drag\-and\-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  
  
 This code excerpt demonstrates using the <xref:System.Windows.Forms.Control.DragEnter> event. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop\#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#7)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop\#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#7)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop\#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event EventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DragLeave" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>オブジェクトがコントロールの境界外にドラッグされたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Windows.Forms.Control.DragLeave> event is raised when the user drags the cursor out of the control or the user cancels the current drag\-and\-drop operation.  
  
 The following describes how and when events related to drag\-and\-drop operations are raised.  
  
 The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location. It then checks to see if the control is a valid drop target.  
  
 If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag\-and\-drop effect specified. For a list of drag\-and\-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.  
  
 Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.  
  
-   If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.  
  
-   If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.  
  
-   If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.  
  
 If there is a change in the keyboard or mouse button state, the <xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event's <xref:System.Windows.Forms.QueryContinueDragEventArgs>.  
  
-   If the value of <xref:System.Windows.Forms.DragAction> is **languageKeyword tag is not supported!!!!**  
    , the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set. For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.  
  
    > [!NOTE]
    >  The <xref:System.Windows.Forms.Control.DragOver> and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up\-to\-date feedback on the mouse's position.  
  
-   If the value of <xref:System.Windows.Forms.DragAction> is **languageKeyword tag is not supported!!!!**  
    , the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.  
  
-   If the value of <xref:System.Windows.Forms.DragAction> is **languageKeyword tag is not supported!!!!**  
    , the <xref:System.Windows.Forms.Control.DragLeave> event is raised.  
  
 For more information about handling events, see [Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f).  
  
   
  
## 例  
 The following code example demonstrates a drag\-and\-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the **languageKeyword tag is not supported!!!!**  
 event.  
  
 The example also demonstrates using custom cursors for the drag\-and\-drop operation. The example requires that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no\-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  
  
 The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right **languageKeyword tag is not supported!!!!**  
, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL\+ALT keys. The location in the **languageKeyword tag is not supported!!!!**  
 where the drop would occur is also determined during the **languageKeyword tag is not supported!!!!**  
 event. If the data to drop is not a **languageKeyword tag is not supported!!!!**  
, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to **languageKeyword tag is not supported!!!!**  
 in <xref:System.Windows.Forms.DragDropEffects>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  
  
 The data to drop for the right **languageKeyword tag is not supported!!!!**  
 is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the **languageKeyword tag is not supported!!!!**  
 value is added at the appropriate place in the **languageKeyword tag is not supported!!!!**  
. If the drag operation moves outside the bounds of the form, then the drag\-and\-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  
  
 This code excerpt demonstrates using the <xref:System.Windows.Forms.Control.DragLeave> event. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop\#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#8)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop\#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#8)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop\#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DragEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DragEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DragOver" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>オブジェクトがコントロールの境界を越えてドラッグされると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Windows.Forms.Control.DragOver> event is raised when the mouse cursor moves within the bounds of the control during a drag\-and\-drop operation.  
  
 The following describes how and when events related to drag\-and\-drop operations are raised.  
  
 The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location. It then checks to see if the control is a valid drop target.  
  
 If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag\-and\-drop effect specified. For a list of drag\-and\-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.  
  
 Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.  
  
-   If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.  
  
-   If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.  
  
-   If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.  
  
 If there is a change in the keyboard or mouse button state, the<xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event's <xref:System.Windows.Forms.QueryContinueDragEventArgs>.  
  
-   If the value of <xref:System.Windows.Forms.DragAction> value is **languageKeyword tag is not supported!!!!**  
    , the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set. For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.  
  
    > [!NOTE]
    >  The <xref:System.Windows.Forms.Control.DragOver> and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up\-to\-date feedback on the mouse's position.  
  
-   If the value of <xref:System.Windows.Forms.DragAction> is **languageKeyword tag is not supported!!!!**  
    , the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.  
  
-   If the value of <xref:System.Windows.Forms.DragAction> is **languageKeyword tag is not supported!!!!**  
    , the <xref:System.Windows.Forms.Control.DragLeave> event is raised.  
  
    > [!NOTE]
    >  The <xref:System.Windows.Forms.DragEventArgs.X%2A> and <xref:System.Windows.Forms.DragEventArgs.Y%2A> properties of the <xref:System.Windows.Forms.DragEventArgs> are in screen coordinates, not client coordinates. The following line of C\# code converts the properties to a client <xref:System.Drawing.Point>:  
    >   
    >  Point clientPoint \= targetControl.PointToClient\(new Point\(de.X, de.Y\)\);  
  
 For more information about handling events, see [Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f).  
  
   
  
## 例  
 The following code example demonstrates a drag\-and\-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the **languageKeyword tag is not supported!!!!**  
 event.  
  
 The example also demonstrates using custom cursors for the drag\-and\-drop operation. The example requires that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no\-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  
  
 The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right **languageKeyword tag is not supported!!!!**  
, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL\+ALT keys. The location in the **languageKeyword tag is not supported!!!!**  
 where the drop would occur is also determined during the **languageKeyword tag is not supported!!!!**  
 event. If the data to drop is not a **languageKeyword tag is not supported!!!!**  
, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to **languageKeyword tag is not supported!!!!**  
 in <xref:System.Windows.Forms.DragDropEffects>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  
  
 The data to drop for the right **languageKeyword tag is not supported!!!!**  
 is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the **languageKeyword tag is not supported!!!!**  
 value is added at the appropriate place in the **languageKeyword tag is not supported!!!!**  
. If the drag operation moves outside the bounds of the form, then the drag\-and\-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  
  
 This code excerpt demonstrates using the <xref:System.Windows.Forms.Control.DragOver> event. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop\#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop\#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop\#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DrawToBitmap">
      <MemberSignature Language="C#" Value="public void DrawToBitmap (System.Drawing.Bitmap bitmap, System.Drawing.Rectangle targetBounds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawToBitmap(class System.Drawing.Bitmap bitmap, valuetype System.Drawing.Rectangle targetBounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.DrawToBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitmap" Type="System.Drawing.Bitmap" />
        <Parameter Name="targetBounds" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="bitmap">描画されるビットマップ。</param>
        <param name="targetBounds">コントロールが描画される範囲。</param>
        <summary>指定したビットマップへのレンダリングをサポートします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Windows.Forms.Control.DrawToBitmap%2A> method is not supported for ActiveX controls. You can override the <xref:System.Windows.Forms.Control.OnPrint%2A> event and provide custom printing logic if required.  
  
 The <xref:System.Windows.Forms.Control.DrawToBitmap%2A> method has the following limitations:  
  
-   An <xref:System.ArgumentException> might be thrown for large bitmaps. The maximum allowable size varies by machine.  
  
-   <xref:System.Windows.Forms.Control.DrawToBitmap%2A> does not support the `Ink` controls for the Windows XP Tablet PC Edition 2005 operating system.  
  
-   <xref:System.Windows.Forms.Control.DrawToBitmap%2A> does not draw a child <xref:System.Windows.Forms.TextBox> if the <xref:System.Windows.Forms.Control.Visible%2A> property of the <xref:System.Windows.Forms.TextBox> is set to `false`.  
  
-   Controls inside containers are rendered in reverse order.  
  
-   <xref:System.Windows.Forms.Control.DrawToBitmap%2A> is not fully functional for the <xref:System.Windows.Forms.RichTextBox>; only the border of a bitmap is drawn.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnPrint(System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-514)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールがユーザーとの対話に応答できるかどうかを示す値を取得または設定します。</summary>
        <value>コントロールがユーザーとの対話に応答できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 With the <xref:System.Windows.Forms.Control.Enabled%2A> property, you can enable or disable controls at run time. For example, you can disable controls that do not apply to the current state of the application. You can also disable a control to restrict its use. For example, a button can be disabled to prevent the user from clicking it. If a control is disabled, it cannot be selected.  
  
> [!IMPORTANT]
>  Setting the <xref:System.Windows.Forms.Control.Enabled%2A> property to **languageKeyword tag is not supported!!!!**  
>  does not disable the application's control box or prevent the application window from receiving the focus.  
  
 When a container control has its enabled property set to **languageKeyword tag is not supported!!!!**  
, all its contained controls are disabled, as well. For example, if the user clicks on any of the controls contained in a disabled <xref:System.Windows.Forms.GroupBox> control, no events are raised.  
  
> [!NOTE]
>  When a scrollable control is disabled, the scroll bars are also disabled. For example, a disabled multiline textbox is unable to scroll to display all the lines of text.  
  
   
  
## 例  
 The following code example creates a <xref:System.Windows.Forms.GroupBox> and sets some of its common properties. The example creates a <xref:System.Windows.Forms.TextBox> and sets its <xref:System.Windows.Forms.Control.Location%2A> within the group box. Next, it sets the <xref:System.Windows.Forms.Control.Text%2A> property of the group box, and docks the group box to the top of the form. Lastly, it disables the group box by setting the <xref:System.Windows.Forms.Control.Enabled%2A> property to **languageKeyword tag is not supported!!!!**  
, which causes all controls contained within the group box to be disabled.  
  
 [!code-cpp[Windows.Forms.Control Properties\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#2)]
 [!code-csharp[Windows.Forms.Control Properties\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#2)]
 [!code-vb[Windows.Forms.Control Properties\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ScrollableControl" />
      </Docs>
    </Member>
    <Member MemberName="EnabledChanged">
      <MemberSignature Language="C#" Value="public event EventHandler EnabledChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler EnabledChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.EnabledChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.Enabled" /> プロパティ値が変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This event is raised if the <xref:System.Windows.Forms.Control.Enabled%2A> property is changed by either a programmatic modification or user interaction.  
  
 For more information about handling events, see [Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f).  
  
   
  
## 例  
 The following code example uses two <xref:System.Windows.Forms.RadioButton> controls to demonstrate the <xref:System.Windows.Forms.Control.EnabledChanged> event. Clicking one button changes the value of the <xref:System.Windows.Forms.Control.Enabled%2A> property of the other button to **languageKeyword tag is not supported!!!!**  
 and displays a <xref:System.Windows.Forms.MessageBox>.  
  
 [!code-csharp[System.Windows.Forms.Control.EnabledChanged\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.EnabledChanged/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.EnabledChanged\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.EnabledChanged/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public object EndInvoke (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EndInvoke(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" /> を呼び出したときに返された、特定の呼び出しの非同期操作を表す<see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" />。</param>
        <summary>渡された <see cref="T:System.IAsyncResult" /> によって表される、非同期操作の戻り値を取得します。</summary>
        <returns>非同期操作によって生成された <see cref="T:System.Object" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 非同期操作が完了していない場合、この関数は、結果が利用可能になるまでブロックします。  
  
> [!NOTE]
>  加え、 <xref:System.Windows.Forms.Control.InvokeRequired%2A> プロパティには、コントロールのスレッド セーフである 4 つのメソッドもあります: <xref:System.Windows.Forms.Control.Invoke%2A>, 、<xref:System.Windows.Forms.Control.BeginInvoke%2A>, 、<xref:System.Windows.Forms.Control.EndInvoke%2A>, 、および <xref:System.Windows.Forms.Control.CreateGraphics%2A> コントロールのハンドルが既に作成されている場合。 呼び出す <xref:System.Windows.Forms.Control.CreateGraphics%2A> コントロールのハンドルがバック グラウンド スレッドで作成される前に、可能性がありますバックします。 その他のすべてのメソッド呼び出しの invoke メソッドのいずれかを使用する必要があります、コントロールのスレッドへの呼び出しをマーシャ リングします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> パラメーターの値が <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> の前の呼び出しによって、オブジェクトは作成されませんでした、 <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" /> 同じコントロールからのメソッドです。</exception>
        <altmember cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" />
        <altmember cref="P:System.Windows.Forms.Control.InvokeRequired" />
        <altmember cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public event EventHandler Enter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Enter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Enter" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールが入力されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 When you change the focus by using the keyboard \(TAB, SHIFT\+TAB, and so on\), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=fullName> property to the current form, focus events occur in the following order:  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.LostFocus>  
  
4.  <xref:System.Windows.Forms.Control.Leave>  
  
5.  <xref:System.Windows.Forms.Control.Validating>  
  
6.  <xref:System.Windows.Forms.Control.Validated>  
  
 If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to **languageKeyword tag is not supported!!!!**  
, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.  
  
> [!NOTE]
>  The <xref:System.Windows.Forms.Control.Enter> and <xref:System.Windows.Forms.Control.Leave> events are suppressed by the <xref:System.Windows.Forms.Form> class. The equivalent events in the <xref:System.Windows.Forms.Form> class are the <xref:System.Windows.Forms.Form.Activated> and <xref:System.Windows.Forms.Form.Deactivate> events. The <xref:System.Windows.Forms.Control.Enter> and <xref:System.Windows.Forms.Control.Leave> events are hierarchical and will cascade up and down the parent chain until the appropriate control is reached. For example, assume you have a <xref:System.Windows.Forms.Form> with two <xref:System.Windows.Forms.GroupBox> controls, and each <xref:System.Windows.Forms.GroupBox> control has one <xref:System.Windows.Forms.TextBox> control. When the caret is moved from one <xref:System.Windows.Forms.TextBox> to the other, the <xref:System.Windows.Forms.Control.Leave> event is raised for the <xref:System.Windows.Forms.TextBox> and <xref:System.Windows.Forms.GroupBox>, and the <xref:System.Windows.Forms.Control.Enter> event is raised for the other <xref:System.Windows.Forms.GroupBox> and <xref:System.Windows.Forms.TextBox>.  
  
> [!CAUTION]
>  Do not attempt to set focus from within the <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>, <xref:System.Windows.Forms.Control.Validating>, or <xref:System.Windows.Forms.Control.Validated> event handlers. Doing so can cause your application or the operating system to stop responding. For more information, see the **languageKeyword tag is not supported!!!!**  
>  topic in the "Keyboard Input Reference" section and the "Message Deadlocks" section of the[About Messages and Message Queues](http://msdn.microsoft.com/library/windows/desktop/ms644927\(v=vs.85\).aspx)topic.  
  
 For more information about handling events, see [Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f).  
  
   
  
## 例  
 The following code example uses the <xref:System.Windows.Forms.Control.Enter> event to change the foreground and background colors of a <xref:System.Windows.Forms.TextBox> under particular conditions.  
  
 [!code-cpp[Control.Enter\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Enter/CPP/form1.cpp#1)]
 [!code-csharp[Control.Enter\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Enter/CS/form1.cs#1)]
 [!code-vb[Control.Enter\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Enter/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="FindForm">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Form FindForm ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Form FindForm() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.FindForm" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Form</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールがあるフォームを取得します。</summary>
        <returns>コントロールがある <see cref="T:System.Windows.Forms.Form" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コントロールの <xref:System.Windows.Forms.Control.Parent%2A> プロパティの値と同じにすることがありますいない、 <xref:System.Windows.Forms.Form> によって返される <xref:System.Windows.Forms.Control.FindForm%2A> メソッドです。 などの場合、 <xref:System.Windows.Forms.RadioButton> 内でコントロールを格納している、 <xref:System.Windows.Forms.GroupBox> コントロール、および <xref:System.Windows.Forms.GroupBox> に、 <xref:System.Windows.Forms.Form>, 、 <xref:System.Windows.Forms.RadioButton> コントロールの <xref:System.Windows.Forms.Control.Parent%2A> は、 <xref:System.Windows.Forms.GroupBox> と <xref:System.Windows.Forms.GroupBox> コントロールの <xref:System.Windows.Forms.Control.Parent%2A> は、 <xref:System.Windows.Forms.Form>です。  
  
   
  
## 例  
 次のコード例では、指定したボタンを含むフォームを検索します。  
  
 [!code-cpp[Control.FindForm\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.FindForm/CPP/form1.cpp#1)]
 [!code-csharp[Control.FindForm\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.FindForm/CS/form1.cs#1)]
 [!code-vb[Control.FindForm\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.FindForm/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows to call this method. Associated enumeration: **languageKeyword tag is not supported!!!!**  
 value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <altmember cref="M:System.Windows.Forms.Control.GetTopLevel" />
        <altmember cref="T:System.Windows.Forms.Form" />
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public bool Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Focus" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールに入力フォーカスを設定します。</summary>
        <returns>入力フォーカス要求が成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.Focus%2A> メソッドが返す `true` コントロールが正常に入力フォーカスを受け取った場合。 フォーカスのあるビジュアル キューが表示されないときに入力フォーカス コントロールことができます。 この動作は、主にしたコントロールで、次に示すまたは任意のコントロールから派生しています。  
  
 コントロールが選択できるし、次のすべてに該当する場合は、入力フォーカスを受け取る: `Selectable` の値 <xref:System.Windows.Forms.ControlStyles> に設定されている `true`, 、別のコントロールに含まれていると、すべての親コントロールが表示され、有効になっています。  
  
 次の一覧に Windows フォーム コントロールが選択可能ではありません。 これらのコントロールから派生したコントロールは、選択できません。  
  
-   <xref:System.Windows.Forms.Panel>  
  
-   <xref:System.Windows.Forms.GroupBox>  
  
-   <xref:System.Windows.Forms.PictureBox>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.Splitter>  
  
-   <xref:System.Windows.Forms.Label>  
  
-   <xref:System.Windows.Forms.LinkLabel> \(この場合、コントロール内にリンクすることはありません\)  
  
> [!NOTE]
>  <xref:System.Windows.Forms.Control.Focus%2A> 低レベルのメソッドは、主にカスタム コントロールを作成します。 代わりに、アプリケーション プログラマが使用する必要があります、 <xref:System.Windows.Forms.Control.Select%2A> メソッドまたは <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> 子コントロールのプロパティまたは <xref:System.Windows.Forms.Form.Activate%2A> フォームのメソッドです。  
  
   
  
## 例  
 次のコード例を指定したフォーカスを設定する <xref:System.Windows.Forms.Control>, 、フォーカスを受け取ることができます。  
  
 [!code-cpp[Windows.Forms.ControlMembers6\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CPP/controlmembers6.cpp#1)]
 [!code-csharp[Windows.Forms.ControlMembers6\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CS/controlmembers6.cs#1)]
 [!code-vb[Windows.Forms.ControlMembers6\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/VB/controlmembers6.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows to call this method. Associated enumeration: **languageKeyword tag is not supported!!!!**  
 value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <altmember cref="P:System.Windows.Forms.Control.CanFocus" />
        <altmember cref="P:System.Windows.Forms.Control.ContainsFocus" />
        <altmember cref="P:System.Windows.Forms.Control.Focused" />
        <altmember cref="P:System.Windows.Forms.Control.CanSelect" />
        <altmember cref="M:System.Windows.Forms.Control.Select" />
        <altmember cref="P:System.Windows.Forms.ContainerControl.ActiveControl" />
        <altmember cref="M:System.Windows.Forms.Form.Activate" />
      </Docs>
    </Member>
    <Member MemberName="Focused">
      <MemberSignature Language="C#" Value="public virtual bool Focused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Focused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールに入力フォーカスがあるかどうかを示す値を取得します。</summary>
        <value>コントロールにフォーカスがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次のコード例を無効にする <xref:System.Windows.Forms.MenuItem> 場合、 <xref:System.Windows.Forms.TextBox> にフォーカスがないです。 この例では、あることが必要です、 <xref:System.Windows.Forms.Form> で、 <xref:System.Windows.Forms.TextBox> という `textBox1` と 2 つ <xref:System.Windows.Forms.MenuItem> という名前のオブジェクト `menuItemEdit` と `menuItemEditInsertCustomerInfo`です。  
  
 [!code-cpp[Windows.FOrms.Control Members2\#4](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CPP/controlmembers2.cpp#4)]
 [!code-csharp[Windows.FOrms.Control Members2\#4](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CS/controlmembers2.cs#4)]
 [!code-vb[Windows.FOrms.Control Members2\#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members2/VB/controlmembers2.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding the <see cref="P:System.Windows.Forms.Control.Focused" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.Focused" /> property to extend the base implementation. Otherwise, you must provide all the implementation.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.Control.CanFocus" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="P:System.Windows.Forms.Control.CanSelect" />
        <altmember cref="P:System.Windows.Forms.Control.ContainsFocus" />
      </Docs>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Font Font { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Font Font" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Font" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-512)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールによって表示されるテキストのフォントを取得または設定します。</summary>
        <value>コントロールによって表示されるテキストに適用される <see cref="T:System.Drawing.Font" />。 既定値は <see cref="P:System.Windows.Forms.Control.DefaultFont" /> プロパティの値です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.Font%2A> プロパティは、アンビエント プロパティです。 アンビエント プロパティはコントロールのプロパティ セットは、親コントロールから取得されます。 たとえば、 <xref:System.Windows.Forms.Button> が同じである <xref:System.Windows.Forms.Control.BackColor%2A> 親と <xref:System.Windows.Forms.Form> 既定では。 アンビエント プロパティの詳細については、次を参照してください。、 <xref:System.Windows.Forms.AmbientProperties> クラスまたは <xref:System.Windows.Forms.Control> クラスの概要です。  
  
 <xref:System.Drawing.Font> は変更できません \(つまり、そのプロパティのいずれかを調整できません\)、割り当てることができますのみ、 <xref:System.Windows.Forms.Control.Font%2A> 、新しいプロパティ <xref:System.Drawing.Font>します。 ただし、既存のフォントで新しいフォントを基準とすることができます。  
  
 \[Visual Basic、C\# の場合\]  
  
 太字にする既存のフォントを調整する方法の例を次に示します。  
  
```csharp  
myControl.Font = new Font(myControl.Font,   
    myControl.Font.Style | FontStyle.Bold);  
```  
  
```vb  
MyControl.Font = New Font(MyControl.Font, _   
    MyControl.Font.Style Or FontStyle.Bold)  
```  
  
   
  
## 例  
 次のコード例を表示、 <xref:System.Windows.Forms.FontDialog> 、ユーザーと変更を <xref:System.Drawing.Font> の <xref:System.Windows.Forms.DateTimePicker> コントロールです。 この例である必要があります、 <xref:System.Windows.Forms.Form> と <xref:System.Windows.Forms.Button> と <xref:System.Windows.Forms.DateTimePicker> にします。  
  
 [!code-cpp[Control\_Font\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_Font/CPP/control_font.cpp#1)]
 [!code-csharp[Control\_Font\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_Font/CS/control_font.cs#1)]
 [!code-vb[Control\_Font\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_Font/VB/control_font.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding the <see cref="P:System.Windows.Forms.Control.Font" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.Font" /> property to extend the base implementation. Otherwise, you must provide all the implementation. You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.Font" /> property; you can override only one if needed.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.FontChanged" />
        <altmember cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" />
        <altmember cref="T:System.Drawing.Font" />
      </Docs>
    </Member>
    <Member MemberName="FontChanged">
      <MemberSignature Language="C#" Value="public event EventHandler FontChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler FontChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.FontChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.Font" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、 <xref:System.Windows.Forms.Control.Font%2A> プロパティを変更すると、プログラムの変更かとの対話でします。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例を示しています、 <xref:System.Windows.Forms.Control.FontChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.Control.FontChanged\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.FontChanged/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.FontChanged\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.FontChanged/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Font" />
        <altmember cref="T:System.Drawing.Font" />
      </Docs>
    </Member>
    <Member MemberName="FontHeight">
      <MemberSignature Language="C#" Value="protected int FontHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FontHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.FontHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールのフォントの高さを取得または設定します。</summary>
        <value>コントロールの <see cref="T:System.Drawing.Font" /> の高さ \(ピクセル単位\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  <xref:System.Windows.Forms.Control.FontHeight%2A> プロパティは、コントロールの以外の値を設定しないでください <xref:System.Drawing.Font.Height%2A?displayProperty=fullName> 値または\-1。 設定 <xref:System.Windows.Forms.Control.FontHeight%2A> を\-1 にオフにすると、キャッシュされた高さの値の効果があり、値には、次に、プロパティが参照されているときは再計算されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Drawing.Font.Height" />
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-513)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの前景色を取得または設定します。</summary>
        <value>コントロールの前景の <see cref="T:System.Drawing.Color" />。 既定値は <see cref="P:System.Windows.Forms.Control.DefaultForeColor" /> プロパティの値です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.ForeColor%2A> プロパティは、アンビエント プロパティです。 アンビエント プロパティはコントロールのプロパティ セットは、親コントロールから取得されます。 たとえば、 <xref:System.Windows.Forms.Button> が同じである <xref:System.Windows.Forms.Control.BackColor%2A> 親と <xref:System.Windows.Forms.Form> 既定では。 アンビエント プロパティの詳細については、次を参照してください。、 <xref:System.Windows.Forms.AmbientProperties> クラスまたは <xref:System.Windows.Forms.Control> クラスの概要です。  
  
   
  
## 例  
 次のコード例、 <xref:System.Windows.Forms.Control.BackColor%2A> と <xref:System.Windows.Forms.Control.ForeColor%2A> を既定のシステム カラー コントロールです。 コードを再帰的には、コントロールで子コントロールがある場合は自分自身を呼び出します。 このコード例は、 <xref:System.Windows.Forms.Form> には、少なくとも 1 つの子コントロールであると、子コンテナーを制御、このような <xref:System.Windows.Forms.Panel> または <xref:System.Windows.Forms.GroupBox>, 、独自の子コントロールが詳しく説明するため、再帰します。  
  
 [!code-cpp[Windows.Forms.Control Properties\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#1)]
 [!code-csharp[Windows.Forms.Control Properties\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#1)]
 [!code-vb[Windows.Forms.Control Properties\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding the <see cref="P:System.Windows.Forms.Control.ForeColor" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.ForeColor" /> property to extend the base implementation. Otherwise, you must provide all the implementation. You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.ForeColor" /> property; you can override only one if needed.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.ForeColorChanged" />
        <altmember cref="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" />
        <altmember cref="T:System.Drawing.Color" />
      </Docs>
    </Member>
    <Member MemberName="ForeColorChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ForeColorChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ForeColorChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ForeColorChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.ForeColor" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、 <xref:System.Windows.Forms.Control.ForeColor%2A> プロパティを変更すると、プログラムの変更かとの対話でします。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例は、イベント ハンドラーを実行すると実行、 <xref:System.Windows.Forms.Control.Text%2A> プロパティ値が変更されます。<xref:System.Windows.Forms.Control> クラス名のパターンをいくつかの方法には *PropertyName*`Changed` いるときに発生、対応する *PropertyName* 値の変更 \(*PropertyName* 、対応するプロパティの名前を表します\)。  
  
 次のコードを変更する例、 <xref:System.Windows.Forms.Control.ForeColor%2A> の <xref:System.Windows.Forms.TextBox> データを表示します。 例では、文字列に変換する 10 進数と変更、 <xref:System.Windows.Forms.Control.ForeColor%2A> に <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> 負の値とする <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> 数値が正の場合。 この例は、 <xref:System.Windows.Forms.Form> を含む、 <xref:System.Windows.Forms.TextBox>です。  
  
 [!code-cpp[Windows.Forms.Control\_PropertyChangedEvents\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CPP/propertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control\_PropertyChangedEvents\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CS/propertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control\_PropertyChangedEvents\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/VB/propertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.ForeColor" />
        <altmember cref="T:System.Drawing.Color" />
      </Docs>
    </Member>
    <Member MemberName="FromChildHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.Control FromChildHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.Control FromChildHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.FromChildHandle(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">検索する対象となるウィンドウ ハンドル \(<see langword="HWND" />\)。</param>
        <summary>指定したハンドルを格納しているコントロールを取得します。</summary>
        <returns>指定したハンドルに関連付けられたコントロールを表す <see cref="T:System.Windows.Forms.Control" />。指定したハンドルを持つコントロールが見つからない場合は <see langword="null" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、コントロールに関連付けられているハンドルが見つかるまで、ウィンドウ ハンドルの親チェーンを検索します。 このメソッドより信頼性の高い、 <xref:System.Windows.Forms.Control.FromHandle%2A> メソッドを 1 つ以上のハンドルを所有するコントロールが正しく返されるためです。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows to call this method. Associated enumeration: **languageKeyword tag is not supported!!!!**  
 value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.Parent" />
      </Docs>
    </Member>
    <Member MemberName="FromHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.Control FromHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.Control FromHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.FromHandle(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">検索する対象となるウィンドウ ハンドル \(<see langword="HWND" />\)。</param>
        <summary>指定したハンドルに現在関連付けられているコントロールを返します。</summary>
        <returns>指定したハンドルに関連付けられたコントロールを表す <see cref="T:System.Windows.Forms.Control" />。指定したハンドルを持つコントロールが見つからない場合は <see langword="null" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Windows.Forms.Control.FromChildHandle%2A> メソッドの 1 つ以上のハンドルを所有するコントロールを返す必要がある場合。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows to call this method. Associated enumeration: **languageKeyword tag is not supported!!!!**  
 value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.Parent" />
      </Docs>
    </Member>
    <Member MemberName="GetAccessibilityObjectById">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.AccessibleObject GetAccessibilityObjectById (int objectId);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.AccessibleObject GetAccessibilityObjectById(int32 objectId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetAccessibilityObjectById(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="objectId">取得する <see langword="Int32" /> を識別する <see cref="T:System.Windows.Forms.AccessibleObject" />。</param>
        <summary>指定した <see cref="T:System.Windows.Forms.AccessibleObject" /> を取得します。</summary>
        <returns>指定した <see cref="T:System.Windows.Forms.AccessibleObject" />。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.AccessibleObject" />
      </Docs>
    </Member>
    <Member MemberName="GetAutoSizeMode">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.AutoSizeMode GetAutoSizeMode ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Windows.Forms.AutoSizeMode GetAutoSizeMode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetAutoSizeMode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AutoSizeMode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.AutoSize" /> プロパティが有効なときのコントロールの動作を示す値を取得します。</summary>
        <returns>
          <see cref="T:System.Windows.Forms.AutoSizeMode" /> 値のいずれか。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildAtPoint">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control GetChildAtPoint (System.Drawing.Point pt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Control GetChildAtPoint(valuetype System.Drawing.Point pt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetChildAtPoint(System.Drawing.Point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pt">コントロールを検索する座標を格納している <see cref="T:System.Drawing.Point" />。 座標は、コントロールのクライアント領域の左上隅に対する相対座標として表されます。</param>
        <summary>指定した座標にある子コントロールを取得します。</summary>
        <returns>指定したポイントにあるコントロールを表す <see cref="T:System.Windows.Forms.Control" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定された位置に子コントロールが存在しない場合、 <xref:System.Windows.Forms.Control.GetChildAtPoint%2A> メソッドが返す `null`します。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows to call this method if the control returned is not a child of the control. Associated enumeration: **languageKeyword tag is not supported!!!!**  
 value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <altmember cref="P:System.Windows.Forms.Control.Parent" />
        <altmember cref="T:System.Windows.Forms.Control.ControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="GetChildAtPoint">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control GetChildAtPoint (System.Drawing.Point pt, System.Windows.Forms.GetChildAtPointSkip skipValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Control GetChildAtPoint(valuetype System.Drawing.Point pt, valuetype System.Windows.Forms.GetChildAtPointSkip skipValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetChildAtPoint(System.Drawing.Point,System.Windows.Forms.GetChildAtPointSkip)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
        <Parameter Name="skipValue" Type="System.Windows.Forms.GetChildAtPointSkip" />
      </Parameters>
      <Docs>
        <param name="pt">コントロールを検索する座標を格納している <see cref="T:System.Drawing.Point" />。 座標は、コントロールのクライアント領域の左上隅に対する相対座標として表されます。</param>
        <param name="skipValue">特定の種類の子コントロールを無視するかどうかを決定する <see cref="T:System.Windows.Forms.GetChildAtPointSkip" /> の値の 1 つ。</param>
        <summary>特定の種類の子コントロールを無視するかどうかを指定して、指定した座標にある子コントロールを取得します。</summary>
        <returns>指定した座標にある子 <see cref="T:System.Windows.Forms.Control" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainerControl">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.IContainerControl GetContainerControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.IContainerControl GetContainerControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetContainerControl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.IContainerControl</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールの親チェインの 1 つ上の <see cref="T:System.Windows.Forms.ContainerControl" /> を返します。</summary>
        <returns>
          <see cref="T:System.Windows.Forms.IContainerControl" /> の親を表す <see cref="T:System.Windows.Forms.Control" />。</returns>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows to call this method. Associated enumeration: **languageKeyword tag is not supported!!!!**  
 value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <altmember cref="P:System.Windows.Forms.Control.Parent" />
        <altmember cref="T:System.Windows.Forms.ContainerControl" />
        <altmember cref="T:System.Windows.Forms.IContainerControl" />
      </Docs>
    </Member>
    <Member MemberName="GetNextControl">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control GetNextControl (System.Windows.Forms.Control ctl, bool forward);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Control GetNextControl(class System.Windows.Forms.Control ctl, bool forward) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetNextControl(System.Windows.Forms.Control,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctl" Type="System.Windows.Forms.Control" />
        <Parameter Name="forward" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="ctl">検索を開始する <see cref="T:System.Windows.Forms.Control" />。</param>
        <param name="forward">タブ オーダー内を前方に検索する場合は <see langword="true" />。後方に検索する場合は <see langword="false" />。</param>
        <summary>子コントロールのタブ オーダー内の 1 つ前または 1 つ後ろのコントロールを取得します。</summary>
        <returns>タブ オーダー内の次の <see cref="T:System.Windows.Forms.Control" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.GetNextControl%2A> メソッドは、タブ オーダーに依存します。 入れ子になったコントロールを含む、フォームのコントロールすべてを反復処理を使用して、 <xref:System.Windows.Forms.Control.Controls%2A> プロパティです。 を取得またはコンテナー コントロールのアクティブなコントロールを設定するには、使用、 <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.TabIndex" />
      </Docs>
    </Member>
    <Member MemberName="GetPreferredSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Size GetPreferredSize (System.Drawing.Size proposedSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.Size GetPreferredSize(valuetype System.Drawing.Size proposedSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="proposedSize" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="proposedSize">コントロールのカスタム サイズ領域。</param>
        <summary>コントロールが収まる四角形の領域のサイズを取得します。</summary>
        <returns>四角形の幅と高さを表す、順序を付与した <see cref="T:System.Drawing.Size" /> 型のペア。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 動作 <xref:System.Windows.Forms.Control.GetPreferredSize%2A> コントロールによって異なります。<xref:System.Windows.Forms.Control.LayoutEngine%2A> 、返されるサイズをコントロールに代入できない場合があります。 示されている制約よりも大きいサイズを返すことができます、 `proposedSize` パラメーターが、 `proposedSize` 減少するように制約が減少します。 たとえば、 `GetPreferredSize(new Size(100, 0))` よりも太くなってしないで `GetPreferredSize(new Size(200, 0))`します。 例外は、 `proposedSize` 0 または `Size.Empty`, 、制約として定義されています。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetScaledBounds">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Rectangle GetScaledBounds (System.Drawing.Rectangle bounds, System.Drawing.SizeF factor, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Drawing.Rectangle GetScaledBounds(valuetype System.Drawing.Rectangle bounds, valuetype System.Drawing.SizeF factor, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="factor" Type="System.Drawing.SizeF" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="bounds">ディスプレイの範囲の取得条件となる領域を指定する <see cref="T:System.Drawing.Rectangle" />。</param>
        <param name="factor">コントロールの境界の高さおよび幅。</param>
        <param name="specified">コントロールのサイズと位置を定義するときに使用するコントロールの境界を指定する <see cref="T:System.Windows.Forms.BoundsSpecified" /> の値の 1 つ。</param>
        <summary>コントロールのスケールが設定される境界を取得します。</summary>
        <returns>コントロールのスケールが設定される境界を表す <see cref="T:System.Drawing.Rectangle" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これはヘルパー メソッドによって呼び出される <xref:System.Windows.Forms.Control.ScaleControl%2A> コントロール スケールが設定される境界を取得します。 再利用するには、このメソッドをオーバーライドすることができます、 <xref:System.Windows.Forms.Control.ScaleControl%2A> スケーリングのロジックですが、独自の境界を指定する必要があります。 既定の実装は、考慮をスケール設定された境界を返す、 `specified` 境界、コントロールが最上位レベルであるかどうかどうか、コントロールが固定幅、または、\[自動サイズと任意の表示要素は、コントロールがあります。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
        <altmember cref="M:System.Windows.Forms.Control.Scale(System.Single)" />
        <altmember cref="P:System.Windows.Forms.Control.ScaleChildren" />
      </Docs>
    </Member>
    <Member MemberName="GetStyle">
      <MemberSignature Language="C#" Value="protected bool GetStyle (System.Windows.Forms.ControlStyles flag);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool GetStyle(valuetype System.Windows.Forms.ControlStyles flag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetStyle(System.Windows.Forms.ControlStyles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flag" Type="System.Windows.Forms.ControlStyles" />
      </Parameters>
      <Docs>
        <param name="flag">値を返す <see cref="T:System.Windows.Forms.ControlStyles" /> ビット。</param>
        <summary>コントロールの指定したコントロール スタイル ビットの値を取得します。</summary>
        <returns>指定したコントロール スタイル ビットが <see langword="true" /> に設定されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コントロール スタイル ビット フラグは、サポートされている動作を分類するために使用されます。 コントロールは、スタイルを有効に呼び出すことによって、<xref:System.Windows.Forms.Control.SetStyle%2A>メソッドと受け渡しを該当する<xref:System.Windows.Forms.ControlStyles>ビットとビットを設定するブール値。 指定したに割り当てられている値を決定する<xref:System.Windows.Forms.ControlStyles>ビットを使用して、<xref:System.Windows.Forms.Control.GetStyle%2A>メソッドを渡します、<xref:System.Windows.Forms.ControlStyles>を評価するメンバー。  
  
   
  
## 例  
 次のコード例で返されるダブル バッファリングの関連するスタイルの値のビットです、<xref:System.Windows.Forms.Form>です。 この例を返します`true`すべてのスタイル ビットが設定されている場合にのみ`true`です。  
  
 [!code-cpp[Windows.Forms.ControlMembers6\#4](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CPP/controlmembers6.cpp#4)]
 [!code-csharp[Windows.Forms.ControlMembers6\#4](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CS/controlmembers6.cs#4)]
 [!code-vb[Windows.Forms.ControlMembers6\#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/VB/controlmembers6.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.ControlStyles" />
      </Docs>
    </Member>
    <Member MemberName="GetTopLevel">
      <MemberSignature Language="C#" Value="protected bool GetTopLevel ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool GetTopLevel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetTopLevel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールがトップレベル コントロールかどうかを判断します。</summary>
        <returns>コントロールがトップレベル コントロールである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.SetTopLevel(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.GiveFeedbackEventHandler GiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.GiveFeedbackEventHandler GiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.GiveFeedback" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ドラッグ操作中に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.GiveFeedback> イベントは、ドラッグ アンド ドロップ操作が始まると発生します。<xref:System.Windows.Forms.Control.GiveFeedback> イベント、ドラッグ イベントのソースことができます、ドラッグ アンド ドロップ操作中にユーザーに視覚的フィードバックを提供するためにマウス ポインターの外観を変更しています。  
  
 ドラッグ アンド ドロップ操作関連のイベントがどのように、いつ発生するかについて次に示します。  
  
 <xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドは、現在のカーソル位置の下にあるコントロールを決定します。 コントロールが有効なドロップ先であるかどうかを確認します。  
  
 コントロールが有効なドロップ ターゲットである場合、 <xref:System.Windows.Forms.Control.GiveFeedback> ドラッグ アンド ドロップの効果が指定されたイベントが発生します。 ドラッグ アンド ドロップ効果の一覧については、<xref:System.Windows.Forms.DragDropEffects> 列挙体を参照してください。  
  
 マウス カーソルの位置、キーボードの状態、およびマウス ボタンの状態の変更が監視されます。  
  
-   ユーザーがウィンドウの外に移動した場合、<xref:System.Windows.Forms.Control.DragLeave> イベントが生成されます。  
  
-   マウスが別のコントロールに移動した場合は、そのコントロールの <xref:System.Windows.Forms.Control.DragEnter> が生成されます。  
  
-   マウスが移動しても同じコントロール内の場合は、<xref:System.Windows.Forms.Control.DragOver> イベントが生成されます。  
  
 キーボードまたはマウス ボタンの状態に変更がある場合、 <xref:System.Windows.Forms.Control.QueryContinueDrag> の値に基づいて、操作をキャンセルするか、イベントが生成され、データをドロップする、ドラッグを継続するかどうか、 <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> プロパティ、イベントの <xref:System.Windows.Forms.QueryContinueDragEventArgs>です。  
  
-   場合の値 <xref:System.Windows.Forms.DragAction> は `Continue`, 、 <xref:System.Windows.Forms.Control.DragOver> イベントは、操作を続行して、 <xref:System.Windows.Forms.Control.GiveFeedback> 適切な視覚的なフィードバックを設定できるように新しい効果イベントが発生します。 有効なドロップ効果の一覧については、<xref:System.Windows.Forms.DragDropEffects> 列挙体を参照してください。  
  
    > [!NOTE]
    >  <xref:System.Windows.Forms.Control.DragOver> と <xref:System.Windows.Forms.Control.GiveFeedback> イベントはペアになって、ユーザーがマウスの位置に関する最新のフィードバックを指定してドロップ ターゲット上でマウスを移動します。  
  
-   場合の値 <xref:System.Windows.Forms.DragAction> は `Drop`, 、ドロップ効果の値がソースに返される、元のアプリケーションは、ソース データに対して適切な操作を実行できるようになどのデータの切り取り、移動、操作だった場合。  
  
-   場合の値 <xref:System.Windows.Forms.DragAction> は `Cancel`, 、 <xref:System.Windows.Forms.Control.DragLeave> イベントが発生します。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 2 つのドラッグ アンド ドロップ操作を次のコード例に示します <xref:System.Windows.Forms.ListBox> コントロールです。 呼び出しの例、 <xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッド、ドラッグ操作の開始時にします。 マウスが移動した場合に、ドラッグ操作が開始以上 <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> 中にマウスの位置から、 <xref:System.Windows.Forms.Control.MouseDown> イベントです。<xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> メソッドを使用中にドラッグする項目のインデックスを確認して、 `MouseDown` イベントです。  
  
 例では、ドラッグ アンド ドロップ操作のカスタムのカーソルを使用しても示します。 必要と 2 つの例では、カーソル ファイル `3dwarro.cur` と `3dwno.cur`, 、カスタム ドラッグのアプリケーションのディレクトリに存在および非ドロップ カーソルの場合、それぞれします。 場合に使用されるカスタムのカーソル、 `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> がオンになっています。 カスタムのカーソルが設定されている、 <xref:System.Windows.Forms.Control.GiveFeedback> イベント ハンドラーです。  
  
 キーボードの状態を評価、 <xref:System.Windows.Forms.Control.DragOver> 右側のイベント ハンドラー `ListBox`, ドラッグ操作を決定するには、shift キーを押し、CTRL、alt キーを押し、または CTRL \+ ALT キーの状態に基づいています。 内の場所、 `ListBox`時にも決定されますが、ドロップが発生する可能性、 `DragOver` イベントです。 削除するデータがない場合、 `String`, 、 <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> に設定されている `None` で <xref:System.Windows.Forms.DragDropEffects>します。 削除の状態を表示する最後に、 `DropLocationLabel`<xref:System.Windows.Forms.Label>します。  
  
 右側にドロップするデータ `ListBox` で決定、 <xref:System.Windows.Forms.Control.DragDrop> イベント ハンドラーと `String` の適切な場所にある値を追加、 `ListBox`です。 ドラッグ操作が、フォームの境界の外側に移動しでドラッグ アンド ドロップ操作を取り消したかどうか、 <xref:System.Windows.Forms.Control.QueryContinueDrag> イベント ハンドラーです。  
  
 このコードの抜粋では、使用方法を示します、 <xref:System.Windows.Forms.Control.GiveFeedback> イベントです。 参照してください、 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 完全なコード例のメソッドです。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#3)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event EventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.GotFocus" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールがフォーカスを受け取ると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出して \(タブ、shift キーを押しながら TAB となど\) のキーボードを使用して、フォーカスを変更すると、 <xref:System.Windows.Forms.Control.Select%2A> または <xref:System.Windows.Forms.Control.SelectNextControl%2A> メソッドを設定したり、 <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=fullName> プロパティを現在のフォームは、次の順序でのフォーカス イベントが発生します。  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 フォーカスを変更すると、マウスを使用するか、呼び出すことによって、 <xref:System.Windows.Forms.Control.Focus%2A> メソッドでは、次の順序でのフォーカス イベントが発生します。  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.LostFocus>  
  
4.  <xref:System.Windows.Forms.Control.Leave>  
  
5.  <xref:System.Windows.Forms.Control.Validating>  
  
6.  <xref:System.Windows.Forms.Control.Validated>  
  
 場合、 <xref:System.Windows.Forms.Control.CausesValidation%2A> にプロパティが設定されている `false`, 、 <xref:System.Windows.Forms.Control.Validating> と <xref:System.Windows.Forms.Control.Validated> イベントが抑制されます。  
  
 **注** 、 <xref:System.Windows.Forms.Control.GotFocus> と <xref:System.Windows.Forms.Control.LostFocus> イベントは、低レベルのフォーカス イベント WM\_KILLFOCUS および WM\_SETFOCUS Windows メッセージに関連付けられています。 通常、 <xref:System.Windows.Forms.Control.GotFocus> と <xref:System.Windows.Forms.Control.LostFocus> イベントは、更新するときにのみ使用 <xref:System.Windows.Forms.UICues> またはカスタム コントロールを作成するとき。 代わりに、 <xref:System.Windows.Forms.Control.Enter> と <xref:System.Windows.Forms.Control.Leave> を除くすべてのコントロールのイベントを使用するか、 <xref:System.Windows.Forms.Form> クラスを使用して、 <xref:System.Windows.Forms.Form.Activated> と <xref:System.Windows.Forms.Form.Deactivate> イベントです。 詳細については、 <xref:System.Windows.Forms.Control.GotFocus> と <xref:System.Windows.Forms.Control.LostFocus> イベントを参照してください、 [WM\_SETFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms646283\(v=vs.85\).aspx)と[WM\_KILLFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx) トピックです。  
  
> [!CAUTION]
>  内からフォーカスを設定しないでください、 <xref:System.Windows.Forms.Control.Enter>, 、<xref:System.Windows.Forms.Control.GotFocus>, 、<xref:System.Windows.Forms.Control.Leave>, 、<xref:System.Windows.Forms.Control.LostFocus>, 、<xref:System.Windows.Forms.Control.Validating>, 、または <xref:System.Windows.Forms.Control.Validated> イベント ハンドラーです。 そうと、アプリケーションまたはオペレーティング システムが応答を停止することができます。 詳細については、次を参照してください。、 [WM\_KILLFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx) トピックです。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.Control.GotFocus> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。  
  
 このコード例を実行するから継承する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.Control>, など、 <xref:System.Windows.Forms.Button> または <xref:System.Windows.Forms.ComboBox>です。 インスタンスを名前 `Control1` イベント ハンドラーが関連付けられていることを確認し、 <xref:System.Windows.Forms.Control.GotFocus> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#47](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#47)]
 [!code-vb[System.Windows.Forms.EventExamples\#47](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#47)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.LostFocus" />
        <altmember cref="E:System.Windows.Forms.Control.Enter" />
        <altmember cref="E:System.Windows.Forms.Form.Activated" />
        <altmember cref="M:System.Windows.Forms.Form.Activate" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-515)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールのバインド先のウィンドウ ハンドルを取得します。</summary>
        <value>コントロールのウィンドウ ハンドル \(<see cref="T:System.IntPtr" />\) を格納する <see langword="HWND" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値、 <xref:System.Windows.Forms.Control.Handle%2A> プロパティは、Windows `HWND`します。 ハンドルが作成されていない場合は、このプロパティを参照する強制的にハンドルが作成します。  
  
   
  
## 例  
 次のコード例では、使用方法を示します、 <xref:System.Windows.Forms.ControlPaint.DrawFocusRectangle%2A?displayProperty=fullName> と <xref:System.Windows.Forms.Control.Handle%2A> プロパティです。 例を実行するには、次のコードをフォームに貼り付けます。 という名前の 2 つのボタンを追加 `Button1` と `Button2` をフォームにし、すべてのイベントは、それぞれのイベント ハンドラーに接続していることを確認します。  
  
 [!code-cpp[System.Windows.Forms.ControlPaint1\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaint1/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ControlPaint1\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaint1/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ControlPaint1\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlPaint1/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="HandleCreated">
      <MemberSignature Language="C#" Value="public event EventHandler HandleCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler HandleCreated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.HandleCreated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールに対してハンドルが作成されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ハンドルが作成されるときに、 <xref:System.Windows.Forms.Control> が最初に表示されます。 たとえば場合、 <xref:System.Windows.Forms.Control> が作成が <xref:System.Windows.Forms.Control.Visible%2A> に設定 `false`, 、 <xref:System.Windows.Forms.Control.HandleCreated> までイベントは発生しません <xref:System.Windows.Forms.Control.Visible%2A> に設定されている `true`します。  
  
 イベント処理の詳細については、次を参照してください。[クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.Control.HandleCreated> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行するから継承する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.Control>, など、 <xref:System.Windows.Forms.Button>または <xref:System.Windows.Forms.ComboBox>です。 インスタンスを名前 `Control1` イベント ハンドラーが関連付けられていることを確認し、 <xref:System.Windows.Forms.Control.HandleCreated> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#37](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#37)]
 [!code-vb[System.Windows.Forms.EventExamples\#37](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="HandleDestroyed">
      <MemberSignature Language="C#" Value="public event EventHandler HandleDestroyed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler HandleDestroyed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.HandleDestroyed" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールのハンドルが破棄されているときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 During the <xref:System.Windows.Forms.Control.HandleDestroyed> event, the control is still a valid Windows control and the <xref:System.Windows.Forms.Control.Handle%2A> can be recreated by calling the <xref:System.Windows.Forms.Control.RecreateHandle%2A> method.  
  
 For more information about handling events, see [Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f).  
  
   
  
## 例  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.HandleDestroyed> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.HandleDestroyed> event.  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#38](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#38)]
 [!code-vb[System.Windows.Forms.EventExamples\#38](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#38)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="HasChildren">
      <MemberSignature Language="C#" Value="public bool HasChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.HasChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールに 1 つ以上の子コントロールが格納されているかどうかを示す値を取得します。</summary>
        <value>コントロールに 1 つ以上の子コントロールが格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Windows.Forms.Control.Controls%2A> コレクションには、 <xref:System.Windows.Forms.Layout.ArrangedElementCollection.Count%2A> 0 より大きい、 <xref:System.Windows.Forms.Control.HasChildren%2A> が返される `true`です。 アクセス、 <xref:System.Windows.Forms.Control.HasChildren%2A> プロパティがの作成を強制していない、 <xref:System.Windows.Forms.Control.ControlCollection> 子コントロールがない場合は、そのためこのプロパティを参照することができますパフォーマンスが向上するコントロールのツリーを調べているときにします。  
  
   
  
## 例  
 次のコード例、 <xref:System.Windows.Forms.Control.BackColor%2A> と <xref:System.Windows.Forms.Control.ForeColor%2A> を既定のシステム カラー コントロールです。 コードを再帰的には、コントロールで子コントロールがある場合は自分自身を呼び出します。 このコード例は、 <xref:System.Windows.Forms.Form> には、少なくとも 1 つの子コントロールであると、子コンテナーを制御、このような <xref:System.Windows.Forms.Panel> または <xref:System.Windows.Forms.GroupBox>, 、独自の子コントロールが詳しく説明するため、再帰します。  
  
 [!code-cpp[Windows.Forms.Control Properties\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#1)]
 [!code-csharp[Windows.Forms.Control Properties\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#1)]
 [!code-vb[Windows.Forms.Control Properties\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Layout.ArrangedElementCollection.Count" />
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public int Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Height" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの高さを取得または設定します。</summary>
        <value>コントロールの高さ \(ピクセル単位\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 加えられた変更、 <xref:System.Windows.Forms.Control.Height%2A> と <xref:System.Windows.Forms.Control.Top%2A> プロパティの値を原因、 <xref:System.Windows.Forms.Control.Bottom%2A> を変更するコントロールのプロパティの値。  
  
> [!NOTE]
>  派生コントロールの高さの最小値 <xref:System.Windows.Forms.Splitter> 1 ピクセルです。 既定の高さ、 <xref:System.Windows.Forms.Splitter> コントロールは、次の 3 つのピクセルです。 高さの設定、 <xref:System.Windows.Forms.Splitter> 値へのより小さい値は既定の高さにプロパティ値をリセットいずれかを制御します。  
  
   
  
## 例  
 次のコード例では、3 つが作成されます <xref:System.Windows.Forms.Button> フォームのコントロールし、さまざまなサイズと場所関連プロパティを使用してそのサイズと場所を設定します。 この例である必要があります、 <xref:System.Windows.Forms.Form> を持つ幅と高さには、少なくとも 300 ピクセルです。  
  
 [!code-cpp[Windows.Forms.Control SizeLocation\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CPP/controlsizelocation.cpp#1)]
 [!code-csharp[Windows.Forms.Control SizeLocation\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CS/controlsizelocation.cs#1)]
 [!code-vb[Windows.Forms.Control SizeLocation\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/VB/controlsizelocation.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Bounds" />
        <altmember cref="P:System.Windows.Forms.Control.Width" />
        <altmember cref="P:System.Drawing.Size.Height" />
      </Docs>
    </Member>
    <Member MemberName="HelpRequested">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HelpEventHandler HelpRequested;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HelpEventHandler HelpRequested" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.HelpRequested" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HelpEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがコントロールのヘルプを要求すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.HelpRequested> 一般的イベントは、f1 キーを押したときにキーまたは関連する状況依存のヘルプ ボタンをクリックします。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例に示します処理、 <xref:System.Windows.Forms.Control.HelpRequested> 4 つのアドレス フィールドを表示するフォームにカスタム ヘルプ コンテンツを表示するイベントです。<xref:System.Windows.Forms.Control.HelpRequested> アドレス フィールドにフォーカスを持つ F1 キーを押すかして、状況依存のヘルプ\] ボタンを使用して、ヘルプ カーソル アドレス フィールドをクリックすると、イベントが発生します。<xref:System.Windows.Forms.HelpEventArgs.Handled%2A> プロパティが true に設定することを示すため、 `HelpRequested` イベントを処理します。 この例では、ヘルプ テキストを格納する、 <xref:System.Windows.Forms.Control.Tag%2A?displayProperty=fullName> プロパティです。  
  
 [!code-cpp[System.Windows.Forms.HelpEventHandler\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.HelpEventHandler/CPP/helpevent.cpp#1)]
 [!code-csharp[System.Windows.Forms.HelpEventHandler\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HelpEventHandler/CS/helpevent.cs#1)]
 [!code-vb[System.Windows.Forms.HelpEventHandler\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HelpEventHandler/VB/helpevent.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)" />
        <altmember cref="T:System.Windows.Forms.HelpProvider" />
        <altmember cref="T:System.Windows.Forms.Help" />
      </Docs>
    </Member>
    <Member MemberName="Hide">
      <MemberSignature Language="C#" Value="public void Hide ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Hide() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Hide" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールをユーザーに対して非表示にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コントロールを非表示に、同じことに、 <xref:System.Windows.Forms.Control.Visible%2A> プロパティを `false`します。 後に、 <xref:System.Windows.Forms.Control.Hide%2A> メソッドが呼び出される、 <xref:System.Windows.Forms.Control.Visible%2A> プロパティの値を返す `false` まで、 <xref:System.Windows.Forms.Control.Show%2A> メソッドが呼び出されます。  
  
   
  
## 例  
 次のコード例では、ボタンがクリックされたときに、CTRL キーが押された場合、ボタンが表示されません。 この例では、あることが必要です、 <xref:System.Windows.Forms.Button> という `button1` 上、 <xref:System.Windows.Forms.Form>です。  
  
 [!code-cpp[Windows.Forms.Control Members4\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#2)]
 [!code-csharp[Windows.Forms.Control Members4\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#2)]
 [!code-vb[Windows.Forms.Control Members4\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Visible" />
        <altmember cref="M:System.Windows.Forms.Control.Show" />
      </Docs>
    </Member>
    <Member MemberName="ImeMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImeMode ImeMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImeMode ImeMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ImeMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの IME \(Input Method Editor\) モードを取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ImeMode" /> の値の 1 つ。 既定値は、<see cref="F:System.Windows.Forms.ImeMode.Inherit" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 IME とは、標準キーボードを使用して複雑な文字と日本語の漢字などの記号を入力できるようにするプログラムです。<xref:System.Windows.Forms.Control.ImeMode%2A> プロパティ通常 <xref:System.Windows.Forms.ImeMode.Off?displayProperty=fullName> の <xref:System.Windows.Forms.TextBox> の目的は数値のみ入力するコントロール。<xref:System.Windows.Forms.Control.ImeMode%2A> にプロパティの値が設定されている <xref:System.Windows.Forms.ImeMode.NoControl?displayProperty=fullName> の <xref:System.Windows.Forms.Form> クラスです。  
  
 このプロパティの値を直接サポートして入力方式エディター、または、IME の直接の入力を許可するほとんどのクラスが設定されます <xref:System.Windows.Forms.ImeMode.NoControl>します。  
  
> [!IMPORTANT]
>  ユーザーが変更できる対話形式で、 <xref:System.Windows.Forms.Control.ImeMode%2A> にプログラムで設定されている場合を除き、 <xref:System.Windows.Forms.ImeMode.Disable?displayProperty=fullName>です。 この場合、ユーザーは IME を使用することできません。  
>   
>  <xref:System.Windows.Forms.Control.ImeMode%2A> グローバル入力モードが有効な場合、Windows 8 のプロパティは無視されます。 詳細については、次を参照してください。[Switch Text Input Changed from Per\-Thread to Per\-User](http://go.microsoft.com/fwlink/?LinkID=256509)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">割り当てられた値は、のいずれかではありません、 <see cref="T:System.Windows.Forms.ImeMode" /> 列挙値。</exception>
        <altmember cref="T:System.Windows.Forms.ImeMode" />
        <altmember cref="P:System.Windows.Forms.Control.DefaultImeMode" />
      </Docs>
    </Member>
    <Member MemberName="ImeModeBase">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.ImeMode ImeModeBase { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImeMode ImeModeBase" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ImeModeBase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの IME モードを取得または設定します。</summary>
        <value>コントロールの IME モード。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImeModeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ImeModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ImeModeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ImeModeChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.ImeMode" /> プロパティが変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、 <xref:System.Windows.Forms.Control.ImeMode%2A> プロパティを変更すると、プログラムの変更かとの対話でします。  
  
 入力メソッド マネージャーをサポートしないコントロールでは、イベントは発生しません。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例は、イベント ハンドラーを実行すると実行、 <xref:System.Windows.Forms.Control.Text%2A> プロパティ値が変更されます。<xref:System.Windows.Forms.Control> クラス名のパターンをいくつかの方法には *PropertyName*`Changed` いるときに発生、対応する *PropertyName* 値の変更 \(*PropertyName* 、対応するプロパティの名前を表します\)。  
  
 次のコードを変更する例、 <xref:System.Windows.Forms.Control.ForeColor%2A> の <xref:System.Windows.Forms.TextBox> データを表示します。 例では、文字列に変換する 10 進数と変更、 <xref:System.Windows.Forms.Control.ForeColor%2A> に <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> 負の値とする <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> 数値が正の場合。 この例は、 <xref:System.Windows.Forms.Form> を含む、 <xref:System.Windows.Forms.TextBox>です。  
  
 [!code-cpp[Windows.Forms.Control\_PropertyChangedEvents\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CPP/propertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control\_PropertyChangedEvents\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CS/propertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control\_PropertyChangedEvents\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/VB/propertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.ImeMode" />
        <altmember cref="T:System.Windows.Forms.ImeMode" />
      </Docs>
    </Member>
    <Member MemberName="InitLayout">
      <MemberSignature Language="C#" Value="protected virtual void InitLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.InitLayout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールが別のコンテナーに追加された後、呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.InitLayout%2A> コントロールをコンテナーに追加した直後に呼び出されます。<xref:System.Windows.Forms.Control.InitLayout%2A> メソッドは、そのコンテナーに基づいたレイアウト状態を初期化するためのコントロールを使用します。 たとえば、通常適用のアンカーとドッキングのコントロールに、 <xref:System.Windows.Forms.Control.InitLayout%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.InitLayout" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.InitLayout" /> method so that the control is displayed correctly.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.Control.Anchor" />
        <altmember cref="P:System.Windows.Forms.Control.Dock" />
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invalidate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールの表面全体を無効化して、コントロールを再描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す、 <xref:System.Windows.Forms.Control.Invalidate%2A> メソッドが同期の描画を求めません; には、同期の描画呼び出し、 <xref:System.Windows.Forms.Control.Update%2A> メソッドを呼び出した後、 <xref:System.Windows.Forms.Control.Invalidate%2A> メソッドです。 このメソッドはパラメーターなしで呼び出されると、クライアント領域全体が更新領域に追加されます。  
  
   
  
## 例  
 次のコード例によりイメージまたはイメージ ファイルをフォームにドラッグして、上の点で、表示するユーザーが削除されます。<xref:System.Windows.Forms.Control.OnPaint%2A> メソッドをオーバーライドして、フォームが描画されるたびに、イメージを再描画。 それ以外の場合イメージは、次回の再描画するまで存続はのみです。<xref:System.Windows.Forms.Control.DragEnter> イベント処理メソッドは、フォームにドラッグされているデータの種類を決定し、適切なフィードバックを提供します。<xref:System.Windows.Forms.Control.DragDrop> 場合、イベント処理メソッドが、フォームの画像を表示、 <xref:System.Drawing.Image> データから作成できます。<xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=fullName> と <xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=fullName> 値は、画面座標、例では、 <xref:System.Windows.Forms.Control.PointToClient%2A> をクライアント座標に変換するメソッドです。  
  
 [!code-cpp[Windows.Forms.Control.DragOperations\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CPP/imagedrag.cpp#1)]
 [!code-csharp[Windows.Forms.Control.DragOperations\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CS/imagedrag.cs#1)]
 [!code-vb[Windows.Forms.Control.DragOperations\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/VB/imagedrag.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Refresh" />
        <altmember cref="M:System.Windows.Forms.Control.Update" />
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate (bool invalidateChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate(bool invalidateChildren) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invalidate(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="invalidateChildren" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="invalidateChildren">コントロールの子コントロールを無効にする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>コントロールの特定の領域を無効にし、そのコントロールに描画メッセージを送信します。 オプションとして、そのコントロールに割り当てられている子コントロールも無効にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す、 <xref:System.Windows.Forms.Control.Invalidate%2A> メソッドが同期の描画を求めません; には、同期の描画呼び出し、 <xref:System.Windows.Forms.Control.Update%2A> メソッドを呼び出した後、 <xref:System.Windows.Forms.Control.Invalidate%2A> メソッドです。 このメソッドはパラメーターなしで呼び出されると、クライアント領域全体が更新領域に追加されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Refresh" />
        <altmember cref="M:System.Windows.Forms.Control.Update" />
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate (System.Drawing.Rectangle rc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate(valuetype System.Drawing.Rectangle rc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rc" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rc">無効化する領域を表す <see cref="T:System.Drawing.Rectangle" />。</param>
        <summary>コントロールの指定した領域を無効にし \(そのコントロールの次の描画操作で再描画される領域を示す更新領域に追加し\)、描画メッセージがそのコントロールに送信されるようにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す、 <xref:System.Windows.Forms.Control.Invalidate%2A> メソッドが同期の描画を求めません; には、同期の描画呼び出し、 <xref:System.Windows.Forms.Control.Update%2A> メソッドを呼び出した後、 <xref:System.Windows.Forms.Control.Invalidate%2A> メソッドです。 このメソッドはパラメーターなしで呼び出されると、クライアント領域全体が更新領域に追加されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Refresh" />
        <altmember cref="M:System.Windows.Forms.Control.Update" />
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate (System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate(class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="region">無効化する <see cref="T:System.Drawing.Region" />。</param>
        <summary>コントロールの指定した領域を無効にし \(そのコントロールの次の描画操作で再描画される領域を示す更新領域に追加し\)、描画メッセージがそのコントロールに送信されるようにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す、 <xref:System.Windows.Forms.Control.Invalidate%2A> メソッドが同期の描画を求めません; には、同期の描画呼び出し、 <xref:System.Windows.Forms.Control.Update%2A> メソッドを呼び出した後、 <xref:System.Windows.Forms.Control.Invalidate%2A> メソッドです。 このメソッドはパラメーターなしで呼び出されると、クライアント領域全体が更新領域に追加されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Refresh" />
        <altmember cref="M:System.Windows.Forms.Control.Update" />
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate (System.Drawing.Rectangle rc, bool invalidateChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate(valuetype System.Drawing.Rectangle rc, bool invalidateChildren) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rc" Type="System.Drawing.Rectangle" />
        <Parameter Name="invalidateChildren" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rc">無効化する領域を表す <see cref="T:System.Drawing.Rectangle" />。</param>
        <param name="invalidateChildren">コントロールの子コントロールを無効にする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>コントロールの指定した領域を無効にし \(そのコントロールの次の描画操作で再描画される領域を示す更新領域に追加し\)、描画メッセージがそのコントロールに送信されるようにします。 オプションとして、そのコントロールに割り当てられている子コントロールも無効にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す、 <xref:System.Windows.Forms.Control.Invalidate%2A> メソッドが同期の描画を求めません; には、同期の描画呼び出し、 <xref:System.Windows.Forms.Control.Update%2A> メソッドを呼び出した後、 <xref:System.Windows.Forms.Control.Invalidate%2A> メソッドです。 このメソッドはパラメーターなしで呼び出されると、クライアント領域全体が更新領域に追加されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Refresh" />
        <altmember cref="M:System.Windows.Forms.Control.Update" />
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate (System.Drawing.Region region, bool invalidateChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate(class System.Drawing.Region region, bool invalidateChildren) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
        <Parameter Name="invalidateChildren" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="region">無効化する <see cref="T:System.Drawing.Region" />。</param>
        <param name="invalidateChildren">コントロールの子コントロールを無効にする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>コントロールの指定した領域を無効にし \(そのコントロールの次の描画操作で再描画される領域を示す更新領域に追加し\)、描画メッセージがそのコントロールに送信されるようにします。 オプションとして、そのコントロールに割り当てられている子コントロールも無効にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す、 <xref:System.Windows.Forms.Control.Invalidate%2A> メソッドが同期の描画を求めません; には、同期の描画呼び出し、 <xref:System.Windows.Forms.Control.Update%2A> メソッドを呼び出した後、 <xref:System.Windows.Forms.Control.Invalidate%2A> メソッドです。 このメソッドはパラメーターなしで呼び出されると、クライアント領域全体が更新領域に追加されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Refresh" />
        <altmember cref="M:System.Windows.Forms.Control.Update" />
      </Docs>
    </Member>
    <Member MemberName="Invalidated">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.InvalidateEventHandler Invalidated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.InvalidateEventHandler Invalidated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Invalidated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.InvalidateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの表示に再描画が必要なときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.Control.Invalidated> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行するから継承する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.Control>, など、 <xref:System.Windows.Forms.Button> または <xref:System.Windows.Forms.ComboBox>です。 インスタンスを名前 `Control1` イベント ハンドラーが関連付けられていることを確認し、 <xref:System.Windows.Forms.Control.Invalidated> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#40](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#40)]
 [!code-vb[System.Windows.Forms.EventExamples\#40](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#40)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)" />
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invoke(System.Delegate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="method">コントロールのスレッド コンテキストで呼び出されるメソッドを格納しているデリゲート。</param>
        <summary>コントロールの基になるウィンドウ ハンドルを所有するスレッド上で、指定したデリゲートを実行します。</summary>
        <returns>呼び出されるデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 デリゲートは、C または C\+\+ 言語の関数ポインターに似ています。 デリゲートは、デリゲート オブジェクト内のメソッドへの参照をカプセル化します。 デリゲート オブジェクトは、参照先のメソッドを呼び出すコードに、渡すことが可能でありメソッドを呼び出していない既知コンパイル時にします。 C または C\+\+ での関数ポインターとは異なり、デリゲートはオブジェクト指向、タイプ セーフでより安全です。  
  
 <xref:System.Windows.Forms.Control.Invoke%2A> コントロールの親チェーン コントロールまたはウィンドウを含むフォームが見つかるまで上へのメソッドの検索は、現在のコントロールの基になるウィンドウ ハンドルがまだ存在しない場合を処理します。 適切なハンドルが見つからない場合、 <xref:System.Windows.Forms.Control.Invoke%2A> メソッドは例外をスローします。 呼び出し中に発生した例外は、呼び出し元に反映されます。  
  
> [!NOTE]
>  加え、 <xref:System.Windows.Forms.Control.InvokeRequired%2A> プロパティには、コントロールのスレッド セーフである 4 つのメソッドもあります: <xref:System.Windows.Forms.Control.Invoke%2A>, 、<xref:System.Windows.Forms.Control.BeginInvoke%2A>, 、<xref:System.Windows.Forms.Control.EndInvoke%2A>, 、および <xref:System.Windows.Forms.Control.CreateGraphics%2A> コントロールのハンドルが既に作成されている場合。 呼び出す <xref:System.Windows.Forms.Control.CreateGraphics%2A> コントロールのハンドルがバック グラウンド スレッドで作成される前に、可能性がありますバックします。 その他のすべてのメソッド呼び出しの invoke メソッドのいずれかを使用する必要があります、コントロールのスレッドへの呼び出しをマーシャ リングします。  
  
 デリゲートのインスタンスであることができます <xref:System.EventHandler>, 、その場合、sender パラメーターがこのコントロールを含むおよびイベント パラメーターが含まれます <xref:System.EventArgs.Empty?displayProperty=fullName>します。 デリゲートのインスタンスであることも <xref:System.Windows.Forms.MethodInvoker>, 、またはリストを受け取り、void パラメーターを他の任意のデリゲート。 呼び出し、 <xref:System.EventHandler> または <xref:System.Windows.Forms.MethodInvoker> デリゲートは別の型のデリゲートの呼び出しよりも速くなります。  
  
> [!NOTE]
>  メッセージを処理するスレッドがアクティブでなくなった場合、例外がスローされます。  
  
   
  
## 例  
 次のコード例では、デリゲートを格納しているコントロールを示します。 デリゲートは、リスト ボックスに項目を追加するメソッドをカプセル化し、このメソッドは、フォームの基になるハンドルを所有するスレッドで実行します。 ユーザーが、ボタンをクリックすると `Invoke` はデリゲートを実行します。  
  
 [!code-cpp[Control\_Invoke2\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_Invoke2/CPP/control_invoke2.cpp#1)]
 [!code-csharp[Control\_Invoke2\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_Invoke2/CS/control_invoke2.cs#1)]
 [!code-vb[Control\_Invoke2\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_Invoke2/VB/control_invoke2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MethodInvoker" />
        <altmember cref="P:System.Windows.Forms.Control.InvokeRequired" />
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invoke(System.Delegate,System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">
          <c>args</c> パラメーターに指定されている数および型と同じ数および型のパラメーターをとるメソッドへのデリゲート。</param>
        <param name="args">指定したメソッドに引数として渡すオブジェクトの配列。 メソッドが引数をとらない場合、このパラメーターは <see langword="null" /> にすることができます。</param>
        <summary>コントロールの基になるウィンドウ ハンドルを所有するスレッド上で、指定した引数リストを使用して、指定したデリゲートを実行します。</summary>
        <returns>呼び出されるデリゲートからの戻り値を格納する <see cref="T:System.Object" />。 デリゲートに戻り値がない場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 デリゲートは、C または C\+\+ 言語の関数ポインターに似ています。 デリゲートは、デリゲート オブジェクト内のメソッドへの参照をカプセル化します。 デリゲート オブジェクトは、参照先のメソッドを呼び出すコードに、渡すことが可能でありメソッドを呼び出していない既知コンパイル時にします。 C または C\+\+ での関数ポインターとは異なり、デリゲートはオブジェクト指向、タイプ セーフでより安全です。  
  
 コントロールのハンドルがまだ存在しない場合、このメソッドは、コントロールまたはウィンドウ ハンドルを持つフォームが見つかるまで、コントロールの親チェーンを検索します。 適切なハンドルが見つからない場合、このメソッドは例外をスローします。 呼び出し中に発生した例外は、呼び出し元に反映されます。  
  
> [!NOTE]
>  加え、 <xref:System.Windows.Forms.Control.InvokeRequired%2A> プロパティには、コントロールのスレッド セーフである 4 つのメソッドもあります: <xref:System.Windows.Forms.Control.Invoke%2A>, 、<xref:System.Windows.Forms.Control.BeginInvoke%2A>, 、<xref:System.Windows.Forms.Control.EndInvoke%2A>, 、および <xref:System.Windows.Forms.Control.CreateGraphics%2A> コントロールのハンドルが既に作成されている場合。 呼び出す <xref:System.Windows.Forms.Control.CreateGraphics%2A> コントロールのハンドルがバック グラウンド スレッドで作成される前に、可能性がありますバックします。 その他のすべてのメソッド呼び出しの invoke メソッドのいずれかを使用する必要があります、コントロールのスレッドへの呼び出しをマーシャ リングします。  
  
 デリゲートのインスタンスであることができます <xref:System.EventHandler>, 、その場合、sender パラメーターがこのコントロールを含むおよびイベント パラメーターが含まれます <xref:System.EventArgs.Empty?displayProperty=fullName>します。 デリゲートのインスタンスであることも <xref:System.Windows.Forms.MethodInvoker>, 、またはリストを受け取り、void パラメーターを他の任意のデリゲート。 呼び出し、 <xref:System.EventHandler> または <xref:System.Windows.Forms.MethodInvoker> デリゲートは別の型のデリゲートの呼び出しよりも速くなります。  
  
> [!NOTE]
>  メッセージを処理するスレッドがアクティブでなくなった場合、例外がスローされます。  
  
   
  
## 例  
 次のコード例では、デリゲートを格納しているコントロールを示します。 デリゲートは、リスト ボックスに項目を追加するメソッドをカプセル化し、このメソッドは、指定された引数を使用して、フォームの基になるハンドルを所有するスレッドで実行します。 ユーザーが、ボタンをクリックすると `Invoke` はデリゲートを実行します。  
  
 [!code-cpp[Control\_Invoke1\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_Invoke1/CPP/control_invoke1.cpp#1)]
 [!code-csharp[Control\_Invoke1\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_Invoke1/CS/control_invoke1.cs#1)]
 [!code-vb[Control\_Invoke1\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_Invoke1/VB/control_invoke1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MethodInvoker" />
        <altmember cref="P:System.Windows.Forms.Control.InvokeRequired" />
      </Docs>
    </Member>
    <Member MemberName="InvokeGotFocus">
      <MemberSignature Language="C#" Value="protected void InvokeGotFocus (System.Windows.Forms.Control toInvoke, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeGotFocus(class System.Windows.Forms.Control toInvoke, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.InvokeGotFocus(System.Windows.Forms.Control,System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toInvoke" Type="System.Windows.Forms.Control" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="toInvoke">イベントの割り当て先の <see cref="T:System.Windows.Forms.Control" />。</param>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>指定したコントロールの <see cref="E:System.Windows.Forms.Control.GotFocus" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.Forms.Control.GotFocus" />
        <altmember cref="M:System.Windows.Forms.Control.InvokeLostFocus(System.Windows.Forms.Control,System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="InvokeLostFocus">
      <MemberSignature Language="C#" Value="protected void InvokeLostFocus (System.Windows.Forms.Control toInvoke, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeLostFocus(class System.Windows.Forms.Control toInvoke, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.InvokeLostFocus(System.Windows.Forms.Control,System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toInvoke" Type="System.Windows.Forms.Control" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="toInvoke">イベントの割り当て先の <see cref="T:System.Windows.Forms.Control" />。</param>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>指定したコントロールの <see cref="E:System.Windows.Forms.Control.LostFocus" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.Forms.Control.LostFocus" />
        <altmember cref="M:System.Windows.Forms.Control.InvokeGotFocus(System.Windows.Forms.Control,System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="InvokeOnClick">
      <MemberSignature Language="C#" Value="protected void InvokeOnClick (System.Windows.Forms.Control toInvoke, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeOnClick(class System.Windows.Forms.Control toInvoke, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.InvokeOnClick(System.Windows.Forms.Control,System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toInvoke" Type="System.Windows.Forms.Control" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="toInvoke">
          <see cref="T:System.Windows.Forms.Control" /> イベントの割り当て先の <see cref="E:System.Windows.Forms.Control.Click" />。</param>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>指定したコントロールの <see cref="E:System.Windows.Forms.Control.Click" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokePaint">
      <MemberSignature Language="C#" Value="protected void InvokePaint (System.Windows.Forms.Control c, System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokePaint(class System.Windows.Forms.Control c, class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.InvokePaint(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Windows.Forms.Control" />
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="c">
          <see cref="T:System.Windows.Forms.Control" /> イベントの割り当て先の <see cref="E:System.Windows.Forms.Control.Paint" />。</param>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.PaintEventArgs" />。</param>
        <summary>指定したコントロールの <see cref="E:System.Windows.Forms.Control.Paint" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.Paint" />
      </Docs>
    </Member>
    <Member MemberName="InvokePaintBackground">
      <MemberSignature Language="C#" Value="protected void InvokePaintBackground (System.Windows.Forms.Control c, System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokePaintBackground(class System.Windows.Forms.Control c, class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.InvokePaintBackground(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Windows.Forms.Control" />
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="c">
          <see cref="T:System.Windows.Forms.Control" /> イベントの割り当て先の <see cref="E:System.Windows.Forms.Control.Paint" />。</param>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.PaintEventArgs" />。</param>
        <summary>指定したコントロールの <see langword="PaintBackground" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="InvokeRequired">
      <MemberSignature Language="C#" Value="public bool InvokeRequired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InvokeRequired" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.InvokeRequired" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>呼び出し元がコントロールの作成されたスレッドと異なるスレッド上にあるため、コントロールに対してメソッドの呼び出しを実行するときに、呼び出し元で invoke メソッドを呼び出す必要があるかどうかを示す値を取得します。</summary>
        <value>コントロールの <see langword="true" /> が、呼び出し元スレッドと異なるスレッド上で作成された \(invoke メソッドを通じてコントロールを呼び出す必要があることを示す\) 場合は <see cref="P:System.Windows.Forms.Control.Handle" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Windows フォームのコントロールは、特定のスレッドにバインドされ、スレッド セーフではありません。 そのため、別のスレッドからコントロールのメソッドを呼び出す場合使わなければなりませんのいずれかのコントロールの適切なスレッドへの呼び出しをマーシャ リングするメソッドを呼び出すことです。 このプロパティは、どのようなスレッドは、コントロールを所有しているがわからない場合に便利になる可能性が invoke メソッドを呼び出す必要があるかどうかを判断する使用できます。  
  
> [!NOTE]
>  加え、 <xref:System.Windows.Forms.Control.InvokeRequired%2A> プロパティには、コントロールのスレッドを安全に呼び出すには次の 4 つのメソッドもあります。 <xref:System.Windows.Forms.Control.Invoke%2A>,、<xref:System.Windows.Forms.Control.BeginInvoke%2A>, 、<xref:System.Windows.Forms.Control.EndInvoke%2A> と <xref:System.Windows.Forms.Control.CreateGraphics%2A> コントロールのハンドルが既に作成されている場合。 呼び出す <xref:System.Windows.Forms.Control.CreateGraphics%2A> コントロールのハンドルがバック グラウンド スレッドで作成される前に、可能性がありますバックします。 他のすべてのメソッド呼び出しのため、これらのいずれかを使用する必要があります別のスレッドからの呼び出し時にメソッドを呼び出します。  
  
 コントロールのハンドルがまだ存在しない場合 <xref:System.Windows.Forms.Control.InvokeRequired%2A> コントロールまたはウィンドウ ハンドルを持つフォームが見つかるまで、検索は、コントロールの親チェーンをセットアップします。 適切なハンドルが見つからない場合、 <xref:System.Windows.Forms.Control.InvokeRequired%2A> メソッドが返す `false`します。  
  
 つまり、この <xref:System.Windows.Forms.Control.InvokeRequired%2A>返すことができます `false` 場合 <xref:System.Windows.Forms.Control.Invoke%2A> は必要ありません \(呼び出しは同じスレッドで発生します\)、またはコントロールが別のスレッドで作成されましたが、コントロールのハンドルが作成されていない場合。  
  
 ここで、コントロールのハンドルがまだ作成されていない場合は、呼び出す必要はありません単にプロパティ、メソッド、またはイベント コントロールにします。 メッセージ ポンプのないスレッド上でコントロールが分離し、アプリケーションを不安定なバック グラウンド スレッド上に作成されるコントロールのハンドルがある可能性があります。  
  
 値を確認することも、このケースを防ぐことができます <xref:System.Windows.Forms.Control.IsHandleCreated%2A> と <xref:System.Windows.Forms.Control.InvokeRequired%2A> 返します `false` バック グラウンド スレッドでします。 コントロール ハンドルが作成されていない場合は、呼び出す前に作成されるまでを待機する必要があります <xref:System.Windows.Forms.Control.Invoke%2A> または <xref:System.Windows.Forms.Control.BeginInvoke%2A>です。 これは、バック グラウンド スレッドが、アプリケーションの主なフォームのコンス トラクターで作成された場合にのみ通常、\(ように `Application.Run(new MainForm())`, 、フォームが表示する前に、または `Application.Run` が呼び出されています。  
  
 1 つのソリューションでは、バック グラウンド スレッドを開始する前に、フォームのハンドルが作成されるまで待機します。 呼び出すことでハンドルが作成を強制するか、 <xref:System.Windows.Forms.Control.Handle%2A> プロパティ、または待機されるまで、 <xref:System.Windows.Forms.Form.Load> バック グラウンド プロセスを開始するイベントです。  
  
 優れたソリューションを使用して、 `SynchronizationContext` によって返される <xref:System.Threading.SynchronizationContext> スレッド間のマーシャ リングするためのコントロールではなく。  
  
> [!NOTE]
>  メッセージを処理するスレッドがアクティブでなくなった場合、例外がスローされます。  
  
 マルチ スレッドの Windows フォーム コントロールの詳細については、次を参照してください。 [方法: ファイルを検索するバック グラウンド スレッドを使用して](http://msdn.microsoft.com/ja-jp/7fe3956f-5b8f-4f78-8aae-c9eb0b28f13a) と [する方法: Windows フォーム コントロールのスレッド セーフな呼び出しの、](http://msdn.microsoft.com/ja-jp/138f38b6-1099-4fd5-910c-390b41cbad35)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)" />
        <altmember cref="M:System.Windows.Forms.Control.InvokeGotFocus(System.Windows.Forms.Control,System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.InvokeLostFocus(System.Windows.Forms.Control,System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.InvokeOnClick(System.Windows.Forms.Control,System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.InvokePaint(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.InvokePaintBackground(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="IsAccessible">
      <MemberSignature Language="C#" Value="public bool IsAccessible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAccessible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.IsAccessible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールがユーザー補助アプリケーションに表示されるかどうかを示す値を取得または設定します。</summary>
        <value>コントロールがユーザー補助アプリケーションに表示される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.AccessibleObject" />
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="public bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.IsDisposed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールが破棄されているかどうかを示す値を取得します。</summary>
        <value>コントロールが破棄されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを返す場合 `true`, 、コントロールの破棄され、有効な Windows コントロールとしては参照されなくなったことができます。 コントロールのインスタンスは破棄されてもまだで維持されるメモリ ガベージ コレクションによってメモリから削除されるまでです。 コントロールが破棄されるときに呼び出すことができない、 <xref:System.Windows.Forms.Control.RecreateHandle%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)" />
        <altmember cref="T:System.GC" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
      </Docs>
    </Member>
    <Member MemberName="IsHandleCreated">
      <MemberSignature Language="C#" Value="public bool IsHandleCreated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHandleCreated" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.IsHandleCreated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールにハンドルが関連付けられているかどうかを示す値を取得します。</summary>
        <value>コントロールにハンドルが関連付けられている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Windows.Forms.Control.IsHandleCreated%2A> プロパティを決定するかどうか <xref:System.Windows.Forms.Control.CreateHandle%2A> が呼び出されました。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="IsInputChar">
      <MemberSignature Language="C#" Value="protected virtual bool IsInputChar (char charCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsInputChar(char charCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.IsInputChar(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="charCode">テスト対象の文字。</param>
        <summary>文字が、コントロールによって認識される入力文字かどうかを判断します。</summary>
        <returns>文字をコントロールに直接送信する必要があり、プリプロセスしない場合は <see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す、 <xref:System.Windows.Forms.Control.IsInputChar%2A> で文字が指定されたかどうかを決定する方法、 `charCode` パラメーターは、コントロールが表示される入力文字です。 このメソッドは、指定した入力文字を前処理またはコントロールに直接送信されるかどうかを判断するウィンドウ メッセージのプリプロセス時に呼び出されます。 場合 <xref:System.Windows.Forms.Control.IsInputChar%2A> 返します `true`, 、指定した文字がコントロールに直接送信します。 場合 <xref:System.Windows.Forms.Control.IsInputChar%2A> 返します `false`, 、指定した文字が前処理されプリプロセス フェーズでそれを処理できない場合、コントロールにのみ送信します。 文字の処理には、文字が別のコントロールのニーモニックであるかどうかを確認が含まれます。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows for inheriting classes to call this method. Associated enumeration: **languageKeyword tag is not supported!!!!**  
 value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <altmember cref="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)" />
      </Docs>
    </Member>
    <Member MemberName="IsInputKey">
      <MemberSignature Language="C#" Value="protected virtual bool IsInputKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsInputKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">
          <see cref="T:System.Windows.Forms.Keys" /> 値のいずれか。</param>
        <summary>指定されているキーが、通常の入力キーであるか、またはプリプロセスを必要とする特殊なキーであるかを確認します。</summary>
        <returns>指定されているキーが通常の入力キーである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す、 <xref:System.Windows.Forms.Control.IsInputKey%2A> によってキー指定されているかどうかを決定する方法、 `keyData` パラメーターは、コントロールが入力のキー。 このメソッドは、指定した入力キーを前処理またはコントロールに直接送信されるかどうかを判断するウィンドウ メッセージのプリプロセス時に呼び出されます。 場合 <xref:System.Windows.Forms.Control.IsInputKey%2A> 返します `true`, 、指定したキーは、コントロールに直接送信します。 場合 <xref:System.Windows.Forms.Control.IsInputKey%2A> 返します `false`, 、指定したキーが前処理され、前処理中に処理できない場合、コントロールにのみ送信します。 前処理されたキーには、タブ、戻り値、esc キー、および上向き矢印、下矢印、左矢印および右矢印キーが含まれます。  
  
   
  
## 例  
 次のコード例は、オーバーライドする方法を示します、 <xref:System.Windows.Forms.Control.IsInputKey%2A> のメソッド、 <xref:System.Windows.Forms.TextBox> コントロールです。 この例では、 `TabTextBox` クラスは、TAB キーを処理します。 ときに、 `TabTextBox` にフォーカスがあるし、ユーザーは、選択したテキストを置き換える次の 4 つの空白を追加して、テキスト挿入ポイントで TAB キーを押します。 既定では、 <xref:System.Windows.Forms.TextBox> コントロールは、次のコントロールに入力フォーカスを移動して、TAB キーを処理します。 この場合、キーを押すに達しない、 <xref:System.Windows.Forms.Control.OnKeyDown%2A> メソッドのオーバーライドします。 この既定の動作を防ぐために、 <xref:System.Windows.Forms.Control.IsInputKey%2A> メソッドのオーバーライド `true` 、ユーザーが TAB キーを押したときです。 その他のすべてのキープレスの <xref:System.Windows.Forms.Control.IsInputKey%2A> メソッドのオーバーライドは基本クラスのバージョンのメソッドの呼び出しの結果を返します。  
  
 [!code-csharp[System.Windows.Forms.Control.IsInputKey\#0](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.IsInputKey/cs/form1.cs#0)]
 [!code-vb[System.Windows.Forms.Control.IsInputKey\#0](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.IsInputKey/vb/form1.vb#0)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows for inheriting classes to call this method. Associated enumeration: **languageKeyword tag is not supported!!!!**  
 value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <altmember cref="T:System.Windows.Forms.Keys" />
        <altmember cref="M:System.Windows.Forms.Control.IsInputChar(System.Char)" />
        <altmember cref="P:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyLocked">
      <MemberSignature Language="C#" Value="public static bool IsKeyLocked (System.Windows.Forms.Keys keyVal);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsKeyLocked(valuetype System.Windows.Forms.Keys keyVal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.IsKeyLocked(System.Windows.Forms.Keys)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyVal" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyVal">
          <see cref="T:System.Windows.Forms.Keys" /> 列挙体の CAPS LOCK、NUM LOCK、または SCROLL LOCK の各メンバー。</param>
        <summary>CapsLock、NumLock、または ScrollLock の各キーが有効かどうかを判断します。</summary>
        <returns>指定されたキーが有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Windows.Forms.Control.IsKeyLocked%2A> かどうかを CAPS LOCK、NUM LOCK、または SCROLLLOCK キー、かどうか個別にまたは組み合わせてプロパティです。  
  
   
  
## 例  
 次のコード例では、指定されたキー \(ここでは Caps Lock キー\) が有効かどうかを示すメッセージ ボックスが表示されます。  
  
 [!code-cpp[ControlIsKeyLocked\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ControlIsKeyLocked/CPP/controliskeylocked.cpp#1)]
 [!code-csharp[ControlIsKeyLocked\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ControlIsKeyLocked/CS/controliskeylocked.cs#1)]
 [!code-vb[ControlIsKeyLocked\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ControlIsKeyLocked/VB/controliskeylocked.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <paramref name="keyVal" /> パラメーターは CAPS LOCK、NUM LOCK、または SCROLLLOCK キー以外のキーを参照します。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsMirrored">
      <MemberSignature Language="C#" Value="public bool IsMirrored { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMirrored" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.IsMirrored" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールがミラー化されるかどうかを示す値を取得します。</summary>
        <value>コントロールがミラー化される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ミラー化されたコントロールには、レイアウトと右から左へテキストの両方が表示されます。 詳細については、「[How to: Create Mirrored Windows Forms and Controls](http://msdn.microsoft.com/ja-jp/7c5c4ecc-9bfb-4508-8383-753e306719b1)」を参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMnemonic">
      <MemberSignature Language="C#" Value="public static bool IsMnemonic (char charCode, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsMnemonic(char charCode, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.IsMnemonic(System.Char,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="charCode">テスト対象の文字。</param>
        <param name="text">検索対象の文字列。</param>
        <summary>指定した文字が、指定した文字列内のコントロールに割り当てられたニーモニック文字かどうかを確認します。</summary>
        <returns>
          <see langword="true" /> 文字が、コントロールに割り当てられたニーモニック文字である場合は <paramref name="charCode" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ニーモニック文字は、最初のインスタンスでの"&"の直後の文字、 <xref:System.String>です。  
  
   
  
## 例  
 次のコード例をオーバーライドする button クラスの拡張機能を示しています、 <xref:System.Windows.Forms.Control.ProcessMnemonic%2A> メソッドがカスタム動作。 この例では、使用についても示します、 <xref:System.Windows.Forms.Control.CanSelect%2A> と <xref:System.Windows.Forms.Control.IsMnemonic%2A> プロパティです。 実行には、この例は、同じファイル内のフォーム クラスを使用して、次のコードを貼り付けます。 型のボタンを追加する `MnemonicButton` をフォームにします。  
  
 [!code-cpp[System.Windows.Forms.ProcessMnemonic\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ProcessMnemonic/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ProcessMnemonic\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ProcessMnemonic/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ProcessMnemonic\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ProcessMnemonic/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows for inheriting classes to call this method. Associated enumeration: **languageKeyword tag is not supported!!!!**  
 value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <altmember cref="M:System.Windows.Forms.Control.ProcessMnemonic(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.KeyEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.KeyEventHandler KeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.KeyDown" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールにフォーカスがあるときにキーが押されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 重要なイベントは、次の順序で発生します。  
  
1.  <xref:System.Windows.Forms.Control.KeyDown>  
  
2.  <xref:System.Windows.Forms.Control.KeyPress>  
  
3.  <xref:System.Windows.Forms.Control.KeyUp>  
  
 フォーム レベルでのみキーボード イベントを処理し、キーボード イベントを受信するには、他のコントロール、設定、 <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=fullName> フォームのプロパティ <xref:System.Windows.Forms.Control.KeyPress> イベント処理メソッドを `true`します。 タブ、戻り値、esc キー、および矢印キーなどの特定のキーがコントロールによって自動的に処理されます。 これらのキーを発生させる、 <xref:System.Windows.Forms.Control.KeyDown> イベントがオーバーライドする必要があります、 <xref:System.Windows.Forms.Control.IsInputKey%2A> 、フォーム上の各コントロールのメソッドです。 コードのオーバーライドを <xref:System.Windows.Forms.Control.IsInputKey%2A> を 1 つの特殊なキーが押されたかどうかを判断しての値を返す必要があります `true`します。 オーバーライドする代わりに、 <xref:System.Windows.Forms.Control.IsInputKey%2A> 処理するメソッド、 <xref:System.Windows.Forms.Control.PreviewKeyDown> イベントと、 <xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A>プロパティを `true`します。 コード例については、 <xref:System.Windows.Forms.Control.PreviewKeyDown> イベントです。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Windows.Forms.Control.KeyDown> イベントをコントロールに入力した文字の種類を判断します。  
  
 [!code-cpp[Control.KeyDown\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.KeyEventArgs" />
        <altmember cref="T:System.Windows.Forms.KeyEventHandler" />
        <altmember cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
        <altmember cref="E:System.Windows.Forms.Control.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="KeyPress">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.KeyPressEventHandler KeyPress;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.KeyPressEventHandler KeyPress" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.KeyPress" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.KeyPressEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールにフォーカスがあるときに、文字、 スペース、または Backspace キーが押された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 重要なイベントは、次の順序で発生します。  
  
1.  <xref:System.Windows.Forms.Control.KeyDown>  
  
2.  <xref:System.Windows.Forms.Control.KeyPress>  
  
3.  <xref:System.Windows.Forms.Control.KeyUp>  
  
 <xref:System.Windows.Forms.Control.KeyPress> 領域とバック スペース以外の文字でないキーを使用してイベントは発生しません。 ただし、非文字キーも発生、 <xref:System.Windows.Forms.Control.KeyDown> と <xref:System.Windows.Forms.Control.KeyUp> イベントです。  
  
 使用して、 <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> プロパティ実行時に、使用するか、一般的なキーボード操作のサブセットを変更するサンプルのキーボード操作をします。  
  
 フォーム レベルでのみキーボード イベントを処理し、キーボード イベントを受信するには、他のコントロール、設定、 <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=fullName> フォームのプロパティ <xref:System.Windows.Forms.Control.KeyPress> イベント処理メソッドを `true`します。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Windows.Forms.Control.KeyPress> イベント文字をコントロールに入るを防ぐことができます。  
  
 [!code-cpp[Control.KeyDown\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyPressEventArgs.KeyChar" />
        <altmember cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.IsInputChar(System.Char)" />
        <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
        <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.KeyEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.KeyEventHandler KeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.KeyUp" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールにフォーカスがあるときにキーが離されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 重要なイベントは、次の順序で発生します。  
  
1.  <xref:System.Windows.Forms.Control.KeyDown>  
  
2.  <xref:System.Windows.Forms.Control.KeyPress>  
  
3.  <xref:System.Windows.Forms.Control.KeyUp>  
  
 フォーム レベルでのみキーボード イベントを処理し、キーボード イベントを受信するには、他のコントロール、設定、 <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=fullName> フォームのプロパティ <xref:System.Windows.Forms.Control.KeyPress> イベント処理メソッドを `true`します。 タブ、戻り値、esc キー、および矢印キーなどの特定のキーがコントロールによって自動的に処理されます。 これらのキーを発生させる、 <xref:System.Windows.Forms.Control.KeyUp> イベントがオーバーライドする必要があります、 <xref:System.Windows.Forms.Control.IsInputKey%2A> 、フォーム上の各コントロールのメソッドです。 コードのオーバーライドを <xref:System.Windows.Forms.Control.IsInputKey%2A> を 1 つの特殊なキーが押されたかどうかを判断しての値を返す必要があります `true`します。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Windows.Forms.Control.KeyUp> イベントと、 <xref:System.Windows.Forms.Help> をユーザーにポップアップ スタイルのヘルプを表示するクラス。  
  
 [!code-cpp[Control.KeyUp\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyUp/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyUp\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyUp/CS/form1.cs#1)]
 [!code-vb[Control.KeyUp\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyUp/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
      </Docs>
    </Member>
    <Member MemberName="Layout">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.LayoutEventHandler Layout;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.LayoutEventHandler Layout" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Layout" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LayoutEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの子コントロールの位置を変更する必要があるときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.Layout> イベントの子コントロールが追加または削除、およびその他の変更が発生すると、コントロールの変更の範囲は、コントロールのレイアウトに影響を受ける場合があるときに発生します。 使用して、レイアウト イベントを抑制することができます、 <xref:System.Windows.Forms.Control.SuspendLayout%2A> と <xref:System.Windows.Forms.Control.ResumeLayout%2A> メソッドです。 レイアウトを中断するには、コントロールでの変更のレイアウトを実行することがなく複数のアクションを実行することができます。 たとえば、サイズを変更するコントロールを移動する場合は、各操作が発生する <xref:System.Windows.Forms.Control.Layout> イベントです。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例センター、 <xref:System.Windows.Forms.Form> \] 画面で、 <xref:System.Windows.Forms.Control.Layout> イベントです。 これにより、ユーザーがサイズを変更して中央フォームが保持されます。 この例では、作成済みである必要があります、 <xref:System.Windows.Forms.Form> コントロールです。  
  
 [!code-cpp[Control.Layout\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Layout/CPP/layout.cpp#1)]
 [!code-csharp[Control.Layout\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Layout/CS/layout.cs#1)]
 [!code-vb[Control.Layout\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Layout/VB/layout.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.ResumeLayout" />
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
      </Docs>
    </Member>
    <Member MemberName="LayoutEngine">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.Layout.LayoutEngine LayoutEngine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Layout.LayoutEngine LayoutEngine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.LayoutEngine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Layout.LayoutEngine</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールのレイアウト エンジンのキャッシュ インスタンスを取得します。</summary>
        <value>コントロールの内容の <see cref="T:System.Windows.Forms.Layout.LayoutEngine" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.LayoutEngine%2A> プロパティは、コントロール自体ではなく、コントロールの子のレイアウト エンジンを取得します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Layout.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.ResumeLayout" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImageLayout" />
      </Docs>
    </Member>
    <Member MemberName="Leave">
      <MemberSignature Language="C#" Value="public event EventHandler Leave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Leave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Leave" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>入力フォーカスがコントロールを離れると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出して \(タブ、shift キーを押しながら TAB となど\) のキーボードを使用して、フォーカスを変更すると、 <xref:System.Windows.Forms.Control.Select%2A> または <xref:System.Windows.Forms.Control.SelectNextControl%2A> メソッドを設定したり、 <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=fullName> プロパティを現在のフォームは、次の順序でのフォーカス イベントが発生します。  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 フォーカスを変更すると、マウスを使用するか、呼び出すことによって、 <xref:System.Windows.Forms.Control.Focus%2A> メソッドでは、次の順序でのフォーカス イベントが発生します。  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.LostFocus>  
  
4.  <xref:System.Windows.Forms.Control.Leave>  
  
5.  <xref:System.Windows.Forms.Control.Validating>  
  
6.  <xref:System.Windows.Forms.Control.Validated>  
  
 場合、 <xref:System.Windows.Forms.Control.CausesValidation%2A> にプロパティが設定されている `false`, 、 <xref:System.Windows.Forms.Control.Validating> と <xref:System.Windows.Forms.Control.Validated> イベントが抑制されます。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.Control.Enter> と <xref:System.Windows.Forms.Control.Leave> によってイベントが抑制されます、 <xref:System.Windows.Forms.Form> クラスです。 内における等価なイベント、 <xref:System.Windows.Forms.Form> クラスは、 <xref:System.Windows.Forms.Form.Activated> と <xref:System.Windows.Forms.Form.Deactivate> イベントです。<xref:System.Windows.Forms.Control.Enter> と <xref:System.Windows.Forms.Control.Leave> イベント階層構造になってし、が、適切なコントロールに到達するまで、親チェーンを上下連鎖的です。 たとえば、前提としています、 <xref:System.Windows.Forms.Form> 2 つの <xref:System.Windows.Forms.GroupBox> コントロール、および各 <xref:System.Windows.Forms.GroupBox> コントロールには、1 つが <xref:System.Windows.Forms.TextBox> コントロールです。 1 つからキャレットを移動するとき <xref:System.Windows.Forms.TextBox> 、他の <xref:System.Windows.Forms.Control.Leave> に対してイベントが生成、 <xref:System.Windows.Forms.TextBox> と <xref:System.Windows.Forms.GroupBox>, 、および <xref:System.Windows.Forms.Control.Enter> イベントは、その他の <xref:System.Windows.Forms.GroupBox> と <xref:System.Windows.Forms.TextBox>です。  
  
> [!CAUTION]
>  内からフォーカスを設定しないでください、 <xref:System.Windows.Forms.Control.Enter>, 、<xref:System.Windows.Forms.Control.GotFocus>, 、<xref:System.Windows.Forms.Control.Leave>, 、<xref:System.Windows.Forms.Control.LostFocus>, 、<xref:System.Windows.Forms.Control.Validating>, 、または <xref:System.Windows.Forms.Control.Validated> イベント ハンドラーです。 そうと、アプリケーションまたはオペレーティング システムが応答を停止することができます。 詳細については、次を参照してください。、 [WM\_KILLFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx) トピックです。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Windows.Forms.Control.Leave> にコントロールを前の状態にリセットするイベントです。  
  
 [!code-cpp[Control.Enter\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Enter/CPP/form1.cpp#1)]
 [!code-csharp[Control.Enter\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Enter/CS/form1.cs#1)]
 [!code-vb[Control.Enter\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Enter/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.Enter" />
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public int Left { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Left" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Left" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの左端とコンテナーのクライアント領域の左端の間の距離をピクセルで取得または設定します。</summary>
        <value>
          <see cref="T:System.Int32" /> は、コントロールの左端とコンテナーのクライアント領域の左端の間の距離 \(ピクセル単位\) を示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.Left%2A> プロパティの値は、 <xref:System.Drawing.Point.X%2A?displayProperty=fullName> のプロパティ、 <xref:System.Windows.Forms.Control.Location%2A> コントロールのプロパティの値。  
  
 加えられた変更、 <xref:System.Windows.Forms.Control.Width%2A> と <xref:System.Windows.Forms.Control.Left%2A> プロパティの値を原因、 <xref:System.Windows.Forms.Control.Right%2A> を変更するコントロールのプロパティの値。  
  
   
  
## 例  
 次のコード例では、3 つが作成されます <xref:System.Windows.Forms.Button> フォームのコントロールし、さまざまなサイズと場所関連プロパティを使用してそのサイズと場所を設定します。 この例である必要があります、 <xref:System.Windows.Forms.Form> を持つ幅と高さには、少なくとも 300 ピクセルです。  
  
 [!code-cpp[Windows.Forms.Control SizeLocation\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CPP/controlsizelocation.cpp#1)]
 [!code-csharp[Windows.Forms.Control SizeLocation\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CS/controlsizelocation.cs#1)]
 [!code-vb[Windows.Forms.Control SizeLocation\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/VB/controlsizelocation.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Drawing.Point.X" />
        <altmember cref="P:System.Windows.Forms.Control.Right" />
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public System.Drawing.Point Location { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point Location" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Location" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンテナーの左上隅に対する相対座標として、コントロールの左上隅の座標を取得または設定します。</summary>
        <value>コントロールの左上隅をコンテナーの左上隅に対して相対的に表す <see cref="T:System.Drawing.Point" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Drawing.Point> クラスは、値型 \(`Structure` で [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)], 、`struct` で [!INCLUDE[csprcs](~/includes/csprcs-md.md)]\)、つまり、コントロールの左上隅の点のコピーを返すプロパティにアクセスする値によって返されます。 そのため、調整、 <xref:System.Drawing.Point.X%2A> または <xref:System.Drawing.Point.Y%2A> のプロパティ、 <xref:System.Drawing.Point> これから返されたプロパティには影響は、 <xref:System.Windows.Forms.Control.Left%2A>, 、<xref:System.Windows.Forms.Control.Right%2A>, 、<xref:System.Windows.Forms.Control.Top%2A>, 、または <xref:System.Windows.Forms.Control.Bottom%2A> 、コントロールのプロパティ値です。 これらのプロパティを個別に、各プロパティ値を設定したり、設定を調整する、 <xref:System.Windows.Forms.Control.Location%2A> プロパティを新しい <xref:System.Drawing.Point>します。  
  
 場合、 <xref:System.Windows.Forms.Control> は、 <xref:System.Windows.Forms.Form>, 、 <xref:System.Windows.Forms.Control.Location%2A> プロパティの値がの左上隅を表す、 <xref:System.Windows.Forms.Form> 画面座標でします。  
  
   
  
## 例  
 次のコード例を作成、 <xref:System.Windows.Forms.GroupBox> し、一部の一般的なプロパティを設定します。 例を作成し、 <xref:System.Windows.Forms.TextBox>設定とその <xref:System.Windows.Forms.Control.Location%2A> グループ ボックス内で。 次に、設定、 <xref:System.Windows.Forms.Control.Text%2A> グループ ボックス、およびフォームの上部に、グループ ボックス ドッキングのプロパティです。 グループ ボックスを無効にするには最後に、 <xref:System.Windows.Forms.Control.Enabled%2A> プロパティを `false`, 、それが原因で無効にするには、そのグループ ボックス内のすべてのコントロールです。  
  
 [!code-cpp[Windows.Forms.Control Properties\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#2)]
 [!code-csharp[Windows.Forms.Control Properties\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#2)]
 [!code-vb[Windows.Forms.Control Properties\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
        <altmember cref="T:System.Windows.Forms.ContainerControl" />
      </Docs>
    </Member>
    <Member MemberName="LocationChanged">
      <MemberSignature Language="C#" Value="public event EventHandler LocationChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LocationChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.LocationChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.Location" /> プロパティ値が変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、 <xref:System.Windows.Forms.Control.Location%2A> プロパティを変更すると、プログラムの変更かとの対話でします。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例を発生させる、 <xref:System.Windows.Forms.Control.LocationChanged> でイベントを <xref:System.Windows.Forms.StatusStrip> フォームがサイズ変更するとします。  
  
 [!code-csharp[System.Windows.Forms.LocationChanged\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.LocationChanged/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.LocationChanged\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.LocationChanged/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Location" />
      </Docs>
    </Member>
    <Member MemberName="LogicalToDeviceUnits">
      <MemberSignature Language="C#" Value="public int LogicalToDeviceUnits (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LogicalToDeviceUnits(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.LogicalToDeviceUnits(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">変換する論理値。</param>
        <summary>論理 DPI 値をその同等 DeviceUnit DPI 値に変換します。</summary>
        <returns>結果の DeviceUnit 値。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event EventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.LostFocus" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールがフォーカスを失ったときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出して \(タブ、shift キーを押しながら TAB となど\) のキーボードを使用して、フォーカスを変更すると、 <xref:System.Windows.Forms.Control.Select%2A> または <xref:System.Windows.Forms.Control.SelectNextControl%2A> メソッドを設定したり、 <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=fullName> プロパティを現在のフォームは、次の順序でのフォーカス イベントが発生します。  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 フォーカスを変更すると、マウスを使用するか、呼び出すことによって、 <xref:System.Windows.Forms.Control.Focus%2A> メソッドでは、次の順序でのフォーカス イベントが発生します。  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.LostFocus>  
  
4.  <xref:System.Windows.Forms.Control.Leave>  
  
5.  <xref:System.Windows.Forms.Control.Validating>  
  
6.  <xref:System.Windows.Forms.Control.Validated>  
  
 場合、 <xref:System.Windows.Forms.Control.CausesValidation%2A> にプロパティが設定されている `false`, 、 <xref:System.Windows.Forms.Control.Validating> と <xref:System.Windows.Forms.Control.Validated> イベントが抑制されます。  
  
 場合、 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> のプロパティ、 <xref:System.ComponentModel.CancelEventArgs> に設定されている `true` で、 <xref:System.Windows.Forms.Control.Validating> イベント デリゲート、後に通常発生するすべてのイベント、 <xref:System.Windows.Forms.Control.Validating> イベントが抑制されます。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.Control.GotFocus> と <xref:System.Windows.Forms.Control.LostFocus> イベントは、低レベルのフォーカス イベント WM\_KILLFOCUS および WM\_SETFOCUS Windows メッセージに関連付けられています。 通常、 <xref:System.Windows.Forms.Control.GotFocus> と <xref:System.Windows.Forms.Control.LostFocus> イベントは、更新するときにのみ使用 <xref:System.Windows.Forms.UICues> またはカスタム コントロールを作成するとき。 代わりに、 <xref:System.Windows.Forms.Control.Enter> と <xref:System.Windows.Forms.Control.Leave> を除くすべてのコントロールのイベントを使用するか、 <xref:System.Windows.Forms.Form> クラスを使用して、 <xref:System.Windows.Forms.Form.Activated> と <xref:System.Windows.Forms.Form.Deactivate> イベントです。 詳細については、 <xref:System.Windows.Forms.Control.GotFocus> と <xref:System.Windows.Forms.Control.LostFocus> イベントを参照してください、 [WM\_KILLFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx) と [WM\_KILLFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx) トピックです。  
  
> [!CAUTION]
>  内からフォーカスを設定しないでください、 <xref:System.Windows.Forms.Control.Enter>, 、<xref:System.Windows.Forms.Control.GotFocus>, 、<xref:System.Windows.Forms.Control.Leave>, 、<xref:System.Windows.Forms.Control.LostFocus>, 、<xref:System.Windows.Forms.Control.Validating>, 、または <xref:System.Windows.Forms.Control.Validated> イベント ハンドラーです。 そうと、アプリケーションまたはオペレーティング システムが応答を停止することができます。 詳細については、次を参照してください。、 [WM\_KILLFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx) トピックです。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、TextBox1 のテキストの検証を示します。 処理も紹介しています、 <xref:System.Windows.Forms.Control.LostFocus> イベントを設定して、 <xref:System.Windows.Forms.FileDialog.InitialDirectory%2A?displayProperty=fullName> TextBox1 でテキストのプロパティです。 使用しているコード例、 <xref:System.Windows.Forms.ErrorProvider.GetError%2A?displayProperty=fullName> ファイル\] ダイアログ ボックスを開く前にエラーを確認します。 この例を実行するを含むフォームに次のコードを貼り付け、 <xref:System.Windows.Forms.TextBox> という名前 `TextBox1`, 、 <xref:System.Windows.Forms.OpenFileDialog> という名前 `OpenFileDialog1`, 、 <xref:System.Windows.Forms.Button> という名前 `Button1`, 、および <xref:System.Windows.Forms.ErrorProvider> という名前 `ErrorProvider1`します。 すべてのイベントがイベント ハンドラーに関連付けられていることを確認します。  
  
 [!code-cpp[System.Windows.Forms.FileDialog\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CPP/filedialogform.cpp#2)]
 [!code-csharp[System.Windows.Forms.FileDialog\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CS/filedialogform.cs#2)]
 [!code-vb[System.Windows.Forms.FileDialog\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/VB/filedialogform.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.GotFocus" />
        <altmember cref="E:System.Windows.Forms.Control.Leave" />
        <altmember cref="E:System.Windows.Forms.Form.Deactivate" />
      </Docs>
    </Member>
    <Member MemberName="Margin">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Margin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Margin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Margin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロール間の空白を取得または設定します。</summary>
        <value>コントロール間の空白を表す <see cref="T:System.Windows.Forms.Padding" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コントロールの既定値が表示される <xref:System.Windows.Forms.Control.Margin%2A> Windows ユーザー インターフェイスのガイドラインの近くにある程度であります。 いくつかの調整は、特定のアプリケーションに必要な可能性があります。  
  
> [!NOTE]
>  設定、 <xref:System.Windows.Forms.Control.Margin%2A> ドッキングされたコントロールのプロパティは、コントロールからの距離に影響を与えません、コンテナーの端。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MarginChanged">
      <MemberSignature Language="C#" Value="public event EventHandler MarginChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MarginChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MarginChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールのマージンが変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.Control.MarginChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行するから継承する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.Control>, など、 <xref:System.Windows.Forms.Button> または <xref:System.Windows.Forms.ComboBox>です。 インスタンスを名前 `Control1` イベント ハンドラーが関連付けられていることを確認し、 <xref:System.Windows.Forms.Control.MarginChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#21](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#21)]
 [!code-vb[System.Windows.Forms.EventExamples\#21](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Size MaximumSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size MaximumSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.MaximumSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(typeof(System.Drawing.Size), "0, 0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)" /> が指定できる上限のサイズを取得または設定します。</summary>
        <value>四角形の幅と高さを表す、順序を付与した <see cref="T:System.Drawing.Size" /> 型のペア。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinimumSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Size MinimumSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size MinimumSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.MinimumSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)" /> が指定できる下限のサイズを取得または設定します。</summary>
        <value>四角形の幅と高さを表す、順序を付与した <see cref="T:System.Drawing.Size" /> 型のペア。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModifierKeys">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.Keys ModifierKeys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Forms.Keys ModifierKeys" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ModifierKeys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Keys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>どの修飾子キー \(Shift キー、Ctrl キーおよび Alt キー\) が押された状態であるかを示す値を取得します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.Keys" /> 値のビットごとの組み合わせ。 既定値は、<see cref="F:System.Windows.Forms.Keys.None" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例では、ボタンがクリックされたときに、CTRL キーが押されたときにボタンを非表示にします。 この例では、あることが必要です、 <xref:System.Windows.Forms.Button> という `button1` 上、 <xref:System.Windows.Forms.Form>です。  
  
 [!code-cpp[Windows.Forms.Control Members4\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#2)]
 [!code-csharp[Windows.Forms.Control Members4\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#2)]
 [!code-vb[Windows.Forms.Control Members4\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Keys" />
      </Docs>
    </Member>
    <Member MemberName="MouseButtons">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.MouseButtons MouseButtons { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Forms.MouseButtons MouseButtons" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.MouseButtons" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseButtons</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>どのマウス ボタンが押されている状態であるかを示す値を取得します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.MouseButtons" /> 列挙値のビットごとの組み合わせ。 既定値は、<see cref="F:System.Windows.Forms.MouseButtons.None" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.Control.BackColor%2A>, 、<xref:System.Windows.Forms.Control.RectangleToScreen%2A>, 、<xref:System.Windows.Forms.Control.PointToScreen%2A>, 、<xref:System.Windows.Forms.Control.MouseButtons%2A>, 、<xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=fullName>, 、および <xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=fullName> メンバーです。 例を実行するには、Form1 という名前のフォームに次のコードを貼り付けますいくつかのコントロールを格納しています。 この例で必要とする、 <xref:System.Windows.Forms.Control.MouseDown>, 、<xref:System.Windows.Forms.Control.MouseMove>, 、および <xref:System.Windows.Forms.Control.MouseUp> イベントは、この例で定義されているイベント ハンドラーに接続しています。  
  
 [!code-cpp[System.Windows.Forms.RectangleToScreen\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.RectangleToScreen\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.RectangleToScreen\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MouseButtons" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseCaptureChanged">
      <MemberSignature Language="C#" Value="public event EventHandler MouseCaptureChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MouseCaptureChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseCaptureChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールがマウスのキャプチャを失うと発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 まれなシナリオでは、予期しない入力を検出する必要があります。 たとえば、次のシナリオを検討してください。  
  
-   マウス操作中には、ユーザーは、Windows キーまたは ctrl キーを押しながら ESC キーを押して \[スタート\] メニューを開きます。  
  
-   マウス操作中に alt キーを押しながら TAB キーを押すユーザーが別のプログラムに切り替えます。  
  
-   マウス操作中には、別のプログラムは、ウィンドウまたはを現在のアプリケーションからフォーカスを受け取るメッセージ ボックスを表示します。  
  
 クリックし、フォームまたはコントロール上にマウス ポインターを保持しているマウス操作を含めることができますか、操作をドラッグする、マウスを実行します。 フォームを検出する必要があるか、コントロールがこれらのマウスのキャプチャを失った場合、関連する予期しないシナリオを使用できます、 <xref:System.Windows.Forms.Control.MouseCaptureChanged> イベントです。  
  
   
  
## 例  
 次のコード例を示しています、 <xref:System.Windows.Forms.Control.MouseCaptureChanged> イベントを <xref:System.Windows.Forms.Button> コントロールです。  
  
 [!code-csharp[System.Windows.Forms.Control.MouseCaptureChanged\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/system.windows.forms.control.mousecapturechanged/cs/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.MouseCaptureChanged\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.windows.forms.control.mousecapturechanged/vb/form1.vb#1)]  
  
 この例をテストするには、f5 キーを押して、デバッガーで実行します。 開いている、 **出力** Visual Studio のウィンドウのイベントが発生した場合を表示できるようにします。 クリックして、 <xref:System.Windows.Forms.Button> し、次の出力を確認します。  
  
 `button1_MouseDown`  
  
 `button1_MouseUp`  
  
 `button1_MouseCaptureChanged`  
  
 ここで、をクリックしマウスの左ボタンを押したまま、 <xref:System.Windows.Forms.Button> コントロールです。 まだ、マウスをクリックすると、中には、\[別のプログラムに切り替えるには、ALT \+ TAB キーを押します。 注意して、 <xref:System.Windows.Forms.Control.MouseCaptureChanged> 可能性のあるこのような状況を処理できるようにイベントが発生します。 自分の操作によって、 <xref:System.Windows.Forms.Control.MouseUp> イベントが発生しなくなります。 このテストは、Windows キーまたは ctrl キーを押しながら esc キーを試すこともできます。  
  
 `button1_MouseDown`  
  
 `button1_MouseCaptureChanged`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マウスでコントロールをクリックしたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コントロール上では、通常、カーソルとマウス ボタンを押すと、次の一連のコントロールからイベントを発生させます。  
  
1.  <xref:System.Windows.Forms.Control.MouseDown> イベント。  
  
2.  <xref:System.Windows.Forms.Control.Click> イベント。  
  
3.  <xref:System.Windows.Forms.Control.MouseClick> イベント。  
  
4.  <xref:System.Windows.Forms.Control.MouseUp> イベント。  
  
 この場合、コントロールのクラスでさまざまなイベントを無効にすることはできません。  
  
 2 つの単一回クリックすると十分な時間間隔で、ユーザーのオペレーティング システムのマウス設定では、 <xref:System.Windows.Forms.Control.MouseDoubleClick> 、2 つ目ではなくイベント <xref:System.Windows.Forms.Control.MouseClick> イベントです。  
  
> [!IMPORTANT]
>  <xref:System.Windows.Forms.Control.Click> イベントは、コントロールの論理的な上位レベルのイベントです。 このイベントは、コントロールにフォーカスがある場合は、ENTER キーを押すなどその他のアクションによって発生する多くの場合は。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.Control.MouseClick> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行するから継承する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.Control>, など、 <xref:System.Windows.Forms.Button> または <xref:System.Windows.Forms.ComboBox>です。 インスタンスを名前 `Control1` イベント ハンドラーが関連付けられていることを確認し、 <xref:System.Windows.Forms.Control.MouseClick> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#54](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#54)]
 [!code-vb[System.Windows.Forms.EventExamples\#54](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.MouseDoubleClick" />
        <altmember cref="E:System.Windows.Forms.Control.MouseDown" />
        <altmember cref="E:System.Windows.Forms.Control.MouseUp" />
        <altmember cref="E:System.Windows.Forms.Control.Click" />
        <altmember cref="E:System.Windows.Forms.Control.DoubleClick" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseDoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseDoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseDoubleClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マウスでコントロールをダブルクリックしたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.MouseDoubleClick> イベント、カーソルがコントロール上にあるときに、ユーザーが立て続けに 2 回のマウス ボタンがあるときに発生します。 ダブルクリックを 2 回のクリックを 1 つを区別する時間間隔については、ユーザーのオペレーティング システムのマウス設定によって決まります。  
  
 このようなユーザーの操作の実行時に、次の一連のイベントがコントロールによって発生します。  
  
1.  <xref:System.Windows.Forms.Control.MouseDown> イベント。  
  
2.  <xref:System.Windows.Forms.Control.Click> イベント。  
  
3.  <xref:System.Windows.Forms.Control.MouseClick> イベント。  
  
4.  <xref:System.Windows.Forms.Control.MouseUp> イベント。  
  
5.  <xref:System.Windows.Forms.Control.MouseDown> イベント。  
  
6.  <xref:System.Windows.Forms.Control.DoubleClick> イベント。  
  
7.  <xref:System.Windows.Forms.Control.MouseDoubleClick> イベント。  
  
8.  <xref:System.Windows.Forms.Control.MouseUp> イベント。  
  
 この場合、コントロールのクラスでさまざまなイベントを無効にすることはできません。  
  
> [!IMPORTANT]
>  <xref:System.Windows.Forms.Control.DoubleClick> イベントは、コントロールの論理的な上位レベルのイベントです。 ショートカット キーの組み合わせなど、他のユーザー アクションによって発生か可能性があります。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.Control.MouseDoubleClick> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行するから継承する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.Control>, など、 <xref:System.Windows.Forms.Button> または <xref:System.Windows.Forms.ComboBox>です。 インスタンスを名前 `Control1` イベント ハンドラーが関連付けられていることを確認し、 <xref:System.Windows.Forms.Control.MouseDoubleClick> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#55](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#55)]
 [!code-vb[System.Windows.Forms.EventExamples\#55](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#55)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.MouseClick" />
        <altmember cref="E:System.Windows.Forms.Control.DoubleClick" />
        <altmember cref="E:System.Windows.Forms.Control.Click" />
        <altmember cref="E:System.Windows.Forms.Control.MouseDoubleClick" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseDown" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マウス ポインターがコントロール上にあり、マウス ボタンがクリックされると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 マウス イベントは次の順序で発生します。  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> \/ <xref:System.Windows.Forms.Control.MouseDown> \/ <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
> [!NOTE]
>  次のイベントは発生しません、 <xref:System.Windows.Forms.TabControl> クラスには、少なくとも 1 つを使用する必要がある場合を除き、 <xref:System.Windows.Forms.TabPage> で、 <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=fullName> コレクション: <xref:System.Windows.Forms.Control.Click>, 、<xref:System.Windows.Forms.Control.DoubleClick>, 、<xref:System.Windows.Forms.Control.MouseDown>, 、<xref:System.Windows.Forms.Control.MouseUp>, 、<xref:System.Windows.Forms.Control.MouseHover>, 、<xref:System.Windows.Forms.Control.MouseEnter>, 、<xref:System.Windows.Forms.Control.MouseLeave> と <xref:System.Windows.Forms.Control.MouseMove>です。 少なくとも 1 つを使用する必要がある場合 <xref:System.Windows.Forms.TabPage> 、コレクションのタブ コントロールのヘッダーを持つユーザーが操作して \(ここで、 <xref:System.Windows.Forms.TabPage> 名前が表示されます\)、 <xref:System.Windows.Forms.TabControl> 適切なイベントを発生させます。 ただし、ユーザーとの対話がタブ ページのクライアント領域内にある場合、 <xref:System.Windows.Forms.TabPage> 適切なイベントを発生させます。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例に示しますにマウスのパスを描画する別のマウス イベントを使用して、 <xref:System.Windows.Forms.Panel>です。 直線セグメントを追加、 <xref:System.Drawing.Drawing2D.GraphicsPath> 各 <xref:System.Windows.Forms.Control.MouseMove> と <xref:System.Windows.Forms.Control.MouseDown> 発生するイベントです。 グラフィックスを更新する、 <xref:System.Windows.Forms.Control.Invalidate%2A> メソッドが呼び出される、 <xref:System.Windows.Forms.Panel> 各 `MouseDown` と `MouseUp` イベントです。 さらに、グラフィックのパスがいつ上下にスクロールされる基準、 <xref:System.Windows.Forms.Control.MouseWheel> イベントが発生します。 その他のマウス イベントと同様に <xref:System.Windows.Forms.Control.MouseHover>, 、画面で識別されます。 詳細については、マウスで画面にも表示されますが、 <xref:System.Windows.Forms.SystemInformation> クラスです。  
  
 [!code-cpp[System.Windows.Forms.MouseEvent\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CPP/mouseeventexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.MouseEvent\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CS/mouseeventexample.cs#1)]
 [!code-vb[System.Windows.Forms.MouseEvent\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/VB/mouseeventexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.MouseClick" />
        <altmember cref="E:System.Windows.Forms.Control.MouseUp" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event EventHandler MouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseEnter" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マウス ポインターによってコントロールが入力されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 マウス イベントは次の順序で発生します。  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> \/ <xref:System.Windows.Forms.Control.MouseDown> \/ <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
> [!NOTE]
>  次のイベントは発生しません、 <xref:System.Windows.Forms.TabControl> クラスには、少なくとも 1 つを使用する必要がある場合を除き、 <xref:System.Windows.Forms.TabPage> で、 <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=fullName> コレクション: <xref:System.Windows.Forms.Control.Click>, 、<xref:System.Windows.Forms.Control.DoubleClick>, 、<xref:System.Windows.Forms.Control.MouseDown>, 、<xref:System.Windows.Forms.Control.MouseUp>, 、<xref:System.Windows.Forms.Control.MouseHover>, 、<xref:System.Windows.Forms.Control.MouseEnter>, 、<xref:System.Windows.Forms.Control.MouseLeave> と <xref:System.Windows.Forms.Control.MouseMove>です。 少なくとも 1 つを使用する必要がある場合 <xref:System.Windows.Forms.TabPage> 、コレクションのタブ コントロールのヘッダーを持つユーザーが操作して \(ここで、 <xref:System.Windows.Forms.TabPage> 名前が表示されます\)、 <xref:System.Windows.Forms.TabControl> 適切なイベントを発生させます。 ただし、ユーザーとの対話がタブ ページのクライアント領域内にある場合、 <xref:System.Windows.Forms.TabPage> 適切なイベントを発生させます。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例に示しますにマウスのパスを描画する別のマウス イベントを使用して、 <xref:System.Windows.Forms.Panel>です。 直線セグメントを追加、 <xref:System.Drawing.Drawing2D.GraphicsPath> 各 <xref:System.Windows.Forms.Control.MouseMove> と <xref:System.Windows.Forms.Control.MouseDown> 発生するイベントです。 グラフィックスを更新する、 <xref:System.Windows.Forms.Control.Invalidate%2A> メソッドが呼び出される、 <xref:System.Windows.Forms.Panel> 各 `MouseDown` と `MouseUp` イベントです。 さらに、グラフィックのパスがいつ上下にスクロールされる基準、 <xref:System.Windows.Forms.Control.MouseWheel> イベントが発生します。 その他のマウス イベントと同様に <xref:System.Windows.Forms.Control.MouseHover>, 、画面で識別されます。 詳細については、マウスで画面にも表示されますが、 <xref:System.Windows.Forms.SystemInformation> クラスです。  
  
 [!code-cpp[System.Windows.Forms.MouseEvent\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CPP/mouseeventexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.MouseEvent\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CS/mouseeventexample.cs#1)]
 [!code-vb[System.Windows.Forms.MouseEvent\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/VB/mouseeventexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.MouseLeave" />
        <altmember cref="E:System.Windows.Forms.Control.MouseHover" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseHover">
      <MemberSignature Language="C#" Value="public event EventHandler MouseHover;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MouseHover" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseHover" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マウス ポインターをコントロールの上に重ねると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一般的な使用 <xref:System.Windows.Forms.Control.MouseHover> コントロール \(「静止領域」\) を囲む指定された領域内のコントロールでマウスを置いたときに、ツール ヒントを表示することです。 このイベントが発生するのに必要な一時停止が、ミリ秒単位で指定されている、 <xref:System.Windows.Forms.SystemInformation.MouseHoverTime%2A> プロパティです。  
  
 <xref:System.Windows.Forms.Control.MouseHover> イベントが定義され、検出に関連して、 <xref:System.Windows.Forms.SystemInformation.MouseHoverSize%2A> と <xref:System.Windows.Forms.SystemInformation.MouseHoverTime%2A> プロパティです。  
  
 マウス イベントは次の順序で発生します。  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> \/ <xref:System.Windows.Forms.Control.MouseDown> \/ <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
> [!NOTE]
>  次のイベントは発生しません、 <xref:System.Windows.Forms.TabControl> クラスには、少なくとも 1 つを使用する必要がある場合を除き、 <xref:System.Windows.Forms.TabPage> で、 <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=fullName> コレクション: <xref:System.Windows.Forms.Control.Click>, 、<xref:System.Windows.Forms.Control.DoubleClick>, 、<xref:System.Windows.Forms.Control.MouseDown>, 、<xref:System.Windows.Forms.Control.MouseUp>, 、<xref:System.Windows.Forms.Control.MouseHover>, 、<xref:System.Windows.Forms.Control.MouseEnter>, 、<xref:System.Windows.Forms.Control.MouseLeave> と <xref:System.Windows.Forms.Control.MouseMove>です。 少なくとも 1 つを使用する必要がある場合 <xref:System.Windows.Forms.TabPage> 、コレクションのタブ コントロールのヘッダーを持つユーザーが操作して \(ここで、 <xref:System.Windows.Forms.TabPage> 名前が表示されます\)、 <xref:System.Windows.Forms.TabControl> 適切なイベントを発生させます。 ただし、ユーザーとの対話がタブ ページのクライアント領域内にある場合、 <xref:System.Windows.Forms.TabPage> 適切なイベントを発生させます。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例に示しますにマウスのパスを描画する別のマウス イベントを使用して、 <xref:System.Windows.Forms.Panel>です。 直線セグメントを追加、 <xref:System.Drawing.Drawing2D.GraphicsPath> 各 <xref:System.Windows.Forms.Control.MouseMove> と <xref:System.Windows.Forms.Control.MouseDown> 発生するイベントです。 グラフィックスを更新する、 <xref:System.Windows.Forms.Control.Invalidate%2A> メソッドが呼び出される、 <xref:System.Windows.Forms.Panel> 各 `MouseDown` と `MouseUp` イベントです。 さらに、グラフィックのパスがいつ上下にスクロールされる基準、 <xref:System.Windows.Forms.Control.MouseWheel> イベントが発生します。 その他のマウス イベントと同様に <xref:System.Windows.Forms.Control.MouseHover>, 、画面で識別されます。 詳細については、マウスで画面にも表示されますが、 <xref:System.Windows.Forms.SystemInformation> クラスです。  
  
 [!code-cpp[System.Windows.Forms.MouseEvent\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CPP/mouseeventexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.MouseEvent\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CS/mouseeventexample.cs#1)]
 [!code-vb[System.Windows.Forms.MouseEvent\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/VB/mouseeventexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.SystemInformation.MouseHoverTime" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event EventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseLeave" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マウス ポインターがコントロールを離れると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 マウス イベントは次の順序で発生します。  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> \/ <xref:System.Windows.Forms.Control.MouseDown> \/ <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
> [!NOTE]
>  次のイベントは発生しません、 <xref:System.Windows.Forms.TabControl> クラスには、少なくとも 1 つを使用する必要がある場合を除き、 <xref:System.Windows.Forms.TabPage> で、 <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=fullName> コレクション: <xref:System.Windows.Forms.Control.Click>, 、<xref:System.Windows.Forms.Control.DoubleClick>, 、<xref:System.Windows.Forms.Control.MouseDown>, 、<xref:System.Windows.Forms.Control.MouseUp>, 、<xref:System.Windows.Forms.Control.MouseHover>, 、<xref:System.Windows.Forms.Control.MouseEnter>, 、<xref:System.Windows.Forms.Control.MouseLeave> と <xref:System.Windows.Forms.Control.MouseMove>です。 少なくとも 1 つを使用する必要がある場合 <xref:System.Windows.Forms.TabPage> 、コレクションのタブ コントロールのヘッダーを持つユーザーが操作して \(ここで、 <xref:System.Windows.Forms.TabPage> 名前が表示されます\)、 <xref:System.Windows.Forms.TabControl> 適切なイベントを発生させます。 ただし、ユーザーとの対話がタブ ページのクライアント領域内にある場合、 <xref:System.Windows.Forms.TabPage> 適切なイベントを発生させます。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例に示しますにマウスのパスを描画する別のマウス イベントを使用して、 <xref:System.Windows.Forms.Panel>です。 直線セグメントを追加、 <xref:System.Drawing.Drawing2D.GraphicsPath> 各 <xref:System.Windows.Forms.Control.MouseMove> と <xref:System.Windows.Forms.Control.MouseDown> 発生するイベントです。 グラフィックスを更新する、 <xref:System.Windows.Forms.Control.Invalidate%2A> メソッドが呼び出される、 <xref:System.Windows.Forms.Panel> 各 `MouseDown` と `MouseUp` イベントです。 さらに、グラフィックのパスがいつ上下にスクロールされる基準、 <xref:System.Windows.Forms.Control.MouseWheel> イベントが発生します。 その他のマウス イベントと同様に <xref:System.Windows.Forms.Control.MouseHover>, 、画面で識別されます。 詳細については、マウスで画面にも表示されますが、 <xref:System.Windows.Forms.SystemInformation> クラスです。  
  
 [!code-cpp[System.Windows.Forms.MouseEvent\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CPP/mouseeventexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.MouseEvent\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CS/mouseeventexample.cs#1)]
 [!code-vb[System.Windows.Forms.MouseEvent\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/VB/mouseeventexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseMove" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マウス ポインターがコントロール上を移動すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一般的な用途 <xref:System.Windows.Forms.Control.MouseMove> はコントロールの色を変更するか、コントロールの周囲の発生した四角形を描画します。  
  
 マウス イベントは次の順序で発生します。  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> \/ <xref:System.Windows.Forms.Control.MouseDown> \/ <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
> [!NOTE]
>  次のイベントは発生しません、 <xref:System.Windows.Forms.TabControl> クラスには、少なくとも 1 つを使用する必要がある場合を除き、 <xref:System.Windows.Forms.TabPage> で、 <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=fullName> コレクション: <xref:System.Windows.Forms.Control.Click>, 、<xref:System.Windows.Forms.Control.DoubleClick>, 、<xref:System.Windows.Forms.Control.MouseDown>, 、<xref:System.Windows.Forms.Control.MouseUp>, 、<xref:System.Windows.Forms.Control.MouseHover>, 、<xref:System.Windows.Forms.Control.MouseEnter>, 、<xref:System.Windows.Forms.Control.MouseLeave> と <xref:System.Windows.Forms.Control.MouseMove>です。 少なくとも 1 つを使用する必要がある場合 <xref:System.Windows.Forms.TabPage> 、コレクションのタブ コントロールのヘッダーを持つユーザーが操作して \(ここで、 <xref:System.Windows.Forms.TabPage> 名前が表示されます\)、 <xref:System.Windows.Forms.TabControl> 適切なイベントを発生させます。 ただし、ユーザーとの対話がタブ ページのクライアント領域内にある場合、 <xref:System.Windows.Forms.TabPage> 適切なイベントを発生させます。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例に示しますにマウスのパスを描画する別のマウス イベントを使用して、 <xref:System.Windows.Forms.Panel>です。 直線セグメントを追加、 <xref:System.Drawing.Drawing2D.GraphicsPath> 各 <xref:System.Windows.Forms.Control.MouseMove> と <xref:System.Windows.Forms.Control.MouseDown> 発生するイベントです。 グラフィックスを更新する、 <xref:System.Windows.Forms.Control.Invalidate%2A> メソッドが呼び出される、 <xref:System.Windows.Forms.Panel> 各 `MouseDown` と `MouseUp` イベントです。 さらに、グラフィックのパスがいつ上下にスクロールされる基準、 <xref:System.Windows.Forms.Control.MouseWheel> イベントが発生します。 その他のマウス イベントと同様に <xref:System.Windows.Forms.Control.MouseHover>, 、画面で識別されます。 詳細については、マウスで画面にも表示されますが、 <xref:System.Windows.Forms.SystemInformation> クラスです。  
  
 [!code-cpp[System.Windows.Forms.MouseEvent\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CPP/mouseeventexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.MouseEvent\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CS/mouseeventexample.cs#1)]
 [!code-vb[System.Windows.Forms.MouseEvent\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/VB/mouseeventexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MousePosition">
      <MemberSignature Language="C#" Value="public static System.Drawing.Point MousePosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Drawing.Point MousePosition" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.MousePosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マウス カーソルの位置を画面座標で取得します。</summary>
        <value>画面の左上隅に対する相対座標として、マウス カーソルの座標を格納している <see cref="T:System.Drawing.Point" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.MousePosition%2A> プロパティを返します。、 <xref:System.Drawing.Point> プロパティの参照時にマウス カーソルの位置を表します。 座標は、コントロール、相対的ではない、画面上の位置を示し、コントロール上でカーソルが配置されているかどうかに関係なく返されます。 画面の左上隅の座標は、0, 0 です。  
  
 <xref:System.Windows.Forms.Control.MousePosition%2A> プロパティと同じ、 <xref:System.Windows.Forms.Cursor.Position%2A?displayProperty=fullName> プロパティです。  
  
   
  
## 例  
 次のコード例、 <xref:System.Windows.Forms.TreeNode> ラベルはツリーのノード上にマウス カーソルがあるときに ALT キーを押しながら E キーを押しを押したときに編集可能な状態にします。 ユーザーが完了したら、ラベルを編集するには、ラベルは編集できませんもう一度再 alt キーを押しながら E キーの組み合わせが押されるまでです。 この例である必要があります、 <xref:System.Windows.Forms.TreeView> 上、 <xref:System.Windows.Forms.Form>です。 ツリー ビューを少なくとも 1 つ含んでいるも <xref:System.Windows.Forms.TreeNode> でその <xref:System.Windows.Forms.TreeView.Nodes%2A> コレクションです。  
  
 [!code-cpp[Windows.Forms.Control Members4\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#3)]
 [!code-csharp[Windows.Forms.Control Members4\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#3)]
 [!code-vb[Windows.Forms.Control Members4\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Point" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseUp" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マウス ポインターがコントロール上にあり、マウス ボタンが離されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 マウス イベントは次の順序で発生します。  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> \/ <xref:System.Windows.Forms.Control.MouseDown> \/ <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
> [!NOTE]
>  次のイベントは発生しません、 <xref:System.Windows.Forms.TabControl> クラスには、少なくとも 1 つを使用する必要がある場合を除き、 <xref:System.Windows.Forms.TabPage> で、 <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=fullName> コレクション: <xref:System.Windows.Forms.Control.Click>, 、<xref:System.Windows.Forms.Control.DoubleClick>, 、<xref:System.Windows.Forms.Control.MouseDown>, 、<xref:System.Windows.Forms.Control.MouseUp>, 、<xref:System.Windows.Forms.Control.MouseHover>, 、<xref:System.Windows.Forms.Control.MouseEnter>, 、<xref:System.Windows.Forms.Control.MouseLeave> と <xref:System.Windows.Forms.Control.MouseMove>です。 少なくとも 1 つを使用する必要がある場合 <xref:System.Windows.Forms.TabPage> 、コレクションのタブ コントロールのヘッダーを持つユーザーが操作して \(ここで、 <xref:System.Windows.Forms.TabPage> 名前が表示されます\)、 <xref:System.Windows.Forms.TabControl> 適切なイベントを発生させます。 ただし、ユーザーとの対話がタブ ページのクライアント領域内にある場合、 <xref:System.Windows.Forms.TabPage> 適切なイベントを発生させます。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例に示しますにマウスのパスを描画する別のマウス イベントを使用して、 <xref:System.Windows.Forms.Panel>です。 直線セグメントを追加、 <xref:System.Drawing.Drawing2D.GraphicsPath> 各 <xref:System.Windows.Forms.Control.MouseMove> と <xref:System.Windows.Forms.Control.MouseDown> 発生するイベントです。 グラフィックスを更新する、 <xref:System.Windows.Forms.Control.Invalidate%2A> メソッドが呼び出される、 <xref:System.Windows.Forms.Panel> 各 `MouseDown` と `MouseUp` イベントです。 さらに、グラフィックのパスがいつ上下にスクロールされる基準、 <xref:System.Windows.Forms.Control.MouseWheel> イベントが発生します。 その他のマウス イベントと同様に <xref:System.Windows.Forms.Control.MouseHover>, 、画面で識別されます。 詳細については、マウスで画面にも表示されますが、 <xref:System.Windows.Forms.SystemInformation> クラスです。  
  
 [!code-cpp[System.Windows.Forms.MouseEvent\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CPP/mouseeventexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.MouseEvent\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CS/mouseeventexample.cs#1)]
 [!code-vb[System.Windows.Forms.MouseEvent\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/VB/mouseeventexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseWheel" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールにフォーカスがある間に、マウスのホイールを移動したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 処理するときに、 <xref:System.Windows.Forms.Control.MouseWheel> イベントは、マウス ホイールに関連付けられているユーザー インターフェイス \(UI\) の標準に準拠することが重要です。<xref:System.Windows.Forms.MouseEventArgs.Delta%2A?displayProperty=fullName> プロパティの値は、マウス ホイールの回転の量が移動されたことを示します。 UI は、累積のデルタがプラスまたはマイナス 120 の場合にスクロールする必要があります。 UI はによって返される論理行の数、スクロールする必要があります、 <xref:System.Windows.Forms.SystemInformation.MouseWheelScrollLines%2A?displayProperty=fullName> デルタ値ごとにプロパティに達しています。 スクロールより円滑にでより小さなその 120 ずつ比率が一定に保たれる、つまりが <xref:System.Windows.Forms.SystemInformation.MouseWheelScrollLines%2A?displayProperty=fullName> ホイール 120 デルタ単位あたりの行にスクロールします。  
  
 マウス ホイールのメッセージの処理の詳細については、次を参照してください。、[WM\_MOUSEWHEEL](http://msdn.microsoft.com/library/windows/desktop/ms645617\(v=vs.85\).aspx)トピックです。  
  
 マウス イベントは次の順序で発生します。  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> \/ <xref:System.Windows.Forms.Control.MouseDown> \/ <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例に示しますにマウスのパスを描画する別のマウス イベントを使用して、 <xref:System.Windows.Forms.Panel>です。 直線セグメントを追加、 <xref:System.Drawing.Drawing2D.GraphicsPath> 各 <xref:System.Windows.Forms.Control.MouseMove> と <xref:System.Windows.Forms.Control.MouseDown> 発生するイベントです。 グラフィックスを更新する、 <xref:System.Windows.Forms.Control.Invalidate%2A> メソッドが呼び出される、 <xref:System.Windows.Forms.Panel> 各 `MouseDown` と `MouseUp` イベントです。 さらに、グラフィックのパスがいつ上下にスクロールされる基準、 <xref:System.Windows.Forms.Control.MouseWheel> イベントが発生します。 その他のマウス イベントと同様に <xref:System.Windows.Forms.Control.MouseHover>, 、画面で識別されます。 詳細については、マウスで画面にも表示されますが、 <xref:System.Windows.Forms.SystemInformation> クラスです。  
  
 [!code-cpp[System.Windows.Forms.MouseEvent\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CPP/mouseeventexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.MouseEvent\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CS/mouseeventexample.cs#1)]
 [!code-vb[System.Windows.Forms.MouseEvent\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/VB/mouseeventexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="Move">
      <MemberSignature Language="C#" Value="public event EventHandler Move;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Move" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Move" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールが移動されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Windows.Forms.Control.Move> フォームのキャプション バーを画面座標でのフォームの位置を表示するイベントです。  
  
 [!code-cpp[Control.Move\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Move/CPP/form1.cpp#1)]
 [!code-csharp[Control.Move\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Move/CS/form1.cs#1)]
 [!code-vb[Control.Move\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Move/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMove(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの名前を取得または設定します。</summary>
        <value>コントロールの名前。 既定値は、空の文字列 \(""\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.Name%2A> プロパティできます実行時にオブジェクトを評価するを名前ではなく型のプログラミングの名前。<xref:System.Windows.Forms.Control.Name%2A> プロパティを返します。、 <xref:System.String> の種類はケース スタイル ロジック ステートメントで評価されます \(`Select` 内のステートメントで [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)], 、`switch` 内のステートメントで [!INCLUDE[csprcs](~/includes/csprcs-md.md)] と [!INCLUDE[vcprvc](~/includes/vcprvc-md.md)]\)。  
  
   
  
## 例  
 次のコード例を表示、 <xref:System.Windows.Forms.Control.Name%2A> 内のコントロールの <xref:System.Windows.Forms.MessageBox> コントロールを追加したり、フォームから削除するとします。  
  
 [!code-cpp[Control.ControlRemoved\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.ControlRemoved/CPP/form1.cpp#1)]
 [!code-csharp[Control.ControlRemoved\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.ControlRemoved/CS/form1.cs#1)]
 [!code-vb[Control.ControlRemoved\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.ControlRemoved/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.ISite.Name" />
      </Docs>
    </Member>
    <Member MemberName="NotifyInvalidate">
      <MemberSignature Language="C#" Value="protected virtual void NotifyInvalidate (System.Drawing.Rectangle invalidatedArea);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void NotifyInvalidate(valuetype System.Drawing.Rectangle invalidatedArea) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.NotifyInvalidate(System.Drawing.Rectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="invalidatedArea" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="invalidatedArea">無効化する領域を表す <see cref="T:System.Drawing.Rectangle" />。</param>
        <summary>無効化するコントロールの領域を指定して、<see cref="E:System.Windows.Forms.Control.Invalidated" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAutoSizeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAutoSizeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAutoSizeChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.AutoSizeChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnAutoSizeChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnBackColorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBackColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBackColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.BackColorChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnBackColorChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例は、イベント発生のメソッドは、実行すると実行、 <xref:System.Windows.Forms.Control.Text%2A> プロパティ値が変更されます。<xref:System.Windows.Forms.Control> クラス名のパターンをいくつかの方法には `On`*PropertyName*`Changed` 向上させ、対応する *PropertyName*`Changed` イベント時に、 *PropertyName* 値の変更 \(*PropertyName* 、対応するプロパティの名前を表します\)。  
  
 次のコードを変更する例、 <xref:System.Windows.Forms.Control.ForeColor%2A> の <xref:System.Windows.Forms.TextBox> 通貨データを表示するクラスを派生します。 例では、文字列に変換する 10 進数と変更、 <xref:System.Windows.Forms.Control.ForeColor%2A> に <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> 負の値とする <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> 数値が正の場合。 この例から派生したクラスである必要があります、 <xref:System.Windows.Forms.TextBox> クラスです。  
  
 [!code-cpp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.BackColorChanged" />
        <altmember cref="P:System.Windows.Forms.Control.BackColor" />
      </Docs>
    </Member>
    <Member MemberName="OnBackgroundImageChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBackgroundImageChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBackgroundImageChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.BackgroundImageChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnBackgroundImageChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例は、イベント発生のメソッドは、実行すると実行、 <xref:System.Windows.Forms.Control.Text%2A> プロパティ値が変更されます。<xref:System.Windows.Forms.Control> クラス名のパターンをいくつかの方法には `On`*PropertyName*`Changed` 向上させ、対応する *PropertyName*`Changed` イベント時に、 *PropertyName* 値の変更 \(*PropertyName* 、対応するプロパティの名前を表します\)。  
  
 次のコードを変更する例、 <xref:System.Windows.Forms.Control.ForeColor%2A> の <xref:System.Windows.Forms.TextBox> 通貨データを表示するクラスを派生します。 例では、文字列に変換する 10 進数と変更、 <xref:System.Windows.Forms.Control.ForeColor%2A> に <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> 負の値とする <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> 数値が正の場合。 この例から派生したクラスである必要があります、 <xref:System.Windows.Forms.TextBox> クラスです。  
  
 [!code-cpp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageChanged" />
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImage" />
      </Docs>
    </Member>
    <Member MemberName="OnBackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBackgroundImageLayoutChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBackgroundImageLayoutChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImageLayout" />
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnBindingContextChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBindingContextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBindingContextChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.BindingContextChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnBindingContextChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.BindingContextChanged" />
        <altmember cref="P:System.Windows.Forms.Control.BindingContext" />
      </Docs>
    </Member>
    <Member MemberName="OnCausesValidationChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCausesValidationChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCausesValidationChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.CausesValidationChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnCausesValidationChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例は、イベント発生のメソッドは、実行すると実行、 <xref:System.Windows.Forms.Control.Text%2A> プロパティ値が変更されます。<xref:System.Windows.Forms.Control> クラス名のパターンをいくつかの方法には `On`*PropertyName*`Changed` 向上させ、対応する *PropertyName*`Changed` イベント時に、 *PropertyName* 値の変更 \(*PropertyName* 、対応するプロパティの名前を表します\)。  
  
 次のコードを変更する例、 <xref:System.Windows.Forms.Control.ForeColor%2A> の <xref:System.Windows.Forms.TextBox> 通貨データを表示するクラスを派生します。 例では、文字列に変換する 10 進数と変更、 <xref:System.Windows.Forms.Control.ForeColor%2A> に <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> 負の値とする <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> 数値が正の場合。 この例から派生したクラスである必要があります、 <xref:System.Windows.Forms.TextBox> クラスです。  
  
 [!code-cpp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.CausesValidationChanged" />
        <altmember cref="P:System.Windows.Forms.Control.CausesValidation" />
      </Docs>
    </Member>
    <Member MemberName="OnChangeUICues">
      <MemberSignature Language="C#" Value="protected virtual void OnChangeUICues (System.Windows.Forms.UICuesEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnChangeUICues(class System.Windows.Forms.UICuesEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.UICuesEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.UICuesEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.ChangeUICues" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnChangeUICues%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.ChangeUICues" />
        <altmember cref="T:System.Windows.Forms.UICues" />
      </Docs>
    </Member>
    <Member MemberName="OnClick">
      <MemberSignature Language="C#" Value="protected virtual void OnClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnClick(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.Click" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnClick%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例では、オーバーライドを示しています、 <xref:System.Windows.Forms.Control.OnClick%2A> 派生クラスでメソッドです。 例を実行するには、同じファイル内のフォーム クラスを使用して、次のコードを貼り付けます。 型のテキスト ボックスを追加 `SingleClickTextBox` をフォームにします。  
  
 [!code-cpp[System.Windows.Forms.ControlOnClick\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlOnClick/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ControlOnClick\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlOnClick/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ControlOnClick\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlOnClick/VB/form1.vb#1)]  
  
 次のコード例に示しますのさまざまな使用方法のいずれか、 <xref:System.Windows.Forms.Control.Click> イベントとイベント ハンドラーです。  
  
 [!code-cpp[Control.FindForm\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.FindForm/CPP/form1.cpp#1)]
 [!code-csharp[Control.FindForm\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.FindForm/CS/form1.cs#1)]
 [!code-vb[Control.FindForm\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.FindForm/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnClick(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnClick(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.Click" />
      </Docs>
    </Member>
    <Member MemberName="OnClientSizeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnClientSizeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClientSizeChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.ClientSizeChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnClientSizeChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.ContextMenuChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnContextMenuChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例は、イベント発生のメソッドは、実行すると実行、 <xref:System.Windows.Forms.Control.Text%2A> プロパティ値が変更されます。<xref:System.Windows.Forms.Control> クラス名のパターンをいくつかの方法には `On`*PropertyName*`Changed` 向上させ、対応する *PropertyName*`Changed` イベント時に、 *PropertyName* 値の変更 \(*PropertyName* 、対応するプロパティの名前を表します\)。  
  
 次のコードを変更する例、 <xref:System.Windows.Forms.Control.ForeColor%2A> の <xref:System.Windows.Forms.TextBox> 通貨データを表示するクラスを派生します。 例では、文字列に変換する 10 進数と変更、 <xref:System.Windows.Forms.Control.ForeColor%2A> に <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> 負の値とする <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> 数値が正の場合。 この例から派生したクラスである必要があります、 <xref:System.Windows.Forms.TextBox> クラスです。  
  
 [!code-cpp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.ContextMenuChanged" />
        <altmember cref="P:System.Windows.Forms.Control.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuStripChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuStripChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuStripChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.ContextMenuStripChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnContextMenuStripChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnControlAdded">
      <MemberSignature Language="C#" Value="protected virtual void OnControlAdded (System.Windows.Forms.ControlEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnControlAdded(class System.Windows.Forms.ControlEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ControlEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.ControlEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.ControlAdded" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 子コントロールがコントロールに追加されたときに呼び出されます。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnControlAdded%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例では <xref:System.Windows.Forms.Control.ControlAdded> をフォームにコントロールを追加するに追加されたコントロールの名前を表示し、 <xref:System.Windows.Forms.MessageBox>です。  
  
 [!code-cpp[Control.ControlRemoved\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.ControlRemoved/CPP/form1.cpp#1)]
 [!code-csharp[Control.ControlRemoved\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.ControlRemoved/CS/form1.cs#1)]
 [!code-vb[Control.ControlRemoved\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.ControlRemoved/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.ControlAdded" />
      </Docs>
    </Member>
    <Member MemberName="OnControlRemoved">
      <MemberSignature Language="C#" Value="protected virtual void OnControlRemoved (System.Windows.Forms.ControlEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnControlRemoved(class System.Windows.Forms.ControlEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ControlEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.ControlEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.ControlRemoved" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 子コントロールがコントロールから削除されたときに呼び出されます。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnControlRemoved%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例では <xref:System.Windows.Forms.Control.ControlRemoved> コントロールをフォームから削除するで削除されたコントロールの名前を表示し、 <xref:System.Windows.Forms.MessageBox>です。  
  
 [!code-cpp[Control.ControlRemoved\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.ControlRemoved/CPP/form1.cpp#1)]
 [!code-csharp[Control.ControlRemoved\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.ControlRemoved/CS/form1.cs#1)]
 [!code-vb[Control.ControlRemoved\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.ControlRemoved/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.ControlRemoved" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateControl">
      <MemberSignature Language="C#" Value="protected virtual void OnCreateControl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCreateControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnCreateControl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="M:System.Windows.Forms.Control.CreateControl" /> メソッドを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.OnCreateControl%2A> コントロールが最初に作成されたときに、メソッドが呼び出されます。  
  
 <xref:System.Windows.Forms.Control.OnCreateControl%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnCreateControl" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnCreateControl" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
      </Docs>
    </Member>
    <Member MemberName="OnCursorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCursorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCursorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.CursorChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnCursorChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例は、イベント発生のメソッドは、実行すると実行、 <xref:System.Windows.Forms.Control.Text%2A> プロパティ値が変更されます。<xref:System.Windows.Forms.Control> クラス名のパターンをいくつかの方法には `On`*PropertyName*`Changed` 向上させ、対応する *PropertyName*`Changed` イベント時に、 *PropertyName* 値の変更 \(*PropertyName* 、対応するプロパティの名前を表します\)。  
  
 次のコードを変更する例、 <xref:System.Windows.Forms.Control.ForeColor%2A> の <xref:System.Windows.Forms.TextBox> 通貨データを表示するクラスを派生します。 例では、文字列に変換する 10 進数と変更、 <xref:System.Windows.Forms.Control.ForeColor%2A> に <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> 負の値とする <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> 数値が正の場合。 この例から派生したクラスである必要があります、 <xref:System.Windows.Forms.TextBox> クラスです。  
  
 [!code-cpp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.CursorChanged" />
        <altmember cref="P:System.Windows.Forms.Control.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="OnDockChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnDockChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDockChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.DockChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnDockChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例は、イベント発生のメソッドは、実行すると実行、 <xref:System.Windows.Forms.Control.Text%2A> プロパティ値が変更されます。<xref:System.Windows.Forms.Control> クラス名のパターンをいくつかの方法には `On`*PropertyName*`Changed` 向上させ、対応する *PropertyName*`Changed` イベント時に、 *PropertyName* 値の変更 \(*PropertyName* 、対応するプロパティの名前を表します\)。  
  
 次のコードを変更する例、 <xref:System.Windows.Forms.Control.ForeColor%2A> の <xref:System.Windows.Forms.TextBox> 通貨データを表示するクラスを派生します。 例では、文字列に変換する 10 進数と変更、 <xref:System.Windows.Forms.Control.ForeColor%2A> に <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> 負の値とする <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> 数値が正の場合。 この例から派生したクラスである必要があります、 <xref:System.Windows.Forms.TextBox> クラスです。  
  
 [!code-cpp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.DockChanged" />
        <altmember cref="P:System.Windows.Forms.Control.Dock" />
      </Docs>
    </Member>
    <Member MemberName="OnDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnDoubleClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDoubleClick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.DoubleClick" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnDoubleClick%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Windows.Forms.Control.DoubleClick> のイベント、 <xref:System.Windows.Forms.ListBox> に示されているテキスト ファイルを読み込むため、 <xref:System.Windows.Forms.ListBox> に、 <xref:System.Windows.Forms.TextBox> コントロールです。  
  
 [!code-cpp[Control.DoubleClick\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.DoubleClick/CPP/form1.cpp#1)]
 [!code-csharp[Control.DoubleClick\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.DoubleClick/CS/form1.cs#1)]
 [!code-vb[Control.DoubleClick\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.DoubleClick/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.DoubleClick" />
      </Docs>
    </Member>
    <Member MemberName="OnDpiChangedAfterParent">
      <MemberSignature Language="C#" Value="protected virtual void OnDpiChangedAfterParent (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDpiChangedAfterParent(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDpiChangedAfterParent(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DpiChangedEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.DpiChangedAfterParent" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDpiChangedBeforeParent">
      <MemberSignature Language="C#" Value="protected virtual void OnDpiChangedBeforeParent (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDpiChangedBeforeParent(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDpiChangedBeforeParent(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DpiChangedEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.DpiChangedBeforeParent" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDragDrop">
      <MemberSignature Language="C#" Value="protected virtual void OnDragDrop (System.Windows.Forms.DragEventArgs drgevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragDrop(class System.Windows.Forms.DragEventArgs drgevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drgevent" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="drgevent">イベント データを格納している <see cref="T:System.Windows.Forms.DragEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.DragDrop" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnDragDrop%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.DragDrop" />
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnDragEnter (System.Windows.Forms.DragEventArgs drgevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragEnter(class System.Windows.Forms.DragEventArgs drgevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drgevent" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="drgevent">イベント データを格納している <see cref="T:System.Windows.Forms.DragEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.DragEnter" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnDragEnter%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.DragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnDragLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.DragLeave" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnDragLeave%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="protected virtual void OnDragOver (System.Windows.Forms.DragEventArgs drgevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragOver(class System.Windows.Forms.DragEventArgs drgevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drgevent" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="drgevent">イベント データを格納している <see cref="T:System.Windows.Forms.DragEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.DragOver" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnDragOver%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnEnabledChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnEnabledChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnEnabledChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.EnabledChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnEnabledChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.EnabledChanged" />
        <altmember cref="P:System.Windows.Forms.Control.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="OnEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnEnter (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnEnter(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.Enter" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnEnter%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Windows.Forms.Control.Enter> の前景色と背景色を変更するイベント、 <xref:System.Windows.Forms.TextBox> 特定の条件下でします。  
  
 [!code-cpp[Control.Enter\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Enter/CPP/form1.cpp#1)]
 [!code-csharp[Control.Enter\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Enter/CS/form1.cs#1)]
 [!code-vb[Control.Enter\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Enter/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.Enter" />
      </Docs>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.FontChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnFontChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例は、イベント発生のメソッドは、実行すると実行、 <xref:System.Windows.Forms.Control.Text%2A> プロパティ値が変更されます。<xref:System.Windows.Forms.Control> クラス名のパターンをいくつかの方法には `On`*PropertyName*`Changed` 向上させ、対応する *PropertyName*`Changed` イベント時に、 *PropertyName* 値の変更 \(*PropertyName* 、対応するプロパティの名前を表します\)。  
  
 次のコードを変更する例、 <xref:System.Windows.Forms.Control.ForeColor%2A> の <xref:System.Windows.Forms.TextBox> 通貨データを表示するクラスを派生します。 例では、文字列に変換する 10 進数と変更、 <xref:System.Windows.Forms.Control.ForeColor%2A> に <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> 負の値とする <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> 数値が正の場合。 この例から派生したクラスである必要があります、 <xref:System.Windows.Forms.TextBox> クラスです。  
  
 [!code-cpp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.FontChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnForeColorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnForeColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnForeColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.ForeColorChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnForeColorChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例は、イベント発生のメソッドは、実行すると実行、 <xref:System.Windows.Forms.Control.Text%2A> プロパティ値が変更されます。<xref:System.Windows.Forms.Control> クラス名のパターンをいくつかの方法には `On`*PropertyName*`Changed` 向上させ、対応する *PropertyName*`Changed` イベント時に、 *PropertyName* 値の変更 \(*PropertyName* 、対応するプロパティの名前を表します\)。  
  
 次のコードを変更する例、 <xref:System.Windows.Forms.Control.ForeColor%2A> の <xref:System.Windows.Forms.TextBox> 通貨データを表示するクラスを派生します。 例では、文字列に変換する 10 進数と変更、 <xref:System.Windows.Forms.Control.ForeColor%2A> に <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> 負の値とする <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> 数値が正の場合。 この例から派生したクラスである必要があります、 <xref:System.Windows.Forms.TextBox> クラスです。  
  
 [!code-cpp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.ForeColorChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnGiveFeedback (System.Windows.Forms.GiveFeedbackEventArgs gfbevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGiveFeedback(class System.Windows.Forms.GiveFeedbackEventArgs gfbevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gfbevent" Type="System.Windows.Forms.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="gfbevent">イベント データを格納している <see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.GiveFeedback" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnGiveFeedback%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotFocus (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotFocus(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.GotFocus" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnGotFocus%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.GotFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.HandleCreated" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnHandleCreated%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.HandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="OnHandleDestroyed">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleDestroyed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleDestroyed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.HandleDestroyed" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnHandleDestroyed%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.HandleDestroyed" />
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="OnHelpRequested">
      <MemberSignature Language="C#" Value="protected virtual void OnHelpRequested (System.Windows.Forms.HelpEventArgs hevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHelpRequested(class System.Windows.Forms.HelpEventArgs hevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hevent" Type="System.Windows.Forms.HelpEventArgs" />
      </Parameters>
      <Docs>
        <param name="hevent">イベント データを格納している <see cref="T:System.Windows.Forms.HelpEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.HelpRequested" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnHelpRequested%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.HelpRequested" />
      </Docs>
    </Member>
    <Member MemberName="OnImeModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnImeModeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnImeModeChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.ImeModeChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnImeModeChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例は、イベント発生のメソッドは、実行すると実行、 <xref:System.Windows.Forms.Control.Text%2A> プロパティ値が変更されます。<xref:System.Windows.Forms.Control> クラス名のパターンをいくつかの方法には `On`*PropertyName*`Changed` 向上させ、対応する *PropertyName*`Changed` イベント時に、 *PropertyName* 値の変更 \(*PropertyName* 、対応するプロパティの名前を表します\)。  
  
 次のコードを変更する例、 <xref:System.Windows.Forms.Control.ForeColor%2A> の <xref:System.Windows.Forms.TextBox> 通貨データを表示するクラスを派生します。 例では、文字列に変換する 10 進数と変更、 <xref:System.Windows.Forms.Control.ForeColor%2A> に <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> 負の値とする <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> 数値が正の場合。 この例から派生したクラスである必要があります、 <xref:System.Windows.Forms.TextBox> クラスです。  
  
 [!code-cpp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.ImeModeChanged" />
        <altmember cref="P:System.Windows.Forms.Control.ImeMode" />
      </Docs>
    </Member>
    <Member MemberName="OnInvalidated">
      <MemberSignature Language="C#" Value="protected virtual void OnInvalidated (System.Windows.Forms.InvalidateEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInvalidated(class System.Windows.Forms.InvalidateEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.InvalidateEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.InvalidateEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.Invalidated" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnInvalidated%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.Invalidated" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyDown (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyDown(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.KeyEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.KeyDown" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnKeyDown%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Windows.Forms.Control.KeyDown> イベントをコントロールに入力した文字の種類を判断します。  
  
 [!code-cpp[Control.KeyDown\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyPress">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyPress (System.Windows.Forms.KeyPressEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyPress(class System.Windows.Forms.KeyPressEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyPressEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.KeyPressEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.KeyPress" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnKeyPress%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Windows.Forms.Control.KeyPress> イベント文字をコントロールに入るを防ぐことができます。  
  
 [!code-cpp[Control.KeyDown\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyUp (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyUp(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.KeyEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.KeyUp" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnKeyUp%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Windows.Forms.Control.KeyUp> イベントと、 <xref:System.Windows.Forms.Help> をユーザーにポップアップ スタイルのヘルプを表示するクラス。  
  
 [!code-cpp[Control.KeyUp\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyUp/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyUp\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyUp/CS/form1.cs#1)]
 [!code-vb[Control.KeyUp\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyUp/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnLayout">
      <MemberSignature Language="C#" Value="protected virtual void OnLayout (System.Windows.Forms.LayoutEventArgs levent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLayout(class System.Windows.Forms.LayoutEventArgs levent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="levent" Type="System.Windows.Forms.LayoutEventArgs" />
      </Parameters>
      <Docs>
        <param name="levent">イベント データを格納している <see cref="T:System.Windows.Forms.LayoutEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.Layout" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnLayout%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)" /> method so that registered delegates receive the event and for typical docking and anchoring functions to work. Derived classes should override this method to do any custom layout logic.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="OnLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.Leave" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnLeave%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Windows.Forms.Control.Leave> にコントロールを前の状態にリセットするイベントです。  
  
 [!code-cpp[Control.Enter\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Enter/CPP/form1.cpp#1)]
 [!code-csharp[Control.Enter\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Enter/CS/form1.cs#1)]
 [!code-vb[Control.Enter\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Enter/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.Leave" />
      </Docs>
    </Member>
    <Member MemberName="OnLocationChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnLocationChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLocationChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.LocationChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnLocationChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例は、イベント発生のメソッドは、実行すると実行、 <xref:System.Windows.Forms.Control.Text%2A> プロパティ値が変更されます。<xref:System.Windows.Forms.Control> クラス名のパターンをいくつかの方法には `On`*PropertyName*`Changed` 向上させ、対応する *PropertyName* `Changed` イベント時に、 *PropertyName* 値の変更 \(*PropertyName* 、対応するプロパティの名前を表します\)。  
  
 次のコードを変更する例、 <xref:System.Windows.Forms.Control.ForeColor%2A> の <xref:System.Windows.Forms.TextBox> 通貨データを表示するクラスを派生します。 例では、文字列に変換する 10 進数と変更、 <xref:System.Windows.Forms.Control.ForeColor%2A> に <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> 負の値とする <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> 数値が正の場合。 この例から派生したクラスである必要があります、 <xref:System.Windows.Forms.TextBox> クラスです。  
  
 [!code-cpp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.LocationChanged" />
        <altmember cref="P:System.Windows.Forms.Control.Location" />
      </Docs>
    </Member>
    <Member MemberName="OnLostFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostFocus (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostFocus(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.LostFocus" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnLostFocus%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.LostFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnMarginChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnMarginChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMarginChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.MarginChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnMarginChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseCaptureChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseCaptureChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseCaptureChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.MouseCaptureChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnMouseCaptureChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseClick">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseClick (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseClick(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.MouseEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.MouseClick" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnMouseClick%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseDoubleClick (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseDoubleClick(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.MouseEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.MouseDoubleClick" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnMouseDoubleClick%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseDown (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseDown(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.MouseEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.MouseDown" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnMouseDown%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.MouseDown" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseEnter (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseEnter(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.MouseEnter" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnMouseEnter%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.MouseEnter" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseHover">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseHover (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseHover(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.MouseHover" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnMouseHover%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例では、オーバーライド、 <xref:System.Windows.Forms.Control.OnMouseHover%2A> と <xref:System.Windows.Forms.Control.OnMouseMove%2A> 派生クラスのメソッドです。 この例を実行するには、新しいフォームに次のコードを貼り付け、このクラスは、フォームの後、同じファイルを形成するを貼り付けます。 型のボタンを追加する `FunButton` をフォームにします。  
  
 [!code-cpp[System.Windows.Forms.ControlDefaultProperties\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ControlDefaultProperties\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ControlDefaultProperties\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.MouseHover" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.MouseLeave" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnMouseLeave%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.MouseLeave" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseMove (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseMove(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.MouseEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.MouseMove" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnMouseMove%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例では、オーバーライド、 <xref:System.Windows.Forms.Control.OnMouseHover%2A> と <xref:System.Windows.Forms.Control.OnMouseMove%2A> 派生クラスのメソッドです。 この例を実行するには、新しいフォームに次のコードを貼り付け、このクラスは、フォームの後、同じファイルを形成するを貼り付けます。 型のボタンを追加する `FunButton` をフォームにします。  
  
 [!code-cpp[System.Windows.Forms.ControlDefaultProperties\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ControlDefaultProperties\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ControlDefaultProperties\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.MouseMove" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseUp (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseUp(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.MouseEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.MouseUp" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnMouseUp%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.MouseUp" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseWheel">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseWheel (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseWheel(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.MouseEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.MouseWheel" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnMouseWheel%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.MouseWheel" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMove">
      <MemberSignature Language="C#" Value="protected virtual void OnMove (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMove(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMove(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.Move" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnMove%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Windows.Forms.Control.Move> フォームのキャプション バーを画面座標でのフォームの位置を表示するイベントです。  
  
 [!code-cpp[Control.Move\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Move/CPP/form1.cpp#1)]
 [!code-csharp[Control.Move\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Move/CS/form1.cs#1)]
 [!code-vb[Control.Move\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Move/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnMove(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMove(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.Move" />
      </Docs>
    </Member>
    <Member MemberName="OnNotifyMessage">
      <MemberSignature Language="C#" Value="protected virtual void OnNotifyMessage (System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnNotifyMessage(valuetype System.Windows.Forms.Message m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" />
      </Parameters>
      <Docs>
        <param name="m">Windows メッセージを表す <see cref="T:System.Windows.Forms.Message" />。</param>
        <summary>コントロールに Windows メッセージを通知します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.OnNotifyMessage%2A> 場合、メソッドが呼び出されますコントロールの `EnableNotifyMessage` 内のスタイル ビットが設定 <xref:System.Windows.Forms.ControlStyles>します。`EnableNotifyMessage` でスタイル設定 <xref:System.Windows.Forms.ControlStyles> 通知を受けるときに制御を有効に、 <xref:System.Windows.Forms.Control.WndProc%2A> メソッドは、Windows メッセージを受信します。 このメソッドを使用して部分的に信頼されたコントロールをリッスンできます Windows メッセージにメッセージを変更することです。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)" /> in a derived class, calling the base class's <see cref="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)" /> method is not necessary because there is no initial implementation.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnPaddingChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPaddingChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPaddingChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.PaddingChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnPaddingChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnPaint">
      <MemberSignature Language="C#" Value="protected virtual void OnPaint (System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPaint(class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.PaintEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.Paint" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnPaint%2A> メソッドでは、派生クラスでデリゲートを結び付けずに、イベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例では、ユーザーがイメージまたはイメージ ファイルをフォームにドラッグして、それが削除される時点で表示できるようにします。<xref:System.Windows.Forms.Control.OnPaint%2A> メソッドをオーバーライドして、フォームが描画されるたびに、イメージを再描画。 それ以外の場合イメージは、次回の再描画するまで存続はのみです。<xref:System.Windows.Forms.Control.DragEnter> イベント処理メソッドは、フォームにドラッグされているデータの種類を決定し、適切なフィードバックを提供します。<xref:System.Windows.Forms.Control.DragDrop> 場合、イベント処理メソッドが、フォームの画像を表示、 <xref:System.Drawing.Image> データから作成できます。<xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=fullName> と <xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=fullName> 値は、画面座標、例では、 <xref:System.Windows.Forms.Control.PointToClient%2A> をクライアント座標に変換するメソッドです。  
  
 [!code-cpp[Windows.Forms.Control.DragOperations\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CPP/imagedrag.cpp#1)]
 [!code-csharp[Windows.Forms.Control.DragOperations\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CS/imagedrag.cs#1)]
 [!code-vb[Windows.Forms.Control.DragOperations\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/VB/imagedrag.vb#1)]  
  
 [!code-cpp[Control.Paint\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Paint/CPP/form1.cpp#1)]
 [!code-csharp[Control.Paint\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Paint/CS/form1.cs#1)]
 [!code-vb[Control.Paint\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Paint/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.Paint" />
      </Docs>
    </Member>
    <Member MemberName="OnPaintBackground">
      <MemberSignature Language="C#" Value="protected virtual void OnPaintBackground (System.Windows.Forms.PaintEventArgs pevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPaintBackground(class System.Windows.Forms.PaintEventArgs pevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pevent" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="pevent">描画するコントロールに関する情報を格納する <see cref="T:System.Windows.Forms.PaintEventArgs" />。</param>
        <summary>コントロールの背景を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.OnPaintBackground%2A> Windows のバック グラウンドの処理を有効に派生クラスでメソッドが要求を消去します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Inheriting classes should override this method to handle the erase background request from windows. When overriding <see cref="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" /> in a derived class it is not necessary to call the base class's <see cref="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" />.</para>
        </block>
        <altmember cref="M:System.Windows.Forms.Control.InvokePaintBackground(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnParentBackColorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentBackColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentBackColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>コントロールのコンテナーの <see cref="E:System.Windows.Forms.Control.BackColorChanged" /> プロパティ値が変更された場合に、<see cref="P:System.Windows.Forms.Control.BackColor" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnParentBackColorChanged%2A> メソッドでは、派生クラスでデリゲートを結び付けずに、イベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例は、イベント発生のメソッドは、実行すると実行、 <xref:System.Windows.Forms.Control.Text%2A> プロパティ値が変更されます。<xref:System.Windows.Forms.Control> クラス名のパターンをいくつかの方法には `On`*PropertyName*`Changed` 向上させ、対応する *PropertyName*`Changed` イベント時に、 *PropertyName* 値の変更 \(*PropertyName* 、対応するプロパティの名前を表します\)。  
  
 次のコードを変更する例、 <xref:System.Windows.Forms.Control.ForeColor%2A> の <xref:System.Windows.Forms.TextBox> 通貨データを表示するクラスを派生します。 例では、文字列に変換する 10 進数と変更、 <xref:System.Windows.Forms.Control.ForeColor%2A> に <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> 負の値とする <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> 数値が正の場合。 この例から派生したクラスである必要があります、 <xref:System.Windows.Forms.TextBox> クラスです。  
  
 [!code-cpp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.BackColorChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentBackgroundImageChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentBackgroundImageChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentBackgroundImageChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>コントロールのコンテナーの <see cref="E:System.Windows.Forms.Control.BackgroundImageChanged" /> プロパティ値が変更された場合に、<see cref="P:System.Windows.Forms.Control.BackgroundImage" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnParentBackgroundImageChanged%2A> メソッドでは、派生クラスでデリゲートを結び付けずに、イベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例は、イベント発生のメソッドは、実行すると実行、 <xref:System.Windows.Forms.Control.Text%2A> プロパティ値が変更されます。<xref:System.Windows.Forms.Control> クラス名のパターンをいくつかの方法には `On`*PropertyName*`Changed`向上させ、対応する *PropertyName*`Changed` イベント時に、 *PropertyName* 値の変更 \(*PropertyName* 、対応するプロパティの名前を表します\)。  
  
 次のコードを変更する例、 <xref:System.Windows.Forms.Control.ForeColor%2A> の <xref:System.Windows.Forms.TextBox> 通貨データを表示するクラスを派生します。 例では、文字列に変換する 10 進数と変更、 <xref:System.Windows.Forms.Control.ForeColor%2A> に <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> 負の値とする <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> 数値が正の場合。 この例から派生したクラスである必要があります、 <xref:System.Windows.Forms.TextBox> クラスです。  
  
 [!code-cpp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentBindingContextChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentBindingContextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentBindingContextChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>コントロールのコンテナーの <see cref="E:System.Windows.Forms.Control.BindingContextChanged" /> プロパティ値が変更された場合に、<see cref="P:System.Windows.Forms.Control.BindingContext" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnParentBindingContextChanged%2A> メソッドでは、派生クラスでデリゲートを結び付けずに、イベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例は、イベント発生のメソッドは、実行すると実行、 <xref:System.Windows.Forms.Control.Text%2A> プロパティ値が変更されます。<xref:System.Windows.Forms.Control> クラス名のパターンをいくつかの方法には `On`*PropertyName*`Changed`向上させ、対応する *PropertyName*`Changed` イベント時に、 *PropertyName* 値の変更 \(*PropertyName* 、対応するプロパティの名前を表します\)。  
  
 次のコードを変更する例、 <xref:System.Windows.Forms.Control.ForeColor%2A> の <xref:System.Windows.Forms.TextBox> 通貨データを表示するクラスを派生します。 例では、文字列に変換する 10 進数と変更、 <xref:System.Windows.Forms.Control.ForeColor%2A> に <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> 負の値とする <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> 数値が正の場合。 この例から派生したクラスである必要があります、 <xref:System.Windows.Forms.TextBox> クラスです。  
  
 [!code-cpp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.BindingContextChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.ParentChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnParentChanged%2A> メソッドでは、派生クラスでデリゲートを結び付けずに、イベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例は、イベント発生のメソッドは、実行すると実行、 <xref:System.Windows.Forms.Control.Text%2A> プロパティ値が変更されます。<xref:System.Windows.Forms.Control> クラス名のパターンをいくつかの方法には `On`*PropertyName*`Changed` 向上させ、対応する *PropertyName*`Changed` イベント時に、 *PropertyName* 値の変更 \(*PropertyName* 、対応するプロパティの名前を表します\)。  
  
 次のコードを変更する例、 <xref:System.Windows.Forms.Control.ForeColor%2A> の <xref:System.Windows.Forms.TextBox> 通貨データを表示するクラスを派生します。 例では、文字列に変換する 10 進数と変更、 <xref:System.Windows.Forms.Control.ForeColor%2A> に <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> 負の値とする <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> 数値が正の場合。 この例から派生したクラスである必要があります、 <xref:System.Windows.Forms.TextBox> クラスです。  
  
 [!code-cpp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.ParentChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentCursorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentCursorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentCursorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.CursorChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnParentCursorChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnParentEnabledChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentEnabledChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentEnabledChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>コントロールのコンテナーの <see cref="E:System.Windows.Forms.Control.EnabledChanged" /> プロパティ値が変更された場合に、<see cref="P:System.Windows.Forms.Control.Enabled" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnParentEnabledChanged%2A> メソッドでは、派生クラスでデリゲートを結び付けずに、イベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例は、イベント発生のメソッドは、実行すると実行、 <xref:System.Windows.Forms.Control.Text%2A> プロパティ値が変更されます。<xref:System.Windows.Forms.Control> クラス名のパターンをいくつかの方法には `On`*PropertyName*`Changed` 向上させ、対応する *PropertyName*`Changed` イベント時に、 *PropertyName* 値の変更 \(*PropertyName* 、対応するプロパティの名前を表します\)。  
  
 次のコードを変更する例、 <xref:System.Windows.Forms.Control.ForeColor%2A> の <xref:System.Windows.Forms.TextBox> 通貨データを表示するクラスを派生します。 例では、文字列に変換する 10 進数と変更、 <xref:System.Windows.Forms.Control.ForeColor%2A> に <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> 負の値とする <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> 数値が正の場合。 この例から派生したクラスである必要があります、 <xref:System.Windows.Forms.TextBox> クラスです。  
  
 [!code-cpp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.EnabledChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentFontChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>コントロールのコンテナーの <see cref="E:System.Windows.Forms.Control.FontChanged" /> プロパティ値が変更された場合に、<see cref="P:System.Windows.Forms.Control.Font" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnParentFontChanged%2A> メソッドでは、派生クラスでデリゲートを結び付けずに、イベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例は、イベント発生のメソッドは、実行すると実行、 <xref:System.Windows.Forms.Control.Text%2A> プロパティ値が変更されます。<xref:System.Windows.Forms.Control> クラス名のパターンをいくつかの方法には `On`*PropertyName*`Changed` 向上させ、対応する *PropertyName*`Changed` イベント時に、 *PropertyName* 値の変更 \(*PropertyName* 、対応するプロパティの名前を表します\)。  
  
 次のコードを変更する例、 <xref:System.Windows.Forms.Control.ForeColor%2A> の <xref:System.Windows.Forms.TextBox> 通貨データを表示するクラスを派生します。 例では、文字列に変換する 10 進数と変更、 <xref:System.Windows.Forms.Control.ForeColor%2A> に <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> 負の値とする <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> 数値が正の場合。 この例から派生したクラスである必要があります、 <xref:System.Windows.Forms.TextBox> クラスです。  
  
 [!code-cpp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.FontChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentForeColorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentForeColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentForeColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>コントロールのコンテナーの <see cref="E:System.Windows.Forms.Control.ForeColorChanged" /> プロパティ値が変更された場合に、<see cref="P:System.Windows.Forms.Control.ForeColor" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnParentForeColorChanged%2A> メソッドでは、派生クラスでデリゲートを結び付けずに、イベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例は、イベント発生のメソッドは、実行すると実行、 <xref:System.Windows.Forms.Control.Text%2A> プロパティ値が変更されます。<xref:System.Windows.Forms.Control> クラス名のパターンをいくつかの方法には `On`*PropertyName*`Changed` 向上させ、対応する *PropertyName*`Changed` イベント時に、 *PropertyName* 値の変更 \(*PropertyName* 、対応するプロパティの名前を表します\)。  
  
 次のコードを変更する例、 <xref:System.Windows.Forms.Control.ForeColor%2A> の <xref:System.Windows.Forms.TextBox> 通貨データを表示するクラスを派生します。 例では、文字列に変換する 10 進数と変更、 <xref:System.Windows.Forms.Control.ForeColor%2A> に <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> 負の値とする <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> 数値が正の場合。 この例から派生したクラスである必要があります、 <xref:System.Windows.Forms.TextBox> クラスです。  
  
 [!code-cpp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.ForeColorChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentRightToLeftChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentRightToLeftChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentRightToLeftChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>コントロールのコンテナーの <see cref="E:System.Windows.Forms.Control.RightToLeftChanged" /> プロパティ値が変更された場合に、<see cref="P:System.Windows.Forms.Control.RightToLeft" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnParentRightToLeftChanged%2A> メソッドでは、派生クラスでデリゲートを結び付けずに、イベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例は、イベント発生のメソッドは、実行すると実行、 <xref:System.Windows.Forms.Control.Text%2A> プロパティ値が変更されます。<xref:System.Windows.Forms.Control> クラス名のパターンをいくつかの方法には `On`*PropertyName*`Changed` 向上させ、対応する *PropertyName*`Changed` イベント時に、 *PropertyName* 値の変更 \(*PropertyName* 、対応するプロパティの名前を表します\)。  
  
 次のコードを変更する例、 <xref:System.Windows.Forms.Control.ForeColor%2A> の <xref:System.Windows.Forms.TextBox> 通貨データを表示するクラスを派生します。 例では、文字列に変換する 10 進数と変更、 <xref:System.Windows.Forms.Control.ForeColor%2A> に <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> 負の値とする <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> 数値が正の場合。 この例から派生したクラスである必要があります、 <xref:System.Windows.Forms.TextBox> クラスです。  
  
 [!code-cpp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.RightToLeftChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentVisibleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentVisibleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentVisibleChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>コントロールのコンテナーの <see cref="E:System.Windows.Forms.Control.VisibleChanged" /> プロパティ値が変更された場合に、<see cref="P:System.Windows.Forms.Control.Visible" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnParentVisibleChanged%2A> メソッドでは、派生クラスでデリゲートを結び付けずに、イベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例は、イベント発生のメソッドは、実行すると実行、 <xref:System.Windows.Forms.Control.Text%2A> プロパティ値が変更されます。<xref:System.Windows.Forms.Control> クラス名のパターンをいくつかの方法には `On`*PropertyName*`Changed` 向上させ、対応する *PropertyName*`Changed` イベント時に、 *PropertyName* 値の変更 \(*PropertyName* 、対応するプロパティの名前を表します\)。  
  
 次のコードを変更する例、 <xref:System.Windows.Forms.Control.ForeColor%2A> の <xref:System.Windows.Forms.TextBox> 通貨データを表示するクラスを派生します。 例では、文字列に変換する 10 進数と変更、 <xref:System.Windows.Forms.Control.ForeColor%2A> に <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> 負の値とする <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> 数値が正の場合。 この例から派生したクラスである必要があります、 <xref:System.Windows.Forms.TextBox> クラスです。  
  
 [!code-cpp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.VisibleChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewKeyDown (System.Windows.Forms.PreviewKeyDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewKeyDown(class System.Windows.Forms.PreviewKeyDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.PreviewKeyDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.PreviewKeyDownEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.PreviewKeyDown" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnPreviewKeyDown%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnPrint">
      <MemberSignature Language="C#" Value="protected virtual void OnPrint (System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPrint(class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnPrint(System.Windows.Forms.PaintEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.PaintEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.Paint" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 `UserPaint` のビット、 <xref:System.Windows.Forms.ControlStyles> を設定すると、オーバーライドする <xref:System.Windows.Forms.Control.OnPrint%2A> レイヤーの描画を行う。 詳細については、「<xref:System.Windows.Forms.Control.SetStyle%2A>」を参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="e" /> パラメーターが <see langword="null" /> です。</exception>
        <altmember cref="M:System.Windows.Forms.Control.DrawToBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)" />
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryContinueDrag (System.Windows.Forms.QueryContinueDragEventArgs qcdevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnQueryContinueDrag(class System.Windows.Forms.QueryContinueDragEventArgs qcdevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="qcdevent" Type="System.Windows.Forms.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="qcdevent">イベント データを格納している <see cref="T:System.Windows.Forms.QueryContinueDragEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.QueryContinueDrag" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ドラッグの開始後にこのメソッドは繰り返しで、 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] ドラッグ操作が取り消されたか完了するまでです。  
  
> [!NOTE]
>  ドラッグ操作が取り消された、ドロップが行われる点を変更する場合は、このメソッドをオーバーライドします。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnQueryContinueDrag%2A> メソッドでは、派生クラスでデリゲートを結び付けずに、イベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.QueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnRegionChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRegionChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRegionChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.RegionChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnRegionChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnResize">
      <MemberSignature Language="C#" Value="protected virtual void OnResize (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnResize(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.Resize" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnResize%2A> メソッドでは、派生クラスでデリゲートを結び付けずに、イベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /> method so that registered delegates receive the event. The <see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /> method can be called during construction, so if you override <see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /> it can be called before the control constructor is called.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.Resize" />
      </Docs>
    </Member>
    <Member MemberName="OnRightToLeftChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRightToLeftChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRightToLeftChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.RightToLeftChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnRightToLeftChanged%2A> メソッドでは、派生クラスでデリゲートを結び付けずに、イベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例は、イベント発生のメソッドは、実行すると実行、 <xref:System.Windows.Forms.Control.Text%2A> プロパティ値が変更されます。<xref:System.Windows.Forms.Control> クラス名のパターンをいくつかの方法には `On`*PropertyName*`Changed` 向上させ、対応する *PropertyName*`Changed` イベント時に、 *PropertyName* 値の変更 \(*PropertyName* 、対応するプロパティの名前を表します\)。  
  
 次のコードを変更する例、 <xref:System.Windows.Forms.Control.ForeColor%2A> の <xref:System.Windows.Forms.TextBox> 通貨データを表示するクラスを派生します。 例では、文字列に変換する 10 進数と変更、 <xref:System.Windows.Forms.Control.ForeColor%2A> に <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> 負の値とする <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> 数値が正の場合。 この例から派生したクラスである必要があります、 <xref:System.Windows.Forms.TextBox> クラスです。  
  
 [!code-cpp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.RightToLeftChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnSizeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSizeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSizeChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.SizeChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnSizeChanged%2A> メソッドでは、派生クラスでデリゲートを結び付けずに、イベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.SizeChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnStyleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStyleChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.StyleChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnStyleChanged%2A> メソッドでは、派生クラスでデリゲートを結び付けずに、イベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.StyleChanged" />
        <altmember cref="M:System.Windows.Forms.Control.GetStyle(System.Windows.Forms.ControlStyles)" />
        <altmember cref="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.ControlStyles" />
      </Docs>
    </Member>
    <Member MemberName="OnSystemColorsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSystemColorsChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSystemColorsChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.SystemColorsChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnSystemColorsChanged%2A> メソッドでは、派生クラスでデリゲートを結び付けずに、イベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.SystemColorsChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnTabIndexChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnTabIndexChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTabIndexChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.TabIndexChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnTabIndexChanged%2A> メソッドでは、派生クラスでデリゲートを結び付けずに、イベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.TabIndexChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnTabStopChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnTabStopChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTabStopChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.TabStopChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnTabStopChanged%2A> メソッドでは、派生クラスでデリゲートを結び付けずに、イベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例は、イベント発生のメソッドは、実行すると実行、 <xref:System.Windows.Forms.Control.Text%2A> プロパティ値が変更されます。<xref:System.Windows.Forms.Control> クラス名のパターンをいくつかの方法には `On`*PropertyName*`Changed` 向上させ、対応する *PropertyName*`Changed` イベント時に、 *PropertyName* 値の変更 \(*PropertyName* 、対応するプロパティの名前を表します\)。  
  
 次のコードを変更する例、 <xref:System.Windows.Forms.Control.ForeColor%2A> の <xref:System.Windows.Forms.TextBox> 通貨データを表示するクラスを派生します。 例では、文字列に変換する 10 進数と変更、 <xref:System.Windows.Forms.Control.ForeColor%2A> に <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> 負の値とする <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> 数値が正の場合。 この例から派生したクラスである必要があります、 <xref:System.Windows.Forms.TextBox> クラスです。  
  
 [!code-cpp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.TabStopChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnTextChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnTextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTextChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.TextChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnTextChanged%2A> メソッドでは、派生クラスでデリゲートを結び付けずに、イベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコードを変更する例、 <xref:System.Windows.Forms.Control.ForeColor%2A> の <xref:System.Windows.Forms.TextBox> 通貨データを表示するクラスを派生します。 例では、文字列に変換する 10 進数と変更、 <xref:System.Windows.Forms.Control.ForeColor%2A> に <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> 負の値とする <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> 数値が正の場合。 この例から派生したクラスである必要があります、 <xref:System.Windows.Forms.TextBox> クラスです。  
  
 [!code-cpp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.TextChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnValidated">
      <MemberSignature Language="C#" Value="protected virtual void OnValidated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnValidated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.Validated" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnValidated%2A> メソッドでは、派生クラスでデリゲートを結び付けずに、イベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.Validated" />
      </Docs>
    </Member>
    <Member MemberName="OnValidating">
      <MemberSignature Language="C#" Value="protected virtual void OnValidating (System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnValidating(class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.ComponentModel.CancelEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.Validating" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnValidating%2A> メソッドでは、派生クラスでデリゲートを結び付けずに、イベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.Validating" />
      </Docs>
    </Member>
    <Member MemberName="OnVisibleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnVisibleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnVisibleChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.VisibleChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Control.OnVisibleChanged%2A> メソッドでは、派生クラスでデリゲートを結び付けずに、イベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例は、イベント発生のメソッドは、実行すると実行、 <xref:System.Windows.Forms.Control.Text%2A> プロパティ値が変更されます。<xref:System.Windows.Forms.Control> クラス名のパターンをいくつかの方法には `On`*PropertyName*`Changed` 向上させ、対応する *PropertyName*`Changed` イベント時に、 *PropertyName* 値の変更 \(*PropertyName* 、対応するプロパティの名前を表します\)。  
  
 次のコードを変更する例、 <xref:System.Windows.Forms.Control.ForeColor%2A> の <xref:System.Windows.Forms.TextBox> 通貨データを表示するクラスを派生します。 例では、文字列に変換する 10 進数と変更、 <xref:System.Windows.Forms.Control.ForeColor%2A> に <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> 負の値とする <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> 数値が正の場合。 この例から派生したクラスである必要があります、 <xref:System.Windows.Forms.TextBox> クラスです。  
  
 [!code-cpp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control\_OnPropertyChangedEvents\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.VisibleChanged" />
        <altmember cref="P:System.Windows.Forms.Control.Visible" />
        <altmember cref="M:System.Windows.Forms.Control.Show" />
        <altmember cref="M:System.Windows.Forms.Control.Hide" />
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Padding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの埋め込みを取得または設定します。</summary>
        <value>コントロールの内部の間隔特性を表す <see cref="T:System.Windows.Forms.Padding" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 などのコンテナーの <xref:System.Windows.Forms.GroupBox> と <xref:System.Windows.Forms.TabControl>, 、 <xref:System.Windows.Forms.Control.Padding%2A> プロパティを取得または設定、それぞれ <xref:System.Windows.Forms.Control.DisplayRectangle%2A> プロパティです。<xref:System.Windows.Forms.ScrollableControl.DockPadding%2A?displayProperty=fullName> プロパティに等しい、 <xref:System.Windows.Forms.Control.Padding%2A?displayProperty=fullName> プロパティです。  
  
 コントロールの既定値が表示される <xref:System.Windows.Forms.Control.Padding%2A> Windows ユーザー インターフェイスのガイドラインの近くにある程度であります。 いくつかの調整は、特定のアプリケーションに必要な可能性があります。  
  
 実装するすべてのコントロール <xref:System.Windows.Forms.Control.GetPreferredSize%2A> の量だけ拡大 <xref:System.Windows.Forms.Control.Padding%2A> と <xref:System.Windows.Forms.Control.AutoSize%2A> は `true`です。  
  
 次のコントロールは使用しないで <xref:System.Windows.Forms.Control.Padding%2A>:  
  
-   コントロールを実装しない <xref:System.Windows.Forms.Control.AutoSize%2A> を通じて <xref:System.Windows.Forms.Control.GetPreferredSize%2A>  
  
-   直接継承するカスタム コントロール <xref:System.Windows.Forms.Control>  
  
-   <xref:System.Windows.Forms.AxHost>  
  
-   <xref:System.Windows.Forms.ComboBox>  
  
-   <xref:System.Windows.Forms.DataGridView>  
  
-   <xref:System.Windows.Forms.DateTimePicker>  
  
-   <xref:System.Windows.Forms.HScrollBar>  
  
-   <xref:System.Windows.Forms.ListView>  
  
-   <xref:System.Windows.Forms.MaskedTextBox>  
  
-   <xref:System.Windows.Forms.MonthCalendar>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.PropertyGrid>  
  
-   <xref:System.Windows.Forms.RichTextBox>  
  
-   <xref:System.Windows.Forms.SplitContainer>  
  
-   <xref:System.Windows.Forms.TextBox>  
  
-   <xref:System.Windows.Forms.TextBoxBase>  
  
-   <xref:System.Windows.Forms.TreeView>  
  
-   <xref:System.Windows.Forms.VScrollBar>  
  
-   <xref:System.Windows.Forms.WebBrowser>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaddingChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PaddingChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PaddingChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.PaddingChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの埋め込みが変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.Control.PaddingChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行するから継承する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.Control>, など、 <xref:System.Windows.Forms.Button> または <xref:System.Windows.Forms.ComboBox>です。 インスタンスを名前 `Control1` イベント ハンドラーが関連付けられていることを確認し、 <xref:System.Windows.Forms.Control.PaddingChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#41](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#41)]
 [!code-vb[System.Windows.Forms.EventExamples\#41](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#41)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Paint">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.PaintEventHandler Paint;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.PaintEventHandler Paint" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Paint" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PaintEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールが再描画されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.Paint> イベントは、コントロールが再描画されると発生します。 インスタンスを渡す <xref:System.Windows.Forms.PaintEventArgs> を処理するメソッドを <xref:System.Windows.Forms.Control.Paint> イベントです。  
  
 外観が異なると、新しいカスタム コントロールまたは継承されたコントロールを作成するときに、オーバーライドすることで、コントロールの表示にコードを提供する必要があります、 <xref:System.Windows.Forms.Control.OnPaint%2A> メソッドです。 詳細については、次を参照してください。 [OnPaint メソッドのオーバーライド](http://msdn.microsoft.com/ja-jp/e9ca2723-0107-4540-bb21-4f5ffb4a9906) と [カスタム コントロールの描画およびレンダリング](http://msdn.microsoft.com/ja-jp/a09dbf76-0966-4cbf-a66a-2083ba98e068)します。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例を作成、 <xref:System.Windows.Forms.PictureBox> 使用してフォーム上のコントロール、 <xref:System.Windows.Forms.Control.Paint> に描画するイベントです。  
  
 [!code-cpp[Control.Paint\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Paint/CPP/form1.cpp#1)]
 [!code-csharp[Control.Paint\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Paint/CS/form1.cs#1)]
 [!code-vb[Control.Paint\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Paint/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control Parent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの親コンテナーを取得または設定します。</summary>
        <value>コントロールの親コントロールまたはコンテナー コントロールを表す <see cref="T:System.Windows.Forms.Control" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 設定、 <xref:System.Windows.Forms.Control.Parent%2A> プロパティの値を `null` からコントロールを削除、 <xref:System.Windows.Forms.Control.ControlCollection> の現在の親コントロールです。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Windows.Forms.Control.Parent%2A> プロパティおよび <xref:System.Windows.Forms.Control.FindForm%2A> ボタンと、フォームの親コントロールのプロパティを設定する方法です。  
  
 [!code-cpp[Control.FindForm\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.FindForm/CPP/form1.cpp#1)]
 [!code-csharp[Control.FindForm\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.FindForm/CS/form1.cs#1)]
 [!code-vb[Control.FindForm\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.FindForm/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows to get this property value. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="P:System.Windows.Forms.Control.Controls" />
        <altmember cref="T:System.Windows.Forms.Control.ControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="ParentChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ParentChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ParentChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ParentChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.Parent" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、 <xref:System.Windows.Forms.Control.Parent%2A> プロパティがプログラムの変更やユーザー操作によって変更します。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Parent" />
      </Docs>
    </Member>
    <Member MemberName="PerformLayout">
      <MemberSignature Language="C#" Value="public void PerformLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PerformLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.PerformLayout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールがレイアウト ロジックをすべての子コントロールに適用するように強制します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Windows.Forms.Control.SuspendLayout%2A> メソッドを呼び出す前に呼び出した、 <xref:System.Windows.Forms.Control.PerformLayout%2A> 、メソッド、 <xref:System.Windows.Forms.Control.Layout> イベントが抑制されます。  
  
 <xref:System.Windows.Forms.LayoutEventArgs.AffectedControl%2A> と <xref:System.Windows.Forms.LayoutEventArgs.AffectedProperty%2A> のプロパティ、 <xref:System.Windows.Forms.LayoutEventArgs> に設定されて作成 `null` 場合は値が指定されていない場合に、 <xref:System.Windows.Forms.Control.PerformLayout%2A> メソッドが呼び出されました。  
  
   
  
## 例  
 次のコード例は、<xref:System.Windows.Forms.Control.PerformLayout%2A> メソッドの使用方法を示します。 方法も紹介しています、 <xref:System.Windows.Forms.Control.Layout> イベントが発生します。 この例では、 `Click` のイベント ハンドラーを `Button1` を明示的に呼び出さない <xref:System.Windows.Forms.Control.PerformLayout%2A>します。`Click` のイベント ハンドラーを `Button2` を暗黙的に呼び出す <xref:System.Windows.Forms.Control.PerformLayout%2A>します。<xref:System.Windows.Forms.Control.PerformLayout%2A> フォームが読み込まれるときに呼び出されます。`Button3` コントロールは、読み込まれるときの状態に戻ります。 いずれの場合、 <xref:System.Windows.Forms.Control.Layout> イベントが発生します。  
  
 これは、完全な例です。 例を実行するには、空白のフォームに次のコードを貼り付けます。  
  
 [!code-cpp[System.Windows.Forms.Control.PerformLayout\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.PerformLayout/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.Control.PerformLayout\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.PerformLayout/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.PerformLayout\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.PerformLayout/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.ResumeLayout" />
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImageLayout" />
      </Docs>
    </Member>
    <Member MemberName="PerformLayout">
      <MemberSignature Language="C#" Value="public void PerformLayout (System.Windows.Forms.Control affectedControl, string affectedProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PerformLayout(class System.Windows.Forms.Control affectedControl, string affectedProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.PerformLayout(System.Windows.Forms.Control,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="affectedControl" Type="System.Windows.Forms.Control" />
        <Parameter Name="affectedProperty" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="affectedControl">最近変更されたコントロールを表す <see cref="T:System.Windows.Forms.Control" />。</param>
        <param name="affectedProperty">コントロールで最近変更されたプロパティの名前。</param>
        <summary>コントロールがレイアウト ロジックをすべての子コントロールに適用するように強制します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Windows.Forms.Control.SuspendLayout%2A> メソッドを呼び出す前に呼び出した、 <xref:System.Windows.Forms.Control.PerformLayout%2A> 、メソッド、 <xref:System.Windows.Forms.Control.Layout> イベントが抑制されます。  
  
 `affectedControl` と `affectedProperty` パラメーター両方に設定できます `null`します。 そのため、 <xref:System.Windows.Forms.LayoutEventArgs.AffectedControl%2A> と <xref:System.Windows.Forms.LayoutEventArgs.AffectedProperty%2A> のプロパティ、 <xref:System.Windows.Forms.LayoutEventArgs> に設定するために作成 `null`します。  
  
   
  
## 例  
 次のコード例は、<xref:System.Windows.Forms.Control.PerformLayout%2A> メソッドの使用方法を示します。 方法も紹介しています、 <xref:System.Windows.Forms.Control.Layout> イベントが発生します。 この例では、 `Click` のイベント ハンドラーを `Button1` を明示的に呼び出さない <xref:System.Windows.Forms.Control.PerformLayout%2A>します。`Click` のイベント ハンドラーを `Button2` を暗黙的に呼び出す <xref:System.Windows.Forms.Control.PerformLayout%2A>します。<xref:System.Windows.Forms.Control.PerformLayout%2A> フォームが読み込まれるときに呼び出されます。`Button3` コントロールは、読み込まれるときの状態に戻ります。 いずれの場合、 <xref:System.Windows.Forms.Control.Layout> イベントが発生します。  
  
 これは、完全な例です。 例を実行するには、空白のフォームに次のコードを貼り付けます。  
  
 [!code-cpp[System.Windows.Forms.Control.PerformLayout\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.PerformLayout/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.Control.PerformLayout\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.PerformLayout/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.PerformLayout\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.PerformLayout/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.ResumeLayout" />
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImageLayout" />
      </Docs>
    </Member>
    <Member MemberName="PointToClient">
      <MemberSignature Language="C#" Value="public System.Drawing.Point PointToClient (System.Drawing.Point p);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Point PointToClient(valuetype System.Drawing.Point p) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.PointToClient(System.Drawing.Point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="p">画面座標で示された変換対象の <see cref="T:System.Drawing.Point" />。</param>
        <summary>指定した画面上のポイントを計算してクライアント座標を算出します。</summary>
        <returns>変換された <see cref="T:System.Drawing.Point" />、<see cref="T:System.Drawing.Point" /> をクライアント座標で表す <paramref name="p" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例によりイメージまたはイメージ ファイルをフォームにドラッグして、上の点で、表示するユーザーが削除されます。<xref:System.Windows.Forms.Control.OnPaint%2A> メソッドをオーバーライドして、フォームが描画されるたびに、イメージを再描画。 それ以外の場合イメージは、次回の再描画するまで存続はのみです。<xref:System.Windows.Forms.Control.DragEnter> イベント処理メソッドは、フォームにドラッグされているデータの種類を決定し、適切なフィードバックを提供します。<xref:System.Windows.Forms.Control.DragDrop> 場合、イベント処理メソッドが、フォームの画像を表示、 <xref:System.Drawing.Image> データから作成できます。<xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=fullName> と <xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=fullName> 値は、画面座標、例では、 <xref:System.Windows.Forms.Control.PointToClient%2A> をクライアント座標に変換するメソッドです。  
  
 [!code-cpp[Windows.Forms.Control.DragOperations\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CPP/imagedrag.cpp#1)]
 [!code-csharp[Windows.Forms.Control.DragOperations\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CS/imagedrag.cs#1)]
 [!code-vb[Windows.Forms.Control.DragOperations\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/VB/imagedrag.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Point" />
        <altmember cref="M:System.Windows.Forms.Control.PointToScreen(System.Drawing.Point)" />
      </Docs>
    </Member>
    <Member MemberName="PointToScreen">
      <MemberSignature Language="C#" Value="public System.Drawing.Point PointToScreen (System.Drawing.Point p);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Point PointToScreen(valuetype System.Drawing.Point p) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.PointToScreen(System.Drawing.Point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="p">クライアント座標で示された変換対象の <see cref="T:System.Drawing.Point" />。</param>
        <summary>指定したクライアント ポイントを計算して画面座標を算出します。</summary>
        <returns>変換された <see cref="T:System.Drawing.Point" />、<see cref="T:System.Drawing.Point" /> を画面座標で表す <paramref name="p" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.Control.BackColor%2A>, 、<xref:System.Windows.Forms.Control.RectangleToScreen%2A>, 、<xref:System.Windows.Forms.Control.PointToScreen%2A>, 、<xref:System.Windows.Forms.Control.MouseButtons%2A>, 、<xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=fullName>, 、および <xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=fullName> メンバーです。 例を実行するには、Form1 という名前のフォームに次のコードを貼り付けますいくつかのコントロールを格納しています。 この例で必要とする、 <xref:System.Windows.Forms.Control.MouseDown>, 、<xref:System.Windows.Forms.Control.MouseMove>, 、および <xref:System.Windows.Forms.Control.MouseUp> イベントは、この例で定義されているイベント ハンドラーに接続しています。  
  
 [!code-cpp[System.Windows.Forms.RectangleToScreen\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.RectangleToScreen\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.RectangleToScreen\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Point" />
        <altmember cref="M:System.Windows.Forms.Control.PointToClient(System.Drawing.Point)" />
      </Docs>
    </Member>
    <Member MemberName="PreferredSize">
      <MemberSignature Language="C#" Value="public System.Drawing.Size PreferredSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size PreferredSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.PreferredSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールが適合する四角形領域のサイズを取得します。</summary>
        <value>高さおよび幅をピクセル単位で格納した <see cref="T:System.Drawing.Size" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreProcessControlMessage">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.PreProcessControlState PreProcessControlMessage (ref System.Windows.Forms.Message msg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Forms.PreProcessControlState PreProcessControlMessage(valuetype System.Windows.Forms.Message msg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.PreProcessControlMessage(System.Windows.Forms.Message@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PreProcessControlState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="msg">処理するメッセージを表す <see cref="T:System.Windows.Forms.Message" />。</param>
        <summary>キーボード メッセージまたは入力メッセージがディスパッチされる前に、メッセージ ループ内の入力メッセージを前処理します。</summary>
        <returns>
          <see cref="T:System.Windows.Forms.PreProcessControlState" /> のいずれかの値。<see cref="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)" /> が <see langword="true" /> と <see langword="false" /> のどちらであるか、さらに、<see cref="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)" /> または <see cref="M:System.Windows.Forms.Control.IsInputChar(System.Char)" /> が <see langword="true" /> と <see langword="false" /> のどちらであるかによって異なります。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreProcessMessage">
      <MemberSignature Language="C#" Value="public virtual bool PreProcessMessage (ref System.Windows.Forms.Message msg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PreProcessMessage(valuetype System.Windows.Forms.Message msg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="msg">処理するメッセージを表す、参照渡しされた <see cref="T:System.Windows.Forms.Message" />。 有効な値は、WM\_KEYDOWN、WM\_SYSKEYDOWN、WM\_CHAR、および WM\_SYSCHAR です。</param>
        <summary>キーボード メッセージまたは入力メッセージがディスパッチされる前に、メッセージ ループ内の入力メッセージを前処理します。</summary>
        <returns>メッセージがコントロールによって処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.PreProcessMessage%2A> ディスパッチされる前に入力メッセージのプリプロセスを実行するアプリケーションのメッセージのループによって呼び出されます。 値の `msg` パラメーターは、WM\_KEYDOWN、WM\_SYSKEYDOWN、WM\_CHAR、および wm\_syschar です。  
  
 オーバーライドする場合 <xref:System.Windows.Forms.Control.PreProcessMessage%2A>, 、コントロールを返す必要があります `true` をメッセージを処理したことを示します。 結果、コントロールによって処理されないメッセージを `base.PreProcessMessage` 返される必要があります。 コントロールは通常メソッドのオーバーライドより専門的ななど <xref:System.Windows.Forms.Control.IsInputChar%2A>, 、<xref:System.Windows.Forms.Control.IsInputKey%2A>, 、<xref:System.Windows.Forms.Control.ProcessCmdKey%2A>, 、<xref:System.Windows.Forms.Control.ProcessDialogChar%2A>, 、または <xref:System.Windows.Forms.Control.ProcessDialogKey%2A> オーバーライドする代わりに <xref:System.Windows.Forms.Control.PreProcessMessage%2A>します。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows for the immediate caller to call this method. Associated enumeration: **languageKeyword tag is not supported!!!!**  
 value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.PreviewKeyDownEventHandler PreviewKeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.PreviewKeyDownEventHandler PreviewKeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.PreviewKeyDown" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PreviewKeyDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このコントロールにフォーカスがあるときにキーが押された場合、<see cref="E:System.Windows.Forms.Control.KeyDown" /> イベントの前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 タブ、戻り値、esc キー、方向キーなどのいくつかのキー入力は、キーの押下を入力しないと見なされるために通常いくつかのコントロールで無視されます。 たとえば、既定では、 <xref:System.Windows.Controls.Button> コントロールは、方向キーを無視します。 通常、方向キーを押すと、前または次のコントロールにフォーカスとします。 ナビゲーション キーとキーを押す通常これらのキーを発生させません矢印キーの方が、 <xref:System.Windows.Forms.Control.KeyDown> イベントを<xref:System.Windows.Controls.Button>です。 ただし、用のキー、矢印キーを押して、 <xref:System.Windows.Controls.Button> は生成、 <xref:System.Windows.Forms.Control.PreviewKeyDown> イベントです。 処理することにより、 <xref:System.Windows.Forms.Control.PreviewKeyDown> イベントを <xref:System.Windows.Controls.Button> と設定、 <xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A> プロパティを `true`, を上げることができます、 <xref:System.Windows.Forms.Control.KeyDown> 、方向キーが押されたときにイベントです。 ただし、方向キーを処理するとフォーカスは前または次のコントロールに移動できなくします。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例を示しています、 <xref:System.Windows.Forms.Button> を含む、 <xref:System.Windows.Forms.ContextMenuStrip>です。 ときに、 <xref:System.Windows.Forms.Button> にフォーカスがあるし、上矢印または下矢印キーを押して、 <xref:System.Windows.Forms.ContextMenuStrip> が表示されます。<xref:System.Windows.Forms.Control.PreviewKeyDown> イベント ハンドラーは、上矢印または下矢印キーを押したときを検出し、設定、 <xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A> プロパティを `true`します。 これを発生させる、 <xref:System.Windows.Forms.Control.KeyDown> イベント表示できるように、 <xref:System.Windows.Forms.ContextMenuStrip>です。 の任意のロジックが入れないように、 <xref:System.Windows.Forms.Control.PreviewKeyDown> 設定するより他のイベント ハンドラー、 <xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A> プロパティです。 ロジックを配置する代わりに、 <xref:System.Windows.Forms.Control.KeyDown> イベント ハンドラーです。  
  
 [!code-csharp[System.Windows.Forms.Control.PreviewKeyDown\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/system.windows.forms.control.previewkeydown/cs/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.PreviewKeyDown\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.windows.forms.control.previewkeydown/vb/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessCmdKey">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessCmdKey (ref System.Windows.Forms.Message msg, System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ProcessCmdKey(valuetype System.Windows.Forms.Message msg, valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="msg">処理するウィンドウ メッセージを表す、参照渡しされた <see cref="T:System.Windows.Forms.Message" />。</param>
        <param name="keyData">処理するキーを表す <see cref="T:System.Windows.Forms.Keys" /> 値の 1 つ。</param>
        <summary>コマンド キーを処理します。</summary>
        <returns>文字がコントロールによって処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、メッセージのプリプロセス コマンド キーを処理中に呼び出されます。 コマンド キーは、通常の入力キーに常に優先されるキーです。 コマンド キーには、アクセラレータ、およびメニューのショートカットなどがあります。 メソッドが返す必要があります `true` コマンド キーを処理したことを示すために、または `false` キーがコマンド キーでないことを示します。 このメソッドは、コントロールは、Windows フォーム アプリケーションまたは ActiveX コントロールとしてホストされている場合にのみ呼び出されます。  
  
 <xref:System.Windows.Forms.Control.ProcessCmdKey%2A> メソッドはまず、コントロールがあるかどうかを判断、 <xref:System.Windows.Forms.ContextMenu>, 、でき、その場合、 <xref:System.Windows.Forms.ContextMenu> コマンド キーを処理します。 キーが、親に渡されるコマンドのキーは、メニューのショートカットではありません、コントロールに親がある場合は、 <xref:System.Windows.Forms.Control.ProcessCmdKey%2A> メソッドです。 最終的な結果は、そのコマンドがキーは「バブル イベント」コントロールの階層構造です。 だけでなく、ユーザーが押されたキー、キーのデータもそれを示しますに修飾子キーが押された場合に、キーと同時にします。 修飾子キーには、shift キーを押し、CTRL、ALT キーが含まれます。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for the immediate caller and inheriting classes to call this method. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
        <block subset="none" type="overrides">
          <para>When overriding the <see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" /> method in a derived class, a control should return <see langword="true" /> to indicate that it has processed the key. For keys that are not processed by the control, the result of calling the base class's <see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" /> method should be returned. Controls will seldom, if ever, need to override this method.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ProcessDialogChar">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessDialogChar (char charCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ProcessDialogChar(char charCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="charCode">処理対象の文字。</param>
        <summary>ダイアログ文字を処理します。</summary>
        <returns>文字がコントロールによって処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、メッセージを前処理コントロールのニーモニックなどのダイアログ文字を処理するときに呼び出されます。 場合にのみ、このメソッドを呼び出す、 <xref:System.Windows.Forms.Control.IsInputChar%2A> メソッドは、コントロールは、文字を処理していないことを示します。<xref:System.Windows.Forms.Control.ProcessDialogChar%2A> メソッドは、親に文字を送信するだけで <xref:System.Windows.Forms.Control.ProcessDialogChar%2A> メソッド、または返します `false` コントロールに親がありません。<xref:System.Windows.Forms.Form> クラス ダイアログ文字の実際の処理を実行するには、このメソッドをオーバーライドします。 このメソッドは、コントロールは、Windows フォーム アプリケーションまたは ActiveX コントロールとしてホストされている場合にのみ呼び出されます。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows for inheriting classes to call this method. Associated enumeration: **languageKeyword tag is not supported!!!!**  
 value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <block subset="none" type="overrides">
          <para>When overriding the <see cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" /> method in a derived class, a control should return <see langword="true" /> to indicate that it has processed the character. For characters that are not processed by the control, the result of calling the base class's <see cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" /> method should be returned. Controls will seldom, if ever, need to override this method.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ProcessDialogKey">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessDialogKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ProcessDialogKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">処理するキーを表す <see cref="T:System.Windows.Forms.Keys" /> 値の 1 つ。</param>
        <summary>ダイアログ キーを処理します。</summary>
        <returns>キーがコントロールによって処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、タブ、戻り値、esc キー、および矢印キーなどのダイアログ文字を処理するメッセージのプリプロセス時に呼び出されます。 場合にのみ、このメソッドを呼び出す、 <xref:System.Windows.Forms.Control.IsInputKey%2A> メソッドは、コントロールは、キーを処理していないことを示します。<xref:System.Windows.Forms.Control.ProcessDialogKey%2A> 単純に文字を親に送信 <xref:System.Windows.Forms.Control.ProcessDialogKey%2A> メソッド、または返します `false`コントロールに親がありません。<xref:System.Windows.Forms.Form> クラス ダイアログ キーの実際の処理を実行するには、このメソッドをオーバーライドします。 このメソッドは、コントロールは、Windows フォーム アプリケーションまたは ActiveX コントロールとしてホストされている場合にのみ呼び出されます。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows for inheriting classes to call this method. Associated enumeration: **languageKeyword tag is not supported!!!!**  
 value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <block subset="none" type="overrides">
          <para>When overriding the <see cref="M:System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)" /> method in a derived class, a control should return <see langword="true" /> to indicate that it has processed the key. For keys that are not processed by the control, the result of calling the base class's <see cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" /> method should be returned. Controls will seldom, if ever, need to override this method.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ProcessKeyEventArgs">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessKeyEventArgs (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ProcessKeyEventArgs(valuetype System.Windows.Forms.Message m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">処理するウィンドウ メッセージを表す、参照渡しされた <see cref="T:System.Windows.Forms.Message" />。</param>
        <summary>キー メッセージを処理し、適切なコントロール イベントを生成します。</summary>
        <returns>メッセージがコントロールによって処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コントロールがキーボード メッセージを受け取るこのメソッドが呼び出されます。 呼び出して、メッセージの適切なキー イベントを生成するため、このメソッドは、 <xref:System.Windows.Forms.Control.OnKeyPress%2A>, 、<xref:System.Windows.Forms.Control.OnKeyDown%2A>, 、または <xref:System.Windows.Forms.Control.OnKeyUp%2A> メソッドです。`m` パラメーターには、処理する必要があるウィンドウのメッセージが含まれています。 値の <xref:System.Windows.Forms.Message.Msg%2A?displayProperty=fullName> プロパティは、WM\_CHAR、WM\_KEYDOWN、WM\_SYSKEYDOWN、WM\_KEYUP、WM\_SYSKEYUP、および WM\_IME\_CHAR います。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows for inheriting classes to call this method. Associated enumeration: **languageKeyword tag is not supported!!!!**  
 value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for the immediate caller to call unmanaged code. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <block subset="none" type="overrides">
          <para>When overriding the <see cref="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" /> method in a derived class, a control should return <see langword="true" /> to indicate that it has processed the key. For keys that are not processed by the control, the result of calling the base class's <see cref="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" /> method should be returned. Controls will seldom, if ever, need to override this method.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ProcessKeyMessage">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessKeyMessage (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ProcessKeyMessage(valuetype System.Windows.Forms.Message m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ProcessKeyMessage(System.Windows.Forms.Message@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">処理するウィンドウ メッセージを表す、参照渡しされた <see cref="T:System.Windows.Forms.Message" />。</param>
        <summary>キーボード メッセージを処理します。</summary>
        <returns>メッセージがコントロールによって処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コントロールがキーボード メッセージを受け取るこのメソッドが呼び出されます。 メソッドが最初に、コントロールが親を持つかどうかを決定します。そのため、アプリケーションが呼び出した場合、親の <xref:System.Windows.Forms.Control.ProcessKeyPreview%2A> メソッドです。 場合、親の <xref:System.Windows.Forms.Control.ProcessKeyPreview%2A> メソッドは、メッセージを処理しません、 <xref:System.Windows.Forms.Control.ProcessKeyEventArgs%2A> 適切なキーボード イベントを生成するメソッドが呼び出されます。`m` パラメーターには、処理する必要があるウィンドウのメッセージが含まれています。 値の <xref:System.Windows.Forms.Message.Msg%2A?displayProperty=fullName> プロパティは、WM\_CHAR、WM\_KEYDOWN、WM\_SYSKEYDOWN、WM\_KEYUP、および WM\_SYSKEYUP います。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows for inheriting classes to call this method. Associated enumeration: **languageKeyword tag is not supported!!!!**  
 value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <block subset="none" type="overrides">
          <para>When overriding the <see cref="M:System.Windows.Forms.Control.ProcessKeyMessage(System.Windows.Forms.Message@)" /> method, a control should return <see langword="true" /> to indicate that it has processed the key. For keys that are not processed by the control, the result of the base class's <see cref="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" /> should be returned. Controls will seldom, if ever, need to override this method.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
        <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
        <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="ProcessKeyPreview">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessKeyPreview (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ProcessKeyPreview(valuetype System.Windows.Forms.Message m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">処理するウィンドウ メッセージを表す、参照渡しされた <see cref="T:System.Windows.Forms.Message" />。</param>
        <summary>キーボード メッセージをプレビューします。</summary>
        <returns>メッセージがコントロールによって処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 子コントロールがキーボード メッセージを受信すると、子コントロールがこのメソッドが呼び出されます。 子コントロールは、メッセージのキーボード イベントを生成する前に、このメソッドを呼び出します。 このメソッドが戻る場合 `true`, 、子コントロールが処理されたと見なされ、キーボード イベントを生成しません。`m` パラメーターには、プレビューするウィンドウ メッセージが含まれています。 値の <xref:System.Windows.Forms.Message.Msg%2A?displayProperty=fullName> プロパティは、WM\_CHAR、WM\_KEYDOWN、WM\_SYSKEYDOWN、WM\_KEYUP、および WM\_SYSKEYUP います。<xref:System.Windows.Forms.Control.ProcessKeyPreview%2A> メソッドは、親に文字を送信するだけで <xref:System.Windows.Forms.Control.ProcessKeyPreview%2A> メソッド、または返します `false` コントロールに親がありません。<xref:System.Windows.Forms.Form> クラス ダイアログ キーの実際の処理を実行するには、このメソッドをオーバーライドします。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows for inheriting classes to call this method. Associated enumeration: **languageKeyword tag is not supported!!!!**  
 value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for the immediate caller to call unmanaged code. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <block subset="none" type="overrides">
          <para>When overriding the <see cref="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)" /> method in a derived class, a control should return <see langword="true" /> to indicate that it has processed the key. For keys that are not processed by the control, the result of calling the base class's <see cref="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)" /> method should be returned.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
        <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
        <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="ProcessMnemonic">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessMnemonic (char charCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ProcessMnemonic(char charCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ProcessMnemonic(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="charCode">処理対象の文字。</param>
        <summary>ニーモニック文字を処理します。</summary>
        <returns>文字がコントロールによってニーモニックとして処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、コントロールのニーモニック文字を処理する機会を与えるために呼び出されます。 メソッドは、コントロールがニーモニックを処理する状態になっているかどうか特定の文字がニーモニックを表しているかどうかを決定する必要があります。 かどうか、メソッドの動作を実行ニーモニックと戻り値に関連付けられている `true`します。 場合は、メソッドが返す、 `false`です。 多くの場合、このメソッドの実装を使用して、 <xref:System.Windows.Forms.Control.IsMnemonic%2A> コントロールのテキストでニーモニックが特定の文字に一致するかどうかを決定する方法です。  
  
 例:  
  
```csharp  
if (CanSelect && IsMnemonic(charCode, MyControl.Text) {  
      // Perform action associated with mnemonic.  
       }  
```  
  
 この既定の実装の <xref:System.Windows.Forms.Control.ProcessMnemonic%2A> メソッドは単に返す `false` コントロールにアクセラレータ キーがないことを表します。  
  
   
  
## 例  
 次のコード例をオーバーライドする button クラスの拡張機能を示しています、 <xref:System.Windows.Forms.Control.ProcessMnemonic%2A> メソッドがカスタム動作。 この例では、使用についても示します、 <xref:System.Windows.Forms.Control.CanSelect%2A> と <xref:System.Windows.Forms.Control.IsMnemonic%2A> プロパティです。 実行には、この例は、同じファイル内のフォーム クラスを使用して、次のコードを貼り付けます。 型のボタンを追加する `MnemonicButton` をフォームにします。  
  
 [!code-cpp[System.Windows.Forms.ProcessMnemonic\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ProcessMnemonic/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ProcessMnemonic\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ProcessMnemonic/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ProcessMnemonic\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ProcessMnemonic/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows for inheriting classes to call this method. Associated enumeration: **languageKeyword tag is not supported!!!!**  
 value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <altmember cref="M:System.Windows.Forms.Control.IsMnemonic(System.Char,System.String)" />
        <altmember cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="ProductName">
      <MemberSignature Language="C#" Value="public string ProductName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProductName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ProductName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールを格納しているアセンブリの製品名を取得します。</summary>
        <value>コントロールを格納しているアセンブリの製品名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.ProductName%2A> プロパティは読み取り専用プロパティです。 このプロパティの値を変更するには、設定、 <xref:System.Reflection.AssemblyProductAttribute.Product%2A> のプロパティの値、 <xref:System.Reflection.AssemblyProductAttribute>です。 次の c\# コード セットの行、 <xref:System.Windows.Forms.Control.ProductName%2A> プロパティです。  
  
```  
[assembly: AssemblyProduct("MyApplication")]  
```  
  
> [!NOTE]
>  会社名、製品名、および製品のバージョンを指定することを強くお勧めします。 など、Windows フォームの機能の使用を有効にこの情報を提供する <xref:System.Windows.Forms.Application.UserAppDataPath%2A?displayProperty=fullName> をしやすいように、"Certified for Windows"プログラムに準拠するアプリケーションを作成します。 Certified for Windows プログラムの詳細については、http:\/\/msdn.microsoft.com\/certification を参照してください。  
  
   
  
## 例  
 次のコード例は、アプリケーションに関する情報を表示、 <xref:System.Windows.Forms.Label> に含まれる、 <xref:System.Windows.Forms.Form>です。 この例で必要とする、 <xref:System.Windows.Forms.Control.CompanyName%2A>, 、<xref:System.Windows.Forms.Control.ProductName%2A> と <xref:System.Windows.Forms.Control.ProductVersion%2A> が設定されています。  
  
 [!code-cpp[Windows.Forms.Control Properties3\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties3/CPP/aboutdialog.cpp#1)]
 [!code-csharp[Windows.Forms.Control Properties3\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties3/CS/aboutdialog.cs#1)]
 [!code-vb[Windows.Forms.Control Properties3\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties3/VB/aboutdialog.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.AssemblyProductAttribute.Product" />
      </Docs>
    </Member>
    <Member MemberName="ProductVersion">
      <MemberSignature Language="C#" Value="public string ProductVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProductVersion" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ProductVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールを格納しているアセンブリのバージョンを取得します。</summary>
        <value>コントロールを格納しているアセンブリのファイル バージョン。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.ProductVersion%2A> プロパティは読み取り専用プロパティです。 このプロパティの値を変更するには、設定、 <xref:System.Reflection.AssemblyVersionAttribute.Version%2A> のプロパティの値、 <xref:System.Reflection.AssemblyVersionAttribute>です。 次の c\# コード セットの行、 <xref:System.Windows.Forms.Control.ProductVersion%2A> プロパティです。  
  
```  
[assembly: AssemblyVersion("1.0.1")]  
```  
  
> [!NOTE]
>  会社名、製品名、および製品のバージョンを指定することを強くお勧めします。 など、Windows フォームの機能の使用を有効にこの情報を提供する <xref:System.Windows.Forms.Application.UserAppDataPath%2A?displayProperty=fullName> をしやすいように、"Certified for Windows"プログラムに準拠するアプリケーションを作成します。 Certified for Windows プログラムの詳細については、http:\/\/msdn.microsoft.com\/certification を参照してください。  
  
   
  
## 例  
 次のコード例は、アプリケーションに関する情報を表示、 <xref:System.Windows.Forms.Label> に含まれる、 <xref:System.Windows.Forms.Form>です。 この例で必要とする、 <xref:System.Windows.Forms.Control.CompanyName%2A>, 、<xref:System.Windows.Forms.Control.ProductName%2A> と <xref:System.Windows.Forms.Control.ProductVersion%2A> が設定されています。  
  
 [!code-cpp[Windows.Forms.Control Properties3\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties3/CPP/aboutdialog.cpp#1)]
 [!code-csharp[Windows.Forms.Control Properties3\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties3/CS/aboutdialog.cs#1)]
 [!code-vb[Windows.Forms.Control Properties3\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties3/VB/aboutdialog.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.AssemblyVersionAttribute.Version" />
      </Docs>
    </Member>
    <Member MemberName="PropagatingImeMode">
      <MemberSignature Language="C#" Value="protected static System.Windows.Forms.ImeMode PropagatingImeMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Forms.ImeMode PropagatingImeMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.PropagatingImeMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>反映する IME モードを表すオブジェクトを取得します。</summary>
        <value>反映する IME モードを表すオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryAccessibilityHelp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.QueryAccessibilityHelpEventHandler QueryAccessibilityHelp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.QueryAccessibilityHelpEventHandler QueryAccessibilityHelp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.QueryAccessibilityHelp" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.QueryAccessibilityHelpEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.AccessibleObject" /> がユーザー補助アプリケーションにヘルプを提供したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する必要があります、 <xref:System.Windows.Forms.HelpProvider> F1 キーを押すと、ユーザー補助オブジェクトのヘルプを起動するユーザーを有効にするクラス。 使用して、 <xref:System.Windows.Forms.HelpProvider> で完全な情報が提供する、 <xref:System.Windows.Forms.QueryAccessibilityHelpEventArgs>です。 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例は、ユーザー補助対応のグラフの作成を示しますコントロールを使用して、 <xref:System.Windows.Forms.AccessibleObject> と <xref:System.Windows.Forms.Control.ControlAccessibleObject> をアクセス可能な情報を公開するクラス。 コントロールは、凡例と共に 2 つの曲線をプロットします。`ChartControlAccessibleObject` から派生したクラス `ControlAccessibleObject`, で使用される、 <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> グラフ コントロールのカスタムのアクセス可能な情報を提供するメソッドです。 グラフの凡例は、実際はないため <xref:System.Windows.Forms.Control> \-ベースの制御が、代わりに描画される組み込みれないアクセス可能な情報は、グラフ コントロールでします。 このため、 `ChartControlAccessibleObject` クラスのオーバーライド、 <xref:System.Windows.Forms.AccessibleObject.GetChild%2A> を返すメソッドを `CurveLegendAccessibleObject` 凡例の各部分にアクセス可能な情報を表します。 ユーザー補助対応のアプリケーションでは、このコントロールを使用すると、コントロールは、必要なアクセス可能な情報を提供できます。  
  
 このコード例を示します処理、 <xref:System.Windows.Forms.Control.QueryAccessibilityHelp> イベントです。 参照してください、 <xref:System.Windows.Forms.AccessibleObject> クラスの完全なコード例の概要です。  
  
 [!code-cpp[System.Windows.Forms.AccessibleObject\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/CPP/chartcontrol.cpp#3)]
 [!code-csharp[System.Windows.Forms.AccessibleObject\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/CS/chartcontrol.cs#3)]
 [!code-vb[System.Windows.Forms.AccessibleObject\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/VB/chartcontrol.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.AccessibleObject.GetHelpTopic(System.String@)" />
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.QueryContinueDragEventHandler QueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.QueryContinueDragEventHandler QueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.QueryContinueDrag" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ドラッグ アンド ドロップ操作中に発生し、ドラッグ ソースがドラッグ アンド ドロップ操作をキャンセルする必要があるかどうかを決定できるようにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.QueryContinueDrag> イベントは、ドラッグ アンド ドロップ操作中にキーボードまたはマウス ボタンの状態に変更があると発生します。<xref:System.Windows.Forms.Control.QueryContinueDrag> イベントにより、ドラッグ ソースがドラッグ アンド ドロップ操作をキャンセルする必要があるかどうかを決定します。  
  
 ドラッグ アンド ドロップ操作関連のイベントがどのように、いつ発生するかについて次に示します。  
  
 <xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドは、現在のカーソル位置の下にあるコントロールを決定します。 コントロールが有効なドロップ先であるかどうかを確認します。  
  
 コントロールが有効なドロップ ターゲットである場合、 <xref:System.Windows.Forms.Control.GiveFeedback> ドラッグ アンド ドロップの効果が指定されたイベントが発生します。 ドラッグ アンド ドロップ効果の一覧については、<xref:System.Windows.Forms.DragDropEffects> 列挙体を参照してください。  
  
 マウス カーソルの位置、キーボードの状態、およびマウス ボタンの状態の変更が監視されます。  
  
-   ユーザーがウィンドウの外に移動した場合、<xref:System.Windows.Forms.Control.DragLeave> イベントが生成されます。  
  
-   マウスが別のコントロールに移動した場合は、そのコントロールの <xref:System.Windows.Forms.Control.DragEnter> が生成されます。  
  
-   マウスが移動しても同じコントロール内の場合は、<xref:System.Windows.Forms.Control.DragOver> イベントが生成されます。  
  
 キーボードまたはマウス ボタンの状態に変更がある場合、<xref:System.Windows.Forms.Control.QueryContinueDrag> の値に基づいて、操作をキャンセルするか、イベントが生成され、データをドロップする、ドラッグを継続するかどうか、 <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> プロパティ、イベントの <xref:System.Windows.Forms.QueryContinueDragEventArgs>です。  
  
-   場合の値 <xref:System.Windows.Forms.DragAction> は `Continue`, 、 <xref:System.Windows.Forms.Control.DragOver> イベントは、操作を続行して、 <xref:System.Windows.Forms.Control.GiveFeedback> 適切な視覚的なフィードバックを設定できるように新しい効果イベントが発生します。 有効なドロップ効果の一覧については、<xref:System.Windows.Forms.DragDropEffects> 列挙体を参照してください。  
  
    > [!NOTE]
    >  <xref:System.Windows.Forms.Control.DragOver> と <xref:System.Windows.Forms.Control.GiveFeedback> イベントはペアになって、ユーザーがマウスの位置に関する最新のフィードバックを指定してドロップ ターゲット上でマウスを移動します。  
  
-   場合の値 <xref:System.Windows.Forms.DragAction> は `Drop`, 、ドロップ効果の値がソースに返される、元のアプリケーションは、ソース データに対して適切な操作を実行できるようになどのデータの切り取り、移動、操作だった場合。  
  
-   場合の値 <xref:System.Windows.Forms.DragAction> は `Cancel`, 、 <xref:System.Windows.Forms.Control.DragLeave> イベントが発生します。  
  
 既定では、 <xref:System.Windows.Forms.Control.QueryContinueDrag> イベント セット <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> に `Cancel` で <xref:System.Windows.Forms.DragAction> ESC キーが押された設定する場合 <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> に `Drop` で <xref:System.Windows.Forms.DragAction> 、ミドル ネーム、左右のマウス ボタンが押された場合です。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 2 つのドラッグ アンド ドロップ操作を次のコード例に示します <xref:System.Windows.Forms.ListBox> コントロールです。 呼び出しの例、 <xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッド、ドラッグ操作の開始時にします。 マウスが移動した場合に、ドラッグ操作が開始以上 <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> 中にマウスの位置から、 <xref:System.Windows.Forms.Control.MouseDown> イベントです。<xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> メソッドを使用中にドラッグする項目のインデックスを確認して、 `MouseDown` イベントです。  
  
 例では、ドラッグ アンド ドロップ操作のカスタムのカーソルを使用しても示します。 必要と 2 つの例では、カーソル ファイル`3dwarro.cur` と `3dwno.cur`, 、カスタム ドラッグのアプリケーションのディレクトリに存在および非ドロップ カーソルの場合、それぞれします。 場合に使用されるカスタムのカーソル、 `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> がオンになっています。 カスタムのカーソルが設定されている、 <xref:System.Windows.Forms.Control.GiveFeedback> イベント ハンドラーです。  
  
 キーボードの状態を評価、 <xref:System.Windows.Forms.Control.DragOver> 右側のイベント ハンドラー `ListBox`, ドラッグ操作を決定するには、shift キーを押し、CTRL、alt キーを押し、または CTRL \+ ALT キーの状態に基づいています。 内の場所、 `ListBox` 時にも決定されますが、ドロップが発生する可能性、 `DragOver` イベントです。 削除するデータがない場合、 `String`, 、 <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> に設定されている `None` で <xref:System.Windows.Forms.DragDropEffects>します。 削除の状態を表示する最後に、 `DropLocationLabel`<xref:System.Windows.Forms.Label>します。  
  
 右側にドロップするデータ `ListBox` で決定、 <xref:System.Windows.Forms.Control.DragDrop> イベント ハンドラーと `String` の適切な場所にある値を追加、 `ListBox`です。 ドラッグ操作が、フォームの境界の外側に移動しでドラッグ アンド ドロップ操作を取り消したかどうか、 <xref:System.Windows.Forms.Control.QueryContinueDrag> イベント ハンドラーです。  
  
 このコードの抜粋では、使用方法を示します、 <xref:System.Windows.Forms.Control.QueryContinueDrag> イベントです。 参照してください、 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 完全なコード例のメソッドです。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop\#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#6)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop\#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#6)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop\#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="RaiseDragEvent">
      <MemberSignature Language="C#" Value="protected void RaiseDragEvent (object key, System.Windows.Forms.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseDragEvent(object key, class System.Windows.Forms.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RaiseDragEvent(System.Object,System.Windows.Forms.DragEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="e" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="key">発生させるイベント。</param>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DragEventArgs" />。</param>
        <summary>適切なドラッグ イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.RaiseKeyEvent(System.Object,System.Windows.Forms.KeyEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaiseMouseEvent(System.Object,System.Windows.Forms.MouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaisePaintEvent(System.Object,System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="RaiseKeyEvent">
      <MemberSignature Language="C#" Value="protected void RaiseKeyEvent (object key, System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseKeyEvent(object key, class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RaiseKeyEvent(System.Object,System.Windows.Forms.KeyEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="key">発生させるイベント。</param>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.KeyEventArgs" />。</param>
        <summary>適切なキー イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.RaiseDragEvent(System.Object,System.Windows.Forms.DragEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaiseMouseEvent(System.Object,System.Windows.Forms.MouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaisePaintEvent(System.Object,System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="RaiseMouseEvent">
      <MemberSignature Language="C#" Value="protected void RaiseMouseEvent (object key, System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseMouseEvent(object key, class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RaiseMouseEvent(System.Object,System.Windows.Forms.MouseEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="key">発生させるイベント。</param>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.MouseEventArgs" />。</param>
        <summary>適切なマウス イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.RaiseDragEvent(System.Object,System.Windows.Forms.DragEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaiseKeyEvent(System.Object,System.Windows.Forms.KeyEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaisePaintEvent(System.Object,System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="RaisePaintEvent">
      <MemberSignature Language="C#" Value="protected void RaisePaintEvent (object key, System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaisePaintEvent(object key, class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RaisePaintEvent(System.Object,System.Windows.Forms.PaintEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="key">発生させるイベント。</param>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.PaintEventArgs" />。</param>
        <summary>適切な描画イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.RaiseDragEvent(System.Object,System.Windows.Forms.DragEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaiseKeyEvent(System.Object,System.Windows.Forms.KeyEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaiseMouseEvent(System.Object,System.Windows.Forms.MouseEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="RecreateHandle">
      <MemberSignature Language="C#" Value="protected void RecreateHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RecreateHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RecreateHandle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>強制的にコントロールのハンドルを再作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.RecreateHandle%2A> メソッドは新しいコントロールに必要なパラメーターがからの呼び出しを使用して <xref:System.Windows.Forms.Control.UpdateStyles%2A> に <xref:System.Windows.Forms.Control.CreateParams%2A> 十分ではありません。 このメソッドも呼び出します <xref:System.Windows.Forms.Control.DestroyHandle%2A> と<xref:System.Windows.Forms.Control.CreateHandle%2A> 設定と <xref:System.Windows.Forms.Control.RecreatingHandle%2A> に `true`します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="RecreatingHandle">
      <MemberSignature Language="C#" Value="public bool RecreatingHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RecreatingHandle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.RecreatingHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールが現在そのコントロールのハンドルを再作成中かどうかを示す値を取得します。</summary>
        <value>コントロールが現在そのコントロールのハンドルを再作成中である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.RecreatingHandle%2A> プロパティを返します。 `true` 場合、 <xref:System.Windows.Forms.Control.RecreateHandle%2A> メソッドは、コントロールでは動作しています。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="RectangleToClient">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle RectangleToClient (System.Drawing.Rectangle r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle RectangleToClient(valuetype System.Drawing.Rectangle r) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RectangleToClient(System.Drawing.Rectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="r">画面座標で示された変換対象の <see cref="T:System.Drawing.Rectangle" />。</param>
        <summary>指定した画面上の四角形のサイズと位置をクライアント座標で算出します。</summary>
        <returns>変換された <see cref="T:System.Drawing.Rectangle" />、<see cref="T:System.Drawing.Rectangle" /> をクライアント座標で表す <paramref name="r" />。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Drawing.Rectangle" />
        <altmember cref="M:System.Windows.Forms.Control.RectangleToScreen(System.Drawing.Rectangle)" />
      </Docs>
    </Member>
    <Member MemberName="RectangleToScreen">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle RectangleToScreen (System.Drawing.Rectangle r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle RectangleToScreen(valuetype System.Drawing.Rectangle r) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RectangleToScreen(System.Drawing.Rectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="r">クライアント座標で示された変換対象の <see cref="T:System.Drawing.Rectangle" />。</param>
        <summary>指定したクライアント領域の四角形のサイズと位置を画面座標で算出します。</summary>
        <returns>変換された <see cref="T:System.Drawing.Rectangle" />、<see cref="T:System.Drawing.Rectangle" /> を画面座標で表す <paramref name="p" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.Control.BackColor%2A>, 、<xref:System.Windows.Forms.Control.RectangleToScreen%2A>, 、<xref:System.Windows.Forms.Control.PointToScreen%2A>, 、<xref:System.Windows.Forms.Control.MouseButtons%2A>, 、<xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=fullName>, 、および <xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=fullName> メンバーです。 例を実行するには、という名前のフォームに次のコードを貼り付けます **Form1** いくつかのコントロールを格納しています。 この例で必要とする、 <xref:System.Windows.Forms.Control.MouseDown>, 、<xref:System.Windows.Forms.Control.MouseMove>, 、および <xref:System.Windows.Forms.Control.MouseUp> イベントは、この例で定義されているイベント ハンドラーに接続しています。  
  
 [!code-cpp[System.Windows.Forms.RectangleToScreen\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.RectangleToScreen\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.RectangleToScreen\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Rectangle" />
        <altmember cref="M:System.Windows.Forms.Control.RectangleToClient(System.Drawing.Rectangle)" />
      </Docs>
    </Member>
    <Member MemberName="ReflectMessage">
      <MemberSignature Language="C#" Value="protected static bool ReflectMessage (IntPtr hWnd, ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig bool ReflectMessage(native int hWnd, valuetype System.Windows.Forms.Message m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ReflectMessage(System.IntPtr,System.Windows.Forms.Message@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hWnd" Type="System.IntPtr" />
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="hWnd">メッセージをリフレクションするコントロールのハンドルを表す <see cref="T:System.IntPtr" />。</param>
        <param name="m">リフレクションする Windows メッセージを表す <see cref="T:System.Windows.Forms.Message" />。</param>
        <summary>指定したメッセージを指定したハンドルにバインドされたコントロールにリフレクションします。</summary>
        <returns>メッセージがリフレクションされた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.ReflectMessage%2A> メソッドはインフラストラクチャ メソッドであるし、通常、コードからは呼び出されません。  
  
 場合、 `hWnd` パラメーターが有効なコントロールを表さない、 <xref:System.Windows.Forms.Control.ReflectMessage%2A> メソッドが返す `false`します。  
  
 トップレベル ウィンドウに Windows メッセージが返されるため、 <xref:System.Windows.Forms.Control.ReflectMessage%2A> メソッドを使用してメッセージを送信したコントロールに応答メッセージを伝達します。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows to call this method. Associated enumeration: **languageKeyword tag is not supported!!!!**  
 value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <altmember cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public virtual void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Refresh" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>強制的に、コントロールがクライアント領域を無効化し、直後にそのコントロール自体とその子コントロールを再描画するようにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.Refresh" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.Refresh" /> method so the control and its child controls are invalidated and redrawn.</para>
        </block>
        <altmember cref="M:System.Windows.Forms.Control.Update" />
        <altmember cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)" />
      </Docs>
    </Member>
    <Member MemberName="Region">
      <MemberSignature Language="C#" Value="public System.Drawing.Region Region { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Region Region" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Region" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Region</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールに関連付けられたウィンドウ領域を取得または設定します。</summary>
        <value>コントロールに関連付けられたウィンドウ <see cref="T:System.Drawing.Region" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ウィンドウ領域は、オペレーティング システムが描画を許可されているウィンドウ内のピクセルのコレクションです。 オペレーティング システムでは、ウィンドウ領域の外部にあるウィンドウの任意の部分は表示されません。 コントロールの領域の座標では、コントロールのクライアント領域ではなく、コントロールの左上隅に対して相対的です。  
  
> [!NOTE]
>  地域に含まれるピクセルのコレクションは、連続していないであることができます。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.Control.Region%2A> 角の丸いボタンを作成するプロパティです。 例を実行するには、という名前のボタンを表示するフォームに次のコードを貼り付けます `roundButton`します。 この例で必要とする、 <xref:System.Windows.Forms.Control.Paint> イベントがこの例で定義されているイベント ハンドラーに関連付けられています。  
  
 [!code-cpp[System.Windows.Forms.Control.Region\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.Region/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.Control.Region\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.Region/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.Region\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.Region/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows to set this property value. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="P:System.Windows.Forms.Control.ClientRectangle" />
        <altmember cref="P:System.Windows.Forms.Control.Bounds" />
      </Docs>
    </Member>
    <Member MemberName="RegionChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RegionChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RegionChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.RegionChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.Region" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.Control.RegionChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行するから継承する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.Control>, など、 <xref:System.Windows.Forms.Button> または <xref:System.Windows.Forms.ComboBox>です。 インスタンスを名前 `Control1` イベント ハンドラーが関連付けられていることを確認し、 <xref:System.Windows.Forms.Control.RegionChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#22](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#22)]
 [!code-vb[System.Windows.Forms.EventExamples\#22](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderRightToLeft">
      <MemberSignature Language="C#" Value="protected bool RenderRightToLeft { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RenderRightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.RenderRightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This property has been deprecated. Please use RightToLeft instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このプロパティは使用されなくなりました。</summary>
        <value>コントロールが右から左へ表示される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RescaleConstantsForDpi">
      <MemberSignature Language="C#" Value="protected virtual void RescaleConstantsForDpi (int deviceDpiOld, int deviceDpiNew);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RescaleConstantsForDpi(int32 deviceDpiOld, int32 deviceDpiNew) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RescaleConstantsForDpi(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deviceDpiOld" Type="System.Int32" />
        <Parameter Name="deviceDpiNew" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="deviceDpiOld">変更前の DPI 値。</param>
        <param name="deviceDpiNew">変更後の DPI 値。</param>
        <summary>DPI の変更が発生したときに、コントロールの再スケーリングの定数を提供します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetBackColor">
      <MemberSignature Language="C#" Value="public virtual void ResetBackColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetBackColor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetBackColor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.BackColor" /> プロパティを既定値にリセットします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスでは、このメソッドは無効です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetBindings">
      <MemberSignature Language="C#" Value="public void ResetBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetBindings" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.BindingSource" /> にバインドされたコントロールに対し、リスト内のすべての項目を再度読み込んで表示値を更新するよう通知します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスでは、このメソッドは無効です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.DataBindings" />
      </Docs>
    </Member>
    <Member MemberName="ResetCursor">
      <MemberSignature Language="C#" Value="public virtual void ResetCursor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetCursor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetCursor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.Cursor" /> プロパティを既定値にリセットします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスでは、このメソッドは無効です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetFont">
      <MemberSignature Language="C#" Value="public virtual void ResetFont ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetFont() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetFont" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.Font" /> プロパティを既定値にリセットします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスでは、このメソッドは無効です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetForeColor">
      <MemberSignature Language="C#" Value="public virtual void ResetForeColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetForeColor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetForeColor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.ForeColor" /> プロパティを既定値にリセットします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスでは、このメソッドは無効です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetImeMode">
      <MemberSignature Language="C#" Value="public void ResetImeMode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetImeMode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetImeMode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.ImeMode" /> プロパティを既定値にリセットします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスでは、このメソッドは無効です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetMouseEventArgs">
      <MemberSignature Language="C#" Value="protected void ResetMouseEventArgs ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ResetMouseEventArgs() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetMouseEventArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="E:System.Windows.Forms.Control.MouseLeave" /> イベントを処理するためのコントロールをリセットします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetRightToLeft">
      <MemberSignature Language="C#" Value="public virtual void ResetRightToLeft ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetRightToLeft() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetRightToLeft" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.RightToLeft" /> プロパティを既定値にリセットします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスでは、このメソッドは無効です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetText">
      <MemberSignature Language="C#" Value="public virtual void ResetText ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetText() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.Text" /> プロパティを既定値にリセットします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 いずれかのデザイナーを作成する場合は通常このメソッドを使用する、 <xref:System.Windows.Forms.Control> 独自コントロールを組み込むことを作成するか、 <xref:System.Windows.Forms.Control>です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Text" />
      </Docs>
    </Member>
    <Member MemberName="Resize">
      <MemberSignature Language="C#" Value="public event EventHandler Resize;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Resize" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Resize" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールのサイズが変更されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 決定する、 <xref:System.Windows.Forms.Control.Size%2A> キャストできるサイズが変更されたコントロールの `sender` 、登録済みのパラメーター <xref:System.Windows.Forms.ControlEventHandler> メソッドを <xref:System.Windows.Forms.Control> を取得し、 <xref:System.Windows.Forms.Control.Size%2A> プロパティ \(または <xref:System.Windows.Forms.Control.Height%2A> と <xref:System.Windows.Forms.Control.Width%2A> プロパティ個別に\)。  
  
 カスタム レイアウトを処理する、 <xref:System.Windows.Forms.Control.Layout> Resize イベントではなくイベントです。<xref:System.Windows.Forms.Control.Layout> への応答でイベントが発生、 <xref:System.Windows.Forms.Control.Resize> イベント、その他のコントロールのレイアウトに影響する変更への応答で読むことができます。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例、 <xref:System.Windows.Forms.Control.Resize> のイベント、 <xref:System.Windows.Forms.Form>です。 イベント ハンドラーでは、フォームが四角形のままになることによって、フォームがサイズ変更されると \(その <xref:System.Windows.Forms.Control.Height%2A> と <xref:System.Windows.Forms.Control.Width%2A> に変化がない\)。 この例を実行することを確認し、このイベント処理メソッドを関連付けるフォームの <xref:System.Windows.Forms.Control.Resize> イベントです。  
  
 [!code-cpp[WinForms.Control.Resize\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/WinForms.Control.Resize/CPP/form1.cpp#1)]
 [!code-csharp[WinForms.Control.Resize\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/WinForms.Control.Resize/CS/form1.cs#1)]
 [!code-vb[WinForms.Control.Resize\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/WinForms.Control.Resize/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Size" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="ResizeRedraw">
      <MemberSignature Language="C#" Value="protected bool ResizeRedraw { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ResizeRedraw" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ResizeRedraw" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サイズが変更されたときに、コントロールがコントロール自体を再描画するかどうかを示す値を取得または設定します。</summary>
        <value>サイズが変更されるとコントロールがコントロール自体を再描画する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.ResizeRedraw%2A> プロパティ値の戻り値と等価です、 <xref:System.Windows.Forms.Control.GetStyle%2A> メソッドに渡すと、 <xref:System.Windows.Forms.ControlStyles.ResizeRedraw?displayProperty=fullName> 値をパラメーターとして。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.GetStyle(System.Windows.Forms.ControlStyles)" />
        <altmember cref="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)" />
        <altmember cref="F:System.Windows.Forms.ControlStyles.ResizeRedraw" />
      </Docs>
    </Member>
    <Member MemberName="ResumeLayout">
      <MemberSignature Language="C#" Value="public void ResumeLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResumeLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResumeLayout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通常のレイアウト ロジックを再開します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す、 <xref:System.Windows.Forms.Control.ResumeLayout%2A> 保留中のレイアウトの要求を使用する必要がある場合、メソッドが即時のレイアウトを強制します。  
  
 <xref:System.Windows.Forms.Control.SuspendLayout%2A> と <xref:System.Windows.Forms.Control.ResumeLayout%2A> を抑制する状況複数の両方のメソッドを使用 <xref:System.Windows.Forms.Control.Layout> イベント、コントロールの複数の属性を調整します。 呼び出します通常など、 <xref:System.Windows.Forms.Control.SuspendLayout%2A> メソッドを設定し、 <xref:System.Windows.Forms.Control.Size%2A>, 、<xref:System.Windows.Forms.Control.Location%2A>, 、<xref:System.Windows.Forms.Control.Anchor%2A>, 、または <xref:System.Windows.Forms.Control.Dock%2A> 制御、および次のプロパティ、 <xref:System.Windows.Forms.Control.ResumeLayout%2A> メソッドを有効にする変更を有効にします。  
  
 保留中の呼び出しをする必要がある <xref:System.Windows.Forms.Control.SuspendLayout%2A> の <xref:System.Windows.Forms.Control.ResumeLayout%2A> に正常に呼び出されます。  
  
   
  
## 例  
 次のコード例では、フォームに 2 つのボタンを追加します。 トランザクションの例を使用してボタンの追加、 <xref:System.Windows.Forms.Control.SuspendLayout%2A> と <xref:System.Windows.Forms.Control.ResumeLayout%2A> メソッドです。  
  
 [!code-cpp[Windows.Forms.Control Members2\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CPP/controlmembers2.cpp#2)]
 [!code-csharp[Windows.Forms.Control Members2\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CS/controlmembers2.cs#2)]
 [!code-vb[Windows.Forms.Control Members2\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members2/VB/controlmembers2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
      </Docs>
    </Member>
    <Member MemberName="ResumeLayout">
      <MemberSignature Language="C#" Value="public void ResumeLayout (bool performLayout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResumeLayout(bool performLayout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResumeLayout(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="performLayout" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="performLayout">保留中のレイアウトの要求を実行する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>通常のレイアウト ロジックを再開します。オプションで、保留中のレイアウト要求のレイアウトを強制的に即時実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す、 <xref:System.Windows.Forms.Control.ResumeLayout%2A> 保留中のレイアウトの要求を使用する必要がある場合、メソッドが即時のレイアウトを強制します。 ときに、 `performLayout` にパラメーターが設定されている `true`, 、レイアウトが即時が保留中のレイアウトの要求を使用する必要がある場合に発生します。  
  
 <xref:System.Windows.Forms.Control.SuspendLayout%2A> と <xref:System.Windows.Forms.Control.ResumeLayout%2A> を抑制する状況複数の両方のメソッドを使用 <xref:System.Windows.Forms.Control.Layout> イベント、コントロールの複数の属性を調整します。 呼び出します通常など、 <xref:System.Windows.Forms.Control.SuspendLayout%2A> メソッドを設定し、 <xref:System.Windows.Forms.Control.Size%2A>, 、<xref:System.Windows.Forms.Control.Location%2A>, 、<xref:System.Windows.Forms.Control.Anchor%2A>, 、または <xref:System.Windows.Forms.Control.Dock%2A> 制御、および次のプロパティ、 <xref:System.Windows.Forms.Control.ResumeLayout%2A> メソッドを有効にする変更を有効にします。  
  
 保留中の呼び出しをする必要がある <xref:System.Windows.Forms.Control.SuspendLayout%2A> の <xref:System.Windows.Forms.Control.ResumeLayout%2A> に正常に呼び出されます。  
  
> [!NOTE]
>  いくつかのコントロールを親コントロールを追加する場合は、呼び出すことをお勧めしますが、 <xref:System.Windows.Forms.Control.SuspendLayout%2A> メソッドを追加するコントロールを初期化する前にします。 親コントロールにコントロールを追加した後、 <xref:System.Windows.Forms.Control.ResumeLayout%2A> メソッドです。 これにより、多くのコントロールを持つアプリケーションのパフォーマンスが向上します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public int Right { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Right" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Right" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの右端とコンテナーのクライアント領域の左端の間の距離をピクセルで取得します。</summary>
        <value>
          <see cref="T:System.Int32" /> は、コントロールの右端とコンテナーのクライアント領域の左端の間の距離 \(ピクセル単位\) を示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値、 <xref:System.Windows.Forms.Control.Right%2A> プロパティがの合計に等しい、 <xref:System.Windows.Forms.Control.Left%2A> プロパティの値と <xref:System.Windows.Forms.Control.Width%2A> プロパティの値。  
  
 <xref:System.Windows.Forms.Control.Right%2A> プロパティは読み取り専用です。 ないこのプロパティの値を直接変更するの値を変更することで、 <xref:System.Windows.Forms.Control.Left%2A> または <xref:System.Windows.Forms.Control.Width%2A> プロパティまたは呼び出し元、 <xref:System.Windows.Forms.Control.SetBounds%2A>, 、<xref:System.Windows.Forms.Control.SetBoundsCore%2A>, 、<xref:System.Windows.Forms.Control.UpdateBounds%2A>, 、または <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> メソッドです。  
  
   
  
## 例  
 次のコード例では、3 つが作成されます <xref:System.Windows.Forms.Button> フォームのコントロールし、さまざまなサイズと場所関連プロパティを使用してそのサイズと場所を設定します。 この例である必要があります、 <xref:System.Windows.Forms.Form> を持つ幅と高さには、少なくとも 300 ピクセルです。  
  
 [!code-cpp[Windows.Forms.Control SizeLocation\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CPP/controlsizelocation.cpp#1)]
 [!code-csharp[Windows.Forms.Control SizeLocation\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CS/controlsizelocation.cs#1)]
 [!code-vb[Windows.Forms.Control SizeLocation\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/VB/controlsizelocation.vb#1)]  
  
 [!code-cpp[Control.KeyUp\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyUp/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyUp\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyUp/CS/form1.cs#1)]
 [!code-vb[Control.KeyUp\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyUp/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Right" />
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.RightToLeft RightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RightToLeft RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.RightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RightToLeft</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの要素が、右から左へ表示されるフォントを使用するロケールをサポートするように配置されているかどうかを示す値を取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.RightToLeft" /> の値の 1 つ。 既定値は、<see cref="F:System.Windows.Forms.RightToLeft.Inherit" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.RightToLeft%2A> プロパティは、アンビエント プロパティです。 アンビエント プロパティはコントロールのプロパティ セットは、親コントロールから取得されます。 たとえば、 <xref:System.Windows.Forms.Button> が同じである <xref:System.Windows.Forms.Control.BackColor%2A> 親と <xref:System.Windows.Forms.Form> 既定では。 アンビエント プロパティの詳細については、次を参照してください。、 <xref:System.Windows.Forms.AmbientProperties> クラスまたは <xref:System.Windows.Forms.Control> クラスの概要です。  
  
 <xref:System.Windows.Forms.Control.RightToLeft%2A> 右から左、ヘブライ語やアラビア語などの言語の書き込み先国際対応のアプリケーション プロパティが使用されます。 このプロパティに設定すると <xref:System.Windows.Forms.RightToLeft.Yes?displayProperty=fullName>, 、右から左へテキストを含むコントロールの要素が表示されます。  
  
> [!NOTE]
>  場合の値、 <xref:System.Windows.Forms.Control.RightToLeft%2A> 実行時にプロパティが変更された、書式設定なしの未加工のテキストのみが保持されます。  
  
 コントロール要素の影響について、いくつかの例を次に、 <xref:System.Windows.Forms.Control.RightToLeft%2A> のプロパティの値 <xref:System.Windows.Forms.RightToLeft.Yes?displayProperty=fullName> :  
  
-   スクロール可能なコントロールの右側にあるのではなく、左側に垂直スクロール バーが表示されます \(たとえば、 <xref:System.Windows.Forms.Form>, 、<xref:System.Windows.Forms.Panel>, 複数行 <xref:System.Windows.Forms.TextBox>, 、および <xref:System.Windows.Forms.RichTextBox>\)。  
  
-   水平スクロール バーを右揃えのスクロール ボックス \(つまみ\) で起動します。  
  
-   によって制御されるチェック ボックス要素の配置、 `CheckAlign` プロパティには逆に <xref:System.Windows.Forms.CheckBox> と <xref:System.Windows.Forms.RadioButton> コントロールです。  
  
-   リスト ボックス、コンボ ボックス、およびアップダウン コントロール内のアイテムが右揃え。  
  
-   上向きボタンおよび下向きは左揃えに <xref:System.Windows.Forms.NumericUpDown> と <xref:System.Windows.Forms.DomainUpDown> コントロールです。  
  
-   メニュー \(<xref:System.Windows.Forms.MainMenu>, 、<xref:System.Windows.Forms.MenuItem>, 、および <xref:System.Windows.Forms.ContextMenu>\) は右揃えで表示されます。  
  
-   ツールバーのボタンの配置、 <xref:System.Windows.Forms.ToolBar> コントロールまたは上のテキストの配置、 <xref:System.Windows.Forms.ToolBarButton> は左右されない、 <xref:System.Windows.Forms.Control.RightToLeft%2A> プロパティです。  
  
-   <xref:System.Windows.Forms.AxHost> 右から左への配置をサポートしていますただし、ActiveX コントロールへの影響は、コントロールの作成者が右から左へ表示のサポートを実装するエクステントによって異なります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">割り当てられた値は、のいずれかではありません、 <see cref="T:System.Windows.Forms.RightToLeft" /> 値。</exception>
        <block subset="none" type="overrides">
          <para>When overriding the <see cref="P:System.Windows.Forms.Control.RightToLeft" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.RightToLeft" /> property to extend the base implementation. Otherwise, you must provide all the implementation. You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.RightToLeft" /> property; you can override only one if needed.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.RightToLeft" />
        <altmember cref="T:System.Windows.Forms.HorizontalAlignment" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)" />
      </Docs>
    </Member>
    <Member MemberName="RightToLeftChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RightToLeftChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RightToLeftChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.RightToLeftChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.RightToLeft" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、 <xref:System.Windows.Forms.Control.RightToLeft%2A> プロパティがプログラムの変更やユーザー操作によって変更します。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例は、イベント ハンドラーを実行すると実行、 <xref:System.Windows.Forms.Control.Text%2A> プロパティ値が変更されます。<xref:System.Windows.Forms.Control> クラス名のパターンをいくつかの方法には *PropertyName*`Changed` いるときに発生、対応する *PropertyName* 値の変更 \(*PropertyName* 、対応するプロパティの名前を表します\)。  
  
 次のコードを変更する例、 <xref:System.Windows.Forms.Control.ForeColor%2A> の <xref:System.Windows.Forms.TextBox> データを表示します。 例では、文字列に変換する 10 進数と変更、 <xref:System.Windows.Forms.Control.ForeColor%2A> に <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> 負の値とする <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> 数値が正の場合。 この例は、 <xref:System.Windows.Forms.Form> を含む、 <xref:System.Windows.Forms.TextBox>です。  
  
 [!code-cpp[Windows.Forms.Control\_PropertyChangedEvents\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CPP/propertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control\_PropertyChangedEvents\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CS/propertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control\_PropertyChangedEvents\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/VB/propertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.RightToLeft" />
      </Docs>
    </Member>
    <Member MemberName="RtlTranslateAlignment">
      <MemberSignature Language="C#" Value="protected System.Drawing.ContentAlignment RtlTranslateAlignment (System.Drawing.ContentAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Drawing.ContentAlignment RtlTranslateAlignment(valuetype System.Drawing.ContentAlignment align) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Drawing.ContentAlignment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.ContentAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="align" Type="System.Drawing.ContentAlignment" />
      </Parameters>
      <Docs>
        <param name="align">
          <see cref="T:System.Drawing.ContentAlignment" /> 値のいずれか 1 つ。</param>
        <summary>指定した <see cref="T:System.Drawing.ContentAlignment" /> を適切な <see cref="T:System.Drawing.ContentAlignment" /> に変換し、テキストを右から左に表示できるようにします。</summary>
        <returns>
          <see cref="T:System.Drawing.ContentAlignment" /> 値のいずれか。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Windows.Forms.Control.RightToLeft%2A> の <xref:System.Windows.Forms.RightToLeft> に設定されている `No`, 、戻り値は、 `align` でパラメーターが渡されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.RightToLeft" />
        <altmember cref="T:System.Drawing.ContentAlignment" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)" />
      </Docs>
    </Member>
    <Member MemberName="RtlTranslateAlignment">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.HorizontalAlignment RtlTranslateAlignment (System.Windows.Forms.HorizontalAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Windows.Forms.HorizontalAlignment RtlTranslateAlignment(valuetype System.Windows.Forms.HorizontalAlignment align) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.HorizontalAlignment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="align" Type="System.Windows.Forms.HorizontalAlignment" />
      </Parameters>
      <Docs>
        <param name="align">
          <see cref="T:System.Windows.Forms.HorizontalAlignment" /> 値のいずれか 1 つ。</param>
        <summary>指定した <see cref="T:System.Windows.Forms.HorizontalAlignment" /> を適切な <see cref="T:System.Windows.Forms.HorizontalAlignment" /> に変換し、テキストを右から左に表示できるようにします。</summary>
        <returns>
          <see cref="T:System.Windows.Forms.HorizontalAlignment" /> 値のいずれか。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Windows.Forms.Control.RightToLeft%2A> の <xref:System.Windows.Forms.RightToLeft> に設定されている `No`, 、戻り値は、 `align` でパラメーターが渡されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.RightToLeft" />
        <altmember cref="T:System.Windows.Forms.HorizontalAlignment" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)" />
      </Docs>
    </Member>
    <Member MemberName="RtlTranslateAlignment">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.LeftRightAlignment RtlTranslateAlignment (System.Windows.Forms.LeftRightAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Windows.Forms.LeftRightAlignment RtlTranslateAlignment(valuetype System.Windows.Forms.LeftRightAlignment align) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.LeftRightAlignment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LeftRightAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="align" Type="System.Windows.Forms.LeftRightAlignment" />
      </Parameters>
      <Docs>
        <param name="align">
          <see cref="T:System.Windows.Forms.LeftRightAlignment" /> 値のいずれか 1 つ。</param>
        <summary>指定した <see cref="T:System.Windows.Forms.LeftRightAlignment" /> を適切な <see cref="T:System.Windows.Forms.LeftRightAlignment" /> に変換し、テキストを右から左に表示できるようにします。</summary>
        <returns>
          <see cref="T:System.Windows.Forms.LeftRightAlignment" /> 値のいずれか。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Windows.Forms.Control.RightToLeft%2A> の <xref:System.Windows.Forms.RightToLeft> に設定されている `No`, 、戻り値は、 `align` でパラメーターが渡されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.RightToLeft" />
        <altmember cref="T:System.Windows.Forms.LeftRightAlignment" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)" />
      </Docs>
    </Member>
    <Member MemberName="RtlTranslateContent">
      <MemberSignature Language="C#" Value="protected System.Drawing.ContentAlignment RtlTranslateContent (System.Drawing.ContentAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance valuetype System.Drawing.ContentAlignment RtlTranslateContent(valuetype System.Drawing.ContentAlignment align) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.ContentAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="align" Type="System.Drawing.ContentAlignment" />
      </Parameters>
      <Docs>
        <param name="align">
          <see cref="T:System.Drawing.ContentAlignment" /> 値のいずれか。</param>
        <summary>指定した <see cref="T:System.Drawing.ContentAlignment" /> を適切な <see cref="T:System.Drawing.ContentAlignment" /> に変換し、テキストを右から左に表示できるようにします。</summary>
        <returns>
          <see cref="T:System.Drawing.ContentAlignment" /> 値のいずれか。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Windows.Forms.Control.RightToLeft%2A> の <xref:System.Windows.Forms.RightToLeft> に設定されている `No`, 、戻り値は、 `align` でパラメーターが渡されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.RightToLeft" />
        <altmember cref="T:System.Drawing.ContentAlignment" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)" />
      </Docs>
    </Member>
    <Member MemberName="RtlTranslateHorizontal">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.HorizontalAlignment RtlTranslateHorizontal (System.Windows.Forms.HorizontalAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Windows.Forms.HorizontalAlignment RtlTranslateHorizontal(valuetype System.Windows.Forms.HorizontalAlignment align) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="align" Type="System.Windows.Forms.HorizontalAlignment" />
      </Parameters>
      <Docs>
        <param name="align">
          <see cref="T:System.Windows.Forms.HorizontalAlignment" /> 値のいずれか。</param>
        <summary>指定した <see cref="T:System.Windows.Forms.HorizontalAlignment" /> を適切な <see cref="T:System.Windows.Forms.HorizontalAlignment" /> に変換し、テキストを右から左に表示できるようにします。</summary>
        <returns>
          <see cref="T:System.Windows.Forms.HorizontalAlignment" /> 値のいずれか。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Windows.Forms.Control.RightToLeft%2A> の <xref:System.Windows.Forms.RightToLeft> に設定されている `No`, 、戻り値は、 `align` でパラメーターが渡されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.RightToLeft" />
        <altmember cref="T:System.Windows.Forms.HorizontalAlignment" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)" />
      </Docs>
    </Member>
    <Member MemberName="RtlTranslateLeftRight">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.LeftRightAlignment RtlTranslateLeftRight (System.Windows.Forms.LeftRightAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Windows.Forms.LeftRightAlignment RtlTranslateLeftRight(valuetype System.Windows.Forms.LeftRightAlignment align) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LeftRightAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="align" Type="System.Windows.Forms.LeftRightAlignment" />
      </Parameters>
      <Docs>
        <param name="align">
          <see cref="T:System.Windows.Forms.LeftRightAlignment" /> 値のいずれか 1 つ。</param>
        <summary>指定した <see cref="T:System.Windows.Forms.LeftRightAlignment" /> を適切な <see cref="T:System.Windows.Forms.LeftRightAlignment" /> に変換し、テキストを右から左に表示できるようにします。</summary>
        <returns>
          <see cref="T:System.Windows.Forms.LeftRightAlignment" /> 値のいずれか。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Windows.Forms.Control.RightToLeft%2A> の <xref:System.Windows.Forms.RightToLeft> に設定されている `No`, 、戻り値は、 `align` でパラメーターが渡されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.RightToLeft" />
        <altmember cref="T:System.Windows.Forms.LeftRightAlignment" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.HorizontalAlignment)" />
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public void Scale (System.Drawing.SizeF factor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Scale(valuetype System.Drawing.SizeF factor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Scale(System.Drawing.SizeF)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factor" Type="System.Drawing.SizeF" />
      </Parameters>
      <Docs>
        <param name="factor">水平および垂直方向の倍率を格納した <see cref="T:System.Drawing.SizeF" />。</param>
        <summary>指定されたスケール ファクターによってコントロールおよびすべての子コントロールのスケールを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.Scale%2A> メソッドは、指定したスケーリングで、コントロールを拡大または縮小 `factor`します。 これを再帰的がすべての子コントロールをスケーリングする場合も、 <xref:System.Windows.Forms.Control.ScaleChildren%2A> プロパティは `true`です。 内部的には、このメソッドを呼び出す <xref:System.Windows.Forms.Control.ScaleControl%2A> 各コントロールを拡張します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.ScaleChildren" />
        <altmember cref="M:System.Windows.Forms.Control.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
        <altmember cref="M:System.Windows.Forms.Control.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public void Scale (float ratio);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Scale(float32 ratio) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Scale(System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This method has been deprecated. Use the Scale(SizeF ratio) method instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ratio" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="ratio">スケーリングに使用する比率。</param>
        <summary>コントロールおよび子コントロールのスケールを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public void Scale (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Scale(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Scale(System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This method has been deprecated. Use the Scale(SizeF ratio) method instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">水平方向のスケール ファクター。</param>
        <param name="dy">垂直方向のスケール ファクター。</param>
        <summary>コントロール全体および子コントロールのスケールを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleBitmapLogicalToDevice">
      <MemberSignature Language="C#" Value="public void ScaleBitmapLogicalToDevice (ref System.Drawing.Bitmap logicalBitmap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleBitmapLogicalToDevice(class System.Drawing.Bitmap logicalBitmap) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ScaleBitmapLogicalToDevice(System.Drawing.Bitmap@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logicalBitmap" Type="System.Drawing.Bitmap&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="logicalBitmap">スケールを設定するビットマップ。</param>
        <summary>DPI の変更が発生したときに、同等のデバイス単位値に論理ビットマップ値のスケールを設定します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleChildren">
      <MemberSignature Language="C#" Value="protected virtual bool ScaleChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ScaleChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ScaleChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>子コントロールの表示スケールを決定する値を取得します。</summary>
        <value>このコントロールで <see langword="true" /> メソッドが呼び出されたときに子コントロールのスケールが設定される場合は <see cref="M:System.Windows.Forms.Control.Scale(System.Single)" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Windows.Forms.Control.ScaleChildren%2A> プロパティは、 `true`, 、 <xref:System.Windows.Forms.Control.Scale%2A> メソッドは再帰的に呼び出し、 <xref:System.Windows.Forms.Control.ScaleControl%2A> メソッドをそれぞれの子コントロール。  
  
 既定の実装 <xref:System.Windows.Forms.Control.ScaleChildren%2A> は常に返します `true`します。 派生クラスでオーバーライド <xref:System.Windows.Forms.Control.ScaleChildren%2A> を返す `false` を示す、スケール実行しないように、子にします。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Scale(System.Single)" />
        <altmember cref="M:System.Windows.Forms.Control.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
        <altmember cref="M:System.Windows.Forms.Control.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
      </Docs>
    </Member>
    <Member MemberName="ScaleControl">
      <MemberSignature Language="C#" Value="protected virtual void ScaleControl (System.Drawing.SizeF factor, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ScaleControl(valuetype System.Drawing.SizeF factor, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factor" Type="System.Drawing.SizeF" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="factor">コントロールの高さと幅のスケールを設定するときのファクター。</param>
        <param name="specified">コントロールのサイズと位置を定義するときに使用するコントロールの境界を指定する <see cref="T:System.Windows.Forms.BoundsSpecified" /> 値。</param>
        <summary>コントロールの位置、サイズ、埋め込み、およびマージンのスケールを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コントロールが最上位レベルの場合は、このコントロールの位置は対応できません。 これは、子または自動的にサイズ変更されたコントロールのサイズには拡張できません。 値を変更することで、任意の方向にスケーリングを省略することができます、 `specified` パラメーター。  
  
   
  
## 例  
 <xref:System.Windows.Forms.BoundsSpecified>  
  
 <xref:System.Windows.Forms.Control.Scale%2A>  
  
 <xref:System.Windows.Forms.Control.GetScaledBounds%2A>  
  
 <xref:System.Windows.Forms.Control.SetBoundsCore%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleCore">
      <MemberSignature Language="C#" Value="protected virtual void ScaleCore (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ScaleCore(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ScaleCore(System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">水平方向のスケール ファクター。</param>
        <param name="dy">垂直方向のスケール ファクター。</param>
        <summary>このクラスでは、このメソッドは無効です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスでは、このメソッドは無効です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public void Select ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Select() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Select" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールをアクティブにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.Select%2A> 場合、メソッドには、コントロールがアクティブにコントロールの `Selectable` にスタイル ビットが設定されている `true` で <xref:System.Windows.Forms.ControlStyles>, 、別のコントロールに含まれていると、すべての親コントロールが表示され、有効になっています。  
  
 次の一覧に Windows フォーム コントロールが選択可能ではありません。 リストのコントロールから派生したコントロールも選択できません。  
  
-   <xref:System.Windows.Forms.Label>  
  
-   <xref:System.Windows.Forms.Panel>  
  
-   <xref:System.Windows.Forms.GroupBox>  
  
-   <xref:System.Windows.Forms.PictureBox>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.Splitter>  
  
-   <xref:System.Windows.Forms.LinkLabel> \(この場合、コントロール内にリンクすることはありません\)  
  
   
  
## 例  
 次のコード例を指定した選択 <xref:System.Windows.Forms.Control>, 、選択可能な場合です。  
  
 [!code-cpp[Windows.Forms.ControlMembers6\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CPP/controlmembers6.cpp#2)]
 [!code-csharp[Windows.Forms.ControlMembers6\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CS/controlmembers6.cs#2)]
 [!code-vb[Windows.Forms.ControlMembers6\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/VB/controlmembers6.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="M:System.Windows.Forms.Control.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="protected virtual void Select (bool directed, bool forward);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Select(bool directed, bool forward) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Select(System.Boolean,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directed" Type="System.Boolean" />
        <Parameter Name="forward" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="directed">選択するコントロールの方向を指定する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <param name="forward">タブ オーダー内を前方に移動する場合は <see langword="true" />。後方に移動する場合は <see langword="false" />。</param>
        <summary>子コントロールをアクティブにします。 オプションとして、タブ オーダーでコントロールを選択するときの方向を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `directed` と `forward` コンテナー スタイルのコントロールでのパラメーターを使用します。 ときに、 `directed` にパラメーターが設定されている `true`, 、 `forward` パラメーターが評価され、選択するコントロールを判断します。 ときに `forward` に設定されている `true`, 、タブ オーダーの次のコントロールが選択されているときに `false`, 、タブ オーダーの前のコントロールを選択します。  
  
 <xref:System.Windows.Forms.Control.Select%2A> 場合、メソッドには、コントロールがアクティブにコントロールの `Selectable` にスタイル ビットが設定されている `true` で <xref:System.Windows.Forms.ControlStyles>, 、別のコントロールに含まれていると、すべての親コントロールが表示され、有効になっています。  
  
 次の一覧に Windows フォーム コントロールが選択可能ではありません。 リストのコントロールから派生したコントロールも選択できません。  
  
-   <xref:System.Windows.Forms.Label>  
  
-   <xref:System.Windows.Forms.Panel>  
  
-   <xref:System.Windows.Forms.GroupBox>  
  
-   <xref:System.Windows.Forms.PictureBox>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.Splitter>  
  
-   <xref:System.Windows.Forms.LinkLabel> \(この場合、コントロール内にリンクすることはありません\)  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ContainerControl" />
        <altmember cref="M:System.Windows.Forms.Control.Select" />
      </Docs>
    </Member>
    <Member MemberName="SelectNextControl">
      <MemberSignature Language="C#" Value="public bool SelectNextControl (System.Windows.Forms.Control ctl, bool forward, bool tabStopOnly, bool nested, bool wrap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SelectNextControl(class System.Windows.Forms.Control ctl, bool forward, bool tabStopOnly, bool nested, bool wrap) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctl" Type="System.Windows.Forms.Control" />
        <Parameter Name="forward" Type="System.Boolean" />
        <Parameter Name="tabStopOnly" Type="System.Boolean" />
        <Parameter Name="nested" Type="System.Boolean" />
        <Parameter Name="wrap" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="ctl">検索の開始位置とする <see cref="T:System.Windows.Forms.Control" />。</param>
        <param name="forward">タブ オーダー内を前方に移動する場合は <see langword="true" />。後方に移動する場合は <see langword="false" />。</param>
        <param name="tabStopOnly">
          <see langword="true" /> プロパティが <see cref="P:System.Windows.Forms.Control.TabStop" /> に設定されているコントロールを無視する場合は <see langword="false" />。それ以外の場合は <see langword="false" />。</param>
        <param name="nested">入れ子になった \(子コントロールの子\) 子コントロールを含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <param name="wrap">タブ オーダーの最後のコントロールに到達した後、タブ オーダーの最初のコントロールから検索を続行する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>次のコントロールをアクティブにします。</summary>
        <returns>コントロールがアクティブにされた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.SelectNextControl%2A> 場合、メソッドがタブ オーダーの次のコントロールをアクティブ化コントロールの `Selectable` にスタイル ビットが設定されている `true` で <xref:System.Windows.Forms.ControlStyles>, 、別のコントロールに含まれていると、すべての親コントロールが表示され、有効になっています。  
  
 次の一覧に Windows フォーム コントロールが選択可能ではありません。 リストのコントロールから派生したコントロールも選択できません。  
  
-   <xref:System.Windows.Forms.Label>  
  
-   <xref:System.Windows.Forms.Panel>  
  
-   <xref:System.Windows.Forms.GroupBox>  
  
-   <xref:System.Windows.Forms.PictureBox>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.Splitter>  
  
-   <xref:System.Windows.Forms.LinkLabel> \(この場合、コントロール内にリンクすることはありません\)  
  
 呼び出して \(タブ、shift キーを押しながら TAB となど\) のキーボードを使用して、フォーカスを変更すると、 <xref:System.Windows.Forms.Control.Select%2A> または <xref:System.Windows.Forms.Control.SelectNextControl%2A> メソッドを設定したり、 <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=fullName> プロパティを現在のフォームは、次の順序でのフォーカス イベントが発生します。  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 場合、 <xref:System.Windows.Forms.Control.CausesValidation%2A> にプロパティが設定されている `false`, 、 <xref:System.Windows.Forms.Control.Validating> と <xref:System.Windows.Forms.Control.Validated> イベントが抑制されます。  
  
   
  
## 例  
 次のコードで exampleshows、<xref:System.Windows.Forms.Control.SelectNextControl%2A> メソッドをいくつかのコントロールを持つフォームで使用されています。 フォームをクリックするたびに、次のコントロールがアクティブ化されます。<xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> プロパティは、コンテナー コントロールで現在アクティブなコントロールを取得します。  
  
 [!code-csharp[System.Windows.Forms.Control.SelectNextControl\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/system.windows.forms.control.selectnextcontrol/cs/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.SelectNextControl\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.windows.forms.control.selectnextcontrol/vb/form1.vb#1)]  
  
 次のコード例は、 <xref:System.Windows.Forms.Control.SelectNextControl%2A> メソッドを持つフォームで使用されている、 <xref:System.Windows.Forms.Button> およびその他のいくつかのコントロールです。 クリックすると、 <xref:System.Windows.Forms.Button>, 後の次のコントロール、 <xref:System.Windows.Forms.Button> がアクティブ化します。 親を理解する必要があることに注意してください、 <xref:System.Windows.Forms.Button> コントロールです。<xref:System.Windows.Forms.Button> 、コンテナーではない呼び出し <xref:System.Windows.Forms.Control.SelectNextControl%2A> 上で直接、 <xref:System.Windows.Forms.Button> アクティブ化は変化しません。  
  
 [!code-csharp[System.Windows.Forms.Control.SelectNextControl\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/system.windows.forms.control.selectnextcontrol/cs/form1.cs#2)]
 [!code-vb[System.Windows.Forms.Control.SelectNextControl\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.windows.forms.control.selectnextcontrol/vb/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Select" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
      </Docs>
    </Member>
    <Member MemberName="SendToBack">
      <MemberSignature Language="C#" Value="public void SendToBack ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendToBack() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SendToBack" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールを z オーダーの背面に移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コントロールは、z オーダーの背面に移動されます。 コントロールが別のコントロールの子である場合は、子コントロールが z オーダーの背面に移動します。 コントロールがトップレベル コントロールである場合は、このメソッドは機能しません正しくコントロールがアクティブでない限りです。 最上位のコントロールは、コントロールなど、 <xref:System.Windows.Forms.Form>, 、いない子である別のコントロールです。 アクティブなコントロールは、表示コントロールに入力フォーカスです。 使用する、 <xref:System.Windows.Forms.Control.SendToBack%2A> メソッド使用頻度の低い、最上位レベルの管理では、まず、 <xref:System.Windows.Forms.Control.BringToFront%2A> コントロールのメソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.BringToFront" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateZOrder" />
      </Docs>
    </Member>
    <Member MemberName="SetAutoSizeMode">
      <MemberSignature Language="C#" Value="protected void SetAutoSizeMode (System.Windows.Forms.AutoSizeMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetAutoSizeMode(valuetype System.Windows.Forms.AutoSizeMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetAutoSizeMode(System.Windows.Forms.AutoSizeMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Windows.Forms.AutoSizeMode" />
      </Parameters>
      <Docs>
        <param name="mode">
          <see cref="T:System.Windows.Forms.AutoSizeMode" /> 値のいずれか 1 つ。</param>
        <summary>
          <see cref="P:System.Windows.Forms.Control.AutoSize" /> プロパティが有効なときのコントロールの動作を示す値を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBounds">
      <MemberSignature Language="C#" Value="public void SetBounds (int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetBounds(int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Left" /> プロパティ値。</param>
        <param name="y">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Top" /> プロパティ値。</param>
        <param name="width">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Width" /> プロパティ値。</param>
        <param name="height">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Height" /> プロパティ値。</param>
        <summary>コントロールの範囲を指定した位置とサイズに設定します。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.Control.Bounds" />
        <altmember cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="SetBounds">
      <MemberSignature Language="C#" Value="public void SetBounds (int x, int y, int width, int height, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetBounds(int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="x">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Left" /> プロパティ値。</param>
        <param name="y">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Top" /> プロパティ値。</param>
        <param name="width">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Width" /> プロパティ値。</param>
        <param name="height">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Height" /> プロパティ値。</param>
        <param name="specified">
          <see cref="T:System.Windows.Forms.BoundsSpecified" /> 値のビットごとの組み合わせ。 指定されていないパラメーターについては、現在の値が使用されます。</param>
        <summary>コントロールの指定した範囲を指定した位置とサイズに設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例センター、 <xref:System.Windows.Forms.Form> \] 画面で、 <xref:System.Windows.Forms.Control.Layout> イベントです。 これにより、ユーザーがサイズを変更して中央フォームが保持されます。 この例では、作成済みである必要があります、 <xref:System.Windows.Forms.Form> コントロールです。  
  
 [!code-cpp[Control.Layout\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Layout/CPP/layout.cpp#1)]
 [!code-csharp[Control.Layout\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Layout/CS/layout.cs#1)]
 [!code-vb[Control.Layout\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Layout/VB/layout.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Bounds" />
        <altmember cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="SetBoundsCore">
      <MemberSignature Language="C#" Value="protected virtual void SetBoundsCore (int x, int y, int width, int height, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetBoundsCore(int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="x">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Left" /> プロパティ値。</param>
        <param name="y">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Top" /> プロパティ値。</param>
        <param name="width">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Width" /> プロパティ値。</param>
        <param name="height">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Height" /> プロパティ値。</param>
        <param name="specified">
          <see cref="T:System.Windows.Forms.BoundsSpecified" /> 値のビットごとの組み合わせ。</param>
        <summary>このコントロールの指定した境界を設定する作業を実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 含まれていない境界に対応するパラメーターでは通常、 `specified` パラメーターは、その現在の値で渡されます。 たとえば、 <xref:System.Windows.Forms.Control.Height%2A>, 、<xref:System.Windows.Forms.Control.Width%2A>, 、または <xref:System.Drawing.Point.X%2A> または <xref:System.Drawing.Point.Y%2A> のプロパティ、 <xref:System.Windows.Forms.Control.Location%2A> プロパティは、コントロールの現在のインスタンスへの参照を使用して渡すことができます。 ただしで渡されるすべての値が受け入れられ、コントロールに適用します。  
  
 `boundsSpecified` パラメーターは、コントロールの要素を表す <xref:System.Windows.Forms.Control.Bounds%2A> アプリケーションによって変更します。 変更する場合など、 <xref:System.Windows.Forms.Control.Size%2A> 、コントロールの `boundsSpecified` パラメーターの値が、 `Size` の値 <xref:System.Windows.Forms.BoundsSpecified>です。 ただし場合、 <xref:System.Windows.Forms.Control.Size%2A> への応答で調整、 <xref:System.Windows.Forms.Control.Dock%2A> プロパティが設定されている、 `boundsSpecified` パラメーターの値が、 `None` の値 <xref:System.Windows.Forms.BoundsSpecified>です。  
  
> [!NOTE]
>  Windows Server 2003 システムでのサイズ、 <xref:System.Windows.Forms.Form> 、最大のピクセルの幅と高さモニターによって制限されます。  
  
   
  
## 例  
 次のコード例の上書き、 <xref:System.Windows.Forms.Control.SetBoundsCore%2A> メソッドは、コントロールに固定サイズがあることを確認します。 この例では、直接または間接的にから派生したクラスがあることが必要です、 <xref:System.Windows.Forms.Control> クラスです。  
  
 [!code-cpp[Windows.Forms.Control\_Methods\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_Methods/CPP/controlmethods.cpp#1)]
 [!code-csharp[Windows.Forms.Control\_Methods\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_Methods/CS/controlmethods.cs#1)]
 [!code-vb[Windows.Forms.Control\_Methods\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_Methods/VB/controlmethods.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /> method to force the bounds of the control to change. Derived classes can add size restrictions to the <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /> method.</para>
        </block>
        <altmember cref="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)" />
        <altmember cref="P:System.Windows.Forms.Control.Bounds" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="SetClientSizeCore">
      <MemberSignature Language="C#" Value="protected virtual void SetClientSizeCore (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetClientSizeCore(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">クライアント領域の幅 \(ピクセル単位\)。</param>
        <param name="y">クライアント領域の高さ \(ピクセル単位\)。</param>
        <summary>コントロールのクライアント領域のサイズを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 クライアント領域から始まり、\(0, 0\) の場所に拡張し、\(`x`, 、`y`\) 場所。  
  
 通常、設定しないでください、 <xref:System.Windows.Forms.Control.ClientSize%2A> コントロールのです。  
  
   
  
## 例  
 次のコード例の上書き、 <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> メソッドは、コントロールが四角形であることを確認します。 この例では、直接または間接的にから派生したクラスがあることが必要です、 <xref:System.Windows.Forms.Control> クラスです。  
  
 [!code-cpp[Windows.Forms.Control\_Methods\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_Methods/CPP/controlmethods.cpp#2)]
 [!code-csharp[Windows.Forms.Control\_Methods\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_Methods/CS/controlmethods.cs#2)]
 [!code-vb[Windows.Forms.Control\_Methods\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_Methods/VB/controlmethods.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)" /> method so that the <see cref="P:System.Windows.Forms.Control.ClientSize" /> property is adjusted.  
  
 For more information about drawing on controls, see [Rendering a Windows Forms Control](~/docs/framework/winforms/controls/rendering-a-windows-forms-control.md).</para>
        </block>
        <altmember cref="P:System.Windows.Forms.Control.ClientSize" />
      </Docs>
    </Member>
    <Member MemberName="SetStyle">
      <MemberSignature Language="C#" Value="protected void SetStyle (System.Windows.Forms.ControlStyles flag, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetStyle(valuetype System.Windows.Forms.ControlStyles flag, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flag" Type="System.Windows.Forms.ControlStyles" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="flag">設定する <see cref="T:System.Windows.Forms.ControlStyles" /> ビット。</param>
        <param name="value">指定したスタイルをコントロールに適用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>指定した <see cref="T:System.Windows.Forms.ControlStyles" /> フラグを <see langword="true" /> または <see langword="false" /> に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コントロール スタイル ビット フラグは、サポートされている動作を分類に使用されます。 コントロールは、スタイルを有効に呼び出すことによって、 <xref:System.Windows.Forms.Control.SetStyle%2A> メソッドを渡して、適切な <xref:System.Windows.Forms.ControlStyles> ビット \(またはビット\) とに、ビットを設定するブール値。 指定した割り当てられている値を決定する <xref:System.Windows.Forms.ControlStyles> ビットを使用して、 <xref:System.Windows.Forms.Control.GetStyle%2A> メソッドを渡します、 <xref:System.Windows.Forms.ControlStyles> を評価するメンバー。  
  
> [!CAUTION]
>  コントロールのスタイルを表すビットを設定すると、コントロールの動作大幅に変更できます。 レビュー、 <xref:System.Windows.Forms.ControlStyles> を呼び出す前に、コントロール スタイル ビットの変更の影響を理解しておく列挙に関するドキュメント、 <xref:System.Windows.Forms.Control.SetStyle%2A> メソッドです。  
  
   
  
## 例  
 次のコード例は、のダブル バッファリングを有効、 <xref:System.Windows.Forms.Form> し、変更を反映するようにスタイルを更新します。  
  
 [!code-cpp[Windows.Forms.ControlMembers6\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CPP/controlmembers6.cpp#3)]
 [!code-csharp[Windows.Forms.ControlMembers6\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CS/controlmembers6.cs#3)]
 [!code-vb[Windows.Forms.ControlMembers6\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/VB/controlmembers6.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.GetStyle(System.Windows.Forms.ControlStyles)" />
        <altmember cref="T:System.Windows.Forms.ControlStyles" />
      </Docs>
    </Member>
    <Member MemberName="SetTopLevel">
      <MemberSignature Language="C#" Value="protected void SetTopLevel (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetTopLevel(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetTopLevel(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">コントロールをトップレベル コントロールとして設定する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>コントロールをトップレベル コントロールとして設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出した場合、 <xref:System.Windows.Forms.Control.SetTopLevel%2A> のメソッド、 <xref:System.Windows.Forms.Form> の値を渡します `false`, が呼び出されるまで、フォームは表示されません <xref:System.Windows.Forms.Control.SetTopLevel%2A>の値を渡して、 `true`です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="value" /> にパラメーターが設定されている <see langword="true" /> コントロールが ActiveX コントロールとします。</exception>
        <exception cref="T:System.Exception">
          <see cref="M:System.Windows.Forms.Control.GetTopLevel" /> 戻り値と等しくない、 <paramref name="value" /> パラメーターおよび <see cref="P:System.Windows.Forms.Control.Parent" /> プロパティは使用されません <see langword="null" />します。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">to set the control as a top\-level control if it is of any type other than <see cref="T:System.Windows.Forms.Form" />. This permission is only demanded if the **parameterReference tag is not supported!!!!**  
 parameter is **languageKeyword tag is not supported!!!!**  
 and the control is not an ActiveX control. Associated enumeration: **languageKeyword tag is not supported!!!!**  
 value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</permission>
        <altmember cref="M:System.Windows.Forms.Control.GetTopLevel" />
      </Docs>
    </Member>
    <Member MemberName="SetVisibleCore">
      <MemberSignature Language="C#" Value="protected virtual void SetVisibleCore (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetVisibleCore(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetVisibleCore(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">コントロールを表示する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>コントロールを指定した表示状態に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 通常、コントロールの表示\/非表示動作を変更するには、このメソッドをオーバーライドします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Control.SetVisibleCore(System.Boolean)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.SetVisibleCore(System.Boolean)" /> method to force the visibility of the control to change.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.Control.Visible" />
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public void Show ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Show() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Show" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールをユーザーに対して表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 同じことには、コントロールを表示、 <xref:System.Windows.Forms.Control.Visible%2A> プロパティを `true`します。 後に、 <xref:System.Windows.Forms.Control.Show%2A> メソッドが呼び出される、 <xref:System.Windows.Forms.Control.Visible%2A> プロパティの値を返す `true` まで、 <xref:System.Windows.Forms.Control.Hide%2A> メソッドが呼び出されます。  
  
   
  
## 例  
 次のコード例では表示、ダイアログ ボックスに関する一時的にそのサーフェイスに青い四角形を描画します。 この例から派生したクラスが定義されている必要があります <xref:System.Windows.Forms.Form> という `AboutDialog`します。  
  
 [!code-cpp[Windows.Forms.Control Members2\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CPP/controlmembers2.cpp#1)]
 [!code-csharp[Windows.Forms.Control Members2\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CS/controlmembers2.cs#1)]
 [!code-vb[Windows.Forms.Control Members2\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members2/VB/controlmembers2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Visible" />
        <altmember cref="M:System.Windows.Forms.Control.Hide" />
      </Docs>
    </Member>
    <Member MemberName="ShowFocusCues">
      <MemberSignature Language="C#" Value="protected virtual bool ShowFocusCues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowFocusCues" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ShowFocusCues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールがフォーカスを示す四角形を表示する必要があるかどうかを示す値を取得します。</summary>
        <value>コントロールがフォーカスを示す四角形を表示する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この機能の詳細については、次を参照してください。、[WM\_CHANGEUISTATE](http://msdn.microsoft.com/library/windows/desktop/ms646342\(v=vs.85\).aspx),、[WM\_QUERYUISTATE](http://msdn.microsoft.com/library/windows/desktop/ms646355\(v=vs.85\).aspx), 、および [WM\_UPDATEUISTATE](http://msdn.microsoft.com/library/windows/desktop/ms646361\(v=vs.85\).aspx)トピックです。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding the <see cref="P:System.Windows.Forms.Control.ShowFocusCues" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.ShowFocusCues" /> property to extend the base implementation. Otherwise, you must provide all the implementation.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.UICues" />
        <altmember cref="E:System.Windows.Forms.Control.ChangeUICues" />
        <altmember cref="P:System.Windows.Forms.Control.ShowKeyboardCues" />
      </Docs>
    </Member>
    <Member MemberName="ShowKeyboardCues">
      <MemberSignature Language="C#" Value="protected virtual bool ShowKeyboardCues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowKeyboardCues" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ShowKeyboardCues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザー インターフェイスがキーボード アクセラレータを表示または非表示にする適切な状態かどうかを示す値を取得します。</summary>
        <value>キーボード アクセラレータを表示する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Windows フォーム デザイナーで作成されたコントロールでキーボード アクセラレータでは、既定で表示されます。  
  
 この機能の詳細については、次を参照してください。、[WM\_CHANGEUISTATE](http://msdn.microsoft.com/library/windows/desktop/ms646342\(v=vs.85\).aspx),、[WM\_QUERYUISTATE](http://msdn.microsoft.com/library/windows/desktop/ms646355\(v=vs.85\).aspx), 、および [WM\_UPDATEUISTATE](http://msdn.microsoft.com/library/windows/desktop/ms646361\(v=vs.85\).aspx)トピックです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.UICues" />
        <altmember cref="P:System.Windows.Forms.Control.ShowFocusCues" />
        <altmember cref="E:System.Windows.Forms.Control.ChangeUICues" />
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Site" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールのサイトを取得または設定します。</summary>
        <value>
          <see cref="T:System.ComponentModel.ISite" /> に関連付けられている <see cref="T:System.Windows.Forms.Control" /> \(存在する場合\)。</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.ISite" />
        <altmember cref="P:System.ComponentModel.IComponent.Site" />
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public System.Drawing.Size Size { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size Size" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの高さと幅を取得または設定します。</summary>
        <value>コントロールの高さと幅をピクセル単位で表す <see cref="T:System.Drawing.Size" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Drawing.Size> クラスは、値型 \(`Structure` で [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)], 、`struct` で [!INCLUDE[csprcs](~/includes/csprcs-md.md)]\)、つまり、コントロールのサイズのコピーを返すプロパティにアクセスする値によって返されます。 そのため、調整、 <xref:System.Drawing.Size.Width%2A> または <xref:System.Drawing.Size.Height%2A> のプロパティ、 <xref:System.Drawing.Size> これから返されたプロパティには影響は、 <xref:System.Windows.Forms.Control.Width%2A> または <xref:System.Windows.Forms.Control.Height%2A> コントロールのです。 調整する、 <xref:System.Windows.Forms.Control.Width%2A> または <xref:System.Windows.Forms.Control.Height%2A> 、コントロールのコントロールを設定する必要があります <xref:System.Windows.Forms.Control.Width%2A> または <xref:System.Windows.Forms.Control.Height%2A> プロパティ、またはセット、 <xref:System.Windows.Forms.Control.Size%2A> プロパティを新しい <xref:System.Drawing.Size>します。  
  
> [!NOTE]
>  パフォーマンスの向上を維持するために設定しないでください、 <xref:System.Drawing.Size> コンス トラクター内で制御します。 最良の方法をオーバーライドすること、 <xref:System.Windows.Forms.Control.DefaultSize%2A> プロパティです。  
  
> [!NOTE]
>  Windows Server 2003 システムでのサイズ、 <xref:System.Windows.Forms.Form> 、最大のピクセルの幅と高さモニターによって制限されます。  
  
   
  
## 例  
 次のコード例では追加、 <xref:System.Windows.Forms.Button> をフォームにし、一部の一般的なプロパティを設定します。 例は、フォームの右下隅にボタンを固定することにより、フォームがサイズ変更すると、相対的な位置関係が維持されるようにします。 次に、設定、 <xref:System.Windows.Forms.Control.BackgroundImage%2A> と同じサイズにボタンのサイズを変更し、<xref:System.Drawing.Image>です。 その後、設定、 <xref:System.Windows.Forms.Control.TabStop%2A> に `true` し、設定、 <xref:System.Windows.Forms.Control.TabIndex%2A> プロパティです。 最後に、処理するイベント ハンドラーを追加、 <xref:System.Windows.Forms.Control.Click> ボタンのイベントです。 この例は、 <xref:System.Windows.Forms.ImageList> という名前 `imageList1`します。  
  
 [!code-cpp[Windows.Forms.Control Properties\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#3)]
 [!code-csharp[Windows.Forms.Control Properties\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#3)]
 [!code-vb[Windows.Forms.Control Properties\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SizeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SizeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SizeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.SizeChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.Size" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することをお勧めします <xref:System.Windows.Forms.Control.Layout> カスタム レイアウトを処理するイベントです。<xref:System.Windows.Forms.Control.Layout> への応答でイベントが発生 <xref:System.Windows.Forms.Control.Resize> イベント、レイアウトの適用が必要になる場合は、その他の条件で読むことができます。  
  
 このイベントは、 <xref:System.Windows.Forms.Control.Size%2A> プロパティがプログラムの変更やユーザー操作によって変更します。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例を示しています、 <xref:System.Windows.Forms.Control.SizeChanged> イベントです。 インスタンス、 <xref:System.Windows.Forms.Button> を水平方向および垂直方向にスケールできる指定されたコントロール。 A <xref:System.Windows.Forms.NumericUpDown> インスタンスは、水平および垂直のスケールの値を提供します。<xref:System.Windows.Forms.Button> という名前のインスタンス **OK** のスケール値の設定に使用される、 <xref:System.Windows.Forms.Button> コントロールのインスタンス。 ときに、コントロールのサイズ変更に関連付けられているイベント ハンドラー、 <xref:System.Windows.Forms.Control.SizeChanged> コントロールのイベントが呼び出されます。 このイベント ハンドラーでは、コントロールのサイズが変更されたことを示すメッセージ ボックスが表示されます。  
  
 [!code-cpp[Control\_Scale1\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_Scale1/CPP/control_scale1.cpp#2)]
 [!code-csharp[Control\_Scale1\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_Scale1/CS/control_scale1.cs#2)]
 [!code-vb[Control\_Scale1\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_Scale1/VB/control_scale1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Size" />
        <altmember cref="E:System.Windows.Forms.Control.Resize" />
      </Docs>
    </Member>
    <Member MemberName="SizeFromClientSize">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Size SizeFromClientSize (System.Drawing.Size clientSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Drawing.Size SizeFromClientSize(valuetype System.Drawing.Size clientSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SizeFromClientSize(System.Drawing.Size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clientSize" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="clientSize">コントロールのクライアント領域の高さおよび幅を表す <see cref="T:System.Drawing.Size" /> 値。</param>
        <summary>クライアント領域の高さおよび幅からコントロール全体のサイズを決定します。</summary>
        <returns>コントロール全体の高さおよび幅を表す <see cref="T:System.Drawing.Size" /> 値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler StyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler StyleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.StyleChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロール スタイルが変更されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.StyleChanged> イベントが発生したときに <xref:System.Windows.Forms.ControlStyles> フラグが追加または変更されました。  
  
 コントロールのスタイルは、プログラムの変更やユーザー操作によって変更された場合、このイベントが発生します。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.Control.StyleChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行するから継承する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.Control>, など、 <xref:System.Windows.Forms.Button> または <xref:System.Windows.Forms.ComboBox>です。 インスタンスを名前 `Control1` イベント ハンドラーが関連付けられていることを確認し、 <xref:System.Windows.Forms.Control.StyleChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#68](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#68)]
 [!code-vb[System.Windows.Forms.EventExamples\#68](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#68)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.ControlStyles" />
      </Docs>
    </Member>
    <Member MemberName="SuspendLayout">
      <MemberSignature Language="C#" Value="public void SuspendLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SuspendLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SuspendLayout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールのレイアウト ロジックを一時的に中断します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コントロールのレイアウト ロジックが中断されるまで、 <xref:System.Windows.Forms.Control.ResumeLayout%2A> メソッドが呼び出されます。  
  
 <xref:System.Windows.Forms.Control.SuspendLayout%2A> と <xref:System.Windows.Forms.Control.ResumeLayout%2A> を抑制する状況複数の両方のメソッドを使用 <xref:System.Windows.Forms.Control.Layout> イベント、コントロールの複数の属性を調整します。 呼び出します通常など、 <xref:System.Windows.Forms.Control.SuspendLayout%2A> メソッドを設定し、 <xref:System.Windows.Forms.Control.Size%2A>, 、<xref:System.Windows.Forms.Control.Location%2A>, 、<xref:System.Windows.Forms.Control.Anchor%2A>, 、または <xref:System.Windows.Forms.Control.Dock%2A> 制御、および次のプロパティ、 <xref:System.Windows.Forms.Control.ResumeLayout%2A> メソッドを有効にする変更を有効にします。  
  
 保留中の呼び出しをする必要がある <xref:System.Windows.Forms.Control.SuspendLayout%2A> の <xref:System.Windows.Forms.Control.ResumeLayout%2A> に正常に呼び出されます。  
  
> [!NOTE]
>  いくつかのコントロールを親コントロールを追加する場合は、呼び出すことをお勧めしますが、 <xref:System.Windows.Forms.Control.SuspendLayout%2A> メソッドを追加するコントロールを初期化する前にします。 親コントロールにコントロールを追加した後、 <xref:System.Windows.Forms.Control.ResumeLayout%2A> メソッドです。 これにより、多くのコントロールを持つアプリケーションのパフォーマンスが向上します。  
  
   
  
## 例  
 次のコード例では、フォームに 2 つのボタンを追加します。 トランザクションの例を使用してボタンの追加、 <xref:System.Windows.Forms.Control.SuspendLayout%2A> と <xref:System.Windows.Forms.Control.ResumeLayout%2A> メソッドです。  
  
 [!code-cpp[Windows.Forms.Control Members2\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CPP/controlmembers2.cpp#2)]
 [!code-csharp[Windows.Forms.Control Members2\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CS/controlmembers2.cs#2)]
 [!code-vb[Windows.Forms.Control Members2\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members2/VB/controlmembers2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.ResumeLayout" />
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Forms.IDropTarget.OnDragDrop">
      <MemberSignature Language="C#" Value="void IDropTarget.OnDragDrop (System.Windows.Forms.DragEventArgs drgEvent);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Forms.IDropTarget.OnDragDrop(class System.Windows.Forms.DragEventArgs drgEvent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragDrop(System.Windows.Forms.DragEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drgEvent" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="drgEvent">イベント データを格納している <see cref="T:System.Windows.Forms.DragEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.DragDrop" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Forms.IDropTarget.OnDragEnter">
      <MemberSignature Language="C#" Value="void IDropTarget.OnDragEnter (System.Windows.Forms.DragEventArgs drgEvent);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Forms.IDropTarget.OnDragEnter(class System.Windows.Forms.DragEventArgs drgEvent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragEnter(System.Windows.Forms.DragEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drgEvent" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="drgEvent">イベント データを格納している <see cref="T:System.Windows.Forms.DragEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.DragEnter" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Forms.IDropTarget.OnDragLeave">
      <MemberSignature Language="C#" Value="void IDropTarget.OnDragLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Forms.IDropTarget.OnDragLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragLeave(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.DragLeave" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Forms.IDropTarget.OnDragOver">
      <MemberSignature Language="C#" Value="void IDropTarget.OnDragOver (System.Windows.Forms.DragEventArgs drgEvent);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Forms.IDropTarget.OnDragOver(class System.Windows.Forms.DragEventArgs drgEvent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragOver(System.Windows.Forms.DragEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drgEvent" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="drgEvent">イベント データを格納している <see cref="T:System.Windows.Forms.DragEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.DragOver" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SystemColorsChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SystemColorsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SystemColorsChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.SystemColorsChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>システム カラーが変更されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、 <xref:System.Drawing.SystemColors> プログラムの変更やユーザー操作によって変更されました。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.Control.SystemColorsChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行するから継承する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.Control>, など、 <xref:System.Windows.Forms.Button> または <xref:System.Windows.Forms.ComboBox>です。 インスタンスを名前 `Control1` イベント ハンドラーが関連付けられていることを確認し、 <xref:System.Windows.Forms.Control.SystemColorsChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#69](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#69)]
 [!code-vb[System.Windows.Forms.EventExamples\#69](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#69)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)" />
        <altmember cref="T:System.Drawing.SystemColors" />
      </Docs>
    </Member>
    <Member MemberName="TabIndex">
      <MemberSignature Language="C#" Value="public int TabIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TabIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.TabIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンテナー内のコントロールのタブ オーダーを取得または設定します。</summary>
        <value>コンテナー内のコントロールのセット内にあるコントロールのインデックス値。 コンテナー内のコントロールは、タブ オーダーに含まれます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 タブ インデックスは、0 個、小さい番号のタブ オーダーで以前にされている以上の有効な整数で構成できます。 同じ親コントロールの 1 つ以上のコントロールに同じタブ インデックスがある場合は、コントロールの z オーダーは、コントロールを循環する順序を決定します。  
  
 タブ オーダーに含まれるコントロールの <xref:System.Windows.Forms.Control.TabStop%2A> にプロパティを設定する必要があります `true`します。  
  
   
  
## 例  
 次のコード例では追加、 <xref:System.Windows.Forms.Button> をフォームにし、一部の一般的なプロパティを設定します。 例は、フォームの右下隅にボタンを固定することにより、フォームがサイズ変更すると、相対的な位置関係が維持されるようにします。 次に、設定、 <xref:System.Windows.Forms.Control.BackgroundImage%2A> と同じサイズにボタンのサイズを変更し、 <xref:System.Drawing.Image>です。 その後、設定、 <xref:System.Windows.Forms.Control.TabStop%2A> に `true` し、設定、 <xref:System.Windows.Forms.Control.TabIndex%2A> プロパティです。 最後に、処理するイベント ハンドラーを追加、 <xref:System.Windows.Forms.Control.Click> ボタンのイベントです。 この例は、 <xref:System.Windows.Forms.ImageList> という名前 `imageList1`します。  
  
 [!code-cpp[Windows.Forms.Control Properties\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#3)]
 [!code-csharp[Windows.Forms.Control Properties\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#3)]
 [!code-vb[Windows.Forms.Control Properties\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.UpdateZOrder" />
        <altmember cref="P:System.Windows.Forms.Control.TabStop" />
      </Docs>
    </Member>
    <Member MemberName="TabIndexChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TabIndexChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TabIndexChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.TabIndexChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.TabIndex" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、 <xref:System.Windows.Forms.Control.TabIndex%2A> プロパティがプログラムの変更やユーザー操作によって変更します。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.Control.TabIndexChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行するから継承する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.Control>, など、 <xref:System.Windows.Forms.Button> または <xref:System.Windows.Forms.ComboBox>です。 インスタンスを名前 `Control1` イベント ハンドラーが関連付けられていることを確認し、 <xref:System.Windows.Forms.Control.TabIndexChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#25](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#25)]
 [!code-vb[System.Windows.Forms.EventExamples\#25](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.TabIndex" />
      </Docs>
    </Member>
    <Member MemberName="TabStop">
      <MemberSignature Language="C#" Value="public bool TabStop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TabStop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.TabStop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-516)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーが Tab キーで、このコントロールにフォーカスを移すことができるかどうかを示す値を取得または設定します。</summary>
        <value>ユーザーが Tab キーを使用してコントロールにフォーカスを移すことができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。  
  
 <block subset="none" type="note">  
<para>  
 <see langword="true" /> クラスのインスタンスの場合、このプロパティは必ず <see cref="T:System.Windows.Forms.Form" /> を返します。  
  
</para>  
</block></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ユーザーが TAB キーを押すと、入力フォーカスがタブ オーダーの次のコントロールに設定されます。 制御、 <xref:System.Windows.Forms.Control.TabStop%2A> のプロパティの値 `false` は、タブ オーダーでコントロールのコレクションに含まれません。 コントロールの設定によって、タブ オーダーを操作できる <xref:System.Windows.Forms.Control.TabIndex%2A> プロパティの値。  
  
   
  
## 例  
 次のコード例では追加、 <xref:System.Windows.Forms.Button> をフォームにし、一部の一般的なプロパティを設定します。 例は、フォームの右下隅にボタンを固定することにより、フォームがサイズ変更すると、相対的な位置関係が維持されるようにします。 次に、設定、 <xref:System.Windows.Forms.Control.BackgroundImage%2A> と同じサイズにボタンのサイズを変更し、 <xref:System.Drawing.Image>です。 その後、設定、 <xref:System.Windows.Forms.Control.TabStop%2A> に `true` し、設定、 <xref:System.Windows.Forms.Control.TabIndex%2A> プロパティです。 最後に、処理するイベント ハンドラーを追加、 <xref:System.Windows.Forms.Control.Click> ボタンのイベントです。 この例は、 <xref:System.Windows.Forms.ImageList> という名前 `imageList1`します。  
  
 [!code-cpp[Windows.Forms.Control Properties\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#3)]
 [!code-csharp[Windows.Forms.Control Properties\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#3)]
 [!code-vb[Windows.Forms.Control Properties\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.TabIndex" />
      </Docs>
    </Member>
    <Member MemberName="TabStopChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TabStopChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TabStopChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.TabStopChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.TabStop" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、 <xref:System.Windows.Forms.Control.TabStop%2A> プロパティがプログラムの変更やユーザー操作によって変更します。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.Control.TabStopChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行するから継承する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.Control>, など、 <xref:System.Windows.Forms.Button> または <xref:System.Windows.Forms.ComboBox>です。 インスタンスを名前 `Control1` イベント ハンドラーが関連付けられていることを確認し、 <xref:System.Windows.Forms.Control.TabStopChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#26](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#26)]
 [!code-vb[System.Windows.Forms.EventExamples\#26](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.TabStop" />
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.StringConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールに関するデータを格納するオブジェクトを取得または設定します。</summary>
        <value>コントロールに関するデータを格納している <see cref="T:System.Object" />。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 派生する型、 <xref:System.Object> クラスは、このプロパティに割り当てることができます。 場合、 <xref:System.Windows.Forms.Control.Tag%2A> プロパティは、Windows フォーム デザイナーで設定、テキストのみを割り当てることができます。  
  
 一般的な用途、 <xref:System.Windows.Forms.Control.Tag%2A> プロパティは、コントロールに密接に関連付けられているデータを格納します。 たとえば、顧客に関する情報を表示するコントロールがある場合は、保存できます、 <xref:System.Data.DataSet> そのコントロールの顧客の注文履歴を格納している <xref:System.Windows.Forms.Control.Tag%2A> プロパティ データを簡単にアクセスできるようにします。  
  
   
  
## 例  
 次のコード例は、フォームを表示し、格納、 `Customer` でその <xref:System.Windows.Forms.Control.Tag%2A> プロパティです。 この例から派生したクラスが定義されている必要があります <xref:System.Windows.Forms.Form> という `CustomerForm` と定義されている、 `Customer`です。  
  
 [!code-cpp[Windows.Forms.Control Members2\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CPP/controlmembers2.cpp#3)]
 [!code-csharp[Windows.Forms.Control Members2\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CS/controlmembers2.cs#3)]
 [!code-vb[Windows.Forms.Control Members2\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members2/VB/controlmembers2.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public virtual string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-517)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このコントロールに関連付けられているテキストを取得または設定します。</summary>
        <value>このコントロールに関連付けられたテキスト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.Text%2A> コントロールのプロパティは、各派生クラスによって異なる方法で使用します。 たとえば、 <xref:System.Windows.Forms.Control.Text%2A> のプロパティ、 <xref:System.Windows.Forms.Form> フォームの上部にあるタイトル バーに表示される、文字数の小さいおよび通常のアプリケーションまたはドキュメントの名前が表示されます。 ただし、 <xref:System.Windows.Forms.Control.Text%2A> のプロパティ、 <xref:System.Windows.Forms.RichTextBox> が大きくなるし、テキストの書式設定するために使用、さまざまな視覚文字を含めることができます。 表示されるテキストなど、 <xref:System.Windows.Forms.RichTextBox> 調整することによってフォーマットされていることができます、 <xref:System.Drawing.Font> プロパティ、またはスペースまたはテキストに合わせて、タブ文字を追加しています。  
  
   
  
## 例  
 次のコード例を作成、 <xref:System.Windows.Forms.GroupBox> し、一部の一般的なプロパティを設定します。 例を作成し、 <xref:System.Windows.Forms.TextBox> 設定とその <xref:System.Windows.Forms.Control.Location%2A> グループ ボックス内で。 次に、設定、 <xref:System.Windows.Forms.Control.Text%2A> グループ ボックス、およびフォームの上部に、グループ ボックス ドッキングのプロパティです。 グループ ボックスを無効にするには最後に、 <xref:System.Windows.Forms.Control.Enabled%2A> プロパティを `false`, 、それが原因で無効にするには、そのグループ ボックス内のすべてのコントロールです。  
  
 [!code-cpp[Windows.Forms.Control Properties\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#2)]
 [!code-csharp[Windows.Forms.Control Properties\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#2)]
 [!code-vb[Windows.Forms.Control Properties\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding the <see cref="P:System.Windows.Forms.Control.Text" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.Text" /> property to extend the base implementation. Otherwise, you must provide all the implementation. You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.Text" /> property; you can override only one if needed.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.TextLength" />
      </Docs>
    </Member>
    <Member MemberName="TextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.TextChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.Text" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、 <xref:System.Windows.Forms.Control.Text%2A> プロパティがプログラムの変更やユーザー操作によって変更します。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコードを変更する例、 <xref:System.Windows.Forms.Control.ForeColor%2A> の <xref:System.Windows.Forms.TextBox> データを表示します。 例では、文字列に変換する 10 進数と変更、 <xref:System.Windows.Forms.Control.ForeColor%2A> に <xref:System.Drawing.Color.Red%2A?displayProperty=fullName> 負の値とする <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> 数値が正の場合。 この例は、 <xref:System.Windows.Forms.Form> を含む、 <xref:System.Windows.Forms.TextBox>です。  
  
 [!code-cpp[Windows.Forms.Control\_PropertyChangedEvents\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CPP/propertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control\_PropertyChangedEvents\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CS/propertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control\_PropertyChangedEvents\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/VB/propertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Text" />
      </Docs>
    </Member>
    <Member MemberName="Top">
      <MemberSignature Language="C#" Value="public int Top { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Top" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Top" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの上端とコンテナーのクライアント領域の上端の間の距離をピクセル単位で取得または設定します。</summary>
        <value>
          <see cref="T:System.Int32" /> は、コントロールの下端とコンテナーのクライアント領域の上端の間の距離 \(ピクセル単位\) を示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.Top%2A> プロパティの値は、 <xref:System.Drawing.Point.Y%2A?displayProperty=fullName> のプロパティ、 <xref:System.Windows.Forms.Control.Location%2A> コントロールのプロパティの値。  
  
 加えられた変更、 <xref:System.Windows.Forms.Control.Height%2A> と <xref:System.Windows.Forms.Control.Top%2A> プロパティの値を原因、 <xref:System.Windows.Forms.Control.Bottom%2A> を変更するコントロールのプロパティの値。  
  
   
  
## 例  
 次のコード例では、3 つが作成されます <xref:System.Windows.Forms.Button> フォームのコントロールし、さまざまなサイズと場所関連プロパティを使用してそのサイズと場所を設定します。 この例である必要があります、 <xref:System.Windows.Forms.Form> を持つ幅と高さには、少なくとも 300 ピクセルです。  
  
 [!code-cpp[Windows.Forms.Control SizeLocation\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CPP/controlsizelocation.cpp#1)]
 [!code-csharp[Windows.Forms.Control SizeLocation\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CS/controlsizelocation.cs#1)]
 [!code-vb[Windows.Forms.Control SizeLocation\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/VB/controlsizelocation.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Drawing.Point.Y" />
        <altmember cref="P:System.Windows.Forms.Control.Bottom" />
        <altmember cref="P:System.Windows.Forms.Control.Bounds" />
      </Docs>
    </Member>
    <Member MemberName="TopLevelControl">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control TopLevelControl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control TopLevelControl" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.TopLevelControl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>別の Windows フォーム コントロールを親として持たない親コントロールを取得します。 一般的に、これは、コントロールを格納している最も外側の <see cref="T:System.Windows.Forms.Form" /> です。</summary>
        <value>現在のコントロールを格納しているトップレベル コントロールを表す <see cref="T:System.Windows.Forms.Control" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 最上位のコントロールは、別の Windows フォーム コントロールを親として持たない親コントロールとして定義されます。 一般的に、これは、コントロールを格納している最も外側の <xref:System.Windows.Forms.Form> です。 たとえば、コントロールが MDI 子に含まれる <xref:System.Windows.Forms.Form>, 、最上位のコントロールは、マルチ ドキュメント インターフェイス \(MDI\) 親 <xref:System.Windows.Forms.Form>します。 コントロールに親がない場合、 <xref:System.Windows.Forms.Form>, 、このプロパティは `null`です。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows to get this property value. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="T:System.Windows.Forms.Form" />
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public void Update ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Update() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Update" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールによって、クライアント領域内の無効化された領域が再描画されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ペイントの保留中の要求を実行します。  
  
 フォームとその内容を再描画する 2 つの方法があります。  
  
-   オーバー ロードのいずれかを使用する、 <xref:System.Windows.Forms.Control.Invalidate%2A> メソッドを <xref:System.Windows.Forms.Control.Update%2A> メソッドです。  
  
-   呼び出すことができます、 <xref:System.Windows.Forms.Control.Refresh%2A> メソッドで、サイト自体とそのすべての子を再描画するように強制します。 これは、同じことに、 <xref:System.Windows.Forms.Control.Invalidate%2A> メソッドを `true` で使用および <xref:System.Windows.Forms.Control.Update%2A>です。  
  
 <xref:System.Windows.Forms.Control.Invalidate%2A> メソッドは、どのような描画を取得または再描画を制御します。<xref:System.Windows.Forms.Control.Update%2A> 、描画または再描画が発生したときにメソッドが制御します。 使用する場合、 <xref:System.Windows.Forms.Control.Invalidate%2A> と <xref:System.Windows.Forms.Control.Update%2A> メソッドを呼び出すのではなくまとめて <xref:System.Windows.Forms.Control.Refresh%2A>, 、のどのオーバー ロードに依存どのような再描画を取得 <xref:System.Windows.Forms.Control.Invalidate%2A> を使用します。<xref:System.Windows.Forms.Control.Update%2A> ように、すぐに描画するコントロールだけメソッドが、 <xref:System.Windows.Forms.Control.Invalidate%2A> メソッドを呼び出したときにどのような描画取得を制御する、 <xref:System.Windows.Forms.Control.Update%2A> メソッドです。  
  
 詳細については、次を参照してください。、[WM\_PAINT](http://msdn.microsoft.com/library/dd145213\(v=vs.85\).aspx)トピックです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.ClientRectangle" />
        <altmember cref="P:System.Windows.Forms.Control.ClientSize" />
        <altmember cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)" />
      </Docs>
    </Member>
    <Member MemberName="UpdateBounds">
      <MemberSignature Language="C#" Value="protected void UpdateBounds ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void UpdateBounds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.UpdateBounds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールの範囲を現在のサイズと位置で更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、新しい <xref:System.Windows.Forms.Control.Size%2A> コントロールは、前の異なる <xref:System.Drawing.Size>, 、 <xref:System.Windows.Forms.Control.SizeChanged> イベントが発生します。 同様に場合、 <xref:System.Windows.Forms.Control.Location%2A> のコントロールの変更、 <xref:System.Windows.Forms.Control.LocationChanged> イベントが発生します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Size" />
        <altmember cref="P:System.Windows.Forms.Control.Location" />
      </Docs>
    </Member>
    <Member MemberName="UpdateBounds">
      <MemberSignature Language="C#" Value="protected void UpdateBounds (int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateBounds(int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">コントロールの <see cref="P:System.Drawing.Point.X" /> 座標。</param>
        <param name="y">コントロールの <see cref="P:System.Drawing.Point.Y" /> 座標。</param>
        <param name="width">コントロールの <see cref="P:System.Drawing.Size.Width" />。</param>
        <param name="height">コントロールの <see cref="P:System.Drawing.Size.Height" />。</param>
        <summary>コントロールの範囲を指定したサイズと位置で更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、新しい <xref:System.Windows.Forms.Control.Size%2A> 前と異なる場合、コントロールの <xref:System.Drawing.Size>, 、 <xref:System.Windows.Forms.Control.SizeChanged> イベントが発生します。 同様に、 <xref:System.Windows.Forms.Control.Location%2A> のコントロールの変更、 <xref:System.Windows.Forms.Control.LocationChanged> イベントが発生します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Size" />
        <altmember cref="P:System.Windows.Forms.Control.Location" />
      </Docs>
    </Member>
    <Member MemberName="UpdateBounds">
      <MemberSignature Language="C#" Value="protected void UpdateBounds (int x, int y, int width, int height, int clientWidth, int clientHeight);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateBounds(int32 x, int32 y, int32 width, int32 height, int32 clientWidth, int32 clientHeight) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="clientWidth" Type="System.Int32" />
        <Parameter Name="clientHeight" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">コントロールの <see cref="P:System.Drawing.Point.X" /> 座標。</param>
        <param name="y">コントロールの <see cref="P:System.Drawing.Point.Y" /> 座標。</param>
        <param name="width">コントロールの <see cref="P:System.Drawing.Size.Width" />。</param>
        <param name="height">コントロールの <see cref="P:System.Drawing.Size.Height" />。</param>
        <param name="clientWidth">コントロールのクライアント <see cref="P:System.Drawing.Size.Width" />。</param>
        <param name="clientHeight">コントロールのクライアント <see cref="P:System.Drawing.Size.Height" />。</param>
        <summary>コントロールの範囲を指定したサイズ、位置、およびクライアント サイズで更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、新しい <xref:System.Windows.Forms.Control.Size%2A> コントロールは、前の異なる <xref:System.Drawing.Size>, 、 <xref:System.Windows.Forms.Control.SizeChanged> イベントが発生します。 同様に場合、 <xref:System.Windows.Forms.Control.Location%2A> のコントロールの変更、 <xref:System.Windows.Forms.Control.LocationChanged> イベントが発生します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Size" />
        <altmember cref="P:System.Windows.Forms.Control.Location" />
        <altmember cref="P:System.Windows.Forms.Control.ClientRectangle" />
      </Docs>
    </Member>
    <Member MemberName="UpdateStyles">
      <MemberSignature Language="C#" Value="protected void UpdateStyles ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateStyles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.UpdateStyles" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>割り当て済みのスタイルを強制的にコントロールに再適用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、 <xref:System.Windows.Forms.Control.CreateParams%2A> を適用するスタイルを取得します。 割り当てられているスタイル、 <xref:System.Windows.Forms.CreateParams.Style%2A> と <xref:System.Windows.Forms.CreateParams.ExStyle%2A> のプロパティ、 <xref:System.Windows.Forms.CreateParams> 、コントロールに割り当てられた <xref:System.Windows.Forms.Control.CreateParams%2A> プロパティが再適用されます。 コントロールが必要な場合は、スタイルの変更を反映するように再描画します。  
  
 <xref:System.Windows.Forms.Control.UpdateStyles%2A> メソッドには影響がない場合、 <xref:System.Windows.Forms.Control.IsHandleCreated%2A> プロパティの値が `false`です。  
  
   
  
## 例  
 次のコード例は、のダブル バッファリングを有効、 <xref:System.Windows.Forms.Form> し、変更を反映するようにスタイルを更新します。  
  
 [!code-cpp[Windows.Forms.ControlMembers6\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CPP/controlmembers6.cpp#3)]
 [!code-csharp[Windows.Forms.ControlMembers6\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CS/controlmembers6.cs#3)]
 [!code-vb[Windows.Forms.ControlMembers6\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/VB/controlmembers6.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
      </Docs>
    </Member>
    <Member MemberName="UpdateZOrder">
      <MemberSignature Language="C#" Value="protected void UpdateZOrder ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateZOrder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.UpdateZOrder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールを親の z オーダーで更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.UpdateZOrder%2A> メソッドは、親コントロールの z オーダーでコントロールの位置を更新します。 このコントロールは、新しく作成された制御場合に追加されたなど、 <xref:System.Windows.Forms.Control.ControlCollection>, 、背面に追加した新しいコントロールを z オーダーを更新します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Control.ControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="UseWaitCursor">
      <MemberSignature Language="C#" Value="public bool UseWaitCursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseWaitCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.UseWaitCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のコントロールおよびすべての子コントロールに待機カーソルを使用するかどうかを示す値を取得または設定します。</summary>
        <value>現在の子コントロールおよびすべての子コントロールに待機カーソルを使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 はかなりの時間を取得する操作を実行するたびに待機カーソルを使用します。ただし、UI スレッドをブロックする操作は、acursor 変更にもブロックされます。そのため、このプロパティは、別のスレッドで時間のかかる操作を実行するときにのみ使用する必要があります。 グローバルとすぐには、カーソルを変更するには、「参照してください。 <xref:System.Windows.Forms.Cursor.Current%2A> プロパティです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validated">
      <MemberSignature Language="C#" Value="public event EventHandler Validated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Validated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Validated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの検証が終了すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出して \(タブ、shift キーを押しながら TAB となど\) のキーボードを使用して、フォーカスを変更すると、 <xref:System.Windows.Forms.Control.Select%2A> または <xref:System.Windows.Forms.Control.SelectNextControl%2A> メソッドを設定したり、 <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=fullName> プロパティを現在のフォームは、次の順序でのフォーカス イベントが発生します。  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 フォーカスを変更すると、マウスを使用するか、呼び出すことによって、 <xref:System.Windows.Forms.Control.Focus%2A> メソッドでは、次の順序でのフォーカス イベントが発生します。  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.LostFocus>  
  
4.  <xref:System.Windows.Forms.Control.Leave>  
  
5.  <xref:System.Windows.Forms.Control.Validating>  
  
6.  <xref:System.Windows.Forms.Control.Validated>  
  
 場合、 <xref:System.Windows.Forms.Control.CausesValidation%2A> にプロパティが設定されている `false`, 、 <xref:System.Windows.Forms.Control.Validating> と <xref:System.Windows.Forms.Control.Validated> イベントが抑制されます。  
  
 場合、 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> のプロパティ、 <xref:System.ComponentModel.CancelEventArgs> に設定されている `true` で、 <xref:System.Windows.Forms.Control.Validating> イベント デリゲート、後に通常発生するすべてのイベント、 <xref:System.Windows.Forms.Control.Validating> イベントが抑制されます。  
  
> [!CAUTION]
>  内からフォーカスを設定しないでください、 <xref:System.Windows.Forms.Control.Enter>, 、<xref:System.Windows.Forms.Control.GotFocus>, 、<xref:System.Windows.Forms.Control.Leave>, 、<xref:System.Windows.Forms.Control.LostFocus>, 、<xref:System.Windows.Forms.Control.Validating>, 、または <xref:System.Windows.Forms.Control.Validated> イベント ハンドラーです。 そうと、アプリケーションまたはオペレーティング システムが応答を停止することができます。 詳細については、次を参照してください。、[WM\_KILLFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms632614\(v=vs.85\).aspx)トピック、および"メッセージ デッドロック"セクションの、 [About Messages and Message Queues](http://msdn.microsoft.com/library/windows/desktop/ms644927\(v=vs.85\).aspx) トピックです。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例は、派生クラスを使用して <xref:System.Windows.Forms.TextBox> し、ユーザーが入力した電子メール アドレスを検証します。 電子メール アドレスが標準の形式でない場合 \(を含む"@「と」です。"\)、検証に失敗、 <xref:System.Windows.Forms.ErrorProvider> アイコンが表示され、イベントが取り消されました。 この例で必要とする、 <xref:System.Windows.Forms.TextBox> と <xref:System.Windows.Forms.ErrorProvider> フォーム上のコントロールが作成されました。  
  
 [!code-cpp[Control.Validating\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Validating/CPP/validating.cpp#1)]
 [!code-csharp[Control.Validating\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Validating/CS/validating.cs#1)]
 [!code-vb[Control.Validating\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Validating/VB/validating.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.CausesValidation" />
        <altmember cref="E:System.Windows.Forms.Control.Validating" />
      </Docs>
    </Member>
    <Member MemberName="Validating">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.CancelEventHandler Validating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.CancelEventHandler Validating" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Validating" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.CancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールが検証しているときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出して \(タブ、shift キーを押しながら TAB となど\) のキーボードを使用して、フォーカスを変更すると、 <xref:System.Windows.Forms.Control.Select%2A>または <xref:System.Windows.Forms.Control.SelectNextControl%2A> メソッドを設定したり、 <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=fullName> プロパティを現在のフォームは、次の順序でのフォーカス イベントが発生します。  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 フォーカスを変更すると、マウスを使用するか、呼び出すことによって、 <xref:System.Windows.Forms.Control.Focus%2A> メソッドでは、次の順序でのフォーカス イベントが発生します。  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.LostFocus>  
  
4.  <xref:System.Windows.Forms.Control.Leave>  
  
5.  <xref:System.Windows.Forms.Control.Validating>  
  
6.  <xref:System.Windows.Forms.Control.Validated>  
  
 場合、 <xref:System.Windows.Forms.Control.CausesValidation%2A> にプロパティが設定されている `false`, 、 <xref:System.Windows.Forms.Control.Validating> と <xref:System.Windows.Forms.Control.Validated> イベントが抑制されます。  
  
 場合、 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> のプロパティ、 <xref:System.ComponentModel.CancelEventArgs> に設定されている `true` で、 <xref:System.Windows.Forms.Control.Validating> イベント デリゲート、後に通常発生するすべてのイベント、 <xref:System.Windows.Forms.Control.Validating> イベントが抑制されます。  
  
> [!CAUTION]
>  内からフォーカスを設定しないでください、 <xref:System.Windows.Forms.Control.Enter>, 、<xref:System.Windows.Forms.Control.GotFocus>, 、<xref:System.Windows.Forms.Control.Leave>, 、<xref:System.Windows.Forms.Control.LostFocus>, 、<xref:System.Windows.Forms.Control.Validating>, 、または <xref:System.Windows.Forms.Control.Validated> イベント ハンドラーです。 そうと、アプリケーションまたはオペレーティング システムが応答を停止することができます。 詳細については、次を参照してください。、 `WM_KILLFOCUS` "キーボード入力の一覧"セクションと、MSDN ライブラリの「http:\/\/msdn.microsoft.com\/library"のメッセージ キューとメッセージ キュー"トピックの"メッセージ デッドロック"セクションのトピックです。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例は、派生クラスを使用して <xref:System.Windows.Forms.TextBox> し、ユーザーが入力した電子メール アドレスを検証します。 電子メール アドレスが標準の形式でない場合 \(を含む"@「と」です。"\)、検証に失敗、 <xref:System.Windows.Forms.ErrorProvider> アイコンが表示され、イベントが取り消されました。 この例で必要とする、 <xref:System.Windows.Forms.TextBox> と <xref:System.Windows.Forms.ErrorProvider> フォーム上のコントロールが作成されました。  
  
 [!code-cpp[Control.Validating\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Validating/CPP/validating.cpp#1)]
 [!code-csharp[Control.Validating\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Validating/CS/validating.cs#1)]
 [!code-vb[Control.Validating\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Validating/VB/validating.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.CausesValidation" />
        <altmember cref="E:System.Windows.Forms.Control.Validated" />
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールとそのすべての子コントロールが表示されているかどうかを示す値を取得または設定します。</summary>
        <value>コントロールとそのすべての子コントロールが表示されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 その場合であっても注意してください `Visible` に設定されている `true`, 、コントロールは他のコントロールの背後に隠されている場合、ユーザーに表示されません。  
  
   
  
## 例  
 次のコード例は、派生クラスを使用して <xref:System.Windows.Forms.VScrollBar> と <xref:System.Windows.Forms.HScrollBar> 設定とその <xref:System.Windows.Forms.Control.Visible%2A> のサイズに基づいて、プロパティの値、 <xref:System.Drawing.Image> に表示されている、 <xref:System.Windows.Forms.PictureBox> コントロールです。 この例で必要とする、 <xref:System.Windows.Forms.PictureBox> およびフォーム上に作成されて <xref:System.Windows.Forms.HScrollBar> と <xref:System.Windows.Forms.VScrollBar> 上のコントロールが作成された、 <xref:System.Windows.Forms.PictureBox>です。 このコードを呼び出すイメージが読み込まれる画像ボックスに、また、 <xref:System.Windows.Forms.Control.Resize> 形式のイベントです。  
  
 [!code-cpp[Classic Control.Visible Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Control.Visible Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Control.Visible Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Control.Visible Example/CS/source.cs#1)]
 [!code-vb[Classic Control.Visible Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Control.Visible Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Enabled" />
        <altmember cref="P:System.Windows.Forms.Control.CanFocus" />
        <altmember cref="M:System.Windows.Forms.Control.Hide" />
        <altmember cref="M:System.Windows.Forms.Control.SetVisibleCore(System.Boolean)" />
        <altmember cref="E:System.Windows.Forms.Control.VisibleChanged" />
      </Docs>
    </Member>
    <Member MemberName="VisibleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler VisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler VisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.VisibleChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.Visible" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、 <xref:System.Windows.Forms.Control.Visible%2A> プロパティがプログラムの変更やユーザー操作によって変更します。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例を発生させる、 <xref:System.Windows.Forms.Control.VisibleChanged> イベント時に、 <xref:System.Windows.Forms.Control.Visible%2A> のプロパティの値、 <xref:System.Windows.Forms.Label> コントロールが変更されました。  
  
 [!code-cpp[Control\_VisibleChanged\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_VisibleChanged/CPP/control_visiblechanged.cpp#1)]
 [!code-csharp[Control\_VisibleChanged\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_VisibleChanged/CS/control_visiblechanged.cs#1)]
 [!code-vb[Control\_VisibleChanged\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_VisibleChanged/VB/control_visiblechanged.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Visible" />
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public int Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Width" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの幅を取得または設定します。</summary>
        <value>コントロールの幅 \(ピクセル単位\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 加えられた変更、 <xref:System.Windows.Forms.Control.Width%2A> と <xref:System.Windows.Forms.Control.Left%2A> プロパティの値を原因、 <xref:System.Windows.Forms.Control.Right%2A> を変更するコントロールのプロパティの値。  
  
   
  
## 例  
 次のコード例では、3 つが作成されます <xref:System.Windows.Forms.Button> フォームのコントロールし、さまざまなサイズと場所関連プロパティを使用してそのサイズと場所を設定します。 この例である必要があります、 <xref:System.Windows.Forms.Form> を持つ幅と高さには、少なくとも 300 ピクセルです。  
  
 [!code-cpp[Windows.Forms.Control SizeLocation\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CPP/controlsizelocation.cpp#1)]
 [!code-csharp[Windows.Forms.Control SizeLocation\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CS/controlsizelocation.cs#1)]
 [!code-vb[Windows.Forms.Control SizeLocation\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/VB/controlsizelocation.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Bounds" />
        <altmember cref="P:System.Windows.Forms.Control.Height" />
        <altmember cref="P:System.Drawing.Size.Width" />
        <altmember cref="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WindowTarget">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.IWindowTarget WindowTarget { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.IWindowTarget WindowTarget" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.WindowTarget" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.IWindowTarget</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このクラスでは、このプロパティは使用されません。</summary>
        <value>コントロールに含まれる NativeWindow。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスでは、このプロパティは使用されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected virtual void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WndProc(valuetype System.Windows.Forms.Message m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">処理対象の Windows <see cref="T:System.Windows.Forms.Message" />。</param>
        <summary>Windows メッセージを処理します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 すべてのメッセージ、 <xref:System.Windows.Forms.Control.WndProc%2A> をフィルターで選択を取得した後に、 <xref:System.Windows.Forms.Control.PreProcessMessage%2A> メソッドです。  
  
 <xref:System.Windows.Forms.Control.WndProc%2A> メソッドは、Windows `WindowProc` 関数に正確に対応しています。 Windows メッセージの処理の詳細については、次を参照してください。、 [WindowProc function](http://go.microsoft.com/fwlink/?LinkId=181565)します。  
  
   
  
## 例  
 次のコード例では、オーバーライドを示しています、 <xref:System.Windows.Forms.Control.WndProc%2A> で識別されるオペレーティング システムのメッセージを処理するメソッドを <xref:System.Windows.Forms.Message> 構造体。[WM\_ACTIVATEAPP](http://msdn.microsoft.com/en-us/library/windows/desktop/ms632614\(v=vs.85\).aspx)別のアプリケーションがアクティブにしておくには、この例ではオペレーティング システムのメッセージを処理します。 理解、使用可能な次のトピックを参照して <xref:System.Windows.Forms.Message.Msg%2A?displayProperty=fullName>, 、<xref:System.Windows.Forms.Message.LParam%2A?displayProperty=fullName>, 、および <xref:System.Windows.Forms.Message.WParam%2A?displayProperty=fullName> 値。 実際の定数値は、Windows.h のヘッダー ファイルにあります。  
  
 [!code-cpp[System.Windows.Forms.Control.WndProc\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.WndProc/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.Control.WndProc\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.WndProc/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.WndProc\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.WndProc/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for the immediate caller to call unmanaged code. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
        <block subset="none" type="overrides">
          <para>Inheriting controls should call the base class's <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" /> method to process any messages that they do not handle.</para>
        </block>
        <altmember cref="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)" />
        <altmember cref="M:System.Windows.Forms.Control.DefWndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.Control" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="SetBounds">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>コントロールの範囲を設定します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ResumeLayout">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>通常のレイアウト ロジックを再開します。</summary>
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Select">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>コントロールをアクティブにします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Invalidate">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>コントロールの特定の領域を無効にし、そのコントロールに描画メッセージを送信します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="UpdateBounds">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>コントロールの範囲を更新します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="AccessibilityNotifyClients">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ユーザー補助クライアント アプリケーションに <see cref="T:System.Windows.Forms.AccessibleEvents" /> を通知します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="PerformLayout">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>コントロールがレイアウト ロジックを子コントロールに適用するように強制します。</summary>
        <altmember cref="M:System.Windows.Forms.Control.ResumeLayout" />
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetChildAtPoint">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した位置の子コントロールを取得します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>コントロールの基になるウィンドウ ハンドルを所有するスレッド上で、デリゲートを実行します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>コントロールの基になるハンドルが作成されたスレッド上で、非同期的にデリゲートを実行します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Scale">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>コントロールおよび子コントロールのスケールを設定します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="RtlTranslateAlignment">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>現在の配置を適切な配置に変換し、テキストを右から左に表示できるようにします。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>