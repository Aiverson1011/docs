<Type Name="DataGridView" FullName="System.Windows.Forms.DataGridView">
  <TypeSignature Language="C#" Value="public class DataGridView : System.Windows.Forms.Control, System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataGridView extends System.Windows.Forms.Control implements class System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.DataGridView" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ComplexBindingProperties("DataSource", "DataMember")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("CellContentClick")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.DataGridViewDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataGridViewComponentEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.ComponentModel.ComponentEditor))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Forms.Docking(System.Windows.Forms.DockingBehavior.Ask)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>データをカスタマイズ可能なグリッドで表示します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Windows.Forms.DataGridView> control provides a customizable table for displaying data. The <xref:System.Windows.Forms.DataGridView> class allows customization of cells, rows, columns, and borders through the use of properties such as <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A>, <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A>, <xref:System.Windows.Forms.DataGridView.CellBorderStyle%2A>, and <xref:System.Windows.Forms.DataGridView.GridColor%2A>. For more information, see [Basic Formatting and Styling in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/b9b90836-1f56-4aa9-8db8-edc78fe830e8).  
  
 You can use a <xref:System.Windows.Forms.DataGridView> control to display data with or without an underlying data source. Without specifying a data source, you can create columns and rows that contain data and add them directly to the <xref:System.Windows.Forms.DataGridView> using the <xref:System.Windows.Forms.DataGridView.Rows%2A> and <xref:System.Windows.Forms.DataGridView.Columns%2A> properties. You can also use the <xref:System.Windows.Forms.DataGridView.Rows%2A> collection to access <xref:System.Windows.Forms.DataGridViewRow> objects and the <xref:System.Windows.Forms.DataGridViewRow.Cells%2A?displayProperty=fullName> property to read or write cell values directly. The <xref:System.Windows.Forms.DataGridView.Item%2A> indexer also provides direct access to cells.  
  
 As an alternative to populating the control manually, you can set the <xref:System.Windows.Forms.DataGridView.DataSource%2A> and <xref:System.Windows.Forms.DataGridView.DataMember%2A> properties to bind the <xref:System.Windows.Forms.DataGridView> to a data source and automatically populate it with data. For more information, see [Displaying Data in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/b170b52a-2ebd-4948-ac2f-e52d494cebb2).  
  
 When working with very large amounts of data, you can set the <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> property to **languageKeyword tag is not supported!!!!**  
 to display a subset of the available data. Virtual mode requires the implementation of a data cache from which the <xref:System.Windows.Forms.DataGridView> control is populated. For more information, see [Data Display Modes in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/9755a030-3f3f-4705-a661-ba5a48a81875).  
  
 For additional information about the features available in the <xref:System.Windows.Forms.DataGridView> control, see [DataGridView Control \(Windows Forms\)](http://msdn.microsoft.com/ja-jp/dbee73f2-bba6-4874-9389-cd21d44309be). The following table provides direct links to common tasks.  
  
-   [How to: Bind Data to the Windows Forms DataGridView Control](http://msdn.microsoft.com/library/fbk67b6z\(v=vs.110\).aspx)  
  
-   [How to: Add ToolTips to Individual Cells in a Windows Forms DataGridView Control](http://msdn.microsoft.com/library/2249cf0a\(v=vs.110\).aspx)  
  
-   [How to: Set Font and Color Styles in the Windows Forms DataGridView Control](http://msdn.microsoft.com/library/z2akwyy7\(v=vs.110\).aspx)  
  
-   [How to: Change the Type of a Windows Forms DataGridView Column Using the Designer](http://msdn.microsoft.com/library/053656ss\(v=vs.110\).aspx)  
  
-   [How to: Bind Data to the Windows Forms DataGridView Control Using the Designer](http://msdn.microsoft.com/library/33w255ac\(v=vs.110\).aspx)  
  
-   [How to: Set Default Cell Styles and Data Formats for the Windows Forms DataGridView Control Using the Designer](http://msdn.microsoft.com/library/95y5fz2x\(v=vs.110\).aspx)  
  
-   [How to: Format Data in the Windows Forms DataGridView Control](http://msdn.microsoft.com/library/f9x2790s\(v=vs.110\).aspx)  
  
-   [Walkthrough: Validating Data in the Windows Forms DataGridView Control](http://msdn.microsoft.com/library/ykdxa0bc\(v=vs.110\).aspx)  
  
-   [How to: Customize Data Formatting in the Windows Forms DataGridView Control](http://msdn.microsoft.com/library/z1cc356h\(v=vs.110\).aspx)  
  
-   [Walkthrough: Creating a Master\/Detail Form Using Two Windows Forms DataGridView Controls](http://msdn.microsoft.com/library/y8c0cxey\(v=vs.110\).aspx)  
  
 Although the <xref:System.Windows.Forms.DataGridView> control replaces and adds functionality to the <xref:System.Windows.Forms.DataGrid> control of previous versions, the <xref:System.Windows.Forms.DataGrid> control is retained for both backward compatibility and future use if you choose. For more information, see [Differences Between the Windows Forms DataGridView and DataGrid Controls](http://msdn.microsoft.com/ja-jp/d412c786-140e-4210-8a56-a68467530a55).  
  
> [!NOTE]
>  The <xref:System.Windows.Forms.DataGridView> control inherits both the <xref:System.Windows.Forms.Control.ContextMenu%2A> and <xref:System.Windows.Forms.Control.ContextMenuStrip%2A> properties from <xref:System.Windows.Forms.Control>, but supports only the <xref:System.Windows.Forms.Control.ContextMenuStrip%2A> property. Using the <xref:System.Windows.Forms.Control.ContextMenu%2A> property with the <xref:System.Windows.Forms.DataGridView> control has no effect.  
  
   
  
## 例  
 The following code example demonstrates how to initialize an unbound <xref:System.Windows.Forms.DataGridView> control.  
  
 [!code-csharp[System.Windows.Forms.DataGridViewSimpleUnbound\#00](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSimpleUnbound/CS/simpleunbound.cs#00)]
 [!code-vb[System.Windows.Forms.DataGridViewSimpleUnbound\#00](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSimpleUnbound/VB/simpleunbound.vb#00)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataGridView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The following table shows initial property values for an instance of the <xref:System.Windows.Forms.DataGridView> class.  
  
|Property|Initial Value|  
|--------------|-------------------|  
|<xref:System.Windows.Forms.DataGridView.AllowUserToAddRows%2A>|`true`|  
|<xref:System.Windows.Forms.DataGridView.AllowUserToDeleteRows%2A>|`true`|  
|<xref:System.Windows.Forms.DataGridView.AllowUserToOrderColumns%2A>|`false`|  
|<xref:System.Windows.Forms.DataGridView.AllowUserToResizeColumns%2A>|`true`|  
|<xref:System.Windows.Forms.DataGridView.AllowUserToResizeRows%2A>|`true`|  
|<xref:System.Windows.Forms.DataGridView.AutoGenerateColumns%2A>|`true`|  
|<xref:System.Windows.Forms.DataGridView.AutoSizeColumnsMode%2A>|<xref:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.None>|  
|<xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A>|<xref:System.Windows.Forms.DataGridViewAutoSizeRowsMode.None>|  
|<xref:System.Windows.Forms.DataGridView.ClipboardCopyMode%2A>|<xref:System.Windows.Forms.DataGridViewClipboardCopyMode.EnableWithAutoHeaderText>|  
|<xref:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeMode%2A>|<xref:System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.EnableResizing>|  
|<xref:System.Windows.Forms.DataGridView.ColumnHeadersVisible%2A>|`true`|  
|<xref:System.Windows.Forms.DataGridView.EditMode%2A>|<xref:System.Windows.Forms.DataGridViewEditMode.EditOnKeystrokeOrF2>|  
|<xref:System.Windows.Forms.DataGridView.MultiSelect%2A>|`true`|  
|<xref:System.Windows.Forms.DataGridView.ReadOnly%2A>|`false`|  
|<xref:System.Windows.Forms.DataGridView.RowHeadersVisible%2A>|`true`|  
|<xref:System.Windows.Forms.DataGridView.RowHeadersWidthSizeMode%2A>|<xref:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.EnableResizing>|  
|<xref:System.Windows.Forms.DataGridView.SelectionMode%2A>|<xref:System.Windows.Forms.DataGridViewSelectionMode.RowHeaderSelect>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityNotifyCurrentCellChanged">
      <MemberSignature Language="C#" Value="protected virtual void AccessibilityNotifyCurrentCellChanged (System.Drawing.Point cellAddress);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AccessibilityNotifyCurrentCellChanged(valuetype System.Drawing.Point cellAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AccessibilityNotifyCurrentCellChanged(System.Drawing.Point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cellAddress" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="cellAddress">新たにアクティブになったセルの行と列のインデックスを示す <see cref="T:System.Drawing.Point" />。</param>
        <summary>ユーザー補助クライアント アプリケーションに対し、別のセルがアクティブになったことを通知します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは変換に指定した行と列インデックス `objectID` と `childID` パラメーターと呼び出し、 <xref:System.Windows.Forms.Control.AccessibilityNotifyClients%28System.Windows.Forms.AccessibleEvents%2CSystem.Int32%2CSystem.Int32%29> メソッドのオーバー ロードを使用して 2 回、 <xref:System.Windows.Forms.AccessibleEvents.Focus> と <xref:System.Windows.Forms.AccessibleEvents.Selection> の値、 <xref:System.Windows.Forms.AccessibleEvents> 列挙します。`objectID` と `childID` はそれらの表示順序、可視性、および 1 から開始している場合は、行または列ヘッダーをカウントで表示されている行と列の番号付けによって決定されます。 たとえば、列ヘッダーを表示、 `objectID` 最初に表示されている以外の行は 2 です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="cellAddress" /> の <see cref="P:System.Drawing.Point.X" /> プロパティの値が 0 未満か、またはコントロール内の列数から 1 を引いた値を超えています。  
  
 または  
  
 <paramref name="cellAddress" /> の <see cref="P:System.Drawing.Point.Y" /> プロパティの値が 0 未満か、またはコントロール内の行数から 1 を引いた値を超えています。</exception>
        <block subset="none" type="overrides">
          <para>Override this method when customizing the <see cref="T:System.Windows.Forms.DataGridView" /> control and modifying how and when the current cell changes. For example, if you create a custom row type that merges multiple cells into single cells and you modify the navigation accordingly, you can override this method to provide accessibility support for your changes.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.AccessibleEvents" />
      </Docs>
    </Member>
    <Member MemberName="AdjustColumnHeaderBorderStyle">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.DataGridViewAdvancedBorderStyle AdjustColumnHeaderBorderStyle (System.Windows.Forms.DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyleInput, System.Windows.Forms.DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStylePlaceholder, bool isFirstDisplayedColumn, bool isLastVisibleColumn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.DataGridViewAdvancedBorderStyle AdjustColumnHeaderBorderStyle(class System.Windows.Forms.DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyleInput, class System.Windows.Forms.DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStylePlaceholder, bool isFirstDisplayedColumn, bool isLastVisibleColumn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AdjustColumnHeaderBorderStyle(System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Boolean,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAdvancedBorderStyle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataGridViewAdvancedBorderStyleInput" Type="System.Windows.Forms.DataGridViewAdvancedBorderStyle" />
        <Parameter Name="dataGridViewAdvancedBorderStylePlaceholder" Type="System.Windows.Forms.DataGridViewAdvancedBorderStyle" />
        <Parameter Name="isFirstDisplayedColumn" Type="System.Boolean" />
        <Parameter Name="isLastVisibleColumn" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dataGridViewAdvancedBorderStyleInput">変更する列ヘッダー境界線スタイルを表す <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" />。</param>
        <param name="dataGridViewAdvancedBorderStylePlaceholder">列ヘッダー境界線スタイルに対する中間的な変更を格納するために使用される <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" />。</param>
        <param name="isFirstDisplayedColumn">現在塗りつぶされている <see cref="T:System.Windows.Forms.DataGridViewCell" /> が <see cref="T:System.Windows.Forms.DataGridView" /> に表示される最初の列にある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <param name="isLastVisibleColumn">現在塗りつぶされている <see cref="T:System.Windows.Forms.DataGridViewCell" /> が、<see langword="true" /> に設定された <see cref="P:System.Windows.Forms.DataGridViewColumn.Visible" /> プロパティを持つ <see cref="T:System.Windows.Forms.DataGridView" /> の最後の列にある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>現在塗りつぶされている <see cref="T:System.Windows.Forms.DataGridView" /> の列ヘッダー セルの <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> を調整します。</summary>
        <returns>現在の列ヘッダーの境界線スタイルを表す <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.DataGridView> の制御に、内部的に呼び出し、 <xref:System.Windows.Forms.DataGridView.AdjustColumnHeaderBorderStyle%2A> 列のヘッダー セルの罫線の外観を決定する方法です。<xref:System.Windows.Forms.DataGridView> コントロールが通常の値を使用して、 <xref:System.Windows.Forms.DataGridView.AdvancedColumnHeadersBorderStyle%2A> プロパティを `dataGridViewAdvancedBorderStyleInput` パラメーター。  
  
   
  
## 例  
 次のコード例では、オーバーライド、 <xref:System.Windows.Forms.DataGridView.AdjustColumnHeaderBorderStyle%2A> 列ヘッダー セルの境界線をカスタマイズするメソッドです。 このコード例が示されている例の一部は、 <xref:System.Windows.Forms.DataGridViewAdvancedBorderStyle> クラスです。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewAdvancedBorderStyle\#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewAdvancedBorderStyle/CS/advancedborderstyle.cs#15)]
 [!code-vb[System.Windows.Forms.DataGridViewAdvancedBorderStyle\#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewAdvancedBorderStyle/VB/advancedborderstyle.vb#15)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Override this method if you want to customize the appearance of the border on column header cells.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="AdjustedTopLeftHeaderBorderStyle">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.DataGridViewAdvancedBorderStyle AdjustedTopLeftHeaderBorderStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewAdvancedBorderStyle AdjustedTopLeftHeaderBorderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.AdjustedTopLeftHeaderBorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAdvancedBorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> の左上のセルの境界線スタイルを取得します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DataGridView" /> の左上のセルの境界線スタイルを表す <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 左上隅のセルは、列ヘッダー行と行ヘッダー列で共有されるセルです。<xref:System.Windows.Forms.DataGridView> 左上隅のセルを表示中にこのプロパティの値を取得します。  
  
   
  
## 例  
 次のコード例では、オーバーライド、 <xref:System.Windows.Forms.DataGridView.AdjustedTopLeftHeaderBorderStyle%2A> プロパティを左上隅のセルの境界線をカスタマイズします。 このコード例が示されている例の一部は、 <xref:System.Windows.Forms.DataGridViewAdvancedBorderStyle> クラスです。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewAdvancedBorderStyle\#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewAdvancedBorderStyle/CS/advancedborderstyle.cs#12)]
 [!code-vb[System.Windows.Forms.DataGridViewAdvancedBorderStyle\#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewAdvancedBorderStyle/VB/advancedborderstyle.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Override this property if you want to customize the appearance of the border on the upper-left header cell.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="AdvancedCellBorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewAdvancedBorderStyle AdvancedCellBorderStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewAdvancedBorderStyle AdvancedCellBorderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.AdvancedCellBorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAdvancedBorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> のセルの境界線スタイルを取得します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DataGridView" /> に含まれるセルの境界線スタイルを表す <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Windows.Forms.DataGridView.AdvancedCellBorderStyle%2A> プロパティをセルの罫線の外観をカスタマイズします。 組み込みのスタイルを使用して境界線のスタイルを変更するには、使用、 <xref:System.Windows.Forms.DataGridView.CellBorderStyle%2A> プロパティです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AdvancedColumnHeadersBorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewAdvancedBorderStyle AdvancedColumnHeadersBorderStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewAdvancedBorderStyle AdvancedColumnHeadersBorderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.AdvancedColumnHeadersBorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAdvancedBorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> の列ヘッダー セルの境界線スタイルを取得します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DataGridView" /> の <see cref="T:System.Windows.Forms.DataGridViewColumnHeaderCell" /> オブジェクトの境界線スタイルを表す <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Windows.Forms.DataGridView.AdvancedColumnHeadersBorderStyle%2A> プロパティを列ヘッダー セルの罫線の外観をカスタマイズします。 組み込みのスタイルを使用して境界線のスタイルを変更するには、使用、 <xref:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyle%2A> プロパティです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AdvancedRowHeadersBorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewAdvancedBorderStyle AdvancedRowHeadersBorderStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewAdvancedBorderStyle AdvancedRowHeadersBorderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.AdvancedRowHeadersBorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAdvancedBorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> の行ヘッダー セルの境界線スタイルを取得します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DataGridView" /> の <see cref="T:System.Windows.Forms.DataGridViewRowHeaderCell" /> オブジェクトの境界線スタイルを表す <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Windows.Forms.DataGridView.AdvancedRowHeadersBorderStyle%2A> 派生に行ヘッダー セルの罫線の外観をカスタマイズするプロパティ <xref:System.Windows.Forms.DataGridView> コントロールです。 組み込みのスタイルを使用して境界線のスタイルを変更するには、使用、 <xref:System.Windows.Forms.DataGridView.RowHeadersBorderStyle%2A> プロパティです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowUserToAddRows">
      <MemberSignature Language="C#" Value="public bool AllowUserToAddRows { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowUserToAddRows" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.AllowUserToAddRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>行を追加するオプションがユーザーに表示されるかどうかを示す値を取得または設定します。</summary>
        <value>行の追加オプションがユーザーに表示される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Windows.Forms.DataGridView> がバインドされている行を追加する場合、ユーザーを許可する、データをこのプロパティと、データ ソースの両方 <xref:System.ComponentModel.IBindingList.AllowNew%2A?displayProperty=fullName> にプロパティが設定されて `true`します。  
  
   
  
## 例  
 次のコード例は、このプロパティの使用法を示しています、 <xref:System.Windows.Forms.DataGridView> 、主に表示を目的とします。 この例ではいくつかの方法でコントロールの視覚的な外観をカスタマイズし、コントロールが対話機能を制限を設定します。 この例で使用できる例の一部である、 <xref:System.Windows.Forms.DataGridViewCellStyle> クラスの概要です。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewStyleDemo\#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/CS/form1.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo\#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowUserToAddRowsChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AllowUserToAddRowsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AllowUserToAddRowsChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.AllowUserToAddRowsChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridView.AllowUserToAddRows" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.AllowUserToAddRowsChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.AllowUserToAddRowsChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#250](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#250)]
 [!code-vb[System.Windows.Forms.EventExamples\#250](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#250)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowUserToDeleteRows">
      <MemberSignature Language="C#" Value="public bool AllowUserToDeleteRows { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowUserToDeleteRows" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.AllowUserToDeleteRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーが <see cref="T:System.Windows.Forms.DataGridView" /> からの行の削除を許可されているかどうかを示す値を取得または設定します。</summary>
        <value>ユーザーが行を削除できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Windows.Forms.DataGridView> がバインドされているデータ、ユーザーが許可される場合は、両方の行を削除するこのプロパティおよび <xref:System.ComponentModel.IBindingList.AllowRemove%2A?displayProperty=fullName> プロパティに設定 `true`します。  
  
   
  
## 例  
 次のコード例は、このプロパティの使用法を示しています、 <xref:System.Windows.Forms.DataGridView> 、主に表示を目的とします。 この例ではいくつかの方法でコントロールの視覚的な外観をカスタマイズし、コントロールが対話機能を制限を設定します。 この例で使用できる例の一部である、 <xref:System.Windows.Forms.DataGridViewCellStyle> クラスの概要です。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewStyleDemo\#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/CS/form1.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo\#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowUserToDeleteRowsChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AllowUserToDeleteRowsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AllowUserToDeleteRowsChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.AllowUserToDeleteRowsChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.AllowUserToDeleteRowsChanged" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.AllowUserToDeleteRowsChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.AllowUserToDeleteRowsChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#251](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#251)]
 [!code-vb[System.Windows.Forms.EventExamples\#251](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#251)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowUserToOrderColumns">
      <MemberSignature Language="C#" Value="public bool AllowUserToOrderColumns { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowUserToOrderColumns" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.AllowUserToOrderColumns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>手動による列の移動が可能かどうかを示す値を取得または設定します。</summary>
        <value>ユーザーが列の順序を変更できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 列の移動が有効にすると、ユーザーは、新しい位置に列ヘッダーをドラッグすることができます。 固定と固定されていない列が 2 つのグループを形成することに注意してください。ユーザーは、グループ内の列の位置を指定できますが、1 つのグループから別の列を移動できません。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.DataGridView> コントロールはダブル バッファリングをサポートしていません。 場合 <xref:System.Windows.Forms.Control.DoubleBuffered%2A> に設定されている `true` 派生で <xref:System.Windows.Forms.DataGridView> コントロール、行、列、またはヘッダーのサイズを変更する場合、または列の並べ替えは、ユーザーに視覚的なフィードバックは受信しません。  
  
   
  
## 例  
 次のコード例は、このプロパティの使用法を示しています、 <xref:System.Windows.Forms.DataGridView> 、主に表示を目的とします。 この例ではいくつかの方法でコントロールの視覚的な外観をカスタマイズし、コントロールが対話機能を制限を設定します。 この例で使用できる例の一部である、 <xref:System.Windows.Forms.DataGridViewCellStyle> クラスの概要です。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewStyleDemo\#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/CS/form1.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo\#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowUserToOrderColumnsChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AllowUserToOrderColumnsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AllowUserToOrderColumnsChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.AllowUserToOrderColumnsChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridView.AllowUserToOrderColumns" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.DataGridView.AllowUserToOrderColumnsChanged> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the <xref:System.Windows.Forms.DataGridView.AllowUserToOrderColumnsChanged> event.  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#252](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#252)]
 [!code-vb[System.Windows.Forms.EventExamples\#252](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#252)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowUserToResizeColumns">
      <MemberSignature Language="C#" Value="public bool AllowUserToResizeColumns { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowUserToResizeColumns" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.AllowUserToResizeColumns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーが列のサイズを変更できるかどうかを示す値を取得または設定します。</summary>
        <value>ユーザーが列のサイズを変更できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを使用して、列の幅を手動で変更されないようにします。 たとえば、表示専用の列、データが一度読み込まれ、その時点で列のサイズが変更されると、便利です。  
  
 ユーザーによるサイズ変更の詳細については、次を参照してください。 [Sizing Options in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/a5620a9c-0d06-41e3-8934-c25ddb16c9e6)します。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.DataGridView> コントロールはダブル バッファリングをサポートしていません。 場合 <xref:System.Windows.Forms.Control.DoubleBuffered%2A> に設定されている `true` 派生で <xref:System.Windows.Forms.DataGridView> コントロール、行、列、またはヘッダーのサイズを変更する場合、または列の並べ替えは、ユーザーに視覚的なフィードバックは受信しません。  
  
   
  
## 例  
 次のコード例では、このプロパティを使用する方法を示しています、 <xref:System.Windows.Forms.DataGridView> 、主に表示を目的とします。 この例ではいくつかの方法でコントロールの視覚的な外観をカスタマイズし、コントロールが対話機能を制限を設定します。 この例で使用できる例の一部である、 <xref:System.Windows.Forms.DataGridViewCellStyle> クラスの概要です。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewStyleDemo\#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/CS/form1.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo\#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowUserToResizeColumnsChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AllowUserToResizeColumnsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AllowUserToResizeColumnsChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.AllowUserToResizeColumnsChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridView.AllowUserToResizeColumns" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.AllowUserToResizeColumnsChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.AllowUserToResizeColumnsChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#253](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#253)]
 [!code-vb[System.Windows.Forms.EventExamples\#253](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#253)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowUserToResizeRows">
      <MemberSignature Language="C#" Value="public bool AllowUserToResizeRows { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowUserToResizeRows" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.AllowUserToResizeRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーが行のサイズを変更できるかどうかを示す値を取得または設定します。</summary>
        <value>すべての行のサイズを変更できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを使用して、行の高さを手動で変更されないようにします。 これでは、データが一度読み込まれる、その時点での行のサイズが変更される表示専用コントロールなどに便利です。  
  
 セルに対して有効セル スタイルの行のサイズが変更されたときに、複数の行に折り返すセルの内容を <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> のプロパティの値 <xref:System.Windows.Forms.DataGridViewTriState.True>です。  
  
 ユーザーによるサイズ変更の詳細については、次を参照してください。 [Sizing Options in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/a5620a9c-0d06-41e3-8934-c25ddb16c9e6)します。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.DataGridView> コントロールはダブル バッファリングをサポートしていません。 場合 <xref:System.Windows.Forms.Control.DoubleBuffered%2A> に設定されている `true` 派生で <xref:System.Windows.Forms.DataGridView> コントロール、行、列、またはヘッダーのサイズを変更する場合、または列の並べ替えは、ユーザーに視覚的なフィードバックは受信しません。  
  
   
  
## 例  
 次のコード例では、このプロパティを使用する方法を示しています、 <xref:System.Windows.Forms.DataGridView> 、主に表示を目的とします。 この例ではいくつかの方法でコントロールの視覚的な外観をカスタマイズし、コントロールが対話機能を制限を設定します。 この例で使用できる例の一部である、 <xref:System.Windows.Forms.DataGridViewCellStyle> クラスの概要です。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewStyleDemo\#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/CS/form1.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo\#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowUserToResizeRowsChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AllowUserToResizeRowsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AllowUserToResizeRowsChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.AllowUserToResizeRowsChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridView.AllowUserToResizeRows" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.DataGridView.AllowUserToResizeRowsChanged> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the <xref:System.Windows.Forms.DataGridView.AllowUserToResizeRowsChanged> event.  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#254](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#254)]
 [!code-vb[System.Windows.Forms.EventExamples\#254](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#254)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AlternatingRowsDefaultCellStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewCellStyle AlternatingRowsDefaultCellStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewCellStyle AlternatingRowsDefaultCellStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> の奇数行に適用される既定のセル スタイルを取得または設定します。</summary>
        <value>奇数行に適用される <see cref="T:System.Windows.Forms.DataGridViewCellStyle" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.DataGridView> コントロールのセルに示されているスタイルを使用してそのセルを表示する <xref:System.Windows.Forms.DataGridViewCell.InheritedStyle%2A> プロパティは、その他のプロパティ型のスタイルを継承する <xref:System.Windows.Forms.DataGridViewCellStyle>です。 奇数のインデックス番号を含む行のセルを指定したスタイル、 <xref:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyle%2A> プロパティのオーバーライドで指定されたスタイル、 <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A>, 、<xref:System.Windows.Forms.DataGridViewColumn.DefaultCellStyle%2A?displayProperty=fullName>, 、および <xref:System.Windows.Forms.DataGridView.RowsDefaultCellStyle%2A>, を使用して指定されたスタイルによってオーバーライドされると、 <xref:System.Windows.Forms.DataGridViewRow.DefaultCellStyle%2A?displayProperty=fullName> と <xref:System.Windows.Forms.DataGridViewCell.Style%2A?displayProperty=fullName> プロパティです。  
  
 詳細については、「[Cell Styles in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/dbb75ed6-8804-4232-8382-f9920c2e380c)」を参照してください。  
  
 このプロパティを取得するときに、 <xref:System.Windows.Forms.DataGridViewCellStyle> 既定値、プロパティが既にアクセスしていない場合は、値が作成されます。 これが原因で、複数の行のこのプロパティを取得するときに、パフォーマンスに影響します。 可能であれば、1 つを使用して <xref:System.Windows.Forms.DataGridViewCellStyle> 複数の行に対してこのプロパティを設定します。 詳細については、「[Best Practices for Scaling the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/8321a8a6-6340-4fd1-b475-fa090b905aaf)」を参照してください。  
  
   
  
## 例  
 次のコード例は、このプロパティを使用して、台帳効果を作成する方法を示しています、 <xref:System.Windows.Forms.DataGridView> コントロールです。 この例で使用できる例の一部である、 <xref:System.Windows.Forms.DataGridViewCellStyle> クラスの概要です。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewStyleDemo\#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/CS/form1.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo\#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
      </Docs>
    </Member>
    <Member MemberName="AlternatingRowsDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AlternatingRowsDefaultCellStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AlternatingRowsDefaultCellStyleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyleChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyle" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This event occurs when any property of the <xref:System.Windows.Forms.DataGridViewCellStyle> returned by the <xref:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyle%2A> property is set to a new value or when the <xref:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyle%2A> property is set to a new <xref:System.Windows.Forms.DataGridViewCellStyle> with at least one property value different than the previous cell style object.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyleChanged> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the <xref:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyleChanged> event.  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#255](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#255)]
 [!code-vb[System.Windows.Forms.EventExamples\#255](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#255)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
      </Docs>
    </Member>
    <Member MemberName="AreAllCellsSelected">
      <MemberSignature Language="C#" Value="public bool AreAllCellsSelected (bool includeInvisibleCells);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool AreAllCellsSelected(bool includeInvisibleCells) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AreAllCellsSelected(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includeInvisibleCells" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includeInvisibleCells">
          <see cref="P:System.Windows.Forms.DataGridViewBand.Visible" /> プロパティの値が <see langword="false" /> の行および列を含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>すべての <see cref="T:System.Windows.Forms.DataGridView" /> セルが現在選択されているかどうかを示す値を返します。</summary>
        <returns>すべてのセル \(または表示されているすべてのセル\) が選択されている場合、またはセル \(または表示されているセル\) が存在しない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.DataGridView.SelectedCells%2A> 大規模な選択にコレクションが効率的に実行されません。 確認するかどうか内のすべてのセル、 <xref:System.Windows.Forms.DataGridView> の内容にアクセスする前に選択されている、 <xref:System.Windows.Forms.DataGridView.SelectedCells%2A> 、コレクションの戻り値を確認して、 <xref:System.Windows.Forms.DataGridView.AreAllCellsSelected%2A> メソッドです。 ただし、このメソッドには、行になりますが共有されていない可能性があります。 詳細については <xref:System.Windows.Forms.DataGridView> パフォーマンスを参照してください [Best Practices for Scaling the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/8321a8a6-6340-4fd1-b475-fa090b905aaf)します。  
  
   
  
## 例  
 次のコード例は、このメソッドを使用して計算を含むを回避する方法を示しています、 <xref:System.Windows.Forms.DataGridView.SelectedCells%2A> コレクションです。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewSelectedCollections\#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectedCollections/CS/DataGridViewSelectedCollections.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectedCollections\#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectedCollections/VB/DataGridViewSelectedCollections.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridViewBand.Visible" />
        <altmember cref="P:System.Windows.Forms.DataGridView.SelectedCells" />
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateColumns">
      <MemberSignature Language="C#" Value="public bool AutoGenerateColumns { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateColumns" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.AutoGenerateColumns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridView.DataSource" /> プロパティまたは <see cref="P:System.Windows.Forms.DataGridView.DataMember" /> プロパティが設定されている場合、列が自動的に作成されるかどうかを示す値を取得または設定します。</summary>
        <value>列を自動的に作成する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティが設定されている場合は列が自動的に生成 `true` と <xref:System.Windows.Forms.DataGridView.DataSource%2A> または <xref:System.Windows.Forms.DataGridView.DataMember%2A> プロパティを設定または変更します。 列が自動的にすることも時に生成される、 <xref:System.Windows.Forms.DataGridView.AutoGenerateColumns%2A> からプロパティが変更された `false` に `true`します。 場合は、このプロパティは `true` と <xref:System.Windows.Forms.DataGridView.DataSource%2A> を変更して、前の列と一致しない列があるように <xref:System.Windows.Forms.DataGridView.DataSource%2A> 値、その比類のない列のデータは破棄されます。 場合に、このプロパティが無視されますが、 <xref:System.Windows.Forms.DataGridView.DataSource%2A> または <xref:System.Windows.Forms.DataGridView.DataMember%2A> プロパティが設定されていません。  
  
 <xref:System.Windows.Forms.DataGridView.AutoGenerateColumns%2A> に設定されている `true`, 、 <xref:System.Windows.Forms.DataGridView> コントロールは、データ ソース内のオブジェクトの各パブリック プロパティの 1 つの列を生成します。 バインド先のオブジェクトを実装する場合、 <xref:System.ComponentModel.ICustomTypeDescriptor> インターフェイスによって返される各プロパティの 1 つの列を生成するコントロール、 <xref:System.ComponentModel.ICustomTypeDescriptor.GetProperties%2A> メソッドです。 各列見出し、列を表すプロパティ名の値が含まれます。  
  
 設定した場合、 <xref:System.Windows.Forms.DataGridView.DataSource%2A> プロパティ以外の <xref:System.Windows.Forms.DataGridView.AutoGenerateColumns%2A> に `false`, 、列を手動で追加する必要があります。 追加された各列をデータ ソースにバインドするには設定して、 <xref:System.Windows.Forms.DataGridViewColumn.DataPropertyName%2A?displayProperty=fullName> プロパティにバインドされたオブジェクトによって公開されるプロパティの名前。  
  
> [!NOTE]
>  設定、 <xref:System.Windows.Forms.DataGridView.DataSource%2A> Windows フォーム デザイナーで自動的に設定、 <xref:System.Windows.Forms.DataGridView.AutoGenerateColumns%2A> プロパティを `false` を追加し、データ ソース内の各プロパティの列をバインドするコードを生成します。 デザイン時に生成されるコードは、次の例に示すように手動で追加したコードと同じです。 発生する実行時に列の自動生成と同じではないときに、 <xref:System.Windows.Forms.DataGridView.AutoGenerateColumns%2A> にプロパティが設定されている `true`します。  
  
   
  
## 例  
 次のコード例は、列を手動で追加し、設定すると、データ ソースにバインドする方法を示します <xref:System.Windows.Forms.DataGridView.AutoGenerateColumns%2A> に `false`します。 この例では、 <xref:System.Windows.Forms.DataGridView> リストへのコントロールがバインドされている `Task` ビジネス オブジェクトです。 列が追加されにバインドし、 `Task` プロパティを <xref:System.Windows.Forms.DataGridViewColumn.DataPropertyName%2A?displayProperty=fullName> プロパティです。 この例で使用できる例の一部である [How to: Access Objects in a Windows Forms DataGridViewComboBoxCell Drop\-Down List](http://msdn.microsoft.com/ja-jp/bcbe794a-d1fa-47f8-b5a3-5f085b32097d)です。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewComboBoxObjectBinding\#100](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewComboBoxObjectBinding/CS/form1.cs#100)]
 [!code-vb[System.Windows.Forms.DataGridViewComboBoxObjectBinding\#100](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewComboBoxObjectBinding/vb/form1.vb#100)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridView.DataSource" />
        <altmember cref="P:System.Windows.Forms.DataGridView.DataMember" />
        <altmember cref="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties" />
        <altmember cref="P:System.Windows.Forms.DataGridViewColumn.DataPropertyName" />
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateColumnsChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AutoGenerateColumnsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AutoGenerateColumnsChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.AutoGenerateColumnsChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.AutoGenerateColumnsChanged" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.AutoGenerateColumnsChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.AutoGenerateColumnsChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#256](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#256)]
 [!code-vb[System.Windows.Forms.EventExamples\#256](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#256)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumn">
      <MemberSignature Language="C#" Value="public void AutoResizeColumn (int columnIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeColumn(int32 columnIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeColumn(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="columnIndex">サイズ変更する列のインデックス。</param>
        <summary>ヘッダー セルを含むすべてのセルの内容に合わせて、指定された列の幅を調整します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、列のサイズを変更するタイミングを制御する場合に便利です。 メソッドを呼び出すたびに、1 回だけ列幅を調整します。後で列の内容変更されても、列は自動的に調整します。 すべての列のサイズを変更するを使用して、 <xref:System.Windows.Forms.DataGridView.AutoResizeColumns%2A> メソッドです。 内容を変更するたびに自動的にサイズ変更する列を設定するには、使用、 <xref:System.Windows.Forms.DataGridView.AutoSizeColumnsMode%2A> プロパティまたは列 <xref:System.Windows.Forms.DataGridViewColumn.AutoSizeMode%2A> プロパティです。  
  
 プログラムによるサイズ変更の詳細については、次を参照してください。 [Sizing Options in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/a5620a9c-0d06-41e3-8934-c25ddb16c9e6)します。  
  
   
  
## 例  
 次のコード例では、このメソッドを使用して、新しいセルの値に対応するのに十分な大きさの列の幅を作成します。 この例で使用できる例の一部である [How to: Manipulate Rows in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/522d8944-e073-4488-9673-923f0a8d7214)です。  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ButtonDemos\#211](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ButtonDemos/CPP/DataGridViewRowDemo.cpp#211)]
 [!code-csharp[System.Windows.Forms.DataGridView.ButtonDemos\#211](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ButtonDemos/CS/DataGridViewRowDemo.cs#211)]
 [!code-vb[System.Windows.Forms.DataGridView.ButtonDemos\#211](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ButtonDemos/VB/datagridviewrowdemo.vb#211)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndex" /> が、0 以上、列数 \- 1 以下の、有効な範囲内にありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumn">
      <MemberSignature Language="C#" Value="public void AutoResizeColumn (int columnIndex, System.Windows.Forms.DataGridViewAutoSizeColumnMode autoSizeColumnMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeColumn(int32 columnIndex, valuetype System.Windows.Forms.DataGridViewAutoSizeColumnMode autoSizeColumnMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeColumn(System.Int32,System.Windows.Forms.DataGridViewAutoSizeColumnMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="autoSizeColumnMode" Type="System.Windows.Forms.DataGridViewAutoSizeColumnMode" />
      </Parameters>
      <Docs>
        <param name="columnIndex">サイズ変更する列のインデックス。</param>
        <param name="autoSizeColumnMode">
          <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnMode" /> の値の 1 つ。</param>
        <summary>指定されたサイズ モードを使用して、指定された列の幅を調整します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、列のサイズを変更するタイミングを制御する場合に便利です。 メソッドを呼び出すたびに、1 回だけ列幅を調整します。後で列の内容変更されても、列は自動的に調整します。 すべての列のサイズを変更するを使用して、 <xref:System.Windows.Forms.DataGridView.AutoResizeColumns%2A> メソッドです。 内容を変更するたびに自動的にサイズ変更する列を設定するには、使用、 <xref:System.Windows.Forms.DataGridView.AutoSizeColumnsMode%2A> プロパティまたは列 <xref:System.Windows.Forms.DataGridViewColumn.AutoSizeMode%2A> プロパティです。  
  
 このオーバー ロードでは、限られたように表示されている行だけこれらのセルの値に基づいて新しい幅を計算するサイズ変更モードを指定できます。 これにより、コントロールには、大量の行が含まれている場合、パフォーマンスが向上します。  
  
 プログラムによるサイズ変更の詳細については、次を参照してください。 [Sizing Options in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/a5620a9c-0d06-41e3-8934-c25ddb16c9e6)します。  
  
   
  
## 例  
 次のコード例では、このメソッドを使用して、新しいセルの値に対応するのに十分な大きさの列の幅を作成します。 この例で使用できる例の一部である [How to: Manipulate Rows in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/522d8944-e073-4488-9673-923f0a8d7214)です。  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ButtonDemos\#211](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ButtonDemos/CPP/DataGridViewRowDemo.cpp#211)]
 [!code-csharp[System.Windows.Forms.DataGridView.ButtonDemos\#211](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ButtonDemos/CS/DataGridViewRowDemo.cs#211)]
 [!code-vb[System.Windows.Forms.DataGridView.ButtonDemos\#211](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ButtonDemos/VB/datagridviewrowdemo.vb#211)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="autoSizeColumnMode" /> の値が <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.ColumnHeader" /> であり、<see cref="P:System.Windows.Forms.DataGridView.ColumnHeadersVisible" /> が <see langword="false" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="autoSizeColumnMode" /> の値が <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.NotSet" />、<see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.None" />、または <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.Fill" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndex" /> が、0 以上、列数 \- 1 以下の、有効な範囲内にありません。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="autoSizeColumnMode" /> は有効な <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnMode" /> 値ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumn">
      <MemberSignature Language="C#" Value="protected void AutoResizeColumn (int columnIndex, System.Windows.Forms.DataGridViewAutoSizeColumnMode autoSizeColumnMode, bool fixedHeight);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AutoResizeColumn(int32 columnIndex, valuetype System.Windows.Forms.DataGridViewAutoSizeColumnMode autoSizeColumnMode, bool fixedHeight) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeColumn(System.Int32,System.Windows.Forms.DataGridViewAutoSizeColumnMode,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="autoSizeColumnMode" Type="System.Windows.Forms.DataGridViewAutoSizeColumnMode" />
        <Parameter Name="fixedHeight" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="columnIndex">サイズ変更する列のインデックス。</param>
        <param name="autoSizeColumnMode">
          <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnMode" /> 値の 1 つ。</param>
        <param name="fixedHeight">現在の行の高さに基づいて新しい幅を計算する場合は <see langword="true" />。行の高さも調整されることを見込んで幅を計算する場合は <see langword="false" />。</param>
        <summary>指定されたサイズ モードを使用して指定された列の幅を調整します。オプションで、行の高さが後で調整されることを見込んで幅を計算します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、列のサイズを変更するタイミングを制御する場合に便利です。 メソッドを呼び出すたびに、1 回だけ列幅を調整します。後で列の内容変更されても、列は自動的に調整します。 すべての列のサイズを変更するを使用して、 <xref:System.Windows.Forms.DataGridView.AutoResizeColumns%2A> メソッドです。 内容を変更するたびに自動的にサイズ変更する列を設定するには、使用、 <xref:System.Windows.Forms.DataGridView.AutoSizeColumnsMode%2A> プロパティまたは列 <xref:System.Windows.Forms.DataGridViewColumn.AutoSizeMode%2A> プロパティです。  
  
 このオーバー ロードでは、限られたように表示されている行だけこれらのセルの値に基づいて新しい幅を計算するサイズ変更モードを指定できます。 これにより、コントロールには、大量の行が含まれている場合、パフォーマンスが向上します。  
  
 このオーバー ロードが保護されており、派生の理想的なセルの高さと幅の比率を実現するために設計された <xref:System.Windows.Forms.DataGridView> クラスです。 場合 `fixedHeight` は `false`, 、呼び出されるという前提で、列の幅が計算されます、 <xref:System.Windows.Forms.DataGridView.AutoResizeRow%2A> または <xref:System.Windows.Forms.DataGridView.AutoResizeRows%2A> メソッド次です。  
  
 プログラムによるサイズ変更の詳細については、次を参照してください。 [Sizing Options in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/a5620a9c-0d06-41e3-8934-c25ddb16c9e6)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="autoSizeColumnMode" /> の値が <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.ColumnHeader" /> であり、<see cref="P:System.Windows.Forms.DataGridView.ColumnHeadersVisible" /> が <see langword="false" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="autoSizeColumnMode" /> の値が <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.NotSet" />、<see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.None" />、または <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.Fill" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndex" /> が、0 以上、列数 \- 1 以下の、有効な範囲内にありません。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="autoSizeColumnMode" /> は有効な <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnMode" /> 値ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumnHeadersHeight">
      <MemberSignature Language="C#" Value="public void AutoResizeColumnHeadersHeight ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeColumnHeadersHeight() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeColumnHeadersHeight" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>最大の列ヘッダーの内容に合わせて列ヘッダーの高さを調整します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、列ヘッダーのサイズを変更するタイミングを制御する場合に便利です。 列ヘッダーの高さは、メソッドを呼び出すたびに 1 回だけ調整されます。場合は、列ヘッダーは、ヘッダーを後で変更する列の内容を自動的に調整します。 列ヘッダーの内容を変更するときに自動的にサイズを設定する、 <xref:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeMode%2A> プロパティです。  
  
 セルに対して有効セル スタイルに列ヘッダーのサイズが変更されるときに、複数の行に折り返すセルの内容を <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> のプロパティの値 <xref:System.Windows.Forms.DataGridViewTriState.True>です。  
  
 プログラムによるサイズ変更の詳細については、次を参照してください。 [Sizing Options in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/a5620a9c-0d06-41e3-8934-c25ddb16c9e6)します。  
  
   
  
## 例  
 次のコード例では、列ヘッダーのサイズを変更し、ボタンの結果として行をクリックします。  
  
 [!code-cpp[System.Windows.Forms.GridViewAutoSize\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewAutoSize/CPP/form1.cpp#3)]
 [!code-csharp[System.Windows.Forms.GridViewAutoSize\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewAutoSize/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.GridViewAutoSize\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewAutoSize/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumnHeadersHeight">
      <MemberSignature Language="C#" Value="public void AutoResizeColumnHeadersHeight (int columnIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeColumnHeadersHeight(int32 columnIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeColumnHeadersHeight(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="columnIndex">内容が変更されたヘッダーを格納している列のインデックス。</param>
        <summary>指定された列のヘッダーの内容の変更に基づいて、列ヘッダーの高さを調整します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method is useful if you want to control when the column headers resize if only the contents of the header in the specified column have changed as a result of user edits or changes to a bound data source. The height of the column headers is adjusted only once per method call if the content change requires it; if the contents of the column headers later change, the column headers will not automatically adjust. To set the column headers to automatically resize when their contents change, use the <xref:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeMode%2A> property.  
  
 For cell contents to wrap onto multiple lines when the column headers are resized, the cell style in effect for the cell must have a <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> property value of <xref:System.Windows.Forms.DataGridViewTriState.True>.  
  
 For more information about programmatic resizing, see [Sizing Options in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/a5620a9c-0d06-41e3-8934-c25ddb16c9e6).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndex" /> が、0 以上、列数 \- 1 以下の、有効な範囲内にありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumnHeadersHeight">
      <MemberSignature Language="C#" Value="protected void AutoResizeColumnHeadersHeight (bool fixedRowHeadersWidth, bool fixedColumnsWidth);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AutoResizeColumnHeadersHeight(bool fixedRowHeadersWidth, bool fixedColumnsWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeColumnHeadersHeight(System.Boolean,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fixedRowHeadersWidth" Type="System.Boolean" />
        <Parameter Name="fixedColumnsWidth" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fixedRowHeadersWidth">行ヘッダーの現在の幅に基づいて新しい高さを計算する場合は <see langword="true" />。行ヘッダーの幅も調整されることを見込んで高さを計算する場合は <see langword="false" />。</param>
        <param name="fixedColumnsWidth">現在の列の幅に基づいて新しい高さを計算する場合は <see langword="true" />。列の幅も調整されることを見込んで高さを計算する場合は <see langword="false" />。</param>
        <summary>内容に合わせて列ヘッダーの高さを調整します。オプションで、列ヘッダーまたは行ヘッダー \(またはその両方\) の幅が後で調整されることを見込んで高さを計算します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、列ヘッダーのサイズを変更するタイミングを制御する場合に便利です。 列ヘッダーの高さは、メソッドを呼び出すたびに 1 回だけ調整されます。場合は、列ヘッダーは、ヘッダーを後で変更する列の内容を自動的に調整します。 列ヘッダーの内容を変更するときに自動的にサイズを設定する、 <xref:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeMode%2A> プロパティです。  
  
 セルに対して有効セル スタイルに列ヘッダーのサイズが変更されるときに、複数の行に折り返すセルの内容を <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> のプロパティの値 <xref:System.Windows.Forms.DataGridViewTriState.True>です。  
  
 このオーバー ロードが保護されており、派生の理想的なセルの高さと幅の比率を実現するために設計された <xref:System.Windows.Forms.DataGridView> クラスです。 場合、 `fixedColumnsWidth` または `fixedRowHeadersWidth` パラメーターは、 `false`, 、列ヘッダーの高さが、呼び出すことなどを前提として計算されます <xref:System.Windows.Forms.DataGridView.AutoResizeColumns%2A> と <xref:System.Windows.Forms.DataGridView.AutoResizeRowHeadersWidth%2A> 次です。  
  
 プログラムによるサイズ変更の詳細については、次を参照してください。 [Sizing Options in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/a5620a9c-0d06-41e3-8934-c25ddb16c9e6)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumnHeadersHeight">
      <MemberSignature Language="C#" Value="protected void AutoResizeColumnHeadersHeight (int columnIndex, bool fixedRowHeadersWidth, bool fixedColumnWidth);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AutoResizeColumnHeadersHeight(int32 columnIndex, bool fixedRowHeadersWidth, bool fixedColumnWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeColumnHeadersHeight(System.Int32,System.Boolean,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="fixedRowHeadersWidth" Type="System.Boolean" />
        <Parameter Name="fixedColumnWidth" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="columnIndex">新しい高さを決定するために内容が使用される列ヘッダーのインデックス。</param>
        <param name="fixedRowHeadersWidth">行ヘッダーの現在の幅に基づいて新しい高さを計算する場合は <see langword="true" />。行ヘッダーの幅も調整されることを見込んで高さを計算する場合は <see langword="false" />。</param>
        <param name="fixedColumnWidth">指定された列の現在の幅に基づいて新しい高さを計算する場合は <see langword="true" />。列の幅も調整されることを見込んで高さを計算する場合は <see langword="false" />。</param>
        <summary>指定された列のヘッダーの内容の変更に基づいて列ヘッダーの高さを調整します。オプションで、列ヘッダーまたは行ヘッダー \(またはその両方\) の幅が後で調整されることを見込んで高さを計算します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、バインドされたデータ ソースへのユーザーが編集または変更の結果として指定された列のヘッダーの内容が変わってだけの場合、列ヘッダーのサイズを変更するタイミングを制御する場合に便利です。 列ヘッダーの高さは、1 回だけ調整メソッドを呼び出すたび内容の変更に必要な場合です。場合は、列ヘッダーは、ヘッダーを後で変更する列の内容を自動的に調整します。 列ヘッダーの内容を変更するときに自動的にサイズを設定する、 <xref:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeMode%2A> プロパティです。  
  
 セルに対して有効セル スタイルに列ヘッダーのサイズが変更されるときに、複数の行に折り返すセルの内容を <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> のプロパティの値 <xref:System.Windows.Forms.DataGridViewTriState.True>です。  
  
 このオーバー ロードが保護されており、派生の理想的なセルの高さと幅の比率を実現するために設計された <xref:System.Windows.Forms.DataGridView> クラスです。 場合、 `fixedColumnWidth` または `fixedRowHeadersWidth` パラメーターは、 `false`, 、列ヘッダーの高さが、呼び出すことなどを前提として計算されます <xref:System.Windows.Forms.DataGridView.AutoResizeColumns%2A> と <xref:System.Windows.Forms.DataGridView.AutoResizeRowHeadersWidth%2A> 次です。  
  
 プログラムによるサイズ変更の詳細については、次を参照してください。 [Sizing Options in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/a5620a9c-0d06-41e3-8934-c25ddb16c9e6)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndex" /> が、0 以上、列数 \- 1 以下の、有効な範囲内にありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumns">
      <MemberSignature Language="C#" Value="public void AutoResizeColumns ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeColumns() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeColumns" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ヘッダー セルを含むすべてのセルの内容に合わせて、すべての列の幅を調整します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、列のサイズを変更するタイミングを制御する場合に便利です。 列の幅は、メソッドを呼び出すたびに 1 回だけ調整されます。後で列の内容変更されても、列は自動的に調整します。 特定の列のサイズを変更するを使用して、 <xref:System.Windows.Forms.DataGridView.AutoResizeColumn%2A> メソッドです。 内容が変更されるたびに自動的にサイズ変更する列を設定するには、使用、 <xref:System.Windows.Forms.DataGridView.AutoSizeColumnsMode%2A> プロパティまたは列 <xref:System.Windows.Forms.DataGridViewColumn.AutoSizeMode%2A> プロパティです。  
  
 プログラムによるサイズ変更の詳細については、次を参照してください。 [Sizing Options in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/a5620a9c-0d06-41e3-8934-c25ddb16c9e6)します。  
  
   
  
## 例  
 次のコード例では、すべての列の列および列ヘッダーの内容に合わせてサイズ変更します。 このコード例に示されている例の一部である [How to: Programmatically Resize Cells to Fit Content in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/63d770dc-b3f5-462b-901a-3125b2753792)です。  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ProgrammaticResizing\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/CPP/programmaticsizing.cpp#3)]
 [!code-csharp[System.Windows.Forms.DataGridView.ProgrammaticResizing\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/CS/programmaticsizing.cs#3)]
 [!code-vb[System.Windows.Forms.DataGridView.ProgrammaticResizing\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/VB/programmaticsizing.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumns">
      <MemberSignature Language="C#" Value="public void AutoResizeColumns (System.Windows.Forms.DataGridViewAutoSizeColumnsMode autoSizeColumnsMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeColumns(valuetype System.Windows.Forms.DataGridViewAutoSizeColumnsMode autoSizeColumnsMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeColumns(System.Windows.Forms.DataGridViewAutoSizeColumnsMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoSizeColumnsMode" Type="System.Windows.Forms.DataGridViewAutoSizeColumnsMode" />
      </Parameters>
      <Docs>
        <param name="autoSizeColumnsMode">
          <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" /> の値の 1 つ。</param>
        <summary>指定されたサイズ モードを使用して、すべての列の幅を調整します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、列のサイズを変更するタイミングを制御する場合に便利です。 列の幅は、メソッドを呼び出すたびに 1 回だけ調整されます。後で列の内容変更されても、列は自動的に調整します。 特定の列のサイズを変更するを使用して、 <xref:System.Windows.Forms.DataGridView.AutoResizeColumn%2A> メソッドです。 内容が変更されるたびに自動的にサイズ変更する列を設定するには、使用、 <xref:System.Windows.Forms.DataGridView.AutoSizeColumnsMode%2A> プロパティまたは列 <xref:System.Windows.Forms.DataGridViewColumn.AutoSizeMode%2A> プロパティです。  
  
 このオーバー ロードでは、限られたように表示されている行だけこれらのセルの値に基づいて新しい幅を計算するサイズ変更モードを指定できます。 これにより、コントロールには、大量の行が含まれている場合、パフォーマンスが向上します。  
  
 プログラムによるサイズ変更の詳細については、次を参照してください。 [Sizing Options in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/a5620a9c-0d06-41e3-8934-c25ddb16c9e6)します。  
  
   
  
## 例  
 次のコード例では、すべての列の列および列ヘッダーの内容に合わせてサイズ変更します。 このコード例に示されている例の一部である [How to: Programmatically Resize Cells to Fit Content in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/63d770dc-b3f5-462b-901a-3125b2753792)です。  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ProgrammaticResizing\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/CPP/programmaticsizing.cpp#3)]
 [!code-csharp[System.Windows.Forms.DataGridView.ProgrammaticResizing\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/CS/programmaticsizing.cs#3)]
 [!code-vb[System.Windows.Forms.DataGridView.ProgrammaticResizing\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/VB/programmaticsizing.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="autoSizeColumnsMode" /> の値が <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.ColumnHeader" /> であり、<see cref="P:System.Windows.Forms.DataGridView.ColumnHeadersVisible" /> が <see langword="false" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="autoSizeColumnsMode" /> の値が <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.None" /> または <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.Fill" /> です。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="autoSizeColumnsMode" /> は有効な <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" /> 値ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumns">
      <MemberSignature Language="C#" Value="protected void AutoResizeColumns (System.Windows.Forms.DataGridViewAutoSizeColumnsMode autoSizeColumnsMode, bool fixedHeight);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AutoResizeColumns(valuetype System.Windows.Forms.DataGridViewAutoSizeColumnsMode autoSizeColumnsMode, bool fixedHeight) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeColumns(System.Windows.Forms.DataGridViewAutoSizeColumnsMode,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoSizeColumnsMode" Type="System.Windows.Forms.DataGridViewAutoSizeColumnsMode" />
        <Parameter Name="fixedHeight" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="autoSizeColumnsMode">
          <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" /> 値の 1 つ。</param>
        <param name="fixedHeight">現在の行の高さに基づいて新しい幅を計算する場合は <see langword="true" />。行の高さも調整されることを見込んで幅を計算する場合は <see langword="false" />。</param>
        <summary>指定されたサイズ モードを使用してすべての列の幅を調整します。オプションで、行の高さが後で調整されることを見込んで幅を計算します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、列のサイズを変更するタイミングを制御する場合に便利です。 列の幅は、メソッドを呼び出すたびに 1 回だけ調整されます。後で列の内容変更されても、列は自動的に調整します。 特定の列のサイズを変更するを使用して、 <xref:System.Windows.Forms.DataGridView.AutoResizeColumn%2A> メソッドです。 内容が変更されるたびに自動的にサイズ変更する列を設定するには、使用、 <xref:System.Windows.Forms.DataGridView.AutoSizeColumnsMode%2A> プロパティまたは列 <xref:System.Windows.Forms.DataGridViewColumn.AutoSizeMode%2A> プロパティです。  
  
 このオーバー ロードでは、限られたように表示されている行だけこれらのセルの値に基づいて新しい幅を計算するサイズ変更モードを指定できます。 これにより、コントロールには、大量の行が含まれている場合、パフォーマンスが向上します。  
  
 このオーバー ロードが保護されており、派生の理想的なセルの高さと幅の比率を実現するために設計された <xref:System.Windows.Forms.DataGridView> クラスです。 場合 `fixedHeight` は `false`, 、列の幅が呼び出されるという前提で計算されます、 <xref:System.Windows.Forms.DataGridView.AutoResizeRow%2A> または <xref:System.Windows.Forms.DataGridView.AutoResizeRows%2A> メソッド次です。  
  
 プログラムによるサイズ変更の詳細については、次を参照してください。 [Sizing Options in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/a5620a9c-0d06-41e3-8934-c25ddb16c9e6)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="autoSizeColumnsMode" /> の値が <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.ColumnHeader" /> であり、<see cref="P:System.Windows.Forms.DataGridView.ColumnHeadersVisible" /> が <see langword="false" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="autoSizeColumnsMode" /> の値が <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.None" /> または <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.Fill" /> です。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="autoSizeColumnsMode" /> は有効な <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" /> 値ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeRow">
      <MemberSignature Language="C#" Value="public void AutoResizeRow (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeRow(int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeRow(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">サイズ変更する行のインデックス。</param>
        <summary>ヘッダー セルを含むすべてのセルの内容に合わせて、指定された行の高さを調整します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method is useful if you want to control when a row resizes. The row height is adjusted only once per method call; if the contents of the row later change, the row will not automatically adjust. To resize all rows, use the <xref:System.Windows.Forms.DataGridView.AutoResizeRows%2A> method. To set the row to automatically resize whenever its contents change, use the <xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A> property.  
  
 For cell contents to wrap onto multiple lines when a row is resized, the cell style in effect for the cell must have a <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> property value of <xref:System.Windows.Forms.DataGridViewTriState.True>.  
  
 For more information about programmatic resizing, see [Sizing Options in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/a5620a9c-0d06-41e3-8934-c25ddb16c9e6).  
  
   
  
## 例  
 The following code example resizes the third row in a <xref:System.Windows.Forms.DataGridView> to fit the column contents. This code example is part of a larger example provided in [How to: Programmatically Resize Cells to Fit Content in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/63d770dc-b3f5-462b-901a-3125b2753792).  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ProgrammaticResizing\#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/CPP/programmaticsizing.cpp#4)]
 [!code-csharp[System.Windows.Forms.DataGridView.ProgrammaticResizing\#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/CS/programmaticsizing.cs#4)]
 [!code-vb[System.Windows.Forms.DataGridView.ProgrammaticResizing\#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/VB/programmaticsizing.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="rowIndex" /> が、0 以上、行数 \- 1 以下の、有効な範囲内にありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeRow">
      <MemberSignature Language="C#" Value="public void AutoResizeRow (int rowIndex, System.Windows.Forms.DataGridViewAutoSizeRowMode autoSizeRowMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeRow(int32 rowIndex, valuetype System.Windows.Forms.DataGridViewAutoSizeRowMode autoSizeRowMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeRow(System.Int32,System.Windows.Forms.DataGridViewAutoSizeRowMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="autoSizeRowMode" Type="System.Windows.Forms.DataGridViewAutoSizeRowMode" />
      </Parameters>
      <Docs>
        <param name="rowIndex">サイズ変更する行のインデックス。</param>
        <param name="autoSizeRowMode">
          <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowMode" /> の値の 1 つ。</param>
        <summary>指定されたサイズ モードを使用して、指定された行の高さを調整します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、行のサイズを変更するタイミングを制御する場合に便利です。 メソッドを呼び出すたびに、1 回だけ行の高さを調整します。後で行の内容変更されても、行は自動的に調整します。 すべての行のサイズを変更するを使用して、 <xref:System.Windows.Forms.DataGridView.AutoResizeRows%2A> メソッドです。 サイズが自動的にその内容が変更されるたびに行を設定するには、使用、 <xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A> プロパティです。  
  
 セルに対して有効セル スタイルの行のサイズが変更されたときに、複数の行に折り返すセルの内容を <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> のプロパティの値 <xref:System.Windows.Forms.DataGridViewTriState.True>です。  
  
 このオーバー ロードでは、限られたように表示されている行だけこれらのセルの値に基づいて新しい高さを計算するサイズ変更モードを指定できます。 これにより、コントロールには、大量の行が含まれている場合、パフォーマンスが向上します。  
  
 プログラムによるサイズ変更の詳細については、次を参照してください。 [Sizing Options in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/a5620a9c-0d06-41e3-8934-c25ddb16c9e6)します。  
  
   
  
## 例  
 次のコード例では、3 番目の行のサイズを変更、 <xref:System.Windows.Forms.DataGridView> 列の内容に合わせています。 このコード例に示されている例の一部である [How to: Programmatically Resize Cells to Fit Content in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/63d770dc-b3f5-462b-901a-3125b2753792)です。  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ProgrammaticResizing\#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/CPP/programmaticsizing.cpp#4)]
 [!code-csharp[System.Windows.Forms.DataGridView.ProgrammaticResizing\#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/CS/programmaticsizing.cs#4)]
 [!code-vb[System.Windows.Forms.DataGridView.ProgrammaticResizing\#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/VB/programmaticsizing.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="autoSizeRowMode" /> の値は <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowMode.RowHeader" /> であり、<see cref="P:System.Windows.Forms.DataGridView.RowHeadersVisible" /> は <see langword="false" /> です。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="autoSizeRowMode" /> が有効な <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowMode" /> 値ではありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="rowIndex" /> が、0 以上、行数 \- 1 以下の、有効な範囲内にありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeRow">
      <MemberSignature Language="C#" Value="protected void AutoResizeRow (int rowIndex, System.Windows.Forms.DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AutoResizeRow(int32 rowIndex, valuetype System.Windows.Forms.DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeRow(System.Int32,System.Windows.Forms.DataGridViewAutoSizeRowMode,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="autoSizeRowMode" Type="System.Windows.Forms.DataGridViewAutoSizeRowMode" />
        <Parameter Name="fixedWidth" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rowIndex">サイズ変更する行のインデックス。</param>
        <param name="autoSizeRowMode">
          <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowMode" /> の値の 1 つ。</param>
        <param name="fixedWidth">列の現在の幅に基づいて新しい高さを計算する場合は <see langword="true" />。列の幅も調整されることを見込んで高さを計算する場合は <see langword="false" />。</param>
        <summary>指定されたサイズ モードを使用して指定された行の高さを調整します。オプションで、列の幅が後で調整されることを見込んで高さを計算します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、行のサイズを変更するタイミングを制御する場合に便利です。 メソッドを呼び出すたびに、1 回だけ行の高さを調整します。後で行の内容変更されても、行は自動的に調整します。 すべての行のサイズを変更するを使用して、 <xref:System.Windows.Forms.DataGridView.AutoResizeRows%2A> メソッドです。 サイズが自動的にその内容が変更されるたびに行を設定するには、使用、 <xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A> プロパティです。  
  
 セルに対して有効セル スタイルの行のサイズが変更されたときに、複数の行に折り返すセルの内容を <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> のプロパティの値 <xref:System.Windows.Forms.DataGridViewTriState.True>です。  
  
 このオーバー ロードでは、限られたように表示されている行だけこれらのセルの値に基づいて新しい高さを計算するサイズ変更モードを指定できます。 これにより、コントロールには、大量の行が含まれている場合、パフォーマンスが向上します。  
  
 このオーバー ロードが保護されており、派生の理想的なセルの高さと幅の比率を実現するために設計された <xref:System.Windows.Forms.DataGridView> クラスです。 場合 `fixedWidth` は `false`, 、行の高さが呼び出されるという前提で計算されます、 <xref:System.Windows.Forms.DataGridView.AutoResizeColumn%2A> または <xref:System.Windows.Forms.DataGridView.AutoResizeColumns%2A> メソッド次です。  
  
 プログラムによるサイズ変更の詳細については、次を参照してください。 [Sizing Options in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/a5620a9c-0d06-41e3-8934-c25ddb16c9e6)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="autoSizeRowMode" /> の値が <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowMode.RowHeader" /> であり、かつ <see cref="P:System.Windows.Forms.DataGridView.RowHeadersVisible" /> が <see langword="false" /> です。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="autoSizeRowMode" /> が有効な <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowMode" /> 値ではありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="rowIndex" /> が、0 以上、行数 \- 1 以下の、有効な範囲内にありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeRowHeadersWidth">
      <MemberSignature Language="C#" Value="public void AutoResizeRowHeadersWidth (System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeRowHeadersWidth(valuetype System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeRowHeadersWidth(System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowHeadersWidthSizeMode" Type="System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" />
      </Parameters>
      <Docs>
        <param name="rowHeadersWidthSizeMode">
          <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> 値の 1 つ。</param>
        <summary>指定されたサイズ モードを使用して、行ヘッダーの幅を調整します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、行ヘッダーのサイズを変更するタイミングを制御する場合に便利です。 メソッドを呼び出すたびに、1 回だけ行ヘッダーの幅を調整します。場合は、行ヘッダーは、ヘッダーを後で変更する行の内容を自動的に調整します。 行ヘッダーの内容を変更するときに自動的にサイズを設定するには、使用、 <xref:System.Windows.Forms.DataGridView.RowHeadersWidthSizeMode%2A> プロパティです。  
  
 このメソッドでは、限られたなどで表示されている行だけこれらのヘッダーの値に基づいて新しい幅を計算するサイズ変更モードを指定できます。 これにより、コントロールには、大量の行が含まれている場合、パフォーマンスが向上します。  
  
 プログラムによるサイズ変更の詳細については、次を参照してください。 [Sizing Options in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/a5620a9c-0d06-41e3-8934-c25ddb16c9e6)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="rowHeadersWidthSizeMode" /> の値は <see cref="F:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.EnableResizing" /> または <see cref="F:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.DisableResizing" /> です。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="rowHeadersWidthSizeMode" /> が有効な <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> 値ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeRowHeadersWidth">
      <MemberSignature Language="C#" Value="public void AutoResizeRowHeadersWidth (int rowIndex, System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeRowHeadersWidth(int32 rowIndex, valuetype System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeRowHeadersWidth(System.Int32,System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="rowHeadersWidthSizeMode" Type="System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" />
      </Parameters>
      <Docs>
        <param name="rowIndex">内容が変更された行ヘッダーのインデックス。</param>
        <param name="rowHeadersWidthSizeMode">
          <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> 値の 1 つ。</param>
        <summary>指定された行のヘッダーの内容の変更に基づいて、指定されたサイズ モードを使用して行ヘッダーの幅を調整します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、バインドされたデータ ソースへのユーザーによる編集内容または変更の結果として、指定された行のヘッダーの内容が変わって専用の場合は行ヘッダーのサイズを変更するタイミングを制御する場合に便利です。 行ヘッダーの幅が 1 回だけ調整メソッドを呼び出すたび内容の変更に必要な場合です。場合は、行ヘッダーは、ヘッダーを後で変更する行の内容を自動的に調整します。 行ヘッダーの内容を変更するときに自動的にサイズを設定するには、使用、 <xref:System.Windows.Forms.DataGridView.RowHeadersWidthSizeMode%2A> プロパティです。  
  
 このメソッドでは、限られたなどで表示されている行だけこれらのヘッダーの値に基づいて新しい幅を計算するサイズ変更モードを指定できます。 これにより、コントロールには、大量の行が含まれている場合、パフォーマンスが向上します。  
  
 プログラムによるサイズ変更の詳細については、次を参照してください。 [Sizing Options in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/a5620a9c-0d06-41e3-8934-c25ddb16c9e6)します。  
  
   
  
## 例  
 次のコード例では、最初の行ヘッダーの内容の変更に基づく行ヘッダーの幅のサイズを変更する方法を示します。 このコード例に示されている例の一部である [How to: Programmatically Resize Cells to Fit Content in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/63d770dc-b3f5-462b-901a-3125b2753792)です。  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ProgrammaticResizing\#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/CPP/programmaticsizing.cpp#5)]
 [!code-csharp[System.Windows.Forms.DataGridView.ProgrammaticResizing\#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/CS/programmaticsizing.cs#5)]
 [!code-vb[System.Windows.Forms.DataGridView.ProgrammaticResizing\#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/VB/programmaticsizing.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="rowIndex" /> が、0 と行数 \-1 の間の有効な範囲内にありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="rowHeadersWidthSizeMode" /> の値が <see cref="F:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.EnableResizing" /> または <see cref="F:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.DisableResizing" /> です。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="rowHeadersWidthSizeMode" /> が有効な <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> 値ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeRowHeadersWidth">
      <MemberSignature Language="C#" Value="protected void AutoResizeRowHeadersWidth (System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode, bool fixedColumnHeadersHeight, bool fixedRowsHeight);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AutoResizeRowHeadersWidth(valuetype System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode, bool fixedColumnHeadersHeight, bool fixedRowsHeight) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeRowHeadersWidth(System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode,System.Boolean,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowHeadersWidthSizeMode" Type="System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" />
        <Parameter Name="fixedColumnHeadersHeight" Type="System.Boolean" />
        <Parameter Name="fixedRowsHeight" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rowHeadersWidthSizeMode">
          <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> の値の 1 つ。</param>
        <param name="fixedColumnHeadersHeight">列ヘッダーの現在の高さに基づいて新しい幅を計算する場合は <see langword="true" />。列ヘッダーの高さも調整されることを見込んで幅を計算する場合は <see langword="false" />。</param>
        <param name="fixedRowsHeight">現在の行の高さに基づいて新しい幅を計算する場合は <see langword="true" />。行の高さも調整されることを見込んで幅を計算する場合は <see langword="false" />。</param>
        <summary>指定されたサイズ モードを使用して行ヘッダーの幅を調整します。オプションで、行ヘッダーまたは列ヘッダー \(またはその両方\) の幅が後で調整されることを見込んで幅を計算します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、行ヘッダーのサイズを変更するタイミングを制御する場合に便利です。 メソッドを呼び出すたびに、1 回だけ行ヘッダーの幅を調整します。場合は、行ヘッダーは、ヘッダーを後で変更する行の内容を自動的に調整します。 自動的にサイズ変更の内容が変更されると行ヘッダーを設定するには、使用、 <xref:System.Windows.Forms.DataGridView.RowHeadersWidthSizeMode%2A> プロパティです。  
  
 このメソッドでは、限られたなどで表示されている行だけこれらのヘッダーの値に基づいて新しい幅を計算するサイズ変更モードを指定できます。 これにより、コントロールには、大量の行が含まれている場合、パフォーマンスが向上します。  
  
 このオーバー ロードが保護されており、派生の理想的なセルの高さと幅の比率を実現するために設計された <xref:System.Windows.Forms.DataGridView> クラスです。 場合、 `fixedColumnHeadersHeight` または `fixedRowsHeight` パラメーターは、 `false`, を呼び出すことなどを前提として、行ヘッダーの幅を計算します。 <xref:System.Windows.Forms.DataGridView.AutoResizeRows%2A> と <xref:System.Windows.Forms.DataGridView.AutoResizeColumnHeadersHeight%2A> 次です。  
  
 プログラムによるサイズ変更の詳細については、次を参照してください。 [Sizing Options in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/a5620a9c-0d06-41e3-8934-c25ddb16c9e6)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="rowHeadersWidthSizeMode" /> の値は <see cref="F:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.EnableResizing" /> または <see cref="F:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.DisableResizing" /> です。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="rowHeadersWidthSizeMode" /> が有効な <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> 値ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeRowHeadersWidth">
      <MemberSignature Language="C#" Value="protected void AutoResizeRowHeadersWidth (int rowIndex, System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode, bool fixedColumnHeadersHeight, bool fixedRowHeight);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AutoResizeRowHeadersWidth(int32 rowIndex, valuetype System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode, bool fixedColumnHeadersHeight, bool fixedRowHeight) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeRowHeadersWidth(System.Int32,System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode,System.Boolean,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="rowHeadersWidthSizeMode" Type="System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" />
        <Parameter Name="fixedColumnHeadersHeight" Type="System.Boolean" />
        <Parameter Name="fixedRowHeight" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rowIndex">内容が変更されたヘッダーを格納している行のインデックス。</param>
        <param name="rowHeadersWidthSizeMode">
          <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> の値の 1 つ。</param>
        <param name="fixedColumnHeadersHeight">列ヘッダーの現在の高さに基づいて新しい幅を計算する場合は <see langword="true" />。列ヘッダーの高さも調整されることを見込んで幅を計算する場合は <see langword="false" />。</param>
        <param name="fixedRowHeight">指定された行の現在の高さに基づいて新しい幅を計算する場合は <see langword="true" />。行の高さも調整されることを見込んで幅を計算する場合は <see langword="false" />。</param>
        <summary>指定された行のヘッダーの内容の変更に基づいて、指定されたサイズ モードを使用して行ヘッダーの幅を調整します。オプションで、行ヘッダーまたは列ヘッダー \(またはその両方\) の幅が後で調整されることを見込んで幅を計算します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、バインドされたデータ ソースへのユーザーによる編集内容または変更の結果として、指定された行のヘッダーの内容が変わって専用の場合は行ヘッダーのサイズを変更するタイミングを制御する場合に便利です。 行ヘッダーの幅が 1 回だけ調整メソッドを呼び出すたび内容の変更に必要な場合です。場合は、行ヘッダーは、ヘッダーを後で変更する行の内容を自動的に調整します。 自動的にサイズ変更の内容が変更されると行ヘッダーを設定するには、使用、 <xref:System.Windows.Forms.DataGridView.RowHeadersWidthSizeMode%2A> プロパティです。  
  
 このメソッドでは、限られたなどで表示されている行だけこれらのヘッダーの値に基づいて新しい幅を計算するサイズ変更モードを指定できます。 これにより、コントロールには、大量の行が含まれている場合、パフォーマンスが向上します。  
  
 このオーバー ロードが保護されているし、派生の理想的なセルの高さと幅の比率を実現するために設計されています <xref:System.Windows.Forms.DataGridView> クラスです。 場合、 `fixedColumnHeadersHeight` または `fixedRowHeight` パラメーターは、 `false`, を呼び出すことなどを前提として、行ヘッダーの幅を計算します。 <xref:System.Windows.Forms.DataGridView.AutoResizeRows%2A> と <xref:System.Windows.Forms.DataGridView.AutoResizeColumnHeadersHeight%2A> 次です。  
  
 プログラムによるサイズ変更の詳細については、次を参照してください。 [Sizing Options in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/a5620a9c-0d06-41e3-8934-c25ddb16c9e6)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="rowIndex" /> が、0 以上、行数 \- 1 以下の、有効な範囲内にありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="rowHeadersWidthSizeMode" /> の値は <see cref="F:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.EnableResizing" /> または <see cref="F:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.DisableResizing" /> です。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="rowHeadersWidthSizeMode" /> が有効な <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> 値ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeRows">
      <MemberSignature Language="C#" Value="public void AutoResizeRows ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeRows() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeRows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ヘッダー セルを含むすべてのセルの内容に合わせて、すべての行の高さを調整します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、行のサイズを変更するタイミングを制御する場合に便利です。 行の高さは、メソッドを呼び出すたびに 1 回だけ調整されます。場合は、後で行の内容を変更する行は自動的に調整します。 特定の行のサイズを変更するを使用して、 <xref:System.Windows.Forms.DataGridView.AutoResizeRow%2A> メソッドです。 行のサブセットのサイズを変更するを使用して、 <xref:System.Windows.Forms.DataGridView.AutoResizeRows%28System.Int32%2CSystem.Int32%2CSystem.Windows.Forms.DataGridViewAutoSizeRowMode%2CSystem.Boolean%29> オーバー ロードします。 内容が変更されるたびに自動的にサイズ変更行を設定するには、使用、 <xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A> プロパティです。  
  
 セルに対して有効セル スタイルの行のサイズが変更されたときに、複数の行に折り返すセルの内容を <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> のプロパティの値 <xref:System.Windows.Forms.DataGridViewTriState.True>です。  
  
 プログラムによるサイズ変更の詳細については、次を参照してください。 [Sizing Options in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/a5620a9c-0d06-41e3-8934-c25ddb16c9e6)します。  
  
   
  
## 例  
 次のコード例では、非ヘッダー セルの内容に基づくすべての行のサイズを変更する方法を示します。 このコード例に示されている例の一部である [How to: Programmatically Resize Cells to Fit Content in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/63d770dc-b3f5-462b-901a-3125b2753792)です。  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ProgrammaticResizing\#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/CPP/programmaticsizing.cpp#7)]
 [!code-csharp[System.Windows.Forms.DataGridView.ProgrammaticResizing\#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/CS/programmaticsizing.cs#7)]
 [!code-vb[System.Windows.Forms.DataGridView.ProgrammaticResizing\#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/VB/programmaticsizing.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeRows">
      <MemberSignature Language="C#" Value="public void AutoResizeRows (System.Windows.Forms.DataGridViewAutoSizeRowsMode autoSizeRowsMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeRows(valuetype System.Windows.Forms.DataGridViewAutoSizeRowsMode autoSizeRowsMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeRows(System.Windows.Forms.DataGridViewAutoSizeRowsMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoSizeRowsMode" Type="System.Windows.Forms.DataGridViewAutoSizeRowsMode" />
      </Parameters>
      <Docs>
        <param name="autoSizeRowsMode">
          <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> の値の 1 つ。</param>
        <summary>指定されたサイズ モード値を使用して、行の高さを調整します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method is useful if you want to control when rows resize. The row heights are adjusted only once per method call; if the contents of the rows later change, the rows will not automatically adjust. To resize a specific row, use the <xref:System.Windows.Forms.DataGridView.AutoResizeRow%2A> method. To resize a subset of rows, use the <xref:System.Windows.Forms.DataGridView.AutoResizeRows%28System.Int32%2CSystem.Int32%2CSystem.Windows.Forms.DataGridViewAutoSizeRowMode%2CSystem.Boolean%29> overload. To set the rows to automatically resize whenever their contents change, use the<xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A> property.  
  
 For cell contents to wrap onto multiple lines when a row is resized, the cell style in effect for the cell must have a <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> property value of <xref:System.Windows.Forms.DataGridViewTriState.True>.  
  
 This overload lets you specify a sizing mode that calculates the new heights based on values in a limited set of cells, such as those in displayed rows only. This improves performance when the control contains a large number of rows.  
  
 For more information about programmatic resizing, see [Sizing Options in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/a5620a9c-0d06-41e3-8934-c25ddb16c9e6).  
  
   
  
## 例  
 The following code example demonstrates how to resize all rows based on non\-header cell content. This code example is part of a larger example provided in [How to: Programmatically Resize Cells to Fit Content in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/63d770dc-b3f5-462b-901a-3125b2753792).  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ProgrammaticResizing\#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/CPP/programmaticsizing.cpp#7)]
 [!code-csharp[System.Windows.Forms.DataGridView.ProgrammaticResizing\#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/CS/programmaticsizing.cs#7)]
 [!code-vb[System.Windows.Forms.DataGridView.ProgrammaticResizing\#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/VB/programmaticsizing.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="autoSizeRowsMode" /> は <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.AllHeaders" /> または <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.DisplayedHeaders" /> の値を持ち、<see cref="P:System.Windows.Forms.DataGridView.RowHeadersVisible" /> が <see langword="false" /> です。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="autoSizeRowsMode" /> が有効な <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> 値ではありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="autoSizeRowsMode" /> は <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.None" /> の値を持ちます。</exception>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeRows">
      <MemberSignature Language="C#" Value="protected void AutoResizeRows (System.Windows.Forms.DataGridViewAutoSizeRowsMode autoSizeRowsMode, bool fixedWidth);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AutoResizeRows(valuetype System.Windows.Forms.DataGridViewAutoSizeRowsMode autoSizeRowsMode, bool fixedWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeRows(System.Windows.Forms.DataGridViewAutoSizeRowsMode,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoSizeRowsMode" Type="System.Windows.Forms.DataGridViewAutoSizeRowsMode" />
        <Parameter Name="fixedWidth" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="autoSizeRowsMode">
          <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> 値の 1 つ。</param>
        <param name="fixedWidth">現在の列の幅に基づいて新しい高さを計算する場合は <see langword="true" />。列の幅も調整されることを見込んで高さを計算する場合は <see langword="false" />。</param>
        <summary>指定されたサイズ モードを使用してすべての行の高さを調整します。オプションで、列の幅が後で調整されることを見込んで高さを計算します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method is useful if you want to control when rows resize. The row heights are adjusted only once per method call; if the contents of the rows later change, the rows will not automatically adjust. To resize a specific row, use the <xref:System.Windows.Forms.DataGridView.AutoResizeRow%2A> method. To resize a subset of rows, use the <xref:System.Windows.Forms.DataGridView.AutoResizeRows%28System.Int32%2CSystem.Int32%2CSystem.Windows.Forms.DataGridViewAutoSizeRowMode%2CSystem.Boolean%29> overload. To set the rows to automatically resize whenever their contents change, use the <xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A> property.  
  
 For cell contents to wrap onto multiple lines when a row is resized, the cell style in effect for the cell must have a <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> property value of <xref:System.Windows.Forms.DataGridViewTriState.True>.  
  
 This overload lets you specify a sizing mode that calculates the new heights based on values in a limited set of cells, such as those in displayed rows only. This improves performance when the control contains a large number of rows.  
  
 This overload is protected, and is designed to enable you to achieve ideal cell height\-to\-width ratios in a derived <xref:System.Windows.Forms.DataGridView> class. If the **parameterReference tag is not supported!!!!**  
 parameter is **languageKeyword tag is not supported!!!!**  
, the row heights will be calculated with the expectation that you will call the <xref:System.Windows.Forms.DataGridView.AutoResizeColumn%2A> or <xref:System.Windows.Forms.DataGridView.AutoResizeColumns%2A> method next.  
  
 For more information about programmatic resizing, see [Sizing Options in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/a5620a9c-0d06-41e3-8934-c25ddb16c9e6).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="autoSizeRowsMode" /> の値は <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.AllHeaders" /> または <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.DisplayedHeaders" /> であり、<see cref="P:System.Windows.Forms.DataGridView.RowHeadersVisible" /> は <see langword="false" /> です。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="autoSizeRowsMode" /> が有効な <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> 値ではありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="autoSizeRowsMode" /> は <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.None" /> の値を持ちます。</exception>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeRows">
      <MemberSignature Language="C#" Value="protected void AutoResizeRows (int rowIndexStart, int rowsCount, System.Windows.Forms.DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AutoResizeRows(int32 rowIndexStart, int32 rowsCount, valuetype System.Windows.Forms.DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeRows(System.Int32,System.Int32,System.Windows.Forms.DataGridViewAutoSizeRowMode,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndexStart" Type="System.Int32" />
        <Parameter Name="rowsCount" Type="System.Int32" />
        <Parameter Name="autoSizeRowMode" Type="System.Windows.Forms.DataGridViewAutoSizeRowMode" />
        <Parameter Name="fixedWidth" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rowIndexStart">サイズ変更する最初の行のインデックス。</param>
        <param name="rowsCount">サイズ変更する行の数。</param>
        <param name="autoSizeRowMode">
          <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowMode" /> 値の 1 つ。</param>
        <param name="fixedWidth">現在の列の幅に基づいて新しい高さを計算する場合は <see langword="true" />。列の幅も調整されることを見込んで高さを計算する場合は <see langword="false" />。</param>
        <summary>指定されたサイズ モードを使用して指定された行の高さを調整します。オプションで、列の幅が後で調整されることを見込んで高さを計算します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、行のサイズをサイズのように更新されたバインドのレコードの範囲内の行の特定のサブセットのみを変更する場合を制御する場合に便利です。 指定した行の行の高さは、メソッドを呼び出すたびに 1 回だけ調整されます。場合は、後で行の内容を変更する行は自動的に調整します。 特定の行のサイズを変更するを使用して、 <xref:System.Windows.Forms.DataGridView.AutoResizeRow%2A> メソッドです。 すべての行のサイズを変更するには、別のオーバー ロードを使用して、 <xref:System.Windows.Forms.DataGridView.AutoResizeRows%2A> メソッドです。 内容が変更されるたびに自動的にサイズ変更行を設定するには、使用、 <xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A> プロパティです。  
  
 セルに対して有効セル スタイルの行のサイズが変更されたときに、複数の行に折り返すセルの内容を <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> のプロパティの値 <xref:System.Windows.Forms.DataGridViewTriState.True>です。  
  
 このオーバー ロードでは、限られたように表示されている行だけこれらのセルの値に基づいて新しい高さを計算するサイズ変更モードを指定できます。 これにより、コントロールには、大量の行が含まれている場合、パフォーマンスが向上します。  
  
 このオーバー ロードが保護されており、派生の理想的なセルの高さと幅の比率を実現するために設計された <xref:System.Windows.Forms.DataGridView> クラスです。 場合、 `fixedWidth` パラメーターは `false`, 、行の高さが呼び出されるという前提で計算されます、 <xref:System.Windows.Forms.DataGridView.AutoResizeColumn%2A> または <xref:System.Windows.Forms.DataGridView.AutoResizeColumns%2A> メソッド次です。  
  
 プログラムによるサイズ変更の詳細については、次を参照してください。 [Sizing Options in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/a5620a9c-0d06-41e3-8934-c25ddb16c9e6)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="autoSizeRowsMode" /> の値は <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.AllHeaders" /> または <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.DisplayedHeaders" /> であり、<see cref="P:System.Windows.Forms.DataGridView.RowHeadersVisible" /> は <see langword="false" /> です。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="autoSizeRowsMode" /> が有効な <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> 値ではありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="autoSizeRowsMode" /> の値は <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.None" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="rowIndexStart" /> が 0 未満です。  
  
 \-または\-  
  
 <paramref name="rowsCount" /> が 0 未満です。</exception>
      </Docs>
    </Member>
    <Member MemberName="AutoSize">
      <MemberSignature Language="C#" Value="public override bool AutoSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.AutoSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このクラスでは、このプロパティは使用されません。</summary>
        <value>有効である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.Control.AutoSize" />
      </Docs>
    </Member>
    <Member MemberName="AutoSizeColumnModeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewAutoSizeColumnModeEventHandler AutoSizeColumnModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewAutoSizeColumnModeEventHandler AutoSizeColumnModeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.AutoSizeColumnModeChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAutoSizeColumnModeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>列の <see cref="P:System.Windows.Forms.DataGridViewColumn.AutoSizeMode" /> プロパティの値が変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例は、このイベントの使用方法を示しています。 この例で使用できる例の一部である [How to: Manipulate Columns in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/d8cfe6b3-bbab-4182-bec2-0517d9f1eaf6)です。  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ButtonDemos\#180](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ButtonDemos/CPP/DataGridViewColumnDemo.cpp#180)]
 [!code-csharp[System.Windows.Forms.DataGridView.ButtonDemos\#180](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ButtonDemos/CS/DataGridViewColumnDemo.cs#180)]
 [!code-vb[System.Windows.Forms.DataGridView.ButtonDemos\#180](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ButtonDemos/VB/datagridviewcolumndemo.vb#180)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridViewColumn.AutoSizeMode" />
        <altmember cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnModeEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnAutoSizeColumnModeChanged(System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="AutoSizeColumnsMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewAutoSizeColumnsMode AutoSizeColumnsMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridViewAutoSizeColumnsMode AutoSizeColumnsMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.AutoSizeColumnsMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAutoSizeColumnsMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>列の幅を決定する方法を示す値を取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" /> 値。 既定値は、<see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.None" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを使用して、列の幅がコントロールに入力するか、セルの内容に合わせて自動的に調整されるように、コントロールを構成できます。 サイズの調整は、コントロールの幅が変更されるたびに、フィル モードで発生します。 場合やセルの内容を変更するたびに、コンテンツに基づくサイズ変更モードにサイズ調整が発生する <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> が有効にすると、行の高さを変更します。 一部のコンテンツに基づくサイズ変更モードを使用して、パフォーマンスが向上するためにサイズ調整を現在表示されている行を制限できます。  
  
 個々 の列のサイズ変更モードを変更するには、次のように設定します。 その <xref:System.Windows.Forms.DataGridViewColumn.AutoSizeMode%2A> プロパティです。 このプロパティの既定値は <xref:System.Windows.Forms.DataGridViewAutoSizeColumnMode.NotSet>, 、列がその動作を継承することを示すとその <xref:System.Windows.Forms.DataGridViewColumn.InheritedAutoSizeMode%2A> コントロールからプロパティ値です。  
  
 列フィル モードでの比率で示された使用可能なコントロールの幅を分割する、 <xref:System.Windows.Forms.DataGridViewColumn.FillWeight%2A> プロパティの値。 コントロールのクライアント領域の幅から他のすべての列の幅を減算して、フィル モードの使用可能な幅が決定されます。 この領域の幅よりも小さい場合、結合された <xref:System.Windows.Forms.DataGridViewColumn.MinimumWidth%2A> すべてのフィル モード列の値は、水平スクロール バーが表示されます、すべてのフィル モード列は、幅を最小幅で表示列が無効になっています。 列フィル モードの詳細については、次を参照してください。 [Column Fill Mode in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/b4ef7411-ebf4-4e26-bb33-aecec90de80c)します。  
  
 持つ列のみ、 <xref:System.Windows.Forms.DataGridViewColumn.Visible%2A> のプロパティの値 `true` サイズが自動的に変更される列の表示を変更しても発生するサイズ変更は発生しません。 さらに、列が設定されて自動的にサイズを変更するには、ユーザーは、マウスで列の幅を調整できません。  
  
 プログラムを使用して列の幅を調整するには、使用、 <xref:System.Windows.Forms.DataGridView.AutoResizeColumn%2A> または <xref:System.Windows.Forms.DataGridView.AutoResizeColumns%2A> メソッドまたは列セット <xref:System.Windows.Forms.DataGridViewColumn.Width%2A> プロパティです。  
  
 コンテンツ ベースの自動サイズ変更の詳細については、次を参照してください。 [Sizing Options in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/a5620a9c-0d06-41e3-8934-c25ddb16c9e6)します。  
  
   
  
## 例  
 次のコード例は、2 つに、マスター\/詳細シナリオでこのプロパティを使用する方法を示しています。 <xref:System.Windows.Forms.DataGridView> コントロールが親\/子リレーションシップに 2 つのテーブルからデータを表示します。 この例では、マスター コントロールの列のサイズ変更モードは <xref:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.None>, 、され、列の幅が読み込まれた値に合わせてプログラムを使用して初期化します。 \(たとえば、ユーザーは、親テーブルの現在の行を変更\) 場合、値が変更されるたびに列が自動的に調整できるように、詳細コントロールは、列の自動サイズ変更モードに設定します。 この例で使用できる例の一部である [How to: Create a Master\/Details Form Using Two Windows Forms DataGridView Controls](http://msdn.microsoft.com/ja-jp/99f6e876-3f7f-4139-9063-e36587c95b02)です。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMasterDetails\#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMasterDetails/CS/masterdetails.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewMasterDetails\#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMasterDetails/VB/masterdetails.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">このプロパティの設定時に指定した値が、正しい <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" /> 値ではありません。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティの設定時に指定した値が <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.ColumnHeader" /> で、列ヘッダーは非表示に指定されており、表示されている列の少なくとも 1 つの <see cref="P:System.Windows.Forms.DataGridViewColumn.AutoSizeMode" /> プロパティの値が <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.NotSet" /> です。  
  
 または  
  
 このプロパティの設定時に指定した値が <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.Fill" /> で、表示されている列のうち <see cref="P:System.Windows.Forms.DataGridViewColumn.AutoSizeMode" /> プロパティの値が <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.NotSet" /> になっているものの少なくとも 1 つが固定されています。</exception>
        <altmember cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" />
        <altmember cref="P:System.Windows.Forms.DataGridViewColumn.FillWeight" />
      </Docs>
    </Member>
    <Member MemberName="AutoSizeColumnsModeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventHandler AutoSizeColumnsModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventHandler AutoSizeColumnsModeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.AutoSizeColumnsModeChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridView.AutoSizeColumnsMode" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.DataGridView.AutoSizeColumnsModeChanged> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the <xref:System.Windows.Forms.DataGridView.AutoSizeColumnsModeChanged> event.  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#257](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#257)]
 [!code-vb[System.Windows.Forms.EventExamples\#257](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#257)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnAutoSizeColumnsModeChanged(System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="AutoSizeRowsMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewAutoSizeRowsMode AutoSizeRowsMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridViewAutoSizeRowsMode AutoSizeRowsMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.AutoSizeRowsMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAutoSizeRowsMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>行の高さを決定する方法を示す値を取得または設定します。</summary>
        <value>サイズ変更モードを示す <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> 値。 既定値は、<see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.None" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを使用して、行の高さが内容に合わせて内容が変更されるたびに自動的に調整されるように、コントロールを構成できます。 場合 <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> は有効な場合、行の高さも調整列幅が変更されるたびにします。 いくつかのサイズ変更モードを使用して、パフォーマンスが向上するためにサイズ調整を現在表示されている行を制限できます。  
  
 持つ行だけを <xref:System.Windows.Forms.DataGridViewRow.Visible%2A> のプロパティの値 `true` サイズが自動的に変更される行の可視性を変更しても発生するサイズ変更は発生しません。 さらに、行が設定されて自動的にサイズを変更するには、ユーザーはマウスを使用して行の高さを調整できません。  
  
 <xref:System.Windows.Forms.DataGridViewRow.Height%2A> ために使用されるフォントのサイズを考慮するレイアウト時に自動的にサイズ設定された行の値が再計算します。 正しいさせる <xref:System.Windows.Forms.DataGridViewRow.Height%2A>, 、フォームの値を取得する必要があります <xref:System.Windows.Forms.Control.Layout> フォームのコンス トラクターの代わりにイベントです。  
  
 行の高さをプログラムで調整する、 <xref:System.Windows.Forms.DataGridView.AutoResizeRow%2A> または <xref:System.Windows.Forms.DataGridView.AutoResizeRows%2A> メソッド、またはセット行 <xref:System.Windows.Forms.DataGridViewRow.Height%2A> プロパティです。  
  
 セルに対して有効セル スタイルの行のサイズが変更されたときに、複数の行に折り返すセルの内容を <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> のプロパティの値 <xref:System.Windows.Forms.DataGridViewTriState.True>です。  
  
 コンテンツ ベースの自動サイズ変更の詳細については、次を参照してください。 [Sizing Options in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/a5620a9c-0d06-41e3-8934-c25ddb16c9e6)します。  
  
   
  
## 例  
 次のコード例では、行を行ヘッダーおよび列のすべての内容に基づくサイズ変更に自動的に設定する方法を示します。 このコード例に示されている例の一部である [How to: Automatically Resize Cells When Content Changes in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/1d68934d-a04c-4b12-9e66-c856c6828131)です。  
  
 [!code-cpp[System.Windows.Forms.DataGridView.AutoSizing\#9](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.AutoSizing/CPP/autosizing.cpp#9)]
 [!code-csharp[System.Windows.Forms.DataGridView.AutoSizing\#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.AutoSizing/CS/autosizing.cs#9)]
 [!code-vb[System.Windows.Forms.DataGridView.AutoSizing\#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.AutoSizing/VB/autosizing.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">このプロパティの設定時に指定した値が、有効な <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> 値ではありません。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティの設定時に指定される値は <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.AllHeaders" /> または <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.DisplayedHeaders" /> であり、行ヘッダーは非表示です。</exception>
        <altmember cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" />
      </Docs>
    </Member>
    <Member MemberName="AutoSizeRowsModeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewAutoSizeModeEventHandler AutoSizeRowsModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewAutoSizeModeEventHandler AutoSizeRowsModeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.AutoSizeRowsModeChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAutoSizeModeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例は、このイベントの使用方法を示しています。 この例で使用できる例の一部である [How to: Automatically Resize Cells When Content Changes in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/1d68934d-a04c-4b12-9e66-c856c6828131)です。  
  
 [!code-cpp[System.Windows.Forms.DataGridView.AutoSizing\#10](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.AutoSizing/CPP/autosizing.cpp#10)]
 [!code-csharp[System.Windows.Forms.DataGridView.AutoSizing\#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.AutoSizing/CS/autosizing.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridView.AutoSizing\#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.AutoSizing/VB/autosizing.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.BackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの背景色を取得または設定します。</summary>
        <value>コントロールの背景色を表す <see cref="T:System.Drawing.Color" />。 既定値は <see cref="P:System.Windows.Forms.Control.DefaultBackColor" /> プロパティの値です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This property is not relevant to this control. To set the background color of the portion of the <xref:System.Windows.Forms.DataGridView> control not occupied by cells, use the <xref:System.Windows.Forms.DataGridView.BackgroundColor%2A> property.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridView.BackgroundColor" />
      </Docs>
    </Member>
    <Member MemberName="BackColorChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackColorChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackColorChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.BackColorChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridView.BackColor" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.DataGridView.BackColorChanged> イベントは、 <xref:System.Windows.Forms.DataGridView.BackColor%2A> プロパティを変更すると、プログラムを使用して、またはユーザーとの対話ができます。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color BackgroundColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackgroundColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.BackgroundColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> の背景色を取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DataGridView" /> の背景色を表す <see cref="T:System.Drawing.Color" />。 既定値は、<see cref="P:System.Drawing.SystemColors.AppWorkspace" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.DataGridView.BackgroundColor%2A> プロパティの領域の色を決定する、 <xref:System.Windows.Forms.DataGridView> のセルを記入されていません。  
  
   
  
## 例  
 次のコード例では、設定、 <xref:System.Windows.Forms.DataGridView.BackgroundColor%2A> プロパティです。 さらに、コードの例では設定する、 <xref:System.Windows.Forms.DataGridViewColumn.Name%2A?displayProperty=fullName> と <xref:System.Windows.Forms.DataGridViewColumn.DefaultCellStyle%2A?displayProperty=fullName> プロパティです。 この例を実行するを含むフォームにコードを貼り付けます、 <xref:System.Windows.Forms.DataGridView> という名前 `dataGridView1`, 、まず、 `SetUpDataGridView` フォームのコンス トラクターからのメソッドまたは <xref:System.Windows.Forms.Form.Load> イベント ハンドラーです。 すべてのイベントがイベント ハンドラーに関連付けられていることを確認します。  
  
 [!code-cpp[System.Windows.Forms.GridViewUnbound\#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CPP/form1.cpp#5)]
 [!code-csharp[System.Windows.Forms.GridViewUnbound\#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CS/form1.cs#5)]
 [!code-vb[System.Windows.Forms.GridViewUnbound\#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">このプロパティの設定時に指定した値が <see cref="F:System.Drawing.Color.Empty" /> です。  
  
 または  
  
 このプロパティの設定時に指定した値に、255 未満の <see cref="P:System.Drawing.Color.A" /> プロパティ値が含まれています。</exception>
      </Docs>
    </Member>
    <Member MemberName="BackgroundColorChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundColorChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundColorChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.BackgroundColorChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridView.BackgroundColor" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.DataGridView.BackgroundColorChanged> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the <xref:System.Windows.Forms.DataGridView.BackgroundColorChanged> event.  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#259](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#259)]
 [!code-vb[System.Windows.Forms.EventExamples\#259](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#259)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImage">
      <MemberSignature Language="C#" Value="public override System.Drawing.Image BackgroundImage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Image BackgroundImage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.BackgroundImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールに表示される背景イメージを取得または設定します。</summary>
        <value>コントロールの背景に表示するイメージを表す <see cref="T:System.Drawing.Image" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコントロールでは、このプロパティは無効です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.BackgroundImageChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridView.BackgroundImage" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayout">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImageLayout BackgroundImageLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.BackgroundImageLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ImageLayout" /> 列挙型で定義される背景画像のレイアウトを取得または設定します。</summary>
        <value>背景イメージ レイアウトを示す <see cref="T:System.Windows.Forms.ImageLayout" /> 値。 既定値は、<see cref="F:System.Windows.Forms.ImageLayout.Tile" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコントロールでは、このプロパティは無効です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageLayoutChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.BackgroundImageLayoutChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridView.BackgroundImageLayout" /> プロパティが変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Although this event occurs as described, the <xref:System.Windows.Forms.DataGridView.BackgroundImageLayout%2A> property is not relevant for this control.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginEdit">
      <MemberSignature Language="C#" Value="public virtual bool BeginEdit (bool selectAll);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool BeginEdit(bool selectAll) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.BeginEdit(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectAll" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="selectAll">セルの内容をすべて選択する場合は <see langword="true" />。内容を選択しない場合は <see langword="false" />。</param>
        <summary>現在のセルを編集モードにします。</summary>
        <returns>現在のセルが既に編集モードである場合、または編集モードに正常に移行できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドが戻る `false` セルを編集モードは、さまざまな理由が考えられますが失敗したかどうか。 このメソッドが戻る `false` 場合は、現在のセルは読み取り専用です。 返します `false` 場合、セル <xref:System.Windows.Forms.DataGridViewCell.EditType%2A> プロパティは `null` \(つまり、セルをホストできません編集コントロール\) セルの種類が実装されていない、 <xref:System.Windows.Forms.IDataGridViewEditingCell> インターフェイスです。  
  
 このメソッドを発生させる場合は、セルが編集をサポートして、 <xref:System.Windows.Forms.DataGridView.CellBeginEdit> キャンセルできるを返す、イベント `false` 場合は、イベント ハンドラーが、編集をキャンセルします。 編集がキャンセルされないセルが編集コントロールをホストできる場合は、このメソッドはコントロールを初期化しますし、それを表示します。 初期化が失敗したかどうか、このメソッドが戻る `false`します。  
  
 セルは編集モードに移行できた場合、 <xref:System.Windows.Forms.DataGridView.IsCurrentCellInEditMode%2A> プロパティを返します。 `true`します。  
  
   
  
## 例  
 次のコード例では、このメソッドの使用方法を示します。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc2\#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc2/cs/misc2.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc2\#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc2/vb/misc2.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.DataGridView.CurrentCell" /> が有効なセルに設定されていません。  
  
 または  
  
 このメソッドが <see cref="E:System.Windows.Forms.DataGridView.CellBeginEdit" /> イベントに対してハンドラーで呼び出されました。</exception>
        <exception cref="T:System.InvalidCastException">セルの <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> プロパティによって示される型が <see cref="T:System.Windows.Forms.Control" /> 型 から派生していません。  
  
 または  
  
 セルの <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> プロパティによって示される型が <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> インターフェイスを実装していません。</exception>
        <exception cref="T:System.Exception">セル値の編集の初期化に失敗し、<see cref="E:System.Windows.Forms.DataGridView.DataError" /> イベントのハンドラーがないか、ハンドラーで <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> プロパティが <see langword="true" /> に設定されています。 通常、例外オブジェクトは型 <see cref="T:System.FormatException" /> にキャストできます。</exception>
        <altmember cref="P:System.Windows.Forms.DataGridView.CurrentCell" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.EditType" />
        <altmember cref="T:System.Windows.Forms.Control" />
        <altmember cref="T:System.Windows.Forms.IDataGridViewEditingControl" />
        <altmember cref="T:System.Windows.Forms.IDataGridViewEditingCell" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellBeginEdit" />
        <altmember cref="P:System.Windows.Forms.DataGridView.IsCurrentCellInEditMode" />
      </Docs>
    </Member>
    <Member MemberName="BorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BorderStyle BorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.BorderStyle BorderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.BorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> の境界線スタイルを取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.BorderStyle" /> 値のいずれか 1 つ。 既定値は <see cref="F:System.Windows.Forms.BorderStyle.FixedSingle" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは影響の外側の境界線、 <xref:System.Windows.Forms.DataGridView>です。 セルの罫線のスタイルを設定するには、使用、 <xref:System.Windows.Forms.DataGridView.CellBorderStyle%2A> プロパティです。  
  
   
  
## 例  
 次のコード例では、単純なデータ バインドの初期化 <xref:System.Windows.Forms.DataGridView>します。 設定する方法も示します、 <xref:System.Windows.Forms.DataGridView.BorderStyle%2A> プロパティです。  
  
 [!code-cpp[System.Windows.Forms.GridViewSimpleBound\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewSimpleBound/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.GridViewSimpleBound\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewSimpleBound/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.GridViewSimpleBound\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewSimpleBound/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">このプロパティの設定時に指定した値が、有効な <see cref="T:System.Windows.Forms.BorderStyle" /> 値ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="BorderStyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BorderStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BorderStyleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.BorderStyleChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridView.BorderStyle" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.DataGridView.BorderStyleChanged> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the <xref:System.Windows.Forms.DataGridView.BorderStyleChanged> event.  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#260](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#260)]
 [!code-vb[System.Windows.Forms.EventExamples\#260](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#260)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelEdit">
      <MemberSignature Language="C#" Value="public bool CancelEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CancelEdit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.CancelEdit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在選択されているセルの編集モードをキャンセルして、変更を破棄します。</summary>
        <returns>キャンセルが正常に実行された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 The following code example illustrates the use of this method. This example is part of a larger example available in [Column Fill Mode in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/b4ef7411-ebf4-4e26-bb33-aecec90de80c).  
  
 [!code-csharp[System.Windows.Forms.DataGridViewFillColumnsDemo\#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewFillColumnsDemo/CS/fillcolumns.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewFillColumnsDemo\#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewFillColumnsDemo/vb/fillcolumns.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelRowEdit">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.QuestionEventHandler CancelRowEdit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.QuestionEventHandler CancelRowEdit" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CancelRowEdit" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.QuestionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> コントロールの <see cref="P:System.Windows.Forms.DataGridView.VirtualMode" /> プロパティが <see langword="true" /> で、行の編集をキャンセルした場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 When the <xref:System.Windows.Forms.DataGridView> is in virtual mode, changes are committed to the data cache at the cell level by default. The <xref:System.Windows.Forms.DataGridView.CancelRowEdit> event can be used when implementing row\-level transactions.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example illustrates how to handle this event for a <xref:System.Windows.Forms.DataGridView> control in virtual mode. When the control is in edit mode, the `rowInEdit` variable holds the index of the row being edited, and the `customerInEdit` variable holds a reference to a Customer object corresponding to that row. When the user cancels out of edit mode, this object can be discarded. If the row the user was editing is the row for new records, however, the old Customer object is discarded and replaced with a new one so that the user can begin making edits again. This example is part of a larger example available in [Walkthrough: Implementing Virtual Mode in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/74eb5276-5ab8-4ce0-8005-dae751d85f7c).  
  
 [!code-cpp[System.Windows.Forms.DataGridView.VirtualMode\#170](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.VirtualMode/CPP/virtualmode.cpp#170)]
 [!code-csharp[System.Windows.Forms.DataGridView.VirtualMode\#170](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.VirtualMode/CS/virtualmode.cs#170)]
 [!code-vb[System.Windows.Forms.DataGridView.VirtualMode\#170](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.VirtualMode/VB/virtualmode.vb#170)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanEnableIme">
      <MemberSignature Language="C#" Value="protected override bool CanEnableIme { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanEnableIme" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.CanEnableIme" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.ImeMode" /> プロパティをアクティブな値に設定して、IME サポートを有効にできるかどうかを示す値を取得します。</summary>
        <value>編集可能なセルが選択されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CellBeginEdit">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellCancelEventHandler CellBeginEdit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellCancelEventHandler CellBeginEdit" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellBeginEdit" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>選択されたセルに対して編集モードが開始するときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example illustrates how to handle this event to reflect that the current <xref:System.Windows.Forms.DataGridViewCell> is being edited. In this example, the <xref:System.Windows.Forms.Control.Text%2A> property of the containing <xref:System.Windows.Forms.Form> is set to reflect which cell is being edited. To run this example, paste the code into a form that contains a <xref:System.Windows.Forms.DataGridView> named `dataGridView1`, and ensure all events are associated with their event handlers.  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc\#220](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#220)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc\#220](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#220)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CellBorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewCellBorderStyle CellBorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridViewCellBorderStyle CellBorderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.CellBorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellBorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> のセルの境界線スタイルを取得します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DataGridView" /> に含まれるセルの境界線スタイルを表す <see cref="T:System.Windows.Forms.DataGridViewCellBorderStyle" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 If the <xref:System.Windows.Forms.DataGridView.CellBorderStyle%2A> property is set to anything other than <xref:System.Windows.Forms.DataGridViewCellBorderStyle.Single>, <xref:System.Windows.Forms.DataGridViewCellBorderStyle.SingleHorizontal>, or <xref:System.Windows.Forms.DataGridViewCellBorderStyle.SingleVertical>, the <xref:System.Windows.Forms.DataGridView.GridColor%2A> property must be a system color.  
  
 You cannot set this property to the <xref:System.Windows.Forms.DataGridViewCellBorderStyle.Custom> value, which is a read\-only value indicating that the cell border style has been customized through the use of the <xref:System.Windows.Forms.DataGridView.AdvancedCellBorderStyle%2A> property.  
  
   
  
## 例  
 The following code example demonstrates how to use the <xref:System.Windows.Forms.DataGridView.CellBorderStyle%2A> property. To run this example, paste the code into a form that contains a <xref:System.Windows.Forms.DataGridView> named `dataGridView1`, and then call the `SetUpDataGridView` method from the form's constructor or <xref:System.Windows.Forms.Form.Load> event handler. Ensure all events are associated with their event handlers.  
  
 [!code-cpp[System.Windows.Forms.GridViewUnbound\#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CPP/form1.cpp#5)]
 [!code-csharp[System.Windows.Forms.GridViewUnbound\#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CS/form1.cs#5)]
 [!code-vb[System.Windows.Forms.GridViewUnbound\#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">このプロパティの設定時に指定した値が、有効な <see cref="T:System.Windows.Forms.DataGridViewCellBorderStyle" /> 値ではありません。</exception>
        <exception cref="T:System.ArgumentException">このプロパティの設定時に指定された値が <see cref="F:System.Windows.Forms.DataGridViewCellBorderStyle.Custom" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="CellBorderStyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CellBorderStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CellBorderStyleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellBorderStyleChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セルの境界線スタイルが変更したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.CellBorderStyleChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.CellBorderStyleChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#261](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#261)]
 [!code-vb[System.Windows.Forms.EventExamples\#261](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#261)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CellClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セルの一部がクリックされた場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This event occurs when any part of a cell is clicked, including borders and padding. It also occurs when the user presses and releases the SPACE key while a button cell or check box cell has focus, and will occur twice for these cell types if the cell is clicked while pressing the SPACE key.  
  
 To determine when the cell contents are clicked, handle the <xref:System.Windows.Forms.DataGridView.CellContentClick> event.  
  
 This event does not receive information about the mouse position. If the event handler needs information about the mouse position, use the <xref:System.Windows.Forms.DataGridView.CellMouseClick> event.  
  
 For clicks in a <xref:System.Windows.Forms.DataGridViewCheckBoxCell>, this event occurs before the check box changes value, so if you do not want to calculate the expected value based on the current value, you will typically handle the <xref:System.Windows.Forms.DataGridView.CellValueChanged?displayProperty=fullName> event instead. Because that event occurs only when the user\-specified value is committed, which typically occurs when focus leaves the cell, you must also handle the <xref:System.Windows.Forms.DataGridView.CurrentCellDirtyStateChanged?displayProperty=fullName> event. In that handler, if the current cell is a check box cell, call the <xref:System.Windows.Forms.DataGridView.CommitEdit%2A?displayProperty=fullName> method and pass in the <xref:System.Windows.Forms.DataGridViewDataErrorContexts.Commit> value.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example shows a <xref:System.Windows.Forms.DataGridView.CellClick> event handler in a Tic\-Tac\-Toe game implementation that uses image columns in a <xref:System.Windows.Forms.DataGridView> control. Unless the game is over or the cell has already been clicked, the event handler sets the cell value to one of two <xref:System.Drawing.Bitmap> objects represented by the variables `x` and `o`.  
  
 This code is part of a larger example shown in [How to: Work with Image Columns in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/8a37aa75-3c6e-4893-91d0-7a5f34bfe287).  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ImageColumn\_TicTacToe\#10](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ImageColumn_TicTacToe/CPP/tictactoe.cpp#10)]
 [!code-csharp[System.Windows.Forms.DataGridView.ImageColumn\_TicTacToe\#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ImageColumn_TicTacToe/CS/tictactoe.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridView.ImageColumn\_TicTacToe\#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ImageColumn_TicTacToe/VB/tictactoe.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CellContentClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellContentClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellContentClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellContentClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セル内の内容がクリックされたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、セルの内容がクリックされたときに発生します。 チェック ボックス セルにフォーカスがあり、セルの内容を space キーを押しながらクリックするとこれらのセルの種類に対して 2 回発生または押すし、ボタン セル space キーを離したときにも発生します。  
  
 ボタンのクリックを検出するためにこのイベントを使用して、 <xref:System.Windows.Forms.DataGridViewButtonCell> のリンクをクリックするか、 <xref:System.Windows.Forms.DataGridViewLinkCell>です。  
  
 クリック回数を <xref:System.Windows.Forms.DataGridViewCheckBoxCell>, 、このイベントは、チェック ボックスを変更値であるため、現在の値に基づいて予期される値を計算したくない場合に発生、通常は、 <xref:System.Windows.Forms.DataGridView.CellValueChanged?displayProperty=fullName> イベント代わりにします。 発生するため、ユーザー指定の値がコミットされた場合にのみ、フォーカスがセルを離れたときに通常発生する必要がありますも処理する、 <xref:System.Windows.Forms.DataGridView.CurrentCellDirtyStateChanged?displayProperty=fullName> イベントです。 現在のセルがチェック ボックス セルの場合を呼び出すそのハンドラーで、 <xref:System.Windows.Forms.DataGridView.CommitEdit%2A?displayProperty=fullName> メソッドを渡します、 <xref:System.Windows.Forms.DataGridViewDataErrorContexts.Commit> 値。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、クリックされたセルがリンク セルまたはボタン セルと、その結果、対応するアクションを実行するかどうかを決定するこのイベントのハンドラーを提供します。 この例で使用できる例の一部である、 <xref:System.Windows.Forms.DataGridViewComboBoxColumn> クラスの概要に関するトピック。  
  
 [!code-cpp[System.Windows.Forms.DataGridViewColumn\_AllColumns\_Bound\_Employees\#60](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees/CPP/employees.cpp#60)]
 [!code-csharp[System.Windows.Forms.DataGridViewColumn\_AllColumns\_Bound\_Employees\#60](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees/CS/employees.cs#60)]
 [!code-vb[System.Windows.Forms.DataGridViewColumn\_AllColumns\_Bound\_Employees\#60](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees/VB/employees.vb#60)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CellContentDoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellContentDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellContentDoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellContentDoubleClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがセルの内容をダブルクリックしたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.CellContentDoubleClick> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.CellContentDoubleClick> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#285](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#285)]
 [!code-vb[System.Windows.Forms.EventExamples\#285](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#285)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CellContextMenuStripChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellContextMenuStripChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellContextMenuStripChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellContextMenuStripChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridViewCell.ContextMenuStrip" /> プロパティが変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.CellContextMenuStripChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.CellContextMenuStripChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#286](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#286)]
 [!code-vb[System.Windows.Forms.EventExamples\#286](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#286)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CellContextMenuStripNeeded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler CellContextMenuStripNeeded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler CellContextMenuStripNeeded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellContextMenuStripNeeded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セルのショートカット メニューが必要な場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Windows.Forms.DataGridView.CellContextMenuStripNeeded> event occurs only when the <xref:System.Windows.Forms.DataGridView> control <xref:System.Windows.Forms.DataGridView.DataSource%2A> property is set or its <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> property is **languageKeyword tag is not supported!!!!**  
.  
  
 When you handle the <xref:System.Windows.Forms.DataGridView.CellContextMenuStripNeeded> event, the shortcut menu that you specify in the handler is shown whenever the user right\-clicks a cell. This is useful when you want to display a shortcut menu determined by the current state or value of a cell.  
  
 The <xref:System.Windows.Forms.DataGridView.CellContextMenuStripNeeded> event also occurs whenever the value of the <xref:System.Windows.Forms.DataGridViewCell.ContextMenuStrip%2A?displayProperty=fullName> property is retrieved, either programmatically or when the user right\-clicks a cell.  
  
 You can use the <xref:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex%2A?displayProperty=fullName>and <xref:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex%2A> properties to determine the state or value of a cell, and use this information to change or modify the <xref:System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs.ContextMenuStrip%2A?displayProperty=fullName> property. This property is initialized with the value of the cell <xref:System.Windows.Forms.DataGridViewCell.ContextMenuStrip%2A> property, which the event value overrides.  
  
 Handle the <xref:System.Windows.Forms.DataGridView.CellContextMenuStripNeeded> event when working with large amounts of data to avoid the performance penalties of setting the cell <xref:System.Windows.Forms.DataGridViewCell.ContextMenuStrip%2A> value for multiple cells. For more information, see [Best Practices for Scaling the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/8321a8a6-6340-4fd1-b475-fa090b905aaf).  
  
 You can also specify shortcut menus for individual rows rather than individual cells by setting the row <xref:System.Windows.Forms.DataGridViewRow.ContextMenuStrip%2A> property or handling the <xref:System.Windows.Forms.DataGridView.RowContextMenuStripNeeded> event. The cell <xref:System.Windows.Forms.DataGridViewCell.ContextMenuStrip%2A> property setting overrides the row <xref:System.Windows.Forms.DataGridViewRow.ContextMenuStrip%2A> property setting, and the <xref:System.Windows.Forms.DataGridView.CellContextMenuStripNeeded> event overrides both the <xref:System.Windows.Forms.DataGridView.RowContextMenuStripNeeded> event and the row <xref:System.Windows.Forms.DataGridViewRow.ContextMenuStrip%2A> property setting. However, you can specify **languageKeyword tag is not supported!!!!**  
 for a cell shortcut menu to prevent a row shortcut menu from being overridden.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example demonstrates how to use a<xref:System.Windows.Forms.DataGridView.CellContextMenuStripNeeded> event handler to display a custom shortcut menu used when the user right\-clicks a cell.  
  
 [!code-cpp[System.Windows.Forms.DataGridView\_SharedRowScenarios\#20](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView_SharedRowScenarios/CPP/sharedrows.cpp#20)]
 [!code-csharp[System.Windows.Forms.DataGridView\_SharedRowScenarios\#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView_SharedRowScenarios/CS/sharedrows.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridView\_SharedRowScenarios\#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView_SharedRowScenarios/VB/sharedrows.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ContextMenuStrip" />
        <altmember cref="P:System.Windows.Forms.DataGridView.DataSource" />
        <altmember cref="P:System.Windows.Forms.DataGridView.VirtualMode" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs.ContextMenuStrip" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.ContextMenuStrip" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnCellContextMenuStripNeeded(System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="CellDoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellDoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellDoubleClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セルのどこかをユーザーがダブルクリックしたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.DataGridView.CellDoubleClick> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the <xref:System.Windows.Forms.DataGridView.CellDoubleClick> event.  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#288](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#288)]
 [!code-vb[System.Windows.Forms.EventExamples\#288](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#288)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CellEndEdit">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellEndEdit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellEndEdit" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellEndEdit" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在選択されているセルに対して、編集モードが停止されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example illustrates how to handle this event to clear the row <xref:System.Windows.Forms.DataGridViewRow.ErrorText%2A?displayProperty=fullName> property in case it was previously set by a <xref:System.Windows.Forms.DataGridView.CellValidating> event handler. The <xref:System.Windows.Forms.DataGridView.CellValidating> event handler can clear the error text when the new cell value meets the validation criteria, but when the user reverts to the old cell value by pressing ESC, the <xref:System.Windows.Forms.DataGridView.CellValidating> event does not occur. This example is part of a larger example available in [Walkthrough: Validating Data in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/a4f1d015-2969-430c-8ea2-b612d179c290).  
  
 [!code-csharp[System.Windows.Forms.DataGridViewDataValidation\#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewDataValidation/CS/datavalidation.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewDataValidation\#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewDataValidation/VB/datavalidation.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CellEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellEnter" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> コントロールで現在のセルが変更されたとき、またはこのコントロールが入力フォーカスを受け取ったときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コントロールに入力フォーカスがないし、登録、現在のセルがクリックされたセルでされていない場合、このイベントは、シングル クリックに対して 2 回発生可能性があります。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例を変更するには、このイベントを処理する方法を示しています、 <xref:System.Windows.Forms.DataGridViewCellStyle.SelectionBackColor%2A> 現在のセルのプロパティです。 この例背景色の選択を設定、 <xref:System.Windows.Forms.DataGridView.CellEnter> にリセットし、イベント <xref:System.Drawing.Color.Empty> 上、 <xref:System.Windows.Forms.DataGridView.CellLeave> イベントです。 この例を実行するを含むフォームにコードを貼り付けます、 <xref:System.Windows.Forms.DataGridView> という `dataGridView1` すべてのイベントがイベント ハンドラーに関連付けられていることを確認します。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc\#190](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#190)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc\#190](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#190)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CellErrorTextChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellErrorTextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellErrorTextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellErrorTextChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セルの <see cref="P:System.Windows.Forms.DataGridViewCell.ErrorText" /> プロパティの値が変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.CellErrorTextChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.CellErrorTextChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#291](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#291)]
 [!code-vb[System.Windows.Forms.EventExamples\#291](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#291)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CellErrorTextNeeded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellErrorTextNeededEventHandler CellErrorTextNeeded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellErrorTextNeededEventHandler CellErrorTextNeeded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellErrorTextNeeded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellErrorTextNeededEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セルのエラー テキストが必要なときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Windows.Forms.DataGridView.CellErrorTextNeeded> event occurs only when the <xref:System.Windows.Forms.DataGridView> control <xref:System.Windows.Forms.DataGridView.DataSource%2A> property is set or its <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> property is **languageKeyword tag is not supported!!!!**  
. Handling the <xref:System.Windows.Forms.DataGridView.CellErrorTextNeeded> event is useful when you want to determine the error for a cell depending on its value or state.  
  
 When you handle the <xref:System.Windows.Forms.DataGridView.CellErrorTextNeeded> event and specify error text in the handler, an error glyph appears in the cell unless the <xref:System.Windows.Forms.DataGridView.ShowCellErrors%2A> property is set to **languageKeyword tag is not supported!!!!**  
 or the cell is in edit mode. When the user moves the mouse pointer over the error glyph, the error text appears in a ToolTip.  
  
 The <xref:System.Windows.Forms.DataGridView.CellErrorTextNeeded> event also occurs whenever the value of the <xref:System.Windows.Forms.DataGridViewCell.ErrorText%2A?displayProperty=fullName> property is retrieved.  
  
 You can use the <xref:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex%2A?displayProperty=fullName> and <xref:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex%2A> property to determine the state or value of a cell, and use this information to change or modify the <xref:System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs.ErrorText%2A?displayProperty=fullName> property. This property is initialized with the value of the cell <xref:System.Windows.Forms.DataGridViewCell.ErrorText%2A> property, which the event value overrides.  
  
 Handle the <xref:System.Windows.Forms.DataGridView.CellErrorTextNeeded> event when working with large amounts of data to avoid the performance penalties of setting the cell <xref:System.Windows.Forms.DataGridViewCell.ErrorText%2A> value for multiple cells. For more information, see [Best Practices for Scaling the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/8321a8a6-6340-4fd1-b475-fa090b905aaf).  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example demonstrates how to create error messages for cells without unsharing rows or causing the cell error to be duplicated over all the shared cells.  
  
 [!code-cpp[System.Windows.Forms.DataGridView\_SharedRowScenarios\#20](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView_SharedRowScenarios/CPP/sharedrows.cpp#20)]
 [!code-csharp[System.Windows.Forms.DataGridView\_SharedRowScenarios\#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView_SharedRowScenarios/CS/sharedrows.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridView\_SharedRowScenarios\#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView_SharedRowScenarios/VB/sharedrows.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridView.DataSource" />
        <altmember cref="P:System.Windows.Forms.DataGridView.VirtualMode" />
        <altmember cref="P:System.Windows.Forms.DataGridView.ShowCellErrors" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellErrorTextNeededEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs.ErrorText" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.ErrorText" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnCellErrorTextNeeded(System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="CellFormatting">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellFormattingEventHandler CellFormatting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellFormattingEventHandler CellFormatting" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellFormatting" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellFormattingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セルの内容が、表示用に書式指定されなければならないときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 By default, the <xref:System.Windows.Forms.DataGridView> control will attempt to convert a cell's value into a format suitable for display. For example, it will convert a numerical value into a string for display in a text box cell. You can indicate the formatting convention to use by setting the <xref:System.Windows.Forms.DataGridViewCellStyle.Format%2A> property of the <xref:System.Windows.Forms.DataGridViewCellStyle> returned by properties such as the <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> property.  
  
 If the standard formatting is insufficient, you can customize the formatting by handling the <xref:System.Windows.Forms.DataGridView.CellFormatting>event. This event lets you indicate the exact display value as well as the cell styles, such as background and foreground color, to use for the cell display. This means you can handle this event for any kind of cell formatting, regardless of whether the cell value itself needs formatting.  
  
 The <xref:System.Windows.Forms.DataGridView.CellFormatting> event occurs every time each cell is painted, so you should avoid lengthy processing when handling this event. This event also occurs when the cell <xref:System.Windows.Forms.DataGridViewCell.FormattedValue%2A> is retrieved or its <xref:System.Windows.Forms.DataGridViewCell.GetFormattedValue%2A> method is called.  
  
 When you handle the <xref:System.Windows.Forms.DataGridView.CellFormatting> event, the <xref:System.Windows.Forms.ConvertEventArgs.Value%2A?displayProperty=fullName> property is initialized with the cell value. If you provide custom conversion from the cell value to the display value, set the <xref:System.Windows.Forms.ConvertEventArgs.Value%2A?displayProperty=fullName> property to the converted value, ensuring that the new value is of the type specified by the cell <xref:System.Windows.Forms.DataGridViewCell.FormattedValueType%2A> property. To indicate that no further value formatting is necessary, set the <xref:System.Windows.Forms.DataGridViewCellFormattingEventArgs.FormattingApplied%2A?displayProperty=fullName> property to **languageKeyword tag is not supported!!!!**  
.  
  
 When the event handler completes, if the <xref:System.Windows.Forms.ConvertEventArgs.Value%2A?displayProperty=fullName> is **languageKeyword tag is not supported!!!!**  
 or is not of the correct type, or the <xref:System.Windows.Forms.DataGridViewCellFormattingEventArgs.FormattingApplied%2A?displayProperty=fullName> property is **languageKeyword tag is not supported!!!!**  
, the <xref:System.Windows.Forms.ConvertEventArgs.Value%2A> is formatted using the <xref:System.Windows.Forms.DataGridViewCellStyle.Format%2A>, <xref:System.Windows.Forms.DataGridViewCellStyle.NullValue%2A>, <xref:System.Windows.Forms.DataGridViewCellStyle.DataSourceNullValue%2A>, and <xref:System.Windows.Forms.DataGridViewCellStyle.FormatProvider%2A> properties of the cell style returned by the <xref:System.Windows.Forms.DataGridViewCellFormattingEventArgs.CellStyle%2A?displayProperty=fullName> property, which is initialized using the cell <xref:System.Windows.Forms.DataGridViewCell.InheritedStyle%2A> property.  
  
 Regardless of the value of the <xref:System.Windows.Forms.DataGridViewCellFormattingEventArgs.FormattingApplied%2A?displayProperty=fullName> property, the display properties of the object returned by the <xref:System.Windows.Forms.DataGridViewCellFormattingEventArgs.CellStyle%2A?displayProperty=fullName> property are used to render the cell.  
  
 For more information about custom formatting using the <xref:System.Windows.Forms.DataGridView.CellFormatting> event, see [How to: Customize Data Formatting in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/a6e72c70-ce18-425f-828d-d57be6f96ab6).  
  
 To avoid performance penalties when handling this event, access the cell through the parameters of the event handler rather than accessing the cell directly.  
  
 To customize the conversion of a formatted, user\-specified value into an actual cell value, handle the <xref:System.Windows.Forms.DataGridView.CellParsing> event.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example shows how to handle the <xref:System.Windows.Forms.DataGridView.CellFormatting> event.  
  
 [!code-cpp[System.Windows.Forms.GridViewUnbound\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.GridViewUnbound\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.GridViewUnbound\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridView.DefaultCellStyle" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellStyle.Format" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellStyle.FormatProvider" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellStyle.NullValue" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellStyle.DataSourceNullValue" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.InheritedStyle" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.Value" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.FormattedValue" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.FormattedValueType" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.GetFormattedValue(System.Object,System.Int32,System.Windows.Forms.DataGridViewCellStyle@,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter,System.Windows.Forms.DataGridViewDataErrorContexts)" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellFormattingEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellFormattingEventArgs" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellFormattingEventArgs.FormattingApplied" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellFormattingEventArgs.CellStyle" />
        <altmember cref="P:System.Windows.Forms.ConvertEventArgs.Value" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnCellFormatting(System.Windows.Forms.DataGridViewCellFormattingEventArgs)" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellParsing" />
      </Docs>
    </Member>
    <Member MemberName="CellLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellLeave" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セルが入力フォーカスを失くし、現在のセルでなくなったときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例を変更するには、このイベントを処理する方法を示しています、 <xref:System.Windows.Forms.DataGridViewCellStyle.SelectionBackColor%2A> 現在のセルのプロパティです。 この例背景色の選択を設定、 <xref:System.Windows.Forms.DataGridView.CellEnter> にリセットし、イベント <xref:System.Drawing.Color.Empty> 上、 <xref:System.Windows.Forms.DataGridView.CellLeave> イベントです。 この例を実行するを含むフォームにコードを貼り付けます、 <xref:System.Windows.Forms.DataGridView> という `dataGridView1` すべてのイベントがイベント ハンドラーに関連付けられていることを確認します。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc\#190](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#190)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc\#190](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#190)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CellMouseClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellMouseEventHandler CellMouseClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellMouseEventHandler CellMouseClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellMouseClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellMouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがセルの任意の場所をマウスでクリックするたびに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、マウス ボタンのいずれかを使用して、ユーザーがクリックしたときに発生します。 使用して、 <xref:System.Windows.Forms.MouseEventArgs.Button%2A?displayProperty=fullName> プロパティをどのボタンがクリックされたかを決定します。  
  
 クリックするボタンまたはセル内のリンクなどのセルの内容を検出するために使用して、 <xref:System.Windows.Forms.DataGridView.CellContentClick> イベントです。  
  
 このイベントのハンドラーは、列のインデックスと、マウス ポインターの位置の行インデックスを受け取ります。  
  
 クリック回数を <xref:System.Windows.Forms.DataGridViewCheckBoxCell>, 、このイベントは、チェック ボックスを変更値であるため、現在の値に基づいて予期される値を計算したくない場合に発生、通常は、 <xref:System.Windows.Forms.DataGridView.CellValueChanged> イベント代わりにします。 発生するため、ユーザー指定の値がコミットされた場合にのみ、フォーカスがセルを離れたときに通常発生する必要がありますも処理する、 <xref:System.Windows.Forms.DataGridView.CurrentCellDirtyStateChanged> イベントです。 現在のセルがチェック ボックス セルの場合を呼び出すそのハンドラーで、 <xref:System.Windows.Forms.DataGridView.CommitEdit%2A> メソッドを渡します、 <xref:System.Windows.Forms.DataGridViewDataErrorContexts.Commit> 値。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.CellMouseClick> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.CellMouseClick> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#295](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#295)]
 [!code-vb[System.Windows.Forms.EventExamples\#295](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#295)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MouseEventHandler" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Button" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellContentClick" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCheckBoxCell" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellValueChanged" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CurrentCellDirtyStateChanged" />
        <altmember cref="M:System.Windows.Forms.DataGridView.CommitEdit(System.Windows.Forms.DataGridViewDataErrorContexts)" />
      </Docs>
    </Member>
    <Member MemberName="CellMouseDoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellMouseEventHandler CellMouseDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellMouseEventHandler CellMouseDoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellMouseDoubleClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellMouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> 内のセルがダブルクリックされた場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This event occurs when the user double\-clicks using any of the mouse buttons. Use the <xref:System.Windows.Forms.MouseEventArgs.Button%2A?displayProperty=fullName> property to determine which button was clicked.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.DataGridView.CellMouseDoubleClick> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the <xref:System.Windows.Forms.DataGridView.CellMouseDoubleClick> event.  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#296](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#296)]
 [!code-vb[System.Windows.Forms.EventExamples\#296](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#296)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CellMouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellMouseEventHandler CellMouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellMouseEventHandler CellMouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellMouseDown" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellMouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マウス ポインターがセルの境界線内にあるときに、ユーザーがマウス ボタンを押したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、ユーザーが任意のマウス ボタンを押したときに発生します。 使用して、 <xref:System.Windows.Forms.MouseEventArgs.Button%2A?displayProperty=fullName> プロパティをどのボタンがクリックされたかを決定します。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.CellMouseDown> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.CellMouseDown> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#297](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#297)]
 [!code-vb[System.Windows.Forms.EventExamples\#297](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#297)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CellMouseEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellMouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellMouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellMouseEnter" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マウス ポインターがセルに入ったときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例は、 <xref:System.Windows.Forms.DataGridView.CellMouseEnter> のイメージ列を使用している三目並べゲーム実装内のイベント ハンドラー、 <xref:System.Windows.Forms.DataGridView> コントロールです。 イベント ハンドラーでは、セルの値を使用して、カーソルとに表示されるツールヒントを調べます。  
  
 このコード例に示すは [How to: Work with Image Columns in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/8a37aa75-3c6e-4893-91d0-7a5f34bfe287)です。  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ImageColumn\_TicTacToe\#15](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ImageColumn_TicTacToe/CPP/tictactoe.cpp#15)]
 [!code-csharp[System.Windows.Forms.DataGridView.ImageColumn\_TicTacToe\#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ImageColumn_TicTacToe/CS/tictactoe.cs#15)]
 [!code-vb[System.Windows.Forms.DataGridView.ImageColumn\_TicTacToe\#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ImageColumn_TicTacToe/VB/tictactoe.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CellMouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellMouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellMouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellMouseLeave" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マウス ポインターがセルから離れるときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example shows a <xref:System.Windows.Forms.DataGridView.CellMouseLeave> event handler in a Tic\-Tac\-Toe game implementation that uses image columns in a <xref:System.Windows.Forms.DataGridView> control. The event handler resets the cursor and ToolTip, which are set in a <xref:System.Windows.Forms.DataGridView.CellMouseEnter> event handler.  
  
 This code is part of a larger example shown in [How to: Work with Image Columns in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/8a37aa75-3c6e-4893-91d0-7a5f34bfe287).  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ImageColumn\_TicTacToe\#15](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ImageColumn_TicTacToe/CPP/tictactoe.cpp#15)]
 [!code-csharp[System.Windows.Forms.DataGridView.ImageColumn\_TicTacToe\#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ImageColumn_TicTacToe/CS/tictactoe.cs#15)]
 [!code-vb[System.Windows.Forms.DataGridView.ImageColumn\_TicTacToe\#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ImageColumn_TicTacToe/VB/tictactoe.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CellMouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellMouseEventHandler CellMouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellMouseEventHandler CellMouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellMouseMove" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellMouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マウス ポインターが <see cref="T:System.Windows.Forms.DataGridView" /> コントロール上を移動すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.DataGridView.CellMouseMove> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the <xref:System.Windows.Forms.DataGridView.CellMouseMove> event.  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#300](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#300)]
 [!code-vb[System.Windows.Forms.EventExamples\#300](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#300)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CellMouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellMouseEventHandler CellMouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellMouseEventHandler CellMouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellMouseUp" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellMouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーが、セル上でマウス ボタンを離したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、ユーザーがマウス ボタンのいずれかを離したときに発生します。 使用して、 <xref:System.Windows.Forms.MouseEventArgs.Button%2A?displayProperty=fullName> プロパティをどのボタンがクリックされたかを決定します。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.CellMouseUp> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.CellMouseUp> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#301](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#301)]
 [!code-vb[System.Windows.Forms.EventExamples\#301](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#301)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CellPainting">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellPaintingEventHandler CellPainting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellPaintingEventHandler CellPainting" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellPainting" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellPaintingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セルが描画されなければならないときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 You can handle this event to customize the appearance of cells in the control. You can paint entire cells yourself, or paint specific parts of cells and use the <xref:System.Windows.Forms.DataGridViewCellPaintingEventArgs.PaintBackground%2A?displayProperty=fullName> or <xref:System.Windows.Forms.DataGridViewCellPaintingEventArgs.PaintContent%2A?displayProperty=fullName> methods to paint other parts. You can also use the <xref:System.Windows.Forms.VisualStyles.VisualStyleRenderer> class to paint standard controls using the current theme. For more information, see [Rendering Controls with Visual Styles](http://msdn.microsoft.com/ja-jp/a5b178ba-610e-46c4-a6c0-509c0886a744). If you are using [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)], you also have access to a large library of standard images that you can use with the <xref:System.Windows.Forms.DataGridView> control.  
  
 When handling this event, you should access the cell through the parameters of the event handler, rather than access the cell directly.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example illustrates how to use this event to customize the appearance of all cells in a particular column.  
  
 This code is part of a larger example available in [How to: Customize the Appearance of Cells in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/478b20c9-625c-4116-9c5c-5a16e6f4ec67).  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCellPainting\#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCellPainting/CS/form1.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewCellPainting\#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCellPainting/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellPaintingEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellPaintingEventArgs" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnCellPainting(System.Windows.Forms.DataGridViewCellPaintingEventArgs)" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCell" />
      </Docs>
    </Member>
    <Member MemberName="CellParsing">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellParsingEventHandler CellParsing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellParsingEventHandler CellParsing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellParsing" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellParsingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セルの値が変更された場合にセルが編集モードを終了したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 By default, the <xref:System.Windows.Forms.DataGridView> control will attempt to convert a user\-specified value displayed in a cell to an actual underlying cell value in the type specified by the cell <xref:System.Windows.Forms.DataGridViewCell.ValueType%2A> property. This conversion uses the formatting properties of the cell style returned by the cell <xref:System.Windows.Forms.DataGridViewCell.InheritedStyle%2A> property.  
  
 If the standard conversion does not meet your needs, handle the <xref:System.Windows.Forms.DataGridView.CellParsing> event to provide custom value conversion to the required type.  
  
 Users can enter edit mode using the method specified by the <xref:System.Windows.Forms.DataGridView.EditMode%2A> property, and can leave edit mode, committing any changes to a cell, by moving to another cell or by pressing ENTER. Pressing ESC will revert any changes to the value before it is committed, and the <xref:System.Windows.Forms.DataGridView.CellParsing> event will not occur. The <xref:System.Windows.Forms.DataGridView.CellParsing> event occurs only if the cell value has actually been modified, even if the final value is the same as the original value. It also occurs when the <xref:System.Windows.Forms.DataGridView.CommitEdit%2A> method is called.  
  
 When you handle the <xref:System.Windows.Forms.DataGridView.CellParsing> event, you can convert the value yourself or you can customize the default conversion. For example, you can convert the value yourself using the cell <xref:System.Windows.Forms.DataGridViewCell.ParseFormattedValue%2A> method with type converters of your choosing. Alternatively, you can let the default type converters parse the value, but modify the <xref:System.Windows.Forms.DataGridViewCellStyle.NullValue%2A>, <xref:System.Windows.Forms.DataGridViewCellStyle.DataSourceNullValue%2A>, and <xref:System.Windows.Forms.DataGridViewCellStyle.FormatProvider%2A> properties of the object returned by the <xref:System.Windows.Forms.DataGridViewCellParsingEventArgs.InheritedCellStyle%2A?displayProperty=fullName> property, which is initialized using the cell <xref:System.Windows.Forms.DataGridViewCell.InheritedStyle%2A> property.  
  
 When you convert the value yourself, replace the initial, formatted value of the <xref:System.Windows.Forms.ConvertEventArgs.Value%2A?displayProperty=fullName> property with the converted value in the type specified by the cell <xref:System.Windows.Forms.DataGridViewCell.ValueType%2A> property. To indicate that no further parsing is necessary, set the <xref:System.Windows.Forms.DataGridViewCellParsingEventArgs.ParsingApplied%2A?displayProperty=fullName> property to **languageKeyword tag is not supported!!!!**  
.  
  
 When the event handler completes, if the <xref:System.Windows.Forms.ConvertEventArgs.Value%2A?displayProperty=fullName> is **languageKeyword tag is not supported!!!!**  
 or is not of the correct type, or the <xref:System.Windows.Forms.DataGridViewCellParsingEventArgs.ParsingApplied%2A?displayProperty=fullName> property is **languageKeyword tag is not supported!!!!**  
, the <xref:System.Windows.Forms.ConvertEventArgs.Value%2A> is parsed using the cell <xref:System.Windows.Forms.DataGridViewCell.ParseFormattedValue%2A> method with default type converters. The default implementation of this method parses the value using the <xref:System.Windows.Forms.DataGridViewCellStyle.NullValue%2A>, <xref:System.Windows.Forms.DataGridViewCellStyle.DataSourceNullValue%2A>, and <xref:System.Windows.Forms.DataGridViewCellStyle.FormatProvider%2A> properties of the cell style passed in. If the value is not equal to <xref:System.Windows.Forms.DataGridViewCellStyle.NullValue%2A>, the value is parsed using the <xref:System.Windows.Forms.DataGridViewCellStyle.FormatProvider%2A> property and the type converters passed in.  
  
 To customize the conversion of a cell value into a formatted value for display, handle the <xref:System.Windows.Forms.DataGridView.CellFormatting> event.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example shows how to handle the <xref:System.Windows.Forms.DataGridView.CellParsing> event. It also shows how to use the <xref:System.Windows.Forms.DataGridViewCellParsingEventArgs> class.  
  
 [!code-cpp[System.Windows.Forms.GridViewUnbound\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.GridViewUnbound\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.GridViewUnbound\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.DataGridView.CellParsing" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnCellParsing(System.Windows.Forms.DataGridViewCellParsingEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridView.CommitEdit(System.Windows.Forms.DataGridViewDataErrorContexts)" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellFormatting" />
        <altmember cref="P:System.Windows.Forms.DataGridView.EditMode" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.ValueType" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.InheritedStyle" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.ParseFormattedValue(System.Object,System.Windows.Forms.DataGridViewCellStyle,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter)" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellParsingEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellParsingEventArgs" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellParsingEventArgs.InheritedCellStyle" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellParsingEventArgs.ParsingApplied" />
        <altmember cref="P:System.Windows.Forms.ConvertEventArgs.Value" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellStyle.NullValue" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellStyle.Format" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellStyle.FormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="CellStateChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellStateChangedEventHandler CellStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellStateChangedEventHandler CellStateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellStateChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellStateChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セルが、フォーカスを取得したり失ったりなど、状態が変更したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example illustrates the use of this event.  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc\#135](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#135)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc\#135](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#135)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStateChangedEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStateChangedEventArgs" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellStateChangedEventArgs.StateChanged" />
        <altmember cref="T:System.Windows.Forms.DataGridViewElementStates" />
      </Docs>
    </Member>
    <Member MemberName="CellStyleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellStyleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellStyleChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridViewCell" /> の <see cref="P:System.Windows.Forms.DataGridViewCell.Style" /> プロパティが変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、いずれかのプロパティ、 <xref:System.Windows.Forms.DataGridViewCellStyle> によって返される、 <xref:System.Windows.Forms.DataGridViewCell.Style%2A?displayProperty=fullName> プロパティが新しい値に設定されているとき、または、 <xref:System.Windows.Forms.DataGridViewCell.Style%2A?displayProperty=fullName> 新しいにプロパティが設定されている <xref:System.Windows.Forms.DataGridViewCellStyle> に少なくとも 1 つのプロパティの値が前のセル スタイル オブジェクトとは異なる。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.CellStyleChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.CellStyleChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#305](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#305)]
 [!code-vb[System.Windows.Forms.EventExamples\#305](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#305)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
      </Docs>
    </Member>
    <Member MemberName="CellStyleContentChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellStyleContentChangedEventHandler CellStyleContentChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellStyleContentChangedEventHandler CellStyleContentChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellStyleContentChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellStyleContentChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セルの値の 1 つが変更したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.DataGridView.CellStyleContentChanged> イベント発生時のプロパティの値、 <xref:System.Windows.Forms.DataGridViewCellStyle> 次のプロパティの変更のいずれかによって返されるオブジェクト。  
  
-   <xref:System.Windows.Forms.DataGridViewCell.Style%2A?displayProperty=fullName>  
  
-   <xref:System.Windows.Forms.DataGridViewColumn.DefaultCellStyle%2A?displayProperty=fullName>  
  
-   <xref:System.Windows.Forms.DataGridViewRow.DefaultCellStyle%2A?displayProperty=fullName>  
  
-   <xref:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyle%2A?displayProperty=fullName>  
  
-   <xref:System.Windows.Forms.DataGridView.RowsDefaultCellStyle%2A?displayProperty=fullName>  
  
-   <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A?displayProperty=fullName>  
  
-   <xref:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyle%2A?displayProperty=fullName>  
  
-   <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A?displayProperty=fullName>  
  
 これらのプロパティの 1 つは、別に設定 <xref:System.Windows.Forms.DataGridViewCellStyle>, 、ただし、対応する *PropertyName*`Changed` イベントが発生するが、 <xref:System.Windows.Forms.DataGridView.CellStyleContentChanged> イベントが発生しません。  
  
 行、列、およびセルのプロパティの名前を *PropertyName*`Changed` イベントが始まる"`Row`「,」`Column`"、または"`Cell`"\(たとえば、 <xref:System.Windows.Forms.DataGridView.RowDefaultCellStyleChanged>\)。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.CellStyleContentChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.CellStyleContentChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#306](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#306)]
 [!code-vb[System.Windows.Forms.EventExamples\#306](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#306)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyleContentChangedEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyleContentChangedEventArgs" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnCellStyleContentChanged(System.Windows.Forms.DataGridViewCellStyleContentChangedEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="CellToolTipTextChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellToolTipTextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellToolTipTextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellToolTipTextChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> のセルの <see cref="P:System.Windows.Forms.DataGridViewCell.ToolTipText" /> プロパティ値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.CellToolTipTextChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.CellToolTipTextChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#307](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#307)]
 [!code-vb[System.Windows.Forms.EventExamples\#307](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#307)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CellToolTipTextNeeded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellToolTipTextNeededEventHandler CellToolTipTextNeeded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellToolTipTextNeededEventHandler CellToolTipTextNeeded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellToolTipTextNeeded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellToolTipTextNeededEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セルのツールヒントが必要なときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Windows.Forms.DataGridView.CellToolTipTextNeeded> event occurs only when the <xref:System.Windows.Forms.DataGridView> control <xref:System.Windows.Forms.DataGridView.DataSource%2A> property is set or its <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> property is **languageKeyword tag is not supported!!!!**  
.  
  
 When you handle the <xref:System.Windows.Forms.DataGridView.CellToolTipTextNeeded> event, the ToolTip text you specify in the handler is shown whenever the mouse pointer is over a cell and the control <xref:System.Windows.Forms.DataGridView.ShowCellToolTips%2A> property value is **languageKeyword tag is not supported!!!!**  
. The <xref:System.Windows.Forms.DataGridView.CellToolTipTextNeeded> event is useful when you want to display ToolTips determined by the current state or value of a cell.  
  
 The <xref:System.Windows.Forms.DataGridView.CellToolTipTextNeeded> event also occurs whenever the value of the <xref:System.Windows.Forms.DataGridViewCell.ToolTipText%2A?displayProperty=fullName> property is retrieved, either programmatically or when the mouse pointer enters a cell.  
  
 You can use the <xref:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex%2A?displayProperty=fullName> and <xref:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex%2A> properties to determine the state or value of a cell, and use this information to change or modify the <xref:System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs.ToolTipText%2A?displayProperty=fullName> property. This property is initialized with the value of the cell <xref:System.Windows.Forms.DataGridViewCell.ToolTipText%2A> property, which the event value overrides.  
  
 Handle the <xref:System.Windows.Forms.DataGridView.CellToolTipTextNeeded> event when working with large amounts of data to avoid the performance penalties of setting the cell <xref:System.Windows.Forms.DataGridViewCell.ToolTipText%2A> value for multiple cells. For more information, see [Best Practices for Scaling the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/8321a8a6-6340-4fd1-b475-fa090b905aaf).  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example demonstrates how to use a <xref:System.Windows.Forms.DataGridView.CellToolTipTextNeeded> event handler to display information from hidden columns in a data\-bound <xref:System.Windows.Forms.DataGridView> control.  
  
 [!code-csharp[System.Windows.Forms.DataGridView\_NeededEvents\#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView_NeededEvents/CS/Form1.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridView\_NeededEvents\#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView_NeededEvents/VB/Form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridView.DataSource" />
        <altmember cref="P:System.Windows.Forms.DataGridView.VirtualMode" />
        <altmember cref="P:System.Windows.Forms.DataGridView.ShowCellToolTips" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellToolTipTextNeededEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs.ToolTipText" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.ToolTipText" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnCellToolTipTextNeeded(System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="CellValidated">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellValidated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellValidated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellValidated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セルの検証が終了した後に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Handling this event is useful for post\-validation processing of the cell value.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example demonstrates how to use the <xref:System.Windows.Forms.DataGridView.CellValidated> event to clear out the <xref:System.Windows.Forms.DataGridViewRow.ErrorText%2A> property. In this example, the <xref:System.Windows.Forms.DataGridView.CellValidating> event sets the <xref:System.Windows.Forms.DataGridViewRow.ErrorText%2A> if the user enters data that is not valid into a cell. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridView.SelectionChanged> event.  
  
 [!code-csharp[System.Windows.Forms.DataGridViewSelectionSum\#50](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/CS/form1.cs#50)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectionSum\#50](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/VB/form1.vb#50)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.DataGridView.CellValidating" />
      </Docs>
    </Member>
    <Member MemberName="CellValidating">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellValidatingEventHandler CellValidating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellValidatingEventHandler CellValidating" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellValidating" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellValidatingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セルが入力フォーカスを失い、内容の検証が有効になった場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Canceling this event cancels the changes to the current cell. When this event is canceled in data\-bound mode, the new value is not pushed to the underlying data source. When this event is canceled in virtual mode, the <xref:System.Windows.Forms.DataGridView.CellValuePushed> event will not be raised.  
  
 Handle the <xref:System.Windows.Forms.DataGridView.CellValidated> event to perform post\-validation processing.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example handles the <xref:System.Windows.Forms.DataGridView.CellValidating> event to ensure that only positive integers are entered by the user. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> reference topic.  
  
 [!code-cpp[System.Windows.Forms.DataGridView.\_Virtual\#40](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/CPP/virtual.cpp#40)]
 [!code-csharp[System.Windows.Forms.DataGridView.\_Virtual\#40](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/CS/virtual.cs#40)]
 [!code-vb[System.Windows.Forms.DataGridView.\_Virtual\#40](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/VB/virtual.vb#40)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellValidatingEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellValidatingEventArgs" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellValidated" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCell" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnCellValidating(System.Windows.Forms.DataGridViewCellValidatingEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="CellValueChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellValueChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellValueChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellValueChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セルの値が変更したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Windows.Forms.DataGridView.CellValueChanged?displayProperty=fullName> event occurs when the user\-specified value is committed, which typically occurs when focus leaves the cell.  
  
 In the case of check box cells, however, you will typically want to handle the change immediately. To commit the change when the cell is clicked, you must handle the <xref:System.Windows.Forms.DataGridView.CurrentCellDirtyStateChanged?displayProperty=fullName> event. In the handler, if the current cell is a check box cell, call the <xref:System.Windows.Forms.DataGridView.CommitEdit%2A?displayProperty=fullName> method and pass in the <xref:System.Windows.Forms.DataGridViewDataErrorContexts.Commit> value.  
  
 Rows in the control are not automatically sorted when a cell value is changed. To sort the control when the user modifies a cell, call the <xref:System.Windows.Forms.DataGridView.Sort%2A> method in a <xref:System.Windows.Forms.DataGridView.CellValueChanged> event handler.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example demonstrates how to use the <xref:System.Windows.Forms.DataGridView.CellValueChanged> event to update the values in a balance column of a <xref:System.Windows.Forms.DataGridView>. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridView.SelectionChanged> event.  
  
 [!code-csharp[System.Windows.Forms.DataGridViewSelectionSum\#30](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/CS/form1.cs#30)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectionSum\#30](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/VB/form1.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CellValueNeeded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellValueEventHandler CellValueNeeded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellValueEventHandler CellValueNeeded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellValueNeeded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellValueEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> コントロールの <see cref="P:System.Windows.Forms.DataGridView.VirtualMode" /> プロパティが <see langword="true" /> で、セルを書式設定して表示するために <see cref="T:System.Windows.Forms.DataGridView" /> がセルの値を必要とする場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Use this event in virtual mode to populate cells with data from a custom data store without causing rows to become unshared. For more information about row sharing, see [Best Practices for Scaling the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/8321a8a6-6340-4fd1-b475-fa090b905aaf). For more information about virtual mode, see [Virtual Mode in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/feae5d43-2848-4b1a-8ea7-77085dc415b5).  
  
 To add user\-specified values to your custom data store, handle the <xref:System.Windows.Forms.DataGridView.CellValuePushed> event.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example handles the <xref:System.Windows.Forms.DataGridView.CellValueNeeded> event to populate cells with positive integers. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> reference topic.  
  
 [!code-cpp[System.Windows.Forms.DataGridView.\_Virtual\#10](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/CPP/virtual.cpp#10)]
 [!code-csharp[System.Windows.Forms.DataGridView.\_Virtual\#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/CS/virtual.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridView.\_Virtual\#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/VB/virtual.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridView.VirtualMode" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellValueEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellValueEventArgs" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellValuePushed" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnCellValueNeeded(System.Windows.Forms.DataGridViewCellValueEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="CellValuePushed">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellValueEventHandler CellValuePushed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellValueEventHandler CellValuePushed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellValuePushed" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellValueEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> コントロールの <see cref="P:System.Windows.Forms.DataGridView.VirtualMode" /> プロパティが <see langword="true" /> で、セルの値が変更され、基になるデータ ソースに格納する必要がある場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Use this event in virtual mode to update a custom data store with user\-specified data. Handle the <xref:System.Windows.Forms.DataGridView.CellValueNeeded> event to retrieve values from the data store for display in the control.  
  
 For more information about virtual mode, see [Virtual Mode in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/feae5d43-2848-4b1a-8ea7-77085dc415b5).  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example handles the <xref:System.Windows.Forms.DataGridView.CellValuePushed> event to store updates and new entries in a data store object. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> reference topic.  
  
 [!code-cpp[System.Windows.Forms.DataGridView.\_Virtual\#10](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/CPP/virtual.cpp#10)]
 [!code-csharp[System.Windows.Forms.DataGridView.\_Virtual\#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/CS/virtual.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridView.\_Virtual\#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/VB/virtual.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridView.VirtualMode" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellValueEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellValueEventArgs" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellValueNeeded" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnCellValuePushed(System.Windows.Forms.DataGridViewCellValueEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ClearSelection">
      <MemberSignature Language="C#" Value="public void ClearSelection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearSelection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ClearSelection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>選択されているすべてのセルの選択を解除して、現在の選択を解除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 When this method is called, each column and row's <xref:System.Windows.Forms.DataGridViewBand.Selected%2A> property is set to **languageKeyword tag is not supported!!!!**  
.  
  
   
  
## 例  
 The following code example clears the selection of the <xref:System.Windows.Forms.DataGridView>. To run this example, paste the code into a form that contains a <xref:System.Windows.Forms.DataGridView> named `dataGridView1` and a <xref:System.Windows.Forms.Button> named `clearSelectionButton`, and ensure all events are associated with their event handlers.  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc\#170](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#170)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc\#170](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#170)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearSelection">
      <MemberSignature Language="C#" Value="protected void ClearSelection (int columnIndexException, int rowIndexException, bool selectExceptionElement);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ClearSelection(int32 columnIndexException, int32 rowIndexException, bool selectExceptionElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ClearSelection(System.Int32,System.Int32,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndexException" Type="System.Int32" />
        <Parameter Name="rowIndexException" Type="System.Int32" />
        <Parameter Name="selectExceptionElement" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="columnIndexException">除外される列インデックス。</param>
        <param name="rowIndexException">除外される行インデックス。</param>
        <param name="selectExceptionElement">除外されたセル、行、または列を選択する場合は <see langword="true" />。元の状態を保持する場合は <see langword="false" />。</param>
        <summary>指定されたセルを除いて、選択されているすべてのセルの選択を解除します。オプションで、指定されたセルが選択されるようにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A `rowIndexException` \-1 の値が列ヘッダーを表す、 `columnIndexException` \-1 の値は、行ヘッダーを表します。  
  
 このメソッドは、セル、行、または例外のインデックスで示された列の選択を解除せずに、現在の選択をクリアすると便利です。  
  
 場合、 <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> プロパティの値で個々 のセルを選択でき、このメソッドは、設定、 <xref:System.Windows.Forms.DataGridViewCell.Selected%2A> プロパティには各セルの `false`, 、行と指定された列のセルを除外します。 場合、 <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> プロパティの値により、すべての行または列の選択項目、このメソッドもセット、 <xref:System.Windows.Forms.DataGridViewBand.Selected%2A> 各行または列のプロパティ `false`, 、行または指定されたセルを含む列を除外します。  
  
 除外されたセル、行、または列可能性がありますか、このメソッドが呼び出されると、選択した状態ではありません。 このメソッドではこれが選択される場合、 `selectExceptionElement` パラメーターの値が `true`です。 選択モードによって、行全体または列も選択されてその結果。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndexException" /> が最も大きい列のインデックスより大きくなっています。  
  
 または  
  
 <see cref="P:System.Windows.Forms.DataGridView.SelectionMode" /> が <see cref="F:System.Windows.Forms.DataGridViewSelectionMode.FullRowSelect" /> の場合は、<paramref name="columnIndexException" /> が \-1 未満です。それ以外の場合は、<paramref name="columnIndexException" /> が 0 未満です。  
  
 または  
  
 <paramref name="rowIndexException" /> が最も大きい行のインデックスより大きくなっています。  
  
 または  
  
 <see cref="P:System.Windows.Forms.DataGridView.SelectionMode" /> が <see cref="F:System.Windows.Forms.DataGridViewSelectionMode.FullColumnSelect" /> の場合は、<paramref name="rowIndexException" /> が \-1 未満です。それ以外の場合は、<paramref name="rowIndexException" /> が 0 未満です。</exception>
        <altmember cref="P:System.Windows.Forms.DataGridView.SelectionMode" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.Selected" />
        <altmember cref="P:System.Windows.Forms.DataGridViewBand.Selected" />
      </Docs>
    </Member>
    <Member MemberName="ClipboardCopyMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewClipboardCopyMode ClipboardCopyMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridViewClipboardCopyMode ClipboardCopyMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.ClipboardCopyMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewClipboardCopyMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがセル テキスト値を <see cref="T:System.Windows.Forms.Clipboard" /> にコピーできるかどうか、および行と列のヘッダー テキストが含まれるかどうかを示す値を取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DataGridViewClipboardCopyMode" /> 値のいずれか 1 つ。 既定値は、<see cref="F:System.Windows.Forms.DataGridViewClipboardCopyMode.EnableWithAutoHeaderText" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.DataGridView> コントロールでは、選択した各セルのテキスト表現をクリップボードにコピーします。 この値は文字列またはイメージのセルの値に変換するセル値、 <xref:System.Windows.Forms.DataGridViewImageCell.Description%2A> プロパティです。  
  
 値でクリップボードにコピーされます <xref:System.Windows.Forms.DataFormats.Text>, 、<xref:System.Windows.Forms.DataFormats.UnicodeText>, 、<xref:System.Windows.Forms.DataFormats.Html>, 、および <xref:System.Windows.Forms.DataFormats.CommaSeparatedValue> 形式です。 これらの形式は、メモ帳などのアプリケーションにコンテンツを貼り付ける場合に役立ちます [!INCLUDE[ofprexcel](~/includes/ofprexcel-md.md)], 、および [!INCLUDE[ofprword](~/includes/ofprword-md.md)]です。  
  
 <xref:System.Windows.Forms.DataGridView> コントロールが選択されているすべてのセルを含む最小の四角形に含まれるセルをコピーします。 行と、選択したセルが含まれていない列はコピー元のデータは表示されません。 残りの行と列で選択されていないセルは空白のプレース ホルダーで表されます。 コピー モードと選択モードでは、によってコピーされた行と列のヘッダー値可能性がありますもコピーします。  
  
 ユーザーのコンテンツをコピーするときに、 <xref:System.Windows.Forms.DataGridView> コントロールを追加、 <xref:System.Windows.Forms.DataObject> をクリップボードにします。 このデータ オブジェクトを取得してから、 <xref:System.Windows.Forms.DataGridView.GetClipboardContent%2A> メソッドです。 プログラムを使用して、データ オブジェクトをクリップボードに追加する場合は、このメソッドを呼び出すことができます。  
  
 <xref:System.Windows.Forms.DataGridView.GetClipboardContent%2A>メソッドを呼び出して個々 のセルの値を取得する、 <xref:System.Windows.Forms.DataGridViewCell.GetClipboardContent%2A?displayProperty=fullName> メソッドです。 いずれかまたは両方をコピー元のセルのレイアウトをカスタマイズまたは追加のデータ形式をサポートするために、派生クラスでこれらのメソッドをオーバーライドできます。  
  
 クリップボードの操作とデータ形式の詳細については、次を参照してください。、 <xref:System.Windows.Forms.Clipboard> クラスです。  
  
   
  
## 例  
 次のコード例でのコピーを有効にする、 <xref:System.Windows.Forms.DataGridView> コントロールです。 この例で使用できる例の一部である [How to: Allow Users to Copy Multiple Cells to the Clipboard from the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/fd0403b2-d0e3-4ae0-839c-0f737e1eb4a9)です。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewClipboardDemo\#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewClipboardDemo/CS/datagridviewclipboarddemo.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewClipboardDemo\#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewClipboardDemo/VB/datagridviewclipboarddemo.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">このプロパティの設定時に指定した値が、有効な <see cref="T:System.Windows.Forms.DataGridViewClipboardCopyMode" /> 値ではありません。</exception>
        <altmember cref="T:System.Windows.Forms.Clipboard" />
        <altmember cref="T:System.Windows.Forms.DataGridViewClipboardCopyMode" />
        <altmember cref="M:System.Windows.Forms.DataGridView.GetClipboardContent" />
        <altmember cref="P:System.Windows.Forms.DataGridView.SelectionMode" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.GetClipboardContent(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String)" />
        <altmember cref="P:System.Windows.Forms.DataGridViewImageCell.Description" />
      </Docs>
    </Member>
    <Member MemberName="ColumnAdded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnAdded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnAdded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnAdded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールに列が追加されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.DataGridView.ColumnAdded> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the <xref:System.Windows.Forms.DataGridView.ColumnAdded> event.  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#314](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#314)]
 [!code-vb[System.Windows.Forms.EventExamples\#314](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#314)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnContextMenuStripChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnContextMenuStripChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnContextMenuStripChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnContextMenuStripChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>列の <see cref="P:System.Windows.Forms.DataGridViewColumn.ContextMenuStrip" /> プロパティが変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、<xref:System.Windows.Forms.DataGridView.ColumnContextMenuStripChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.ColumnContextMenuStripChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#315](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#315)]
 [!code-vb[System.Windows.Forms.EventExamples\#315](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#315)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnCount">
      <MemberSignature Language="C#" Value="public int ColumnCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ColumnCount" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.ColumnCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> に表示される列の数を取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DataGridView" /> に表示される列の数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Setting the <xref:System.Windows.Forms.DataGridView.ColumnCount%2A> property to 0 will remove all columns from the <xref:System.Windows.Forms.DataGridView>.  
  
 If <xref:System.Windows.Forms.DataGridView.ColumnCount%2A> is reset to a value less than the current value, columns will be removed from the end of the <xref:System.Windows.Forms.DataGridView.Columns%2A> collection. If <xref:System.Windows.Forms.DataGridView.ColumnCount%2A> is set to a value greater than the current value, columns will be added to the end of the <xref:System.Windows.Forms.DataGridView.Columns%2A> collection.  
  
 This property can be used with the <xref:System.Windows.Forms.DataGridView.RowCount%2A> property to create a simple <xref:System.Windows.Forms.DataGridView> for displaying and editing text.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example demonstrates how to set the<xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A>, <xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A>, <xref:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyle%2A>, <xref:System.Windows.Forms.DataGridView.CellBorderStyle%2A>, <xref:System.Windows.Forms.DataGridView.GridColor%2A>, <xref:System.Windows.Forms.DataGridView.BackgroundColor%2A>, <xref:System.Windows.Forms.DataGridView.RowHeadersVisible%2A>, <xref:System.Windows.Forms.DataGridView.SelectionMode%2A>, <xref:System.Windows.Forms.DataGridView.ColumnCount%2A>, and <xref:System.Windows.Forms.DataGridView.MultiSelect%2A> properties. In addition, the code example demonstrates how to set the <xref:System.Windows.Forms.DataGridViewColumn.Name%2A?displayProperty=fullName> and <xref:System.Windows.Forms.DataGridViewColumn.DefaultCellStyle%2A?displayProperty=fullName> properties. To run this example, paste the code into a form that contains a <xref:System.Windows.Forms.DataGridView> named `dataGridView1`, and then call the `SetUpDataGridView` method from the form's constructor or <xref:System.Windows.Forms.Form.Load> event handler. Ensure all events are associated with their event handlers.  
  
 [!code-cpp[System.Windows.Forms.GridViewUnbound\#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CPP/form1.cpp#5)]
 [!code-csharp[System.Windows.Forms.GridViewUnbound\#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CS/form1.cs#5)]
 [!code-vb[System.Windows.Forms.GridViewUnbound\#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">このプロパティの設定時に指定された値が 0 未満です。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティを設定したときに、<see cref="P:System.Windows.Forms.DataGridView.DataSource" /> プロパティが設定されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="ColumnDataPropertyNameChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnDataPropertyNameChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnDataPropertyNameChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnDataPropertyNameChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>列の <see cref="P:System.Windows.Forms.DataGridViewColumn.DataPropertyName" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.DataGridView.ColumnDataPropertyNameChanged> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the <xref:System.Windows.Forms.DataGridView.ColumnDataPropertyNameChanged> event.  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#316](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#316)]
 [!code-vb[System.Windows.Forms.EventExamples\#316](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#316)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnDefaultCellStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnDefaultCellStyleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnDefaultCellStyleChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>列の <see cref="P:System.Windows.Forms.DataGridViewBand.DefaultCellStyle" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、いずれかのプロパティ、 <xref:System.Windows.Forms.DataGridViewCellStyle> によって返される、 <xref:System.Windows.Forms.DataGridViewBand.DefaultCellStyle%2A> プロパティまたは列が新しい値に設定されて、 <xref:System.Windows.Forms.DataGridViewBand.DefaultCellStyle%2A> を新しい列のプロパティが設定されて <xref:System.Windows.Forms.DataGridViewCellStyle> に少なくとも 1 つのプロパティの値が前のセル スタイル オブジェクトと異なる。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.ColumnDefaultCellStyleChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.ColumnDefaultCellStyleChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#317](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#317)]
 [!code-vb[System.Windows.Forms.EventExamples\#317](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#317)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
      </Docs>
    </Member>
    <Member MemberName="ColumnDisplayIndexChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnDisplayIndexChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnDisplayIndexChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnDisplayIndexChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>列の <see cref="P:System.Windows.Forms.DataGridViewColumn.DisplayIndex" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.DataGridView.ColumnDisplayIndexChanged> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the <xref:System.Windows.Forms.DataGridView.ColumnDisplayIndexChanged> event.  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#318](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#318)]
 [!code-vb[System.Windows.Forms.EventExamples\#318](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#318)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnDividerDoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventHandler ColumnDividerDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventHandler ColumnDividerDoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnDividerDoubleClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>2 列間の区分線をダブルクリックしたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントを使用して、ユーザーが列の区分線をダブルクリックしたときに発生する自動サイズ変更動作をカスタマイズすることができます。 たとえば、プログラムで現在表示されている行の内容のみに基づいて列のサイズを変更するには、このイベントを処理する、大量の行を使用する場合は、既定の動作で、パフォーマンスに影響を回避します。  
  
 列 <xref:System.Windows.Forms.DataGridViewColumn.DividerWidth%2A> プロパティは、ユーザーがダブルクリックできる領域の範囲外です。 このプロパティを使用して区分線の幅を増加すると場合、ユーザーは、区分線と隣接する列間の境界をダブルクリックすると、このイベントが発生します。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.ColumnDividerDoubleClick> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.ColumnDividerDoubleClick> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#319](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#319)]
 [!code-vb[System.Windows.Forms.EventExamples\#319](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#319)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnDividerWidthChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnDividerWidthChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnDividerWidthChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnDividerWidthChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridViewColumn.DividerWidth" /> プロパティが変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.DataGridView.ColumnDividerWidthChanged> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the <xref:System.Windows.Forms.DataGridView.ColumnDividerWidthChanged> event.  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#320](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#320)]
 [!code-vb[System.Windows.Forms.EventExamples\#320](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#320)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnHeaderCellChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnHeaderCellChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnHeaderCellChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnHeaderCellChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>列のヘッダー セルの内容を変更したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.DataGridView.ColumnHeaderCellChanged> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the <xref:System.Windows.Forms.DataGridView.ColumnHeaderCellChanged> event.  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#323](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#323)]
 [!code-vb[System.Windows.Forms.EventExamples\#323](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#323)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnHeaderMouseClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellMouseEventHandler ColumnHeaderMouseClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellMouseEventHandler ColumnHeaderMouseClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnHeaderMouseClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellMouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>列ヘッダーがクリックされたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 When a column heading is clicked in a <xref:System.Windows.Forms.DataGridView>, the default behavior is to order the grid rows based on the clicked column, or to reverse the sort order if the grid is already sorted by the clicked column. The following code example demonstrates how to use this event to perform a programmatic sort that emulates the default behavior of clicking a <xref:System.Windows.Forms.DataGridViewColumnHeaderCell> when the default behavior has been disabled. In this example, the<xref:System.Windows.Forms.DataGridView.SelectionMode%2A> is set to <xref:System.Windows.Forms.DataGridViewSelectionMode.ColumnHeaderSelect>, so clicking the <xref:System.Windows.Forms.DataGridViewColumnHeaderCell> selects the contents of the column. For the example code to function as intended, the default column header click behavior needs to be changed each time the data is loaded into the <xref:System.Windows.Forms.DataGridView>. Add a <xref:System.Windows.Forms.DataGridView.DataBindingComplete> event handler to provide the code that changes the default behavior. To run this example, paste the code into a form that contains a <xref:System.Windows.Forms.DataGridView> named `dataGridView1` and ensure that all events are associated with their event handlers.  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc\#160](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#160)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc\#160](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#160)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnHeaderMouseDoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellMouseEventHandler ColumnHeaderMouseDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellMouseEventHandler ColumnHeaderMouseDoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnHeaderMouseDoubleClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellMouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>列ヘッダーがダブルクリックされたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.DataGridView.ColumnHeaderMouseDoubleClick> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the <xref:System.Windows.Forms.DataGridView.ColumnHeaderMouseDoubleClick> event.  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#322](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#322)]
 [!code-vb[System.Windows.Forms.EventExamples\#322](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#322)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnHeadersBorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewHeaderBorderStyle ColumnHeadersBorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridViewHeaderBorderStyle ColumnHeadersBorderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewHeaderBorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>列ヘッダーに適用された境界線スタイルを取得します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DataGridViewHeaderBorderStyle" /> 値の 1 つ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyle%2A> プロパティが以外の値に設定されて <xref:System.Windows.Forms.DataGridViewHeaderBorderStyle.Single>, 、 <xref:System.Windows.Forms.DataGridView.GridColor%2A> プロパティは、システム カラーをする必要があります。  
  
 このプロパティを設定することはできません、 <xref:System.Windows.Forms.DataGridViewHeaderBorderStyle.Custom> 、これは読み取り専用の値を示す値を使用すると、罫線のスタイルがカスタマイズされていること、 <xref:System.Windows.Forms.DataGridView.AdvancedColumnHeadersBorderStyle%2A> プロパティです。  
  
> [!NOTE]
>  経由でアプリケーションの visual スタイルが有効になっている場合、 <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=fullName> メソッドおよび <xref:System.Windows.Forms.DataGridView.EnableHeadersVisualStyles%2A> プロパティは、 `true`, 、列ヘッダーは、現在のテーマを使用して描画されます。 ここでの値、 <xref:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyle%2A> を除くすべての列ヘッダーのプロパティは、 <xref:System.Windows.Forms.DataGridView.TopLeftHeaderCell%2A>, 、テーマがない適用します。  
  
   
  
## 例  
 次のコード例では、設定、 <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A>, 、<xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A>, 、<xref:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyle%2A>, 、<xref:System.Windows.Forms.DataGridView.CellBorderStyle%2A>, 、<xref:System.Windows.Forms.DataGridView.GridColor%2A>, 、<xref:System.Windows.Forms.DataGridView.BackgroundColor%2A>, 、<xref:System.Windows.Forms.DataGridView.RowHeadersVisible%2A>, 、<xref:System.Windows.Forms.DataGridView.SelectionMode%2A>, 、<xref:System.Windows.Forms.DataGridView.ColumnCount%2A>, 、および <xref:System.Windows.Forms.DataGridView.MultiSelect%2A> プロパティです。 さらに、コードの例では設定する、 <xref:System.Windows.Forms.DataGridViewColumn.Name%2A?displayProperty=fullName> と <xref:System.Windows.Forms.DataGridViewColumn.DefaultCellStyle%2A?displayProperty=fullName> プロパティです。 この例を実行するを含むフォームにコードを貼り付けます、 <xref:System.Windows.Forms.DataGridView> という名前`dataGridView1`, 、まず、 `SetUpDataGridView` フォームのコンス トラクターからのメソッドまたは <xref:System.Windows.Forms.Form.Load> イベント ハンドラーです。 すべてのイベントがイベント ハンドラーに関連付けられていることを確認します。  
  
 [!code-cpp[System.Windows.Forms.GridViewUnbound\#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CPP/form1.cpp#5)]
 [!code-csharp[System.Windows.Forms.GridViewUnbound\#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CS/form1.cs#5)]
 [!code-vb[System.Windows.Forms.GridViewUnbound\#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">このプロパティの設定時に指定された値が有効な <see cref="T:System.Windows.Forms.DataGridViewHeaderBorderStyle" /> 値ではありません。</exception>
        <exception cref="T:System.ArgumentException">このプロパティの設定時に指定された値が <see cref="F:System.Windows.Forms.DataGridViewHeaderBorderStyle.Custom" /> です。</exception>
        <altmember cref="T:System.Windows.Forms.DataGridViewHeaderBorderStyle" />
        <altmember cref="P:System.Windows.Forms.DataGridView.RowHeadersBorderStyle" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
        <altmember cref="P:System.Windows.Forms.DataGridView.EnableHeadersVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="ColumnHeadersBorderStyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ColumnHeadersBorderStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ColumnHeadersBorderStyleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyleChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyle" /> プロパティが変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyleChanged> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the <xref:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyleChanged> event.  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#262](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#262)]
 [!code-vb[System.Windows.Forms.EventExamples\#262](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#262)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnHeadersDefaultCellStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewCellStyle ColumnHeadersDefaultCellStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewCellStyle ColumnHeadersDefaultCellStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>既定の列ヘッダーのスタイルを取得または設定します。</summary>
        <value>既定の列ヘッダー スタイルを表す <see cref="T:System.Windows.Forms.DataGridViewCellStyle" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定値 <xref:System.Windows.Forms.DataGridViewCellStyle> これによって返されるプロパティには、次の初期プロパティ値。  
  
|`DataGridViewCellStyle` プロパティ|既定値|  
|-----------------------------------|---------|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.BackColor%2A>|<xref:System.Drawing.SystemBrushes.Control%2A?displayProperty=fullName> プロパティの値。|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.ForeColor%2A>|<xref:System.Drawing.SystemBrushes.WindowText%2A?displayProperty=fullName> プロパティの値。|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.SelectionBackColor%2A>|<xref:System.Drawing.SystemBrushes.Highlight%2A?displayProperty=fullName> プロパティの値。|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.SelectionForeColor%2A>|<xref:System.Drawing.SystemBrushes.HighlightText%2A?displayProperty=fullName> プロパティの値。|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.Font%2A>|<xref:System.Windows.Forms.DataGridView.Font%2A> プロパティの値。|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.Alignment%2A>|<xref:System.Windows.Forms.DataGridViewContentAlignment.MiddleLeft?displayProperty=fullName>|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A>|<xref:System.Windows.Forms.DataGridViewTriState.True?displayProperty=fullName>|  
  
 これらの値が自動的に値を使用して設定をオーバーライド、 <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> プロパティです。 継承する列ヘッダーを強制的に、 <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> の値に値を設定する必要があります、 <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A> の既定値にオブジェクトが示されている、 <xref:System.Windows.Forms.DataGridViewCellStyle> クラスです。  
  
 セル スタイルの継承の詳細については、次を参照してください。 [Cell Styles in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/dbb75ed6-8804-4232-8382-f9920c2e380c)します。  
  
 Visual スタイルが有効になっている場合、 <xref:System.Windows.Forms.DataGridView.EnableHeadersVisualStyles%2A> に設定されている `true`, を除くすべてのヘッダー セル、 <xref:System.Windows.Forms.DataGridView.TopLeftHeaderCell%2A> 、現在のテーマを使って描画されますと <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A> 値は無視されます。  
  
   
  
## 例  
 次のコード例では、設定、 <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A>, 、<xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A>, 、<xref:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyle%2A>, 、<xref:System.Windows.Forms.DataGridView.CellBorderStyle%2A>, 、<xref:System.Windows.Forms.DataGridView.GridColor%2A>, 、<xref:System.Windows.Forms.DataGridView.BackgroundColor%2A>, 、<xref:System.Windows.Forms.DataGridView.RowHeadersVisible%2A>, 、<xref:System.Windows.Forms.DataGridView.SelectionMode%2A>, 、<xref:System.Windows.Forms.DataGridView.ColumnCount%2A>, 、および <xref:System.Windows.Forms.DataGridView.MultiSelect%2A> プロパティです。 さらに、コードの例では設定する、 <xref:System.Windows.Forms.DataGridViewColumn.Name%2A?displayProperty=fullName> と <xref:System.Windows.Forms.DataGridViewColumn.DefaultCellStyle%2A?displayProperty=fullName> プロパティです。 この例を実行するを含むフォームにコードを貼り付けます、 <xref:System.Windows.Forms.DataGridView> という名前 `dataGridView1`, 、まず、 `SetUpDataGridView` フォームのコンス トラクターからのメソッドまたは <xref:System.Windows.Forms.Form.Load> イベント ハンドラーです。 すべてのイベントがイベント ハンドラーに関連付けられていることを確認します。  
  
 [!code-cpp[System.Windows.Forms.GridViewUnbound\#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CPP/form1.cpp#5)]
 [!code-csharp[System.Windows.Forms.GridViewUnbound\#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CS/form1.cs#5)]
 [!code-vb[System.Windows.Forms.GridViewUnbound\#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
      </Docs>
    </Member>
    <Member MemberName="ColumnHeadersDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ColumnHeadersDefaultCellStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ColumnHeadersDefaultCellStyleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyleChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This event occurs when any properties of the <xref:System.Windows.Forms.DataGridViewCellStyle> returned by the <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A> property is set to a new value or when the <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A> property is set to a new <xref:System.Windows.Forms.DataGridViewCellStyle> with at least one property value different than the previous cell style object.  
  
   
  
## 例  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyleChanged> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyleChanged> event.  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#263](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#263)]
 [!code-vb[System.Windows.Forms.EventExamples\#263](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#263)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
      </Docs>
    </Member>
    <Member MemberName="ColumnHeadersHeight">
      <MemberSignature Language="C#" Value="public int ColumnHeadersHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ColumnHeadersHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.ColumnHeadersHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>列ヘッダー行の高さをピクセル単位で取得または設定します。</summary>
        <value>列ヘッダーを含む行の高さ \(ピクセル単位\)。 既定値は 23 です。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">このプロパティを設定するときに指定された値が、最小の高さ 4 ピクセルより小さいか、最大の高さ 32768 ピクセルよりも大きくなっています。</exception>
      </Docs>
    </Member>
    <Member MemberName="ColumnHeadersHeightChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ColumnHeadersHeightChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ColumnHeadersHeightChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnHeadersHeightChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridView.ColumnHeadersHeight" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.ColumnHeadersHeightChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.ColumnHeadersHeightChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#264](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#264)]
 [!code-vb[System.Windows.Forms.EventExamples\#264](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#264)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnHeadersHeightSizeMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode ColumnHeadersHeightSizeMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode ColumnHeadersHeightSizeMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>列ヘッダーの高さが調整可能かどうか、およびヘッダーの内容に合わせてユーザーが調整できるか自動的に調整できるかを示す値を取得または設定します。</summary>
        <value>列ヘッダーの行の高さを調整できるモードを示す <see cref="T:System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode" /> 値。 既定値は、<see cref="F:System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.EnableResizing" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティに設定すると <xref:System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize>, 、ユーザーが列ヘッダーの高さを調整することはできません。  
  
 列ヘッダーの高さをプログラムで調整する、 <xref:System.Windows.Forms.DataGridView.AutoResizeColumnHeadersHeight%2A> メソッドまたはセット、 <xref:System.Windows.Forms.DataGridView.ColumnHeadersHeight%2A> プロパティです。  
  
 行ヘッダーのサイズ変更モードを設定するには、使用、 <xref:System.Windows.Forms.DataGridView.RowHeadersWidthSizeMode%2A> プロパティです。  
  
 セルに対して有効セル スタイルに列ヘッダーのサイズが変更されるときに、複数の行に折り返すセルの内容を <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> のプロパティの値 <xref:System.Windows.Forms.DataGridViewTriState.True>です。  
  
 ヘッダーのサイズ変更の詳細については、次を参照してください。 [Sizing Options in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/a5620a9c-0d06-41e3-8934-c25ddb16c9e6)します。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.DataGridView> コントロールはダブル バッファリングをサポートしていません。 場合 <xref:System.Windows.Forms.Control.DoubleBuffered%2A> に設定されている `true` 派生で <xref:System.Windows.Forms.DataGridView> コントロール、行、列、またはヘッダーのサイズを変更する場合、または列の並べ替えは、ユーザーに視覚的なフィードバックは受信しません。  
  
   
  
## 例  
 次のコード例では、このプロパティを使用する方法を示しています、 <xref:System.Windows.Forms.DataGridView> 、主に表示を目的とします。 この例ではいくつかの方法でコントロールの視覚的な外観をカスタマイズし、コントロールが対話機能を制限を設定します。 この例で使用できる例の一部である、 <xref:System.Windows.Forms.DataGridViewCellStyle> クラスの概要です。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewStyleDemo\#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/CS/form1.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo\#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">このプロパティの設定時に指定した値が、有効な <see cref="T:System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode" /> 値ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ColumnHeadersHeightSizeModeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewAutoSizeModeEventHandler ColumnHeadersHeightSizeModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewAutoSizeModeEventHandler ColumnHeadersHeightSizeModeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeModeChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAutoSizeModeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeMode" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeModeChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeModeChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#265](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#265)]
 [!code-vb[System.Windows.Forms.EventExamples\#265](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#265)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnHeadersVisible">
      <MemberSignature Language="C#" Value="public bool ColumnHeadersVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ColumnHeadersVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.ColumnHeadersVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>列ヘッダー行が表示されるかどうかを示す値を取得または設定します。</summary>
        <value>列ヘッダーを表示する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 If the <xref:System.Windows.Forms.DataGridView.ColumnHeadersVisible%2A> property is **languageKeyword tag is not supported!!!!**  
, a column whose <xref:System.Windows.Forms.DataGridViewColumn.Resizable%2A> property is set to **languageKeyword tag is not supported!!!!**  
 can still be resized in the user interface \(UI\) by clicking with the mouse cursor anywhere along the right border of the column to be resized.  
  
   
  
## 例  
 The following code example populates an unbound <xref:System.Windows.Forms.DataGridView> control and sets the <xref:System.Windows.Forms.DataGridView.ColumnHeadersVisible%2A> property to **languageKeyword tag is not supported!!!!**  
 to ensure that column headers are displayed.  
  
 [!code-cpp[System.Windows.Forms.GridViewAutoSize\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewAutoSize/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.GridViewAutoSize\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewAutoSize/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.GridViewAutoSize\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewAutoSize/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このプロパティの設定時に指定した値は <see langword="false" /> で、1 つ以上の列には <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.ColumnHeader" /> の <see cref="P:System.Windows.Forms.DataGridViewColumn.InheritedAutoSizeMode" /> プロパティ値が存在します。</exception>
      </Docs>
    </Member>
    <Member MemberName="ColumnMinimumWidthChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnMinimumWidthChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnMinimumWidthChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnMinimumWidthChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>列の <see cref="P:System.Windows.Forms.DataGridViewColumn.MinimumWidth" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.DataGridView.ColumnMinimumWidthChanged> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the <xref:System.Windows.Forms.DataGridView.ColumnMinimumWidthChanged> event.  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#324](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#324)]
 [!code-vb[System.Windows.Forms.EventExamples\#324](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#324)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnNameChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnNameChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnNameChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnNameChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>列の <see cref="P:System.Windows.Forms.DataGridViewColumn.Name" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.DataGridView.ColumnNameChanged> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the <xref:System.Windows.Forms.DataGridView.ColumnNameChanged> event.  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#325](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#325)]
 [!code-vb[System.Windows.Forms.EventExamples\#325](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#325)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnRemoved">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnRemoved;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnRemoved" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnRemoved" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールから列が削除されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.ColumnRemoved> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.ColumnRemoved> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#326](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#326)]
 [!code-vb[System.Windows.Forms.EventExamples\#326](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#326)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Columns">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewColumnCollection Columns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewColumnCollection Columns" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.Columns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataGridViewColumnCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールのすべての列を含むコレクションを取得します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DataGridView" /> コントロールのすべての列を格納している <see cref="T:System.Windows.Forms.DataGridViewColumnCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 By using the <xref:System.Windows.Forms.DataGridViewColumnCollection> returned by this property, you can add columns, remove columns, and obtain a count of the columns contained in the <xref:System.Windows.Forms.DataGridView> control. For more information, see <xref:System.Windows.Forms.DataGridViewColumnCollection>.  
  
   
  
## 例  
 The following code example demonstrates how to create an unbound <xref:System.Windows.Forms.DataGridView>; set the <xref:System.Windows.Forms.DataGridView.ColumnHeadersVisible%2A>, <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A>, and <xref:System.Windows.Forms.DataGridView.ColumnCount%2A> properties; and use the <xref:System.Windows.Forms.DataGridView.Rows%2A> and <xref:System.Windows.Forms.DataGridView.Columns%2A> properties. It also demonstrates how to use a version of the <xref:System.Windows.Forms.DataGridView.AutoResizeColumnHeadersHeight%2A> and <xref:System.Windows.Forms.DataGridView.AutoResizeRows%2A> methods to properly size the column headers and the rows. To run this example, paste the following code into a form that contains a <xref:System.Windows.Forms.DataGridView> named `dataGridView1` and a button named `Button1`, and then call the `InitializeDataGridView` method from the form's constructor or <xref:System.Windows.Forms.Form.Load> event handler. Ensure all events are connected with their event handlers.  
  
 [!code-cpp[System.Windows.Forms.GridViewAutoSize\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewAutoSize/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.GridViewAutoSize\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewAutoSize/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.GridViewAutoSize\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewAutoSize/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewColumnCollection" />
        <altmember cref="T:System.Windows.Forms.DataGridViewColumn" />
      </Docs>
    </Member>
    <Member MemberName="ColumnSortModeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnSortModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnSortModeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnSortModeChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>列の <see cref="P:System.Windows.Forms.DataGridViewColumn.SortMode" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.DataGridView.ColumnSortModeChanged> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the <xref:System.Windows.Forms.DataGridView.ColumnSortModeChanged> event.  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#327](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#327)]
 [!code-vb[System.Windows.Forms.EventExamples\#327](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#327)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnStateChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnStateChangedEventHandler ColumnStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnStateChangedEventHandler ColumnStateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnStateChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnStateChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>列が、フォーカスを取得したり失ったりなど、状態を変更したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 次の列のプロパティのいずれかの値が変更された場合、このイベントが発生した、 <xref:System.Windows.Forms.DataGridViewColumn> コントロールで。  
  
-   <xref:System.Windows.Forms.DataGridViewBand.Displayed%2A>  
  
-   <xref:System.Windows.Forms.DataGridViewColumn.Frozen%2A>  
  
-   <xref:System.Windows.Forms.DataGridViewColumn.ReadOnly%2A>  
  
-   <xref:System.Windows.Forms.DataGridViewColumn.Resizable%2A>  
  
-   <xref:System.Windows.Forms.DataGridViewBand.Selected%2A>  
  
-   <xref:System.Windows.Forms.DataGridViewColumn.Visible%2A>  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.ColumnStateChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.ColumnStateChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#328](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#328)]
 [!code-vb[System.Windows.Forms.EventExamples\#328](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#328)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewColumnStateChangedEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewColumnStateChangedEventArgs" />
        <altmember cref="T:System.Windows.Forms.DataGridViewColumn" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnColumnStateChanged(System.Windows.Forms.DataGridViewColumnStateChangedEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ColumnToolTipTextChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnToolTipTextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnToolTipTextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnToolTipTextChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> の列の <see cref="P:System.Windows.Forms.DataGridViewColumn.ToolTipText" /> プロパティ値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.ColumnToolTipTextChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.ColumnToolTipTextChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#329](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#329)]
 [!code-vb[System.Windows.Forms.EventExamples\#329](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#329)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnWidthChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnWidthChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnWidthChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnWidthChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>列の <see cref="P:System.Windows.Forms.DataGridViewColumn.Width" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example illustrates the use of this event. This example is part of a larger example available in [How to: Customize the Appearance of Rows in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/d40b53d2-7e7c-48c5-8570-6e79d15c3bbb).  
  
 [!code-csharp[System.Windows.Forms.DataGridViewRowPainting\#18](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRowPainting/CS/datagridviewrowpainting.cs#18)]
 [!code-vb[System.Windows.Forms.DataGridViewRowPainting\#18](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRowPainting/VB/datagridviewrowpainting.vb#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommitEdit">
      <MemberSignature Language="C#" Value="public bool CommitEdit (System.Windows.Forms.DataGridViewDataErrorContexts context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CommitEdit(valuetype System.Windows.Forms.DataGridViewDataErrorContexts context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.CommitEdit(System.Windows.Forms.DataGridViewDataErrorContexts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Windows.Forms.DataGridViewDataErrorContexts" />
      </Parameters>
      <Docs>
        <param name="context">エラーが発生する可能性のあるコンテキストを指定する <see cref="T:System.Windows.Forms.DataGridViewDataErrorContexts" /> 値のビットごとの組み合わせ。</param>
        <summary>編集モードを終了せずに、現在のセルの変更をデータ キャッシュにコミットします。</summary>
        <returns>変更がコミットされた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method attempts to convert the formatted, user\-specified value to the underlying cell data type. To do this, it raises the <xref:System.Windows.Forms.DataGridView.CellParsing> event, which you can handle to customize the type conversion. Otherwise, default type converters are used. Conversion errors may result in an exception if the <xref:System.Windows.Forms.DataGridView.DataError> event is not handled to prevent it. If the value is successfully converted, it is committed to the data store, raising the <xref:System.Windows.Forms.DataGridView.CellValuePushed> event for non\-data\-bound cells when the <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> property value is **languageKeyword tag is not supported!!!!**  
. If the value is successfully committed, the <xref:System.Windows.Forms.DataGridView.CellValueChanged> event occurs.  
  
   
  
## 例  
 The following code example calls the <xref:System.Windows.Forms.DataGridView.CommitEdit%2A> method within a <xref:System.Windows.Forms.DataGridView.CurrentCellDirtyStateChanged> event handler to raise the <xref:System.Windows.Forms.DataGridView.CellValueChanged> event. This code example is part of a larger example provided in [How to: Disable Buttons in a Button Column in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/5c344d01-013a-4a6b-8f8d-62ec9321d81e).  
  
 [!code-csharp[System.Windows.Forms.DataGridView.DisabledButtons\#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.DisabledButtons/CS/form1.cs#5)]
 [!code-vb[System.Windows.Forms.DataGridView.DisabledButtons\#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.DisabledButtons/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">セル値をコミットできませんでした。また、<see cref="E:System.Windows.Forms.DataGridView.DataError" /> イベントのハンドラーがないか、ハンドラーが <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> プロパティを <see langword="true" /> に設定しています。</exception>
        <altmember cref="T:System.Windows.Forms.DataGridViewDataErrorContexts" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellParsing" />
        <altmember cref="E:System.Windows.Forms.DataGridView.DataError" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellValuePushed" />
        <altmember cref="P:System.Windows.Forms.DataGridView.VirtualMode" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellValueChanged" />
        <altmember cref="Overload:System.Windows.Forms.DataGridView.EndEdit" />
      </Docs>
    </Member>
    <Member MemberName="CreateAccessibilityInstance">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.AccessibleObject CreateAccessibilityInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Forms.AccessibleObject CreateAccessibilityInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.CreateAccessibilityInstance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> の新しいユーザー補助オブジェクトを作成します。</summary>
        <returns>
          <see cref="T:System.Windows.Forms.DataGridView.DataGridViewAccessibleObject" /> の新しい <see cref="T:System.Windows.Forms.DataGridView" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateColumnsInstance">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.DataGridViewColumnCollection CreateColumnsInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.DataGridViewColumnCollection CreateColumnsInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.CreateColumnsInstance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>新しい <see cref="T:System.Windows.Forms.DataGridViewColumnCollection" /> を作成して返します。</summary>
        <returns>空の <see cref="T:System.Windows.Forms.DataGridViewColumnCollection" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateControlsInstance">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.Control.ControlCollection CreateControlsInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Forms.Control/ControlCollection CreateControlsInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.CreateControlsInstance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control+ControlCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView.DataGridViewControlCollection" /> 型にキャストされる新しい <see cref="T:System.Windows.Forms.Control.ControlCollection" /> を作成して返します。</summary>
        <returns>空の <see cref="T:System.Windows.Forms.Control.ControlCollection" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method is called by the <xref:System.Windows.Forms.Control.Controls%2A> property to initialize its value.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRowsInstance">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.DataGridViewRowCollection CreateRowsInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.DataGridViewRowCollection CreateRowsInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.CreateRowsInstance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>新しい <see cref="T:System.Windows.Forms.DataGridViewRowCollection" /> を作成して返します。</summary>
        <returns>空の <see cref="T:System.Windows.Forms.DataGridViewRowCollection" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentCell">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewCell CurrentCell { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewCell CurrentCell" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.CurrentCell" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCell</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在アクティブなセルを取得または設定します。</summary>
        <value>現在のセルを表す <see cref="T:System.Windows.Forms.DataGridViewCell" />。現在のセルがない場合は <see langword="null" />。 既定では 1 列目の最初のセルになり、コントロールにセルが存在しない場合は <see langword="null" /> になります。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 現在のセルとセルを設定すると、現在表示されていない場合は、ビューにスクロールされます。 現在のセルでは、非表示の行または列のヘッダー セル、無効なセルまたはセルをすることはできません。  
  
 このプロパティを設定できます `null` を一時的にフォーカス四角形を削除しますが、コントロールがフォーカスを受け取るし、このプロパティの値は `null`, の値に自動的に設定されている、 <xref:System.Windows.Forms.DataGridView.FirstDisplayedCell%2A>プロパティです。  
  
 このプロパティの値を変更すると、 <xref:System.Windows.Forms.DataGridView.SelectionChanged> イベントが発生する前に、 <xref:System.Windows.Forms.DataGridView.CurrentCellChanged> イベントです。 どの <xref:System.Windows.Forms.DataGridView.SelectionChanged> イベント ハンドラーへのアクセス、 <xref:System.Windows.Forms.DataGridView.CurrentCell%2A> 現時点でプロパティがその前の値を取得します。  
  
 バインドすると、 <xref:System.Windows.Forms.DataGridView> 、外部データ ソースにこのプロパティは、既定値にリセットします。  
  
   
  
## 例  
 次のコード例を設定して並べ替えの後の現在のセルが表示されていることを確認する方法を示しています、 <xref:System.Windows.Forms.DataGridView.FirstDisplayedCell%2A> を使用してプロパティのセルを取得、 <xref:System.Windows.Forms.DataGridView.CurrentCell%2A> プロパティです。 このコードは、バインドされていないでのみ機能 <xref:System.Windows.Forms.DataGridView> コントロールです。<xref:System.Windows.Forms.DataGridView> 、外部データ ソースにバインドされたコントロールの現在のセルは並べ替えるときに自動的に保存されません。  
  
 この例を実行するを含むフォームに次のコードを貼り付け、 <xref:System.Windows.Forms.DataGridView> という `dataGridView1`します。 C\# の場合、接続する必要ありますも、 <xref:System.Windows.Forms.DataGridView.Sorted> イベントをイベント ハンドラーです。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc\#150](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#150)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc\#150](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#150)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">現在のセルに対する変更をコミットも取り消しもできないため、このプロパティの値を設定できません。  
  
 または  
  
 このプロパティを設定するときに指定されたセルが、非表示の行または列のセルです。  
  
 再入操作の呼び出しは、<see cref="T:System.Windows.Forms.DataGridView" /> が <see cref="P:System.Windows.Forms.DataGridView.DataSource" /> にバインドされている場合のみ使用できます。 再入操作の呼び出しは、基になるデータが変更されたときに発生します。</exception>
        <exception cref="T:System.ArgumentException">このプロパティを設定するときに指定されたセルが、<see cref="T:System.Windows.Forms.DataGridView" /> にありません。</exception>
        <altmember cref="P:System.Windows.Forms.DataGridView.CurrentRow" />
        <altmember cref="E:System.Windows.Forms.DataGridView.SelectionChanged" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CurrentCellChanged" />
        <altmember cref="P:System.Windows.Forms.DataGridView.FirstDisplayedCell" />
      </Docs>
    </Member>
    <Member MemberName="CurrentCellAddress">
      <MemberSignature Language="C#" Value="public System.Drawing.Point CurrentCellAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point CurrentCellAddress" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.CurrentCellAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在アクティブなセルの行インデックスおよび列インデックスを取得します。</summary>
        <value>現在アクティブなセルの行インデックスおよび列インデックスを表す <see cref="T:System.Drawing.Point" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Use this property to determine the row and column of the current cell without accessing the cell directly. This is useful to avoid unsharing shared rows. For more information about row sharing, see [Best Practices for Scaling the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/8321a8a6-6340-4fd1-b475-fa090b905aaf).  
  
   
  
## 例  
 The following code example illustrates how to use the <xref:System.Windows.Forms.DataGridView.CurrentCellAddress%2A> property in a row\-painting scenario. In the example, this property is used to store the row index of the current cell. When the user changes the current cell to a different row, the row is forced to repaint itself.  
  
 This code is part of a larger example available in [How to: Customize the Appearance of Rows in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/d40b53d2-7e7c-48c5-8570-6e79d15c3bbb).  
  
 [!code-csharp[System.Windows.Forms.DataGridViewRowPainting\#19](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRowPainting/CS/datagridviewrowpainting.cs#19)]
 [!code-vb[System.Windows.Forms.DataGridViewRowPainting\#19](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRowPainting/VB/datagridviewrowpainting.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentCellChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CurrentCellChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CurrentCellChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CurrentCellChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridView.CurrentCell" /> プロパティが変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example illustrates the use of this event. This example is part of a larger example available in [How to: Customize the Appearance of Rows in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/d40b53d2-7e7c-48c5-8570-6e79d15c3bbb).  
  
 [!code-csharp[System.Windows.Forms.DataGridViewRowPainting\#19](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRowPainting/CS/datagridviewrowpainting.cs#19)]
 [!code-vb[System.Windows.Forms.DataGridViewRowPainting\#19](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRowPainting/VB/datagridviewrowpainting.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentCellDirtyStateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CurrentCellDirtyStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CurrentCellDirtyStateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CurrentCellDirtyStateChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セルの内容の変更に関連して、セルの状態が変更するときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A cell is marked as modified if its contents have changed but the change has not been saved.  
  
 This event typically occurs when a cell has been edited but the change has not been committed to the data cache, or when an edit operation is canceled.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example demonstrates how to handle the <xref:System.Windows.Forms.DataGridView.CurrentCellDirtyStateChanged> event. In this example, the event handler calls the <xref:System.Windows.Forms.DataGridView.CommitEdit%2A> method to raise the <xref:System.Windows.Forms.DataGridView.CellValueChanged> event and determine the current value of a <xref:System.Windows.Forms.DataGridViewCheckBoxCell>. This code example is part of a larger example provided in [How to: Disable Buttons in a Button Column in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/5c344d01-013a-4a6b-8f8d-62ec9321d81e).  
  
 [!code-csharp[System.Windows.Forms.DataGridView.DisabledButtons\#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.DisabledButtons/CS/form1.cs#5)]
 [!code-vb[System.Windows.Forms.DataGridView.DisabledButtons\#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.DisabledButtons/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentRow">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewRow CurrentRow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewRow CurrentRow" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.CurrentRow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のセルを格納している行を取得します。</summary>
        <value>現在のセルを格納している行を表す <see cref="T:System.Windows.Forms.DataGridViewRow" />。現在のセルがない場合は <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 To change the current row, you must set the <xref:System.Windows.Forms.DataGridView.CurrentCell%2A> property to a cell in the desired row.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridView.CurrentCell" />
      </Docs>
    </Member>
    <Member MemberName="DataBindingComplete">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewBindingCompleteEventHandler DataBindingComplete;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewBindingCompleteEventHandler DataBindingComplete" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.DataBindingComplete" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewBindingCompleteEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ バインディング操作が完了した後に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、ソース内のデータの内容の変更時、またはの値、 <xref:System.Windows.Forms.DataGridView.DataSource%2A>, 、<xref:System.Windows.Forms.DataGridView.DataMember%2A>, 、または <xref:System.Windows.Forms.Control.BindingContext%2A> プロパティが変更されました。  
  
 このイベントを処理する役に立ちます、たとえば、プログラムを使用して行と列のコンテンツの更新プログラムに基づいたのサイズを変更します。 詳細については、「[Sizing Options in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/a5620a9c-0d06-41e3-8934-c25ddb16c9e6)」を参照してください。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例は、このイベントの使用方法を示しています。 この例で使用できる例の一部である、 <xref:System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs> クラスの概要です。  
  
 [!code-csharp[System.Windows.Forms.DataGridView\_NeededEvents\#05](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView_NeededEvents/CS/Form1.cs#05)]
 [!code-vb[System.Windows.Forms.DataGridView\_NeededEvents\#05](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView_NeededEvents/VB/Form1.vb#05)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewBindingCompleteEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewBindingCompleteEventArgs" />
        <altmember cref="P:System.Windows.Forms.DataGridView.DataSource" />
        <altmember cref="P:System.Windows.Forms.DataGridView.DataMember" />
        <altmember cref="P:System.Windows.Forms.Control.BindingContext" />
        <altmember cref="E:System.Windows.Forms.CurrencyManager.ListChanged" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnDataBindingComplete(System.Windows.Forms.DataGridViewBindingCompleteEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DataError">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewDataErrorEventHandler DataError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewDataErrorEventHandler DataError" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.DataError" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewDataErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>外部のデータ解析または検証操作が例外をスローした場合、またはデータ ソースへのデータのコミットが失敗した場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Windows.Forms.DataGridView.DataError> event enables you to handle exceptions thrown in code that is called by the control during data processing operations.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
> [!NOTE]
>  The <xref:System.Windows.Forms.DataGridViewCellCancelEventArgs.ColumnIndex%2A> and <xref:System.Windows.Forms.DataGridViewCellCancelEventArgs.RowIndex%2A> properties of the <xref:System.Windows.Forms.DataGridViewDataErrorEventArgs> object associated with this event normally indicate the cell in which the data error occurred. When the error occurs in an external data source, however, the data source may not provide the column in which the error occurred. In this case, the <xref:System.Windows.Forms.DataGridViewCellCancelEventArgs.ColumnIndex%2A> property typically indicates the column of the current cell at the time of the error.  
  
   
  
## 例  
 The following code example demonstrates a <xref:System.Windows.Forms.DataGridView.DataError> event handler. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridViewComboBoxColumn> class overview topic.  
  
 [!code-cpp[System.Windows.Forms.DataGridViewColumn\_AllColumns\_Bound\_Employees\#50](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees/CPP/employees.cpp#50)]
 [!code-csharp[System.Windows.Forms.DataGridViewColumn\_AllColumns\_Bound\_Employees\#50](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees/CS/employees.cs#50)]
 [!code-vb[System.Windows.Forms.DataGridViewColumn\_AllColumns\_Bound\_Employees\#50](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees/VB/employees.vb#50)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewDataErrorEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewDataErrorEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="DataMember">
      <MemberSignature Language="C#" Value="public string DataMember { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataMember" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.DataMember" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataMemberListEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> でデータが表示される対象のデータ ソースのリストまたはテーブルの名前を取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DataGridView" /> でデータが表示される対象の <see cref="P:System.Windows.Forms.DataGridView.DataSource" /> のテーブルまたはリストの名前。 既定値は <see cref="F:System.String.Empty" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This property is useful when binding to a data source that contains multiple lists or tables. You do not need to set this property when binding to a data source that contains a single list or table. For example, you can bind a <xref:System.Windows.Forms.DataGridView> control to a <xref:System.Data.DataSet> that contains a single table without setting this property. If the <xref:System.Data.DataSet> contains multiple tables, however, you must set this property to the name of one of the tables.  
  
   
  
## 例  
 The following code example illustrates a common use for this property. In the example, a <xref:System.Windows.Forms.DataGridView> control named `customersDataGridView` is bound to a <xref:System.Data.DataSet> named `customersDataSet`. This <xref:System.Data.DataSet> contains a table named "Customers". The <xref:System.Windows.Forms.DataGridView.DataMember%2A> property is set to the name of the table.  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc\#020](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#020)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc\#020](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#020)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">データ ソースでエラーが発生しました。<see cref="E:System.Windows.Forms.DataGridView.DataError" /> イベントのハンドラーがないか、ハンドラーが <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> プロパティを <see langword="true" /> に設定しています。 通常、例外オブジェクトは型 <see cref="T:System.FormatException" /> にキャストできます。</exception>
        <altmember cref="P:System.Windows.Forms.DataGridView.DataSource" />
        <altmember cref="T:System.Data.DataSet" />
      </Docs>
    </Member>
    <Member MemberName="DataMemberChanged">
      <MemberSignature Language="C#" Value="public event EventHandler DataMemberChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DataMemberChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.DataMemberChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridView.DataMember" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.DataGridView.DataMemberChanged> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the <xref:System.Windows.Forms.DataGridView.DataMemberChanged> event.  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#266](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#266)]
 [!code-vb[System.Windows.Forms.EventExamples\#266](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#266)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public object DataSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.DataSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AttributeProvider(typeof(System.ComponentModel.IListSource))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> でデータが表示される対象のデータ ソースを取得または設定します。</summary>
        <value>表示される <see cref="T:System.Windows.Forms.DataGridView" /> のデータを格納しているオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Windows.Forms.DataGridView> class supports the standard Windows Forms data\-binding model. This means the data source can be of any type that implements one of the following interfaces:  
  
-   The <xref:System.Collections.IList> interface, including one\-dimensional arrays.  
  
-   The <xref:System.ComponentModel.IListSource> interface, such as the <xref:System.Data.DataTable> and <xref:System.Data.DataSet> classes.  
  
-   The <xref:System.ComponentModel.IBindingList> interface, such as the <xref:System.ComponentModel.BindingList%601> class.  
  
-   The <xref:System.ComponentModel.IBindingListView> interface, such as the <xref:System.Windows.Forms.BindingSource> class.  
  
 For specific examples, see the Example section and the task table at the end of this section.  
  
 Typically, you will bind to a <xref:System.Windows.Forms.BindingSource> component and bind the <xref:System.Windows.Forms.BindingSource> component to another data source or populate it with business objects. The <xref:System.Windows.Forms.BindingSource> component is the preferred data source because it can bind to a wide variety of data sources and can resolve many data binding issues automatically.  
  
 When binding to a data source that contains multiple lists or tables, you must set the <xref:System.Windows.Forms.DataGridView.DataMember%2A> property to a string that specifies the list or table to bind to. When binding to a <xref:System.Windows.Forms.BindingSource> component that contains multiple lists or tables, however, you can set the <xref:System.Windows.Forms.BindingSource.DataMember%2A> property of the <xref:System.Windows.Forms.BindingSource> component instead.  
  
 When binding to an object collection rather than to database data, you will typically set the <xref:System.Windows.Forms.DataGridViewCellStyle.DataSourceNullValue%2A> property of the object returned by the <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> property to **languageKeyword tag is not supported!!!!**  
 rather than using the default value of <xref:System.DBNull.Value?displayProperty=fullName>, which is appropriate for database data.  
  
 For more information, see [Displaying Data in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/b170b52a-2ebd-4948-ac2f-e52d494cebb2). The following table provides direct links to common tasks related to the <xref:System.Windows.Forms.DataGridView.DataSource%2A> property.  
  
 See [Walkthrough: Creating a Master\/Detail Form Using Two Windows Forms DataGridView Controls](http://msdn.microsoft.com/ja-jp/c5fa29e8-47f7-4691-829b-0e697a691f36)and [How to: Bind Objects to Windows Forms DataGridView Controls](http://msdn.microsoft.com/ja-jp/cb8f29fa-577e-4e2b-883f-3a01c6189b9c).  
  
   
  
## 例  
 The following code example demonstrates how to initialize a simple data\-bound <xref:System.Windows.Forms.DataGridView>. It also demonstrates how to set the <xref:System.Windows.Forms.DataGridView.DataSource%2A> property.  
  
 [!code-cpp[System.Windows.Forms.GridViewSimpleBound\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewSimpleBound/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.GridViewSimpleBound\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewSimpleBound/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.GridViewSimpleBound\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewSimpleBound/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">データ ソースでエラーが発生しました。<see cref="E:System.Windows.Forms.DataGridView.DataError" /> イベントのハンドラーがないか、ハンドラーが <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> プロパティを <see langword="true" /> に設定しました。 通常、例外オブジェクトは型 <see cref="T:System.FormatException" /> にキャストできます。</exception>
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="T:System.ComponentModel.IListSource" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="T:System.Data.DataSet" />
        <altmember cref="T:System.ComponentModel.IBindingList" />
        <altmember cref="T:System.ComponentModel.BindingList`1" />
        <altmember cref="T:System.ComponentModel.IBindingListView" />
        <altmember cref="T:System.Windows.Forms.BindingSource" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellStyle.DataSourceNullValue" />
        <altmember cref="P:System.Windows.Forms.DataGridView.DefaultCellStyle" />
        <altmember cref="P:System.Windows.Forms.DataGridView.DataMember" />
      </Docs>
    </Member>
    <Member MemberName="DataSourceChanged">
      <MemberSignature Language="C#" Value="public event EventHandler DataSourceChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DataSourceChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.DataSourceChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridView.DataSource" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.DataGridView.DataSourceChanged> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the <xref:System.Windows.Forms.DataGridView.DataSourceChanged> event.  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#267](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#267)]
 [!code-vb[System.Windows.Forms.EventExamples\#267](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#267)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultCellStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewCellStyle DefaultCellStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewCellStyle DefaultCellStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.DefaultCellStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>その他のセル スタイル プロパティが設定されていない場合、<see cref="T:System.Windows.Forms.DataGridView" /> のセルに適用される既定のセル スタイルを取得または設定します。</summary>
        <value>既定スタイルとして適用される <see cref="T:System.Windows.Forms.DataGridViewCellStyle" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Windows.Forms.DataGridView> control displays its cells using the styles indicated by the cell <xref:System.Windows.Forms.DataGridViewCell.InheritedStyle%2A> property, which inherits styles from other properties of type <xref:System.Windows.Forms.DataGridViewCellStyle>. The styles specified through the <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> property affect all cells except when overridden by the styles specified through the following properties:  
  
-   <xref:System.Windows.Forms.DataGridViewColumn.DefaultCellStyle%2A?displayProperty=fullName>  
  
-   <xref:System.Windows.Forms.DataGridView.RowsDefaultCellStyle%2A>  
  
-   <xref:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyle%2A>  
  
-   <xref:System.Windows.Forms.DataGridViewRow.DefaultCellStyle%2A?displayProperty=fullName>  
  
-   <xref:System.Windows.Forms.DataGridViewCell.Style%2A?displayProperty=fullName>  
  
 For more information, see [Cell Styles in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/dbb75ed6-8804-4232-8382-f9920c2e380c).  
  
 When getting this property, a <xref:System.Windows.Forms.DataGridViewCellStyle> with default values will be created if the property has not already been accessed. This can cause a performance impact when getting this property for many rows. Whenever possible, use a single <xref:System.Windows.Forms.DataGridViewCellStyle> to set this property for multiple rows. For more information, see [Best Practices for Scaling the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/8321a8a6-6340-4fd1-b475-fa090b905aaf).  
  
   
  
## 例  
 The following code example illustrates the use of this property in a <xref:System.Windows.Forms.DataGridView> control intended primarily for display. In this example, the visual appearance of the control is customized in several ways and the control is configured for limited interactivity. This example is part of a larger example available in the <xref:System.Windows.Forms.DataGridViewCellStyle> class overview.  
  
 [!code-csharp[System.Windows.Forms.DataGridViewStyleDemo\#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/CS/form1.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo\#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
      </Docs>
    </Member>
    <Member MemberName="DefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler DefaultCellStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DefaultCellStyleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.DefaultCellStyleChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridView.DefaultCellStyle" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This event occurs when any properties of the <xref:System.Windows.Forms.DataGridViewCellStyle> returned by the <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> property are set to new values or when the <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> property is set to a new <xref:System.Windows.Forms.DataGridViewCellStyle> with at least one property value different than the previous cell style object.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.DataGridView.DefaultCellStyleChanged> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the <xref:System.Windows.Forms.DataGridView.DefaultCellStyleChanged> event.  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#268](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#268)]
 [!code-vb[System.Windows.Forms.EventExamples\#268](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#268)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
      </Docs>
    </Member>
    <Member MemberName="DefaultSize">
      <MemberSignature Language="C#" Value="protected override System.Drawing.Size DefaultSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.DefaultSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの既定の初期サイズを取得します。</summary>
        <value>コントロールの初期サイズを表す <see cref="T:System.Drawing.Size" />。幅 240 ピクセル、高さ 150 ピクセルです。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultValuesNeeded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowEventHandler DefaultValuesNeeded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowEventHandler DefaultValuesNeeded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.DefaultValuesNeeded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>行が既定値を伴って作成されるように、ユーザーが新しいレコードに対して行を挿入したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This event lets you populate the row for new records when the user enters the row. Initial values for the row come from the <xref:System.Windows.Forms.DataGridViewCell.DefaultNewRowValue%2A> property of the <xref:System.Windows.Forms.DataGridViewCell> returned by each column's <xref:System.Windows.Forms.DataGridViewColumn.CellTemplate%2A> property.  
  
 In data bound mode, all cell values for data bound columns are stored in the external data source. When the user enters the row for new records, a new row is created in the data source before the <xref:System.Windows.Forms.DataGridView.DefaultValuesNeeded> event occurs. When you populate the <xref:System.Windows.Forms.DataGridViewRowEventArgs.Row%2A?displayProperty=fullName> property in your event handler, the values are added directly to the data source.  
  
 In virtual mode, after this event occurs, the <xref:System.Windows.Forms.DataGridView.CellValuePushed> event occurs for each cell in the new row so that you can store the default values in your custom data store. Then, the <xref:System.Windows.Forms.DataGridView.CellValueNeeded> event occurs for each cell in the new row, retrieving the values that you stored in the <xref:System.Windows.Forms.DataGridView.CellValuePushed> event, which are then displayed.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example illustrates how this event can be handled. In the example, cells for the given columns are populated with default values. For the `CustomerID` column, the value is retrieved from a separate method \(not implemented\) that generates a unique customer ID.  
  
 To run this example, replace the column names with the names of the column objects from an actual <xref:System.Windows.Forms.DataGridView> control and provide appropriate default values. When specifying columns by name, you must use the name of the column object and not the column header text.  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc\#120](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#120)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc\#120](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#120)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayedColumnCount">
      <MemberSignature Language="C#" Value="public int DisplayedColumnCount (bool includePartialColumns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 DisplayedColumnCount(bool includePartialColumns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.DisplayedColumnCount(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePartialColumns" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePartialColumns">表示される列数に部分的な列を含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>ユーザーに表示される列の数を返します。</summary>
        <returns>ユーザーに表示される列の数。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayedRowCount">
      <MemberSignature Language="C#" Value="public int DisplayedRowCount (bool includePartialRow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 DisplayedRowCount(bool includePartialRow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.DisplayedRowCount(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePartialRow" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePartialRow">表示される行数に部分的な行を含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>ユーザーに表示される行の数を返します。</summary>
        <returns>ユーザーに表示される行数。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayRectangle">
      <MemberSignature Language="C#" Value="public override System.Drawing.Rectangle DisplayRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle DisplayRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.DisplayRectangle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの表示領域を表す四角形を取得します。</summary>
        <value>コントロールの表示領域を表す <see cref="T:System.Drawing.Rectangle" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Windows.Forms.DataGridView.DisplayRectangle%2A> property returns the client rectangle of the display area of the control, not including the area occupied by any scroll bars that are showing.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding the <see cref="P:System.Windows.Forms.DataGridView.DisplayRectangle" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.DataGridView.DisplayRectangle" /> property to extend the base implementation. Alternatively, you must provide all the implementation.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.Windows.Forms.Control" /> とその子コントロールが使用しているアンマネージ リソースを解放します。オプションで、マネージ リソースも解放します。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="EditingControl">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control EditingControl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control EditingControl" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.EditingControl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>編集中のコントロールを含むセルが編集モードの場合、現在のセルでホストされているコントロールを取得します。</summary>
        <value>現在のセルでホストされている <see cref="T:System.Windows.Forms.Control" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 If the cell is not in edit mode or the cell type does not accommodate an editing control, this property returns **languageKeyword tag is not supported!!!!**  
.  
  
   
  
## 例  
 The following code example illustrates how to use this property in an overridden method of a custom cell type. In the example, a reference to the editing control is retrieved, cast to a custom editing control type, and then populated with the current value of the cell.  
  
 This example is part of a larger example available in [How to: Host Controls in Windows Forms DataGridView Cells](http://msdn.microsoft.com/ja-jp/e79a9d4e-64ec-41f5-93ec-f5492633cbb2).  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCalendarColumn\#210](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/CS/datagridviewcalendarcolumn.cs#210)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn\#210](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/VB/datagridviewcalendarcolumn.vb#210)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EditingControlShowing">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewEditingControlShowingEventHandler EditingControlShowing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewEditingControlShowingEventHandler EditingControlShowing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.EditingControlShowing" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewEditingControlShowingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セルの編集用のコントロールが表示されているときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 You can handle this event to perform custom initialization of the editing control when a cell enters edit mode. To customize the display characteristics of the control, set the properties of the object returned by the <xref:System.Windows.Forms.DataGridViewEditingControlShowingEventArgs.CellStyle%2A?displayProperty=fullName> property. To perform other initialization, cast the value of the <xref:System.Windows.Forms.DataGridViewEditingControlShowingEventArgs.Control%2A?displayProperty=fullName> property to the specific control type and access the members directly. For example, you can handle the <xref:System.Windows.Forms.DataGridView.EditingControlShowing> event to attach event\-handlers to the events of the editing control.  
  
> [!NOTE]
>  The <xref:System.Windows.Forms.DataGridView> control hosts one editing control at a time, and reuses the editing control whenever the cell type does not change between edits. When attaching event\-handlers to the editing control, you must therefore take precautions to avoid attaching the same handler multiple times. To avoid this problem, remove the handler from the event before you attach the handler to the event. This will prevent duplication if the handler is already attached to the event, but will have no effect otherwise. For more information, see the example code in the <xref:System.Windows.Forms.DataGridViewComboBoxEditingControl> class overview.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example illustrates how to handle this event to change the <xref:System.Windows.Forms.DataGridViewCellStyle.BackColor%2A> property of the current cell. To run this example, paste the code into a form that contains a <xref:System.Windows.Forms.DataGridView> named `dataGridView1` and ensure that the <xref:System.Windows.Forms.DataGridView.EditingControlShowing> event is associated with the event handler.  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc\#210](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#210)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc\#210](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#210)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewTextBoxEditingControl" />
        <altmember cref="T:System.Windows.Forms.DataGridViewComboBoxEditingControl" />
        <altmember cref="T:System.Windows.Forms.IDataGridViewEditingControl" />
        <altmember cref="T:System.Windows.Forms.DataGridViewEditingControlShowingEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewEditingControlShowingEventArgs" />
        <altmember cref="P:System.Windows.Forms.DataGridViewEditingControlShowingEventArgs.CellStyle" />
        <altmember cref="P:System.Windows.Forms.DataGridViewEditingControlShowingEventArgs.Control" />
      </Docs>
    </Member>
    <Member MemberName="EditingPanel">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Panel EditingPanel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Panel EditingPanel" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.EditingPanel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Panel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridView.EditingControl" /> を格納しているパネルを取得します。</summary>
        <value>
          <see cref="P:System.Windows.Forms.DataGridView.EditingControl" /> を格納している <see cref="T:System.Windows.Forms.Panel" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Unlike the <xref:System.Windows.Forms.DataGridView.EditingControl%2A> property, which is **languageKeyword tag is not supported!!!!**  
 when the current cell is not in edit mode, the <xref:System.Windows.Forms.DataGridView.EditingPanel%2A> property is always available.  
  
   
  
## 例  
 The following code example illustrates how to use the <xref:System.Windows.Forms.DataGridView.EditingPanel%2A> property in a <xref:System.Windows.Forms.DataGridView> control to visually differentiate a cell when it is in edit mode. In this example, the <xref:System.Windows.Forms.Panel.BorderStyle%2A> of the cell's editing panel is set to <xref:System.Windows.Forms.BorderStyle.Fixed3D>. To run this example, paste the code into a form that contains a <xref:System.Windows.Forms.DataGridView> named `dataGridView1`.  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc\#069](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#069)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc\#069](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#069)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EditMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewEditMode EditMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridViewEditMode EditMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.EditMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewEditMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セルの編集を開始する方法を示す値を取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DataGridViewEditMode" /> 値のいずれか 1 つ。 既定値は、<see cref="F:System.Windows.Forms.DataGridViewEditMode.EditOnKeystrokeOrF2" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 All <xref:System.Windows.Forms.DataGridViewEditMode> values except for <xref:System.Windows.Forms.DataGridViewEditMode.EditProgrammatically> also allow a user to double\-click a cell to begin editing it.  
  
   
  
## 例  
 The following code example demonstrates how to initialize a simple data\-bound <xref:System.Windows.Forms.DataGridView>. It also demonstrates how to set the <xref:System.Windows.Forms.DataGridView.EditMode%2A> property.  
  
 [!code-cpp[System.Windows.Forms.GridViewSimpleBound\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewSimpleBound/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.GridViewSimpleBound\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewSimpleBound/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.GridViewSimpleBound\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewSimpleBound/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">このプロパティの設定時に指定した値が、有効な <see cref="T:System.Windows.Forms.DataGridViewEditMode" /> 値ではありません。</exception>
        <exception cref="T:System.Exception">このプロパティの設定時に指定した値によってコントロールが編集モードに入りますが、編集セルの値の初期化は失敗し、<see cref="E:System.Windows.Forms.DataGridView.DataError" /> イベントのハンドラーがないか、ハンドラーが <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> プロパティを <see langword="true" /> に設定しているかのいずれかの状態になります。 通常、例外オブジェクトは型 <see cref="T:System.FormatException" /> にキャストできます。</exception>
      </Docs>
    </Member>
    <Member MemberName="EditModeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler EditModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler EditModeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.EditModeChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridView.EditMode" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.DataGridView.EditModeChanged> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type<xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the <xref:System.Windows.Forms.DataGridView.EditModeChanged> event.  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#269](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#269)]
 [!code-vb[System.Windows.Forms.EventExamples\#269](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#269)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableHeadersVisualStyles">
      <MemberSignature Language="C#" Value="public bool EnableHeadersVisualStyles { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableHeadersVisualStyles" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.EnableHeadersVisualStyles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アプリケーションの visual スタイルが有効になっている場合、行ヘッダーおよび列ヘッダーがユーザーの現在のテーマの visual スタイルを使用するかどうかを示す値を取得または設定します。</summary>
        <value>ヘッダーの visual スタイルが有効になっている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 You can enable visual styles for your application by calling the <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=fullName> method before calling the <xref:System.Windows.Forms.Application.Run%2A?displayProperty=fullName> method. If <xref:System.Windows.Forms.DataGridView.EnableHeadersVisualStyles%2A> is set to **languageKeyword tag is not supported!!!!**  
, all header cells except the <xref:System.Windows.Forms.DataGridView.TopLeftHeaderCell%2A> are painted using the current theme.  
  
   
  
## 例  
 The following code example demonstrates how to disable visual styles for the row and column headers in an application that has visual styles enabled. In this example, visual styles have been enabled for the application by calling the <xref:System.Windows.Forms.Application.EnableVisualStyles%2A> method in **languageKeyword tag is not supported!!!!**  
. However, visual styles will not be applied to the row and column headers because <xref:System.Windows.Forms.DataGridView.EnableHeadersVisualStyles%2A> is set to **languageKeyword tag is not supported!!!!**  
. This code example is part of a larger example provided for the <xref:System.Windows.Forms.DataGridViewAdvancedBorderStyle> class.  
  
 [!code-csharp[System.Windows.Forms.DataGridViewAdvancedBorderStyle\#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewAdvancedBorderStyle/CS/advancedborderstyle.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewAdvancedBorderStyle\#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewAdvancedBorderStyle/VB/advancedborderstyle.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
        <altmember cref="Overload:System.Windows.Forms.Application.Run" />
      </Docs>
    </Member>
    <Member MemberName="EndEdit">
      <MemberSignature Language="C#" Value="public bool EndEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EndEdit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.EndEdit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>既定のエラー コンテキストを使用して、現在のセルの編集操作をコミットして終了します。</summary>
        <returns>編集操作がコミットされ終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method calls the <xref:System.Windows.Forms.DataGridView.EndEdit%2A> overload, passing in a bitwise combination of the <xref:System.Windows.Forms.DataGridViewDataErrorContexts.Parsing> and <xref:System.Windows.Forms.DataGridViewDataErrorContexts.Commit> values.  
  
 This method raises the <xref:System.Windows.Forms.DataGridView.CellEndEdit> event.  
  
 This method may result in an exception if errors are not handled with the <xref:System.Windows.Forms.DataGridView.DataError> event.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">セル値をコミットできませんでした。<see cref="E:System.Windows.Forms.DataGridView.DataError" /> イベントのハンドラーがないか、ハンドラーが <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> プロパティを <see langword="true" /> に設定しています。</exception>
        <altmember cref="M:System.Windows.Forms.DataGridView.EndEdit(System.Windows.Forms.DataGridViewDataErrorContexts)" />
        <altmember cref="M:System.Windows.Forms.DataGridView.CommitEdit(System.Windows.Forms.DataGridViewDataErrorContexts)" />
      </Docs>
    </Member>
    <Member MemberName="EndEdit">
      <MemberSignature Language="C#" Value="public bool EndEdit (System.Windows.Forms.DataGridViewDataErrorContexts context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EndEdit(valuetype System.Windows.Forms.DataGridViewDataErrorContexts context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.EndEdit(System.Windows.Forms.DataGridViewDataErrorContexts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Windows.Forms.DataGridViewDataErrorContexts" />
      </Parameters>
      <Docs>
        <param name="context">エラーが発生したコンテキストを指定する <see cref="T:System.Windows.Forms.DataGridViewDataErrorContexts" /> 値のビットごとの組み合わせ。</param>
        <summary>指定されたエラー コンテキストを使用して、現在のセルの編集操作をコミットして終了します。</summary>
        <returns>編集操作がコミットされ終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method raises the <xref:System.Windows.Forms.DataGridView.CellEndEdit> event.  
  
 This method may result in an exception if errors are not handled with the <xref:System.Windows.Forms.DataGridView.DataError> event.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">セル値をコミットできませんでした。<see cref="E:System.Windows.Forms.DataGridView.DataError" /> イベントのハンドラーがないか、ハンドラーが <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> プロパティを <see langword="true" /> に設定しています。</exception>
        <altmember cref="M:System.Windows.Forms.DataGridView.CommitEdit(System.Windows.Forms.DataGridViewDataErrorContexts)" />
      </Docs>
    </Member>
    <Member MemberName="FirstDisplayedCell">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewCell FirstDisplayedCell { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewCell FirstDisplayedCell" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.FirstDisplayedCell" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCell</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> に現在表示されている最初のセルを取得または設定します。通常、このセルは左上隅にあります。</summary>
        <value>現在コントロールに表示されている最初の <see cref="T:System.Windows.Forms.DataGridViewCell" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 You can use this property to determine which cell is in the first row and column currently displayed in the control. Typically, this is in the upper left corner, but for right\-to\-left languages, it is in the upper right corner. You can also set this property to scroll the control to the indicated cell.  
  
   
  
## 例  
 The following code example illustrates how to ensure that the current cell is visible after sorting. This code works only with an unbound <xref:System.Windows.Forms.DataGridView> control. With a <xref:System.Windows.Forms.DataGridView> control bound to an external data source, the current cell is not automatically persisted when sorting.  
  
 To run this example, paste the following code into a form that contains a <xref:System.Windows.Forms.DataGridView> named `dataGridView1`. In C\#, you must also connect the <xref:System.Windows.Forms.DataGridView.Sorted>event to the event handler.  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc\#150](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#150)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc\#150](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#150)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">このプロパティを設定するときに指定されたセルが、<see cref="T:System.Windows.Forms.DataGridView" /> にありません。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティを設定するときに指定されたセルの <see cref="P:System.Windows.Forms.DataGridViewCell.RowIndex" /> または <see cref="P:System.Windows.Forms.DataGridViewCell.ColumnIndex" /> プロパティ値が \-1 です。これは、ヘッダー セルまたは共有セルであることを示しています。  
  
 または  
  
 このプロパティの設定時に指定したセルの <see cref="P:System.Windows.Forms.DataGridViewCell.Visible" /> プロパティ値が <see langword="false" /> です。</exception>
        <altmember cref="P:System.Windows.Forms.DataGridView.CurrentCell" />
      </Docs>
    </Member>
    <Member MemberName="FirstDisplayedScrollingColumnHiddenWidth">
      <MemberSignature Language="C#" Value="public int FirstDisplayedScrollingColumnHiddenWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FirstDisplayedScrollingColumnHiddenWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.FirstDisplayedScrollingColumnHiddenWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在スクロールされて見えない列の部分の幅を取得します。</summary>
        <value>スクロールされて見えない部分の列の幅。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FirstDisplayedScrollingColumnIndex">
      <MemberSignature Language="C#" Value="public int FirstDisplayedScrollingColumnIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FirstDisplayedScrollingColumnIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.FirstDisplayedScrollingColumnIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> に表示される最初の列のインデックスを取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DataGridView" /> に表示される最初の列のインデックス。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">このプロパティの設定時に指定した値が、0 未満か、コントロール内の列数から 1 を引いた数より大きい値になっています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティの設定時に指定した値は、<see langword="false" /> の <see cref="P:System.Windows.Forms.DataGridViewColumn.Visible" /> プロパティ値を持つ列を示します。  
  
 または  
  
 このプロパティの設定時に指定した値は、<see langword="true" /> の <see cref="P:System.Windows.Forms.DataGridViewColumn.Frozen" /> プロパティ値を持つ列を示します。</exception>
      </Docs>
    </Member>
    <Member MemberName="FirstDisplayedScrollingRowIndex">
      <MemberSignature Language="C#" Value="public int FirstDisplayedScrollingRowIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FirstDisplayedScrollingRowIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.FirstDisplayedScrollingRowIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> に表示される最初の行のインデックスを取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DataGridView" /> に表示される最初の行のインデックス。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを生成する設定、 <xref:System.Windows.Forms.DataGridView.Scroll> イベントです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">このプロパティの設定時に指定した値が、0 未満か、コントロール内の行数から 1 を引いた数より大きい値になっています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティの設定時に指定した値は、<see langword="false" /> の <see cref="P:System.Windows.Forms.DataGridViewRow.Visible" /> プロパティ値を持つ行を示します。  
  
 または  
  
 このプロパティの設定時に指定した値は、<see langword="true" /> の <see cref="P:System.Windows.Forms.DataGridViewRow.Frozen" /> プロパティ値を持つ列を示します。</exception>
        <altmember cref="E:System.Windows.Forms.DataGridView.Scroll" />
      </Docs>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public override System.Drawing.Font Font { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Font Font" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.Font" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> によって表示されるテキストのフォントを取得または設定します。</summary>
        <value>コントロールによって表示されるテキストに適用される <see cref="T:System.Drawing.Font" />。 既定値は <see cref="P:System.Windows.Forms.Control.DefaultFont" /> プロパティの値です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.Font%2A> プロパティは、アンビエント プロパティです。 アンビエント プロパティはコントロールのプロパティ セットは、親コントロールから取得されます。 たとえば、 <xref:System.Windows.Forms.Button> が同じである <xref:System.Windows.Forms.Control.BackColor%2A> 親と <xref:System.Windows.Forms.Form> 既定では。 アンビエント プロパティの詳細については、次を参照してください。、 <xref:System.Windows.Forms.AmbientProperties> クラスまたは <xref:System.Windows.Forms.Control> クラスの概要です。  
  
 <xref:System.Drawing.Font> は変更できません \(つまり、そのプロパティのいずれかを調整できません\)、割り当てることができますのみ、 <xref:System.Windows.Forms.Control.Font%2A> 、新しいプロパティ <xref:System.Drawing.Font> オブジェクトです。 ただし、既存のフォントで新しいフォントを基準とすることができます。  
  
 <xref:System.Windows.Forms.DataGridView> コントロールの値を使用して、 <xref:System.Windows.Forms.DataGridView.Font%2A> プロパティの既定値として、 <xref:System.Windows.Forms.DataGridViewCellStyle.Font%2A> のプロパティ <xref:System.Windows.Forms.DataGridViewCellStyle> によって返されるオブジェクト、 <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A>, 、<xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A>, 、および <xref:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyle%2A> プロパティです。 変更する、 <xref:System.Windows.Forms.DataGridView.Font%2A> 値が自動的に更新、 <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A>, 、<xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A>, 、および <xref:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyle%2A> プロパティ、値を継承する任意のセルのフォントを変更します。 ヘッダー セルは、既定では、値をオーバーライドし、特定の行、列、およびセルの値をオーバーライドすることができます。 セル スタイルの継承の詳細については、次を参照してください。 [Cell Styles in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/dbb75ed6-8804-4232-8382-f9920c2e380c)します。  
  
   
  
## 例  
 次のコード例は、このプロパティの使用方法を示しています。 この例で使用できる例の一部である [How to: Create an Unbound Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/b5d4b47d-9a28-4d88-9dba-0a3c90fba71d)です。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewSimpleUnbound\#30](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSimpleUnbound/CS/simpleunbound.cs#30)]
 [!code-vb[System.Windows.Forms.DataGridViewSimpleUnbound\#30](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSimpleUnbound/VB/simpleunbound.vb#30)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridView.DefaultCellStyle" />
        <altmember cref="P:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle" />
        <altmember cref="P:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyle" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellStyle.Font" />
        <altmember cref="T:System.Drawing.Font" />
      </Docs>
    </Member>
    <Member MemberName="FontChanged">
      <MemberSignature Language="C#" Value="public event EventHandler FontChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler FontChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.FontChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridView.Font" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.FontChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.FontChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#271](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#271)]
 [!code-vb[System.Windows.Forms.EventExamples\#271](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#271)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridView.Font" />
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> の前景色を取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DataGridView" /> の前景色を表す <see cref="T:System.Drawing.Color" />。 既定値は <see cref="P:System.Windows.Forms.Control.DefaultForeColor" /> プロパティの値です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.ForeColor%2A> プロパティは、アンビエント プロパティです。 アンビエント プロパティはコントロールのプロパティ セットは、親コントロールから取得されます。 たとえば、 <xref:System.Windows.Forms.Button> が同じである <xref:System.Windows.Forms.Control.BackColor%2A> 親と <xref:System.Windows.Forms.Form> 既定では。 アンビエント プロパティの詳細については、次を参照してください。、 <xref:System.Windows.Forms.AmbientProperties> クラスまたは <xref:System.Windows.Forms.Control> クラスの概要です。  
  
 <xref:System.Drawing.Font> は変更できません \(つまり、そのプロパティのいずれかを調整できません\)、割り当てることができますのみ、 <xref:System.Windows.Forms.Control.Font%2A> 、新しいプロパティ <xref:System.Drawing.Font> オブジェクトです。 ただし、既存のフォントで新しいフォントを基準とすることができます。  
  
 <xref:System.Windows.Forms.DataGridView> コントロールの値を使用して、 <xref:System.Windows.Forms.DataGridView.ForeColor%2A> プロパティの既定値として、 <xref:System.Windows.Forms.DataGridViewCellStyle.ForeColor%2A> の <xref:System.Windows.Forms.DataGridViewCellStyle> によって返される、 <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> プロパティです。 変更する、 <xref:System.Windows.Forms.DataGridView.ForeColor%2A> 値が自動的に更新、 <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> プロパティの値を継承する任意のセルの前景テキストの色を変更します。 ヘッダー セルが既定では、値をオーバーライドし、特定の行、列、およびセルの値をオーバーライドすることができます。 セル スタイルの継承の詳細については、次を参照してください。 [Cell Styles in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/dbb75ed6-8804-4232-8382-f9920c2e380c)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridView.DefaultCellStyle" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellStyle.ForeColor" />
        <altmember cref="T:System.Drawing.Color" />
      </Docs>
    </Member>
    <Member MemberName="ForeColorChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ForeColorChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ForeColorChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ForeColorChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridView.ForeColor" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.ForeColorChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.ForeColorChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#270](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#270)]
 [!code-vb[System.Windows.Forms.EventExamples\#270](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#270)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccessibilityObjectById">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.AccessibleObject GetAccessibilityObjectById (int objectId);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Forms.AccessibleObject GetAccessibilityObjectById(int32 objectId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.GetAccessibilityObjectById(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="objectId">取得する <see langword="Int32" /> を識別する <see cref="T:System.Windows.Forms.AccessibleObject" />。</param>
        <summary>指定した <see cref="T:System.Windows.Forms.AccessibleObject" /> を取得します。</summary>
        <returns>指定した <see cref="T:System.Windows.Forms.AccessibleObject" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCellCount">
      <MemberSignature Language="C#" Value="public int GetCellCount (System.Windows.Forms.DataGridViewElementStates includeFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetCellCount(valuetype System.Windows.Forms.DataGridViewElementStates includeFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.GetCellCount(System.Windows.Forms.DataGridViewElementStates)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includeFilter" Type="System.Windows.Forms.DataGridViewElementStates" />
      </Parameters>
      <Docs>
        <param name="includeFilter">数に含めるセルを指定する <see cref="T:System.Windows.Forms.DataGridViewElementStates" /> 値のビットごとの組み合わせ。</param>
        <summary>指定されたフィルターを満たすセルの数を取得します。</summary>
        <returns>
          <paramref name="includeFilter" /> パラメーターと一致するセルの数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、特定の状態のセルの数を調べるために役立ちます。 選択したセルの数を取得するには、たとえば、このメソッドを使用、 <xref:System.Windows.Forms.DataGridViewElementStates.Selected?displayProperty=fullName> 値。 これは一般的に使用するよりも効率的な <xref:System.Windows.Forms.DataGridView.SelectedCells%2A> プロパティです。  
  
   
  
## 例  
 次のコード例は、このメソッドを使用して、選択した任意のセルがあるかどうかを確認する方法を示しています、 <xref:System.Windows.Forms.DataGridView> コントロールです。 この例では任意のセルが選択されている場合、値が取得を通じて、 <xref:System.Windows.Forms.DataGridView.GetClipboardContent%2A> メソッドで表示されていると、 <xref:System.Windows.Forms.TextBox> コントロールです。  
  
 このコードのクリップボード機能の使用方法を示すサンプルが大きく、 <xref:System.Windows.Forms.DataGridView> コントロールです。 この例で使用できる例の一部である [How to: Allow Users to Copy Multiple Cells to the Clipboard from the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/fd0403b2-d0e3-4ae0-839c-0f737e1eb4a9)です。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewClipboardDemo\#16](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewClipboardDemo/CS/datagridviewclipboarddemo.cs#16)]
 [!code-vb[System.Windows.Forms.DataGridViewClipboardDemo\#16](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewClipboardDemo/VB/datagridviewclipboarddemo.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="includeFilter" /> には値 <see cref="F:System.Windows.Forms.DataGridViewElementStates.ResizableSet" /> が含まれています。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCellDisplayRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetCellDisplayRectangle (int columnIndex, int rowIndex, bool cutOverflow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetCellDisplayRectangle(int32 columnIndex, int32 rowIndex, bool cutOverflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.GetCellDisplayRectangle(System.Int32,System.Int32,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="cutOverflow" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="columnIndex">目的のセルの列インデックス。</param>
        <param name="rowIndex">目的のセルの行インデックス。</param>
        <param name="cutOverflow">セルの表示部分のみを取得する場合は <see langword="true" />。セル境界全体を取得する場合は <see langword="false" />。</param>
        <summary>セルの表示領域を表す四角形を返します。</summary>
        <returns>セルの表示領域の四角形を表す <see cref="T:System.Drawing.Rectangle" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、セル境界全体または表示部分のみを返します。 セルの境界を取得する内容のみを使用して、セル <xref:System.Windows.Forms.DataGridViewCell.ContentBounds%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndex" /> が、\-1 未満か、コントロール内の列数から 1 を引いた値を超えています。  
  
 \-または\-  
  
 <paramref name="rowIndex" /> が、\-1 未満か、コントロール内の行数から 1 を引いた値を超えています。</exception>
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.ContentBounds" />
      </Docs>
    </Member>
    <Member MemberName="GetClipboardContent">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.DataObject GetClipboardContent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.DataObject GetClipboardContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.GetClipboardContent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.Clipboard" /> にコピーするために、選択されたセルの内容を表す書式設定された値を取得します。</summary>
        <returns>選択されたセルの内容を表す <see cref="T:System.Windows.Forms.DataObject" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、選択したセルによって定義される領域を表すデータを取得します。 この領域は、すべての選択したセルを含む最小の四角形です。 この領域で選択した各セルの値を取得、 <xref:System.Windows.Forms.DataGridViewCell.GetClipboardContent%2A?displayProperty=fullName> メソッドです。 この領域で選択されていないセルの空のプレース ホルダーの値が使用されます。 このメソッドを組み合わせてこれらの値を <xref:System.Windows.Forms.DataObject> をクリップボードにコピーするためのいくつかの形式を格納しています。 クリップボードのサポートされている形式には、 <xref:System.Windows.Forms.DataFormats.Text?displayProperty=fullName>, 、<xref:System.Windows.Forms.DataFormats.UnicodeText?displayProperty=fullName>, 、<xref:System.Windows.Forms.DataFormats.Html?displayProperty=fullName>, 、および <xref:System.Windows.Forms.DataFormats.CommaSeparatedValue?displayProperty=fullName>です。  
  
 詳細については、<xref:System.Windows.Forms.Clipboard> クラスを参照してください。  
  
   
  
## 例  
 次のコード例では、プログラムを使用して、選択した追加 <xref:System.Windows.Forms.DataGridView> クリップボードへのコンテンツ。 この例で使用できる例の一部である [How to: Allow Users to Copy Multiple Cells to the Clipboard from the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/fd0403b2-d0e3-4ae0-839c-0f737e1eb4a9)です。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewClipboardDemo\#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewClipboardDemo/CS/datagridviewclipboarddemo.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewClipboardDemo\#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewClipboardDemo/VB/datagridviewclipboarddemo.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <see cref="P:System.Windows.Forms.DataGridView.ClipboardCopyMode" /> が <see cref="F:System.Windows.Forms.DataGridViewClipboardCopyMode.Disable" /> に設定されます。</exception>
        <block subset="none" type="overrides">
          <para>Override this method to provide customized clipboard values. This is useful, for example, to support copying values from custom cell types.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.DataGridView.ClipboardCopyMode" />
        <altmember cref="T:System.Windows.Forms.DataGridViewClipboardCopyMode" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
      </Docs>
    </Member>
    <Member MemberName="GetColumnDisplayRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetColumnDisplayRectangle (int columnIndex, bool cutOverflow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetColumnDisplayRectangle(int32 columnIndex, bool cutOverflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.GetColumnDisplayRectangle(System.Int32,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="cutOverflow" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="columnIndex">目的のセルの列インデックス。</param>
        <param name="cutOverflow">
          <see cref="T:System.Windows.Forms.DataGridView" /> バインドに表示する列の四角形を返す場合は <see langword="true" />。列の四角形全体を返す場合は <see langword="false" />。</param>
        <summary>列インデックスによって決定された、列の表示領域を表す四角形を返します。</summary>
        <returns>列の表示領域の四角形を表す <see cref="T:System.Drawing.Rectangle" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndex" /> が、0 と列数から 1 を減算した数の間の有効な範囲内にありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRowDisplayRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetRowDisplayRectangle (int rowIndex, bool cutOverflow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetRowDisplayRectangle(int32 rowIndex, bool cutOverflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.GetRowDisplayRectangle(System.Int32,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="cutOverflow" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rowIndex">目的のセルの行インデックス。</param>
        <param name="cutOverflow">
          <see cref="T:System.Windows.Forms.DataGridView" /> バインドに表示する行の四角形を返す場合は <see langword="true" />。行の四角形全体を返す場合は <see langword="false" />。</param>
        <summary>行インデックスによって決定された、行の表示領域を表す四角形を返します。</summary>
        <returns>行の表示領域の四角形を表す <see cref="T:System.Drawing.Rectangle" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="rowIndex" /> が、0 と行数から 1 を減算した数の間の有効な範囲内にありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="GridColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color GridColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color GridColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.GridColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> のセルを区切るグリッド線の色を取得または設定します。</summary>
        <value>グリッド線の色を表す <see cref="T:System.Drawing.Color" /> または <see cref="T:System.Drawing.SystemColors" />。 既定値は、<see cref="F:System.Drawing.KnownColor.ControlDarkDark" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 設定することができます、 <xref:System.Windows.Forms.DataGridView.GridColor%2A> プロパティをいずれかの色の場合は、1 つの境界線を使用するオペレーティング システムで他の種類の枠線、色が指定されています。 経由でアプリケーションの visual スタイルが有効になっている場合、 <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=fullName> 、メソッド、 <xref:System.Windows.Forms.DataGridView.GridColor%2A> プロパティは無視され、現在のテーマの色が使用されます。  
  
   
  
## 例  
 次のコード例では、設定、 <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A>, 、<xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A>, 、<xref:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyle%2A>, 、<xref:System.Windows.Forms.DataGridView.CellBorderStyle%2A>, 、<xref:System.Windows.Forms.DataGridView.GridColor%2A>, 、<xref:System.Windows.Forms.DataGridView.BackgroundColor%2A>, 、<xref:System.Windows.Forms.DataGridView.RowHeadersVisible%2A>, 、<xref:System.Windows.Forms.DataGridView.SelectionMode%2A>, 、<xref:System.Windows.Forms.DataGridView.ColumnCount%2A>, 、および <xref:System.Windows.Forms.DataGridView.MultiSelect%2A> プロパティです。 さらに、コードの例では設定する、 <xref:System.Windows.Forms.DataGridViewColumn.Name%2A?displayProperty=fullName> と <xref:System.Windows.Forms.DataGridViewColumn.DefaultCellStyle%2A?displayProperty=fullName> プロパティです。 この例を実行するを含むフォームにコードを貼り付けます、 <xref:System.Windows.Forms.DataGridView> という名前 `dataGridView1`, 、まず、 `SetUpDataGridView` フォームのコンス トラクターからのメソッドまたは <xref:System.Windows.Forms.Form.Load> イベント ハンドラーです。 すべてのイベントがイベント ハンドラーに関連付けられていることを確認します。  
  
 [!code-cpp[System.Windows.Forms.GridViewUnbound\#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CPP/form1.cpp#5)]
 [!code-csharp[System.Windows.Forms.GridViewUnbound\#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CS/form1.cs#5)]
 [!code-vb[System.Windows.Forms.GridViewUnbound\#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">このプロパティの設定時に指定した値が <see cref="F:System.Drawing.Color.Empty" /> です。  
  
 または  
  
 このプロパティの設定時に指定した値に、255 未満の <see cref="P:System.Drawing.Color.A" /> プロパティ値が含まれています。</exception>
      </Docs>
    </Member>
    <Member MemberName="GridColorChanged">
      <MemberSignature Language="C#" Value="public event EventHandler GridColorChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler GridColorChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.GridColorChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridView.GridColor" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.GridColorChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName>またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.GridColorChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#272](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#272)]
 [!code-vb[System.Windows.Forms.EventExamples\#272](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#272)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HitTest">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridView.HitTestInfo HitTest (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.DataGridView/HitTestInfo HitTest(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.HitTest(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridView+HitTestInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">x 座標。</param>
        <param name="y">y 座標。</param>
        <summary>行インデックス、列インデックスなど、x 座標と y 座標を指定して位置情報を返します。</summary>
        <returns>位置情報を格納している <see cref="T:System.Windows.Forms.DataGridView.HitTestInfo" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用するをのどの部分を判断、 <xref:System.Windows.Forms.DataGridView> コントロールが指定した座標にあります。 たとえば、このメソッドを呼び出すことができます\-マウスの座標を指定する\] をクリックして: クリックされたセルやヘッダー セルまたはスクロール バーがクリックしてされたかどうかの行と列のインデックスを決定します。  
  
   
  
## 例  
 次のコード例は、このメソッドの使用方法を示しています。 この例で使用できる例の一部である、 <xref:System.Windows.Forms.DataGridView.Columns%2A> プロパティの参照トピックです。  
  
 [!code-csharp[System.Windows.Forms.GridViewAutoSize\#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewAutoSize/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.GridViewAutoSize\#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewAutoSize/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView.HitTestInfo" />
        <altmember cref="T:System.Windows.Forms.DataGridViewHitTestType" />
      </Docs>
    </Member>
    <Member MemberName="HorizontalScrollBar">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.ScrollBar HorizontalScrollBar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ScrollBar HorizontalScrollBar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.HorizontalScrollBar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ScrollBar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの水平スクロール バーを取得します。</summary>
        <value>水平スクロール バーを表す <see cref="T:System.Windows.Forms.ScrollBar" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalScrollingOffset">
      <MemberSignature Language="C#" Value="public int HorizontalScrollingOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HorizontalScrollingOffset" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.HorizontalScrollingOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールが水平方向にスクロールされる基準となるピクセル数を取得または設定します。</summary>
        <value>コントロールが水平方向にスクロールされる基準となるピクセル数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、このプロパティの使用方法を示しています。 この例で使用できる例の一部である [How to: Customize the Appearance of Rows in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/d40b53d2-7e7c-48c5-8570-6e79d15c3bbb)です。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewRowPainting\#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRowPainting/CS/datagridviewrowpainting.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewRowPainting\#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRowPainting/VB/datagridviewrowpainting.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">このプロパティの設定時に指定された値が 0 未満です。</exception>
      </Docs>
    </Member>
    <Member MemberName="InvalidateCell">
      <MemberSignature Language="C#" Value="public void InvalidateCell (System.Windows.Forms.DataGridViewCell dataGridViewCell);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateCell(class System.Windows.Forms.DataGridViewCell dataGridViewCell) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.InvalidateCell(System.Windows.Forms.DataGridViewCell)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataGridViewCell" Type="System.Windows.Forms.DataGridViewCell" />
      </Parameters>
      <Docs>
        <param name="dataGridViewCell">無効化する <see cref="T:System.Windows.Forms.DataGridViewCell" />。</param>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> の指定されたセルを無効化して、強制的に再描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、通常は、再描画するセルにセルの再描画を強制すると便利です。 たとえば、外部イベントの結果としてその外観を変更するカスタムのセルの種類と、このメソッドを使用できます。  
  
 描画と無効化の詳細については、次を参照してください。 <xref:System.Windows.Forms.Control.Invalidate%2A>します。  
  
   
  
## 例  
 次のコード例は、カスタマイズされたでこのメソッドを使用する方法を示しています。 <xref:System.Windows.Forms.DataGridViewCell> にマウス ポインターを合わせると飾り枠を塗りつぶされています。 例では、マウス ポインターに入るか、状態のままとセルが無効になります。  
  
 このコード例で使用できるは [How to: Customize Cells and Columns in the Windows Forms DataGridView Control by Extending Their Behavior and Appearance](http://msdn.microsoft.com/ja-jp/9b7dc7b6-5ce6-4566-9949-902f74f17a81)です。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewRolloverCell\#220](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRolloverCell/CS/rollovercell.cs#220)]
 [!code-vb[System.Windows.Forms.DataGridViewRolloverCell\#220](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRolloverCell/VB/rollovercell.vb#220)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dataGridViewCell" /> は <see cref="T:System.Windows.Forms.DataGridView" /> に属していません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dataGridViewCell" /> は <see langword="null" /> です。</exception>
        <altmember cref="Overload:System.Windows.Forms.Control.Invalidate" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateCell">
      <MemberSignature Language="C#" Value="public void InvalidateCell (int columnIndex, int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateCell(int32 columnIndex, int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.InvalidateCell(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="columnIndex">無効化するセルの列インデックス。</param>
        <param name="rowIndex">無効化するセルの行インデックス。</param>
        <summary>指定された行インデックスと列インデックスを含むセルを無効化して、強制的に再描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、通常は、再描画するセルにセルの再描画を強制すると便利です。 たとえば、外部イベントの結果としてその外観を変更するカスタムのセルの種類と、このメソッドを使用できます。  
  
 描画と無効化の詳細については、次を参照してください。 <xref:System.Windows.Forms.Control.Invalidate%2A>します。  
  
   
  
## 例  
 次のコード例は、上にマウス ポインターを置いたときに、セルの外観を変更するカスタムのセルの種類でこのメソッドを使用する方法を示しています。 この例で使用できる例の一部である [How to: Customize Cells and Columns in the Windows Forms DataGridView Control by Extending Their Behavior and Appearance](http://msdn.microsoft.com/ja-jp/9b7dc7b6-5ce6-4566-9949-902f74f17a81)です。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewRolloverCell\#220](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRolloverCell/CS/rollovercell.cs#220)]
 [!code-vb[System.Windows.Forms.DataGridViewRolloverCell\#220](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRolloverCell/VB/rollovercell.vb#220)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndex" /> が、\-1 未満か、コントロール内の列数から 1 を引いた値を超えています。  
  
 \-または\-  
  
 <paramref name="rowIndex" /> が、\-1 未満か、コントロール内の行数から 1 を引いた値を超えています。</exception>
        <altmember cref="Overload:System.Windows.Forms.Control.Invalidate" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateColumn">
      <MemberSignature Language="C#" Value="public void InvalidateColumn (int columnIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateColumn(int32 columnIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.InvalidateColumn(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="columnIndex">無効化する列のインデックス。</param>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> の指定された列を無効化して、強制的に再描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 描画と無効化の詳細については、次を参照してください。 <xref:System.Windows.Forms.Control.Invalidate%2A>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndex" /> が、0 以上、列数 \- 1 以下の、有効な範囲内にありません。</exception>
        <altmember cref="Overload:System.Windows.Forms.Control.Invalidate" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateRow">
      <MemberSignature Language="C#" Value="public void InvalidateRow (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateRow(int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.InvalidateRow(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">無効化する行のインデックス。</param>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> の指定された行を無効化して、強制的に再描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、強制的に再描画するのに行を使用します。 このメソッドは、処理するオーナー描画のシナリオで役立つ、 <xref:System.Windows.Forms.DataGridView.RowPrePaint> または <xref:System.Windows.Forms.DataGridView.RowPostPaint> イベントです。  
  
 描画と無効化の詳細については、次を参照してください。 <xref:System.Windows.Forms.Control.Invalidate%2A>します。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Windows.Forms.DataGridView.InvalidateRow%2A> メソッド シナリオで行を描画します。 例では、行は無効に変更すると、現在のセル、行が強制的に再描画します。  
  
 このコード例で使用できるは [How to: Customize the Appearance of Rows in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/d40b53d2-7e7c-48c5-8570-6e79d15c3bbb)です。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewRowPainting\#19](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRowPainting/CS/datagridviewrowpainting.cs#19)]
 [!code-vb[System.Windows.Forms.DataGridViewRowPainting\#19](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRowPainting/VB/datagridviewrowpainting.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="rowIndex" /> が、0 と行数 \-1 の間の有効な範囲内にありません。</exception>
        <altmember cref="Overload:System.Windows.Forms.Control.Invalidate" />
      </Docs>
    </Member>
    <Member MemberName="IsCurrentCellDirty">
      <MemberSignature Language="C#" Value="public bool IsCurrentCellDirty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCurrentCellDirty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.IsCurrentCellDirty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のセルがコミットされていない変更を含んでいるかを示す値を取得します。</summary>
        <value>現在のセルがコミットされていない変更を含む場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、 <xref:System.Windows.Forms.DataGridView> がバインドされていないデータをセルの編集と見なされます、ユーザーが別のセルに移動するときにコミットします。  
  
 行ヘッダーが表示されている場合は、鉛筆のグリフはコミットされていない変更を含むセルを含む行ヘッダーに存在します。  
  
 場合 <xref:System.Windows.Forms.DataGridView.IsCurrentCellDirty%2A> は `true` と現在のセルが編集中のコントロールをホスト、を介して取得できる、 <xref:System.Windows.Forms.DataGridView.EditingControl%2A> プロパティです。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Windows.Forms.DataGridView.IsCurrentCellDirty%2A> セルの値をコミットし、発生するかどうかを確認するに、 <xref:System.Windows.Forms.DataGridView.CellValueChanged> イベントのハンドラーを <xref:System.Windows.Forms.DataGridView.CurrentCellDirtyStateChanged> イベントです。 このコード例に示されている例の一部である [How to: Disable Buttons in a Button Column in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/5c344d01-013a-4a6b-8f8d-62ec9321d81e)です。  
  
 [!code-csharp[System.Windows.Forms.DataGridView.DisabledButtons\#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.DisabledButtons/CS/form1.cs#5)]
 [!code-vb[System.Windows.Forms.DataGridView.DisabledButtons\#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.DisabledButtons/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCurrentCellInEditMode">
      <MemberSignature Language="C#" Value="public bool IsCurrentCellInEditMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCurrentCellInEditMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.IsCurrentCellInEditMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在アクティブなセルが編集中かどうかを示す値を取得します。</summary>
        <value>現在のセルが編集中の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Windows.Forms.DataGridViewCheckBoxCell> フォーカスのある編集モードでは常にします。 現在のセルが編集中のコントロールをホストしている場合と <xref:System.Windows.Forms.DataGridView.IsCurrentCellInEditMode%2A> は `true`, 、使用して編集コントロールを取得する、 <xref:System.Windows.Forms.DataGridView.EditingControl%2A> プロパティです。  
  
   
  
## 例  
 次のコード例は、このプロパティの使用方法を示しています。 この例で使用できる例の一部である、 <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> リファレンス トピックです。  
  
 [!code-cpp[System.Windows.Forms.DataGridView.\_Virtual\#10](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/CPP/virtual.cpp#10)]
 [!code-csharp[System.Windows.Forms.DataGridView.\_Virtual\#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/CS/virtual.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridView.\_Virtual\#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/VB/virtual.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridView.CurrentCell" />
        <altmember cref="P:System.Windows.Forms.DataGridView.EditingControl" />
      </Docs>
    </Member>
    <Member MemberName="IsCurrentRowDirty">
      <MemberSignature Language="C#" Value="public bool IsCurrentRowDirty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCurrentRowDirty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.IsCurrentRowDirty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の行がコミットされていない変更を含んでいるかを示す値を取得します。</summary>
        <value>現在の行がコミットされていない変更を含む場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを返します `true` 鉛筆のグリフの行が表示される場合。 既定では、 <xref:System.Windows.Forms.DataGridView.IsCurrentRowDirty%2A> プロパティは常の値になります、 <xref:System.Windows.Forms.DataGridView.IsCurrentCellDirty%2A> プロパティには、しない限り、 <xref:System.Windows.Forms.DataGridView> 仮想モードまたは編集するには、サポートが実装されてこと行レベルのコミットのスコープを使用するデータ ソースにバインドします。 このような場合、 <xref:System.Windows.Forms.DataGridView> 、行レベルでは、このプロパティを評価します。  
  
 ユーザーは、行から移動した、コントロールは、すべての行の変更をコミットします。 ユーザーは、行を離れることがなく、行の変更をコミットするには、CTRL \+ ENTER を押してもできます。 プログラムを使用して行の変更をコミットするには、フォームを呼び出す <xref:System.Windows.Forms.ContainerControl.Validate%2A> メソッドです。 データ ソースがある場合、 <xref:System.Windows.Forms.BindingSource>, 、呼び出すこともできます<xref:System.Windows.Forms.BindingSource.EndEdit%2A?displayProperty=fullName>します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInputChar">
      <MemberSignature Language="C#" Value="protected override bool IsInputChar (char charCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsInputChar(char charCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.IsInputChar(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="charCode">テスト対象の文字。</param>
        <summary>文字が、<see cref="T:System.Windows.Forms.DataGridView" /> によって認識される入力文字かどうかを判断します。</summary>
        <returns>文字が入力文字として認識される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 文字は、コントロールが編集モードにするかどうかと、現在の編集コントロールが文字を受け入れるかどうかに応じて入力文字として認識されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInputKey">
      <MemberSignature Language="C#" Value="protected override bool IsInputKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsInputKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.IsInputKey(System.Windows.Forms.Keys)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">
          <see cref="T:System.Windows.Forms.Keys" /> 値のいずれか。</param>
        <summary>指定されているキーが、通常の入力キーであるか、またはプリプロセスを必要とする特殊なキーであるかを確認します。</summary>
        <returns>指定されているキーが通常の入力キーである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewCell this[int columnIndex, int rowIndex] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewCell Item(int32, int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.Item(System.Int32,System.Int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCell</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="columnIndex">セルを含む列のインデックス。</param>
        <param name="rowIndex">セルを含む行のインデックス。</param>
        <summary>指定したインデックスを持つ列と行の交差部分にあるセルを取得または設定するためのインデクサーを提供します。</summary>
        <value>指定した位置にある <see cref="T:System.Windows.Forms.DataGridViewCell" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このインデクサーからセルにアクセスするのには、 <xref:System.Windows.Forms.DataGridViewRow.Cells%2A> のコレクション、 <xref:System.Windows.Forms.DataGridView.Rows%2A> コレクションです。  
  
   
  
## 例  
 次のコード例では、このインデクサーの使用を示します。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc\#230](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#230)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc\#230](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#230)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndex" /> が、0 未満か、コントロール内の列数から 1 を引いた値を超えています。  
  
 または  
  
 <paramref name="rowIndex" /> が、0 未満か、コントロール内の行数から 1 を引いた値を超えています。</exception>
        <altmember cref="P:System.Windows.Forms.DataGridViewRow.Cells" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellCollection" />
        <altmember cref="P:System.Windows.Forms.DataGridView.Rows" />
        <altmember cref="T:System.Windows.Forms.DataGridViewRowCollection" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewCell this[string columnName, int rowIndex] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewCell Item(string, int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.Item(System.String,System.Int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCell</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="columnName">セルを含む列の名前。</param>
        <param name="rowIndex">セルを含む行のインデックス。</param>
        <summary>指定したインデックスを持つ行と指定した名前を持つ列の交差部分にあるセルを設定または取得するためのインデクサーを提供します。</summary>
        <value>指定したインデックス位置にある <see cref="T:System.Windows.Forms.DataGridViewCell" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このインデクサーからセルにアクセスするのには、 <xref:System.Windows.Forms.DataGridViewRow.Cells%2A> のコレクション、 <xref:System.Windows.Forms.DataGridView.Rows%2A> コレクションです。  
  
   
  
## 例  
 次のコード例では、このインデクサーの使用を示します。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc\#230](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#230)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc\#230](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#230)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridViewRow.Cells" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellCollection" />
        <altmember cref="P:System.Windows.Forms.DataGridView.Rows" />
        <altmember cref="T:System.Windows.Forms.DataGridViewRowCollection" />
      </Docs>
    </Member>
    <Member MemberName="MultiSelect">
      <MemberSignature Language="C#" Value="public bool MultiSelect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MultiSelect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.MultiSelect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーが <see cref="T:System.Windows.Forms.DataGridView" /> の複数のセル、行、または列を同時に選択できるかどうかを示す値を取得または設定します。</summary>
        <value>ユーザーが複数のセル、行、または列を同時に選択できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、 <xref:System.Windows.Forms.DataGridView.MultiSelect%2A> にプロパティが設定されている `true`, で複数の要素 \(セル、行、または列\) を選択できます、 <xref:System.Windows.Forms.DataGridView> コントロールです。 複数の要素を選択するには、ユーザーはながら選択する要素をクリックすると CTRL キーを保持できます。 最初の要素を選択\] をクリックし、選択するには、最後の要素をクリックすると、SHIFT キーを押しながら、連続する要素を選択することができます。 選択範囲のに基づいて、 <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> プロパティです。 たとえば場合、 <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> に設定されている <xref:System.Windows.Forms.DataGridViewSelectionMode.FullColumnSelect?displayProperty=fullName>, 、ユーザーが複数の列を選択します。  
  
 使用することができます、 <xref:System.Windows.Forms.DataGridView.MultiSelect%2A> で複数の要素を選択するユーザーを有効にするプロパティ、 <xref:System.Windows.Forms.DataGridView> を制御し、選択したすべての要素に対して演算を実行します。 たとえば、ユーザーは、複数のセルを選択し、選択したセルに実行するタスクのセットが表示されるショートカット メニューを表示する選択したセルを右クリックします。  
  
 選択するセル、行、または列を決めるため、 <xref:System.Windows.Forms.DataGridView> アクセスできる、コントロール、 <xref:System.Windows.Forms.DataGridView.SelectedCells%2A>, 、<xref:System.Windows.Forms.DataGridView.SelectedRows%2A>, 、または <xref:System.Windows.Forms.DataGridView.SelectedColumns%2A> プロパティです。 選択したセルの数を確認するのには、呼び出し、 <xref:System.Windows.Forms.DataGridView.GetCellCount%2A> メソッドの引数の値を <xref:System.Windows.Forms.DataGridViewElementStates.Selected?displayProperty=fullName>します。 使用、 <xref:System.Windows.Forms.DataGridViewRowCollection.GetRowCount%2A> を選択した行の数を取得するメソッドと <xref:System.Windows.Forms.DataGridViewColumnCollection.GetColumnCount%2A> 列の数を取得します。 これらのメソッドは、大量のデータを使用する場合、コレクションに直接アクセスするよりも効率的です。 詳細については、「[Best Practices for Scaling the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/8321a8a6-6340-4fd1-b475-fa090b905aaf)」を参照してください。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.DataGridView.MultiSelect%2A> プロパティです。 この例を実行するを含むフォームにコードを貼り付けます、 <xref:System.Windows.Forms.DataGridView> という名前 `dataGridView1`, 、まず、 `SetUpDataGridView` フォームのコンス トラクターからのメソッドまたは <xref:System.Windows.Forms.Form.Load> イベント ハンドラーです。 すべてのイベントがイベント ハンドラーに関連付けられていることを確認します。  
  
 [!code-cpp[System.Windows.Forms.GridViewUnbound\#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CPP/form1.cpp#5)]
 [!code-csharp[System.Windows.Forms.GridViewUnbound\#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CS/form1.cs#5)]
 [!code-vb[System.Windows.Forms.GridViewUnbound\#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiSelectChanged">
      <MemberSignature Language="C#" Value="public event EventHandler MultiSelectChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MultiSelectChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.MultiSelectChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridView.MultiSelect" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.MultiSelectChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.MultiSelectChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#273](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#273)]
 [!code-vb[System.Windows.Forms.EventExamples\#273](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#273)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewRowIndex">
      <MemberSignature Language="C#" Value="public int NewRowIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NewRowIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.NewRowIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>新しいレコードの行のインデックスを取得します。</summary>
        <value>新しいレコードの行のインデックス。<see cref="P:System.Windows.Forms.DataGridView.AllowUserToAddRows" /> が <see langword="false" /> の場合は \-1 になります。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 しない限り、 <xref:System.Windows.Forms.DataGridView.AllowUserToAddRows%2A> は `false`, 、このプロパティの値は 1 を引いた数値コントロールの行の数と同じです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewRowNeeded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowEventHandler NewRowNeeded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowEventHandler NewRowNeeded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.NewRowNeeded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> の <see cref="P:System.Windows.Forms.DataGridView.VirtualMode" /> プロパティが <see langword="true" /> で、ユーザーが <see cref="T:System.Windows.Forms.DataGridView" /> の下部にある新しい行に移動したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、 <xref:System.Windows.Forms.DataGridView> が仮想モードでこのイベントにより、新しい行のデータ ストア内に作成する新しいエントリとで行を既定値に設定することもできます。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Windows.Forms.DataGridView.NewRowNeeded> 新しい行追加するとき、そのロジックを追跡するイベントを <xref:System.Windows.Forms.DataGridView.CellValueNeeded> イベント ハンドラーが、初期値に新しい行のセルを初期化します。 この例で使用できる例の一部である、 <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> リファレンス トピックです。  
  
 [!code-cpp[System.Windows.Forms.DataGridView.\_Virtual\#20](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/CPP/virtual.cpp#20)]
 [!code-csharp[System.Windows.Forms.DataGridView.\_Virtual\#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/CS/virtual.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridView.\_Virtual\#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/VB/virtual.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyCurrentCellDirty">
      <MemberSignature Language="C#" Value="public virtual void NotifyCurrentCellDirty (bool dirty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NotifyCurrentCellDirty(bool dirty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.NotifyCurrentCellDirty(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dirty" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dirty">セルにコミットされていない変更があることを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>現在のセルにコミットされていない変更があることを <see cref="T:System.Windows.Forms.DataGridView" /> に通知します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、カスタムのセルへの通知に使用できます、 <xref:System.Windows.Forms.DataGridView> があるときにコミットされていない変更します。  
  
   
  
## 例  
 次のコード例では、カスタムのセルのシナリオでは、このメソッドの使用を示します。 例では、 <xref:System.Windows.Forms.IDataGridViewEditingControl> から派生して実装、 <xref:System.Windows.Forms.DateTimePicker> クラスのオーバーライド、 <xref:System.Windows.Forms.DateTimePicker.OnValueChanged%2A> メソッドを使用して、 <xref:System.Windows.Forms.DataGridView.NotifyCurrentCellDirty%2A> メソッドへの変更を示すために、 <xref:System.Windows.Forms.DataGridView> コントロールです。  
  
 この例に示すようにサンプルが大きくの一部である [How to: Host Controls in Windows Forms DataGridView Cells](http://msdn.microsoft.com/ja-jp/e79a9d4e-64ec-41f5-93ec-f5492633cbb2)です。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCalendarColumn\#310](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/CS/datagridviewcalendarcolumn.cs#310)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn\#310](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/VB/datagridviewcalendarcolumn.vb#310)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAllowUserToAddRowsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAllowUserToAddRowsChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAllowUserToAddRowsChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnAllowUserToAddRowsChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.AllowUserToAddRowsChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnAllowUserToAddRowsChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnAllowUserToAddRowsChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnAllowUserToAddRowsChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.DataGridView.AllowUserToAddRowsChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnAllowUserToDeleteRowsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAllowUserToDeleteRowsChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAllowUserToDeleteRowsChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnAllowUserToDeleteRowsChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.AllowUserToDeleteRowsChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnAllowUserToDeleteRowsChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnAllowUserToDeleteRowsChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnAllowUserToDeleteRowsChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.DataGridView.AllowUserToDeleteRowsChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnAllowUserToOrderColumnsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAllowUserToOrderColumnsChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAllowUserToOrderColumnsChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnAllowUserToOrderColumnsChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.AllowUserToOrderColumnsChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnAllowUserToOrderColumnsChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnAllowUserToOrderColumnsChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnAllowUserToOrderColumnsChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.DataGridView.AllowUserToOrderColumnsChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnAllowUserToResizeColumnsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAllowUserToResizeColumnsChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAllowUserToResizeColumnsChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnAllowUserToResizeColumnsChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.AllowUserToResizeColumnsChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnAllowUserToResizeColumnsChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnAllowUserToResizeColumnsChanged(System.EventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnAllowUserToResizeColumnsChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnAllowUserToResizeRowsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAllowUserToResizeRowsChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAllowUserToResizeRowsChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnAllowUserToResizeRowsChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.AllowUserToResizeRowsChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnAllowUserToResizeRowsChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnAllowUserToResizeRowsChanged(System.EventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnAllowUserToResizeRowsChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnAlternatingRowsDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAlternatingRowsDefaultCellStyleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAlternatingRowsDefaultCellStyleChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnAlternatingRowsDefaultCellStyleChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyleChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnAlternatingRowsDefaultCellStyleChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnAlternatingRowsDefaultCellStyleChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnAlternatingRowsDefaultCellStyleChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
      </Docs>
    </Member>
    <Member MemberName="OnAutoGenerateColumnsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAutoGenerateColumnsChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAutoGenerateColumnsChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnAutoGenerateColumnsChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.AutoGenerateColumnsChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnAutoGenerateColumnsChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnAutoGenerateColumnsChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnAutoGenerateColumnsChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnAutoSizeColumnModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAutoSizeColumnModeChanged (System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAutoSizeColumnModeChanged(class System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnAutoSizeColumnModeChanged(System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを含む <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.AutoSizeColumnModeChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnAutoSizeColumnModeChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs.Column" /> プロパティの値は NULL です。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnAutoSizeColumnModeChanged(System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnAutoSizeColumnModeChanged(System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnAutoSizeColumnsModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAutoSizeColumnsModeChanged (System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAutoSizeColumnsModeChanged(class System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnAutoSizeColumnsModeChanged(System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.AutoSizeColumnsModeChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnAutoSizeColumnsModeChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs.PreviousModes" /> プロパティの値が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs.PreviousModes" /> プロパティによって返される配列内のエントリの数が、コントロールの列数と等しくありません。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnAutoSizeColumnsModeChanged(System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnAutoSizeColumnsModeChanged(System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnAutoSizeRowsModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAutoSizeRowsModeChanged (System.Windows.Forms.DataGridViewAutoSizeModeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAutoSizeRowsModeChanged(class System.Windows.Forms.DataGridViewAutoSizeModeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnAutoSizeRowsModeChanged(System.Windows.Forms.DataGridViewAutoSizeModeEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewAutoSizeModeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewAutoSizeModeEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.AutoSizeRowsModeChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnAutoSizeRowsModeChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnAutoSizeRowsModeChanged(System.Windows.Forms.DataGridViewAutoSizeModeEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnAutoSizeRowsModeChanged(System.Windows.Forms.DataGridViewAutoSizeModeEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnBackgroundColorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBackgroundColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBackgroundColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnBackgroundColorChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.BackgroundColorChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnBackgroundColorChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnBackgroundColorChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnBackgroundColorChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnBindingContextChanged">
      <MemberSignature Language="C#" Value="protected override void OnBindingContextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnBindingContextChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnBindingContextChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.BindingContextChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnBindingContextChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnBindingContextChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnBindingContextChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnBorderStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBorderStyleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBorderStyleChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnBorderStyleChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.BorderStyleChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnBorderStyleChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnBorderStyleChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnBorderStyleChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCancelRowEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnCancelRowEdit (System.Windows.Forms.QuestionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCancelRowEdit(class System.Windows.Forms.QuestionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCancelRowEdit(System.Windows.Forms.QuestionEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.QuestionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.QuestionEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.CancelRowEdit" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnCancelRowEdit%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCancelRowEdit(System.Windows.Forms.QuestionEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnCancelRowEdit(System.Windows.Forms.QuestionEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCellBeginEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnCellBeginEdit (System.Windows.Forms.DataGridViewCellCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellBeginEdit(class System.Windows.Forms.DataGridViewCellCancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellBeginEdit(System.Windows.Forms.DataGridViewCellCancelEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewCellCancelEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.CellBeginEdit" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。[NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellBeginEdit%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellCancelEventArgs.ColumnIndex" /> プロパティの値が、コントロール内の列数から 1 を引いた値を超えています。  
  
 \-または\-  
  
 <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellCancelEventArgs.RowIndex" /> プロパティの値が、コントロール内の行数から 1 を引いた値を超えています。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCellBeginEdit(System.Windows.Forms.DataGridViewCellCancelEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnCellBeginEdit(System.Windows.Forms.DataGridViewCellCancelEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCellBorderStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCellBorderStyleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellBorderStyleChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellBorderStyleChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.CellBorderStyleChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellBorderStyleChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCellBorderStyleChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnCellBorderStyleChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCellClick">
      <MemberSignature Language="C#" Value="protected virtual void OnCellClick (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellClick(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellClick(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.CellClick" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。[NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellClick%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> プロパティの値が、コントロール内の列数 \- 1 より大きいです。  
  
 \-または\-  
  
 <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> プロパティの値が、コントロール内の行数 \- 1 より大きいです。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCellClick(System.Windows.Forms.DataGridViewCellEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnCellClick(System.Windows.Forms.DataGridViewCellEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCellContentClick">
      <MemberSignature Language="C#" Value="protected virtual void OnCellContentClick (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellContentClick(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellContentClick(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">内容がクリックされたセルに関する情報を格納している <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.CellContentClick" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellContentClick%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> プロパティの値が、コントロール内の列数から 1 を引いた値を超えています。  
  
 \-または\-  
  
 <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> プロパティの値が、コントロール内の行数 \- 1 より大きいです。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCellContentClick(System.Windows.Forms.DataGridViewCellEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnCellContentClick(System.Windows.Forms.DataGridViewCellEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCellContentDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnCellContentDoubleClick (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellContentDoubleClick(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellContentDoubleClick(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.CellContentDoubleClick" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellContentDoubleClick%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> プロパティの値が、コントロール内の列数 \- 1 より大きいです。  
  
 \-または\-  
  
 <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> プロパティの値が、コントロール内の行数 \- 1 より大きいです。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCellContentDoubleClick(System.Windows.Forms.DataGridViewCellEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnCellContentDoubleClick(System.Windows.Forms.DataGridViewCellEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCellContextMenuStripChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCellContextMenuStripChanged (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellContextMenuStripChanged(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellContextMenuStripChanged(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.CellContextMenuStripChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellContextMenuStripChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> プロパティの値が、コントロール内の列数 \- 1 より大きいです。  
  
 \-または\-  
  
 <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> プロパティの値が、コントロール内の行数 \- 1 より大きいです。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCellContextMenuStripChanged(System.Windows.Forms.DataGridViewCellEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnCellContextMenuStripChanged(System.Windows.Forms.DataGridViewCellEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCellContextMenuStripNeeded">
      <MemberSignature Language="C#" Value="protected virtual void OnCellContextMenuStripNeeded (System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellContextMenuStripNeeded(class System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellContextMenuStripNeeded(System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.CellContextMenuStripNeeded" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellContextMenuStripNeeded%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> プロパティの値が、コントロール内の列数 \- 1 より大きいです。  
  
 \-または\-  
  
 <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> プロパティの値が、コントロール内の行数 \- 1 より大きいです。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCellContextMenuStripNeeded(System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnCellContextMenuStripNeeded(System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.DataGridView.CellContextMenuStripNeeded" />
      </Docs>
    </Member>
    <Member MemberName="OnCellDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnCellDoubleClick (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellDoubleClick(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellDoubleClick(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.CellDoubleClick" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellDoubleClick%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> プロパティの値が、コントロール内の列数 \- 1 より大きいです。  
  
 \-または\-  
  
 <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> プロパティの値が、コントロール内の行数 \- 1 より大きいです。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCellDoubleClick(System.Windows.Forms.DataGridViewCellEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnCellDoubleClick(System.Windows.Forms.DataGridViewCellEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCellEndEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnCellEndEdit (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellEndEdit(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellEndEdit(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.CellEndEdit" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellEndEdit%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> プロパティの値が、コントロール内の列数 \- 1 より大きいです。  
  
 \-または\-  
  
 <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> プロパティの値が、コントロール内の行数 \- 1 より大きいです。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCellEndEdit(System.Windows.Forms.DataGridViewCellEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnCellEndEdit(System.Windows.Forms.DataGridViewCellEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCellEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnCellEnter (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellEnter(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellEnter(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.CellEnter" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellEnter%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> プロパティの値が、コントロール内の列数 \- 1 より大きいです。  
  
 \-または\-  
  
 <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> プロパティの値が、コントロール内の行数 \- 1 より大きいです。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCellEnter(System.Windows.Forms.DataGridViewCellEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnCellEnter(System.Windows.Forms.DataGridViewCellEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCellErrorTextChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCellErrorTextChanged (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellErrorTextChanged(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellErrorTextChanged(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.CellErrorTextChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellErrorTextChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> プロパティの値が \-1 未満か、またはコントロール内の列数から 1 を引いた値を超えています。  
  
 \-または\-  
  
 <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> プロパティの値が \-1 未満か、またはコントロール内の行数から 1 を引いた値を超えています。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCellErrorTextChanged(System.Windows.Forms.DataGridViewCellEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnCellErrorTextChanged(System.Windows.Forms.DataGridViewCellEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCellErrorTextNeeded">
      <MemberSignature Language="C#" Value="protected virtual void OnCellErrorTextNeeded (System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellErrorTextNeeded(class System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellErrorTextNeeded(System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.CellErrorTextNeeded" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellErrorTextNeeded%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> プロパティの値が、コントロール内の列数 \- 1 より大きいです。  
  
 \-または\-  
  
 <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> プロパティの値が、コントロール内の行数 \- 1 より大きいです。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCellErrorTextNeeded(System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnCellErrorTextNeeded(System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCellFormatting">
      <MemberSignature Language="C#" Value="protected virtual void OnCellFormatting (System.Windows.Forms.DataGridViewCellFormattingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellFormatting(class System.Windows.Forms.DataGridViewCellFormattingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellFormatting(System.Windows.Forms.DataGridViewCellFormattingEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellFormattingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewCellFormattingEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.CellFormatting" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellFormatting%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellFormattingEventArgs.ColumnIndex" /> プロパティの値が、コントロール内の列数から 1 を引いた値を超えています。  
  
 \-または\-  
  
 <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellFormattingEventArgs.RowIndex" /> プロパティの値が、コントロール内の行数から 1 を引いた値を超えています。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCellFormatting(System.Windows.Forms.DataGridViewCellFormattingEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnCellFormatting(System.Windows.Forms.DataGridViewCellFormattingEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCellLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnCellLeave (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellLeave(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellLeave(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.CellLeave" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。[NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellLeave%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> プロパティの値が、コントロール内の列数 \- 1 より大きいです。  
  
 \-または\-  
  
 <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> プロパティの値が、コントロール内の行数 \- 1 より大きいです。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCellLeave(System.Windows.Forms.DataGridViewCellEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnCellLeave(System.Windows.Forms.DataGridViewCellEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCellMouseClick">
      <MemberSignature Language="C#" Value="protected virtual void OnCellMouseClick (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellMouseClick(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellMouseClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.CellMouseClick" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellMouseClick%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.ColumnIndex" /> プロパティの値が、コントロール内の列数から 1 を引いた値を超えています。  
  
 \-または\-  
  
 <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.RowIndex" /> プロパティの値が、コントロール内の行数から 1 を引いた値を超えています。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCellMouseClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnCellMouseClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCellMouseDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnCellMouseDoubleClick (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellMouseDoubleClick(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellMouseDoubleClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.CellMouseDoubleClick" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 通常、セルをダブルクリックすると、セル編集モードにします。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellMouseDoubleClick%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.ColumnIndex" /> プロパティの値が、コントロール内の列数から 1 を引いた値を超えています。  
  
 \-または\-  
  
 <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.RowIndex" /> プロパティの値が、コントロール内の行数から 1 を引いた値を超えています。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCellMouseDoubleClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnCellMouseDoubleClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCellMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnCellMouseDown (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellMouseDown(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellMouseDown(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.CellMouseDown" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 The <xref:System.Windows.Forms.DataGridView.OnCellMouseDown%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.ColumnIndex" /> プロパティの値が、コントロール内の列数から 1 を引いた値を超えています。  
  
 \-または\-  
  
 <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.RowIndex" /> プロパティの値が、コントロール内の行数から 1 を引いた値を超えています。</exception>
        <exception cref="T:System.Exception">この操作を行うと、本来はセル値がコミットされるか、または編集モードに切り替わるところですが、データ ソースのエラーのためにその操作は実行できず、<see cref="E:System.Windows.Forms.DataGridView.DataError" /> イベントのハンドラーがない状態か、ハンドラーが <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> プロパティを <see langword="true" /> に設定している状態になります。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCellMouseDown(System.Windows.Forms.DataGridViewCellMouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnCellMouseDown(System.Windows.Forms.DataGridViewCellMouseEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCellMouseEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnCellMouseEnter (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellMouseEnter(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellMouseEnter(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.CellMouseEnter" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。[NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellMouseEnter%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> プロパティの値が、コントロール内の列数 \- 1 より大きいです。  
  
 \-または\-  
  
 <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> プロパティの値が、コントロール内の行数 \- 1 より大きいです。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCellMouseEnter(System.Windows.Forms.DataGridViewCellEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnCellMouseEnter(System.Windows.Forms.DataGridViewCellEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCellMouseLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnCellMouseLeave (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellMouseLeave(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellMouseLeave(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.CellMouseLeave" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellMouseLeave%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> プロパティの値が、コントロール内の列数 \- 1 より大きいです。  
  
 \-または\-  
  
 <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> プロパティの値が、コントロール内の行数 \- 1 より大きいです。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCellMouseLeave(System.Windows.Forms.DataGridViewCellEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnCellMouseLeave(System.Windows.Forms.DataGridViewCellEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCellMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnCellMouseMove (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellMouseMove(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellMouseMove(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.CellMouseMove" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellMouseMove%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.ColumnIndex" /> プロパティの値が、コントロール内の列数から 1 を引いた値を超えています。  
  
 \-または\-  
  
 <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.RowIndex" /> プロパティの値が、コントロール内の行数から 1 を引いた値を超えています。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCellMouseMove(System.Windows.Forms.DataGridViewCellMouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnCellMouseMove(System.Windows.Forms.DataGridViewCellMouseEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCellMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnCellMouseUp (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellMouseUp(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellMouseUp(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.CellMouseUp" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellMouseUp%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.ColumnIndex" /> プロパティの値が、コントロール内の列数から 1 を引いた値を超えています。  
  
 \-または\-  
  
 <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.RowIndex" /> プロパティの値が、コントロール内の行数から 1 を引いた値を超えています。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCellMouseUp(System.Windows.Forms.DataGridViewCellMouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnCellMouseUp(System.Windows.Forms.DataGridViewCellMouseEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCellPainting">
      <MemberSignature Language="C#" Value="protected virtual void OnCellPainting (System.Windows.Forms.DataGridViewCellPaintingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnCellPainting(class System.Windows.Forms.DataGridViewCellPaintingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellPainting(System.Windows.Forms.DataGridViewCellPaintingEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellPaintingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewCellPaintingEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.CellPainting" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellPainting%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellPaintingEventArgs.ColumnIndex" /> プロパティの値が、コントロール内の列数から 1 を引いた値を超えています。  
  
 \-または\-  
  
 <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellPaintingEventArgs.RowIndex" /> プロパティの値が、コントロール内の行数から 1 を引いた値を超えています。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCellPainting(System.Windows.Forms.DataGridViewCellPaintingEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnCellPainting(System.Windows.Forms.DataGridViewCellPaintingEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCellParsing">
      <MemberSignature Language="C#" Value="protected virtual void OnCellParsing (System.Windows.Forms.DataGridViewCellParsingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellParsing(class System.Windows.Forms.DataGridViewCellParsingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellParsing(System.Windows.Forms.DataGridViewCellParsingEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellParsingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewCellParsingEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.CellParsing" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellParsing%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellParsingEventArgs.ColumnIndex" /> プロパティの値が、コントロール内の列数から 1 を引いた値を超えています。  
  
 \-または\-  
  
 <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellParsingEventArgs.RowIndex" /> プロパティの値が、コントロール内の行数から 1 を引いた値を超えています。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCellParsing(System.Windows.Forms.DataGridViewCellParsingEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnCellParsing(System.Windows.Forms.DataGridViewCellParsingEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCellStateChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCellStateChanged (System.Windows.Forms.DataGridViewCellStateChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellStateChanged(class System.Windows.Forms.DataGridViewCellStateChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellStateChanged(System.Windows.Forms.DataGridViewCellStateChangedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellStateChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewCellStateChangedEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.CellStateChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellStateChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCellStateChanged(System.Windows.Forms.DataGridViewCellStateChangedEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnCellStateChanged(System.Windows.Forms.DataGridViewCellStateChangedEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCellStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCellStyleChanged (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellStyleChanged(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellStyleChanged(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.CellStyleChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellStyleChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> プロパティの値が、コントロール内の列数 \- 1 より大きいです。  
  
 \-または\-  
  
 <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> プロパティの値が、コントロール内の行数 \- 1 より大きいです。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCellStyleChanged(System.Windows.Forms.DataGridViewCellEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnCellStyleChanged(System.Windows.Forms.DataGridViewCellEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
      </Docs>
    </Member>
    <Member MemberName="OnCellStyleContentChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCellStyleContentChanged (System.Windows.Forms.DataGridViewCellStyleContentChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellStyleContentChanged(class System.Windows.Forms.DataGridViewCellStyleContentChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellStyleContentChanged(System.Windows.Forms.DataGridViewCellStyleContentChangedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellStyleContentChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewCellStyleContentChangedEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.CellStyleContentChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellStyleContentChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCellStyleContentChanged(System.Windows.Forms.DataGridViewCellStyleContentChangedEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnCellStyleContentChanged(System.Windows.Forms.DataGridViewCellStyleContentChangedEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellStyleContentChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnCellToolTipTextChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCellToolTipTextChanged (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellToolTipTextChanged(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellToolTipTextChanged(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">セルに関する情報を格納している <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.CellToolTipTextChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellToolTipTextChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> プロパティの値が、コントロール内の列数から 1 を引いた値を超えています。  
  
 \-または\-  
  
 <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> プロパティの値が、コントロール内の行数 \- 1 より大きいです。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCellToolTipTextChanged(System.Windows.Forms.DataGridViewCellEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnCellToolTipTextChanged(System.Windows.Forms.DataGridViewCellEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCellToolTipTextNeeded">
      <MemberSignature Language="C#" Value="protected virtual void OnCellToolTipTextNeeded (System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellToolTipTextNeeded(class System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellToolTipTextNeeded(System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを含む <see cref="T:System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.CellToolTipTextNeeded" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellToolTipTextNeeded%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> プロパティの値が、コントロール内の列数 \- 1 より大きいです。  
  
 \-または\-  
  
 <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> プロパティの値が、コントロール内の行数 \- 1 より大きいです。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCellToolTipTextNeeded(System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnCellToolTipTextNeeded(System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCellValidated">
      <MemberSignature Language="C#" Value="protected virtual void OnCellValidated (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellValidated(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellValidated(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.CellValidated" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellValidated%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> プロパティの値が、コントロール内の列数 \- 1 より大きいです。  
  
 \-または\-  
  
 <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> プロパティの値が、コントロール内の行数 \- 1 より大きいです。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCellValidated(System.Windows.Forms.DataGridViewCellEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnCellValidated(System.Windows.Forms.DataGridViewCellEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCellValidating">
      <MemberSignature Language="C#" Value="protected virtual void OnCellValidating (System.Windows.Forms.DataGridViewCellValidatingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellValidating(class System.Windows.Forms.DataGridViewCellValidatingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellValidating(System.Windows.Forms.DataGridViewCellValidatingEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellValidatingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewCellValidatingEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.CellValidating" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellValidating%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellValidatingEventArgs.ColumnIndex" /> プロパティの値が、コントロール内の列数から 1 を引いた値を超えています。  
  
 \-または\-  
  
 <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellValidatingEventArgs.RowIndex" /> プロパティの値が、コントロール内の行数から 1 を引いた値を超えています。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCellValidating(System.Windows.Forms.DataGridViewCellValidatingEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnCellValidating(System.Windows.Forms.DataGridViewCellValidatingEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.DataGridView.CellValidating" />
      </Docs>
    </Member>
    <Member MemberName="OnCellValueChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCellValueChanged (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellValueChanged(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellValueChanged(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.CellValueChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellValueChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> プロパティの値が、コントロール内の列数 \- 1 より大きいです。  
  
 \-または\-  
  
 <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> プロパティの値が、コントロール内の行数 \- 1 より大きいです。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCellValueChanged(System.Windows.Forms.DataGridViewCellEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnCellValueChanged(System.Windows.Forms.DataGridViewCellEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCellValueNeeded">
      <MemberSignature Language="C#" Value="protected virtual void OnCellValueNeeded (System.Windows.Forms.DataGridViewCellValueEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellValueNeeded(class System.Windows.Forms.DataGridViewCellValueEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellValueNeeded(System.Windows.Forms.DataGridViewCellValueEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellValueEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewCellValueEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.CellValueNeeded" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellValueNeeded%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellValueEventArgs.ColumnIndex" /> プロパティの値が、0 未満か、コントロール内の列数から 1 を引いた値を超えています。  
  
 または  
  
 <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellValueEventArgs.RowIndex" /> プロパティの値が、0 未満か、コントロール内の行数から 1 を引いた値を超えています。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCellValueNeeded(System.Windows.Forms.DataGridViewCellValueEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnCellValueNeeded(System.Windows.Forms.DataGridViewCellValueEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.DataGridView.CellValueNeeded" />
      </Docs>
    </Member>
    <Member MemberName="OnCellValuePushed">
      <MemberSignature Language="C#" Value="protected virtual void OnCellValuePushed (System.Windows.Forms.DataGridViewCellValueEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellValuePushed(class System.Windows.Forms.DataGridViewCellValueEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellValuePushed(System.Windows.Forms.DataGridViewCellValueEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellValueEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewCellValueEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.CellValuePushed" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellValuePushed%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellValueEventArgs.ColumnIndex" /> プロパティの値が、0 未満か、コントロール内の列数から 1 を引いた値を超えています。  
  
 または  
  
 <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellValueEventArgs.RowIndex" /> プロパティの値が、0 未満か、コントロール内の行数から 1 を引いた値を超えています。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCellValuePushed(System.Windows.Forms.DataGridViewCellValueEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnCellValuePushed(System.Windows.Forms.DataGridViewCellValueEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.DataGridView.CellValuePushed" />
      </Docs>
    </Member>
    <Member MemberName="OnColumnAdded">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnAdded (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnAdded(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnAdded(System.Windows.Forms.DataGridViewColumnEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.ColumnAdded" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnAdded%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> プロパティで示されている列が、この <see cref="T:System.Windows.Forms.DataGridView" /> コントロールに属していません。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnColumnAdded(System.Windows.Forms.DataGridViewColumnEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnColumnAdded(System.Windows.Forms.DataGridViewColumnEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnContextMenuStripChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnContextMenuStripChanged (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnContextMenuStripChanged(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnContextMenuStripChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.ColumnContextMenuStripChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnContextMenuStripChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> プロパティで示されている列が、この <see cref="T:System.Windows.Forms.DataGridView" /> コントロールに属していません。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnColumnContextMenuStripChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnColumnContextMenuStripChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnDataPropertyNameChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnDataPropertyNameChanged (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnDataPropertyNameChanged(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnDataPropertyNameChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.ColumnDataPropertyNameChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnDataPropertyNameChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> プロパティで示されている列が、この <see cref="T:System.Windows.Forms.DataGridView" /> コントロールに属していません。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnColumnDataPropertyNameChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnColumnDataPropertyNameChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnDefaultCellStyleChanged (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnDefaultCellStyleChanged(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnDefaultCellStyleChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.ColumnDefaultCellStyleChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnDefaultCellStyleChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> プロパティで示されている列が、この <see cref="T:System.Windows.Forms.DataGridView" /> コントロールに属していません。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnColumnDefaultCellStyleChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnColumnDefaultCellStyleChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
      </Docs>
    </Member>
    <Member MemberName="OnColumnDisplayIndexChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnDisplayIndexChanged (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnDisplayIndexChanged(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnDisplayIndexChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.ColumnDisplayIndexChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnDisplayIndexChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> プロパティで示されている列が、この <see cref="T:System.Windows.Forms.DataGridView" /> コントロールに属していません。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnColumnDisplayIndexChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnColumnDisplayIndexChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnDividerDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnDividerDoubleClick (System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnDividerDoubleClick(class System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnDividerDoubleClick(System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.ColumnDividerDoubleClick" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnDividerDoubleClick%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnColumnDividerDoubleClick(System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnColumnDividerDoubleClick(System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnDividerWidthChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnDividerWidthChanged (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnDividerWidthChanged(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnDividerWidthChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.ColumnDividerWidthChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnDividerWidthChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> プロパティで示されている列が、この <see cref="T:System.Windows.Forms.DataGridView" /> コントロールに属していません。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnColumnDividerWidthChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnColumnDividerWidthChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnHeaderCellChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnHeaderCellChanged (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnHeaderCellChanged(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnHeaderCellChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.ColumnHeaderCellChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnHeaderCellChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> プロパティで示されている列が、この <see cref="T:System.Windows.Forms.DataGridView" /> コントロールに属していません。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnColumnHeaderCellChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnColumnHeaderCellChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnHeaderMouseClick">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnHeaderMouseClick (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnHeaderMouseClick(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnHeaderMouseClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.ColumnHeaderMouseClick" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnHeaderMouseClick%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.ColumnIndex" /> プロパティの値が、0 未満か、コントロール内の列数から 1 を引いた値を超えています。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnColumnHeaderMouseClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnColumnHeaderMouseClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnHeaderMouseDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnHeaderMouseDoubleClick (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnHeaderMouseDoubleClick(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnHeaderMouseDoubleClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">セルおよびマウス ポインターの位置に関する情報を格納している <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.ColumnHeaderMouseDoubleClick" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnHeaderMouseDoubleClick%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnColumnHeaderMouseDoubleClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnColumnHeaderMouseDoubleClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnHeadersBorderStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnHeadersBorderStyleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnHeadersBorderStyleChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnHeadersBorderStyleChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyleChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnHeadersBorderStyleChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnColumnHeadersBorderStyleChanged(System.EventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnColumnHeadersBorderStyleChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnHeadersDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnHeadersDefaultCellStyleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnHeadersDefaultCellStyleChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnHeadersDefaultCellStyleChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyleChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnHeadersDefaultCellStyleChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnColumnHeadersDefaultCellStyleChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnColumnHeadersDefaultCellStyleChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
      </Docs>
    </Member>
    <Member MemberName="OnColumnHeadersHeightChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnHeadersHeightChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnHeadersHeightChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnHeadersHeightChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.ColumnHeadersHeightChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnHeadersHeightChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnColumnHeadersHeightChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnColumnHeadersHeightChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnHeadersHeightSizeModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnHeadersHeightSizeModeChanged (System.Windows.Forms.DataGridViewAutoSizeModeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnHeadersHeightSizeModeChanged(class System.Windows.Forms.DataGridViewAutoSizeModeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnHeadersHeightSizeModeChanged(System.Windows.Forms.DataGridViewAutoSizeModeEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewAutoSizeModeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewAutoSizeModeEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeModeChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnHeadersHeightSizeModeChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnColumnHeadersHeightSizeModeChanged(System.Windows.Forms.DataGridViewAutoSizeModeEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnColumnHeadersHeightSizeModeChanged(System.Windows.Forms.DataGridViewAutoSizeModeEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnMinimumWidthChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnMinimumWidthChanged (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnMinimumWidthChanged(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnMinimumWidthChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.ColumnMinimumWidthChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnMinimumWidthChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> プロパティで示されている列が、この <see cref="T:System.Windows.Forms.DataGridView" /> コントロールに属していません。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnColumnMinimumWidthChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnColumnMinimumWidthChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnNameChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnNameChanged (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnNameChanged(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnNameChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.ColumnNameChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnNameChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> プロパティで示されている列が、この <see cref="T:System.Windows.Forms.DataGridView" /> コントロールに属していません。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnColumnNameChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnColumnNameChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnRemoved">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnRemoved (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnRemoved(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnRemoved(System.Windows.Forms.DataGridViewColumnEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.ColumnRemoved" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnRemoved%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnColumnRemoved(System.Windows.Forms.DataGridViewColumnEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnColumnRemoved(System.Windows.Forms.DataGridViewColumnEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnSortModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnSortModeChanged (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnSortModeChanged(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnSortModeChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.ColumnSortModeChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 **g tag is not supported!!!!**  
します。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnSortModeChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> プロパティで示されている列が、この <see cref="T:System.Windows.Forms.DataGridView" /> コントロールに属していません。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnColumnSortModeChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnColumnSortModeChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnStateChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnStateChanged (System.Windows.Forms.DataGridViewColumnStateChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnStateChanged(class System.Windows.Forms.DataGridViewColumnStateChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnStateChanged(System.Windows.Forms.DataGridViewColumnStateChangedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnStateChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewColumnStateChangedEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.ColumnStateChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnStateChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">列が読み取り専用から読み取り\/書き込みに変更され、現在のセルは編集モードになることが可能になりますが、現在のセルの <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> プロパティは、<see cref="T:System.Windows.Forms.Control" /> から派生して <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> を実装するクラスを示していません。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnColumnStateChanged(System.Windows.Forms.DataGridViewColumnStateChangedEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnColumnStateChanged(System.Windows.Forms.DataGridViewColumnStateChangedEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.DataGridView.ColumnStateChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnColumnToolTipTextChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnToolTipTextChanged (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnToolTipTextChanged(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnToolTipTextChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">列に関する情報を格納する <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.ColumnToolTipTextChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnToolTipTextChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> プロパティで示されている列が、この <see cref="T:System.Windows.Forms.DataGridView" /> コントロールに属していません。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnColumnToolTipTextChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnColumnToolTipTextChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnWidthChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnWidthChanged (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnWidthChanged(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnWidthChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.ColumnWidthChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnWidthChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> プロパティで示されている列が、この <see cref="T:System.Windows.Forms.DataGridView" /> コントロールに属していません。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnColumnWidthChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnColumnWidthChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCurrentCellChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCurrentCellChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCurrentCellChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCurrentCellChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.CurrentCellChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnCurrentCellChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCurrentCellChanged(System.EventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnCurrentCellChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCurrentCellDirtyStateChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCurrentCellDirtyStateChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCurrentCellDirtyStateChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCurrentCellDirtyStateChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.CurrentCellDirtyStateChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnCurrentCellDirtyStateChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCurrentCellDirtyStateChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnCurrentCellDirtyStateChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCursorChanged">
      <MemberSignature Language="C#" Value="protected override void OnCursorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnCursorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCursorChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>カーソルがユーザー コードで変更された場合は、<see cref="E:System.Windows.Forms.Control.CursorChanged" /> イベントを発生させて、<see cref="P:System.Windows.Forms.DataGridView.UserSetCursor" /> プロパティを更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.DataGridView> コントロールの変更、 <xref:System.Windows.Forms.Control.Cursor%2A> マウス ポインターの場所に応じてプロパティの値。<xref:System.Windows.Forms.DataGridView.UserSetCursor%2A> プロパティの標準の値を格納する、 <xref:System.Windows.Forms.Control.Cursor%2A> プロパティとコントロールの変更が無視されます。 このメソッドが呼び出されます、 <xref:System.Windows.Forms.Control.CursorChanged> イベントが発生し、更新、 <xref:System.Windows.Forms.DataGridView.UserSetCursor%2A> プロパティ、イベント ハンドラーを呼び出すだけでなく、必要な場合です。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnCursorChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnCursorChanged(System.EventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnCursorChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.DataGridView.UserSetCursor" />
        <altmember cref="T:System.Windows.Forms.Cursor" />
        <altmember cref="E:System.Windows.Forms.Control.CursorChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnDataBindingComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnDataBindingComplete (System.Windows.Forms.DataGridViewBindingCompleteEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDataBindingComplete(class System.Windows.Forms.DataGridViewBindingCompleteEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnDataBindingComplete(System.Windows.Forms.DataGridViewBindingCompleteEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewBindingCompleteEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewBindingCompleteEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.DataBindingComplete" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 データが変更された場合に、バインディング操作が発生するときに、 <xref:System.Windows.Forms.CurrencyManager> 使用されています。 たとえば場合、 <xref:System.Windows.Forms.CurrencyManager.ListChanged> イベントが発生する、 <xref:System.Windows.Forms.DataGridView> はそのビューを更新し、発生させる、 <xref:System.Windows.Forms.DataGridView.DataBindingComplete> イベントが完了するとします。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.DataGridView.DataBindingComplete" />
      </Docs>
    </Member>
    <Member MemberName="OnDataError">
      <MemberSignature Language="C#" Value="protected virtual void OnDataError (bool displayErrorDialogIfNoHandler, System.Windows.Forms.DataGridViewDataErrorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDataError(bool displayErrorDialogIfNoHandler, class System.Windows.Forms.DataGridViewDataErrorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnDataError(System.Boolean,System.Windows.Forms.DataGridViewDataErrorEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="displayErrorDialogIfNoHandler" Type="System.Boolean" />
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewDataErrorEventArgs" />
      </Parameters>
      <Docs>
        <param name="displayErrorDialogIfNoHandler">
          <see cref="E:System.Windows.Forms.DataGridView.DataError" /> イベントのハンドラーがないときにエラー ダイアログ ボックスを表示する場合は <see langword="true" />。</param>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewDataErrorEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.DataError" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnDataError%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnDataError(System.Boolean,System.Windows.Forms.DataGridViewDataErrorEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnDataError(System.Boolean,System.Windows.Forms.DataGridViewDataErrorEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDataMemberChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnDataMemberChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDataMemberChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnDataMemberChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.DataMemberChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnDataMemberChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnDataMemberChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnDataMemberChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDataSourceChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnDataSourceChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDataSourceChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnDataSourceChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.DataSourceChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnDataSourceChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnDataSourceChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnDataSourceChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnDefaultCellStyleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDefaultCellStyleChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnDefaultCellStyleChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.DefaultCellStyleChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnDefaultCellStyleChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnDefaultCellStyleChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnDefaultCellStyleChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
      </Docs>
    </Member>
    <Member MemberName="OnDefaultValuesNeeded">
      <MemberSignature Language="C#" Value="protected virtual void OnDefaultValuesNeeded (System.Windows.Forms.DataGridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDefaultValuesNeeded(class System.Windows.Forms.DataGridViewRowEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnDefaultValuesNeeded(System.Windows.Forms.DataGridViewRowEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.DefaultValuesNeeded" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnDefaultValuesNeeded%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnDefaultValuesNeeded(System.Windows.Forms.DataGridViewRowEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnDefaultValuesNeeded(System.Windows.Forms.DataGridViewRowEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDoubleClick">
      <MemberSignature Language="C#" Value="protected override void OnDoubleClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDoubleClick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnDoubleClick(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.DoubleClick" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnDoubleClick%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnDoubleClick(System.EventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnDoubleClick(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnEditingControlShowing">
      <MemberSignature Language="C#" Value="protected virtual void OnEditingControlShowing (System.Windows.Forms.DataGridViewEditingControlShowingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnEditingControlShowing(class System.Windows.Forms.DataGridViewEditingControlShowingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnEditingControlShowing(System.Windows.Forms.DataGridViewEditingControlShowingEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewEditingControlShowingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">編集中のコントロールに関する情報を格納している <see cref="T:System.Windows.Forms.DataGridViewEditingControlShowingEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.EditingControlShowing" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnEditingControlShowing%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnEditingControlShowing(System.Windows.Forms.DataGridViewEditingControlShowingEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnEditingControlShowing(System.Windows.Forms.DataGridViewEditingControlShowingEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnEditModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnEditModeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnEditModeChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnEditModeChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.EditModeChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.DataGridView.EditModeChanged> イベントが発生するたびに、 <xref:System.Windows.Forms.DataGridView.EditMode%2A> プロパティが変更されました。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnEditModeChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">編集モードに切り替わると、現在のセルの <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> プロパティには <see cref="T:System.Windows.Forms.Control" /> から派生して <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> を実装するクラスは示されません。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnEditModeChanged(System.EventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnEditModeChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnEnabledChanged">
      <MemberSignature Language="C#" Value="protected override void OnEnabledChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnEnabledChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnEnabledChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.EnabledChanged" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnEnter">
      <MemberSignature Language="C#" Value="protected override void OnEnter (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnEnter(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnEnter(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.Enter" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnEnter%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">コントロールは、フォーカスを受け取ると編集モードに切り替わるように設定されていますが、フォーカスに入る時には、現在のセルの <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> プロパティに <see cref="T:System.Windows.Forms.Control" /> から派生して <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> を実装するクラスは示されません。</exception>
        <exception cref="T:System.Exception">コントロールは、フォーカスを受け取ると編集モードに切り替わるように設定されていますが、編集セルの値の初期化が失敗して、<see cref="E:System.Windows.Forms.DataGridView.DataError" /> イベントのハンドラーがないか、ハンドラーが <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> プロパティを <see langword="true" /> に設定しているかのいずれかの状態になっています。 通常、例外オブジェクトは型 <see cref="T:System.FormatException" /> にキャストできます。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnEnter(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnEnter(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected override void OnFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnFontChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.FontChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 上げるに加え、 <xref:System.Windows.Forms.DataGridView.FontChanged> イベント、このメソッドは、の新しい値を使用して、 <xref:System.Windows.Forms.DataGridView.Font%2A> プロパティを更新する、 <xref:System.Windows.Forms.DataGridViewCellStyle.Font%2A> のプロパティ <xref:System.Windows.Forms.DataGridViewCellStyle> によって返されるオブジェクト、 <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A>, 、<xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A>, 、および <xref:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyle%2A>プロパティです。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnFontChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnFontChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnFontChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnForeColorChanged">
      <MemberSignature Language="C#" Value="protected override void OnForeColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnForeColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnForeColorChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.ForeColorChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 上げるに加え、 <xref:System.Windows.Forms.DataGridView.FontChanged> イベント、このメソッドは、の新しい値を使用して、 <xref:System.Windows.Forms.DataGridView.ForeColor%2A> プロパティを更新する、 <xref:System.Windows.Forms.DataGridViewCellStyle.ForeColor%2A> プロパティの <xref:System.Windows.Forms.DataGridViewCellStyle> によって返される、 <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> プロパティです。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnForeColorChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnForeColorChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnForeColorChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected override void OnGotFocus (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnGotFocus(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnGotFocus(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.GotFocus" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnGridColorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnGridColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGridColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnGridColorChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.GridColorChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnGridColorChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnGridColorChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnGridColorChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnHandleCreated(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.HandleCreated" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnHandleCreated%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnHandleCreated(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnHandleCreated(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnHandleDestroyed">
      <MemberSignature Language="C#" Value="protected override void OnHandleDestroyed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleDestroyed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnHandleDestroyed(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.HandleDestroyed" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected override void OnKeyDown (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyDown(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.KeyEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.KeyDown" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnKeyDown%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">本来はこのアクションによってコントロールが編集モードになるところですが、編集セルの値の初期化は失敗し、また <see cref="E:System.Windows.Forms.DataGridView.DataError" /> イベントのハンドラーがない状態、またはハンドラーが <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> プロパティを <see langword="true" /> に設定している状態のいずれかになります。 通常、例外オブジェクトは型 <see cref="T:System.FormatException" /> にキャストできます。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnKeyDown(System.Windows.Forms.KeyEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnKeyDown(System.Windows.Forms.KeyEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnKeyPress">
      <MemberSignature Language="C#" Value="protected override void OnKeyPress (System.Windows.Forms.KeyPressEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyPress(class System.Windows.Forms.KeyPressEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyPressEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.KeyPressEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.KeyPress" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnKeyPress%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected override void OnKeyUp (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyUp(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.KeyEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.KeyUp" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnKeyUp%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnKeyUp(System.Windows.Forms.KeyEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnKeyUp(System.Windows.Forms.KeyEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnLayout">
      <MemberSignature Language="C#" Value="protected override void OnLayout (System.Windows.Forms.LayoutEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnLayout(class System.Windows.Forms.LayoutEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnLayout(System.Windows.Forms.LayoutEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.LayoutEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.LayoutEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.Layout" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnLayout%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnLayout(System.Windows.Forms.LayoutEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnLayout(System.Windows.Forms.LayoutEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnLeave">
      <MemberSignature Language="C#" Value="protected override void OnLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnLeave(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.Leave" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnLeave%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnLeave(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnLeave(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnLostFocus">
      <MemberSignature Language="C#" Value="protected override void OnLostFocus (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnLostFocus(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnLostFocus(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.LostFocus" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseClick">
      <MemberSignature Language="C#" Value="protected override void OnMouseClick (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseClick(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnMouseClick(System.Windows.Forms.MouseEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.MouseEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.MouseClick" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnMouseClick%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例では、このメソッドの使用方法を示します。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc2\#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc2/cs/misc2.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc2\#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc2/vb/misc2.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">コントロールは、フォーカスを受け取ると編集モードに切り替わるように設定されていますが、編集セルの値の初期化ができなくなり、また <see cref="E:System.Windows.Forms.DataGridView.DataError" /> イベントのハンドラーがないか、ハンドラーが <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> プロパティを <see langword="true" /> に設定しているかのいずれかの状態になります。 通常、例外オブジェクトは型 <see cref="T:System.FormatException" /> にキャストできます。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnMouseClick(System.Windows.Forms.MouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnMouseClick(System.Windows.Forms.MouseEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDoubleClick">
      <MemberSignature Language="C#" Value="protected override void OnMouseDoubleClick (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseDoubleClick(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.MouseEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.MouseDoubleClick" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected override void OnMouseDown (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseDown(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnMouseDown(System.Windows.Forms.MouseEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.MouseEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.MouseDown" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnMouseDown%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">コントロールは、フォーカスを受け取ると編集モードに切り替わるように設定されていますが、編集セルの値の初期化ができなくなり、また <see cref="E:System.Windows.Forms.DataGridView.DataError" /> イベントのハンドラーがないか、ハンドラーが <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> プロパティを <see langword="true" /> に設定しているかのいずれかの状態になります。 通常、例外オブジェクトは型 <see cref="T:System.FormatException" /> にキャストできます。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnMouseDown(System.Windows.Forms.MouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnMouseDown(System.Windows.Forms.MouseEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected override void OnMouseEnter (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseEnter(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnMouseEnter(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.ButtonBase.OnMouseEnter(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected override void OnMouseLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnMouseLeave(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.MouseLeave" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnMouseLeave%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例は、このメソッドの使用方法を示しています。 この例で使用できる例の一部である [How to: Customize Cells and Columns in the Windows Forms DataGridView Control by Extending Their Behavior and Appearance](http://msdn.microsoft.com/ja-jp/9b7dc7b6-5ce6-4566-9949-902f74f17a81)です。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewRolloverCell\#220](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRolloverCell/CS/rollovercell.cs#220)]
 [!code-vb[System.Windows.Forms.DataGridViewRolloverCell\#220](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRolloverCell/VB/rollovercell.vb#220)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnMouseLeave(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnMouseLeave(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected override void OnMouseMove (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseMove(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnMouseMove(System.Windows.Forms.MouseEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.MouseEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.MouseMove" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnMouseMove%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnMouseMove(System.Windows.Forms.MouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnMouseMove(System.Windows.Forms.MouseEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected override void OnMouseUp (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseUp(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnMouseUp(System.Windows.Forms.MouseEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.MouseEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.MouseUp" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnMouseUp%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnMouseUp(System.Windows.Forms.MouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnMouseUp(System.Windows.Forms.MouseEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseWheel">
      <MemberSignature Language="C#" Value="protected override void OnMouseWheel (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseWheel(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.MouseEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.MouseWheel" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnMultiSelectChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnMultiSelectChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMultiSelectChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnMultiSelectChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.MultiSelectChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnMultiSelectChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnMultiSelectChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnMultiSelectChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnNewRowNeeded">
      <MemberSignature Language="C#" Value="protected virtual void OnNewRowNeeded (System.Windows.Forms.DataGridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnNewRowNeeded(class System.Windows.Forms.DataGridViewRowEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnNewRowNeeded(System.Windows.Forms.DataGridViewRowEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.NewRowNeeded" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnNewRowNeeded%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> プロパティにより示される行は、この <see cref="T:System.Windows.Forms.DataGridView" /> コントロールに属していません。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnNewRowNeeded(System.Windows.Forms.DataGridViewRowEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnNewRowNeeded(System.Windows.Forms.DataGridViewRowEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnPaint">
      <MemberSignature Language="C#" Value="protected override void OnPaint (System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPaint(class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnPaint(System.Windows.Forms.PaintEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.PaintEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.Paint" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnPaint%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">このメソッド中に発生する例外は、次のいずれかである場合を除いて無視されます。  
  
-   <see cref="T:System.NullReferenceException" />  
  
-   <see cref="T:System.StackOverflowException" />  
  
-   <see cref="T:System.OutOfMemoryException" />  
  
-   <see cref="T:System.Threading.ThreadAbortException" />  
  
-   <see cref="T:System.ExecutionEngineException" />  
  
-   <see cref="T:System.IndexOutOfRangeException" />  
  
-   <see cref="T:System.AccessViolationException" /></exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnPaint(System.Windows.Forms.PaintEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnPaint(System.Windows.Forms.PaintEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnReadOnlyChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnReadOnlyChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnReadOnlyChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnReadOnlyChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.ReadOnlyChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnReadOnlyChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">コントロールが読み取り専用から読み取り\/書き込みに変更され、現在のセルは編集モードになることができますが、現在のセルの <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> プロパティは、<see cref="T:System.Windows.Forms.Control" /> から派生して <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> を実装するクラスを示していません。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnReadOnlyChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnReadOnlyChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnResize">
      <MemberSignature Language="C#" Value="protected override void OnResize (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnResize(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnResize(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.Resize" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnResize%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnResize(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnResize(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRightToLeftChanged">
      <MemberSignature Language="C#" Value="protected override void OnRightToLeftChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnRightToLeftChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRightToLeftChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.RightToLeftChanged" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnRowContextMenuStripChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowContextMenuStripChanged (System.Windows.Forms.DataGridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowContextMenuStripChanged(class System.Windows.Forms.DataGridViewRowEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowContextMenuStripChanged(System.Windows.Forms.DataGridViewRowEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.RowContextMenuStripChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowContextMenuStripChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> プロパティにより示される行は、この <see cref="T:System.Windows.Forms.DataGridView" /> コントロールに属していません。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnRowContextMenuStripChanged(System.Windows.Forms.DataGridViewRowEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnRowContextMenuStripChanged(System.Windows.Forms.DataGridViewRowEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowContextMenuStripNeeded">
      <MemberSignature Language="C#" Value="protected virtual void OnRowContextMenuStripNeeded (System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowContextMenuStripNeeded(class System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowContextMenuStripNeeded(System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.RowContextMenuStripNeeded" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f).  
  
 The <xref:System.Windows.Forms.DataGridView.OnRowContextMenuStripNeeded%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnRowContextMenuStripNeeded(System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnRowContextMenuStripNeeded(System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowDefaultCellStyleChanged (System.Windows.Forms.DataGridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowDefaultCellStyleChanged(class System.Windows.Forms.DataGridViewRowEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowDefaultCellStyleChanged(System.Windows.Forms.DataGridViewRowEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.RowDefaultCellStyleChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowDefaultCellStyleChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> プロパティにより示される行は、この <see cref="T:System.Windows.Forms.DataGridView" /> コントロールに属していません。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnRowDefaultCellStyleChanged(System.Windows.Forms.DataGridViewRowEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnRowDefaultCellStyleChanged(System.Windows.Forms.DataGridViewRowEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
      </Docs>
    </Member>
    <Member MemberName="OnRowDirtyStateNeeded">
      <MemberSignature Language="C#" Value="protected virtual void OnRowDirtyStateNeeded (System.Windows.Forms.QuestionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowDirtyStateNeeded(class System.Windows.Forms.QuestionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowDirtyStateNeeded(System.Windows.Forms.QuestionEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.QuestionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.QuestionEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.RowDirtyStateNeeded" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowDirtyStateNeeded%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnRowDirtyStateNeeded(System.Windows.Forms.QuestionEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnRowDirtyStateNeeded(System.Windows.Forms.QuestionEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowDividerDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnRowDividerDoubleClick (System.Windows.Forms.DataGridViewRowDividerDoubleClickEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowDividerDoubleClick(class System.Windows.Forms.DataGridViewRowDividerDoubleClickEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowDividerDoubleClick(System.Windows.Forms.DataGridViewRowDividerDoubleClickEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowDividerDoubleClickEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewRowDividerDoubleClickEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.RowDividerDoubleClick" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowDividerDoubleClick%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnRowDividerDoubleClick(System.Windows.Forms.DataGridViewRowDividerDoubleClickEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnRowDividerDoubleClick(System.Windows.Forms.DataGridViewRowDividerDoubleClickEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowDividerHeightChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowDividerHeightChanged (System.Windows.Forms.DataGridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowDividerHeightChanged(class System.Windows.Forms.DataGridViewRowEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowDividerHeightChanged(System.Windows.Forms.DataGridViewRowEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.RowDividerHeightChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowDividerHeightChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> プロパティにより示される行は、この <see cref="T:System.Windows.Forms.DataGridView" /> コントロールに属していません。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnRowDividerHeightChanged(System.Windows.Forms.DataGridViewRowEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnRowDividerHeightChanged(System.Windows.Forms.DataGridViewRowEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnRowEnter (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowEnter(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowEnter(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.RowEnter" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f).  
  
 The <xref:System.Windows.Forms.DataGridView.OnRowEnter%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnRowEnter(System.Windows.Forms.DataGridViewCellEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnRowEnter(System.Windows.Forms.DataGridViewCellEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowErrorTextChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowErrorTextChanged (System.Windows.Forms.DataGridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowErrorTextChanged(class System.Windows.Forms.DataGridViewRowEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowErrorTextChanged(System.Windows.Forms.DataGridViewRowEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.RowErrorTextChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowErrorTextChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> プロパティにより示される行は、この <see cref="T:System.Windows.Forms.DataGridView" /> コントロールに属していません。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnRowEnter(System.Windows.Forms.DataGridViewCellEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnRowEnter(System.Windows.Forms.DataGridViewCellEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowErrorTextNeeded">
      <MemberSignature Language="C#" Value="protected virtual void OnRowErrorTextNeeded (System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowErrorTextNeeded(class System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowErrorTextNeeded(System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.RowErrorTextNeeded" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f).  
  
 The <xref:System.Windows.Forms.DataGridView.OnRowErrorTextNeeded%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnRowErrorTextNeeded(System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnRowErrorTextNeeded(System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.DataGridView.RowErrorTextNeeded" />
      </Docs>
    </Member>
    <Member MemberName="OnRowHeaderCellChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowHeaderCellChanged (System.Windows.Forms.DataGridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowHeaderCellChanged(class System.Windows.Forms.DataGridViewRowEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowHeaderCellChanged(System.Windows.Forms.DataGridViewRowEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.RowHeaderCellChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowHeaderCellChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> プロパティにより示される行は、この <see cref="T:System.Windows.Forms.DataGridView" /> コントロールに属していません。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnRowHeaderCellChanged(System.Windows.Forms.DataGridViewRowEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnRowHeaderCellChanged(System.Windows.Forms.DataGridViewRowEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowHeaderMouseClick">
      <MemberSignature Language="C#" Value="protected virtual void OnRowHeaderMouseClick (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowHeaderMouseClick(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowHeaderMouseClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">マウスおよびクリックされたヘッダー セルに関する情報を格納している <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.RowHeaderMouseClick" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRowHeaderMouseDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnRowHeaderMouseDoubleClick (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowHeaderMouseDoubleClick(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowHeaderMouseDoubleClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">マウスおよびダブルクリックされたヘッダー セルに関する情報を格納している <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.RowHeaderMouseDoubleClick" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRowHeadersBorderStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowHeadersBorderStyleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowHeadersBorderStyleChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowHeadersBorderStyleChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.RowHeadersBorderStyleChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowHeadersBorderStyleChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnRowHeadersBorderStyleChanged(System.EventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnRowHeadersBorderStyleChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowHeadersDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowHeadersDefaultCellStyleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowHeadersDefaultCellStyleChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowHeadersDefaultCellStyleChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyleChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowHeadersDefaultCellStyleChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnRowHeadersDefaultCellStyleChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnRowHeadersDefaultCellStyleChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
      </Docs>
    </Member>
    <Member MemberName="OnRowHeadersWidthChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowHeadersWidthChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowHeadersWidthChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowHeadersWidthChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.RowHeadersWidthChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowHeadersWidthChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnRowHeadersWidthChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnRowHeadersWidthChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowHeadersWidthSizeModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowHeadersWidthSizeModeChanged (System.Windows.Forms.DataGridViewAutoSizeModeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowHeadersWidthSizeModeChanged(class System.Windows.Forms.DataGridViewAutoSizeModeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowHeadersWidthSizeModeChanged(System.Windows.Forms.DataGridViewAutoSizeModeEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewAutoSizeModeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewAutoSizeModeEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.RowHeadersWidthSizeModeChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowHeadersWidthSizeModeChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnRowHeadersWidthSizeModeChanged(System.Windows.Forms.DataGridViewAutoSizeModeEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnRowHeadersWidthSizeModeChanged(System.Windows.Forms.DataGridViewAutoSizeModeEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowHeightChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowHeightChanged (System.Windows.Forms.DataGridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowHeightChanged(class System.Windows.Forms.DataGridViewRowEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowHeightChanged(System.Windows.Forms.DataGridViewRowEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.RowHeightChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowHeightChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> プロパティにより示される行は、この <see cref="T:System.Windows.Forms.DataGridView" /> コントロールに属していません。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnRowHeightChanged(System.Windows.Forms.DataGridViewRowEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnRowHeightChanged(System.Windows.Forms.DataGridViewRowEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowHeightInfoNeeded">
      <MemberSignature Language="C#" Value="protected virtual void OnRowHeightInfoNeeded (System.Windows.Forms.DataGridViewRowHeightInfoNeededEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowHeightInfoNeeded(class System.Windows.Forms.DataGridViewRowHeightInfoNeededEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowHeightInfoNeeded(System.Windows.Forms.DataGridViewRowHeightInfoNeededEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowHeightInfoNeededEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewRowHeightInfoNeededEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.RowHeightInfoNeeded" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowHeightInfoNeeded%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnRowHeightInfoNeeded(System.Windows.Forms.DataGridViewRowHeightInfoNeededEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnRowHeightInfoNeeded(System.Windows.Forms.DataGridViewRowHeightInfoNeededEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowHeightInfoPushed">
      <MemberSignature Language="C#" Value="protected virtual void OnRowHeightInfoPushed (System.Windows.Forms.DataGridViewRowHeightInfoPushedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowHeightInfoPushed(class System.Windows.Forms.DataGridViewRowHeightInfoPushedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowHeightInfoPushed(System.Windows.Forms.DataGridViewRowHeightInfoPushedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowHeightInfoPushedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewRowHeightInfoPushedEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.RowHeightInfoPushed" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowHeightInfoPushed%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnRowHeightInfoPushed(System.Windows.Forms.DataGridViewRowHeightInfoPushedEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnRowHeightInfoPushed(System.Windows.Forms.DataGridViewRowHeightInfoPushedEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnRowLeave (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowLeave(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowLeave(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.RowLeave" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowLeave%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnRowLeave(System.Windows.Forms.DataGridViewCellEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnRowLeave(System.Windows.Forms.DataGridViewCellEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowMinimumHeightChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowMinimumHeightChanged (System.Windows.Forms.DataGridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowMinimumHeightChanged(class System.Windows.Forms.DataGridViewRowEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowMinimumHeightChanged(System.Windows.Forms.DataGridViewRowEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.RowMinimumHeightChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowMinimumHeightChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> プロパティにより示される行は、この <see cref="T:System.Windows.Forms.DataGridView" /> コントロールに属していません。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnRowMinimumHeightChanged(System.Windows.Forms.DataGridViewRowEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnRowMinimumHeightChanged(System.Windows.Forms.DataGridViewRowEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowPostPaint">
      <MemberSignature Language="C#" Value="protected virtual void OnRowPostPaint (System.Windows.Forms.DataGridViewRowPostPaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnRowPostPaint(class System.Windows.Forms.DataGridViewRowPostPaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowPostPaint(System.Windows.Forms.DataGridViewRowPostPaintEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowPostPaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewRowPostPaintEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.RowPostPaint" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowPostPaint%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnRowPostPaint(System.Windows.Forms.DataGridViewRowPostPaintEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnRowPostPaint(System.Windows.Forms.DataGridViewRowPostPaintEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowPrePaint">
      <MemberSignature Language="C#" Value="protected virtual void OnRowPrePaint (System.Windows.Forms.DataGridViewRowPrePaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnRowPrePaint(class System.Windows.Forms.DataGridViewRowPrePaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowPrePaint(System.Windows.Forms.DataGridViewRowPrePaintEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowPrePaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewRowPrePaintEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.RowPrePaint" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowPrePaint%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnRowPrePaint(System.Windows.Forms.DataGridViewRowPrePaintEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnRowPrePaint(System.Windows.Forms.DataGridViewRowPrePaintEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowsAdded">
      <MemberSignature Language="C#" Value="protected virtual void OnRowsAdded (System.Windows.Forms.DataGridViewRowsAddedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowsAdded(class System.Windows.Forms.DataGridViewRowsAddedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowsAdded(System.Windows.Forms.DataGridViewRowsAddedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowsAddedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">追加された行に関する情報を格納している <see cref="T:System.Windows.Forms.DataGridViewRowsAddedEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.RowsAdded" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowsAdded%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnRowsAdded(System.Windows.Forms.DataGridViewRowsAddedEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnRowsAdded(System.Windows.Forms.DataGridViewRowsAddedEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowsDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowsDefaultCellStyleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowsDefaultCellStyleChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowsDefaultCellStyleChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.RowsDefaultCellStyleChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowsDefaultCellStyleChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnRowsDefaultCellStyleChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnRowsDefaultCellStyleChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
      </Docs>
    </Member>
    <Member MemberName="OnRowsRemoved">
      <MemberSignature Language="C#" Value="protected virtual void OnRowsRemoved (System.Windows.Forms.DataGridViewRowsRemovedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowsRemoved(class System.Windows.Forms.DataGridViewRowsRemovedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowsRemoved(System.Windows.Forms.DataGridViewRowsRemovedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowsRemovedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">削除された行に関する情報を格納している <see cref="T:System.Windows.Forms.DataGridViewRowsRemovedEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.RowsRemoved" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowsRemoved%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnRowsRemoved(System.Windows.Forms.DataGridViewRowsRemovedEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnRowsRemoved(System.Windows.Forms.DataGridViewRowsRemovedEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowStateChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowStateChanged (int rowIndex, System.Windows.Forms.DataGridViewRowStateChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowStateChanged(int32 rowIndex, class System.Windows.Forms.DataGridViewRowStateChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowStateChanged(System.Int32,System.Windows.Forms.DataGridViewRowStateChangedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowStateChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="rowIndex">変更状態の行のインデックス。</param>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewRowStateChangedEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.RowStateChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowStateChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">行が読み取り専用から読み取り\/書き込みに変更され、現在のセルは編集モードになることができますが、現在のセルの <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> プロパティは、 <see cref="T:System.Windows.Forms.Control" /> から派生して <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> を実装するクラスを示していません。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnRowStateChanged(System.Int32,System.Windows.Forms.DataGridViewRowStateChangedEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnRowStateChanged(System.Int32,System.Windows.Forms.DataGridViewRowStateChangedEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowUnshared">
      <MemberSignature Language="C#" Value="protected virtual void OnRowUnshared (System.Windows.Forms.DataGridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowUnshared(class System.Windows.Forms.DataGridViewRowEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowUnshared(System.Windows.Forms.DataGridViewRowEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.RowUnshared" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowUnshared%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> プロパティにより示される行は、この <see cref="T:System.Windows.Forms.DataGridView" /> コントロールに属していません。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnRowUnshared(System.Windows.Forms.DataGridViewRowEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnRowUnshared(System.Windows.Forms.DataGridViewRowEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowValidated">
      <MemberSignature Language="C#" Value="protected virtual void OnRowValidated (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowValidated(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowValidated(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.RowValidated" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowValidated%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnRowValidated(System.Windows.Forms.DataGridViewCellEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnRowValidated(System.Windows.Forms.DataGridViewCellEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowValidating">
      <MemberSignature Language="C#" Value="protected virtual void OnRowValidating (System.Windows.Forms.DataGridViewCellCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowValidating(class System.Windows.Forms.DataGridViewCellCancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowValidating(System.Windows.Forms.DataGridViewCellCancelEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewCellCancelEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.RowValidating" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowValidating%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnRowValidating(System.Windows.Forms.DataGridViewCellCancelEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnRowValidating(System.Windows.Forms.DataGridViewCellCancelEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnScroll">
      <MemberSignature Language="C#" Value="protected virtual void OnScroll (System.Windows.Forms.ScrollEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnScroll(class System.Windows.Forms.ScrollEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnScroll(System.Windows.Forms.ScrollEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ScrollEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.ScrollEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.Scroll" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnScroll%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnScroll(System.Windows.Forms.ScrollEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnScroll(System.Windows.Forms.ScrollEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnSelectionChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSelectionChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelectionChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnSelectionChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベントに関する情報を格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.SelectionChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnSelectionChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnSelectionChanged(System.EventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnSelectionChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnSortCompare">
      <MemberSignature Language="C#" Value="protected virtual void OnSortCompare (System.Windows.Forms.DataGridViewSortCompareEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSortCompare(class System.Windows.Forms.DataGridViewSortCompareEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnSortCompare(System.Windows.Forms.DataGridViewSortCompareEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewSortCompareEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewSortCompareEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.SortCompare" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnSortCompare%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnSortCompare(System.Windows.Forms.DataGridViewSortCompareEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnSortCompare(System.Windows.Forms.DataGridViewSortCompareEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.DataGridView.SortCompare" />
      </Docs>
    </Member>
    <Member MemberName="OnSorted">
      <MemberSignature Language="C#" Value="protected virtual void OnSorted (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSorted(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnSorted(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.Sorted" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnSorted%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnSorted(System.EventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.DataGridView.OnSorted(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnUserAddedRow">
      <MemberSignature Language="C#" Value="protected virtual void OnUserAddedRow (System.Windows.Forms.DataGridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUserAddedRow(class System.Windows.Forms.DataGridViewRowEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnUserAddedRow(System.Windows.Forms.DataGridViewRowEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.UserAddedRow" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnUserAddedRow%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="e" /> の <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> プロパティにより示される行は、この <see cref="T:System.Windows.Forms.DataGridView" /> コントロールに属していません。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnUserAddedRow(System.Windows.Forms.DataGridViewRowEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnUserAddedRow(System.Windows.Forms.DataGridViewRowEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnUserDeletedRow">
      <MemberSignature Language="C#" Value="protected virtual void OnUserDeletedRow (System.Windows.Forms.DataGridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUserDeletedRow(class System.Windows.Forms.DataGridViewRowEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnUserDeletedRow(System.Windows.Forms.DataGridViewRowEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.UserDeletedRow" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f).  
  
 The <xref:System.Windows.Forms.DataGridView.OnUserDeletedRow%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnUserDeletedRow(System.Windows.Forms.DataGridViewRowEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnUserDeletedRow(System.Windows.Forms.DataGridViewRowEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnUserDeletingRow">
      <MemberSignature Language="C#" Value="protected virtual void OnUserDeletingRow (System.Windows.Forms.DataGridViewRowCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUserDeletingRow(class System.Windows.Forms.DataGridViewRowCancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnUserDeletingRow(System.Windows.Forms.DataGridViewRowCancelEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DataGridViewRowCancelEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.DataGridView.UserDeletingRow" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnUserDeletingRow%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnUserDeletingRow(System.Windows.Forms.DataGridViewRowCancelEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnUserDeletingRow(System.Windows.Forms.DataGridViewRowCancelEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnValidating">
      <MemberSignature Language="C#" Value="protected override void OnValidating (System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnValidating(class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnValidating(System.ComponentModel.CancelEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.ComponentModel.CancelEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.Validating" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 上げるに加え、 <xref:System.Windows.Forms.Control.Validating> イベント、このメソッドは、現在のセルの編集を終了し、セルおよび行の値を検証します。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Windows.Forms.DataGridView.OnValidating%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">検証が失敗しました。<see cref="E:System.Windows.Forms.DataGridView.DataError" /> イベントのハンドラーがないか、またはハンドラーが <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> プロパティを <see langword="true" /> に設定しました。 通常、例外オブジェクトは型 <see cref="T:System.FormatException" /> にキャストできます。</exception>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.DataGridView.OnValidating(System.ComponentModel.CancelEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.DataGridView.OnValidating(System.ComponentModel.CancelEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnVisibleChanged">
      <MemberSignature Language="C#" Value="protected override void OnVisibleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnVisibleChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnVisibleChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" /> オブジェクト。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.VisibleChanged" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.Padding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このコントロールでは、このプロパティは無効です。</summary>
        <value>
          <see cref="T:System.Windows.Forms.Padding" /> のインスタンス。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコントロールでは、このプロパティは無効です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaddingChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PaddingChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PaddingChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.PaddingChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridView.Padding" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.DataGridView.Padding%2A> プロパティは、値を変更し、このイベントを処理することによってこのような変化に対応できますが、このコントロールは無関係です。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridView.Padding" />
      </Docs>
    </Member>
    <Member MemberName="PaintBackground">
      <MemberSignature Language="C#" Value="protected virtual void PaintBackground (System.Drawing.Graphics graphics, System.Drawing.Rectangle clipBounds, System.Drawing.Rectangle gridBounds);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void PaintBackground(class System.Drawing.Graphics graphics, valuetype System.Drawing.Rectangle clipBounds, valuetype System.Drawing.Rectangle gridBounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.PaintBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="clipBounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="gridBounds" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="graphics">背景の描画に使用される <see cref="T:System.Drawing.Graphics" />。</param>
        <param name="clipBounds">描画が必要な <see cref="T:System.Windows.Forms.DataGridView" /> の領域を表す <see cref="T:System.Drawing.Rectangle" />。</param>
        <param name="gridBounds">セルの描画領域を表す <see cref="T:System.Drawing.Rectangle" />。</param>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> の背景を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `clipBounds` パラメーターの領域を表す、 <xref:System.Windows.Forms.DataGridView> 再描画する必要があります。 たとえば、ユーザーは、全体をカバー <xref:System.Windows.Forms.DataGridView> 別のウィンドウで、し、発見と `clipBounds` 全体を表す <xref:System.Windows.Forms.DataGridView>します。 ユーザーの小さな領域をカバーする場合、 <xref:System.Windows.Forms.DataGridView> 、し、発見と `clipBounds` カバーされた小さな領域を表します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessAKey">
      <MemberSignature Language="C#" Value="protected bool ProcessAKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessAKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessAKey(System.Windows.Forms.Keys)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">処理するキーを表す <see cref="T:System.Windows.Forms.Keys" /> 値のビットごとの組み合わせ。</param>
        <summary>A キーを処理します。</summary>
        <returns>キーが処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドが戻る `true` CTRL を押したときに、 <xref:System.Windows.Forms.DataGridView.MultiSelect%2A> プロパティは `true`です。 既定では、コントロール内のすべてのセルの選択これです。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ProcessDataGridViewKey">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessDataGridViewKey (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ProcessDataGridViewKey(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessDataGridViewKey(System.Windows.Forms.KeyEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">押されたキーに関する情報を格納します。</param>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> での移動に使用されるキーを処理します。</summary>
        <returns>キーが処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドが押されたキーに適したキー処理メソッドを呼び出します \(たとえば、 <xref:System.Windows.Forms.DataGridView.ProcessF2Key%2A> メソッドには F2 を押すと\) し、そのメソッドの戻り値を返します。  
  
   
  
## 例  
 次のコード例で ENTER キーの動作を変更、 <xref:System.Windows.Forms.DataGridView> サブクラスをオーバーライドすることで、 <xref:System.Windows.Forms.DataGridView.ProcessDataGridViewKey%2A> と <xref:System.Windows.Forms.DataGridView.ProcessDialogKey%2A> メソッドです。 例では、ENTER キーは、1 行のデータの複数のセルを編集するユーザーに容易に、右矢印キーと同じ動作を持ちます。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc2\#70](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc2/cs/misc2.cs#70)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc2\#70](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc2/vb/misc2.vb#70)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">キーを押すとコントロールが編集モードに切り替わる可能性がありますが、現在のセルの <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> プロパティは、<see cref="T:System.Windows.Forms.Control" /> から派生して <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> を実装するクラスを示しません。</exception>
        <exception cref="T:System.Exception">この操作を行うと、本来はセル値がコミットされるか、または編集モードに切り替わるはずですが、データ ソースのエラーによって操作ができなくなり、<see cref="E:System.Windows.Forms.DataGridView.DataError" /> イベントのハンドラーがないか、またはハンドラーが <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> プロパティを <see langword="true" /> に設定しているかのいずれかの状態になります。  
  
 または  
  
 本来なら DELETE キーにより 1 つ以上の行が削除されるはずですが、データ ソースのエラーによって削除ができなくなり、<see cref="E:System.Windows.Forms.DataGridView.DataError" /> イベントのハンドラーがない、またはハンドラーが <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> プロパティを <see langword="true" /> に設定しているのいずれかの状態になります。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <block subset="none" type="overrides">
          <para>When overriding this method, a control should return <see langword="true" /> to indicate that it has processed the key. For keys that are not processed by the control, return the result of the base version of this method.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ProcessDeleteKey">
      <MemberSignature Language="C#" Value="protected bool ProcessDeleteKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessDeleteKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessDeleteKey(System.Windows.Forms.Keys)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">処理するキーを表す <see cref="T:System.Windows.Forms.Keys" /> 値のビットごとの組み合わせ。</param>
        <summary>Del キーを処理します。</summary>
        <returns>キーが処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method returns **languageKeyword tag is not supported!!!!**  
 when the user presses DELETE to delete rows in the control. The user can delete rows if the <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> property is set to <xref:System.Windows.Forms.DataGridViewSelectionMode.FullRowSelect> or <xref:System.Windows.Forms.DataGridViewSelectionMode.RowHeaderSelect> and the <xref:System.Windows.Forms.DataGridView.MultiSelect%2A> property is set to **languageKeyword tag is not supported!!!!**  
. If the <xref:System.Windows.Forms.DataGridView> is bound to data, the <xref:System.ComponentModel.IBindingList.AllowRemove%2A?displayProperty=fullName> property of the data source must also be set to **languageKeyword tag is not supported!!!!**  
.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">DELETE キーにより 1 つ以上の行が削除されますが、データ ソースのエラーによって削除ができなくなり、<see cref="E:System.Windows.Forms.DataGridView.DataError" /> イベントのハンドラーがないか、またはハンドラーが <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> プロパティを <see langword="true" /> に設定しているかのいずれかの状態になります。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ProcessDialogKey">
      <MemberSignature Language="C#" Value="protected override bool ProcessDialogKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ProcessDialogKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessDialogKey(System.Windows.Forms.Keys)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">処理するキーを表す <see cref="T:System.Windows.Forms.Keys" /> 値のビットごとの組み合わせ。</param>
        <summary>Tab キー、Esc キー、Enter キー、方向キーなど、ダイアログ ボックスの制御に使用されるキーを処理します。</summary>
        <returns>キーが処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、ホストされる編集コントロールによって処理されていないキーボード入力を処理する編集モードで呼び出されます。  
  
 押されたキーを特定してに入力のキーがない場合は、処理するための基本クラスに送信されます。  
  
   
  
## 例  
 次のコード例で ENTER キーの動作を変更、 <xref:System.Windows.Forms.DataGridView> サブクラスをオーバーライドすることで、 <xref:System.Windows.Forms.DataGridView.ProcessDataGridViewKey%2A> と <xref:System.Windows.Forms.DataGridView.ProcessDialogKey%2A> メソッドです。 例では、ENTER キーは、1 行のデータの複数のセルを編集するユーザーに容易に、右矢印キーと同じ動作を持ちます。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc2\#70](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc2/cs/misc2.cs#70)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc2\#70](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc2/vb/misc2.vb#70)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">キーを押すとコントロールが編集モードに切り替わる可能性がありますが、現在のセルの <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> プロパティは、<see cref="T:System.Windows.Forms.Control" /> から派生して <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> を実装するクラスを示しません。</exception>
        <exception cref="T:System.Exception">この操作を行うと、本来はセル値がコミットされるか、または編集モードに切り替わるところですが、データ ソースのエラーのためにその操作は実行できず、<see cref="E:System.Windows.Forms.DataGridView.DataError" /> イベントのハンドラーがない状態か、ハンドラーが <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> プロパティを <see langword="true" /> に設定している状態になります。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for using all windows and user events when the TAB key is pressed. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />. Permission value:<see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <block subset="none" type="overrides">
          <para>When overriding this method, a control should return <see langword="true" /> to indicate that it has processed the key. For keys that are not processed by the control, return the result of the base version of this method.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ProcessDownKey">
      <MemberSignature Language="C#" Value="protected bool ProcessDownKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessDownKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessDownKey(System.Windows.Forms.Keys)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">処理するキーを表す <see cref="T:System.Windows.Forms.Keys" /> 値のビットごとの組み合わせ。</param>
        <summary>↓キーを処理します。</summary>
        <returns>キーが処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">本来は下矢印キーによってコントロールが編集モードに切り替わるところですが、新しい現在のセルの <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> プロパティは、<see cref="T:System.Windows.Forms.Control" /> から派生して <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> を実装するクラスを示しません。</exception>
        <exception cref="T:System.Exception">この操作を行うと、本来はセル値がコミットされるか、または編集モードに切り替わるところですが、データ ソースのエラーのためにその操作は実行できず、<see cref="E:System.Windows.Forms.DataGridView.DataError" /> イベントのハンドラーがない状態か、ハンドラーが <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> プロパティを <see langword="true" /> に設定している状態になります。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ProcessEndKey">
      <MemberSignature Language="C#" Value="protected bool ProcessEndKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessEndKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessEndKey(System.Windows.Forms.Keys)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">処理するキーを表す <see cref="T:System.Windows.Forms.Keys" /> 値のビットごとの組み合わせ。</param>
        <summary>End キーを処理します。</summary>
        <returns>キーが処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">End キーを押すと本来はコントロールが編集モードに切り替わるところですが、新しい現在のセルの <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> プロパティは、<see cref="T:System.Windows.Forms.Control" /> から派生して <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> を実装するクラスを示していません。</exception>
        <exception cref="T:System.Exception">この操作を実行すると、本来はセル値がコミットされるか、または編集モードに切り替わるところですが、データ ソースのエラーによってその操作は実行できず、<see cref="E:System.Windows.Forms.DataGridView.DataError" /> イベントのハンドラーがないか、またはハンドラーが <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> プロパティを <see langword="true" /> に設定しているかのいずれかの状態になります。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ProcessEnterKey">
      <MemberSignature Language="C#" Value="protected bool ProcessEnterKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessEnterKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessEnterKey(System.Windows.Forms.Keys)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">処理するキーを表す <see cref="T:System.Windows.Forms.Keys" /> 値のビットごとの組み合わせ。</param>
        <summary>Enter キーを処理します。</summary>
        <returns>キーが処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">ENTER キーによってコントロールが編集モードに切り替わる可能性がありますが、新しい現在のセルの <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> プロパティは、<see cref="T:System.Windows.Forms.Control" /> から派生して <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> を実装するクラスを示しません。</exception>
        <exception cref="T:System.Exception">この操作を行うと、セル値がコミットされるか、または編集モードに切り替わりますが、データ ソースのエラーによって操作ができなくなり、<see cref="E:System.Windows.Forms.DataGridView.DataError" /> イベントのハンドラーがないか、またはハンドラーが <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> プロパティを <see langword="true" /> に設定しているかのいずれかの状態になります。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ProcessEscapeKey">
      <MemberSignature Language="C#" Value="protected bool ProcessEscapeKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessEscapeKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessEscapeKey(System.Windows.Forms.Keys)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">処理するキーを表す <see cref="T:System.Windows.Forms.Keys" /> 値のビットごとの組み合わせ。</param>
        <summary>Esc キーを処理します。</summary>
        <returns>キーが処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ProcessF2Key">
      <MemberSignature Language="C#" Value="protected bool ProcessF2Key (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessF2Key(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessF2Key(System.Windows.Forms.Keys)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">処理するキーを表す <see cref="T:System.Windows.Forms.Keys" /> 値のビットごとの組み合わせ。</param>
        <summary>F2 キーを処理します。</summary>
        <returns>キーが処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">本来は F2 キーを押すとコントロールが編集モードに切り替わるところですが、現在のセルの <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> プロパティは、<see cref="T:System.Windows.Forms.Control" /> から派生して <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> を実装するクラスを示していません。</exception>
        <exception cref="T:System.Exception">F2 キーを押すと本来は編集モードに切り替わるところですが、データ ソースのエラーによってそのようにはならず、<see cref="E:System.Windows.Forms.DataGridView.DataError" /> イベントのハンドラーがないか、またはハンドラーが <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> プロパティを <see langword="true" /> に設定しているかのいずれかの状態になります。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ProcessHomeKey">
      <MemberSignature Language="C#" Value="protected bool ProcessHomeKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessHomeKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessHomeKey(System.Windows.Forms.Keys)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">押されたキー。</param>
        <summary>Home キーを処理します。</summary>
        <returns>キーが処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Home キーを押すと、本来はコントロールが編集モードに切り替わるところですが、新しい現在のセルの <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> プロパティは、<see cref="T:System.Windows.Forms.Control" /> から派生して <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> を実装するクラスを示していません。</exception>
        <exception cref="T:System.Exception">この操作を実行すると、本来はセル値がコミットされるか、または編集モードに切り替わるところですが、データ ソースのエラーのためにその操作は実行できず、<see cref="E:System.Windows.Forms.DataGridView.DataError" /> イベントのハンドラーがない状態か、ハンドラーが <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> プロパティを <see langword="true" /> に設定している状態になります。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ProcessInsertKey">
      <MemberSignature Language="C#" Value="protected bool ProcessInsertKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessInsertKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessInsertKey(System.Windows.Forms.Keys)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">処理するキーを表す <see cref="T:System.Windows.Forms.Keys" /> 値の 1 つ。</param>
        <summary>Ins キーを処理します。</summary>
        <returns>キーが処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ProcessKeyEventArgs">
      <MemberSignature Language="C#" Value="protected override bool ProcessKeyEventArgs (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ProcessKeyEventArgs(valuetype System.Windows.Forms.Message m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessKeyEventArgs(System.Windows.Forms.Message@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">処理するウィンドウ メッセージを表す、参照渡しされた <see cref="T:System.Windows.Forms.Message" />。</param>
        <summary>キー メッセージを処理し、適切なコントロール イベントを生成します。</summary>
        <returns>メッセージが処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 詳細については、次を参照してください。、 <xref:System.Windows.Forms.Control.ProcessKeyEventArgs%2A?displayProperty=fullName> 基本クラスのメソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">本来はキーを押すとコントロールが編集モードに切り替わるところですが、現在のセルの <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> プロパティは、<see cref="T:System.Windows.Forms.Control" /> から派生して <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> を実装するクラスを示していません。</exception>
        <exception cref="T:System.Exception">この操作を実行すると、本来はセル値がコミットされるか、または編集モードに切り替わるところですが、データ ソースのエラーによってその操作は実行できず、<see cref="E:System.Windows.Forms.DataGridView.DataError" /> イベントのハンドラーがないか、またはハンドラーが <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> プロパティを <see langword="true" /> に設定しているかのいずれかの状態になります。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <block subset="none" type="overrides">
          <para>When overriding this method, a control should return <see langword="true" /> to indicate that it has processed the message. For messages that are not processed by the control, return the result of the base version of this method.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ProcessKeyPreview">
      <MemberSignature Language="C#" Value="protected override bool ProcessKeyPreview (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ProcessKeyPreview(valuetype System.Windows.Forms.Message m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessKeyPreview(System.Windows.Forms.Message@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">処理するウィンドウ メッセージを表す、参照渡しされた <see cref="T:System.Windows.Forms.Message" />。</param>
        <summary>キーボード メッセージをプレビューします。</summary>
        <returns>メッセージが処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 詳細については、次を参照してください。、 <xref:System.Windows.Forms.Control.ProcessKeyPreview%2A?displayProperty=fullName> 基本クラスのメソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">本来はキーを押すとコントロールが編集モードに切り替わるところですが、現在のセルの <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> プロパティは、<see cref="T:System.Windows.Forms.Control" /> から派生して <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> を実装するクラスを示していません。</exception>
        <exception cref="T:System.Exception">この操作を実行すると、本来はセル値がコミットされるか、または編集モードに切り替わるところですが、データ ソースのエラーによってその操作は実行できず、<see cref="E:System.Windows.Forms.DataGridView.DataError" /> イベントのハンドラーがないか、またはハンドラーが <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> プロパティを <see langword="true" /> に設定しているかのいずれかの状態になります。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <block subset="none" type="overrides">
          <para>When overriding this method, a control should return <see langword="true" /> to indicate that it has processed the message. For messages that are not processed by the control, return the result of the base version of this method.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ProcessLeftKey">
      <MemberSignature Language="C#" Value="protected bool ProcessLeftKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessLeftKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessLeftKey(System.Windows.Forms.Keys)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">処理するキーを表す <see cref="T:System.Windows.Forms.Keys" /> 値のビットごとの組み合わせ。</param>
        <summary>←キーを処理します。</summary>
        <returns>キーが処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">本来なら左矢印キーによってコントロールが編集モードに切り替わるはずですが、新しい現在のセルの <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> プロパティは、<see cref="T:System.Windows.Forms.Control" /> から派生して <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> を実装するクラスを示しません。</exception>
        <exception cref="T:System.Exception">この操作を行うと、本来はセル値がコミットされるか、または編集モードに切り替わるはずですが、データ ソースのエラーによって操作ができなくなり、<see cref="E:System.Windows.Forms.DataGridView.DataError" /> イベントのハンドラーがないか、またはハンドラーが <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> プロパティを <see langword="true" /> に設定しているかのいずれかの状態になります。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ProcessNextKey">
      <MemberSignature Language="C#" Value="protected bool ProcessNextKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessNextKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessNextKey(System.Windows.Forms.Keys)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">処理するキーを表す <see cref="T:System.Windows.Forms.Keys" /> 値のビットごとの組み合わせ。</param>
        <summary>PageDown キーを処理します。</summary>
        <returns>キーが処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">PageDown キーによってコントロールが編集モードに切り替わる可能性がありますが、新しい現在のセルの <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> プロパティは、<see cref="T:System.Windows.Forms.Control" /> から派生して <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> を実装するクラスを示しません。</exception>
        <exception cref="T:System.Exception">この操作を実行すると、本来はセル値がコミットされるか、または編集モードに切り替わるところですが、データ ソースのエラーによってその操作は実行できず、<see cref="E:System.Windows.Forms.DataGridView.DataError" /> イベントのハンドラーがないか、またはハンドラーが <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> プロパティを <see langword="true" /> に設定しているかのいずれかの状態になります。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ProcessPriorKey">
      <MemberSignature Language="C#" Value="protected bool ProcessPriorKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessPriorKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessPriorKey(System.Windows.Forms.Keys)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">処理するキーを表す <see cref="T:System.Windows.Forms.Keys" /> 値のビットごとの組み合わせ。</param>
        <summary>PageUp キーを処理します。</summary>
        <returns>キーが処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">PageUp キーによってコントロールが編集モードに切り替わる可能性がありますが、新しい現在のセルの <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> プロパティは、<see cref="T:System.Windows.Forms.Control" /> から派生して <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> を実装するクラスを示しません。</exception>
        <exception cref="T:System.Exception">この操作を行うと、本来はセル値がコミットされるか、または編集モードに切り替わるところですが、データ ソースのエラーのためにその操作は実行できず、<see cref="E:System.Windows.Forms.DataGridView.DataError" /> イベントのハンドラーがない状態か、ハンドラーが <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> プロパティを <see langword="true" /> に設定している状態になります。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ProcessRightKey">
      <MemberSignature Language="C#" Value="protected bool ProcessRightKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessRightKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessRightKey(System.Windows.Forms.Keys)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">処理するキーを表す <see cref="T:System.Windows.Forms.Keys" /> 値のビットごとの組み合わせ。</param>
        <summary>→キーを処理します。</summary>
        <returns>キーが処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例で ENTER キーの動作を変更、 <xref:System.Windows.Forms.DataGridView> サブクラスをオーバーライドすることで、 <xref:System.Windows.Forms.DataGridView.ProcessDataGridViewKey%2A> と <xref:System.Windows.Forms.DataGridView.ProcessDialogKey%2A> メソッドです。 例では、ENTER キーは、1 行のデータの複数のセルを編集するユーザーに容易に、右矢印キーと同じ動作を持ちます。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc2\#70](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc2/cs/misc2.cs#70)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc2\#70](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc2/vb/misc2.vb#70)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">本来は右矢印キーによってコントロールが編集モードに切り替わるところですが、新しい現在のセルの <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> プロパティは、<see cref="T:System.Windows.Forms.Control" /> から派生して <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> を実装するクラスを示しません。</exception>
        <exception cref="T:System.Exception">この操作を行うと、本来はセル値がコミットされるか、または編集モードに切り替わるところですが、データ ソースのエラーのためにその操作は実行できず、<see cref="E:System.Windows.Forms.DataGridView.DataError" /> イベントのハンドラーがない状態か、ハンドラーが <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> プロパティを <see langword="true" /> に設定している状態になります。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ProcessSpaceKey">
      <MemberSignature Language="C#" Value="protected bool ProcessSpaceKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessSpaceKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessSpaceKey(System.Windows.Forms.Keys)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">処理するキーを表す <see cref="T:System.Windows.Forms.Keys" /> 値の 1 つ。</param>
        <summary>Space キーを処理します。</summary>
        <returns>キーが処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ProcessTabKey">
      <MemberSignature Language="C#" Value="protected bool ProcessTabKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessTabKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessTabKey(System.Windows.Forms.Keys)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">処理するキーを表す <see cref="T:System.Windows.Forms.Keys" /> 値のビットごとの組み合わせ。</param>
        <summary>Tab キーを処理します。</summary>
        <returns>キーが処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">タブ キーによってコントロールが編集モードに切り替わる可能性がありますが、新しい現在のセルの <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> プロパティは、<see cref="T:System.Windows.Forms.Control" /> から派生して <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> を実装するクラスを示しません。</exception>
        <exception cref="T:System.Exception">この操作を行うと、セル値がコミットされるか、または編集モードに切り替わりますが、データ ソースのエラーによって操作ができなくなり、<see cref="E:System.Windows.Forms.DataGridView.DataError" /> イベントのハンドラーがない状態か、ハンドラーが <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> プロパティを <see langword="true" /> に設定している状態になります。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for using all windows and user events. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Permission value: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ProcessUpKey">
      <MemberSignature Language="C#" Value="protected bool ProcessUpKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessUpKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessUpKey(System.Windows.Forms.Keys)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">処理するキーを表す <see cref="T:System.Windows.Forms.Keys" /> 値のビットごとの組み合わせ。</param>
        <summary>上矢印キーを処理します。</summary>
        <returns>キーが処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">上矢印キーによってコントロールが編集モードに切り替わる可能性がありますが、新しい現在のセルの <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> プロパティは、<see cref="T:System.Windows.Forms.Control" /> から派生して <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> を実装するクラスを示しません。</exception>
        <exception cref="T:System.Exception">この操作を行うと、セル値がコミットされるか、または編集モードに切り替わりますが、データ ソースのエラーによって操作ができなくなり、<see cref="E:System.Windows.Forms.DataGridView.DataError" /> イベントのハンドラーがないか、またはハンドラーが <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> プロパティを <see langword="true" /> に設定しているかのいずれかの状態になります。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ProcessZeroKey">
      <MemberSignature Language="C#" Value="protected bool ProcessZeroKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessZeroKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessZeroKey(System.Windows.Forms.Keys)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">処理するキーを表す <see cref="T:System.Windows.Forms.Keys" /> 値のビットごとの組み合わせ。</param>
        <summary>0 キーを処理します。</summary>
        <returns>キーが処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">本来は 0 キーを押すとコントロールが編集モードに切り替わるところですが、現在のセルの <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> プロパティは、<see cref="T:System.Windows.Forms.Control" /> から派生して <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> を実装するクラスを示していません。</exception>
        <exception cref="T:System.Exception">このアクションによって本来は編集モードに切り替わるところですが、データ ソースのエラーによってそのようにはならず、<see cref="E:System.Windows.Forms.DataGridView.DataError" /> イベントのハンドラーがないか、またはハンドラーが <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> プロパティを <see langword="true" /> に設定しているかのいずれかの状態になります。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.ReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーが <see cref="T:System.Windows.Forms.DataGridView" /> コントロールのセルを編集できるかどうかを示す値を取得または設定します。</summary>
        <value>ユーザーが <see cref="T:System.Windows.Forms.DataGridView" /> コントロールのセルを編集できない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 セルは読み取り専用場合の値、 <xref:System.Windows.Forms.DataGridView.ReadOnly%2A> プロパティは `true` セル、セルの行、セルの列または <xref:System.Windows.Forms.DataGridView>です。  
  
   
  
## 例  
 次のコード例は、このプロパティの使用法を示しています、 <xref:System.Windows.Forms.DataGridView> 、主に表示を目的とします。 この例ではいくつかの方法でコントロールの視覚的な外観をカスタマイズし、コントロールが対話機能を制限を設定します。 この例で使用できる例の一部である、 <xref:System.Windows.Forms.DataGridViewCellStyle> クラスの概要です。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewStyleDemo\#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/CS/form1.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo\#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このプロパティを設定したときに指定した値は <see langword="true" /> です。現在のセルは編集モードですが、現在のセルにコミットできない変更が含まれています。</exception>
        <exception cref="T:System.Exception">このプロパティの設定時に指定した値によってコントロールが編集モードに入りますが、編集セルの値の初期化は失敗し、<see cref="E:System.Windows.Forms.DataGridView.DataError" /> イベントのハンドラーがないか、ハンドラーが <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> プロパティを <see langword="true" /> に設定しているかのいずれかの状態になります。 通常、例外オブジェクトは型 <see cref="T:System.FormatException" /> にキャストできます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadOnlyChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ReadOnlyChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ReadOnlyChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ReadOnlyChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridView.ReadOnly" /> プロパティが変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.ReadOnlyChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること<xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.ReadOnlyChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#274](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#274)]
 [!code-vb[System.Windows.Forms.EventExamples\#274](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#274)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshEdit">
      <MemberSignature Language="C#" Value="public bool RefreshEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RefreshEdit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.RefreshEdit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>セルが編集モードのとき、現在のセルの値を基になるセルの値で更新して、以前の値をすべて破棄します。</summary>
        <returns>成功した場合は <see langword="true" />。<see cref="E:System.Windows.Forms.DataGridView.DataError" /> イベントが発生した場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 編集モードで表示された値を更新するセルを強制するには、このメソッドを呼び出します。 これは、機能は、外部プロセスは、セルの値を変更し、ユーザーが指定した変更が結果として、失われた場合でも、変更をユーザーに通知するときに便利です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetText">
      <MemberSignature Language="C#" Value="public override void ResetText ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ResetText() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ResetText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridView.Text" /> プロパティを既定値にリセットします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 説明したとおり、このメソッドの動作は、 <xref:System.Windows.Forms.DataGridView.Text%2A> このコントロールのプロパティは無効です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridView.Text" />
      </Docs>
    </Member>
    <Member MemberName="RowContextMenuStripChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowEventHandler RowContextMenuStripChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowEventHandler RowContextMenuStripChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowContextMenuStripChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridViewRow.ContextMenuStrip" /> プロパティが変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、<xref:System.Windows.Forms.DataGridView.RowContextMenuStripChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.RowContextMenuStripChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#338](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#338)]
 [!code-vb[System.Windows.Forms.EventExamples\#338](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#338)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowContextMenuStripNeeded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventHandler RowContextMenuStripNeeded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventHandler RowContextMenuStripNeeded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowContextMenuStripNeeded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>行のショートカット メニューが必要な場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.DataGridView.RowContextMenuStripNeeded> のみイベントが発生したときに、 <xref:System.Windows.Forms.DataGridView> コントロール <xref:System.Windows.Forms.DataGridView.DataSource%2A> プロパティを設定またはその <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> プロパティは `true`です。 処理、 <xref:System.Windows.Forms.DataGridView.RowContextMenuStripNeeded> イベントは、行の現在の状態または含まれる値によって決定されたショートカット メニューを表示したい場合に便利です。  
  
 処理するとき、 <xref:System.Windows.Forms.DataGridView.RowContextMenuStripNeeded> 、イベント ハンドラー内で指定したショートカット メニューが表示するたびに、ユーザー行を右クリックしない限り、 <xref:System.Windows.Forms.DataGridView.CellContextMenuStripNeeded> がクリックされた特定のセルのショートカット メニューをオーバーライドします。  
  
 <xref:System.Windows.Forms.DataGridView.RowContextMenuStripNeeded> イベントにも発生するたびの値、 <xref:System.Windows.Forms.DataGridViewRow.ContextMenuStrip%2A?displayProperty=fullName> プロパティが取得プログラムを使用して、またはユーザーが行を右クリックします。  
  
 使用することができます、 <xref:System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs.RowIndex%2A?displayProperty=fullName> 行またはそれに含まれる値の状態を確認して、この情報を使用して、変更または変更するプロパティ、 <xref:System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs.ContextMenuStrip%2A?displayProperty=fullName> プロパティです。 このプロパティは、行の値で初期化 <xref:System.Windows.Forms.DataGridViewRow.ContextMenuStrip%2A> プロパティで、イベントの値をオーバーライドします。  
  
 処理、 <xref:System.Windows.Forms.DataGridView.RowContextMenuStripNeeded> 大量のデータ行の設定のパフォーマンスの低下を避けるために使用するときにイベント <xref:System.Windows.Forms.DataGridViewRow.ContextMenuStrip%2A> 複数の行の値。 詳細については、「[Best Practices for Scaling the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/8321a8a6-6340-4fd1-b475-fa090b905aaf)」を参照してください。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例、 <xref:System.Windows.Forms.DataGridView.RowContextMenuStripNeeded> イベントを使用して、 <xref:System.Windows.Forms.ContextMenuStrip> 、従業員の役職に基づいています。 この例では、管理者とその他のすべての従業員用の 2 つのショートカット メニュー。  
  
 [!code-csharp[System.Windows.Forms.DataGridView\_NeededEvents\#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView_NeededEvents/CS/Form1.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridView\_NeededEvents\#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView_NeededEvents/VB/Form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ContextMenuStrip" />
        <altmember cref="P:System.Windows.Forms.DataGridView.DataSource" />
        <altmember cref="P:System.Windows.Forms.DataGridView.VirtualMode" />
        <altmember cref="T:System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs" />
        <altmember cref="P:System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs.ContextMenuStrip" />
        <altmember cref="P:System.Windows.Forms.DataGridViewRow.ContextMenuStrip" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnRowContextMenuStripNeeded(System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="RowCount">
      <MemberSignature Language="C#" Value="public int RowCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RowCount" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.RowCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> に表示される行の数を取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DataGridView" /> に表示する行数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 <xref:System.Windows.Forms.DataGridView.RowCount%2A> 設定の末尾から、行を削除する値が現在の値未満、 <xref:System.Windows.Forms.DataGridView.Rows%2A> コレクションです。 場合 <xref:System.Windows.Forms.DataGridView.RowCount%2A> 設定の末尾に、行を追加、現在の値より大きい値に、 <xref:System.Windows.Forms.DataGridView.Rows%2A> コレクションです。 指定された行に基づいて追加の行、 <xref:System.Windows.Forms.DataGridView.RowTemplate%2A> プロパティです。  
  
 設定した場合、 <xref:System.Windows.Forms.DataGridView.RowCount%2A> プロパティを 0 に、すべての行から削除されます、 <xref:System.Windows.Forms.DataGridView>です。 これは、呼び出すことと同じ、 <xref:System.Windows.Forms.DataGridViewRowCollection.Clear%2A?displayProperty=fullName> メソッドです。  
  
> [!NOTE]
>  場合 <xref:System.Windows.Forms.DataGridView.AllowUserToAddRows%2A> は `true`, 、設定することはできません <xref:System.Windows.Forms.DataGridView.RowCount%2A> を 0 にします。 この場合、呼び出し、 <xref:System.Windows.Forms.DataGridViewRowCollection.Clear%2A?displayProperty=fullName> 新規レコード行を除くすべての行を削除する方法です。 呼び出す <xref:System.Windows.Forms.DataGridViewRowCollection.Clear%2A> 設定と同じ結果を持つ <xref:System.Windows.Forms.DataGridView.RowCount%2A> をここでは 1 に、高速です。  
  
 <xref:System.Windows.Forms.DataGridView.RowCount%2A> プロパティで使用できる、 <xref:System.Windows.Forms.DataGridView.ColumnCount%2A> プロパティを単純な <xref:System.Windows.Forms.DataGridView> の表示やテキストを編集します。 設定した場合、 <xref:System.Windows.Forms.DataGridView.RowCount%2A> プロパティの場合は 0 より大きい値を <xref:System.Windows.Forms.DataGridView> 、列のないコントロール、 <xref:System.Windows.Forms.DataGridViewTextBoxColumn> が自動的に追加します。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.Windows.Forms.DataGridView.RowCount%2A> プロパティです。 この例では、このプロパティはエントリの数を追跡するために使用する <xref:System.Windows.Forms.DataGridView>です。 この例で使用できる例の一部である、 <xref:System.Windows.Forms.DataGridView.SelectionChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewSelectionSum\#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/CS/form1.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectionSum\#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">このプロパティの設定時に指定された値が 0 未満です。  
  
 または  
  
 指定された値が 1 未満で、<see cref="P:System.Windows.Forms.DataGridView.AllowUserToAddRows" /> が <see langword="true" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティを設定すると、<see cref="P:System.Windows.Forms.DataGridView.DataSource" /> プロパティが設定されます。</exception>
      </Docs>
    </Member>
    <Member MemberName="RowDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowEventHandler RowDefaultCellStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowEventHandler RowDefaultCellStyleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowDefaultCellStyleChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>行の <see cref="P:System.Windows.Forms.DataGridViewBand.DefaultCellStyle" /> プロパティの値が変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、いずれかのプロパティ、 <xref:System.Windows.Forms.DataGridViewCellStyle> によって返される、 <xref:System.Windows.Forms.DataGridViewBand.DefaultCellStyle%2A> プロパティ行が新しい値に設定されているため、または、 <xref:System.Windows.Forms.DataGridViewBand.DefaultCellStyle%2A> を新しい行のプロパティが設定されて <xref:System.Windows.Forms.DataGridViewCellStyle> に少なくとも 1 つのプロパティの値が前のセル スタイル オブジェクトと異なる。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.RowDefaultCellStyleChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.RowDefaultCellStyleChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#340](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#340)]
 [!code-vb[System.Windows.Forms.EventExamples\#340](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#340)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
      </Docs>
    </Member>
    <Member MemberName="RowDirtyStateNeeded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.QuestionEventHandler RowDirtyStateNeeded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.QuestionEventHandler RowDirtyStateNeeded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowDirtyStateNeeded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.QuestionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> コントロールの <see cref="P:System.Windows.Forms.DataGridView.VirtualMode" /> プロパティが <see langword="true" /> で、<see cref="T:System.Windows.Forms.DataGridView" /> が現在の行にコミットされていない変更の有無を確認する必要がある場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、このイベントの設定、 <xref:System.Windows.Forms.QuestionEventArgs.Response%2A?displayProperty=fullName> プロパティを `true` のどのセルの現在の行が変更された場合。 これにより、 <xref:System.Windows.Forms.DataGridView.CancelRowEdit> 行の編集が戻るときに発生するイベントです。 ユーザーは、セルが編集モードで、または 1 回編集モードでない場合に 2 回、esc キーを押して、行の編集を戻すことができます。 このイベントを使用して設定して仮想モードでのコミットのスコープをカスタマイズするため、 <xref:System.Windows.Forms.QuestionEventArgs.Response%2A?displayProperty=fullName> プロパティを選択したコミット スコープに応じて適切な値にします。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、セル レベルのコミット スコープで、ユーザーが現在のセルのみへの変更を戻すことができますを提供するには、このイベントを処理する方法を示します。 される場合にのみが変更されるコミットされていないこととセル レベルのコミットのスコープ内の行が扱われる現在のセルがコミットされていない変更が行の任意のセルの場合ではなくコミットされていない変更します。 この例で使用できる例の一部である [Walkthrough: Implementing Virtual Mode in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/74eb5276-5ab8-4ce0-8005-dae751d85f7c)です。  
  
 [!code-cpp[System.Windows.Forms.DataGridView.VirtualMode\#160](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.VirtualMode/CPP/virtualmode.cpp#160)]
 [!code-csharp[System.Windows.Forms.DataGridView.VirtualMode\#160](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.VirtualMode/CS/virtualmode.cs#160)]
 [!code-vb[System.Windows.Forms.DataGridView.VirtualMode\#160](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.VirtualMode/VB/virtualmode.vb#160)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowDividerDoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowDividerDoubleClickEventHandler RowDividerDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowDividerDoubleClickEventHandler RowDividerDoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowDividerDoubleClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowDividerDoubleClickEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーが、2 つの行の間の境界線をダブルクリックしたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントを使用して、ユーザーが行の区分線をダブルクリックしたときに発生する自動サイズ変更動作をカスタマイズすることができます。  
  
 行 <xref:System.Windows.Forms.DataGridViewColumn.DividerWidth%2A> プロパティは、ユーザーがダブルクリックできる領域の範囲外です。 このプロパティを使用して区分線の高さを増加すると場合、ユーザーは、区分線と隣接する列間の境界をダブルクリックすると、このイベントが発生します。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.RowDividerDoubleClick> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.RowDividerDoubleClick> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#342](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#342)]
 [!code-vb[System.Windows.Forms.EventExamples\#342](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#342)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowDividerHeightChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowEventHandler RowDividerHeightChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowEventHandler RowDividerHeightChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowDividerHeightChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridViewRow.DividerHeight" /> プロパティが変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 区分線の高さを設定して変更した、 <xref:System.Windows.Forms.DataGridViewRow.DividerHeight%2A> プロパティです。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.RowDividerHeightChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.RowDividerHeightChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#343](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#343)]
 [!code-vb[System.Windows.Forms.EventExamples\#343](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#343)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler RowEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler RowEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowEnter" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>行が入力フォーカスを受け取り、現在の行になる前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントが発生したときに、 <xref:System.Windows.Forms.DataGridView> が最初に読み込まれると、ユーザーが現在の行以外の行を選択するとします。  
  
 このイベントが発生する前に、 <xref:System.Windows.Forms.DataGridView.CurrentRow%2A> プロパティを更新します。 新たに入力行のインデックスを取得する、 <xref:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex%2A?displayProperty=fullName> イベント ハンドラー内のプロパティです。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例を変更するには、このイベントを処理する方法を示しています、 <xref:System.Windows.Forms.DataGridViewCellStyle.BackColor%2A> 、現在の行のセルのプロパティです。 背景色の設定この例では、 <xref:System.Windows.Forms.DataGridView.RowEnter> にリセットし、イベント <xref:System.Drawing.Color.Empty> 上、 <xref:System.Windows.Forms.DataGridView.RowLeave> イベントです。 この例を実行するを含むフォームにコードを貼り付けます、 <xref:System.Windows.Forms.DataGridView> という `dataGridView1`, 、すべてのイベントがイベント ハンドラーに関連付けられていることを確認します。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc\#200](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#200)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc\#200](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#200)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowErrorTextChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowEventHandler RowErrorTextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowEventHandler RowErrorTextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowErrorTextChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>行の <see cref="P:System.Windows.Forms.DataGridViewRow.ErrorText" /> プロパティが変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.RowErrorTextChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.RowErrorTextChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#345](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#345)]
 [!code-vb[System.Windows.Forms.EventExamples\#345](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#345)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowErrorTextNeeded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowErrorTextNeededEventHandler RowErrorTextNeeded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowErrorTextNeededEventHandler RowErrorTextNeeded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowErrorTextNeeded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowErrorTextNeededEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>行のエラー テキストが必要な場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.DataGridView.RowErrorTextNeeded> のみイベントが発生したときに、 <xref:System.Windows.Forms.DataGridView.DataSource%2A> のプロパティ、 <xref:System.Windows.Forms.DataGridView> コントロールを設定またはその <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> プロパティは `true`です。 処理、 <xref:System.Windows.Forms.DataGridView.RowErrorTextNeeded> をし、その状態が含まれている値によって行のエラーを確認するには、イベントが便利です。  
  
 処理するとき、 <xref:System.Windows.Forms.DataGridView.RowErrorTextNeeded> イベントを指定エラー テキスト ハンドラーで行ヘッダーでエラー グリフが表示される場合を除き、 <xref:System.Windows.Forms.DataGridView.ShowRowErrors%2A> にプロパティが設定されている `false`します。 エラー グリフ上で、ユーザーがマウス ポインターを移動するときは、ツールヒントにエラー テキストが表示されます。  
  
 <xref:System.Windows.Forms.DataGridView.RowErrorTextNeeded> イベントにも発生するたびの値、 <xref:System.Windows.Forms.DataGridViewRow.ErrorText%2A?displayProperty=fullName> プロパティを取得します。  
  
 使用することができます、 <xref:System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs.RowIndex%2A?displayProperty=fullName> 行またはそれに含まれる値の状態を確認して、この情報を使用して、変更または変更するプロパティ、 <xref:System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs.ErrorText%2A?displayProperty=fullName> プロパティです。 このプロパティは、行の値で初期化 <xref:System.Windows.Forms.DataGridViewRow.ErrorText%2A> プロパティで、イベントの値をオーバーライドします。  
  
 処理、 <xref:System.Windows.Forms.DataGridView.RowErrorTextNeeded> 大量のデータ行の設定のパフォーマンスの低下を避けるために使用するときにイベント <xref:System.Windows.Forms.DataGridViewRow.ErrorText%2A> 複数の行の値。 詳細については、「[Best Practices for Scaling the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/8321a8a6-6340-4fd1-b475-fa090b905aaf)」を参照してください。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.RowErrorTextNeeded> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.RowErrorTextNeeded> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#346](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#346)]
 [!code-vb[System.Windows.Forms.EventExamples\#346](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#346)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridView.DataSource" />
        <altmember cref="P:System.Windows.Forms.DataGridView.VirtualMode" />
        <altmember cref="P:System.Windows.Forms.DataGridView.ShowRowErrors" />
        <altmember cref="T:System.Windows.Forms.DataGridViewRowErrorTextNeededEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs" />
        <altmember cref="P:System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs.ErrorText" />
        <altmember cref="P:System.Windows.Forms.DataGridViewRow.ErrorText" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnRowErrorTextNeeded(System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="RowHeaderCellChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowEventHandler RowHeaderCellChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowEventHandler RowHeaderCellChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowHeaderCellChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーが、行ヘッダー セルの内容を変更したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.RowHeaderCellChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.RowHeaderCellChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#349](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#349)]
 [!code-vb[System.Windows.Forms.EventExamples\#349](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#349)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowHeaderMouseClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellMouseEventHandler RowHeaderMouseClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellMouseEventHandler RowHeaderMouseClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowHeaderMouseClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellMouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>行ヘッダーの境界線内で、ユーザーがクリックしたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例は、このイベントの使用方法を示しています。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewSelectedCollections\#05](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectedCollections/CS/DataGridViewSelectedCollections.cs#05)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectedCollections\#05](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectedCollections/VB/DataGridViewSelectedCollections.vb#05)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowHeaderMouseDoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellMouseEventHandler RowHeaderMouseDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellMouseEventHandler RowHeaderMouseDoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowHeaderMouseDoubleClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellMouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>行ヘッダーがダブルクリックされたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.RowHeaderMouseDoubleClick> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.RowHeaderMouseDoubleClick> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#348](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#348)]
 [!code-vb[System.Windows.Forms.EventExamples\#348](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#348)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowHeadersBorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewHeaderBorderStyle RowHeadersBorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridViewHeaderBorderStyle RowHeadersBorderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.RowHeadersBorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewHeaderBorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>行ヘッダー セルの境界線スタイルを取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DataGridViewHeaderBorderStyle" /> 値の 1 つ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Windows.Forms.DataGridView.RowHeadersBorderStyle%2A> プロパティが以外の値に設定されて <xref:System.Windows.Forms.DataGridViewHeaderBorderStyle.Single>, 、 <xref:System.Windows.Forms.DataGridView.GridColor%2A> プロパティは、システム カラーをする必要があります。  
  
 このプロパティを設定することはできません、 <xref:System.Windows.Forms.DataGridViewHeaderBorderStyle.Custom> 、これは読み取り専用の値を示す値を使用すると、罫線のスタイルがカスタマイズされていること、 <xref:System.Windows.Forms.DataGridView.AdvancedRowHeadersBorderStyle%2A> プロパティです。  
  
> [!NOTE]
>  経由でアプリケーションの visual スタイルが有効になっている場合、 <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=fullName> メソッドおよび <xref:System.Windows.Forms.DataGridView.EnableHeadersVisualStyles%2A> プロパティは、 `true`, 、行ヘッダーは、現在のテーマを使用して描画されます。 ここでの値、 <xref:System.Windows.Forms.DataGridView.RowHeadersBorderStyle%2A> 行ヘッダーを除くのすべてのプロパティは無視されます、 <xref:System.Windows.Forms.DataGridView.TopLeftHeaderCell%2A>, 、テーマがない適用します。  
  
   
  
## 例  
 次のコード例は、このプロパティの使用方法を示しています。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc\#030](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#030)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc\#030](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#030)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">このプロパティの設定時に指定された値が有効な <see cref="T:System.Windows.Forms.DataGridViewHeaderBorderStyle" /> 値ではありません。</exception>
        <exception cref="T:System.ArgumentException">このプロパティの設定時に指定された値が <see cref="F:System.Windows.Forms.DataGridViewHeaderBorderStyle.Custom" /> です。</exception>
        <altmember cref="T:System.Windows.Forms.DataGridViewHeaderBorderStyle" />
        <altmember cref="P:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyle" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
        <altmember cref="P:System.Windows.Forms.DataGridView.EnableHeadersVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="RowHeadersBorderStyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RowHeadersBorderStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RowHeadersBorderStyleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowHeadersBorderStyleChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridView.RowHeadersBorderStyle" /> プロパティが変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.RowHeadersBorderStyleChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.RowHeadersBorderStyleChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#275](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#275)]
 [!code-vb[System.Windows.Forms.EventExamples\#275](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#275)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowHeadersDefaultCellStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewCellStyle RowHeadersDefaultCellStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewCellStyle RowHeadersDefaultCellStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>行ヘッダー セルに適用される既定のスタイルを取得または設定します。</summary>
        <value>行ヘッダー セルに適用される既定のスタイルを表す <see cref="T:System.Windows.Forms.DataGridViewCellStyle" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定値 <xref:System.Windows.Forms.DataGridViewCellStyle> これによって返されるプロパティには、次の初期プロパティ値です。  
  
|DataGridViewCellStyle プロパティ|既定値|  
|---------------------------------|---------|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.BackColor%2A>|<xref:System.Drawing.SystemBrushes.Control%2A?displayProperty=fullName> プロパティの値。|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.ForeColor%2A>|<xref:System.Drawing.SystemBrushes.WindowText%2A?displayProperty=fullName> プロパティの値。|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.SelectionBackColor%2A>|<xref:System.Drawing.SystemBrushes.Highlight%2A?displayProperty=fullName> プロパティの値。|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.SelectionForeColor%2A>|<xref:System.Drawing.SystemBrushes.HighlightText%2A?displayProperty=fullName> プロパティの値。|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.Font%2A>|<xref:System.Windows.Forms.DataGridView.Font%2A> プロパティの値。|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.Alignment%2A>|<xref:System.Windows.Forms.DataGridViewContentAlignment.MiddleLeft?displayProperty=fullName>|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A>|<xref:System.Windows.Forms.DataGridViewTriState.True?displayProperty=fullName>|  
  
 これらの値が自動的に値を使用して設定をオーバーライド、 <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> プロパティです。 継承に行ヘッダーを強制的に、 <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> の値に値を設定する必要があります、 <xref:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyle%2A> の既定値にオブジェクトが示されている、 <xref:System.Windows.Forms.DataGridViewCellStyle> クラスです。  
  
 セル スタイルの継承の詳細については、次を参照してください。 [Cell Styles in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/dbb75ed6-8804-4232-8382-f9920c2e380c)します。  
  
   
  
## 例  
 次のコード例では、このプロパティを使用する方法を示しています、 <xref:System.Windows.Forms.DataGridView> をカスタムの色。 注方法 <xref:System.Windows.Forms.DataGridViewCellStyle.SelectionBackColor%2A?displayProperty=fullName> にプロパティが設定されている <xref:System.Drawing.Color.Empty?displayProperty=fullName> から値を継承できるように、 <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> オブジェクトです。  
  
 この例で示されている例の一部である、 <xref:System.Windows.Forms.DataGridViewCellStyle> クラスの概要です。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewStyleDemo\#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/CS/form1.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo\#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
      </Docs>
    </Member>
    <Member MemberName="RowHeadersDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RowHeadersDefaultCellStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RowHeadersDefaultCellStyleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyleChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyle" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This event occurs when a property of the <xref:System.Windows.Forms.DataGridViewCellStyle> returned by the <xref:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyle%2A> property is set to a new value or when the <xref:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyle%2A> property is set to a new <xref:System.Windows.Forms.DataGridViewCellStyle> with at least one property value different than the previous cell style object.  
  
 For more information about handling events, see [Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f).  
  
   
  
## 例  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyleChanged> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.DataGridView> named `DataGridView1`. Then ensure that the event handler is associated with the <xref:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyleChanged> event.  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#276](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#276)]
 [!code-vb[System.Windows.Forms.EventExamples\#276](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#276)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
      </Docs>
    </Member>
    <Member MemberName="RowHeadersVisible">
      <MemberSignature Language="C#" Value="public bool RowHeadersVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RowHeadersVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.RowHeadersVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>行ヘッダーを格納している列が表示されるかどうかを示す値を取得または設定します。</summary>
        <value>行ヘッダーを格納している列が表示される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Windows.Forms.DataGridView.RowHeadersVisible%2A> プロパティは、 `false`, 、行が <xref:System.Windows.Forms.DataGridViewBand.Resizable%2A> にプロパティが設定されている `true`もサイズを変更できるユーザー インターフェイス \(UI\) にマウス カーソルのサイズを変更する行の下罫線に沿って任意の場所をクリックしています。  
  
   
  
## 例  
 次のコード例では、設定、 <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A>, 、<xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A>, 、<xref:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyle%2A>, 、<xref:System.Windows.Forms.DataGridView.CellBorderStyle%2A>, 、<xref:System.Windows.Forms.DataGridView.GridColor%2A>, 、<xref:System.Windows.Forms.DataGridView.BackgroundColor%2A>, 、<xref:System.Windows.Forms.DataGridView.RowHeadersVisible%2A>, 、<xref:System.Windows.Forms.DataGridView.SelectionMode%2A>, 、<xref:System.Windows.Forms.DataGridView.ColumnCount%2A>, 、および <xref:System.Windows.Forms.DataGridView.MultiSelect%2A> プロパティです。 さらに、コードの例では設定する、 <xref:System.Windows.Forms.DataGridViewColumn.Name%2A?displayProperty=fullName> と <xref:System.Windows.Forms.DataGridViewColumn.DefaultCellStyle%2A?displayProperty=fullName> プロパティです。 この例を実行するを含むフォームにコードを貼り付けます、 <xref:System.Windows.Forms.DataGridView> という名前 `dataGridView1`, 、まず、 `SetUpDataGridView` フォームのコンス トラクターからのメソッドまたは <xref:System.Windows.Forms.Form.Load> イベント ハンドラーです。 すべてのイベントがイベント ハンドラーに関連付けられていることを確認します。  
  
 [!code-cpp[System.Windows.Forms.GridViewUnbound\#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CPP/form1.cpp#5)]
 [!code-csharp[System.Windows.Forms.GridViewUnbound\#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CS/form1.cs#5)]
 [!code-vb[System.Windows.Forms.GridViewUnbound\#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このプロパティの設定時に指定した値は <see langword="false" /> であり、<see cref="P:System.Windows.Forms.DataGridView.AutoSizeRowsMode" /> プロパティは <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.AllHeaders" /> または <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.DisplayedHeaders" /> に設定されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="RowHeadersWidth">
      <MemberSignature Language="C#" Value="public int RowHeadersWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RowHeadersWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.RowHeadersWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>行ヘッダーを含む列の幅をピクセル単位で取得または設定します。</summary>
        <value>行ヘッダーを含む列の幅 \(ピクセル単位\)。 既定値は 43 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.DataGridView.RowHeadersWidth%2A> 幅を指定する行ヘッダー列のサイズを変更するプロパティを使用できます。 行ヘッダー セルの内容に合わせて、この列の幅を調整する、 <xref:System.Windows.Forms.DataGridView.AutoResizeRowHeadersWidth%2A> メソッドです。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Windows.Forms.DataGridView.RowHeadersWidth%2A> プロパティ シナリオで行を描画します。 例では、このプロパティの値を使用して、カスタムの背景が描画される範囲を計算します。  
  
 このコード例で使用できるは[How to: Customize the Appearance of Rows in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/d40b53d2-7e7c-48c5-8570-6e79d15c3bbb)です。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewRowPainting\#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRowPainting/CS/datagridviewrowpainting.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewRowPainting\#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRowPainting/VB/datagridviewrowpainting.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">このプロパティを設定するときに指定された値が、最小幅 4 ピクセルより小さいか、最大幅 32768 ピクセルよりも大きくなっています。</exception>
        <altmember cref="Overload:System.Windows.Forms.DataGridView.AutoResizeRowHeadersWidth" />
      </Docs>
    </Member>
    <Member MemberName="RowHeadersWidthChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RowHeadersWidthChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RowHeadersWidthChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowHeadersWidthChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridView.RowHeadersWidth" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.RowHeadersWidthChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.RowHeadersWidthChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#277](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#277)]
 [!code-vb[System.Windows.Forms.EventExamples\#277](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#277)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowHeadersWidthSizeMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode RowHeadersWidthSizeMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode RowHeadersWidthSizeMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.RowHeadersWidthSizeMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>行ヘッダーの幅が調整可能かどうか、およびヘッダーの内容に合わせて、ユーザーによってまたは自動的に調整できるかどうかを示す値を取得または設定します。</summary>
        <value>行ヘッダーの幅を調整できるモードを示す <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> 値。 既定値は、<see cref="F:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.EnableResizing" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティが \[自動サイズ変更モードに設定されている場合は、ユーザーが行ヘッダーの幅を調整できません。  
  
 プログラムを使用して行ヘッダーの高さを調整するには、使用、 <xref:System.Windows.Forms.DataGridView.AutoResizeRowHeadersWidth%2A> メソッドまたはセット、 <xref:System.Windows.Forms.DataGridView.RowHeadersWidth%2A> プロパティです。  
  
 列ヘッダーのサイズ変更モードを設定するには、使用、 <xref:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeMode%2A> プロパティです。  
  
 ヘッダーのサイズ変更の詳細については、次を参照してください。 [Sizing Options in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/a5620a9c-0d06-41e3-8934-c25ddb16c9e6)します。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.DataGridView> コントロールはダブル バッファリングをサポートしていません。 場合 <xref:System.Windows.Forms.Control.DoubleBuffered%2A> に設定されている `true` 派生で <xref:System.Windows.Forms.DataGridView> コントロール、行、列、またはヘッダーのサイズを変更する場合、または列の並べ替えは、ユーザーに視覚的なフィードバックは受信しません。  
  
   
  
## 例  
 次のコード例では、このプロパティを使用する方法を示しています、 <xref:System.Windows.Forms.DataGridView> 、主に表示を目的とします。 この例ではいくつかの方法でコントロールの視覚的な外観をカスタマイズし、コントロールが対話機能を制限を設定します。 この例で使用できる例の一部である、 <xref:System.Windows.Forms.DataGridViewCellStyle> クラスの概要です。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewStyleDemo\#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/CS/form1.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo\#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">このプロパティの設定時に指定した値が、有効な <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> 値ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="RowHeadersWidthSizeModeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewAutoSizeModeEventHandler RowHeadersWidthSizeModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewAutoSizeModeEventHandler RowHeadersWidthSizeModeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowHeadersWidthSizeModeChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAutoSizeModeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridView.RowHeadersWidthSizeMode" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.RowHeadersWidthSizeModeChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.RowHeadersWidthSizeModeChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#278](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#278)]
 [!code-vb[System.Windows.Forms.EventExamples\#278](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#278)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowHeightChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowEventHandler RowHeightChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowEventHandler RowHeightChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowHeightChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>行の <see cref="P:System.Windows.Forms.DataGridViewRow.Height" /> プロパティの値が変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例は、このイベントの使用方法を示しています。 この例で使用できる例の一部である [How to: Customize the Appearance of Rows in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/d40b53d2-7e7c-48c5-8570-6e79d15c3bbb)です。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewRowPainting\#40](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRowPainting/CS/datagridviewrowpainting.cs#40)]
 [!code-vb[System.Windows.Forms.DataGridViewRowPainting\#40](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRowPainting/VB/datagridviewrowpainting.vb#40)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowHeightInfoNeeded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowHeightInfoNeededEventHandler RowHeightInfoNeeded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowHeightInfoNeededEventHandler RowHeightInfoNeeded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowHeightInfoNeeded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowHeightInfoNeededEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>行の高さについての情報が要求された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、並べ替え操作の後にカスタム行の高さを保持するのに便利です。 並べ替え操作は通常はないの追跡データの行と、コントロール内の行の間の対応データ ソースによって処理されるため、必要があります。 のみでこのイベントが発生したときに、 <xref:System.Windows.Forms.DataGridView.DataSource%2A> プロパティが設定されているとき、または、 <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> プロパティは `true`です。 後者の場合は、データ ストアと並べ替え操作を提供します。 処理、 <xref:System.Windows.Forms.DataGridView.RowHeightInfoPushed> 行の高さを変更したときに、更新された高さ情報を格納するイベントです。 使用 <xref:System.Windows.Forms.DataGridView.RowHeightInfoNeeded> コントロールが必要になったときに、保存された高さ情報を取得します。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.RowHeightInfoNeeded> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.RowHeightInfoNeeded> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#351](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#351)]
 [!code-vb[System.Windows.Forms.EventExamples\#351](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#351)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.DataGridView.RowHeightInfoPushed" />
      </Docs>
    </Member>
    <Member MemberName="RowHeightInfoPushed">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowHeightInfoPushedEventHandler RowHeightInfoPushed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowHeightInfoPushedEventHandler RowHeightInfoPushed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowHeightInfoPushed" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowHeightInfoPushedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーが行の高さを変更したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントが発生したときに、 <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> にプロパティが設定されている `true` または <xref:System.Windows.Forms.DataGridView.DataSource%2A> プロパティが以外の値に設定されて `null`します。 このイベントを使用してを追跡し、並べ替え操作の後、復元できるように、行の高さ情報を格納します。 高さ情報を復元するには、処理、 <xref:System.Windows.Forms.DataGridView.RowHeightInfoNeeded> イベントです。 このイベントは、ユーザーが行の高さを変更時にのみ発生に注意してください。 行の高さをプログラムで変更した場合は、同時に新しい高さ情報を格納する必要があります。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.RowHeightInfoPushed> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.RowHeightInfoPushed> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#352](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#352)]
 [!code-vb[System.Windows.Forms.EventExamples\#352](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#352)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.DataGridView.RowHeightInfoNeeded" />
      </Docs>
    </Member>
    <Member MemberName="RowLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler RowLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler RowLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowLeave" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>行が入力フォーカスを失くし、現在の行でなくなったときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例を変更するには、このイベントを処理する方法を示しています、 <xref:System.Windows.Forms.DataGridViewCellStyle.BackColor%2A> 、現在の行のセルのプロパティです。 背景色の設定この例では、 <xref:System.Windows.Forms.DataGridView.RowEnter> にリセットし、イベント <xref:System.Drawing.Color.Empty> 上、 <xref:System.Windows.Forms.DataGridView.RowLeave> イベントです。 この例を実行するを含むフォームにコードを貼り付けます、 <xref:System.Windows.Forms.DataGridView> という `dataGridView1` すべてのイベントがイベント ハンドラーに関連付けられていることを確認します。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc\#200](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#200)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc\#200](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#200)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowMinimumHeightChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowEventHandler RowMinimumHeightChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowEventHandler RowMinimumHeightChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowMinimumHeightChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>行の <see cref="P:System.Windows.Forms.DataGridViewRow.MinimumHeight" /> プロパティの値が変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.RowMinimumHeightChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.RowMinimumHeightChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#354](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#354)]
 [!code-vb[System.Windows.Forms.EventExamples\#354](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#354)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowPostPaint">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowPostPaintEventHandler RowPostPaint;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowPostPaintEventHandler RowPostPaint" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowPostPaint" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowPostPaintEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridViewRow" /> が塗りつぶされた後に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントを処理するには、単独または組み合わせで、 <xref:System.Windows.Forms.DataGridView.RowPrePaint> コントロール内の行の外観をカスタマイズするイベントです。 自分自身、または行の特定の部分をペイントは、行全体を描画し、次のメソッドを使用して、 <xref:System.Windows.Forms.DataGridViewRowPostPaintEventArgs> を他の部分を描画するクラス。  
  
-   <xref:System.Windows.Forms.DataGridViewRowPostPaintEventArgs.DrawFocus%2A>  
  
-   <xref:System.Windows.Forms.DataGridViewRowPostPaintEventArgs.PaintCells%2A>  
  
-   <xref:System.Windows.Forms.DataGridViewRowPostPaintEventArgs.PaintCellsBackground%2A>  
  
-   <xref:System.Windows.Forms.DataGridViewRowPostPaintEventArgs.PaintCellsContent%2A>  
  
-   <xref:System.Windows.Forms.DataGridViewRowPostPaintEventArgs.PaintHeader%2A>  
  
 使用することも、 <xref:System.Windows.Forms.VisualStyles.VisualStyleRenderer> を現在のテーマを使用して標準のコントロールを描画するクラス。 詳細については、「[Rendering Controls with Visual Styles](http://msdn.microsoft.com/ja-jp/a5b178ba-610e-46c4-a6c0-509c0886a744)」を参照してください。 使用している場合は、 [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)], で使用できる標準のイメージの大規模なライブラリにもアクセス権がある、 <xref:System.Windows.Forms.DataGridView> コントロールです。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、ハンドラーを使用して、 <xref:System.Windows.Forms.DataGridView.RowPostPaint> を通常のセル値の下の行全体にまたがるテキスト コンテンツを描画するイベントです。 この例で使用できる例の一部である [How to: Customize the Appearance of Rows in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/d40b53d2-7e7c-48c5-8570-6e79d15c3bbb)です。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewRowPainting\#30](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRowPainting/CS/datagridviewrowpainting.cs#30)]
 [!code-vb[System.Windows.Forms.DataGridViewRowPainting\#30](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRowPainting/VB/datagridviewrowpainting.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowPrePaint">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowPrePaintEventHandler RowPrePaint;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowPrePaintEventHandler RowPrePaint" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowPrePaint" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowPrePaintEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridViewRow" /> が塗りつぶされる前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントを処理するには、単独または組み合わせで、 <xref:System.Windows.Forms.DataGridView.RowPostPaint> コントロール内の行の外観をカスタマイズするイベントです。 自分自身、または行の特定の部分をペイントは、行全体を描画し、次のメソッドを使用して、 <xref:System.Windows.Forms.DataGridViewRowPrePaintEventArgs> を他の部分を描画するクラス。  
  
-   <xref:System.Windows.Forms.DataGridViewRowPrePaintEventArgs.DrawFocus%2A>  
  
-   <xref:System.Windows.Forms.DataGridViewRowPrePaintEventArgs.PaintCells%2A>  
  
-   <xref:System.Windows.Forms.DataGridViewRowPrePaintEventArgs.PaintCellsBackground%2A>  
  
-   <xref:System.Windows.Forms.DataGridViewRowPrePaintEventArgs.PaintCellsContent%2A>  
  
-   <xref:System.Windows.Forms.DataGridViewRowPrePaintEventArgs.PaintHeader%2A>  
  
 使用することも、 <xref:System.Windows.Forms.VisualStyles.VisualStyleRenderer> を現在のテーマを使用して標準のコントロールを描画するクラス。 詳細については、「[Rendering Controls with Visual Styles](http://msdn.microsoft.com/ja-jp/a5b178ba-610e-46c4-a6c0-509c0886a744)」を参照してください。 使用している場合は、 [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)], で使用できる標準のイメージの大規模なライブラリにもアクセス権がある、 <xref:System.Windows.Forms.DataGridView> コントロールです。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、ハンドラーを使用して、 <xref:System.Windows.Forms.DataGridView.RowPrePaint> 、行が選択されている場合は、グラデーションの行の背景を描画するイベントです。 この例で使用できる例の一部である [How to: Customize the Appearance of Rows in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/d40b53d2-7e7c-48c5-8570-6e79d15c3bbb)です。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewRowPainting\#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRowPainting/CS/datagridviewrowpainting.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewRowPainting\#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRowPainting/VB/datagridviewrowpainting.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rows">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewRowCollection Rows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewRowCollection Rows" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.Rows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> コントロールのすべての行を格納しているコレクションを取得します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DataGridView" /> 内のすべての行を格納している <see cref="T:System.Windows.Forms.DataGridViewRowCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することができます、 <xref:System.Windows.Forms.DataGridView.Rows%2A> を手動で読み込むコレクション、 <xref:System.Windows.Forms.DataGridView> データ ソースにバインドせずにコントロールできます。 次の例では、手動で追加し、行を挿入する方法を示します。 この例では、4 つを追加した <xref:System.Windows.Forms.DataGridViewTextBoxColumn> コントロールのインスタンス <xref:System.Windows.Forms.DataGridView.Columns%2A> コレクションです。  
  
 \[Visual Basic\]  
  
```  
Me.dataGridView1.Rows.Add("five", "six", "seven", "eight")  
Me.dataGridView1.Rows.Insert(0, "one", "two", "three", "four")  
```  
  
 \[C\#\]  
  
```  
this.dataGridView1.Rows.Add("five", "six", "seven", "eight");this.dataGridView1.Rows.Insert(0, "one", "two", "three", "four");  
```  
  
 プログラムを使用して、バインドされていないメンバーを追加する詳細な例について <xref:System.Windows.Forms.DataGridView> 制御例」のセクションを参照してください。  
  
 行には、セルの値だけでなく、スタイル情報が含まれます。 このため、追加または既にスタイルを設定する既存の行に基づいて行を挿入することができます。 これを使用して行える、 <xref:System.Windows.Forms.DataGridViewRowCollection.AddCopy%2A>, 、<xref:System.Windows.Forms.DataGridViewRowCollection.AddCopies%2A>, 、<xref:System.Windows.Forms.DataGridViewRowCollection.InsertCopy%2A>, 、および <xref:System.Windows.Forms.DataGridViewRowCollection.InsertCopies%2A> メソッドです。  
  
 使用することも、 <xref:System.Windows.Forms.DataGridView.Rows%2A> コントロールの値を変更または行を削除するコレクション。 値を変更したり、外部データ ソースにコントロールをバインドするかどうかにかかわらず行を削除できます。 データ ソースがある場合は、データ ソースに直接、変更が適用します。 まだ、ただし、リモート データベースにデータ ソースの更新をプッシュする必要があります。 詳細については、「[How to: Bind Data to the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/1660f69c-5711-45d2-abc1-e25bc6779124)」を参照してください。  
  
 次の例では、プログラムを使用してセルの値を変更する方法を示します。  
  
 \[Visual Basic\]  
  
```  
' Modify the value in the first cell of the second row.  
Me.dataGridView1.Rows[1].Cells[0].Value = "new value"  
  
' The previous line is equivalent to the following line.  
Me.dataGridView1[0, 1].Value = "new value"  
```  
  
 \[C\#\]  
  
```  
// Modify the value in the first cell of the second row.  
this.dataGridView1.Rows[1].Cells[0].Value = "new value";  
  
// The previous line is equivalent to the following line.  
this.dataGridView1[0, 1].Value = "new value";  
```  
  
 使用できる標準的なコレクション機能以外にも、 <xref:System.Windows.Forms.DataGridView.Rows%2A> 行に関する情報を取得するコレクション。 使用して、 <xref:System.Windows.Forms.DataGridViewRowCollection.GetRowState%2A> メソッドの特定の行の状態を判断します。 使用して、 <xref:System.Windows.Forms.DataGridViewRowCollection.GetRowCount%2A> と <xref:System.Windows.Forms.DataGridViewRowCollection.GetRowsHeight%2A> 行の数または特定の状態の行の高さの合計を取得する方法です。 特定の状態を持つ行のインデックスを取得する、 <xref:System.Windows.Forms.DataGridViewRowCollection.GetFirstRow%2A>, 、<xref:System.Windows.Forms.DataGridViewRowCollection.GetLastRow%2A>, 、<xref:System.Windows.Forms.DataGridViewRowCollection.GetNextRow%2A>, 、および <xref:System.Windows.Forms.DataGridViewRowCollection.GetPreviousRow%2A> メソッドです。  
  
 次の例では、最初の選択した行のインデックスを取得し、それを使用して、プログラムを使用して行を削除する方法を示します。  
  
 \[Visual Basic\]  
  
```  
Dim rowToDelete As Int32 = Me.dataGridView1.Rows.GetFirstRow( _  
    DataGridViewElementStates.Selected)  
If rowToDelete > -1 Then  
    Me.dataGridView1.Rows.RemoveAt(rowToDelete)  
End If  
```  
  
 \[C\#\]  
  
```  
Int32 rowToDelete = this.dataGridView1.Rows.GetFirstRow(  
    DataGridViewElementStates.Selected);  
if (rowToDelete > -1)  
{  
    this.dataGridView1.Rows.RemoveAt(rowToDelete);  
}  
```  
  
 パフォーマンスを向上させるために、 <xref:System.Windows.Forms.DataGridViewRowCollection> によって返される、 <xref:System.Windows.Forms.DataGridView.Rows%2A> プロパティは、共有および共有されていない行を含めることができます。 共有された行は、大量のレコード セットのコストを削減するためのメモリを共有します。 レコード セットが非常に大きい場合は、注意が必要にアクセスするときのために行の共有を可能な限り保持する、 <xref:System.Windows.Forms.DataGridView.Rows%2A> プロパティです。  
  
 詳細については、「[Best Practices for Scaling the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/8321a8a6-6340-4fd1-b475-fa090b905aaf)」を参照してください。  
  
   
  
## 例  
 次のコード例では、作成、バインドされていない <xref:System.Windows.Forms.DataGridView>; 設定、 <xref:System.Windows.Forms.DataGridView.ColumnHeadersVisible%2A>, 、<xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A>, と <xref:System.Windows.Forms.DataGridView.ColumnCount%2A> プロパティ、および使用、 <xref:System.Windows.Forms.DataGridView.Rows%2A> と <xref:System.Windows.Forms.DataGridView.Columns%2A> プロパティです。 バージョンを使用する方法も示します、 <xref:System.Windows.Forms.DataGridView.AutoResizeColumnHeadersHeight%2A> と <xref:System.Windows.Forms.DataGridView.AutoResizeRows%2A> メソッドを列見出しおよび行の適切なサイズです。 この例を実行するを含むフォームに次のコードを貼り付け、 <xref:System.Windows.Forms.DataGridView> という名前 `dataGridView1` という名前のボタンと `Button1`, 、しを呼び出す、 `InitializeDataGridView` フォームのコンス トラクターからメソッドまたは <xref:System.Windows.Forms.Form.Load> イベント ハンドラーです。 すべてのイベントがイベント ハンドラーに接続されていることを確認します。  
  
 [!code-cpp[System.Windows.Forms.GridViewAutoSize\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewAutoSize/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.GridViewAutoSize\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewAutoSize/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.GridViewAutoSize\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewAutoSize/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowsAdded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowsAddedEventHandler RowsAdded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowsAddedEventHandler RowsAdded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowsAdded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowsAddedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>新しい行が <see cref="T:System.Windows.Forms.DataGridView" /> に追加された後に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 新しい行が追加されたとき、コントロール内の行は自動的に並べ替えられません。 正しい位置に新しい行を並べ替えを呼び出し、 <xref:System.Windows.Forms.DataGridView.Sort%2A> メソッドで、 <xref:System.Windows.Forms.DataGridView.RowsAdded> イベント ハンドラーです。  
  
 ユーザーが新しいレコードの行を使用して新しい行を追加するとき、 <xref:System.Windows.Forms.DataGridViewRowsAddedEventArgs.RowIndex%2A?displayProperty=fullName> ハンドラーで値のため、このイベントは、これは先ほど追加した行を超えるの 1 つの新しいレコードの行の新しい位置のインデックスに相当します。 行を追加するプログラムを使用して、しかし、ときに、 <xref:System.Windows.Forms.DataGridViewRowsAddedEventArgs.RowIndex%2A> 値は、追加された最初の行のインデックス。  
  
 仮想モードでこのイベントは発生する前に、 <xref:System.Windows.Forms.DataGridView.CellValuePushed> イベントで設定できますし、データ ストアに新しいレコードを作成するために使用する、 <xref:System.Windows.Forms.DataGridView.CellValuePushed> イベント ハンドラーです。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例、 <xref:System.Windows.Forms.DataGridView.RowsAdded> 仮想内の行の番号をインクリメントするイベント <xref:System.Windows.Forms.DataGridView>です。 行の数が使用される、 <xref:System.Windows.Forms.DataGridView.CellValueNeeded> ハンドラーではなく、初期化されたセルの新しい行の空白のセルを表示するタイミングを認識できるようにします。 この例で使用できる例の一部である、 <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> リファレンス トピックです。  
  
 [!code-cpp[System.Windows.Forms.DataGridView.\_Virtual\#20](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/CPP/virtual.cpp#20)]
 [!code-csharp[System.Windows.Forms.DataGridView.\_Virtual\#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/CS/virtual.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridView.\_Virtual\#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/VB/virtual.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewRowsAddedEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewRowsAddedEventArgs" />
        <altmember cref="P:System.Windows.Forms.DataGridViewRowsAddedEventArgs.RowIndex" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellValuePushed" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnRowsAdded(System.Windows.Forms.DataGridViewRowsAddedEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="RowsDefaultCellStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewCellStyle RowsDefaultCellStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewCellStyle RowsDefaultCellStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.RowsDefaultCellStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> の行セルに適用される既定のスタイルを取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DataGridView" /> の行セルに適用される <see cref="T:System.Windows.Forms.DataGridViewCellStyle" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.DataGridView> コントロールのセルに示されているスタイルを使用してそのセルを表示する <xref:System.Windows.Forms.DataGridViewCell.InheritedStyle%2A> プロパティは、その他のプロパティ型のスタイルを継承する <xref:System.Windows.Forms.DataGridViewCellStyle>です。 すべての行のセルにヘッダーを除くセルで指定されたスタイル、 <xref:System.Windows.Forms.DataGridView.RowsDefaultCellStyle%2A> プロパティのオーバーライドで指定されたスタイル、 <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> と <xref:System.Windows.Forms.DataGridViewColumn.DefaultCellStyle%2A?displayProperty=fullName> プロパティで指定されたスタイルによってオーバーライドされると、 <xref:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyle%2A>, 、<xref:System.Windows.Forms.DataGridViewRow.DefaultCellStyle%2A?displayProperty=fullName>, 、および <xref:System.Windows.Forms.DataGridViewCell.Style%2A?displayProperty=fullName> プロパティです。  
  
 詳細については、「[Cell Styles in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/dbb75ed6-8804-4232-8382-f9920c2e380c)」を参照してください。  
  
 このプロパティを取得するときに、 <xref:System.Windows.Forms.DataGridViewCellStyle> 既定値、プロパティが既にアクセスしていない場合は、値が作成されます。 これが原因で、複数の行のこのプロパティを取得するときに、パフォーマンスに影響します。 可能であれば、1 つを使用して <xref:System.Windows.Forms.DataGridViewCellStyle> 複数の行に対してこのプロパティを設定します。 詳細については、「[Best Practices for Scaling the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/8321a8a6-6340-4fd1-b475-fa090b905aaf)」を参照してください。  
  
   
  
## 例  
 次のコード例は、このプロパティを使用して、台帳効果を作成する方法を示しています、 <xref:System.Windows.Forms.DataGridView> コントロールです。 この例で使用できる例の一部である、 <xref:System.Windows.Forms.DataGridViewCellStyle> クラスの概要です。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewStyleDemo\#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/CS/form1.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo\#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
      </Docs>
    </Member>
    <Member MemberName="RowsDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RowsDefaultCellStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RowsDefaultCellStyleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowsDefaultCellStyleChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridView.RowsDefaultCellStyle" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントの発生時のプロパティ、 <xref:System.Windows.Forms.DataGridViewCellStyle> によって返される、 <xref:System.Windows.Forms.DataGridView.RowsDefaultCellStyle%2A> プロパティが新しい値に設定されているとき、または、 <xref:System.Windows.Forms.DataGridView.RowsDefaultCellStyle%2A> 新しいにプロパティが設定されている <xref:System.Windows.Forms.DataGridViewCellStyle> に少なくとも 1 つのプロパティの値が前のセル スタイル オブジェクトと異なる。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.RowsDefaultCellStyleChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.RowsDefaultCellStyleChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#279](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#279)]
 [!code-vb[System.Windows.Forms.EventExamples\#279](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#279)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
      </Docs>
    </Member>
    <Member MemberName="RowsRemoved">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowsRemovedEventHandler RowsRemoved;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowsRemovedEventHandler RowsRemoved" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowsRemoved" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowsRemovedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>行が <see cref="T:System.Windows.Forms.DataGridView" /> から削除されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 行を削除すると、 <xref:System.Windows.Forms.DataGridView> コントロール、後続の行のインデックス番号を補正するために低きます。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例は、このイベントを使用して、分散列の値を更新する方法を示します、 <xref:System.Windows.Forms.DataGridView>です。 この例で使用できる例の一部である、 <xref:System.Windows.Forms.DataGridView.SelectionChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewSelectionSum\#30](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/CS/form1.cs#30)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectionSum\#30](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/VB/form1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewRowsRemovedEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewRowsRemovedEventArgs" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnRowsRemoved(System.Windows.Forms.DataGridViewRowsRemovedEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="RowStateChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowStateChangedEventHandler RowStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowStateChangedEventHandler RowStateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowStateChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowStateChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>行が、フォーカスを取得したり失ったりなど、状態を変更したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.RowStateChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.RowStateChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#359](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#359)]
 [!code-vb[System.Windows.Forms.EventExamples\#359](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#359)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowTemplate">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewRow RowTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewRow RowTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.RowTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロール内のすべての行のテンプレートを表す行を取得または設定します。</summary>
        <value>行テンプレートを表す <see cref="T:System.Windows.Forms.DataGridViewRow" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 外観を全体的に制御することもあります <xref:System.Windows.Forms.DataGridView> さまざまなによって提供されているものよりも行 <xref:System.Windows.Forms.DataGridView> セル スタイル プロパティ。<xref:System.Windows.Forms.DataGridView.RowTemplate%2A> プロパティを使用して、作成、初期化、 <xref:System.Windows.Forms.DataGridViewRow> すべての行がテンプレートとして使用するの場合に新しいレコードの行を含む <xref:System.Windows.Forms.DataGridView.AllowUserToAddRows%2A> は `true`です。  
  
 これは、行の高さなどのプロパティの既定値を設定しているときに便利です。 たとえば、複数の列にまたがるコンテンツを表示するための通常のセルの内容の下に追加の領域を提供するために既定の行の高さを増やすします。  
  
 派生したカスタムの型を使用して外部データが表示される場合に必要な行テンプレートの設定が、 <xref:System.Windows.Forms.DataGridViewRow> クラスです。 バインドされていない <xref:System.Windows.Forms.DataGridView> コントロールを設定したりするプログラムを使用して、 <xref:System.Windows.Forms.DataGridView.Rows%2A> カスタム行型のインスタンスを使用して、コレクションです。 外部データを表示するときに、行は自動的に生成しますが、に基づいて、行のテンプレートでは、カスタムの行型のインスタンスを設定することができます。  
  
 最初にその値を取得するにはこのプロパティに設定されていない場合、新しい <xref:System.Windows.Forms.DataGridViewRow> が作成され、返されます。  
  
   
  
## 例  
 次のコード例は、行のテンプレートを使用して、最初の行の高さと最小の行の高さを指定する方法を示しています。  
  
 [!code-cpp[System.Windows.Forms.DataGridView.RowTemplate\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.RowTemplate/CPP/datagridviewrowtemplate.cpp#1)]
 [!code-csharp[System.Windows.Forms.DataGridView.RowTemplate\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.RowTemplate/CS/datagridviewrowtemplate.cs#1)]
 [!code-vb[System.Windows.Forms.DataGridView.RowTemplate\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.RowTemplate/VB/datagridviewrowtemplate.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このプロパティの設定時に指定された行には、<see cref="P:System.Windows.Forms.DataGridViewElement.DataGridView" /> プロパティが設定されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="RowUnshared">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowEventHandler RowUnshared;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowEventHandler RowUnshared" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowUnshared" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>行の状態が、共有から非共有に変更したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 開発およびテスト中にこのイベントを使用するには、共有から共有されていない状態に変更する行が発生するコードを識別しやすくします。 これは、大量のデータを表示するコントロールをスケーリングする場合に便利です。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.RowUnshared> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.RowUnshared> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#360](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#360)]
 [!code-vb[System.Windows.Forms.EventExamples\#360](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#360)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowValidated">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler RowValidated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler RowValidated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowValidated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>行の検証が終了した後で発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、 <xref:System.Windows.Forms.Control.Validated> イベントです。 このイベントを使用すると、値の行の事後処理を実行できます。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード サンプルでは、このイベントを使用してに残っている行の検証後に任意のエラーの注釈をオフにします。  
  
 [!code-csharp[System.Windows.Forms.DataGridView.RowOperations\#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.RowOperations/CS/rowoperations.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridView.RowOperations\#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.RowOperations/VB/rowoperations.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowValidating">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellCancelEventHandler RowValidating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellCancelEventHandler RowValidating" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowValidating" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>行の検証中に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、 <xref:System.Windows.Forms.Control.Validating?displayProperty=fullName> イベントです。 このイベントを使用して、行のすべての値に対して検証を実行します。 行が検証に合格しなかった場合は、設定、 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A?displayProperty=fullName> プロパティを `true`します。 により、このイベントをキャンセル、 <xref:System.Windows.Forms.DataGridView.RowValidated>, 、<xref:System.Windows.Forms.Control.Validating?displayProperty=fullName>, 、および <xref:System.Windows.Forms.Control.Validated?displayProperty=fullName> イベントが発生しているからとも、ユーザーを無効な行を残すことおよび防止、行をデータ バインド モードで外部データ ソースに保存します。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では <xref:System.Windows.Forms.DataGridView.RowValidating> に有効な追跡し、リリース日が入力したかどうかを確認します。  
  
 [!code-csharp[System.Windows.Forms.DataGridView.RowOperations\#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.RowOperations/CS/rowoperations.cs#5)]
 [!code-vb[System.Windows.Forms.DataGridView.RowOperations\#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.RowOperations/VB/rowoperations.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scroll">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ScrollEventHandler Scroll;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ScrollEventHandler Scroll" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.Scroll" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ScrollEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがコントロール コンテンツをスクロールすると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.Scroll> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.Scroll> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#363](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#363)]
 [!code-vb[System.Windows.Forms.EventExamples\#363](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#363)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollBars">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ScrollBars ScrollBars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ScrollBars ScrollBars" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.ScrollBars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ScrollBars</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> コントロールに表示するスクロール バーの種類を取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ScrollBars" /> 値のいずれか 1 つ。 既定値は、<see cref="F:System.Windows.Forms.ScrollBars.Both" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Regardless of the value of this property, scroll bars are shown only when they are needed. Use this property to prevent scroll bars from appearing. This is useful, for example, when you want to provide an alternative user interface \(UI\) for scrolling.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">このプロパティの設定時に指定した値が、有効な <see cref="T:System.Windows.Forms.ScrollBars" /> 値ではありません。</exception>
        <exception cref="T:System.InvalidOperationException">コミットまたは取り消しできないセルの変更によって <see cref="T:System.Windows.Forms.DataGridView" /> がスクロールできないため、このプロパティの値を設定できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="SelectAll">
      <MemberSignature Language="C#" Value="public void SelectAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.SelectAll" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> 内のすべてのセルを選択します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、 <xref:System.Windows.Forms.DataGridView> は列の選択モードでこのメソッドが呼び出される各列の <xref:System.Windows.Forms.DataGridViewBand.Selected%2A> プロパティに設定されて `true`, 、およびすべての行の <xref:System.Windows.Forms.DataGridViewBand.Selected%2A> にプロパティが設定されている `false`します。  
  
 逆に、 <xref:System.Windows.Forms.DataGridView> は行選択モードでこのメソッドが呼び出されるすべての行の <xref:System.Windows.Forms.DataGridViewBand.Selected%2A> プロパティに設定されて `true`, 、および各列の <xref:System.Windows.Forms.DataGridViewBand.Selected%2A> プロパティに設定されて `false`します。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.Windows.Forms.DataGridView.SelectAll%2A> メソッドです。 この例を実行するを含むフォームにコードを貼り付けます、 <xref:System.Windows.Forms.DataGridView> という名前 `dataGridView1` と <xref:System.Windows.Forms.Button> という `selectAllButton`, 、すべてのイベントがイベント ハンドラーに関連付けられていることを確認します。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc\#180](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#180)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc\#180](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#180)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedCells">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewSelectedCellCollection SelectedCells { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewSelectedCellCollection SelectedCells" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.SelectedCells" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewSelectedCellCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーが選択したセルのコレクションを取得します。</summary>
        <value>ユーザーが選択したセルを表す <see cref="T:System.Windows.Forms.DataGridViewSelectedCellCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.DataGridView.SelectedCells%2A> プロパティが常に設定されるのかに関係なく、 <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> プロパティの値。  
  
 このプロパティには、参照されている時に選択範囲の読み取り専用スナップショットが含まれています。 このコレクションのコピーを保持する場合とは異なって実際、その後 <xref:System.Windows.Forms.DataGridView> 状態で、ユーザーが変更した、選択します。 そのため、コレクションのコピーで動作する必要がありますしません。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.DataGridView.SelectedCells%2A> 選択範囲の値の合計を検索するコレクション。 例では、このコレクションを反復処理され、有効な値がラベルに表示されている合計に追加されます。 この例で使用できる例の一部である、 <xref:System.Windows.Forms.DataGridView.SelectionChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewSelectionSum\#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/CS/form1.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectionSum\#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedColumns">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewSelectedColumnCollection SelectedColumns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewSelectedColumnCollection SelectedColumns" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.SelectedColumns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewSelectedColumnCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーが選択した列のコレクションを取得します。</summary>
        <value>ユーザーが選択した列を表す <see cref="T:System.Windows.Forms.DataGridViewSelectedColumnCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> にプロパティを設定する必要があります <xref:System.Windows.Forms.DataGridViewSelectionMode.FullColumnSelect?displayProperty=fullName> または <xref:System.Windows.Forms.DataGridViewSelectionMode.ColumnHeaderSelect?displayProperty=fullName> の <xref:System.Windows.Forms.DataGridView.SelectedColumns%2A> 化が設定されるプロパティは、列を選択します。  
  
 このプロパティには、参照されている時に選択範囲の読み取り専用スナップショットが含まれています。 このコレクションのコピーを保持する場合とは異なって実際、その後 <xref:System.Windows.Forms.DataGridView> 状態で、ユーザーが変更した、選択します。 そのため、コレクションのコピーで動作する必要がありますしません。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.DataGridView.SelectedColumns%2A> プログラムによる並べ替え\] で選択した列を取得するプロパティです。 このプロパティの使用でこの例では、 <xref:System.Windows.Forms.DataGridView.Sort%2A> 並べ替えの方向を決定する方法です。  
  
 [!code-csharp[System.Windows.Forms.DatagridViewProgrammaticSort\#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewProgrammaticSort/CS/form1.cs#10)]
 [!code-vb[System.Windows.Forms.DatagridViewProgrammaticSort\#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewProgrammaticSort/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedRows">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewSelectedRowCollection SelectedRows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewSelectedRowCollection SelectedRows" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.SelectedRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewSelectedRowCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーが選択した行のコレクションを取得します。</summary>
        <value>ユーザーが選択した行を格納している <see cref="T:System.Windows.Forms.DataGridViewSelectedRowCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> にプロパティを設定する必要があります <xref:System.Windows.Forms.DataGridViewSelectionMode.FullRowSelect> または <xref:System.Windows.Forms.DataGridViewSelectionMode.RowHeaderSelect> の <xref:System.Windows.Forms.DataGridView.SelectedRows%2A> 化が設定されるプロパティは、行を選択します。  
  
 このプロパティには、参照されている時に選択範囲の読み取り専用スナップショットが含まれています。 このコレクションのコピーを保持する場合とは異なって実際、その後 <xref:System.Windows.Forms.DataGridView> 状態で、ユーザーが変更した、選択します。 したがっては使用しないでください、コレクションのコピー。  
  
 プログラムを使用して行を選択して、次のように設定します。 その <xref:System.Windows.Forms.DataGridViewRow.Selected%2A>プロパティを `true`します。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.DataGridView.SelectedRows%2A> プロパティに、 <xref:System.Windows.Forms.DataGridView.UserDeletingRow> イベントです。 最初の行が含まれている場合、この例では、 <xref:System.Windows.Forms.DataGridView.SelectedRows%2A> コレクションし、削除が取り消されました。 この例で使用できる例の一部である、 <xref:System.Windows.Forms.DataGridView.SelectionChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewSelectionSum\#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/CS/form1.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectionSum\#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridViewRow.Selected" />
      </Docs>
    </Member>
    <Member MemberName="SelectionChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SelectionChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SelectionChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.SelectionChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の選択が変更したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、セルが選択またはプログラムから、またはユーザーの操作であるかどうか、選択が取り消されたときに発生します。 たとえば、現在選択されているセルの合計を表示する場合は、このイベントは便利です。  
  
 値を変更すると、 <xref:System.Windows.Forms.DataGridView.CurrentCell%2A> 、プロパティ、 <xref:System.Windows.Forms.DataGridView.SelectionChanged> イベントが発生する前に、 <xref:System.Windows.Forms.DataGridView.CurrentCellChanged> イベントです。 どの <xref:System.Windows.Forms.DataGridView.SelectionChanged> イベント ハンドラーへのアクセス、 <xref:System.Windows.Forms.DataGridView.CurrentCell%2A> 現時点でプロパティがその前の値を取得します。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このイベントの使用方法を示します。 例では、フォームは、選択したセルの値の合計を表示し、選択が変更されたときに合計を更新します。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewSelectionSum\#00](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/CS/form1.cs#00)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectionSum\#00](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/VB/form1.vb#00)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridView.CurrentCell" />
        <altmember cref="E:System.Windows.Forms.DataGridView.SelectionChanged" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CurrentCellChanged" />
      </Docs>
    </Member>
    <Member MemberName="SelectionMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewSelectionMode SelectionMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridViewSelectionMode SelectionMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.SelectionMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewSelectionMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> のセルを選択できるかどうかを示す値を取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DataGridViewSelectionMode" /> 値のいずれか 1 つ。 既定値は、<see cref="F:System.Windows.Forms.DataGridViewSelectionMode.RowHeaderSelect" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値を変更する、 <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> プロパティは、現在の選択を解除します。  
  
   
  
## 例  
 次のコード例では、設定、 <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A>, 、<xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A>, 、<xref:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyle%2A>, 、<xref:System.Windows.Forms.DataGridView.CellBorderStyle%2A>, 、<xref:System.Windows.Forms.DataGridView.GridColor%2A>, 、<xref:System.Windows.Forms.DataGridView.BackgroundColor%2A>, 、<xref:System.Windows.Forms.DataGridView.RowHeadersVisible%2A>, 、<xref:System.Windows.Forms.DataGridView.SelectionMode%2A>, 、<xref:System.Windows.Forms.DataGridView.ColumnCount%2A>, 、および <xref:System.Windows.Forms.DataGridView.MultiSelect%2A> プロパティです。 さらに、コードの例では設定する、 <xref:System.Windows.Forms.DataGridViewColumn.Name%2A?displayProperty=fullName> と <xref:System.Windows.Forms.DataGridViewColumn.DefaultCellStyle%2A?displayProperty=fullName> プロパティです。 この例を実行するを含むフォームにコードを貼り付けます、 <xref:System.Windows.Forms.DataGridView> という名前 `dataGridView1`, 、まず、 `SetUpDataGridView` フォームのコンス トラクターからのメソッドまたは <xref:System.Windows.Forms.Form.Load> イベント ハンドラーです。 すべてのイベントがイベント ハンドラーに関連付けられていることを確認します。  
  
 [!code-cpp[System.Windows.Forms.GridViewUnbound\#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CPP/form1.cpp#5)]
 [!code-csharp[System.Windows.Forms.GridViewUnbound\#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CS/form1.cs#5)]
 [!code-vb[System.Windows.Forms.GridViewUnbound\#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">このプロパティの設定時に指定した値が、有効な <see cref="T:System.Windows.Forms.DataGridViewSelectionMode" /> 値ではありません。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティ設定時に指定された値は <see cref="F:System.Windows.Forms.DataGridViewSelectionMode.FullColumnSelect" /> または <see cref="F:System.Windows.Forms.DataGridViewSelectionMode.ColumnHeaderSelect" /> であり、1 つ以上の列の <see cref="P:System.Windows.Forms.DataGridViewColumn.SortMode" /> プロパティは <see cref="F:System.Windows.Forms.DataGridViewColumnSortMode.Automatic" /> に設定されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetBoundsCore">
      <MemberSignature Language="C#" Value="protected override void SetBoundsCore (int x, int y, int width, int height, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetBoundsCore(int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="x">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Left" /> プロパティ値。</param>
        <param name="y">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Top" /> プロパティ値。</param>
        <param name="width">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Width" /> プロパティ値。</param>
        <param name="height">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Height" /> プロパティ値。</param>
        <param name="specified">
          <see cref="T:System.Windows.Forms.BoundsSpecified" /> 値のビットごとの組み合わせ。</param>
        <summary>このメンバーは <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /> をオーバーライドします。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">幅と高さのうちの一方または両方の値が、最大値 8,388,607 を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetCurrentCellAddressCore">
      <MemberSignature Language="C#" Value="protected virtual bool SetCurrentCellAddressCore (int columnIndex, int rowIndex, bool setAnchorCellAddress, bool validateCurrentCell, bool throughMouseClick);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool SetCurrentCellAddressCore(int32 columnIndex, int32 rowIndex, bool setAnchorCellAddress, bool validateCurrentCell, bool throughMouseClick) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.SetCurrentCellAddressCore(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="setAnchorCellAddress" Type="System.Boolean" />
        <Parameter Name="validateCurrentCell" Type="System.Boolean" />
        <Parameter Name="throughMouseClick" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="columnIndex">セルを含む列のインデックス。</param>
        <param name="rowIndex">セルを含む行のインデックス。</param>
        <param name="setAnchorCellAddress">新たにアクティブになったセルを、Shift キーを使用して後続の複数セルを選択するためのアンカー セルにする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <param name="validateCurrentCell">古いセルの値を検証して、検証が失敗したら変更をキャンセルする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <param name="throughMouseClick">現在のセルがマウス クリックの結果として設定されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>現在アクティブなセルを設定します。</summary>
        <returns>現在のセルが正常に設定された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.DataGridView> コントロールが現在のセルを変更するたびに、このメソッドを使用します。 このメソッドは、選択範囲を変更することがなく、必要に応じて前のセルの検証または選択範囲のアンカー セルを変更せずに、現在のセルを変更します。 アンカー セルには、SHIFT キーを押しながら、ブロックの最後のセルをクリックして、ユーザーが選択できる複数のセルのブロックの最初のセルです。  
  
 場合 `rowIndex` と `columnIndex` 両方\-1、 <xref:System.Windows.Forms.DataGridView.CurrentCell%2A> プロパティを返します。 `null`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndex" /> が、0 未満か、コントロール内の列数から 1 を引いた値を超えており、<paramref name="rowIndex" /> が \-1 ではありません。  
  
 または  
  
 <paramref name="rowIndex" /> が、0 未満か、コントロール内の行数から 1 を引いた値を超えており、<paramref name="columnIndex" /> が \-1 ではありません。</exception>
        <exception cref="T:System.InvalidOperationException">指定されたセルに <see langword="false" /> の <see cref="P:System.Windows.Forms.DataGridViewCell.Visible" /> プロパティ値があります。  
  
 または  
  
 このメソッドは基になるデータ ソースのリセット以外の理由で呼び出され、現在は別のスレッドがこのメソッドを実行しています。</exception>
        <exception cref="T:System.InvalidCastException">新しい現在のセルは編集モードに入ろうとしましたが、その <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> プロパティは <see cref="T:System.Windows.Forms.Control" /> から派生して <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> を実装するクラスを示していません。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetSelectedCellCore">
      <MemberSignature Language="C#" Value="protected virtual void SetSelectedCellCore (int columnIndex, int rowIndex, bool selected);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetSelectedCellCore(int32 columnIndex, int32 rowIndex, bool selected) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.SetSelectedCellCore(System.Int32,System.Int32,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="selected" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="columnIndex">セルを含む列のインデックス。</param>
        <param name="rowIndex">セルを含む行のインデックス。</param>
        <param name="selected">セルを選択する場合は <see langword="true" />。セルの選択を解除する場合は <see langword="false" />。</param>
        <summary>指定された行インデックスおよび列インデックスを持つセルの選択状態を変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.DataGridView> コントロールがセルの選択状態を変更するたびに、このメソッドを使用します。 関係なく、現在選択状態の変化 <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> プロパティの値、および変更することがなく、 <xref:System.Windows.Forms.DataGridView.CurrentCell%2A> プロパティの値。 これは、独自の選択モードを実装する場合に便利です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndex" /> が、0 未満か、コントロール内の列数から 1 を引いた値を超えています。  
  
 または  
  
 <paramref name="rowIndex" /> が、0 未満か、コントロール内の行数から 1 を引いた値を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetSelectedColumnCore">
      <MemberSignature Language="C#" Value="protected virtual void SetSelectedColumnCore (int columnIndex, bool selected);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetSelectedColumnCore(int32 columnIndex, bool selected) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.SetSelectedColumnCore(System.Int32,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="selected" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="columnIndex">列のインデックス番号。</param>
        <param name="selected">列を選択する場合は <see langword="true" />。列の選択を解除する場合は <see langword="false" />。</param>
        <summary>指定されたインデックスを持つ列の選択状態を変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.DataGridView> 列の選択状態を変更するたびに、コントロールがこのメソッドを使用します。 関係なく、現在選択状態の変化 <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> プロパティの値、および変更することがなく、 <xref:System.Windows.Forms.DataGridView.CurrentCell%2A> プロパティの値。 これは、独自の選択モードを実装する場合に便利です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndex" /> が、0 未満か、コントロール内の列数から 1 を引いた値を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetSelectedRowCore">
      <MemberSignature Language="C#" Value="protected virtual void SetSelectedRowCore (int rowIndex, bool selected);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetSelectedRowCore(int32 rowIndex, bool selected) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.SetSelectedRowCore(System.Int32,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="selected" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rowIndex">行のインデックス。</param>
        <param name="selected">行を選択する場合は <see langword="true" />。行の選択を解除する場合は <see langword="false" />。</param>
        <summary>指定されたインデックスを持つ行の選択状態を変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.DataGridView> コントロールが、行の選択状態を変更するたびに、このメソッドを使用します。 関係なく、現在選択状態の変化 <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> プロパティの値、および変更することがなく、 <xref:System.Windows.Forms.DataGridView.CurrentCell%2A> プロパティの値。 これは、独自の選択モードを実装する場合に便利です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="rowIndex" /> が、0 未満か、コントロール内の行数から 1 を引いた値を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="ShowCellErrors">
      <MemberSignature Language="C#" Value="public bool ShowCellErrors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowCellErrors" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.ShowCellErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セル エラーを表示するかどうかを示す値を取得または設定します。</summary>
        <value>検証に失敗したセルに赤いグリフが表示される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowCellToolTips">
      <MemberSignature Language="C#" Value="public bool ShowCellToolTips { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowCellToolTips" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.ShowCellToolTips" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マウス ポインターをセルの上に置いたときにツールヒントを表示するかどうかを示す値を取得または設定します。</summary>
        <value>セルのツールヒントが有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティの値が `true` し、マウス ポインターがセル上、セルは、次の条件が満たされたときにツールヒントを表示します。  
  
-   値、 <xref:System.Windows.Forms.DataGridView.DataSource%2A> プロパティは使用されません `null` の値は、 <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> プロパティは、 `true`, 、およびハンドラーを <xref:System.Windows.Forms.DataGridView.CellToolTipTextNeeded> イベントのセット、 <xref:System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs.ToolTipText%2A?displayProperty=fullName> プロパティ以外の値を <xref:System.String.Empty?displayProperty=fullName>します。  
  
-   <xref:System.Windows.Forms.DataGridViewCell.ToolTipText%2A> セルのプロパティ以外の値を持つ <xref:System.String.Empty?displayProperty=fullName>です。 このプロパティの設定も何も起こりませんがある場合に、 <xref:System.Windows.Forms.DataGridView.CellToolTipTextNeeded> イベント ハンドラー プロパティの値を自動的に取得するため、イベントを発生させるし、イベント ハンドラーに指定したツールヒント テキストを返します。  
  
-   セルの表示では、セルの値が切り捨てられます。 ときに、セルの値 <xref:System.Windows.Forms.DataGridViewCell.ToolTipText%2A> プロパティの値が <xref:System.String.Empty?displayProperty=fullName>, 、切り捨てられたセル値の完全な値がツールヒントに表示されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridView.DataSource" />
        <altmember cref="P:System.Windows.Forms.DataGridView.VirtualMode" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellToolTipTextNeeded" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs.ToolTipText" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.ToolTipText" />
      </Docs>
    </Member>
    <Member MemberName="ShowEditingIcon">
      <MemberSignature Language="C#" Value="public bool ShowEditingIcon { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowEditingIcon" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.ShowEditingIcon" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>編集中のグリフが、編集されているセルの行ヘッダーに表示されるかどうかを示す値を取得または設定します。</summary>
        <value>編集中のグリフを表示する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 行ヘッダーは、現在のセルが編集モードと、ユーザーがセルに変更を加えたときに、鉛筆のような編集中のグリフに表示されます。 編集中のグリフの色を使用して、 <xref:System.Windows.Forms.DataGridViewCellStyle.ForeColor%2A> 行ヘッダー セルのプロパティです。 完全に表示する十分な領域がない場合は、グリフはレンダリングされません。 たとえば、次の行ヘッダー セルの <xref:System.Windows.Forms.DataGridViewCell.Value%2A> プロパティを設定する、グリフは、テキストとグリフの両方に対して十分な空きがない場合は削除します。  
  
 編集中のグリフの表示の値で制御、 <xref:System.Windows.Forms.DataGridView.IsCurrentRowDirty%2A> 仮想モードでのプロパティです。 それ以外の場合はユーザーが、 <xref:System.Windows.Forms.DataGridView.IsCurrentCellDirty%2A> プロパティです。  
  
 標準のグリフは、パブリックに公開されません。 グリフをカスタマイズするには、カスタムを作成することができます <xref:System.Windows.Forms.DataGridViewRowHeaderCell> クラスです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowRowErrors">
      <MemberSignature Language="C#" Value="public bool ShowRowErrors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowRowErrors" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.ShowRowErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ エントリ エラーを含む行ごとに行ヘッダーでエラー グリフを表示するかどうかを示す値を取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DataGridViewRow" /> がエラーがあることを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.DataGridViewRow.ErrorText%2A> プロパティは、行内のセルのいずれかでエラーがあるかどうかを示します。 場合 <xref:System.Windows.Forms.DataGridViewRow.ErrorText%2A> 以外の値に設定されて <xref:System.String.Empty>, 、エラー グリフし \(e316f257-327d-4c99-9e22-1bccfeb84301\)、行ヘッダーに表示されます。  
  
 行ヘッダーの既定の幅には、グリフが表示されるかどうかのエラー グリフを表示する十分な領域が含まれています。 行ヘッダーのサイズが調整できるように、完全にグリフを表示するには、十分な領域がない場合は、グリフはレンダリングされません。  
  
 行ヘッダーには、テキストとグリフの両方を表示できる、ためヘッダーの内容が表示されますに優先度、次のようになります。  
  
1.  行ヘッダー セルに表示されるテキストです。  
  
2.  編集中のグリフ。  
  
3.  エラー グリフ。  
  
 たとえば、行の幅を狭くと、エラー グリフ表示されなくなります最初に、標準グリフし、テキスト。  
  
 上級ユーザーは、カスタムを開発することでエラー グリフをカスタマイズできます <xref:System.Windows.Forms.DataGridViewRowHeaderCell> または <xref:System.Windows.Forms.DataGridViewCell> クラスです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public virtual void Sort (System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Sort(class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.Sort(System.Collections.IComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="comparer">カスタム並べ替え操作を実行する <see cref="T:System.Collections.IComparer" /> の実装。</param>
        <summary>
          <see cref="T:System.Collections.IComparer" /> インターフェイスの実装を使用して、<see cref="T:System.Windows.Forms.DataGridView" /> コントロールの内容を並べ替えます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの並べ替え機能の高度なカスタマイズを使用して、 <xref:System.Windows.Forms.DataGridView> クラスです。 イベント ハンドラーを記述する度にカスタマイズされた並べ替え操作を実装するために、 <xref:System.Windows.Forms.DataGridView.ColumnHeaderMouseClick> イベントを実装するクラスのインスタンスには、このメソッドを呼び出すと、 <xref:System.Collections.IComparer?displayProperty=fullName> パラメーターとしてインターフェイスです。 ここでは設定する、 <xref:System.Windows.Forms.DataGridViewColumn.SortMode%2A?displayProperty=fullName> プロパティを <xref:System.Windows.Forms.DataGridViewColumnSortMode.Programmatic?displayProperty=fullName> 自動並べ替えを無効にして、並べ替えグリフの余裕があるようにします。 プログラムによる並べ替えモードに設定されている列を並べ替えるときにする必要があります、並べ替えグリフ自分で設定して表示する、 <xref:System.Windows.Forms.DataGridViewColumnHeaderCell.SortGlyphDirection%2A?displayProperty=fullName> プロパティです。  
  
 この方法はされる場合にのみ、 <xref:System.Windows.Forms.DataGridView.DataSource%2A> プロパティが設定されていません。 バインドすると、 <xref:System.Windows.Forms.DataGridView> コントロール、外部データ ソースには、そのデータ ソースによって提供される並べ替え操作を使用する必要があります。 仮想モードを実装することで、新しいデータ ソースを指定するときに行う必要がありますも、並べ替え処理自分でします。  
  
 自動的に設定でこのメソッドを呼び出して、 <xref:System.Windows.Forms.DataGridView.CurrentCell%2A> プロパティを `null`します。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.DataGridView.Sort%2A> 複数列並べ替えシナリオでは、メソッドのオーバー ロードします。 この例では、 <xref:System.Collections.IComparer> でインターフェイスを実装、 `RowComparer` クラスです。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewIComparerSort\#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewIComparerSort/CS/form1.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewIComparerSort\#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewIComparerSort/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="comparer" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.DataGridView.VirtualMode" /> が <see langword="true" /> に設定されます。  
  
 または  
  
 <see cref="P:System.Windows.Forms.DataGridView.DataSource" /> <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public virtual void Sort (System.Windows.Forms.DataGridViewColumn dataGridViewColumn, System.ComponentModel.ListSortDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Sort(class System.Windows.Forms.DataGridViewColumn dataGridViewColumn, valuetype System.ComponentModel.ListSortDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.Sort(System.Windows.Forms.DataGridViewColumn,System.ComponentModel.ListSortDirection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataGridViewColumn" Type="System.Windows.Forms.DataGridViewColumn" />
        <Parameter Name="direction" Type="System.ComponentModel.ListSortDirection" />
      </Parameters>
      <Docs>
        <param name="dataGridViewColumn">
          <see cref="T:System.Windows.Forms.DataGridView" /> の内容を並べ替えるキーとなる列。</param>
        <param name="direction">
          <see cref="T:System.ComponentModel.ListSortDirection" /> の値の 1 つ。</param>
        <summary>指定された列の内容に基づいて、<see cref="T:System.Windows.Forms.DataGridView" /> コントロールの内容を昇順または降順で並べ替えます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの内容を並べ替えます、 <xref:System.Windows.Forms.DataGridView> によって指定された列の値を比較します。 既定では、並べ替え操作が使用する、 <xref:System.Collections.Comparer.Compare%2A> メソッドを使用して列のセルのペアを比較する、 <xref:System.Windows.Forms.DataGridViewCell.Value%2A?displayProperty=fullName> プロパティです。  
  
 列を持つ場合、 <xref:System.Windows.Forms.DataGridViewColumn.SortMode%2A> プロパティに設定 <xref:System.Windows.Forms.DataGridViewColumnSortMode.Automatic?displayProperty=fullName>, 、 <xref:System.Windows.Forms.DataGridView.SortedColumn%2A> と <xref:System.Windows.Forms.DataGridView.SortOrder%2A> プロパティが自動的に設定され、適切な並べ替えグリフが表示されます。 列を持つ場合、 <xref:System.Windows.Forms.DataGridViewColumn.SortMode%2A> プロパティに設定 <xref:System.Windows.Forms.DataGridViewColumnSortMode.Programmatic?displayProperty=fullName>, 、を通じて、自分で、並べ替えグリフに表示する必要があります、 <xref:System.Windows.Forms.DataGridViewColumnHeaderCell.SortGlyphDirection%2A?displayProperty=fullName> プロパティです。  
  
 処理することにより、このメソッドで使用される並べ替え操作をカスタマイズすることができます、 <xref:System.Windows.Forms.DataGridView.SortCompare> イベントです。 このイベントは発生時に、 <xref:System.Windows.Forms.DataGridView.DataSource%2A> プロパティが設定されていません。  
  
 ときに、 <xref:System.Windows.Forms.DataGridView.DataSource%2A> プロパティが設定されている、このメソッドはデータ バインドされた列のみに対して機能します。 データ バインドされた列を持って、 <xref:System.Windows.Forms.DataGridViewColumn.DataPropertyName%2A?displayProperty=fullName> プロパティ セット。 これにより、 <xref:System.Windows.Forms.DataGridViewColumn.IsDataBound%2A?displayProperty=fullName> を返すプロパティ `true`します。  
  
 場合、 <xref:System.Windows.Forms.DataGridView> コントロールにバインドされているとバインドされていないの両方の列が含まれている、コントロールがバインドされた列で並べ替えたときに非バインド列の値を維持するために仮想モードを実装する必要があります。 設定してこれを行う、 <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> プロパティを `true` と処理、 <xref:System.Windows.Forms.DataGridView.CellValueNeeded> イベントです。 処理も、列が編集可能な場合、 <xref:System.Windows.Forms.DataGridView.CellValuePushed> イベントです。 仮想モードの詳細については、次を参照してください。 [How to: Implement Virtual Mode in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/98236267-f08e-4918-bcf9-77acf050a3ca)します。 コントロールにデータ バインド、バインドされていない列を並べ替えることはできません。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.DataGridView.Sort%2A> 、プログラムによる並べ替えのです。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewProgrammaticSort\#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewProgrammaticSort/CS/form1.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewProgrammaticSort\#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewProgrammaticSort/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定された列は、この <see cref="T:System.Windows.Forms.DataGridView" /> の一部ではありません。  
  
 または  
  
 <see cref="P:System.Windows.Forms.DataGridView.DataSource" /> プロパティが設定されていて、指定された列の <see cref="P:System.Windows.Forms.DataGridViewColumn.IsDataBound" /> プロパティが <see langword="false" /> を返します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dataGridViewColumn" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.DataGridView.VirtualMode" /> プロパティが <see langword="true" /> に設定されていて、指定された列の <see cref="P:System.Windows.Forms.DataGridViewColumn.IsDataBound" /> プロパティが <see langword="false" /> を返します。  
  
 または  
  
 <see cref="P:System.Windows.Forms.DataGridView.DataSource" /> プロパティによって指定されたオブジェクトが <see cref="T:System.ComponentModel.IBindingList" /> インターフェイスを実装していません。  
  
 または  
  
 <see cref="P:System.Windows.Forms.DataGridView.DataSource" /> プロパティによって指定されたオブジェクトには、<see langword="false" /> の <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> プロパティ値が設定されていますす。</exception>
      </Docs>
    </Member>
    <Member MemberName="SortCompare">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewSortCompareEventHandler SortCompare;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewSortCompareEventHandler SortCompare" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.SortCompare" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewSortCompareEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> が並べ替え操作を実行するために 2 つのセルの値を比較する場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 のみでこのイベントが発生したときに、 <xref:System.Windows.Forms.DataGridView.DataSource%2A> プロパティが設定されていないと、 <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> プロパティの値が `false`です。  
  
 このイベントは、並べ替えられる列のセルのペアを比較します。 ユーザーを持つ列のヘッダーにクリックした場合にのみに発生する、 <xref:System.Windows.Forms.DataGridViewColumn.SortMode%2A> のプロパティの値 <xref:System.Windows.Forms.DataGridViewColumnSortMode.Automatic>, を呼び出す場合や、 <xref:System.Windows.Forms.DataGridView.Sort%28System.Windows.Forms.DataGridViewColumn%2CSystem.ComponentModel.ListSortDirection%29> オーバー ロードします。 列の場合、このイベントの発生時、 <xref:System.Windows.Forms.DataGridViewColumn.SortMode%2A> のプロパティの値 <xref:System.Windows.Forms.DataGridViewColumnSortMode.Programmatic>, 、を通じて、自分で、並べ替えグリフに表示する必要があります、 <xref:System.Windows.Forms.DataGridViewColumnHeaderCell.SortGlyphDirection%2A?displayProperty=fullName> プロパティです。  
  
 このイベントを使用して、複数の列に 1 つの列のセルの値を使用して行を並べ替えることができます。 使用して、 <xref:System.Windows.Forms.DataGridViewSortCompareEventArgs.CellValue1%2A> と <xref:System.Windows.Forms.DataGridViewSortCompareEventArgs.CellValue2%2A> プロパティで指定された列のセルの値を比較する、 <xref:System.Windows.Forms.DataGridViewSortCompareEventArgs.Column%2A> プロパティです。 使用して、 <xref:System.Windows.Forms.DataGridViewSortCompareEventArgs.RowIndex1%2A> と <xref:System.Windows.Forms.DataGridViewSortCompareEventArgs.RowIndex2%2A> を介して他の列の値にアクセスするプロパティ、 <xref:System.Windows.Forms.DataGridView.Rows%2A> コレクションです。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.DataGridView.SortCompare> 、複数の列の並べ替えにします。 この例で示されている例の一部である [How to: Customize Sorting in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/92fb5c14-afab-4cf5-a97e-924fd9cb99f5)です。  
  
 [!code-csharp[System.Windows.Forms.DataGridView.SortCompare\#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.SortCompare/CS/form1.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridView.SortCompare\#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.SortCompare/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewSortCompareEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewSortCompareEventArgs" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnSortCompare(System.Windows.Forms.DataGridViewSortCompareEventArgs)" />
        <altmember cref="P:System.Windows.Forms.DataGridViewColumn.SortMode" />
        <altmember cref="P:System.Windows.Forms.DataGridViewColumnHeaderCell.SortGlyphDirection" />
      </Docs>
    </Member>
    <Member MemberName="Sorted">
      <MemberSignature Language="C#" Value="public event EventHandler Sorted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Sorted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.Sorted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> コントロールが並べ替え操作を完了したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントが発生しない場合、 <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> にプロパティが設定されている `true` 、コントロールがバインドされていない列で並べ替えられます。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例は、並べ替えの後の現在のセルが表示されていることを確認する方法を示しています。 このコードは、バインドされていないでのみ機能 <xref:System.Windows.Forms.DataGridView> コントロールです。<xref:System.Windows.Forms.DataGridView> 、外部データ ソースにバインドされたコントロールの現在のセルは並べ替えるときに自動的に保存されません。  
  
 この例を実行するを含むフォームに次のコードを貼り付け、 <xref:System.Windows.Forms.DataGridView> という `dataGridView1`します。 C\# の場合、接続する必要ありますも、 <xref:System.Windows.Forms.DataGridView.Sorted> イベントをイベント ハンドラーです。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc\#150](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#150)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc\#150](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#150)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SortedColumn">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewColumn SortedColumn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewColumn SortedColumn" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.SortedColumn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumn</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> の内容の現在の並べ替えでキーとなっている列を取得します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DataGridView" /> の内容の現在の並べ替えでキーとなっている <see cref="T:System.Windows.Forms.DataGridViewColumn" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Windows.Forms.DataGridView> が並べ替えられていない、このプロパティは `null`です。  
  
 列がこのプロパティによって示されますが、 <xref:System.Windows.Forms.DataGridViewColumn.SortMode%2A> のプロパティの値 <xref:System.Windows.Forms.DataGridViewColumnSortMode.Automatic?displayProperty=fullName>, の値に基づいて並べ替えグリフが表示されます、 <xref:System.Windows.Forms.DataGridView.SortOrder%2A> プロパティです。  
  
 列の場合は、 <xref:System.Windows.Forms.DataGridViewColumn.SortMode%2A> のプロパティの値 <xref:System.Windows.Forms.DataGridViewColumnSortMode.Programmatic?displayProperty=fullName>, 、を通じて、自分で、並べ替えグリフに表示する必要があります、 <xref:System.Windows.Forms.DataGridViewColumnHeaderCell.SortGlyphDirection%2A?displayProperty=fullName> プロパティです。  
  
> [!NOTE]
>  このプロパティの値は、カスタムの並べ替えを使用してコントロールを並べ替えると意味がありません。 カスタムの並べ替えの詳細については、次を参照してください。、 <xref:System.Windows.Forms.DataGridView.Sort%28System.Collections.IComparer%29> メソッドおよび <xref:System.Windows.Forms.DataGridView.SortCompare> イベントです。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.DataGridView.SortedColumn%2A> 、プログラムによる並べ替えのプロパティです。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewProgrammaticSort\#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewProgrammaticSort/CS/form1.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewProgrammaticSort\#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewProgrammaticSort/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SortOrder">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.SortOrder SortOrder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.SortOrder SortOrder" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.SortOrder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.SortOrder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> コントロール内の項目が昇順または降順で並べ替えられているか、または並べ替えられていないかを示す値を取得します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.SortOrder" /> 値のいずれか。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティの使用を決定して、列が指定した場合、どの並べ替えグリフが表示されます、 <xref:System.Windows.Forms.DataGridView.SortedColumn%2A> プロパティには、 <xref:System.Windows.Forms.DataGridViewColumn.SortMode%2A> のプロパティの値 <xref:System.Windows.Forms.DataGridViewColumnSortMode.Automatic>です。 列の場合は、 <xref:System.Windows.Forms.DataGridViewColumn.SortMode%2A> のプロパティの値 <xref:System.Windows.Forms.DataGridViewColumnSortMode.Programmatic>, 、する必要があります表示し、非表示、並べ替えグリフ自分でを通じて、 <xref:System.Windows.Forms.DataGridViewColumnHeaderCell.SortGlyphDirection%2A> プロパティです。 列の場合は、 <xref:System.Windows.Forms.DataGridViewColumn.SortMode%2A> のプロパティの値 <xref:System.Windows.Forms.DataGridViewColumnSortMode.NotSortable>, 、並べ替えグリフを表示することができますが、場合は、列のサイズを自動調整、用に領域が予約されません。  
  
> [!NOTE]
>  このプロパティの値は、カスタムの並べ替えを使用してコントロールを並べ替えると意味がありません。 カスタムの並べ替えの詳細については、次を参照してください。、 <xref:System.Windows.Forms.DataGridView.Sort%2A> メソッドおよび <xref:System.Windows.Forms.DataGridView.SortCompare> イベントです。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.DataGridView.SortOrder%2A> 、プログラムによる並べ替えのプロパティです。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewProgrammaticSort\#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewProgrammaticSort/CS/form1.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewProgrammaticSort\#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewProgrammaticSort/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StandardTab">
      <MemberSignature Language="C#" Value="public bool StandardTab { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StandardTab" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.StandardTab" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tab キーが、コントロール内の次のセルにフォーカスを移動するのではなく、タブ オーダーの次のコントロールにフォーカスを移動するかどうかを示す値を取得または設定します。</summary>
        <value>Tab キーがタブ オーダーの次のコントロールにフォーカスを移動する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを設定 `false` では、TAB キーをグリッド セルの間でフォーカスを移動します。 次の表では、指定したタブ キーの組み合わせが押されたときに、セルのフォーカスがどのように変化するかについて説明します。  
  
|キーの組み合わせ|結果|  
|--------------|--------|  
|Tab|場合、 <xref:System.Windows.Forms.DataGridView.StandardTab%2A> プロパティは、 `false`, 、行の次のセルにフォーカスが移動します。 行の最後のセルにフォーカスがある場合は、次の行の最初のセルにフォーカスが移動します。 最後のセルにフォーカスがある場合、 <xref:System.Windows.Forms.DataGridView>, 、フォーカスがタブ オーダーの次のコントロールに移動します。|  
|Shift \+ Tab|場合 <xref:System.Windows.Forms.DataGridView.StandardTab%2A> は `false`, 、行の前のセルにフォーカスが移動します。 行の最初のセルにフォーカスがある場合、フォーカス移動最後の前の行のセルにします。 最初のセルにフォーカスがある場合、 <xref:System.Windows.Forms.DataGridView>, 、フォーカスがタブ オーダーの前のコントロールに移動します。|  
|Ctrl \+ Tab|フォーカスがタブ オーダーの次のコントロールに移動します。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler StyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler StyleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.StyleChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロール スタイルが変更されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、このコントロールに関連します。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.ISupportInitialize.BeginInit">
      <MemberSignature Language="C#" Value="void ISupportInitialize.BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.ISupportInitialize.BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.System#ComponentModel#ISupportInitialize#BeginInit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="M:System.ComponentModel.ISupportInitialize.BeginInit" />」を参照してください。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Forms.DataGridView> instance is cast to an <xref:System.ComponentModel.ISupportInitialize> instance.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このメソッドは、この制御のために既に呼び出されています。</exception>
        <altmember cref="T:System.ComponentModel.ISupportInitialize" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.ISupportInitialize.EndInit">
      <MemberSignature Language="C#" Value="void ISupportInitialize.EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.ISupportInitialize.EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.System#ComponentModel#ISupportInitialize#EndInit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="M:System.ComponentModel.ISupportInitialize.EndInit" />」を参照してください。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 使用できる場合にのみ、 <xref:System.Windows.Forms.DataGridView> にインスタンスをキャスト、 <xref:System.ComponentModel.ISupportInitialize> インスタンス。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.ISupportInitialize" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールに関連付けられているテキストを取得または設定します。</summary>
        <value>コントロールに関連付けられたテキストです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコントロールでは、このプロパティは無効です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.TextChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.DataGridView.Text" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ただし、 <xref:System.Windows.Forms.DataGridView.Text%2A> プロパティがこのコントロールでは、このイベントが発生する原因となり、値を変更できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TopLeftHeaderCell">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewHeaderCell TopLeftHeaderCell { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewHeaderCell TopLeftHeaderCell" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.TopLeftHeaderCell" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewHeaderCell</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> コントロールの左上隅にあるヘッダー セルを取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DataGridView" /> の左上隅にある <see cref="T:System.Windows.Forms.DataGridViewHeaderCell" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを設定すると、セルの値を設定、ショートカット メニューを関連付けると、またはに対して実行できる操作を <xref:System.Windows.Forms.DataGridViewHeaderCell>です。  
  
 右から左へ記述する言語用に設計されたアプリケーションでは、このプロパティによって表されるセルは右上隅にあります。  
  
   
  
## 例  
 次のコード例の左上隅にある値を表示するこのプロパティを使用して、 <xref:System.Windows.Forms.DataGridView> コントロールです。 この値には、マスター\/詳細シナリオで、子テーブルがラベル付けします。 この例で使用できる例の一部である、 <xref:System.Windows.Forms.DataGridViewComboBoxColumn> クラスの概要に関するトピック。  
  
 [!code-cpp[System.Windows.Forms.DataGridViewColumn\_AllColumns\_Bound\_Employees\#80](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees/CPP/employees.cpp#80)]
 [!code-csharp[System.Windows.Forms.DataGridViewColumn\_AllColumns\_Bound\_Employees\#80](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees/CS/employees.cs#80)]
 [!code-vb[System.Windows.Forms.DataGridViewColumn\_AllColumns\_Bound\_Employees\#80](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees/VB/employees.vb#80)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateCellErrorText">
      <MemberSignature Language="C#" Value="public void UpdateCellErrorText (int columnIndex, int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateCellErrorText(int32 columnIndex, int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.UpdateCellErrorText(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="columnIndex">更新するセルの列インデックス。行ヘッダーのセルを指定する場合は \-1。</param>
        <param name="rowIndex">更新するセルの行インデックス。列ヘッダーのセルを指定する場合は \-1。</param>
        <summary>指定された位置にあるセルのエラー テキストを強制的に更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 保持するとエラー テキストをセル自分で処理することにより、このメソッドを使用して、 <xref:System.Windows.Forms.DataGridView.CellErrorTextNeeded> イベントです。 指定されたセルの格納されたエラー テキストを変更する場合は、このメソッドを呼び出します。 これは、セルが無効になる強制、 <xref:System.Windows.Forms.DataGridView> 経由で、更新されたエラー テキストを取得するコントロール、 <xref:System.Windows.Forms.DataGridView.CellErrorTextNeeded> イベント ハンドラーです。  
  
 このメソッドを使用して、ヘッダー セルのエラーを更新すること、列ヘッダー セルはエラー グリフを表示しません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndex" /> が、\-1 未満か、コントロール内の列数から 1 を引いた値を超えています。  
  
 \-または\-  
  
 <paramref name="rowIndex" /> が、\-1 未満か、コントロール内の行数から 1 を引いた値を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateCellValue">
      <MemberSignature Language="C#" Value="public void UpdateCellValue (int columnIndex, int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateCellValue(int32 columnIndex, int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.UpdateCellValue(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="columnIndex">新しい値を格納しているセルの、0 から始まる列インデックス。</param>
        <param name="rowIndex">新しい値を格納しているセルの、0 から始まる行インデックス。</param>
        <summary>新しい値に基づいて、コントロール内の指定された位置のセルの表示を強制的に更新します。現在有効になっている自動サイズ変更モードが適用されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 仮想モードでのセルの値を維持して、外部でカスタム データ キャッシュ内の値を更新するときに、このメソッドを使用して、 <xref:System.Windows.Forms.DataGridView.CellValuePushed> イベント ハンドラーです。  
  
 このメソッドは、強制的を使用して新しい値を取得するコントロールのセルを無効に、 <xref:System.Windows.Forms.DataGridView.CellValueNeeded> イベント ハンドラーに適用されるすべての自動サイズ変更モードを適用します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndex" /> が、ゼロ未満か、コントロール内の列数から 1 を引いた値を超えています。  
  
 または  
  
 <paramref name="rowIndex" /> が、ゼロ未満か、コントロール内の行数から 1 を引いた値を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateRowErrorText">
      <MemberSignature Language="C#" Value="public void UpdateRowErrorText (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateRowErrorText(int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.UpdateRowErrorText(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">更新する行の 0 から始まるインデックス番号。</param>
        <summary>特定の行インデックスにある行のエラー テキストを強制的に更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを保持すると行のエラー テキスト自分で処理することにより、 <xref:System.Windows.Forms.DataGridView.RowErrorTextNeeded> イベントです。 指定した行に格納されたエラー テキストを変更すると、このメソッドを呼び出します。 これにより、強制、 <xref:System.Windows.Forms.DataGridView> から更新されたテキストを取得するコントロール、 <xref:System.Windows.Forms.DataGridView.RowErrorTextNeeded> イベント ハンドラーです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="rowIndex" /> が、0 と、コントロール内の行数から 1 を減算した数との間の有効な範囲内にありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateRowErrorText">
      <MemberSignature Language="C#" Value="public void UpdateRowErrorText (int rowIndexStart, int rowIndexEnd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateRowErrorText(int32 rowIndexStart, int32 rowIndexEnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.UpdateRowErrorText(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndexStart" Type="System.Int32" />
        <Parameter Name="rowIndexEnd" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndexStart">更新する行セットの最初の行の 0 から始まるインデックス番号。</param>
        <param name="rowIndexEnd">更新する行セットの最後の行の 0 から始まるインデックス番号。</param>
        <summary>指定範囲の行についてエラー テキストを強制的に更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを保持すると行のエラー テキスト自分で処理することにより、 <xref:System.Windows.Forms.DataGridView.RowErrorTextNeeded> イベントです。 指定された列に格納されたエラー テキストを変更すると、このメソッドを呼び出します。 これにより、強制、 <xref:System.Windows.Forms.DataGridView> から更新されたテキストを取得するコントロール、 <xref:System.Windows.Forms.DataGridView.RowErrorTextNeeded> イベント ハンドラーです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="rowIndexStart" /> が、0 と、コントロール内の行数から 1 を減算した数との間の有効な範囲内にありません。  
  
 または  
  
 <paramref name="rowIndexEnd" /> が、0 と、コントロール内の行数から 1 を減算した数との間の有効な範囲内にありません。  
  
 または  
  
 <paramref name="rowIndexEnd" /> は <paramref name="rowIndexStart" /> より小さい値です。</exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateRowHeightInfo">
      <MemberSignature Language="C#" Value="public void UpdateRowHeightInfo (int rowIndex, bool updateToEnd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateRowHeightInfo(int32 rowIndex, bool updateToEnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.UpdateRowHeightInfo(System.Int32,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="updateToEnd" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rowIndex">更新する最初の行の 0 から始まるインデックス番号。</param>
        <param name="updateToEnd">指定された行および後続のすべての行を更新する場合は <see langword="true" />。</param>
        <summary>指定された行の高さ情報を強制的に更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ハンドラーを使用して自分で行の高さを保持すると、この方法は便利、 <xref:System.Windows.Forms.DataGridView.RowHeightInfoNeeded> と <xref:System.Windows.Forms.DataGridView.RowHeightInfoPushed> イベントです。 外部ストアド行の高さを変更するたびに、このメソッドを呼び出して、 <xref:System.Windows.Forms.DataGridView.RowHeightInfoPushed> イベント ハンドラーです。 これにより、強制、 <xref:System.Windows.Forms.DataGridView> を通じて更新された高さ情報を取得するコントロール、 <xref:System.Windows.Forms.DataGridView.RowHeightInfoNeeded> イベント ハンドラーです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="rowIndex" /> が 0 より小さく、かつ <paramref name="updateToEnd" /> が <see langword="true" /> です。  
  
 \-または\-  
  
 <paramref name="rowIndex" /> が 1 より小さく、かつ <paramref name="updateToEnd" /> が <see langword="false" /> です。  
  
 \-または\-  
  
 <paramref name="rowIndex" /> が、<see cref="P:System.Windows.Forms.DataGridView.Rows" /> コレクションの行インデックスの最高値より大きい値です。</exception>
        <altmember cref="E:System.Windows.Forms.DataGridView.RowHeightInfoNeeded" />
        <altmember cref="E:System.Windows.Forms.DataGridView.RowHeightInfoPushed" />
      </Docs>
    </Member>
    <Member MemberName="UserAddedRow">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowEventHandler UserAddedRow;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowEventHandler UserAddedRow" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.UserAddedRow" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーが <see cref="T:System.Windows.Forms.DataGridView" /> コントロールへの行の追加を完了したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.DataGridView.UserAddedRow> 内のエントリの総数を表示するラベルを更新するイベント、 <xref:System.Windows.Forms.DataGridView>です。 この例で使用できる例の一部である、 <xref:System.Windows.Forms.DataGridView.SelectionChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewSelectionSum\#40](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/CS/form1.cs#40)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectionSum\#40](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/VB/form1.vb#40)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UserDeletedRow">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowEventHandler UserDeletedRow;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowEventHandler UserDeletedRow" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.UserDeletedRow" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーが <see cref="T:System.Windows.Forms.DataGridView" /> コントロールからの行の削除を完了したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.DataGridView.UserDeletedRow> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.DataGridView> という `DataGridView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.DataGridView.UserDeletedRow> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#368](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#368)]
 [!code-vb[System.Windows.Forms.EventExamples\#368](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#368)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UserDeletingRow">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowCancelEventHandler UserDeletingRow;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowCancelEventHandler UserDeletingRow" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.UserDeletingRow" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーが <see cref="T:System.Windows.Forms.DataGridView" /> コントロールから行を削除するときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 完了している行の削除を防ぐためには、このイベントをキャンセルできます。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.DataGridView.UserDeletingRow> からの行の削除をキャンセルするイベント、 <xref:System.Windows.Forms.DataGridView> 選択範囲の開始残高行が含まれている場合。 この例で使用できる例の一部である、 <xref:System.Windows.Forms.DataGridView.SelectionChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewSelectionSum\#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/CS/form1.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectionSum\#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UserSetCursor">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Cursor UserSetCursor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Cursor UserSetCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.UserSetCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.Cursor" /> プロパティの既定またはユーザー指定の値を取得します。</summary>
        <value>
          <see cref="P:System.Windows.Forms.Control.Cursor" /> プロパティの標準の値を表す <see cref="T:System.Windows.Forms.Cursor" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値を設定できますが、 <xref:System.Windows.Forms.Control.Cursor%2A> プロパティには、その値は、マウス ポインターの位置によって変化することができます。 このプロパティの値の取得を使用して、 <xref:System.Windows.Forms.Control.Cursor%2A> プロパティの既定値またはコードで指定された値が正常な状態にします。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Cursor" />
        <altmember cref="T:System.Windows.Forms.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="VerticalScrollBar">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.ScrollBar VerticalScrollBar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ScrollBar VerticalScrollBar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.VerticalScrollBar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ScrollBar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの垂直スクロール バーを取得します。</summary>
        <value>垂直スクロール バーを表す <see cref="T:System.Windows.Forms.ScrollBar" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalScrollingOffset">
      <MemberSignature Language="C#" Value="public int VerticalScrollingOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VerticalScrollingOffset" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.VerticalScrollingOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールが垂直方向にスクロールされる基準となるピクセル数を取得します。</summary>
        <value>コントロールが垂直方向にスクロールされる基準となるピクセル数。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VirtualMode">
      <MemberSignature Language="C#" Value="public bool VirtualMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool VirtualMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.VirtualMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> コントロールに対して独自のデータ管理操作を指定したかどうかを示す値を取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DataGridView" /> が指定されたデータ管理操作を使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 仮想モードは、非常に大きなデータ ストアに使用するために設計されています。 ときに、 <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> プロパティは、 `true`, を作成する、 <xref:System.Windows.Forms.DataGridView> 行および列と、ハンドルの数をセットで、 <xref:System.Windows.Forms.DataGridView.CellValueNeeded> 、セルを設定するイベントです。 仮想モードには、カタログの作成、編集、および削除を処理する、基になるデータ キャッシュの実装が必要です <xref:System.Windows.Forms.DataGridView> セルは、ユーザーの操作に基づいています。 仮想モードの実装の詳細については、次を参照してください。 [How to: Implement Virtual Mode in the Windows Forms DataGridView Control](http://msdn.microsoft.com/ja-jp/98236267-f08e-4918-bcf9-77acf050a3ca)します。  
  
 バインドされていない列の値を維持するために仮想モードを使用する必要があるときに、 <xref:System.Windows.Forms.DataGridView> コントロールがバインドされているモードです。 バインド モードでバインドされていない列による並べ替えはサポートされていません。  
  
   
  
## 例  
 次のコードのコード例では、仮想モードを使用して、正の整数のテーブルを作成します。  
  
 [!code-csharp[System.Windows.Forms.DataGridView.\_Virtual\#0](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/CS/virtual.cs#0)]
 [!code-vb[System.Windows.Forms.DataGridView.\_Virtual\#0](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/VB/virtual.vb#0)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.WndProc(System.Windows.Forms.Message@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">処理するウィンドウ メッセージを表す、参照渡しされた <see cref="T:System.Windows.Forms.Message" />。</param>
        <summary>ウィンドウ メッセージを処理します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 詳細については、次を参照してください。、 <xref:System.Windows.Forms.Control.WndProc%2A?displayProperty=fullName> 基本クラスのメソッドです。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Sort">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> コントロールの内容を並べ替えます。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="AutoResizeColumns">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>セルの内容に合わせてすべての列の幅を調整します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="EndEdit">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>現在のセルの編集操作をコミットして終了します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="UpdateRowErrorText">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>1 つ以上の行のエラー テキストを強制的に更新します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した行と列の交差部分にあるセルを取得または設定するためのインデクサーを提供します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="InvalidateCell">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataGridView" /> のセルを無効化して、強制的に再描画します。</summary>
        <altmember cref="Overload:System.Windows.Forms.Control.Invalidate" />
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="AutoResizeColumn">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>セルの内容に合わせて、指定された列の幅を調整します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="AutoResizeColumnHeadersHeight">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ヘッダーの内容に合わせて列ヘッダーの高さを調整します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ClearSelection">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>現在選択されているセルの選択を解除します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="AutoResizeRows">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>内容に合わせて一部またはすべての行の高さを調整します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="AutoResizeRow">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>セルの内容に合わせて、指定された行の高さを調整します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="AutoResizeRowHeadersWidth">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ヘッダーの内容に合わせて行ヘッダーの幅を調整します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>