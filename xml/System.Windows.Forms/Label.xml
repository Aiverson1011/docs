<Type Name="Label" FullName="System.Windows.Forms.Label">
  <TypeSignature Language="C#" Value="public class Label : System.Windows.Forms.Control" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Label extends System.Windows.Forms.Control" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Label" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Control</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultBindingProperty("Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.LabelDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem("System.Windows.Forms.Design.AutoSizeToolboxItem,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Windows の標準のラベルを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Label> コントロールは通常、コントロールのわかりやすいテキストを提供する使用されます。 たとえば、使用、 <xref:System.Windows.Forms.Label> わかりやすいテキストを追加する、 <xref:System.Windows.Forms.TextBox> コントロールに追加されるデータの種類についてユーザーに通知するコントロール。<xref:System.Windows.Forms.Label> コントロールを使用して、説明するテキストを追加することもできる、 <xref:System.Windows.Forms.Form> 役に立つ情報をユーザーに提供します。 たとえば、追加、 <xref:System.Windows.Forms.Label> の先頭に、 <xref:System.Windows.Forms.Form> 、フォームのコントロールにデータを入力する方法についてユーザーに指示を提供します。<xref:System.Windows.Forms.Label> コントロールは、実行時情報が表示状態をアプリケーションにも使用できます。 たとえば、追加、 <xref:System.Windows.Forms.Label> ファイルの一覧が処理されるときに、各ファイルの状態を表示するフォームを制御します。  
  
 A <xref:System.Windows.Forms.Label> 、フォームのタブ オーダーに参加しているが、フォーカス \(タブ オーダーの次のコントロールがフォーカスを受け取った\) を受信しません。 などの場合、 <xref:System.Windows.Forms.Label.UseMnemonic%2A> プロパティに設定されて `true`, とニーモニック文字\-アンパサンドの後の最初の文字 \(&\) — で指定された、 <xref:System.Windows.Forms.Control.Text%2A> コントロールのプロパティは、ユーザー キーを押したとき ALT \+、ニーモニック、フォーカスが移動、タブ オーダーの次のコントロールにします。 この機能は、フォームのキーボード ナビゲーションを提供します。 テキストを表示するだけでなく、 <xref:System.Windows.Forms.Label> コントロールでを使用して、イメージを表示できるも、 <xref:System.Windows.Forms.Label.Image%2A> プロパティ、またはその組み合わせの <xref:System.Windows.Forms.Label.ImageIndex%2A> と <xref:System.Windows.Forms.Label.ImageList%2A> プロパティです。  
  
> [!NOTE]
>  A <xref:System.Windows.Forms.Label> 可能である透過的なを設定してその <xref:System.Windows.Forms.Control.BackColor%2A> プロパティを `Color.Transparent`します。 透過的なラベルを使用する場合は、コンテナー内に描画する現在のデバイスの座標システムのみを使用または <xref:System.Windows.Forms.Label> バック グラウンドを正しく描画可能性があります。  
  
   
  
## 例  
 次のコード例では、作成、 <xref:System.Windows.Forms.Label> コントロールを 3 次元境界線を持ち、イメージが含まれています。 使用してイメージを表示、 <xref:System.Windows.Forms.Label.ImageList%2A> と <xref:System.Windows.Forms.Label.ImageIndex%2A> プロパティです。 コントロールでは、指定されたニーモニック文字でキャプションもあります。 このコード例で、 <xref:System.Windows.Forms.Label.PreferredHeight%2A> と <xref:System.Windows.Forms.Label.PreferredWidth%2A> に適したサイズ プロパティ、 <xref:System.Windows.Forms.Label> コントロールです。 この例で必要とする、 <xref:System.Windows.Forms.Label.ImageList%2A> が作成され、imageList1 と 2 つのイメージが読み込まれているという名前です。 例では、コードがある、フォームが内にある必要があります、 <xref:System.Drawing> 名前空間に、コードを追加します。  
  
 [!code-cpp[Classic Label Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Label Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Label Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Label Example/CS/source.cs#1)]
 [!code-vb[Classic Label Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Label Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.Control" />
    <altmember cref="T:System.Windows.Forms.TextBox" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Label ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Label.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.Label" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、ラベルが表示され、<xref:System.Windows.Forms.Label.AutoSize%2A>プロパティに設定`false`を使用してその<xref:System.Windows.Forms.Label.BorderStyle%2A>プロパティに設定`BorderStyle.None`です。  
  
   
  
## 例  
 次のコード例を作成する方法を示しています、 <xref:System.Windows.Forms.Label> 3 次元の罫線とを使用して表示されるイメージを持つコントロールを<xref:System.Windows.Forms.Label.ImageList%2A>と<xref:System.Windows.Forms.Label.ImageIndex%2A>プロパティです。 コントロールも持つキャプション ニーモニック文字を指定します。 このコード例で、<xref:System.Windows.Forms.Label.PreferredHeight%2A>と<xref:System.Windows.Forms.Label.PreferredWidth%2A>プロパティの適切なサイズを<xref:System.Windows.Forms.Label>フォームの control 権限が表示されます。 この例では、する必要があります、<xref:System.Windows.Forms.ImageList>が作成され、名前付き imageList1 および 2 つのイメージが読み込まれています。 例では、コードがあるフォーム内にある必要があります、<xref:System.Drawing?displayProperty=fullName>名前空間のコードに追加します。  
  
 [!code-cpp[Classic Label Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Label Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Label Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Label Example/CS/source.cs#1)]
 [!code-vb[Classic Label Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Label Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoEllipsis">
      <MemberSignature Language="C#" Value="public bool AutoEllipsis { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoEllipsis" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Label.AutoEllipsis" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を示す値の右端に表示される、省略記号 \(...\) であるかどうか、 <see cref="T:System.Windows.Forms.Label" />, 、ことを意味する、 <see cref="T:System.Windows.Forms.Label" /> テキストが指定された長さを超える、 <see cref="T:System.Windows.Forms.Label" />です。</summary>
        <value>
          <see langword="true" /> 追加のラベル テキストが、省略記号によって示される場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 設定 <xref:System.Windows.Forms.Label.AutoEllipsis%2A> に `true` の幅からはみ出したテキストを表示する、 <xref:System.Windows.Forms.Label> 、ユーザーがマウスでコントロールを置いたときです。 場合 <xref:System.Windows.Forms.Label.AutoSize%2A> は `true`, ラベルは、テキストが収まるように拡張され、省略記号は表示されません。  
  
> [!IMPORTANT]
>  フォントの高さより高さ場合、 <xref:System.Windows.Forms.Label> と <xref:System.Windows.Forms.Label.AutoEllipsis%2A> は `true`, 、設定する必要があります <xref:System.Windows.Forms.Label.AutoSize%2A> に `false` 描画されるテキストのです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Label.AutoSize" />
      </Docs>
    </Member>
    <Member MemberName="AutoSize">
      <MemberSignature Language="C#" Value="public override bool AutoSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Label.AutoSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Visible)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>内容をすべて表示するためにコントロールのサイズを自動調整するかどうかを示す値を取得または設定します。</summary>
        <value>表示内容に合わせてコントロールの幅を調整する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  
  
 <block subset="none" type="note">  
<para>  
 デザイナーを使用してフォームに追加すると、既定値は <see langword="true" />です。 既定値は、コードからインスタンス化されると <see langword="false" />です。  
  
</para>  
</block></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティに設定すると `true`, 、 <xref:System.Windows.Forms.Label> 内容をすべて表示するには、その幅を調整します。 通常、このプロパティに設定 `true` を使用すると、 <xref:System.Windows.Forms.Label> アプリケーション プロセスの状態などのテキストのさまざまな長さを表示するコントロール。 アプリケーションは、さまざまな言語でテキストを表示するテキストのサイズが増加や Windows の言語設定に基づいて変化も、このプロパティを使用できます。  
  
> [!IMPORTANT]
>  フォントの高さより高さ場合、 <xref:System.Windows.Forms.Label> と <xref:System.Windows.Forms.Label.AutoEllipsis%2A> は `true`, 、設定する必要があります <xref:System.Windows.Forms.Label.AutoSize%2A> に `false` 描画されるテキストのです。  
  
   
  
## 例  
 次のコード例を示しています、 <xref:System.Windows.Forms.Label.AutoSize%2A> プロパティです。 この例を実行するには、フォームと呼び出しで次のコードを貼り付け、 `InitializeLabel` フォームのコンス トラクターからのメソッドまたは `Load` メソッドです。  
  
 [!code-cpp[System.Windows.Forms.LabelAutoSize\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.LabelAutoSize/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.LabelAutoSize\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.LabelAutoSize/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.LabelAutoSize\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.LabelAutoSize/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Text" />
        <altmember cref="P:System.Windows.Forms.Label.PreferredHeight" />
        <altmember cref="P:System.Windows.Forms.Label.PreferredWidth" />
        <altmember cref="P:System.Windows.Forms.Label.AutoEllipsis" />
      </Docs>
    </Member>
    <Member MemberName="AutoSizeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AutoSizeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AutoSizeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Label.AutoSizeChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Label.AutoSize" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.Label.AutoSizeChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.Label> Label1 という名前です。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.Label.AutoSizeChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#458](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#458)]
 [!code-vb[System.Windows.Forms.EventExamples\#458](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#458)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImage">
      <MemberSignature Language="C#" Value="public override System.Drawing.Image BackgroundImage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Image BackgroundImage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Label.BackgroundImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの背景に描画されるイメージを取得または設定します。</summary>
        <value>
          <see cref="T:System.Drawing.Image" /> 、コントロールの背景画像を表します。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスでは、このプロパティは使用されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Label.BackgroundImageChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Label.BackgroundImage" /> プロパティが変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスでは、このイベントは使用されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayout">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImageLayout BackgroundImageLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Label.BackgroundImageLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このクラスでは、このプロパティは使用されません。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ImageLayout" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスでは、このプロパティは使用されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageLayoutChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Label.BackgroundImageLayoutChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Label.BackgroundImageLayout" /> プロパティが変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This event is not relevant for this class.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BorderStyle">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.BorderStyle BorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.BorderStyle BorderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Label.BorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-504)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの境界線スタイルを取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.BorderStyle" /> 値のいずれか。 既定値は、<see langword="BorderStyle.None" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを使用すると、コントロールに罫線を追加します。 このプロパティは、区別するために通常使用、 <xref:System.Windows.Forms.Label> から別のコントロールのラベルを <xref:System.Windows.Forms.Label> アプリケーションのプロセスのステータスを表示する表示します。  
  
   
  
## 例  
 次のコード例では、作成、 <xref:System.Windows.Forms.Label> 3 d 境界線およびを使用して表示されるイメージを持つコントロール、 <xref:System.Windows.Forms.Label.ImageList%2A> と <xref:System.Windows.Forms.Label.ImageIndex%2A> プロパティです。 コントロールでは、指定されたニーモニック文字でキャプションもあります。 このコード例で、 <xref:System.Windows.Forms.Label.PreferredHeight%2A> と <xref:System.Windows.Forms.Label.PreferredWidth%2A> に適したサイズ プロパティ、 <xref:System.Windows.Forms.Label> フォームの control 権限を表示する it にします。 この例で必要とする、 <xref:System.Windows.Forms.ImageList> が作成され、imageList1 と 2 つのイメージが読み込まれているという名前です。 例では、コードがある、フォームが内にある必要があります、 <xref:System.Drawing?displayProperty=fullName> 名前空間に、コードを追加します。  
  
 [!code-cpp[Classic Label Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Label Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Label Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Label Example/CS/source.cs#1)]
 [!code-vb[Classic Label Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Label Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">割り当てられている値は、のいずれかではない、 <see cref="T:System.Windows.Forms.BorderStyle" /> 値。</exception>
        <altmember cref="T:System.Windows.Forms.BorderStyle" />
      </Docs>
    </Member>
    <Member MemberName="CalcImageRenderBounds">
      <MemberSignature Language="C#" Value="protected System.Drawing.Rectangle CalcImageRenderBounds (System.Drawing.Image image, System.Drawing.Rectangle r, System.Drawing.ContentAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Drawing.Rectangle CalcImageRenderBounds(class System.Drawing.Image image, valuetype System.Drawing.Rectangle r, valuetype System.Drawing.ContentAlignment align) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Label.CalcImageRenderBounds(System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.ContentAlignment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="r" Type="System.Drawing.Rectangle" />
        <Parameter Name="align" Type="System.Drawing.ContentAlignment" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> サイズと、コントロール内に描画する際の場所を決定するために使用します。</param>
        <param name="r">A <see cref="T:System.Drawing.Rectangle" /> イメージを描画する領域を表します。</param>
        <param name="align">コントロール内のコンテンツの配置です。</param>
        <summary>内で描画されるイメージの場所とサイズを決定、 <see cref="T:System.Windows.Forms.Label" /> コントロールがコントロールの配置に基づいています。</summary>
        <returns>A <see cref="T:System.Drawing.Rectangle" /> コントロール内で指定したイメージの場所とサイズを表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 派生クラス内には、このメソッドを使用して <xref:System.Windows.Forms.Label>, 内に描画するイメージの場所とサイズを確認する、 <xref:System.Windows.Forms.Label> コントロールがコントロール内の位置に基づきます。 イメージの場所は、コントロールの値に基づいて <xref:System.Windows.Forms.Label.ImageAlign%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Rectangle" />
        <altmember cref="T:System.Drawing.Image" />
        <altmember cref="P:System.Windows.Forms.Label.ImageAlign" />
      </Docs>
    </Member>
    <Member MemberName="CreateAccessibilityInstance">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.AccessibleObject CreateAccessibilityInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Forms.AccessibleObject CreateAccessibilityInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Label.CreateAccessibilityInstance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールの新しいユーザー補助オブジェクトを作成します。</summary>
        <returns>コントロールの新しい <see cref="T:System.Windows.Forms.AccessibleObject" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Label.CreateParams" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロール ハンドルが作成されるときに必要な作成パラメーターを取得します。</summary>
        <value>コントロールを識別するハンドルを作成するときに必要な作成パラメーターを格納している <see cref="T:System.Windows.Forms.CreateParams" />。</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for operating with unmanaged code. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="DefaultImeMode">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.ImeMode DefaultImeMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImeMode DefaultImeMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Label.DefaultImeMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このコントロールでサポートされている既定の IME \(Input Method Editor\) モードを取得します。</summary>
        <value>いずれか、 <see cref="T:System.Windows.Forms.ImeMode" /> このコントロールでサポートされています。 既定値は、<see cref="F:System.Windows.Forms.ImeMode.Disable" /> です。</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.ImeMode" />
      </Docs>
    </Member>
    <Member MemberName="DefaultMargin">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.Padding DefaultMargin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding DefaultMargin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Label.DefaultMargin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロール間に既定で指定されている空白をピクセル単位で取得します。</summary>
        <value>A <see cref="T:System.Windows.Forms.Padding" /> コントロール間の既定の領域を表す値。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultSize">
      <MemberSignature Language="C#" Value="protected override System.Drawing.Size DefaultSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Label.DefaultSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの既定のサイズを取得します。</summary>
        <value>コントロールの既定の <see cref="T:System.Drawing.Size" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Label.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.Windows.Forms.Label" /> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method is called by the public **languageKeyword tag is not supported!!!!**  
 method and the <xref:System.Object.Finalize%2A> method. **languageKeyword tag is not supported!!!!**  
 invokes the protected **languageKeyword tag is not supported!!!!**  
 method with the **parameterReference tag is not supported!!!!**  
 parameter set to **languageKeyword tag is not supported!!!!**  
. <xref:System.Object.Finalize%2A> invokes **languageKeyword tag is not supported!!!!**  
 with **parameterReference tag is not supported!!!!**  
 set to **languageKeyword tag is not supported!!!!**  
.  
  
 When the **parameterReference tag is not supported!!!!**  
 parameter is true, this method releases all resources held by any managed objects that this <xref:System.Windows.Forms.Label> references. This method invokes the **languageKeyword tag is not supported!!!!**  
 method of each referenced object.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> can be called multiple times by other objects. When overriding <see langword="Dispose(Boolean)" /> be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />. For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
 For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="protected void DrawImage (System.Drawing.Graphics g, System.Drawing.Image image, System.Drawing.Rectangle r, System.Drawing.ContentAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DrawImage(class System.Drawing.Graphics g, class System.Drawing.Image image, valuetype System.Drawing.Rectangle r, valuetype System.Drawing.ContentAlignment align) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Label.DrawImage(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.ContentAlignment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Drawing.Graphics" />
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="r" Type="System.Drawing.Rectangle" />
        <Parameter Name="align" Type="System.Drawing.ContentAlignment" />
      </Parameters>
      <Docs>
        <param name="g">
          <see cref="T:System.Drawing.Graphics" /> を描画する画面です。</param>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="r">
          <see cref="T:System.Drawing.Rectangle" /> 境界内に描画します。</param>
        <param name="align">内に描画するイメージの配置、 <see cref="T:System.Windows.Forms.Label" />です。</param>
        <summary>描画、 <see cref="T:System.Drawing.Image" /> 指定した範囲内です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When you are creating your own control that derives from <see cref="T:System.Windows.Forms.Label" />, you can use this method to draw images onto the surface of the control.</para>
        </block>
        <altmember cref="T:System.Drawing.ContentAlignment" />
        <altmember cref="T:System.Drawing.Graphics" />
        <altmember cref="T:System.Drawing.Image" />
        <altmember cref="T:System.Drawing.Rectangle" />
      </Docs>
    </Member>
    <Member MemberName="FlatStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.FlatStyle FlatStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.FlatStyle FlatStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Label.FlatStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.FlatStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ラベル コントロールのフラット スタイルの外観を取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.FlatStyle" /> 値のいずれか。 既定値は <see langword="Standard" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、 <xref:System.Windows.Forms.Label.FlatStyle%2A> にプロパティが設定されている `FlatStyle.System`, に割り当てられているすべての値、 <xref:System.Windows.Forms.Label.ImageList%2A>, 、<xref:System.Windows.Forms.Label.Image%2A>, 、<xref:System.Windows.Forms.Label.ImageIndex%2A>, 、および <xref:System.Windows.Forms.Label.ImageAlign%2A> プロパティは無視されます。 さらに、 <xref:System.Windows.Forms.Label.TextAlign%2A> プロパティには、垂直方向のプロパティの設定ではないプロパティ値が無視されます。 水平方向に配置の設定、 <xref:System.Windows.Forms.Label.TextAlign%2A> プロパティをコントロールの上部に揃えます。 たとえば、設定した場合、 <xref:System.Windows.Forms.Label.TextAlign%2A> プロパティを `ContentAlignment.TopCenter`, 、`ContentAlignment.MiddleCenter`, 、または `ContentAlignment.BottomCenter`, ときに、 <xref:System.Windows.Forms.Label.FlatStyle%2A> プロパティに設定されて `FlatStyle.System`, 、内のテキスト、 <xref:System.Windows.Forms.Label> コントロールがコントロールの境界内の上と中央の場所に配置します。  
  
> [!NOTE]
>  .NET framework version 1.1 では、設定、 <xref:System.Windows.Forms.Label.FlatStyle%2A> プロパティを `FlatStyle.System` の値は伴いません、 <xref:System.Windows.Forms.Label.TextAlign%2A> プロパティを無視します。 さらに、プロパティも何も起こりません派生クラスで <xref:System.Windows.Forms.LinkLabel>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">割り当てられている値は、のいずれかではない、 <see cref="T:System.Windows.Forms.FlatStyle" /> 値。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetPreferredSize">
      <MemberSignature Language="C#" Value="public override System.Drawing.Size GetPreferredSize (System.Drawing.Size proposedSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Drawing.Size GetPreferredSize(valuetype System.Drawing.Size proposedSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Label.GetPreferredSize(System.Drawing.Size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="proposedSize" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="proposedSize">コントロールのカスタム サイズ領域。</param>
        <summary>コントロールが収まる四角形の領域のサイズを取得します。</summary>
        <returns>四角形の幅と高さを表す、順序を付与した <see cref="T:System.Drawing.Size" /> 型のペア。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Image">
      <MemberSignature Language="C#" Value="public System.Drawing.Image Image { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Image Image" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Label.Image" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定に表示されている画像、 <see cref="T:System.Windows.Forms.Label" />です。</summary>
        <value>
          <see cref="T:System.Drawing.Image" /> に表示される、 <see cref="T:System.Windows.Forms.Label" />です。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Label.Image%2A> と同時にプロパティを使用することはできません、 <xref:System.Windows.Forms.Label.ImageList%2A> と <xref:System.Windows.Forms.Label.ImageIndex%2A> プロパティです。 ときに、 <xref:System.Windows.Forms.Label.Image%2A> プロパティを使用して、イメージを表示、 <xref:System.Windows.Forms.Label.ImageList%2A> と <xref:System.Windows.Forms.Label.ImageIndex%2A> プロパティが既定の設定に自動的に設定します。  
  
   
  
## 例  
 次のコード例では、作成、 <xref:System.Windows.Forms.Label> を表示し、 <xref:System.Drawing.Image> の背後にある、 <xref:System.Windows.Forms.Label>です。 まず、例を作成し、 <xref:System.Windows.Forms.Label> し、作成、 <xref:System.Drawing.Image> 、ディスク ファイルに基づきます。 次に、 <xref:System.Windows.Forms.Control.Size%2A> プロパティが初期化、 <xref:System.Drawing.Image>です。 最後に、 <xref:System.Windows.Forms.Label.Image%2A> プロパティが初期化、 <xref:System.Drawing.Image>です。  
  
 [!code-cpp[Label\_Image\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Label_Image/CPP/form1.cpp#1)]
 [!code-csharp[Label\_Image\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Label_Image/CS/form1.cs#1)]
 [!code-vb[Label\_Image\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Label_Image/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Image" />
        <altmember cref="P:System.Windows.Forms.Label.ImageAlign" />
        <altmember cref="P:System.Windows.Forms.Label.ImageList" />
        <altmember cref="P:System.Windows.Forms.Label.ImageIndex" />
      </Docs>
    </Member>
    <Member MemberName="ImageAlign">
      <MemberSignature Language="C#" Value="public System.Drawing.ContentAlignment ImageAlign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.ContentAlignment ImageAlign" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Label.ImageAlign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.ContentAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールに表示されるイメージの配置について値を取得または設定します。</summary>
        <value>
          <see cref="T:System.Drawing.ContentAlignment" /> 値のいずれか。 既定値は、<see langword="ContentAlignment.MiddleCenter" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティでは、イメージの境界内に配置することができます、 <xref:System.Windows.Forms.Label> コントロール、イメージが正しく表示されるようにします。 イメージを追加することができます、 <xref:System.Windows.Forms.Label> を使用して、 <xref:System.Windows.Forms.Label.Image%2A> プロパティまたは <xref:System.Windows.Forms.Label.ImageList%2A> と <xref:System.Windows.Forms.Label.ImageIndex%2A> プロパティです。 コントロールに表示される画像を拡大またはコントロールに入力コントロールのイメージより大きくまたは小さく場合に圧縮ことはできません。  
  
   
  
## 例  
 次のコード例では、作成、 <xref:System.Windows.Forms.Label> 3 d 境界線およびを使用して表示されるイメージを持つコントロール、 <xref:System.Windows.Forms.Label.ImageList%2A> と <xref:System.Windows.Forms.Label.ImageIndex%2A> プロパティです。 コントロールでは、指定されたニーモニック文字でキャプションもあります。 このコード例で、 <xref:System.Windows.Forms.Label.PreferredHeight%2A> と <xref:System.Windows.Forms.Label.PreferredWidth%2A> に適したサイズ プロパティ、 <xref:System.Windows.Forms.Label> フォームの control 権限を表示する it にします。 この例で必要とする、 <xref:System.Windows.Forms.ImageList> が作成され、imageList1 と 2 つのイメージが読み込まれているという名前です。 例では、コードがある、フォームが内にある必要があります、 <xref:System.Drawing?displayProperty=fullName> 名前空間に、コードを追加します。  
  
 [!code-cpp[Classic Label Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Label Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Label Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Label Example/CS/source.cs#1)]
 [!code-vb[Classic Label Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Label Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">割り当てられている値は、のいずれかではない、 <see cref="T:System.Drawing.ContentAlignment" /> 値。</exception>
        <altmember cref="T:System.Drawing.ContentAlignment" />
        <altmember cref="P:System.Windows.Forms.Label.Image" />
        <altmember cref="P:System.Windows.Forms.Label.ImageIndex" />
        <altmember cref="P:System.Windows.Forms.Label.ImageList" />
      </Docs>
    </Member>
    <Member MemberName="ImageIndex">
      <MemberSignature Language="C#" Value="public int ImageIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ImageIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Label.ImageIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.ImageIndexConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定に表示されるイメージのインデックス値、 <see cref="T:System.Windows.Forms.Label" />です。</summary>
        <value>内の位置を表す 0 から始まるインデックス、 <see cref="T:System.Windows.Forms.ImageList" /> コントロール \(に割り当てられている、 <see cref="P:System.Windows.Forms.Label.ImageList" /> プロパティ\) イメージが配置されています。 既定値は \-1 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Label.ImageIndex%2A> と <xref:System.Windows.Forms.Label.ImageList%2A> と同時にプロパティを使用できない、 <xref:System.Windows.Forms.Label.Image%2A> プロパティです。 ときに、 <xref:System.Windows.Forms.Label.ImageIndex%2A> プロパティと <xref:System.Windows.Forms.Label.ImageList%2A> プロパティを使用して、イメージを表示、 <xref:System.Windows.Forms.Label.Image%2A> プロパティ自動的に `null`します。  
  
   
  
## 例  
 次のコード例では、作成、 <xref:System.Windows.Forms.Label> 3 d 境界線およびを使用して表示されるイメージを持つコントロール、 <xref:System.Windows.Forms.Label.ImageList%2A> と <xref:System.Windows.Forms.Label.ImageIndex%2A> プロパティです。 コントロールでは、指定されたニーモニック文字でキャプションもあります。 このコード例で、 <xref:System.Windows.Forms.Label.PreferredHeight%2A> と <xref:System.Windows.Forms.Label.PreferredWidth%2A> に適したサイズ プロパティ、 <xref:System.Windows.Forms.Label> フォームの control 権限を表示する it にします。 この例で必要とする、 <xref:System.Windows.Forms.ImageList> が作成され、imageList1 と 2 つのイメージが読み込まれているという名前です。 例では、コードがある、フォームが内にある必要があります、 <xref:System.Drawing?displayProperty=fullName> 名前空間に、コードを追加します。  
  
 [!code-cpp[Classic Label Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Label Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Label Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Label Example/CS/source.cs#1)]
 [!code-vb[Classic Label Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Label Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">割り当てられている値がの下限より小さい、 <see cref="P:System.Windows.Forms.Label.ImageIndex" /> プロパティです。</exception>
        <altmember cref="P:System.Windows.Forms.Label.Image" />
        <altmember cref="P:System.Windows.Forms.Label.ImageAlign" />
        <altmember cref="P:System.Windows.Forms.Label.ImageList" />
      </Docs>
    </Member>
    <Member MemberName="ImageKey">
      <MemberSignature Language="C#" Value="public string ImageKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ImageKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Label.ImageKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.ImageKeyConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定で、イメージのキー アクセサー、 <see cref="P:System.Windows.Forms.Label.ImageList" />です。</summary>
        <value>イメージのキーを表す文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Label.ImageKey%2A> プロパティを表示するイメージ リストのイメージを指定する、 <xref:System.Windows.Forms.Label>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageList">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImageList ImageList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ImageList ImageList" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Label.ImageList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、 <see cref="T:System.Windows.Forms.ImageList" /> に表示するイメージを格納している、 <see cref="T:System.Windows.Forms.Label" /> コントロールです。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ImageList" /> のコレクションを格納する <see cref="T:System.Drawing.Image" /> オブジェクトです。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Label.ImageIndex%2A> と <xref:System.Windows.Forms.Label.ImageList%2A> と同時にプロパティを使用できない、 <xref:System.Windows.Forms.Label.Image%2A> プロパティです。 ときに、 <xref:System.Windows.Forms.Label.ImageIndex%2A> プロパティと <xref:System.Windows.Forms.Label.ImageList%2A> プロパティを使用して、イメージを表示、 <xref:System.Windows.Forms.Label.Image%2A> にプロパティが設定されている `null`します。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.Label> ガベージ コレクトされない場合その <xref:System.Windows.Forms.Label.ImageList%2A> 別の場所で参照されています。 設定、 <xref:System.Windows.Forms.Label.ImageList%2A> のプロパティ、 <xref:System.Windows.Forms.Label> に `null` 効率的なガベージ コレクションを有効にします。  
  
   
  
## 例  
 次のコード例では、作成、 <xref:System.Windows.Forms.Label> 3 d 境界線およびを使用して表示されるイメージを持つコントロール、 <xref:System.Windows.Forms.Label.ImageList%2A> と <xref:System.Windows.Forms.Label.ImageIndex%2A> プロパティです。 コントロールでは、指定されたニーモニック文字でキャプションもあります。 このコード例で、 <xref:System.Windows.Forms.Label.PreferredHeight%2A> と <xref:System.Windows.Forms.Label.PreferredWidth%2A> に適したサイズ プロパティ、 <xref:System.Windows.Forms.Label> フォームの control 権限を表示する it にします。 この例で必要とする、 <xref:System.Windows.Forms.ImageList> が作成され、imageList1 と 2 つのイメージが読み込まれているという名前です。 例では、コードがある、フォームが内にある必要があります、 <xref:System.Drawing?displayProperty=fullName> 名前空間に、コードを追加します。  
  
 [!code-cpp[Classic Label Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Label Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Label Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Label Example/CS/source.cs#1)]
 [!code-vb[Classic Label Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Label Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Label.Image" />
        <altmember cref="P:System.Windows.Forms.Label.ImageAlign" />
        <altmember cref="P:System.Windows.Forms.Label.ImageIndex" />
        <altmember cref="T:System.Windows.Forms.ImageList" />
      </Docs>
    </Member>
    <Member MemberName="ImeMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImeMode ImeMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImeMode ImeMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Label.ImeMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このコントロールでサポートされている IME \(Input Method Editor\) モードを取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ImeMode" /> 値のいずれか。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスでは、このプロパティは使用されません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">このプロパティに割り当てられている値は、列挙体で指定された有効な値の範囲内ではありません。</exception>
        <altmember cref="T:System.Windows.Forms.ImeMode" />
        <altmember cref="P:System.Windows.Forms.Label.DefaultImeMode" />
      </Docs>
    </Member>
    <Member MemberName="ImeModeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ImeModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ImeModeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Label.ImeModeChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Label.ImeMode" /> プロパティが変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスでは、このイベントは使用されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.KeyEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.KeyEventHandler KeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Label.KeyDown" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ラベルにフォーカスがあるときに、ユーザーがキーを押すと発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスでは、このイベントは使用されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyPress">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.KeyPressEventHandler KeyPress;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.KeyPressEventHandler KeyPress" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Label.KeyPress" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.KeyPressEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ラベルにフォーカスがあるときに、ユーザーがキーを押すと発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスでは、このイベントは使用されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.KeyEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.KeyEventHandler KeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Label.KeyUp" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ラベルにフォーカスがあるときに、ユーザーがキーを放すと発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスでは、このイベントは使用されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnEnabledChanged">
      <MemberSignature Language="C#" Value="protected override void OnEnabledChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnEnabledChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Label.OnEnabledChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.EnabledChanged" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected override void OnFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Label.OnFontChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.FontChanged" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleDestroyed">
      <MemberSignature Language="C#" Value="protected override void OnHandleDestroyed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleDestroyed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Label.OnHandleDestroyed(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.HandleDestroyed" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Label.OnHandleDestroyed%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Label.OnHandleDestroyed(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Label.OnHandleDestroyed(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected override void OnMouseEnter (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseEnter(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Label.OnMouseEnter(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.MouseEnter" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected override void OnMouseLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Label.OnMouseLeave(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.MouseLeave" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPaddingChanged">
      <MemberSignature Language="C#" Value="protected override void OnPaddingChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPaddingChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Label.OnPaddingChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.PaddingChanged" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPaint">
      <MemberSignature Language="C#" Value="protected override void OnPaint (System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPaint(class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Label.OnPaint(System.Windows.Forms.PaintEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.PaintEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.Paint" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnParentChanged">
      <MemberSignature Language="C#" Value="protected override void OnParentChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnParentChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Label.OnParentChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.ParentChanged" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRightToLeftChanged">
      <MemberSignature Language="C#" Value="protected override void OnRightToLeftChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnRightToLeftChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Label.OnRightToLeftChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.RightToLeftChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Label.OnRightToLeftChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Label.OnRightToLeftChanged(System.EventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.Label.OnRightToLeftChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnTextAlignChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnTextAlignChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTextAlignChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Label.OnTextAlignChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Label.TextAlignChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Label.OnTextAlignChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Label.OnTextAlignChanged(System.EventArgs)" /> method.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.Label.TextAlign" />
        <altmember cref="E:System.Windows.Forms.Label.TextAlignChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnTextChanged">
      <MemberSignature Language="C#" Value="protected override void OnTextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnTextChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Label.OnTextChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.TextChanged" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisibleChanged">
      <MemberSignature Language="C#" Value="protected override void OnVisibleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnVisibleChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Label.OnVisibleChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.VisibleChanged" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredHeight">
      <MemberSignature Language="C#" Value="public virtual int PreferredHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PreferredHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Label.PreferredHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの適切な高さを取得します。</summary>
        <value>単一行のテキストが表示されることを想定したコントロールの高さ \(ピクセル単位\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、コントロールに割り当てられているフォントに基づいており、テキストが正しく表示するためにはそのコントロールが高さを返します。 と共にこのプロパティを使用することができます、 <xref:System.Windows.Forms.Label.PreferredWidth%2A> テキストであることを確認するプロパティ、 <xref:System.Windows.Forms.Label> コントロールが正しく表示されます。 使用することができます、 <xref:System.Windows.Forms.Label.AutoSize%2A> 高さと幅を自動的に調整するプロパティ、 <xref:System.Windows.Forms.Label> テキストとフォントのサイズに基づく制御します。  
  
> [!NOTE]
>  場合、 <xref:System.Windows.Forms.Label.BorderStyle%2A> のプロパティ、 <xref:System.Windows.Forms.Label> にコントロールが設定されている `BorderStyle.None`, 、によって返される値 <xref:System.Windows.Forms.Label.PreferredHeight%2A> プロパティが境界線がないことによる大きくなります。  
  
   
  
## 例  
 次のコード例では、作成、 <xref:System.Windows.Forms.Label> 3 d 境界線およびを使用して表示されるイメージを持つコントロール、 <xref:System.Windows.Forms.Label.ImageList%2A> と <xref:System.Windows.Forms.Label.ImageIndex%2A> プロパティです。 コントロールでは、指定されたニーモニック文字でキャプションもあります。 このコード例で、 <xref:System.Windows.Forms.Label.PreferredHeight%2A> と <xref:System.Windows.Forms.Label.PreferredWidth%2A> に適したサイズ プロパティ、 <xref:System.Windows.Forms.Label> フォームの control 権限を表示する it にします。 この例で必要とする、 <xref:System.Windows.Forms.ImageList> が作成され、imageList1 と 2 つのイメージが読み込まれているという名前です。 例では、コードがある、フォームが内にある必要があります、 <xref:System.Drawing?displayProperty=fullName> 名前空間に、コードを追加します。  
  
 [!code-cpp[Classic Label Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Label Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Label Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Label Example/CS/source.cs#1)]
 [!code-vb[Classic Label Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Label Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Label.PreferredWidth" />
        <altmember cref="P:System.Windows.Forms.Label.AutoSize" />
      </Docs>
    </Member>
    <Member MemberName="PreferredWidth">
      <MemberSignature Language="C#" Value="public virtual int PreferredWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PreferredWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Label.PreferredWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの適切な幅を取得します。</summary>
        <value>単一行のテキストが表示されることを想定したコントロールの幅 \(ピクセル単位\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、文字列の長さを返しますが、行の折り返しを考慮に入れてはなりません。 幅 300 ピクセルを測定するテキスト文字列を次の 3 つの行として表示でしたなど、 <xref:System.Windows.Forms.Label> は幅 100 ピクセルです。<xref:System.Windows.Forms.Label.PreferredWidth%2A> プロパティがまだ 300 ピクセルを返します。 と共に、このプロパティを使用することができます、 <xref:System.Windows.Forms.Label.PreferredHeight%2A> 内のテキストの内容を確実に、プロパティ、 <xref:System.Windows.Forms.Label> コントロールが正しく表示されます。 使用することができます、 <xref:System.Windows.Forms.Label.AutoSize%2A> 高さと幅を自動的に調整するプロパティ、 <xref:System.Windows.Forms.Label> テキストとフォントのサイズに基づいて制御します。  
  
> [!NOTE]
>  場合、 <xref:System.Windows.Forms.Label.BorderStyle%2A> のプロパティ、 <xref:System.Windows.Forms.Label> にコントロールが設定されている `BorderStyle.None`, 、によって返される値 <xref:System.Windows.Forms.Label.PreferredWidth%2A> プロパティが境界線がないことによる大きくなります。  
  
   
  
## 例  
 次のコード例では、作成、 <xref:System.Windows.Forms.Label> 3 d 境界線およびを使用して表示されるイメージを持つコントロール、 <xref:System.Windows.Forms.Label.ImageList%2A> と <xref:System.Windows.Forms.Label.ImageIndex%2A> プロパティです。 コントロールでは、指定されたニーモニック文字でキャプションもあります。 このコード例で、 <xref:System.Windows.Forms.Label.PreferredHeight%2A> と <xref:System.Windows.Forms.Label.PreferredWidth%2A> に適したサイズ プロパティ、 <xref:System.Windows.Forms.Label> フォームの control 権限を表示する it にします。 この例で必要とする、 <xref:System.Windows.Forms.ImageList> が作成され、imageList1 と 2 つのイメージが読み込まれているという名前です。 例では、コードがある、フォームが内にある必要があります、 <xref:System.Drawing?displayProperty=fullName> 名前空間に、コードを追加します。  
  
 [!code-cpp[Classic Label Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Label Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Label Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Label Example/CS/source.cs#1)]
 [!code-vb[Classic Label Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Label Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Label.PreferredHeight" />
        <altmember cref="P:System.Windows.Forms.Label.AutoSize" />
      </Docs>
    </Member>
    <Member MemberName="ProcessMnemonic">
      <MemberSignature Language="C#" Value="protected override bool ProcessMnemonic (char charCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance bool ProcessMnemonic(char charCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Label.ProcessMnemonic(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="charCode">処理対象の文字。</param>
        <summary>ニーモニック文字を処理します。</summary>
        <returns>文字がコントロールによってニーモニックとして処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermissionWindow">for access to all windows and user input events. Associated member: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="RenderTransparent">
      <MemberSignature Language="C#" Value="protected virtual bool RenderTransparent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RenderTransparent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Label.RenderTransparent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This property has been deprecated. Use BackColor instead.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンテナー コントロールの背景を表示するかどうかを示します、 <see cref="T:System.Windows.Forms.Label" />です。</summary>
        <value>
          <see langword="true" /> 場合の背景、 <see cref="T:System.Windows.Forms.Label" /> でコントロールのコンテナーが表示される、 <see cref="T:System.Windows.Forms.Label" />。 そうしないと、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 継承するクラス `Label` コントロールが描画されるフォームで派生コントロールの背景を透明に表示されるかどうかを判断するには、このメソッドをオーバーライドできます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBoundsCore">
      <MemberSignature Language="C#" Value="protected override void SetBoundsCore (int x, int y, int width, int height, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetBoundsCore(int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Label.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="x">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Left" /> プロパティ値。</param>
        <param name="y">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Top" /> プロパティ値。</param>
        <param name="width">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Width" /> プロパティ値。</param>
        <param name="height">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Height" /> プロパティ値。</param>
        <param name="specified">
          <see cref="T:System.Windows.Forms.BoundsSpecified" /> 値のビットごとの組み合わせ。 指定されていないパラメーターについては、現在の値が使用されます。</param>
        <summary>ラベルの指定した境界を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 設定した場合、 <xref:System.Windows.Forms.Label.AutoSize%2A> プロパティを `true`, 、ラベルのラベルの内容に合わせてサイズが変更されます。 設定した場合 <xref:System.Windows.Forms.Label.AutoSize%2A> に `false` 呼び出した後、 <xref:System.Windows.Forms.Label.SetBoundsCore%2A> メソッド呼び出しで指定したディメンションがラベルに表示されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TabStop">
      <MemberSignature Language="C#" Value="public bool TabStop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TabStop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Label.TabStop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはユーザーがタブをするかどうかを示す値を設定、 <see cref="T:System.Windows.Forms.Label" />です。 このプロパティは、このクラスでは使用されません。</summary>
        <value>このプロパティは、このクラスでは使用されません。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Label.TabStop%2A> プロパティは無効、 <xref:System.Windows.Forms.Label> クラス、そのため設定 <xref:System.Windows.Forms.Label.TabStop%2A> に `true` も何も起こりません。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.LinkLabel" />
      </Docs>
    </Member>
    <Member MemberName="TabStopChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TabStopChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TabStopChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Label.TabStopChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Label.TabStop" /> プロパティが変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスでは、このイベントは使用されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Label.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このコントロールに関連付けられているテキストを取得または設定します。</summary>
        <value>このコントロールに関連付けられたテキスト。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextAlign">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.ContentAlignment TextAlign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.ContentAlignment TextAlign" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Label.TextAlign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.ContentAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ラベルのテキストの配置を取得または設定します。</summary>
        <value>
          <see cref="T:System.Drawing.ContentAlignment" /> 値のいずれか。 既定値は、<see cref="F:System.Drawing.ContentAlignment.TopLeft" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを使用して、フォーム上のコントロールのレイアウトと一致するラベル内でテキストを配置することができます。 たとえば、コントロールのラベルの右端にある場合は、設定できます、 <xref:System.Windows.Forms.Label.TextAlign%2A> プロパティを右揃えの横位置のいずれか \(<xref:System.Drawing.ContentAlignment.TopRight>, 、<xref:System.Drawing.ContentAlignment.MiddleRight>, 、<xref:System.Drawing.ContentAlignment.BottomRight>\)、テキストは、コントロールに合うようにラベルの右端に配置するとします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">割り当てられている値は、のいずれかではない、 <see cref="T:System.Drawing.ContentAlignment" /> 値。</exception>
        <altmember cref="T:System.Drawing.ContentAlignment" />
      </Docs>
    </Member>
    <Member MemberName="TextAlignChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextAlignChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextAlignChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Label.TextAlignChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Label.TextAlign" /> プロパティの値が変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.Label.TextAlignChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.Label> Label1 という名前です。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.Label.TextAlignChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#459](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#459)]
 [!code-vb[System.Windows.Forms.EventExamples\#459](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#459)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Label.TextAlign" />
        <altmember cref="M:System.Windows.Forms.Label.OnTextAlignChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Label.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.Windows.Forms.Label" /> を表す文字列を返します。</summary>
        <returns>現在の <see cref="T:System.Windows.Forms.Label" /> を表す文字列。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseCompatibleTextRendering">
      <MemberSignature Language="C#" Value="public bool UseCompatibleTextRendering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseCompatibleTextRendering" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Label.UseCompatibleTextRendering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を使用するかどうかを決定する値、 <see cref="T:System.Drawing.Graphics" /> クラス \(GDI+\) または <see cref="T:System.Windows.Forms.TextRenderer" /> クラス \(GDI\) テキストの表示にします。</summary>
        <value>
          <see langword="true" /> 場合、 <see cref="T:System.Drawing.Graphics" /> クラスは、バージョン 1.0 および 1.1 と互換性のためのテキストのレンダリングを実行するために使用する必要があります。 .NET Framework のそれ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `UseCompatibleTextRendering` プロパティは、その表示テキストを使用して Windows フォーム コントロールの間での visual の互換性を維持するためのもの、 <xref:System.Windows.Forms.TextRenderer> クラスと [!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)] と [!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)] を使用してカスタム テキスト レンダリングを実行するアプリケーション、 <xref:System.Drawing.Graphics> クラスです。 ほとんどの場合から、アプリケーションがアップグレードされていない場合に [!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)] または [!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)], 、しておくことをお勧め `UseCompatibleTextRendering` の既定値に設定 `false`します。  
  
 [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] ベース <xref:System.Windows.Forms.TextRenderer> クラスがで導入された、 [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] パフォーマンスを向上させるには、テキストの見栄えをよく、および国際対応フォントのサポートの改善を作成します。 以前のバージョンの [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], 、 [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] ベース <xref:System.Drawing.Graphics> クラスを使用してすべてのテキスト レンダリングを実行します。[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 文字間隔とでの折り返しが異なるから計算 [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]します。 使用する Windows フォーム アプリケーションで、 <xref:System.Drawing.Graphics> テキストをレンダリングするクラスで、これが原因で使用される、コントロールのテキストを <xref:System.Windows.Forms.TextRenderer> を異なるアプリケーションで他のテキストで表示します。 この非互換性を解決するには、設定することができます、 `UseCompatibleTextRendering` プロパティを `true` の特定のコントロールです。 設定する `UseCompatibleTextRendering` に `true` アプリケーションでサポートされているすべてのコントロールを呼び出して、 <xref:System.Windows.Forms.Application.SetCompatibleTextRenderingDefault%2A?displayProperty=fullName> メソッドのパラメーターを持つ `true`です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Application.SetCompatibleTextRenderingDefault(System.Boolean)" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UseCompatibleTextRendering" />
      </Docs>
    </Member>
    <Member MemberName="UseMnemonic">
      <MemberSignature Language="C#" Value="public bool UseMnemonic { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseMnemonic" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Label.UseMnemonic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはアンパサンド文字として解釈するかどうかを示す値を設定する \(&amp;\) は、コントロールの <see cref="P:System.Windows.Forms.Control.Text" /> プロパティをアクセス キーの接頭文字にします。</summary>
        <value>
          <see langword="true" /> 場合は、ラベルのアンパサンド文字が表示されないと、表示テキストにアンパサンドの直後後の文字に下線を付け、およびは下線付き文字をアクセス キーとして扱いますそれ以外の場合、 <see langword="false" /> コントロールのテキストにアンパサンド文字を表示する場合。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Windows.Forms.Label.UseMnemonic%2A> にプロパティが設定されている `true` でニーモニック文字 \(アンパサンドに続く文字\) が定義されていると、 <xref:System.Windows.Forms.Control.Text%2A> のプロパティ、 <xref:System.Windows.Forms.Label>, に依存しているコントロールにフォーカスを設定するキーを押して ALT \+ ニーモニック文字、 <xref:System.Windows.Forms.Label> 、タブ オーダー。 このプロパティを使用して、フォーム上のコントロールへの適切なキーボード ナビゲーションを提供することができます。  
  
   
  
## 例  
 次のコード例では、作成、 <xref:System.Windows.Forms.Label> 3 d 境界線およびを使用して表示されるイメージを持つコントロール、 <xref:System.Windows.Forms.Label.ImageList%2A> と <xref:System.Windows.Forms.Label.ImageIndex%2A> プロパティです。 コントロールでは、指定されたニーモニック文字でキャプションもあります。 このコード例で、 <xref:System.Windows.Forms.Label.PreferredHeight%2A> と <xref:System.Windows.Forms.Label.PreferredWidth%2A> に適したサイズ プロパティ、 <xref:System.Windows.Forms.Label> フォームの control 権限を表示する it にします。 この例で必要とする、 <xref:System.Windows.Forms.Label.ImageList%2A> が作成され、imageList1 と 2 つのイメージが読み込まれているという名前です。 例では、コードがある、フォームが内にある必要があります、 <xref:System.Drawing> 名前空間に、コードを追加します。  
  
 [!code-cpp[Classic Label Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Label Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Label Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Label Example/CS/source.cs#1)]
 [!code-vb[Classic Label Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Label Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Text" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Label.WndProc(System.Windows.Forms.Message@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">処理対象の Windows <see cref="T:System.Windows.Forms.Message" />。</param>
        <summary>Windows メッセージを処理します。</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for operating with unmanaged code. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>