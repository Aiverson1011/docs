<Type Name="ComboBox+ObjectCollection" FullName="System.Windows.Forms.ComboBox+ObjectCollection">
  <TypeSignature Language="C#" Value="public class ComboBox.ObjectCollection : System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi beforefieldinit ComboBox/ObjectCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ComboBox.ObjectCollection" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ListBindable(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see cref="T:System.Windows.Forms.ComboBox" /> 内の項目のコレクションを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ComboBox.ObjectCollection?displayProperty=fullName> クラス内の項目をカプセル化、 <xref:System.Windows.Forms.ComboBox>です。 さまざまな種類の文字列、イメージ、およびカスタム ビジネス オブジェクトを含むオブジェクトを管理する、コンボ ボックスのオブジェクトのコレクションを使用できます。  
  
 いくつかの方法でコレクションに項目を追加できます。<xref:System.Windows.Forms.ComboBox.ObjectCollection.Add%2A> メソッドでは、1 つのオブジェクトをコレクションに追加します。 コレクションにオブジェクトの数を追加するには項目の配列を作成して割り当てるに最適な <xref:System.Windows.Forms.ComboBox.ObjectCollection.AddRange%2A> メソッドです。 使用できるオブジェクトをコレクション内の特定の位置に挿入するには <xref:System.Windows.Forms.ComboBox.ObjectCollection.Insert%2A> メソッドです。 コレクション内の既知のインデックス位置の項目を削除する、いずれかを使用できる、 <xref:System.Windows.Forms.ComboBox.ObjectCollection.Remove%2A> メソッドまたは <xref:System.Windows.Forms.ComboBox.ObjectCollection.RemoveAt%2A> メソッドです。<xref:System.Windows.Forms.ComboBox.ObjectCollection.Clear%2A> メソッドは、すべての項目をコレクションから削除します。  
  
 メソッドとプロパティを追加すると、項目を削除するだけでなく、 <xref:System.Windows.Forms.ComboBox.ObjectCollection?displayProperty=fullName> コレクション内の項目を検索するメソッドも提供します。<xref:System.Windows.Forms.ComboBox.ObjectCollection.Contains%2A> メソッドを使用するオブジェクトがコレクションのメンバーかどうかを決定します。 使用することができます、項目がコレクション内にあることがわかったら、 <xref:System.Windows.Forms.ComboBox.ObjectCollection.IndexOf%2A> 項目がコレクション内に配置を決定する方法です。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectCollection (System.Windows.Forms.ComboBox owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.ComboBox owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ComboBox.ObjectCollection.#ctor(System.Windows.Forms.ComboBox)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.Windows.Forms.ComboBox" />
      </Parameters>
      <Docs>
        <param name="owner">
          <see cref="T:System.Windows.Forms.ComboBox" /> このオブジェクトのコレクションを所有しています。</param>
        <summary>
          <see cref="T:System.Windows.Forms.ComboBox.ObjectCollection" /> の新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 関連付けることがなく、このクラスのインスタンスを作成できません、 <xref:System.Windows.Forms.ComboBox> コントロールです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public int Add (object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Add(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ComboBox.ObjectCollection.Add(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">コレクションに追加する項目を表すオブジェクト。</param>
        <summary>アイテムの一覧に項目を追加、 <see cref="T:System.Windows.Forms.ComboBox" />です。</summary>
        <returns>コレクション内の項目の 0 から始まるインデックス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、コンボ ボックスに項目を追加します。 場合、 <xref:System.Windows.Forms.ComboBox.Sorted%2A> のプロパティ、 <xref:System.Windows.Forms.ComboBox> に設定されている `true`, 、アルファベット順に項目がリストに挿入します。 それ以外の場合、項目はリストの末尾に挿入されます。  
  
 項目の視覚的表現は、コンボ ボックスに表示されます。 このコンテンツの表現がで指定された、 <xref:System.Windows.Forms.ListControl.DisplayMember%2A> プロパティです。 場合、 <xref:System.Windows.Forms.ListControl.DisplayMember%2A> プロパティは、 `null`, 、アイテムの `ToString` がコンボ ボックスに表示されている場合は、文字列で指定した格納されているオブジェクトのプロパティを取得するメソッドが呼び出された、 <xref:System.Windows.Forms.ListControl.DisplayMember%2A> プロパティが表示されます。 A <xref:System.SystemException> を新しい項目を保存できる十分な領域がない場合に発生します。 使用することをお勧めコンボ ボックスに、一連の項目を追加する、 <xref:System.Windows.Forms.ComboBox.ObjectCollection.AddRange%2A> メソッドです。 使用する場合、 <xref:System.Windows.Forms.ComboBox.ObjectCollection.Add%2A> をコンボ ボックスに、多くの項目を追加する方法、 <xref:System.Windows.Forms.ComboBox.BeginUpdate%2A> 、追加中に再描画を中断するためメソッドおよび <xref:System.Windows.Forms.ComboBox.EndUpdate%2A> を再描画を再開するメソッドです。 使用することができます、 <xref:System.Windows.Forms.ComboBox.ObjectCollection.Insert%2A> 項目が追加されたリストの場所を指定します。 オブジェクトがコレクションに追加されたときに、 <xref:System.Windows.Forms.ComboBox> 、オブジェクトを呼び出して <xref:System.Object.ToString%2A> 一覧に表示する文字列を取得します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="item" /> パラメーターが <see langword="null" />です。</exception>
        <altmember cref="T:System.Collections.IList" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (object[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(object[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ComboBox.ObjectCollection.AddRange(System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="items">一覧に追加するオブジェクトの配列。</param>
        <summary>項目の配列の項目の一覧に追加、 <see cref="T:System.Windows.Forms.ComboBox" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Windows.Forms.ComboBox.Sorted%2A> のプロパティ、 <xref:System.Windows.Forms.ComboBox> に設定されている場合は true、項目が挿入される一覧にアルファベット順にします。 それ以外の場合、配列内に出現する順序で、項目が挿入されます。 このメソッドは通常の配列に渡されます <xref:System.String> オブジェクトではなく、種類のオブジェクトの配列は、このメソッドに渡すことができます。 オブジェクトがコレクションに追加されると、メソッドのオブジェクトの <xref:System.Object.ToString%2A> 一覧に表示する文字列を取得します。 このメソッドを使用して、コレクションに項目を追加するを呼び出す必要はありません、 <xref:System.Windows.Forms.ComboBox.BeginUpdate%2A> と <xref:System.Windows.Forms.ComboBox.EndUpdate%2A> パフォーマンスを最適化する方法です。  
  
   
  
## 例  
 次のコード例では、初期化、 <xref:System.Windows.Forms.ComboBox> text プロパティの設定を使用してコントロール、 <xref:System.Windows.Forms.ComboBox.ObjectCollection.AddRange%2A> に挿入する方法、 <xref:System.Windows.Forms.ComboBox>です。 処理も紹介しています、 <xref:System.Windows.Forms.ComboBox.DropDown> イベントです。 例を実行するには、フォームと呼び出しで次のコードを貼り付け、 `InitializeComboBox` フォームのコンス トラクターからのメソッドまたは `Load` メソッドです。  
  
 [!code-cpp[System.Windows.Forms.ComboBoxDropDown\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ComboBoxDropDown/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ComboBoxDropDown\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ComboBoxDropDown/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ComboBoxDropDown\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ComboBoxDropDown/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">内の項目、 <paramref name="items" /> パラメーターが <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ComboBox.ObjectCollection.Clear" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ComboBox" /> からすべての項目を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 When you remove items from the list, all information about the deleted items is lost. To remove a single item from the <xref:System.Windows.Forms.ComboBox>, use the <xref:System.Windows.Forms.ComboBox.ObjectCollection.Remove%2A> or <xref:System.Windows.Forms.ComboBox.ObjectCollection.RemoveAt%2A> method.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IList" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ComboBox.ObjectCollection.Contains(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">コレクション内で検索する項目を表すオブジェクト。</param>
        <summary>指定した項目がコレクション内にあるかどうかを判断します。</summary>
        <returns>
          <see langword="true" /> 項目がコレクション内にある場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ComboBox.ObjectCollection.Contains%2A> メソッドを使用するオブジェクトがコレクションのメンバーかどうかを決定します。 使用することができます、項目がコレクション内にあることがわかったら、 <xref:System.Windows.Forms.ComboBox.ObjectCollection.IndexOf%2A> 項目がコレクション内に配置を決定する方法です。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IList" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (object[] destination, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(object[] destination, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ComboBox.ObjectCollection.CopyTo(System.Object[],System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Object[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="destination">コレクションのコピーをオブジェクト配列。</param>
        <param name="arrayIndex">コレクションのコピー先となる配列内の位置。</param>
        <summary>既存の配列内の指定位置にあるオブジェクトの配列にコレクション全体をコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、1 つの配列に複数のコレクションから項目を組み合わせて使用できます。 別のコンテンツの設定に、この配列を使用することができますし、 [CopyTo メソッド \(Object\<xref:System.Windows.Forms.ComboBox> 制御を使用して、 [CopyTo メソッド \(Object\<xref:System.Windows.Forms.ComboBox.ObjectCollection.AddRange%2A> のメソッド、 [CopyTo メソッド \(Object\<xref:System.Windows.Forms.ComboBox.ObjectCollection> クラスです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ComboBox.ObjectCollection.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コレクション内の項目の数を取得します。</summary>
        <value>コレクション内の項目数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This property enables you to determine the number of items in the <xref:System.Windows.Forms.ComboBox>. You can use this value when looping through the values of the collection.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ComboBox.ObjectCollection.GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>項目のコレクションを反復処理するために使用できる列挙子を返します。</summary>
        <returns>
          <see cref="T:System.Collections.IEnumerator" /> を表す項目のコレクション。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ComboBox.ObjectCollection.IndexOf(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">コレクション内で検索する項目を表すオブジェクト。</param>
        <summary>指定した項目のコレクション内のインデックスを取得します。</summary>
        <returns>項目がコレクション内にある、0 から始まるインデックスそれ以外の場合、\-1 を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ComboBox.ObjectCollection.IndexOf%2A> メソッドでは、項目がコレクション内にあるかを判断することができます。 アイテムがこのメソッドを呼び出す前に、コレクション内にあるかを確認するを使用して、 <xref:System.Windows.Forms.ComboBox.ObjectCollection.Contains%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> パラメーターが <see langword="null" />です。</exception>
        <altmember cref="T:System.Collections.IList" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ComboBox.ObjectCollection.Insert(System.Int32,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">項目を挿入する位置 0 から始まるインデックス位置。</param>
        <param name="item">挿入する項目を表すオブジェクト。</param>
        <summary>コレクション内の指定したインデックスの位置に項目を挿入します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Windows.Forms.ComboBox.Sorted%2A> のプロパティ、 <xref:System.Windows.Forms.ComboBox> が true の場合、 `index` パラメーターは無視されます。 オブジェクトがコレクションに追加されたときに、 <xref:System.Windows.Forms.ComboBox> 、オブジェクトを呼び出して <xref:System.Object.ToString%2A> メソッドでは、一覧に表示する文字列を取得します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="item" /> が <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  
  
 または  
  
 <paramref name="index" /> コレクション内の項目の数を超えています。</exception>
        <altmember cref="T:System.Collections.IList" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ComboBox.ObjectCollection.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このコレクションを変更できるかどうかを示す値を取得します。</summary>
        <value>常に <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Collections.IList" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual object this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ComboBox.ObjectCollection.Item(System.Int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">コレクション内の取得する項目のインデックス。</param>
        <summary>コレクション内の指定したインデックス位置にある項目を取得します。</summary>
        <value>コレクション内の指定したインデックス位置にある項目を表すオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用すると、コレクション内の指定位置にある項目を取得します。 使用する <xref:System.Windows.Forms.ComboBox.ObjectCollection.IndexOf%2A> からの戻り値のインデックスを使用するか、項目の場所を検索する、 <xref:System.Windows.Forms.ComboBox.ObjectCollection.Add%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">インデックスが 0 未満です。  
  
 または  
  
 <paramref name="index" /> 大きかったのコレクション内の項目の数に一致します。</exception>
        <altmember cref="T:System.Collections.IList" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ComboBox.ObjectCollection.Remove(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Object" /> 、一覧から削除します。</param>
        <summary>指定した項目を削除、 <see cref="T:System.Windows.Forms.ComboBox" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定した項目が見つからない場合、例外はスローされません。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IList" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ComboBox.ObjectCollection.RemoveAt(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">削除する項目のインデックス。</param>
        <summary>項目を削除、 <see cref="T:System.Windows.Forms.ComboBox" /> 指定したインデックス位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例では、初期化、 <xref:System.Windows.Forms.ComboBox> コントロールを設定して、 <xref:System.Windows.Forms.ComboBox.MaxDropDownItems%2A> と <xref:System.Windows.Forms.ComboBox.DropDownStyle%2A> を使用して、プロパティ、 <xref:System.Windows.Forms.ComboBox.FindStringExact%2A> を検索する方法、 <xref:System.Windows.Forms.ComboBox> と <xref:System.Windows.Forms.ComboBox.ObjectCollection.RemoveAt%2A> から項目を削除する方法、 <xref:System.Windows.Forms.ComboBox>です。 処理も示しています、 <xref:System.Windows.Forms.ComboBox.SelectedIndexChanged> イベントです。  
  
 [!code-cpp[System.Windows.Forms.ComboBoxFindString\#0](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ComboBoxFindString/CPP/form1.cpp#0)]
 [!code-csharp[System.Windows.Forms.ComboBoxFindString\#0](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ComboBoxFindString/CS/form1.cs#0)]
 [!code-vb[System.Windows.Forms.ComboBoxFindString\#0](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ComboBoxFindString/VB/form1.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> パラメーターが 0 未満です。  
  
 または  
  
 <paramref name="value" /> パラメーターがコレクション内の項目の数以上です。</exception>
        <altmember cref="T:System.Collections.IList" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array destination, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array destination, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ComboBox.ObjectCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="destination">コレクションから要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
        <param name="index">配列内のコピーを開始する位置を示す、0 から始まるインデックスです。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />」を参照してください。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Windows.Forms.ComboBox.ObjectCollection> のインスタンスが <xref:System.Collections.ICollection> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ComboBox.ObjectCollection.System#Collections#ICollection#IsSynchronized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="P:System.Collections.ICollection.IsSynchronized" />」を参照してください。</summary>
        <value>常に <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Windows.Forms.ComboBox.ObjectCollection> のインスタンスが <xref:System.Collections.ICollection> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ComboBox.ObjectCollection.System#Collections#ICollection#SyncRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="P:System.Collections.ICollection.SyncRoot" />」を参照してください。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ComboBox.ObjectCollection" /> へのアクセスを同期するために使用できるオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Windows.Forms.ComboBox.ObjectCollection> のインスタンスが <xref:System.Collections.ICollection> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ComboBox.ObjectCollection.System#Collections#IList#Add(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">コレクションに追加する項目を表すオブジェクト。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.Collections.IList.Add(System.Object)" />」を参照してください。</summary>
        <returns>コレクション内の項目の 0 から始まるインデックス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Windows.Forms.ComboBox.ObjectCollection> のインスタンスが <xref:System.Collections.IList> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 このメソッドは、コンボ ボックスに項目を追加します。 場合、 <xref:System.Windows.Forms.ComboBox.Sorted%2A> のプロパティ、 <xref:System.Windows.Forms.ComboBox> に設定されている `true`, 、アルファベット順に項目がリストに挿入します。 それ以外の場合、項目はリストの末尾に挿入されます。  
  
 項目の視覚的表現は、コンボ ボックスに表示されます。 このコンテンツの表現がで指定された、 <xref:System.Windows.Forms.ListControl.DisplayMember%2A> プロパティです。 場合、 <xref:System.Windows.Forms.ListControl.DisplayMember%2A> プロパティは、 `null`, 、アイテムの <xref:System.Object.ToString%2A> がコンボ ボックスに表示されている場合は、文字列で指定した格納されているオブジェクトのプロパティを取得するメソッドが呼び出された、 <xref:System.Windows.Forms.ListControl.DisplayMember%2A> プロパティが表示されます。 コンボ ボックスに、一連の項目を追加するにを使用して、 <xref:System.Windows.Forms.ComboBox.ObjectCollection.AddRange%2A> メソッドです。 使用する場合、 <xref:System.Windows.Forms.ComboBox.ObjectCollection.Add%2A> をコンボ ボックスに、一連の項目を追加する方法、 <xref:System.Windows.Forms.ComboBox.BeginUpdate%2A> 、追加中に再描画を中断するためメソッドおよび <xref:System.Windows.Forms.ComboBox.EndUpdate%2A> を再描画を再開するメソッドです。 使用することができます、 <xref:System.Windows.Forms.ComboBox.ObjectCollection.Insert%2A> 項目が追加されたリストの場所を指定します。 オブジェクトがコレクションに追加されたときに、 <xref:System.Windows.Forms.ComboBox> 、オブジェクトを呼び出して <xref:System.Object.ToString%2A> 一覧に表示する文字列を取得します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="item" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.SystemException">十分な領域が、新しい項目を格納するためです。</exception>
        <altmember cref="T:System.Collections.IList" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ComboBox.ObjectCollection.System#Collections#IList#IsFixedSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="P:System.Collections.IList.IsFixedSize" />」を参照してください。</summary>
        <value>常に <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Windows.Forms.ComboBox.ObjectCollection> のインスタンスが <xref:System.Collections.IList> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IList" />
      </Docs>
    </Member>
  </Members>
</Type>