<Type Name="SendKeys" FullName="System.Windows.Forms.SendKeys">
  <TypeSignature Language="C#" Value="public class SendKeys" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi SendKeys extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.SendKeys" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>キーストロークをアプリケーションに送信するメソッドを指定します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用 <xref:System.Windows.Forms.SendKeys> キーストロークを送信し、そのアクティブなアプリケーションの組み合わせ。 このクラスをインスタンス化することはできません。 クラスにキーストロークを送信し、すぐに、プログラムのフローを続行するには使用 <xref:System.Windows.Forms.SendKeys.Send%2A>します。 使用して、キーストロークによって開始されたすべてのプロセスを待つ <xref:System.Windows.Forms.SendKeys.SendWait%2A>します。  
  
 各キーは、1 つまたは複数の文字で表されます。 1 つのキーボード文字を指定するには、文字そのものを使用します。 たとえば、文字 A を表現するには、文字列"A"メソッドに渡す、します。 1 つ以上の文字を表現するには、それより前に各追加の文字を追加します。 文字 A、B、C を表現するには、"ABC"として、パラメーターを指定します。  
  
 プラス記号 \(\+\)、キャレット \(^\)、パーセント記号 \(%\)、ティルダ \(~\)、およびかっこ \(\) がある特別な意味を <xref:System.Windows.Forms.SendKeys>します。 これらの文字のいずれかを指定するには、中かっこ \({}\) で囲みます。 たとえば、プラス記号を指定するには、「{\+}」を使用します。 中かっこ文字、「{{}」を使用して、「{}}」を指定します。 角かっこ \(\) には、特別な意味を持つない <xref:System.Windows.Forms.SendKeys>, 、中かっこで囲む必要がありますが、します。 他のアプリケーションでは、角かっこが可能性のある重要なダイナミック データ エクス \(チェンジ DDE\) が発生したときに特別な意味を持つ操作を行います。  
  
> [!CAUTION]
>  アプリケーションが国際対応し、さまざまなキーボードの使用を想定している場合は、<xref:System.Windows.Forms.SendKeys.Send%2A> の使用により予期しない結果になる可能性があるため、回避する必要があります。  
  
 ENTER または\] タブ、および文字ではなく、動作を表すキーなどのキーを押すと表示されていない文字を指定するには、次の表に、コードを使用します。  
  
|キー|コード|  
|--------|---------|  
|BACKSPACE キー|{BACKSPACE} {BS} または {BKSP}|  
|中断|{中断}|  
|CAPSLOCK|{CAPSLOCK}|  
|DEL、または削除|{削除} または {DEL}|  
|↓|{ダウン}|  
|End|{終了}|  
|Enter|{入力} または ~|  
|Esc|{ESC}|  
|ヘルプ|{ヘルプ}|  
|ホーム|{ホーム}|  
|アドインまたは挿入|{INSERT} {ins}|  
|←|{左}|  
|NUM LOCK|{NUMLOCK}|  
|PageDown|{した}|  
|PageUp|{PGUP キー}|  
|画面を印刷します。|{PRTSC}\(将来使用するために予約済み\)|  
|→|{右}|  
|スクロール ロック|{SCROLLLOCK}|  
|Tab|{タブ}|  
|↑|{アップ}|  
|F1|{F1}|  
|F2|{F2 キー}|  
|F3|{F3 キー}|  
|F4|{F4 キー}|  
|F5|{F5 キー}|  
|F6|{F6 キーを押します。|  
|F7|{F7 キー}|  
|F8|{F8 キー}|  
|F9|{F9 キーを押します。|  
|F10|{F10}|  
|F11|{F11 キーを押します。|  
|F12|{F12}|  
|F13|{F13}|  
|F14|{F14}|  
|F15|{F15}|  
|F16|{F16}|  
|キーパッドを追加します。|{追加}|  
|キーパッドを減算します。|{減算}|  
|キーパッド乗算します。|{乗算}|  
|キーパッド除算|{除算}|  
  
 キーと shift キーを押し、ctrl キーを押し、および ALT キーを組み合わせて結合を指定するには、次のコードの 1 つ以上に重要なコードの前にします。  
  
|キー|コード|  
|--------|---------|  
|SHIFT キー|\+|  
|CTRL キーを|^|  
|ALT キー|%|  
  
 他のいくつかのキーが押されたときに shift キーを押し、ctrl キーを押し、および ALT の任意の組み合わせ保持するようにことを指定するには、かっこでそれらのキー コードを記述します。 たとえばを指定すると、E と C が押されている間は、shift キーを押し、次のように使用します。"\+ \(EC\)"です。 E が押されて、shift キーを押し、せず C 続けている間、shift キーを保持するために指定するには使用「\+ EC」です。  
  
 繰り返しのキーを指定するには、フォーム {キー番号} を使用します。 キーと値の間にスペースを配置する必要があります。 たとえば、{左 42} は、42 回左方向キーを押します{h 10} は、キーを押して H 10 倍を意味します。  
  
> [!NOTE]
>  別のアプリケーションをアクティブ化するマネージ メソッドがないので、現在のアプリケーション内では、このクラスを使用してか、ネイティブ Windows メソッドを使用して `FindWindow` と `SetForegroundWindow`, 、他のアプリケーションにフォーカスを設定します。  
  
> [!NOTE]
>  .NET Framework 3.0 の <xref:System.Windows.Forms.SendKeys> クラスが更新され、Windows Vista で実行されるアプリケーションで使用できるようになりました。 Windows Vista の強化されたセキュリティ、\(ユーザー アカウント制御または UAC と呼ばれます\) により、前の実装は想定どおり機能できません。  
>   
>  <xref:System.Windows.Forms.SendKeys> クラスはタイミングの問題が発生する可能性があり、一部の開発者は回避策を取る必要がありました。 更新された実装は、引き続きタイミングの問題が発生する可能性がありますが、速度が少し向上し、回避策の変更が必要となる可能性があります。<xref:System.Windows.Forms.SendKeys> クラスは、最初に前の実装を使用しようとし、失敗した場合に、新しい実装を使用します。 その結果、<xref:System.Windows.Forms.SendKeys> クラスが別のオペレーティング システムと異なる動作を取る可能性があります。 さらに、<xref:System.Windows.Forms.SendKeys> クラスは、新しい実装を使用した場合、<xref:System.Windows.Forms.SendKeys.SendWait%2A> メソッドが別のプロセスに送信されたときにメッセージの処理を待機しません。  
>   
>  アプリケーションが、オペレーティング システムに関係なく一貫した動作に依存する場合、app.config ファイルに次のアプリケーション設定を追加することで、<xref:System.Windows.Forms.SendKeys> クラスが新しい実装を使用するよう強制することができます。  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  <xref:System.Windows.Forms.SendKeys> クラスが前の実装を使用するよう強制するには、代わりに値 `"JournalHook"` を使用します。  
  
   
  
## 例  
 次のコード例は、<xref:System.Windows.Forms.SendKeys.Send%2A> メソッドの使用方法を示します。 この例を実行するには、次のコードを貼り付けます Form1 という名前のフォームに Button1 というボタンを配置します。 この例ではイベント処理メソッドに関連付けられているクリック イベントを確認します。 ボタン コントロールの <xref:System.Windows.Forms.Control.TabIndex%2A> プロパティを 0 に設定する必要があります。 例を実行する場合は、ボタンのクリックをトリガーするフォームをダブルクリックしてイベントです。  
  
 [!code-cpp[System.Windows.Forms.SendKeys\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.SendKeys\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.SendKeys\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public static void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.Flush" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>メッセージ キューに現在ある Windows メッセージをすべて処理します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用 <xref:System.Windows.Forms.SendKeys.Flush%2A> にキーストロークやメッセージ キューにあるその他のオペレーティング システムのメッセージを処理するアプリケーションを待機します。 これは、呼び出すことと同じ <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=fullName> がない多くのキーを処理するまでです。  
  
> [!NOTE]
>  別のアプリケーションをアクティブ化するマネージ メソッドがないので、現在のアプリケーション内では、このクラスを使用してか、ネイティブ Windows メソッドを使用して `FindWindow` と `SetForegroundWindow`, 、他のアプリケーションにフォーカスを設定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public static void Send (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Send(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.Send(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">送信するキーストロークの文字列。</param>
        <summary>キーストロークをアクティブなアプリケーションに送信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 各キーは、1 つまたは複数の文字で表されます。 1 つのキーボード文字を指定するには、文字そのものを使用します。 たとえば、文字 A を表現するには、文字列"A"メソッドに渡す、します。 1 つ以上の文字を表現するには、それより前に各追加の文字を追加します。 文字 A、B、C を表現するには、"ABC"として、パラメーターを指定します。  
  
 プラス記号 \(\+\)、キャレット \(^\)、パーセント記号 \(%\)、ティルダ \(~\)、およびかっこ \(\) がある特別な意味を <xref:System.Windows.Forms.SendKeys>します。 これらの文字のいずれかを指定するには、中かっこ \({}\) で囲みます。 たとえば、プラス記号を指定するには、「{\+}」を使用します。 中かっこ文字、「{{}」を使用して、「{}}」を指定します。 角かっこ \(\) には、特別な意味を持つない <xref:System.Windows.Forms.SendKeys>, 、中かっこで囲む必要がありますが、します。 他のアプリケーションでは、角かっこが可能性のある重要なダイナミック データ エクス \(チェンジ DDE\) が発生したときに特別な意味を持つ操作を行います。  
  
> [!CAUTION]
>  アプリケーションが国際対応し、さまざまなキーボードの使用を想定している場合は、<xref:System.Windows.Forms.SendKeys.Send%2A> の使用により予期しない結果になる可能性があるため、回避する必要があります。  
  
 ENTER または\] タブ、および文字ではなく、動作を表すキーなどのキーを押すと表示されていない文字を指定するには、次の表に、コードを使用します。  
  
|キー|コード|  
|--------|---------|  
|BACKSPACE キー|{BACKSPACE} {BS} または {BKSP}|  
|中断|{中断}|  
|CAPSLOCK|{CAPSLOCK}|  
|DEL、または削除|{削除} または {DEL}|  
|↓|{ダウン}|  
|End|{終了}|  
|Enter|{入力} または ~|  
|Esc|{ESC}|  
|ヘルプ|{ヘルプ}|  
|ホーム|{ホーム}|  
|アドインまたは挿入|{INSERT} {ins}|  
|←|{左}|  
|NUM LOCK|{NUMLOCK}|  
|PageDown|{した}|  
|PageUp|{PGUP キー}|  
|画面を印刷します。|{PRTSC}\(将来使用するために予約済み\)|  
|→|{右}|  
|スクロール ロック|{SCROLLLOCK}|  
|Tab|{タブ}|  
|↑|{アップ}|  
|F1|{F1}|  
|F2|{F2 キー}|  
|F3|{F3 キー}|  
|F4|{F4 キー}|  
|F5|{F5 キー}|  
|F6|{F6 キーを押します。|  
|F7|{F7 キー}|  
|F8|{F8 キー}|  
|F9|{F9 キーを押します。|  
|F10|{F10}|  
|F11|{F11 キーを押します。|  
|F12|{F12}|  
|F13|{F13}|  
|F14|{F14}|  
|F15|{F15}|  
|F16|{F16}|  
|キーパッドを追加します。|{追加}|  
|キーパッドを減算します。|{減算}|  
|キーパッド乗算します。|{乗算}|  
|キーパッド除算|{除算}|  
  
 キーと shift キーを押し、ctrl キーを押し、および ALT キーを組み合わせて結合を指定するには、次のコードの 1 つ以上に重要なコードの前にします。  
  
|キー|コード|  
|--------|---------|  
|SHIFT キー|\+|  
|CTRL キーを|^|  
|ALT キー|%|  
  
 他のいくつかのキーが押されたときに shift キーを押し、ctrl キーを押し、および ALT の任意の組み合わせ保持するようにことを指定するには、かっこでそれらのキー コードを記述します。 たとえばを指定すると、E と C が押されている間は、shift キーを押し、次のように使用します。"\+ \(EC\)"です。 E が押されて、shift キーを押し、せず C 続けている間、shift キーを保持するために指定するには使用「\+ EC」です。  
  
 繰り返しのキーを指定するには、フォーム {キー番号} を使用します。 キーと値の間にスペースを配置する必要があります。 たとえば、{左 42} は、42 回左方向キーを押します{h 10} は、キーを押して H 10 倍を意味します。  
  
> [!NOTE]
>  別のアプリケーションをアクティブ化するマネージ メソッドがないので、現在のアプリケーション内では、このクラスを使用してか、ネイティブ Windows メソッドを使用して `FindWindow` と `SetForegroundWindow`, 、他のアプリケーションにフォーカスを設定します。  
  
> [!NOTE]
>  .NET Framework 3.0 の <xref:System.Windows.Forms.SendKeys> クラスが更新され、Windows Vista で実行されるアプリケーションで使用できるようになりました。 Windows Vista の強化されたセキュリティ、\(ユーザー アカウント制御または UAC と呼ばれます\) により、前の実装は想定どおり機能できません。  
>   
>  <xref:System.Windows.Forms.SendKeys> クラスはタイミングの問題が発生する可能性があり、一部の開発者は回避策を取る必要がありました。 更新された実装は、引き続きタイミングの問題が発生する可能性がありますが、速度が少し向上し、回避策の変更が必要となる可能性があります。<xref:System.Windows.Forms.SendKeys> クラスは、最初に前の実装を使用しようとし、失敗した場合に、新しい実装を使用します。 その結果、<xref:System.Windows.Forms.SendKeys> クラスが別のオペレーティング システムと異なる動作を取る可能性があります。 さらに、<xref:System.Windows.Forms.SendKeys> クラスは、新しい実装を使用した場合、<xref:System.Windows.Forms.SendKeys.SendWait%2A> メソッドが別のプロセスに送信されたときにメッセージの処理を待機しません。  
>   
>  アプリケーションが、オペレーティング システムに関係なく一貫した動作に依存する場合、app.config ファイルに次のアプリケーション設定を追加することで、<xref:System.Windows.Forms.SendKeys> クラスが新しい実装を使用するよう強制することができます。  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  <xref:System.Windows.Forms.SendKeys> クラスが前の実装を使用するよう強制するには、代わりに値 `"JournalHook"` を使用します。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.SendKeys.Send%2A> メソッドです。この例を実行するには、次のコードを貼り付けます Form1 という名前のフォームに Button1 というボタンを配置します。 この例ではイベント処理メソッドに関連付けられているクリック イベントを確認します。 ボタン コントロールの <xref:System.Windows.Forms.Control.TabIndex%2A> プロパティを 0 に設定する必要があります。 例を実行する場合は、ボタンのクリックをトリガーするフォームをダブルクリックしてイベントです。  
  
 [!code-cpp[System.Windows.Forms.SendKeys\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.SendKeys\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.SendKeys\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">アクティブなアプリケーションにキーストロークを送信することはありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="keys" /> 有効なキー入力ではありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for unmanaged code to call this method. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendWait">
      <MemberSignature Language="C#" Value="public static void SendWait (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SendWait(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.SendWait(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">送信するキーストロークの文字列。</param>
        <summary>特定のキーをアクティブなアプリケーションに送信し、メッセージが処理されるまで待機します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用 <xref:System.Windows.Forms.SendKeys.SendWait%2A> をアクティブなアプリケーションにキーストロークやキーストロークの組み合わせを送信し、キー入力メッセージを処理するを待機します。 このメソッドを使用して、アプリケーションにキーストロークを送信して、完了するためのキーで開始されるすべてのプロセスを待機することができます。 これは、アプリケーションを続行する前に、別のアプリケーションが終了した場合に重要です。  
  
> [!NOTE]
>  別のアプリケーションをアクティブ化するマネージ メソッドがないので、現在のアプリケーション内では、このクラスを使用してか、ネイティブ Windows メソッドを使用して `FindWindow` と `SetForegroundWindow`, 、他のアプリケーションにフォーカスを設定します。  
  
> [!NOTE]
>  .NET Framework 3.0 の <xref:System.Windows.Forms.SendKeys> クラスが更新され、Windows Vista で実行されるアプリケーションで使用できるようになりました。 Windows Vista の強化されたセキュリティ、\(ユーザー アカウント制御または UAC と呼ばれます\) により、前の実装は想定どおり機能できません。  
>   
>  <xref:System.Windows.Forms.SendKeys> クラスはタイミングの問題が発生する可能性があり、一部の開発者は回避策を取る必要がありました。 更新された実装は、引き続きタイミングの問題が発生する可能性がありますが、速度が少し向上し、回避策の変更が必要となる可能性があります。<xref:System.Windows.Forms.SendKeys> クラスは、最初に前の実装を使用しようとし、失敗した場合に、新しい実装を使用します。 その結果、<xref:System.Windows.Forms.SendKeys> クラスが別のオペレーティング システムと異なる動作を取る可能性があります。 さらに、<xref:System.Windows.Forms.SendKeys> クラスは、新しい実装を使用した場合、<xref:System.Windows.Forms.SendKeys.SendWait%2A> メソッドが別のプロセスに送信されたときにメッセージの処理を待機しません。  
>   
>  アプリケーションが、オペレーティング システムに関係なく一貫した動作に依存する場合、app.config ファイルに次のアプリケーション設定を追加することで、<xref:System.Windows.Forms.SendKeys> クラスが新しい実装を使用するよう強制することができます。  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  <xref:System.Windows.Forms.SendKeys> クラスが前の実装を使用するよう強制するには、代わりに値 `"JournalHook"` を使用します。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for unmanaged code to call this method. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>