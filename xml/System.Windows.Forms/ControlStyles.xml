<Type Name="ControlStyles" FullName="System.Windows.Forms.ControlStyles">
  <TypeSignature Language="C#" Value="public enum ControlStyles" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ControlStyles extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ControlStyles" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Flags</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>コントロールのスタイルと動作を指定します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 Controls use this enumeration in various properties and methods to specify functionality. A control can enable a style by calling the <xref:System.Windows.Forms.Control.SetStyle%2A> method and passing in the appropriate <xref:System.Windows.Forms.ControlStyles> bit \(or bits\) and the Boolean value to set the bit\(s\) to. For example, the following line of Visual Basic code would enable double\-buffering.  
  
```  
myControl.SetStyle(UserPaint Or AllPaintingInWmPaint Or DoubleBuffer, True)  
```  
  
 If the <xref:System.Windows.Forms.ControlStyles.AllPaintingInWmPaint> bit is set to **languageKeyword tag is not supported!!!!**  
, the window message WM\_ERASEBKGND is ignored, and both <xref:System.Windows.Forms.Control.OnPaintBackground%2A> and <xref:System.Windows.Forms.Control.OnPaint%2A> methods are called directly from the window message WM\_PAINT. This generally reduces flicker unless other controls send the window message WM\_ERASEBKGND to the control. You might send the window message WM\_ERASEBKGRND to achieve a pseudo\-transparent effect similar to <xref:System.Windows.Forms.ControlStyles.SupportsTransparentBackColor>; for example, a <xref:System.Windows.Forms.ToolBar> with flat appearance does this.  
  
 To fully enable double\-buffering, you can set the <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> and <xref:System.Windows.Forms.ControlStyles.AllPaintingInWmPaint> bits to **languageKeyword tag is not supported!!!!**  
. However the preferred method for enabling double buffering, which yields the same result, is to set the <xref:System.Windows.Forms.Control.DoubleBuffered%2A> property for the control to **languageKeyword tag is not supported!!!!**  
.  
  
 If the <xref:System.Windows.Forms.ControlStyles.SupportsTransparentBackColor> bit is set to **languageKeyword tag is not supported!!!!**  
, and the <xref:System.Windows.Forms.Control.BackColor%2A> is set to a color whose alpha component is less than 255, <xref:System.Windows.Forms.Control.OnPaintBackground%2A> will simulate transparency by asking its parent control to paint the background. This is not true transparency.  
  
> [!NOTE]
>  If there is another control between the control and its parent, the current control will not show the control in the middle.  
  
 When the <xref:System.Windows.Forms.ControlStyles.UserMouse> bit is set to **languageKeyword tag is not supported!!!!**  
, the following methods are still called: <xref:System.Windows.Forms.Control.OnMouseDown%2A?displayProperty=fullName>, <xref:System.Windows.Forms.Control.OnMouseUp%2A?displayProperty=fullName>, <xref:System.Windows.Forms.Control.OnMouseEnter%2A?displayProperty=fullName>, <xref:System.Windows.Forms.Control.OnMouseMove%2A?displayProperty=fullName>, <xref:System.Windows.Forms.Control.OnMouseHover%2A?displayProperty=fullName>, <xref:System.Windows.Forms.Control.OnMouseLeave%2A?displayProperty=fullName>, and <xref:System.Windows.Forms.Control.OnMouseWheel%2A?displayProperty=fullName>.  
  
 When the control is clicked, if the <xref:System.Windows.Forms.ControlStyles.StandardClick> bit is set to **languageKeyword tag is not supported!!!!**  
 the <xref:System.Windows.Forms.Control.OnClick%2A?displayProperty=fullName> method is called and it raises the <xref:System.Windows.Forms.Control.Click?displayProperty=fullName> event. When the control is double\-clicked, and both the <xref:System.Windows.Forms.ControlStyles.StandardClick> and <xref:System.Windows.Forms.ControlStyles.StandardDoubleClick> bits are set to **languageKeyword tag is not supported!!!!**  
, the click is passed on to the <xref:System.Windows.Forms.Control.DoubleClick> event. Then the <xref:System.Windows.Forms.Control.OnDoubleClick%2A?displayProperty=fullName> method is called and it raises the <xref:System.Windows.Forms.Control.DoubleClick?displayProperty=fullName> event. However, the control can call <xref:System.Windows.Forms.Control.OnClick%2A> or <xref:System.Windows.Forms.Control.OnDoubleClick%2A> directly regardless of the <xref:System.Windows.Forms.ControlStyles.StandardClick> and <xref:System.Windows.Forms.ControlStyles.StandardDoubleClick> bit values. For more information on control click and double click behaviors, see the <xref:System.Windows.Forms.Control.Click?displayProperty=fullName> and <xref:System.Windows.Forms.Control.DoubleClick?displayProperty=fullName> topics.  
  
 When the <xref:System.Windows.Forms.ControlStyles.UseTextForAccessibility> bit is set and there is a value in the control's `Text` property, the value of that control's `Text` property determines the control's default Active Accessibility name and shortcut key. Otherwise, the text of the preceding <xref:System.Windows.Forms.Label> control will be used instead. This style is set by default. Certain built\-in control types, such as <xref:System.Windows.Forms.TextBox> and <xref:System.Windows.Forms.ComboBox>, reset this style so that the `Text` property of those controls will not be used by Active Accessibility.  
  
   
  
## 例  
 The following example demonstrates a use of <xref:System.Windows.Forms.ControlStyles> with the <xref:System.Windows.Forms.Control.StyleChanged> event.  
  
 [!code-cpp[Control\_StyleChanged\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_StyleChanged/CPP/control_stylechanged.cpp#1)]
 [!code-csharp[Control\_StyleChanged\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_StyleChanged/CS/control_stylechanged.cs#1)]
 [!code-vb[Control\_StyleChanged\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_StyleChanged/VB/control_stylechanged.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Inheriting from a standard Windows Forms control and changing the <see cref="F:System.Windows.Forms.ControlStyles.StandardClick" /> or <see cref="F:System.Windows.Forms.ControlStyles.StandardDoubleClick" /> bit values to <see langword="true" /> can cause unexpected behavior or can have no effect at all if the control does not support the <see cref="E:System.Windows.Forms.Control.Click" /> or <see cref="E:System.Windows.Forms.Control.DoubleClick" /> events.</para>
    </block>
    <altmember cref="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)" />
    <altmember cref="M:System.Windows.Forms.Control.GetStyle(System.Windows.Forms.ControlStyles)" />
  </Docs>
  <Members>
    <Member MemberName="AllPaintingInWmPaint">
      <MemberSignature Language="C#" Value="AllPaintingInWmPaint" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles AllPaintingInWmPaint = int32(8192)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.AllPaintingInWmPaint" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="true" /> の場合、コントロールはウィンドウ メッセージ WM\_ERASEBKGND を無視することによって、ちらつきを抑えます。 このスタイルは、<see cref="F:System.Windows.Forms.ControlStyles.UserPaint" /> ビットが <see langword="true" /> に設定されている場合だけ適用されます。</summary>
      </Docs>
    </Member>
    <Member MemberName="CacheText">
      <MemberSignature Language="C#" Value="CacheText" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles CacheText = int32(16384)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.CacheText" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="true" /> の場合、コントロールは、必要に応じて毎回 <see cref="P:System.Windows.Forms.Control.Handle" /> からテキストのコピーを取得するのではなく、テキストのコピーを保持します。 このスタイルは、既定では <see langword="false" /> に設定されます。 この動作によってパフォーマンスは向上しますが、テキストを同期させておくことが難しくなります。</summary>
      </Docs>
    </Member>
    <Member MemberName="ContainerControl">
      <MemberSignature Language="C#" Value="ContainerControl" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles ContainerControl = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.ContainerControl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="true" /> の場合、コントロールはコンテナーのような機能を果たします。</summary>
      </Docs>
    </Member>
    <Member MemberName="DoubleBuffer">
      <MemberSignature Language="C#" Value="DoubleBuffer" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles DoubleBuffer = int32(65536)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.DoubleBuffer" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="true" /> の場合、描画はバッファーで実行され、完了後に、結果が画面に出力されます。 ダブル バッファリングは、コントロールの再描画によるちらつきを防ぎます。<see cref="F:System.Windows.Forms.ControlStyles.DoubleBuffer" /> を <see langword="true" /> に設定した場合は、<see cref="F:System.Windows.Forms.ControlStyles.UserPaint" /> および <see cref="F:System.Windows.Forms.ControlStyles.AllPaintingInWmPaint" /> も <see langword="true" /> に設定する必要があります。</summary>
      </Docs>
    </Member>
    <Member MemberName="EnableNotifyMessage">
      <MemberSignature Language="C#" Value="EnableNotifyMessage" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles EnableNotifyMessage = int32(32768)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.EnableNotifyMessage" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="true" /> の場合、コントロールの <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" /> に送信されたすべてのメッセージに対して <see cref="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)" /> メソッドが呼び出されます。 このスタイルは、既定では <see langword="false" /> に設定されます。 部分信頼では、<see cref="F:System.Windows.Forms.ControlStyles.EnableNotifyMessage" /> は正常に機能しません。</summary>
      </Docs>
    </Member>
    <Member MemberName="FixedHeight">
      <MemberSignature Language="C#" Value="FixedHeight" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles FixedHeight = int32(64)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.FixedHeight" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="true" /> の場合、自動スケールされるときにコントロールの高さが固定されます。 たとえば、新しい <see cref="T:System.Drawing.Font" /> を挿入できるようにレイアウト操作でコントロールを再スケールしようとしても、コントロールの <see cref="P:System.Windows.Forms.Control.Height" /> は変更されません。</summary>
      </Docs>
    </Member>
    <Member MemberName="FixedWidth">
      <MemberSignature Language="C#" Value="FixedWidth" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles FixedWidth = int32(32)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.FixedWidth" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="true" /> の場合、自動スケールされるときにコントロールの幅が固定されます。 たとえば、新しい <see cref="T:System.Drawing.Font" /> を挿入できるようにレイアウト操作でコントロールを再スケールしようとしても、コントロールの <see cref="P:System.Windows.Forms.Control.Width" /> は変更されません。</summary>
      </Docs>
    </Member>
    <Member MemberName="Opaque">
      <MemberSignature Language="C#" Value="Opaque" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles Opaque = int32(4)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.Opaque" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="true" /> の場合、コントロールは不透明に描画され、背景は描画されません。</summary>
      </Docs>
    </Member>
    <Member MemberName="OptimizedDoubleBuffer">
      <MemberSignature Language="C#" Value="OptimizedDoubleBuffer" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles OptimizedDoubleBuffer = int32(131072)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="true" /> の場合、コントロールは、画面に直接ではなく、まずバッファーに描画されます。これにより、ちらつきを抑えることができます。 このプロパティを <see langword="true" /> に設定した場合は、<see cref="F:System.Windows.Forms.ControlStyles.AllPaintingInWmPaint" /> も <see langword="true" /> に設定する必要があります。</summary>
      </Docs>
    </Member>
    <Member MemberName="ResizeRedraw">
      <MemberSignature Language="C#" Value="ResizeRedraw" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles ResizeRedraw = int32(16)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.ResizeRedraw" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="true" /> の場合、コントロールのサイズが変更されると、そのコントロールが再描画されます。</summary>
      </Docs>
    </Member>
    <Member MemberName="Selectable">
      <MemberSignature Language="C#" Value="Selectable" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles Selectable = int32(512)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.Selectable" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="true" /> の場合、コントロールはフォーカスを受け取ることができます。</summary>
      </Docs>
    </Member>
    <Member MemberName="StandardClick">
      <MemberSignature Language="C#" Value="StandardClick" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles StandardClick = int32(256)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.StandardClick" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="true" /> の場合、コントロールは標準の <see cref="E:System.Windows.Forms.Control.Click" /> 動作を実装します。</summary>
      </Docs>
    </Member>
    <Member MemberName="StandardDoubleClick">
      <MemberSignature Language="C#" Value="StandardDoubleClick" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles StandardDoubleClick = int32(4096)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.StandardDoubleClick" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="true" /> の場合、コントロールは標準の <see cref="E:System.Windows.Forms.Control.DoubleClick" /> 動作を実装します。<see cref="F:System.Windows.Forms.ControlStyles.StandardClick" /> ビットが <see langword="true" /> に設定されていない場合、このスタイルは無視されます。</summary>
      </Docs>
    </Member>
    <Member MemberName="SupportsTransparentBackColor">
      <MemberSignature Language="C#" Value="SupportsTransparentBackColor" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles SupportsTransparentBackColor = int32(2048)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.SupportsTransparentBackColor" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="true" /> の場合、コントロールはアルファ値が 255 未満の <see cref="P:System.Windows.Forms.Control.BackColor" /> を受け入れ、透明度をシミュレートします。 この透明度は、<see cref="F:System.Windows.Forms.ControlStyles.UserPaint" /> ビットが <see langword="true" /> に設定され、親コントロールが <see cref="T:System.Windows.Forms.Control" /> から派生している場合だけシミュレートされます。</summary>
      </Docs>
    </Member>
    <Member MemberName="UserMouse">
      <MemberSignature Language="C#" Value="UserMouse" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles UserMouse = int32(1024)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.UserMouse" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="true" /> の場合は、コントロールがマウスの操作を独自に処理し、オペレーティング システムではマウス イベントが処理されません。</summary>
      </Docs>
    </Member>
    <Member MemberName="UserPaint">
      <MemberSignature Language="C#" Value="UserPaint" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles UserPaint = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.UserPaint" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="true" /> の場合、コントロールはオペレーティング システムによってではなく、独自に描画されます。<see langword="false" /> の場合、<see cref="E:System.Windows.Forms.Control.Paint" /> イベントは発生しません。 このスタイルは、<see cref="T:System.Windows.Forms.Control" /> から派生したクラスだけに適用されます。</summary>
      </Docs>
    </Member>
    <Member MemberName="UseTextForAccessibility">
      <MemberSignature Language="C#" Value="UseTextForAccessibility" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles UseTextForAccessibility = int32(262144)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.UseTextForAccessibility" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの <c>Text</c> プロパティの値を指定します。設定した場合、コントロールの既定の Active Accessibility 名とショートカット キーが決定されます。</summary>
      </Docs>
    </Member>
  </Members>
</Type>