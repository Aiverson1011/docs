<Type Name="NativeWindow" FullName="System.Windows.Forms.NativeWindow">
  <TypeSignature Language="C#" Value="public class NativeWindow : MarshalByRefObject, System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi NativeWindow extends System.MarshalByRefObject implements class System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.NativeWindow" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Forms.IWin32Window</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>ウィンドウ ハンドルとウィンドウ プロシージャの低レベルのカプセル化を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスは、ウィンドウ クラスの作成と登録を自動的に管理します。  
  
 ウィンドウ ハンドルに関連付けられている場合、ウィンドウはガベージ コレクションの対象ではできません。 適切なガベージ コレクションのために、ハンドルする必要がありますか、破棄を使用して手動で <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> を使用して解放または <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>です。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> へのメッセージが処理されるときに、メソッドが呼び出されます。 つまり、される場合にを手動で呼び出す必要はありませんが <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, が、これを行うことをお勧めします。  
  
 <xref:System.Windows.Forms.NativeWindow> クラスには、次のプロパティと処理を管理するメソッドが用意されています: <xref:System.Windows.Forms.NativeWindow.Handle%2A>, 、<xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>, 、<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>, 、<xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>, 、および <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>です。  
  
   
  
## 例  
 次のコード例では、ウィンドウ プロシージャ、および特定のオペレーティング システムのウィンドウ クラス名でウィンドウを作成するオペレーティング システムのウィンドウ メッセージを受け取る方法を示します。 継承する 2 つのクラスを作成する例では、 <xref:System.Windows.Forms.NativeWindow> これを実現します。  
  
 `MyNativeWindowListener` クラスは、コンス トラクターに渡されたフォームのウィンドウ プロシージャにフックし、上書き、 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> をインターセプトするメソッド、 `WM_ACTIVATEAPP` ウィンドウ メッセージです。 クラスは、の使用法を示しています、 <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> と <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> ウィンドウ ハンドルを識別する方法、 <xref:System.Windows.Forms.NativeWindow> を使用します。 ハンドルが割り当てに基づいて、 <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=fullName> と <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=fullName> イベントです。 ときに、 `WM_ACTIVATEAPP` ウィンドウ メッセージを受信すると、クラスの呼び出し、 `form1``ApplicationActivated` メソッドです。  
  
 `MyNativeWindow` クラスは、新しいウィンドウを作成、 <xref:System.Windows.Forms.CreateParams.ClassName%2A> 設定 `BUTTON`します。 クラスの使用方法を示します、 <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> メソッドをオーバーライドする、 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> メソッドを受信するウィンドウ メッセージをインターセプトします。  
  
 [!code-cpp[NativeWindow\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#1)]
 [!code-csharp[NativeWindow\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#1)]
 [!code-vb[NativeWindow\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">for the immediate caller to call unmanaged code. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
    <altmember cref="T:System.IntPtr" />
    <altmember cref="T:System.Windows.Forms.Application" />
    <altmember cref="T:System.Windows.Forms.AxHost" />
    <altmember cref="T:System.Windows.Forms.Control" />
    <altmember cref="T:System.Windows.Forms.Form" />
    <altmember cref="T:System.Windows.Forms.IWin32Window" />
    <altmember cref="T:System.Windows.Forms.Message" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.NativeWindow" /> クラスのインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、既定値 <xref:System.Windows.Forms.NativeWindow.%23ctor%2A> コンス トラクターがコンパイラによって指定します。<xref:System.Windows.Forms.NativeWindow> クラスにもアプリケーション ドメイン全体のメッセージ ハンドラーとハッシュ テーブルを初期化する静的コンス トラクターがあります。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="T:System.AppDomain" />
      </Docs>
    </Member>
    <Member MemberName="AssignHandle">
      <MemberSignature Language="C#" Value="public void AssignHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssignHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">このウィンドウに割り当てるへのハンドル。</param>
        <summary>このウィンドウを識別するハンドルを割り当てます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> 送信されたウィンドウ メッセージを途中受信、 `handle` パラメーター。 使用 <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> ハンドルのウィンドウ プロシージャを既定のウィンドウ プロシージャにリセットします。  
  
 <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> メソッドの呼び出し、 <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> ことを示すメソッドの値、 <xref:System.Windows.Forms.NativeWindow.Handle%2A> プロパティが変更されました。  
  
> [!NOTE]
>  ハンドルを割り当てるには、別のアプリケーション プロセスですることはできません。  
  
   
  
## 例  
 次のコード例では、ウィンドウ プロシージャでオペレーティング システムのウィンドウ メッセージを受け取る方法を示します。 継承するクラスを作成する例では、 <xref:System.Windows.Forms.NativeWindow> これを実現します。  
  
 `MyNativeWindowListener` クラスは、コンス トラクターに渡されたフォームのウィンドウ プロシージャにフックし、上書き、 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> をインターセプトする方法、 `WM_ACTIVATEAPP` ウィンドウ メッセージです。 クラスの使用方法を示します、 <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> と <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> いるウィンドウを識別するためにメソッドを処理、 <xref:System.Windows.Forms.NativeWindow> を使用します。 基に、ハンドルを割り当て、 <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=fullName> と <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=fullName> イベントです。 ときに、 `WM_ACTIVATEAPP` ウィンドウ メッセージを受信すると、クラスの呼び出し、 `form1``ApplicationActivated` メソッドです。  
  
 このコードは、例からの抜粋、 <xref:System.Windows.Forms.NativeWindow> クラスの概要です。 いくつかのコードは簡潔さを優先するためには表示されません。 参照してください <xref:System.Windows.Forms.NativeWindow> コード全体の一覧です。  
  
 [!code-cpp[NativeWindow\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">このウィンドウは、ハンドルを既に持っています。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">関連するネイティブ ウィンドウのウィンドウ プロシージャを取得できませんでした。</exception>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="public virtual void CreateHandle (System.Windows.Forms.CreateParams cp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateHandle(class System.Windows.Forms.CreateParams cp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cp" Type="System.Windows.Forms.CreateParams" />
      </Parameters>
      <Docs>
        <param name="cp">A <see cref="T:System.Windows.Forms.CreateParams" /> このウィンドウの作成パラメーターを指定します。</param>
        <summary>指定された作成パラメーターを使用して、ウィンドウとそのハンドルを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `cp` ネイティブ Win32 に渡される値を指定します。 `CreateWindowEx` ウィンドウとそのハンドルを作成します。  
  
 ときに、 <xref:System.Windows.Forms.CreateParams.ClassName%2A> フィールドではありません `null`, 、新しく作成したウィンドウ ハンドルを指定したクラスから継承します。 たとえば場合、 <xref:System.Windows.Forms.CreateParams.ClassName%2A> に設定されている `BUTTON`, 、新しく作成されたウィンドウは、Win32 に基づいて `BUTTON` ウィンドウ クラスです。<xref:System.Windows.Forms.CreateParams.Param%2A> のプロパティ、 <xref:System.Windows.Forms.CreateParams.ClassName%2A> オブジェクトでなければなりません `null` または構造体として宣言されたクラスのインスタンスを参照します。  
  
 このコードは、例からの抜粋、 <xref:System.Windows.Forms.NativeWindow> クラスの概要です。 いくつかのコードは簡潔さを優先するためには表示されません。 参照してください <xref:System.Windows.Forms.NativeWindow> コード全体の一覧です。  
  
> [!NOTE]
>  指定されたクラス名には、オペレーティング システムが登録されます。  
  
   
  
## 例  
 次のコード例では、特定のオペレーティング システムのウィンドウ クラス名と共にウィンドウの作成を示します。 継承するクラスを作成する例では、 <xref:System.Windows.Forms.NativeWindow> これを実現します。  
  
 `MyNativeWindow` クラスは、新しいウィンドウを作成、 <xref:System.Windows.Forms.CreateParams.ClassName%2A> 設定 `BUTTON`します。 これには、Win32 ボタン ウィンドウが作成されます。 ボタンのサイズと場所は、追加のウィンドウ スタイルを指定すると設定がします。 クラスを使用する方法を示しています、 <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> メソッドをオーバーライドして、 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> メソッドを受信するウィンドウ メッセージをインターセプトします。 WM\_ACTIVATEAPP メッセージをこの例は、これで作成した型に対応するウィンドウ メッセージに実際のプログラムでに置き換えられますことができます。  
  
> [!NOTE]
>  コントロールの種類によっては、ウィンドウではなく、ウィンドウの親をウィンドウ メッセージを送信します。 詳細については、Windows プラットフォーム SDK を参照してください。  
  
 [!code-cpp[NativeWindow\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">オペレーティング システムは、ネイティブのウィンドウを作成しようとするときのリソース不足になりました。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">ネイティブの Win32 API は、指定されたウィンドウを作成できませんでした。</exception>
        <exception cref="T:System.InvalidOperationException">現在のネイティブ ウィンドウのハンドルが既に割り当てられています。詳細についてで、 <see cref="P:System.Windows.Forms.NativeWindow.Handle" /> プロパティと等しくない <see cref="F:System.IntPtr.Zero" />します。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">to create a top\-level window. This permission is only demanded if the window style is not a child or if the window does not have a parent. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="DefWndProc">
      <MemberSignature Language="C#" Value="public void DefWndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefWndProc(valuetype System.Windows.Forms.Message m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">現在処理されているメッセージです。</param>
        <summary>このウィンドウに関連付けられている既定のウィンドウ プロシージャを呼び出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 通常、のみを呼び出す、 <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> メソッド ウィンドウ メッセージを受け取り、メッセージを処理する既定のウィンドウ プロシージャを希望するとします。<xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> ウィンドウをウィンドウ メッセージを送信する呼び出すことはできません。Win32 を呼び出す `SendMessage` 関数を使用します。  
  
 呼び出すとエラーが <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> ときに、 <xref:System.Windows.Forms.NativeWindow.Handle%2A> プロパティは 0 です。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Override this method in a derived class to implement generalized custom message handling for a specific native window or .NET Windows Forms <see cref="T:System.Windows.Forms.Control" />. Custom processing can be performed before, after, or instead of a call to the base class implementation of this method, which performs standard message processing.  
  
 In contrast, adding customized message handling for an application can be accomplished through the <see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" /> method of the <see cref="T:System.Windows.Forms.Application" /> class.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />
      </Docs>
    </Member>
    <Member MemberName="DestroyHandle">
      <MemberSignature Language="C#" Value="public virtual void DestroyHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DestroyHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ウィンドウとそのハンドルを破棄します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドに関連付けられているウィンドウの破棄、 <xref:System.Windows.Forms.NativeWindow.Handle%2A>, 、設定、 <xref:System.Windows.Forms.NativeWindow.Handle%2A> プロパティを 0 であり、呼び出し、 <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> の変更を反映する方法です。 通常、のみを呼び出す <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> したらネイティブ ウィンドウとします。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.NativeWindow> クラスに自動的には関連付けられているウィンドウを破棄し、WM\_DESTROY メッセージへの応答で、リソースを解放します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.Finalize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このウィンドウに関連付けられているリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.NativeWindow.Finalize%2A> メソッドに現在関連付けられている Win32 の派生クラスを削除する <xref:System.Windows.Forms.NativeWindow> インスタンスが、ハンドルを解放し、関連するウィンドウに WM\_CLOSE メッセージをポストします。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.#ctor" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      </Docs>
    </Member>
    <Member MemberName="FromHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.NativeWindow FromHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.NativeWindow FromHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.NativeWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">ウィンドウのハンドル。</param>
        <summary>指定したハンドルに関連付けられているウィンドウを取得します。</summary>
        <returns>
          <see cref="T:System.Windows.Forms.NativeWindow" /> 指定したハンドルに関連付けられています。 このメソッドが戻る <see langword="null" /> ハンドルがない場合、関連するウィンドウです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 別のメソッドからのハンドルを受信する場合は、ハンドルに関連付けられているウィンドウを取得するこのメソッドを使用します。 別のハンドルを所有既に必要があります <xref:System.Windows.Forms.NativeWindow> 、現在のプロセス以外の場合、 `null` が返されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.NativeWindow.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このウィンドウのハンドルを取得します。</summary>
        <value>成功した場合、 <see cref="T:System.IntPtr" /> に関連したネイティブな Win32 ウィンドウへのハンドルを表す、ウィンドウに関連付けられたハンドルがない場合は 0 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ウィンドウまたはコントロールのハンドルを必要とする Windows API メソッドを呼び出すときは、このメソッドを使用します。  
  
   
  
## 例  
 次のコード例では、特定のオペレーティング システムのウィンドウ クラス名と共にウィンドウの作成を示します。 継承するクラスを作成する例では、 <xref:System.Windows.Forms.NativeWindow> これを実現します。 この例をオーバーライドする、 <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> ときに通知を受け取るメソッド、 <xref:System.Windows.Forms.NativeWindow.Handle%2A> 変更します。  
  
 `MyNativeWindow` クラスは、新しいウィンドウを作成、 <xref:System.Windows.Forms.CreateParams.ClassName%2A> ボタンに設定します。 これには、Win32 ボタン ウィンドウが作成されます。 ボタンのサイズと場所は、追加のウィンドウ スタイルを指定すると設定がします。 クラスを使用する方法を示しています、 <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> メソッドをオーバーライドして、 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> メソッドを受信するウィンドウ メッセージをインターセプトします。 WM\_ACTIVATEAPP メッセージをこの例は、これで作成した型に対応するウィンドウ メッセージで実際のプログラムでに置き換えられる可能性があります。  
  
> [!NOTE]
>  コントロールの種類によっては、ウィンドウではなく、ウィンドウの親をウィンドウ メッセージを送信します。 詳細については、Windows プラットフォーム SDK を参照してください。  
  
 [!code-cpp[NativeWindow\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="OnHandleChange">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleChange ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleChange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ウィンドウのハンドルが変更されたときに呼び出される通知方法を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドが呼び出されるときの値、 <xref:System.Windows.Forms.NativeWindow.Handle%2A> プロパティが変更されました。  
  
   
  
## 例  
 次のコード例では、特定のオペレーティング システムのウィンドウ クラス名と共にウィンドウの作成を示します。 継承するクラスを作成する例では、 <xref:System.Windows.Forms.NativeWindow> これを実現します。 この例をオーバーライドする、 <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> ときに通知を受け取るメソッド、 <xref:System.Windows.Forms.NativeWindow.Handle%2A> 変更します。  
  
 `MyNativeWindow` クラスは、新しいウィンドウを作成、 <xref:System.Windows.Forms.CreateParams.ClassName%2A> 設定 `BUTTON`します。 これには、Win32 ボタン ウィンドウが作成されます。 ボタンのサイズと場所は、追加のウィンドウ スタイルを指定すると設定がします。 クラスを使用する方法を示しています、 <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> メソッドをオーバーライドして、 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> メソッドを受信するウィンドウ メッセージをインターセプトします。 WM\_ACTIVATEAPP メッセージをこの例は、これで作成した型に対応するウィンドウ メッセージに実際のプログラムでに置き換えられますことができます。  
  
 このコードは、例からの抜粋、 <xref:System.Windows.Forms.NativeWindow> クラスの概要です。 いくつかのコードは簡潔さを優先するためには表示されません。 参照してください <xref:System.Windows.Forms.NativeWindow> コード全体の一覧です。  
  
> [!NOTE]
>  コントロールの種類によっては、ウィンドウではなく、ウィンドウの親をウィンドウ メッセージを送信します。 詳細については、Windows プラットフォーム SDK を参照してください。  
  
 [!code-cpp[NativeWindow\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Override this method to track changes that are made to the window handle.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="OnThreadException">
      <MemberSignature Language="C#" Value="protected virtual void OnThreadException (Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnThreadException(class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Exception" /> スレッドのハンドルされない例外を指定します。</param>
        <summary>派生クラスでオーバーライドされた場合は、スレッドのハンドルされない例外を管理します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 通常、 <xref:System.Windows.Forms.Application.OnThreadException%2A> スレッドの例外を処理します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="T:System.Windows.Forms.Application" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHandle">
      <MemberSignature Language="C#" Value="public virtual void ReleaseHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このウィンドウに関連付けられたハンドルを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、ウィンドウ ハンドルを破棄しません。 代わりに、既定のウィンドウ プロシージャ ハンドルのウィンドウ プロシージャに設定します。 設定、 <xref:System.Windows.Forms.NativeWindow.Handle%2A> プロパティを 0 と呼び出し <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> の変更が反映されます。  
  
 Windows がハンドルを破棄されることを示すネイティブの Win32 へメッセージを受信した場合、ウィンドウは自動的にこのメソッドを呼び出します。  
  
   
  
## 例  
 次のコード例では、ウィンドウ プロシージャでオペレーティング システムのウィンドウ メッセージを受け取る方法を示します。 継承するクラスを作成する例では、 <xref:System.Windows.Forms.NativeWindow> これを実現します。  
  
 `MyNativeWindowListener` クラスは、コンス トラクターに渡されたフォームのウィンドウ プロシージャにフックし、上書き、 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> をインターセプトする方法、 `WM_ACTIVATEAPP` ウィンドウ メッセージです。 クラスの使用方法を示します、 <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> と <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> ウィンドウ ハンドルを識別する方法、 <xref:System.Windows.Forms.NativeWindow> を使用します。 ハンドルが割り当てに基づいて、 <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=fullName> と <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=fullName> イベントです。 ときに、 `WM_ACTIVATEAPP` ウィンドウ メッセージを受信すると、クラスの呼び出し、 `form1``ApplicationActivated` メソッドです。  
  
 このコードは、例からの抜粋、 <xref:System.Windows.Forms.NativeWindow> クラスの概要です。 いくつかのコードは簡潔さを優先するためには表示されません。 参照してください <xref:System.Windows.Forms.NativeWindow> コード全体の一覧です。  
  
 [!code-cpp[NativeWindow\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected virtual void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WndProc(valuetype System.Windows.Forms.Message m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">A <see cref="T:System.Windows.Forms.Message" /> 現在の Windows メッセージに関連付けられています。</param>
        <summary>このウィンドウに関連付けられている既定のウィンドウ プロシージャを呼び出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ウィンドウのハンドルをウィンドウ メッセージを送信するときに、このメソッドが呼び出されます。  
  
   
  
## 例  
 次のコード例では、ウィンドウ プロシージャでオペレーティング システムのウィンドウ メッセージを受け取る方法を示します。 継承するクラスを作成する例では、 <xref:System.Windows.Forms.NativeWindow> これを実現します。  
  
 `MyNativeWindowListener` クラスは、コンス トラクターに渡されたフォームのウィンドウ プロシージャにフックし、上書き、 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> をインターセプトするメソッド、 `WM_ACTIVATEAPP` ウィンドウ メッセージです。 クラスの使用方法を示します、 <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> と <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> ウィンドウ ハンドルを識別する方法、 <xref:System.Windows.Forms.NativeWindow> を使用します。 基に、ハンドルを割り当て、 <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=fullName> と <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=fullName> イベントです。 ときに、 `WM_ACTIVATEAPP` ウィンドウ メッセージを受信すると、クラスの呼び出し、 `form1``ApplicationActivated` メソッドです。  
  
 このコードは、例からの抜粋、 <xref:System.Windows.Forms.NativeWindow> クラスの概要です。 いくつかのコードは簡潔さを優先するためには表示されません。 参照してください <xref:System.Windows.Forms.NativeWindow> コード全体の一覧です。  
  
 [!code-cpp[NativeWindow\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Override this method to implement specific message processing. Call <c>base.WndProc</c> for unhandled messages.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      </Docs>
    </Member>
  </Members>
</Type>