<Type Name="ListBox" FullName="System.Windows.Forms.ListBox">
  <TypeSignature Language="C#" Value="public class ListBox : System.Windows.Forms.ListControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ListBox extends System.Windows.Forms.ListControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ListBox" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.ListControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultBindingProperty("SelectedValue")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("SelectedIndexChanged")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Items")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.ListBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>項目のリストを表示する Windows コントロールを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListBox> コントロールでは、ユーザーがクリックして選択できることをユーザーに項目の一覧を表示することができます。 A <xref:System.Windows.Forms.ListBox> 1 つまたは複数の選択を使用してコントロールを提供できる、 <xref:System.Windows.Forms.ListBox.SelectionMode%2A> プロパティです。<xref:System.Windows.Forms.ListBox> も用意されています、 <xref:System.Windows.Forms.ListBox.MultiColumn%2A> プロパティをアイテムの垂直方向の直線の一覧ではなく列内の項目を表示できるようにします。 これで、コントロールが複数表示されている項目を表示し、ユーザーが項目にスクロールする必要がなくなった。  
  
 Windows は通常に表示する項目を描画するタスクを処理する、 <xref:System.Windows.Forms.ListBox>です。 使用することができます、 <xref:System.Windows.Forms.ListBox.DrawMode%2A> プロパティ、およびハンドル、 <xref:System.Windows.Forms.ListBox.MeasureItem> と <xref:System.Windows.Forms.ListBox.DrawItem> 自動の Windows での描画をオーバーライドするためのイベントを提供し、項目を描画します。 オーナー描画を使用する <xref:System.Windows.Forms.ListBox> 一覧に変数高さアイテム、画像、または別の色または各項目のテキストのフォントを表示するコントロール。<xref:System.Windows.Forms.ListBox.HorizontalExtent%2A> プロパティには、 <xref:System.Windows.Forms.ListBox.GetItemHeight%2A>, 、および <xref:System.Windows.Forms.ListBox.GetItemRectangle%2A> 、独自の項目を描画できます。  
  
 表示および選択の機能に加え、 <xref:System.Windows.Forms.ListBox> を効率的にする項目を追加するための機能も提供、 <xref:System.Windows.Forms.ListBox> とリストの項目内のテキストを検索します。<xref:System.Windows.Forms.ListBox.BeginUpdate%2A> と <xref:System.Windows.Forms.ListBox.EndUpdate%2A> メソッドを使用すると、追加する項目の数が多い、 <xref:System.Windows.Forms.ListBox> たびに再描画されているコントロールを使用せずに項目がリストに追加します。<xref:System.Windows.Forms.ListBox.FindString%2A> と <xref:System.Windows.Forms.ListBox.FindStringExact%2A> メソッドを使用すると、特定の検索文字列を含むリストに項目を検索します。  
  
 <xref:System.Windows.Forms.ListBox.Items%2A>, 、<xref:System.Windows.Forms.ListBox.SelectedItems%2A>, 、および <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> プロパティで使用される 3 つのコレクションにアクセスできるように、 <xref:System.Windows.Forms.ListBox>です。 次の表に、3 つのコレクションで使用される、 <xref:System.Windows.Forms.ListBox> およびコントロール内で使用します。  
  
|コレクション クラス|内で使用して、 <xref:System.Windows.Forms.ListBox>|  
|----------------|---------------------------------------------------------------------------------------------------------------------------------------------------|  
|<xref:System.Windows.Forms.ListBox.ObjectCollection>|含まれているすべての項目を含む、 <xref:System.Windows.Forms.ListBox> コントロールです。|  
|<xref:System.Windows.Forms.ListBox.SelectedObjectCollection>|格納される項目のサブセットである、選択した項目のコレクションを格納に、 <xref:System.Windows.Forms.ListBox> コントロールです。|  
|<xref:System.Windows.Forms.ListBox.SelectedIndexCollection>|インデックスのサブセットである選択されたインデックスのコレクションを格納の <xref:System.Windows.Forms.ListBox.ObjectCollection>です。 これらのインデックスは、選択されている項目を指定します。|  
  
 次の 3 つの例を表示する 3 つのインデックス付きコレクションを <xref:System.Windows.Forms.ListBox> クラスでサポートされます。  
  
 次の表は、方法の例を示しています。 <xref:System.Windows.Forms.ListBox.ObjectCollection> のアイテムを格納する、 <xref:System.Windows.Forms.ListBox> 例内で、選択状態だけでなく <xref:System.Windows.Forms.ListBox>です。  
  
|インデックス|アイテム|リスト ボックス内の選択範囲の状態|  
|------------|----------|-----------------------|  
|0|object1|選択されていません。|  
|1|object2|選択済み|  
|2|object3|選択されていません。|  
|3|object4|選択済み|  
|4|object5|選択済み|  
  
 に基づいて、 <xref:System.Windows.Forms.ListBox.ObjectCollection> 、前の表に示すように、次の表は、どのように <xref:System.Windows.Forms.ListBox.SelectedObjectCollection> が表示されます。  
  
|インデックス|アイテム|  
|------------|----------|  
|0|object2|  
|1|object4|  
|2|object5|  
  
 に基づいて、 <xref:System.Windows.Forms.ListBox.ObjectCollection> 、前の表に示すように、次の表は、どのように <xref:System.Windows.Forms.ListBox.SelectedIndexCollection> が表示されます。  
  
|インデックス|項目のインデックス|  
|------------|---------------|  
|0|1|  
|1|3|  
|2|4|  
  
 <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> のメソッド、 <xref:System.Windows.Forms.ListBox.ObjectCollection> クラスでは、項目を追加することができます、 <xref:System.Windows.Forms.ListBox>です。<xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> にメンバーを追加するときにメソッドが任意のオブジェクトを受け入れる、 <xref:System.Windows.Forms.ListBox>です。 オブジェクトに追加する場合、 <xref:System.Windows.Forms.ListBox>, 、コントロールで定義されているテキストを使用して、 <xref:System.Object.ToString%2A> オブジェクトのメソッドは、オブジェクト内でメンバーの名前にしない限りで指定された、 <xref:System.Windows.Forms.ListControl.DisplayMember%2A> プロパティです。 使用して項目を追加するだけでなく、 <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> のメソッド、 <xref:System.Windows.Forms.ListBox.ObjectCollection> クラスを追加することも項目を使用して、 <xref:System.Windows.Forms.ListControl.DataSource%2A> のプロパティ、 <xref:System.Windows.Forms.ListControl> クラスです。  
  
> [!NOTE]
>  ある場合、 <xref:System.Windows.Forms.ListBox>, 、<xref:System.Windows.Forms.ComboBox>, 、または <xref:System.Windows.Forms.CheckedListBox> 、基本 Windows フォーム、Windows の派生フォームでコントロールの文字列のコレクションを変更するには、基本の Windows フォームでコントロールの文字列のコレクションを空にする必要があります。 文字列のコレクションが空でない場合になる読み取り専用別の Windows フォームを派生させる場合。  
  
   
  
## 例  
 次のコード例では、作成、 <xref:System.Windows.Forms.ListBox> コントロールの列に複数の項目を表示し、複数の項目がコントロールのリストで選択されていることができます。 この例のコードに 50 個の項目の追加、 <xref:System.Windows.Forms.ListBox> を使用して、 <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> のメソッド、 <xref:System.Windows.Forms.ListBox.ObjectCollection> を使用して、一覧から項目を 3 つのクラスと、選択、 <xref:System.Windows.Forms.ListBox.SetSelected%2A> メソッドです。 コードからの値を表示、 <xref:System.Windows.Forms.ListBox.SelectedObjectCollection> コレクション通じて、 <xref:System.Windows.Forms.ListBox.SelectedItems%2A> プロパティ、および <xref:System.Windows.Forms.ListBox.SelectedIndexCollection>, 通じて、 <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> プロパティです。 この例では、コードにあるし、それがから呼び出される、 <xref:System.Windows.Forms.Form>です。  
  
 [!code-cpp[Classic ListBox Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例では、作成、 <xref:System.Windows.Forms.ListBox> コントロールの列に複数の項目を表示し、複数の項目がコントロールのリストで選択されていることができます。 この例のコードに 50 個の項目の追加、 <xref:System.Windows.Forms.ListBox> を使用して、 <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> のメソッド、 <xref:System.Windows.Forms.ListBox.ObjectCollection> を使用して、一覧から項目を 3 つのクラスと、選択、 <xref:System.Windows.Forms.ListBox.SetSelected%2A> メソッドです。 コードからの値を表示、 <xref:System.Windows.Forms.ListBox.SelectedObjectCollection> コレクション通じて、 <xref:System.Windows.Forms.ListBox.SelectedItems%2A> プロパティ、および <xref:System.Windows.Forms.ListBox.SelectedIndexCollection>, 通じて、 <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> プロパティです。 この例では、コードにあるし、それがから呼び出される、 <xref:System.Windows.Forms.Form>です。  
  
 [!code-cpp[Classic ListBox Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddItemsCore">
      <MemberSignature Language="C#" Value="protected virtual void AddItemsCore (object[] value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddItemsCore(object[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.AddItemsCore(System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This method has been deprecated.  There is no replacement.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="value">オブジェクトの配列。</param>
        <summary>このメンバーは互換性のために残されており、代わりのメンバーはありません。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowSelection">
      <MemberSignature Language="C#" Value="protected override bool AllowSelection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowSelection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.AllowSelection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうか、 <see cref="T:System.Windows.Forms.ListBox" /> リスト項目の選択が現在有効です。</summary>
        <value>
          <see langword="true" /> 場合 <see cref="T:System.Windows.Forms.SelectionMode" /> は <see cref="F:System.Windows.Forms.SelectionMode.None" />。 そうしないと、 <see langword="false" />です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.BackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの背景色を取得または設定します。</summary>
        <value>コントロールの背景色を表す <see cref="T:System.Drawing.Color" />。 既定値は <see cref="P:System.Windows.Forms.Control.DefaultBackColor" /> プロパティの値です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImage">
      <MemberSignature Language="C#" Value="public override System.Drawing.Image BackgroundImage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Image BackgroundImage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.BackgroundImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このクラスでは、このプロパティは使用されません。</summary>
        <value>フォームの背景イメージ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスでは、このプロパティは使用されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.BackgroundImageChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに、 <see cref="P:System.Windows.Forms.ListBox.BackgroundImage" /> ラベルの変更のプロパティです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスでは、このイベントは使用されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayout">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImageLayout BackgroundImageLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.BackgroundImageLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定の背景画像のレイアウト、 <see cref="T:System.Windows.Forms.ListBox" /> で定義されている、 <see cref="T:System.Windows.Forms.ImageLayout" /> 列挙します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ImageLayout" /> の値の 1 つ。 値は、 <see langword="Center" />, 、<see langword="None" />, 、<see langword="Stretch" />, 、<see langword="Tile" />, 、または <see langword="Zoom" />です。 既定値は <see langword="Center" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスでは、このプロパティは使用されません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定された列挙値が存在しません。</exception>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageLayoutChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.BackgroundImageLayoutChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.ListBox.BackgroundImageLayout" /> プロパティが変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスでは、このイベントは使用されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginUpdate">
      <MemberSignature Language="C#" Value="public void BeginUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.BeginUpdate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>項目を追加中にパフォーマンスを維持、 <see cref="T:System.Windows.Forms.ListBox" /> コントロールを描画するまでにできなくなり、一度に 1 つずつ、 <see cref="M:System.Windows.Forms.ListBox.EndUpdate" /> メソッドが呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 複数の項目を追加することをお勧め、 <xref:System.Windows.Forms.ListBox> を使用して、 <xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A> のメソッド、 <xref:System.Windows.Forms.ListBox.ObjectCollection> クラス \(を通じて、 <xref:System.Windows.Forms.ListBox.Items%2A> のプロパティ、 <xref:System.Windows.Forms.ListBox>\)。 これにより、1 回の操作リストに項目の配列を追加することができます。 ただしを追加する場合は、アイテムを一度に 1 つを使用して、時間、 <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> のメソッド、 <xref:System.Windows.Forms.ListBox.ObjectCollection> クラスを使用できます、 <xref:System.Windows.Forms.ListBox.BeginUpdate%2A> メソッドをコントロールが再描画するを防ぐために、 <xref:System.Windows.Forms.ListBox> 項目がリストに追加されるたびにします。 リストに項目を追加するタスクを完了すると、呼び出し、 <xref:System.Windows.Forms.ListBox.EndUpdate%2A> を有効にする方法、 <xref:System.Windows.Forms.ListBox> を再描画します。 この方法で項目を追加するときにちらつきませんの描画、 <xref:System.Windows.Forms.ListBox> は、多くのアイテムを一覧に追加する場合。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Windows.Forms.ListBox.BeginUpdate%2A> と <xref:System.Windows.Forms.ListBox.EndUpdate%2A> メソッドに 5000 個の項目を追加するときに、 <xref:System.Windows.Forms.ListBox>です。 この例で必要とする、 <xref:System.Windows.Forms.ListBox> という名前のコントロール `listBox1`, に追加されて、 <xref:System.Windows.Forms.Form> し、このメソッドが、フォーム内に配置し、そこから呼び出されます。  
  
 [!code-cpp[Classic ListBox.BeginUpdate Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox.BeginUpdate Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox.BeginUpdate Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.EndUpdate" />
      </Docs>
    </Member>
    <Member MemberName="BorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BorderStyle BorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.BorderStyle BorderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.BorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-504)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定の周囲に描画される境界線の種類、 <see cref="T:System.Windows.Forms.ListBox" />です。</summary>
        <value>
          <see cref="T:System.Windows.Forms.BorderStyle" /> 値のいずれか。 既定値は、<see cref="F:System.Windows.Forms.BorderStyle.Fixed3D" /> です。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">値が、<see cref="T:System.Windows.Forms.BorderStyle" /> 値ではありません。</exception>
        <altmember cref="T:System.Windows.Forms.BorderStyle" />
      </Docs>
    </Member>
    <Member MemberName="ClearSelected">
      <MemberSignature Language="C#" Value="public void ClearSelected ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearSelected() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ClearSelected" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>すべてのアイテムの選択を解除、 <see cref="T:System.Windows.Forms.ListBox" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 同じことには、このメソッドを呼び出して、 <xref:System.Windows.Forms.ListBox.SelectedIndex%2A> プロパティを負の 1 \(\-1\)。 このメソッドを使用すると、すぐに、リスト内のすべての項目の選択を解除します。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.ListBox.SelectedIndex%2A> プロパティを <xref:System.Windows.Forms.ListBox.TopIndex%2A> プロパティの表示領域内の項目の一覧の上部に移動して、現在選択されている項目を <xref:System.Windows.Forms.ListBox>です。 さらに例を使用して項目を削除する方法、 <xref:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt%2A> のメソッド、 <xref:System.Windows.Forms.ListBox.ObjectCollection?displayProperty=fullName> クラス、およびすべての選択を使用して項目をクリアする方法、 <xref:System.Windows.Forms.ListBox.ClearSelected%2A> メソッドです。 コードは最初現在選択されている項目を移動、 <xref:System.Windows.Forms.ListBox> 、一覧の上部にします。 コードは、現在選択されている項目の前にすべての項目を削除し、すべての選択項目をクリア、 <xref:System.Windows.Forms.ListBox>です。 この例で必要とする、 <xref:System.Windows.Forms.ListBox> 、フォームに追加された項目を含むで選択した項目が現在は、 <xref:System.Windows.Forms.ListBox>です。  
  
 [!code-cpp[ListBox.SelectedIndex\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndex/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndex\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndex/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndex\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndex/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedIndex" />
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event EventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.Click" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに、 <see cref="T:System.Windows.Forms.ListBox" /> コントロールをクリックします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnWidth">
      <MemberSignature Language="C#" Value="public int ColumnWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ColumnWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ColumnWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>複数列の列の幅を設定を取得または <see cref="T:System.Windows.Forms.ListBox" />です。</summary>
        <value>コントロール内の各列の幅 \(ピクセル単位\)。 既定値は 0 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値をゼロ \(0\) に設定すると、各列に既定の幅が割り当てられます。 場合、 <xref:System.Windows.Forms.ListBox> 複数列は、 <xref:System.Windows.Forms.ListBox>, 、このプロパティは、一覧の各列の現在の幅を返します。 このプロパティを使用するには複数列の各列を確実に <xref:System.Windows.Forms.ListBox> その項目を正しく表示することができます。  
  
   
  
## 例  
 次のコード例は、単純な 2 つの列を示します <xref:System.Windows.Forms.ListBox>します。  
  
 [!code-csharp[System.Windows.Forms.ListBox.MultiColumn\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBox.MultiColumn/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBox.MultiColumn\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBox.MultiColumn/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">プロパティには、0 より小さい値が割り当てられます。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateItemCollection">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.ListBox.ObjectCollection CreateItemCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.ListBox/ObjectCollection CreateItemCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.CreateItemCollection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+ObjectCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>項目コレクションの新しいインスタンスを作成します。</summary>
        <returns>A <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> を表す新しい項目のコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>You can override this in your derived classes to provide a different collection to store your items.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.ListBox.ObjectCollection" />
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.CreateParams" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロール ハンドルが作成されるときに必要な作成パラメーターを取得します。</summary>
        <value>コントロールを識別するハンドルを作成するときに必要な作成パラメーターを格納している <see cref="T:System.Windows.Forms.CreateParams" />。</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for operating with unmanaged code. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CustomTabOffsets">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListBox.IntegerCollection CustomTabOffsets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListBox/IntegerCollection CustomTabOffsets" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.CustomTabOffsets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+IntegerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>内の項目間のタブの幅を取得、 <see cref="T:System.Windows.Forms.ListBox" />です。</summary>
        <value>タブ幅を表す整数のコレクション。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 整数の配列には、昇順にタブ スペースが含まれています。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultItemHeight">
      <MemberSignature Language="C#" Value="public const int DefaultItemHeight = 13;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 DefaultItemHeight = (13)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ListBox.DefaultItemHeight" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>13</MemberValue>
      <Docs>
        <summary>オーナー描画の既定の項目の高さを指定 <see cref="T:System.Windows.Forms.ListBox" />します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultSize">
      <MemberSignature Language="C#" Value="protected override System.Drawing.Size DefaultSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.DefaultSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの既定のサイズを取得します。</summary>
        <value>コントロールの既定の <see cref="T:System.Drawing.Size" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawItemEventHandler DrawItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawItemEventHandler DrawItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.DrawItem" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>オーナー描画 <see cref="T:System.Windows.Forms.ListBox" /> のビジュアルな部分を変更すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、オーナー描画で使用 <xref:System.Windows.Forms.ListBox>します。 イベントは、いつ発生するか、 <xref:System.Windows.Forms.ListBox.DrawMode%2A> にプロパティが設定されている `DrawMode.OwnerDrawFixed` または `DrawMode.OwnerDrawVariable`です。 このイベントを使用して項目を描画するために必要なタスクを実行することができます、 <xref:System.Windows.Forms.ListBox>です。 可変サイズの項目がある場合 \(ときに、 <xref:System.Windows.Forms.ListBox.DrawMode%2A> にプロパティが設定されている `DrawMode.OwnerDrawVariable`\)、項目を描画する前に、 <xref:System.Windows.Forms.ListBox.MeasureItem> イベントが発生します。 イベント ハンドラーを作成する、 <xref:System.Windows.Forms.ListBox.MeasureItem> しようとして描画のイベント ハンドラーで、項目のサイズを指定するイベント、 <xref:System.Windows.Forms.ListBox.DrawItem> イベントです。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例は、オーナー描画を作成する方法を示します <xref:System.Windows.Forms.ListBox> 項目。 コードを使用して、 <xref:System.Windows.Forms.ListBox.DrawMode%2A> 描画された項目を修正することを指定するプロパティのサイズと <xref:System.Windows.Forms.ListBox.DrawItem> に各項目の描画を実行するイベント、 <xref:System.Windows.Forms.ListBox>です。 プロパティとメソッドのコード例を使用して、 <xref:System.Windows.Forms.DrawItemEventArgs> クラスは、項目を描画するイベント ハンドラーをパラメーターとして渡します。 この例では、する必要があります、 <xref:System.Windows.Forms.ListBox> というコントロール `listBox1` フォームに追加されて、 <xref:System.Windows.Forms.ListBox.DrawItem> のコード例で定義されているイベント ハンドラーでイベントを処理します。 例では項目に追加されている必要があります、 <xref:System.Windows.Forms.ListBox> その順序で"Apple"、「オレンジ」および「プラム」のテキストを使用します。  
  
 [!code-csharp[ListBox.DrawMode\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.DrawMode/CS/form1.cs#1)]
 [!code-vb[ListBox.DrawMode\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.DrawMode/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DrawMode">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.DrawMode DrawMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DrawMode DrawMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.DrawMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの描画モードを取得または設定します。</summary>
        <value>いずれか、 <see cref="T:System.Windows.Forms.DrawMode" /> 、コントロールの項目を描画するためのモードを表す値。 既定値は、<see langword="DrawMode.Normal" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、オーナー描画を作成する方法を示します <xref:System.Windows.Forms.ListBox> 項目。 コードを使用して、 <xref:System.Windows.Forms.ListBox.DrawMode%2A> 描画された項目を修正することを指定するプロパティのサイズと <xref:System.Windows.Forms.ListBox.DrawItem> に各項目の描画を実行するイベント、 <xref:System.Windows.Forms.ListBox>です。 プロパティとメソッドのコード例を使用して、 <xref:System.Windows.Forms.DrawItemEventArgs> クラスは、項目を描画するイベント ハンドラーをパラメーターとして渡します。 この例では、する必要があります、 <xref:System.Windows.Forms.ListBox> というコントロール `listBox1` フォームに追加されて、 <xref:System.Windows.Forms.ListBox.DrawItem> のコード例で定義されているイベント ハンドラーでイベントを処理します。 例では項目に追加されている必要があります、 <xref:System.Windows.Forms.ListBox> その順序で"Apple"、「オレンジ」および「プラム」のテキストを使用します。  
  
 [!code-csharp[ListBox.DrawMode\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.DrawMode/CS/form1.cs#1)]
 [!code-vb[ListBox.DrawMode\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.DrawMode/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">プロパティに割り当てられている値がのメンバーではない、 <see cref="T:System.Windows.Forms.DrawMode" /> 列挙します。</exception>
        <exception cref="T:System.ArgumentException">複数列 <see cref="T:System.Windows.Forms.ListBox" /> 可変サイズの高さを持つことはできません。</exception>
        <altmember cref="T:System.Windows.Forms.DrawMode" />
        <altmember cref="E:System.Windows.Forms.ListBox.DrawItem" />
      </Docs>
    </Member>
    <Member MemberName="EndUpdate">
      <MemberSignature Language="C#" Value="public void EndUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.EndUpdate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="M:System.Windows.Forms.ListBox.BeginUpdate" /> メソッドによって描画が中断された後、<see cref="T:System.Windows.Forms.ListBox" /> コントロールの描画を再開します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The preferred way to add items to the <xref:System.Windows.Forms.ListBox> is to use the <xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A> method of the <xref:System.Windows.Forms.ListBox.ObjectCollection> class \(through the <xref:System.Windows.Forms.ListBox.Items%2A> property of the <xref:System.Windows.Forms.ListBox>\). This enables you to add an array of items to the list at one time. However, if you want to add items one at a time using the <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> method of the <xref:System.Windows.Forms.ListBox.ObjectCollection> class, you can use the <xref:System.Windows.Forms.ListBox.BeginUpdate%2A> method to prevent the control from repainting the <xref:System.Windows.Forms.ListBox> each time an item is added to the list. Once you have completed the task of adding items to the list, call the <xref:System.Windows.Forms.ListBox.EndUpdate%2A> method to enable the <xref:System.Windows.Forms.ListBox> to repaint. This way of adding items can prevent flickered drawing of the <xref:System.Windows.Forms.ListBox> when a large number of items are being added to the list.  
  
   
  
## 例  
 The following code example uses the <xref:System.Windows.Forms.ListBox.BeginUpdate%2A> and <xref:System.Windows.Forms.ListBox.EndUpdate%2A> methods while adding five thousand items to a <xref:System.Windows.Forms.ListBox>. This example requires that a <xref:System.Windows.Forms.ListBox> control, named `listBox1`, has been added to a <xref:System.Windows.Forms.Form> and that this method is placed within the form and called from it.  
  
 [!code-cpp[Classic ListBox.BeginUpdate Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox.BeginUpdate Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox.BeginUpdate Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.BeginUpdate" />
      </Docs>
    </Member>
    <Member MemberName="FindString">
      <MemberSignature Language="C#" Value="public int FindString (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindString(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.FindString(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">検索するテキストです。</param>
        <summary>最初の項目を検索、 <see cref="T:System.Windows.Forms.ListBox" /> が、指定した文字列で始まります。</summary>
        <returns>最初に見つかった項目の 0 から始まるインデックス返します <see langword="ListBox.NoMatches" /> 一致が見つからない場合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドによって実行される検索小文字は区別されません。 検索では、指定した検索文字列パラメーターを部分的に一致する単語 `s`します。 このメソッドを使用すると、指定した文字列と一致する最初の項目を検索します。 使用して、検索テキストを含む項目を削除するなどのタスクを行うことができますし、 <xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A> メソッドまたは項目のテキストを変更します。 その他のインスタンス内のテキストを検索する場合、指定したテキストが見つかった場合、 <xref:System.Windows.Forms.ListBox>, のバージョンを使用する、 <xref:System.Windows.Forms.ListBox.FindString%2A> 内の開始インデックスを指定するためのパラメーターを提供するメソッド、 <xref:System.Windows.Forms.ListBox>です。 部分的な一致の代わりに、正確な語句一致の検索を実行する場合を使用して、 <xref:System.Windows.Forms.ListBox.FindStringExact%2A> メソッドです。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.ListBox.FindString%2A> 内の文字列の最初のインスタンスを検索する方法、 <xref:System.Windows.Forms.ListBox>です。 項目が見つからないかどうか、検索文字列に一致する <xref:System.Windows.Forms.ListBox.FindString%2A> が\-1 を返す値と例が表示されます、 <xref:System.Windows.Forms.MessageBox>です。 この例を使用して、検索テキストに一致する項目が見つかった場合、 <xref:System.Windows.Forms.ListBox.SetSelected%2A> 内の項目を選択する方法、 <xref:System.Windows.Forms.ListBox>です。  
  
 [!code-cpp[ListBox.FindString2\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.FindString2/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.FindString2\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.FindString2/CS/form1.cs#1)]
 [!code-vb[ListBox.FindString2\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.FindString2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">値、 <paramref name="s" /> パラメーターは、\-1 より大きいか以下項目カウントと同じです。</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.FindStringExact(System.String)" />
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FindString">
      <MemberSignature Language="C#" Value="public int FindString (string s, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindString(string s, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.FindString(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">検索するテキストです。</param>
        <param name="startIndex">最初の検索対象項目の前にある項目の 0 から始まるインデックス番号。 コントロールの先頭から検索する場合は \-1 に設定します。</param>
        <summary>最初の項目を検索、 <see cref="T:System.Windows.Forms.ListBox" /> が、指定した文字列で始まります。 指定した開始インデックスから検索が開始します。</summary>
        <returns>最初に見つかった項目の 0 から始まるインデックス返します <see langword="ListBox.NoMatches" /> 一致が見つからない場合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドによって実行される検索小文字は区別されません。 検索では、指定した検索文字列パラメーターを部分的に一致する単語 `s`します。 このメソッドを使用するには、指定した文字列内のアイテムの一覧で指定した開始インデックス位置に一致する最初の項目を検索する、 <xref:System.Windows.Forms.ListBox>です。 使用して、検索テキストを含む項目を削除するなどのタスクを行うことができますし、 <xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A> メソッドまたは項目のテキストを変更します。 このメソッドは通常、このメソッドは開始インデックスが指定されていないのバージョンを使用して、呼び出しが行われた後に使用されます。 内のインデックス位置を指定することによってさらに、検索テキストのインスタンスを検索する、このメソッドを通常使用する最初の項目が見つかった後、一覧で、いったん、 `startIndex` 最初に見つかった項目の検索文字列の後の項目のパラメーターです。 部分的な一致の代わりに、正確な語句一致の検索を実行する場合を使用して、 <xref:System.Windows.Forms.ListBox.FindStringExact%2A> メソッドです。  
  
> [!NOTE]
>  下部にある検索が達したら、 <xref:System.Windows.Forms.ListBox>, の先頭から検索を続けますが、 <xref:System.Windows.Forms.ListBox> で指定された項目に戻り、 `startIndex` パラメーター。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.ListBox.FindString%2A> の項目の検索文字列のすべてのインスタンスを検索する方法、 <xref:System.Windows.Forms.ListBox>です。 この例のバージョンを使用する、 <xref:System.Windows.Forms.ListBox.FindString%2A> メソッドのすべてのアイテムの継続的な検索を実行する開始検索インデックスを指定することができます、 <xref:System.Windows.Forms.ListBox>です。 タイミングを決定する方法も示します、 <xref:System.Windows.Forms.ListBox.FindString%2A> メソッドは再帰的な検索を防止する項目の一覧の一番下に到達後、一覧の一番上から検索を開始します。 項目が見つかると、 <xref:System.Windows.Forms.ListBox>, を使用して選択しても、 <xref:System.Windows.Forms.ListBox.SetSelected%2A> メソッドです。  
  
 [!code-cpp[ListBox.FindString\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.FindString/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.FindString\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.FindString/CS/form1.cs#1)]
 [!code-vb[ListBox.FindString\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.FindString/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> パラメーターが 0 未満かより大きいかの値と等しく、 <see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" /> のプロパティ、 <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> クラスです。</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.FindStringExact(System.String)" />
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FindStringExact">
      <MemberSignature Language="C#" Value="public int FindStringExact (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindStringExact(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.FindStringExact(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">検索するテキストです。</param>
        <summary>最初の項目を検索、 <see cref="T:System.Windows.Forms.ListBox" /> 、指定した文字列を正確に一致します。</summary>
        <returns>最初に見つかった項目の 0 から始まるインデックス返します <see langword="ListBox.NoMatches" /> 一致が見つからない場合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドによって実行される検索小文字は区別されません。 検索では、検索文字列パラメーターで指定された語句と完全に一致 `s`します。 このメソッドを使用すると、指定した文字列と一致する最初の項目を検索します。 使用して、検索テキストを含む項目を削除するなどのタスクを行うことができますし、 <xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A> メソッドまたは項目のテキストを変更します。 その他のインスタンス内のテキストを検索する場合、指定したテキストが見つかった場合、 <xref:System.Windows.Forms.ListBox>, のバージョンを使用する、 <xref:System.Windows.Forms.ListBox.FindStringExact%2A> 内の開始インデックスを指定するためのパラメーターを提供するメソッド、 <xref:System.Windows.Forms.ListBox>です。 正確な語句一致の代わりに単語の一部の検索を実行する場合は、使用、 <xref:System.Windows.Forms.ListBox.FindString%2A> メソッドです。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.ListBox.FindStringExact%2A?displayProperty=fullName> を検索するメソッド、 <xref:System.Windows.Forms.ListBox> 指定した文字列を正確に一致する項目のコントロールをします。 検索文字列に一致するアイテムが見つからない場合 <xref:System.Windows.Forms.ListBox.FindStringExact%2A> が\-1 を返す値と例が表示されます、 <xref:System.Windows.Forms.MessageBox>です。 この例を使用して、検索テキストに一致する項目が見つかった場合、 <xref:System.Windows.Forms.ListBox.SetSelected%2A> 内の項目を選択する方法、 <xref:System.Windows.Forms.ListBox>です。  
  
 [!code-cpp[ListBox.FindStringExact\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.FindStringExact/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.FindStringExact\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.FindStringExact/CS/form1.cs#1)]
 [!code-vb[ListBox.FindStringExact\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.FindStringExact/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.FindString(System.String)" />
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FindStringExact">
      <MemberSignature Language="C#" Value="public int FindStringExact (string s, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindStringExact(string s, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.FindStringExact(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">検索するテキストです。</param>
        <param name="startIndex">最初の検索対象項目の前にある項目の 0 から始まるインデックス番号。 コントロールの先頭から検索する場合は \-1 に設定します。</param>
        <summary>最初の項目を検索、 <see cref="T:System.Windows.Forms.ListBox" /> 、指定した文字列を正確に一致します。 指定した開始インデックスから検索が開始します。</summary>
        <returns>最初に見つかった項目の 0 から始まるインデックス返します <see langword="ListBox.NoMatches" /> 一致が見つからない場合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドによって実行される検索小文字は区別されません。 検索は、指定した検索文字列パラメーターと完全に一致する単語 `s`します。 このメソッドを使用するには、指定した文字列内のアイテムの一覧で指定した開始インデックス位置に一致する最初の項目を検索する、 <xref:System.Windows.Forms.ListBox>です。 使用して、検索テキストを含む、アイテムの削除などのタスクを行うことができますし、 <xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A> メソッドまたは項目のテキストを変更します。 このメソッドは通常、このメソッドは開始インデックスが指定されていないのバージョンを使用して、呼び出しが行われた後に使用されます。 内のインデックス位置を指定することによってさらに、検索テキストのインスタンスを検索する、このメソッドを通常使用する最初の項目が見つかった後、一覧で、いったん、 `startIndex` 最初に見つかった項目の検索文字列の後の項目のパラメーターです。 正確な語句一致の代わりに単語の一部の検索を実行する場合は、使用、 <xref:System.Windows.Forms.ListBox.FindString%2A> メソッドです。  
  
> [!NOTE]
>  下部にある検索が達したら、 <xref:System.Windows.Forms.ListBox>, の先頭から検索を続けますが、 <xref:System.Windows.Forms.ListBox> で指定された項目に戻り、 `startIndex` パラメーター。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.ListBox.FindStringExact%2A> のすべての項目を検索する方法、 <xref:System.Windows.Forms.ListBox> 正確に指定した検索テキストに一致します。 この例のバージョンを使用する、 <xref:System.Windows.Forms.ListBox.FindStringExact%2A> メソッドのすべてのアイテムの継続的な検索を実行する開始検索インデックスを指定することができます、 <xref:System.Windows.Forms.ListBox>です。 タイミングを決定する方法も示します、 <xref:System.Windows.Forms.ListBox.FindStringExact%2A> メソッドを再帰的な検索を防ぐために、項目の一覧の一番下に到達後、一覧の先頭から検索を開始します。 項目が見つかると、 <xref:System.Windows.Forms.ListBox>, を使用して選択しても、 <xref:System.Windows.Forms.ListBox.SetSelected%2A> メソッドです。  
  
 [!code-cpp[ListBox.FindStringExact2\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.FindStringExact2/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.FindStringExact2\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.FindStringExact2/CS/form1.cs#1)]
 [!code-vb[ListBox.FindStringExact2\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.FindStringExact2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> パラメーターが 0 未満かより大きいかの値と等しく、 <see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" /> のプロパティ、 <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> クラスです。</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.FindString(System.String)" />
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public override System.Drawing.Font Font { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Font Font" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.Font" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールによって表示されるテキストのフォントを取得または設定します。</summary>
        <value>コントロールによって表示されるテキストに適用される <see cref="T:System.Drawing.Font" />。 既定値は <see cref="P:System.Windows.Forms.Control.DefaultFont" /> プロパティの値です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの前景色を取得または設定します。</summary>
        <value>コントロールの前景の <see cref="T:System.Drawing.Color" />。 既定値は <see cref="P:System.Windows.Forms.Control.DefaultForeColor" /> プロパティの値です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemHeight">
      <MemberSignature Language="C#" Value="public int GetItemHeight (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetItemHeight(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.GetItemHeight(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">高さが返される項目の 0 から始まるインデックス番号。</param>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> 内の項目の高さを返します。</summary>
        <returns>指定した項目の高さ \(ピクセル単位\)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Windows.Forms.ListBox.DrawMode%2A> にプロパティが設定されていない `DrawMode.OwnerDrawVariable`, 、すべての項目、標準的なために、インデックス パラメーターの値は無視されます <xref:System.Windows.Forms.ListBox> 、同じサイズです。 オーナー描画を使用しているときに、このプロパティを使用して <xref:System.Windows.Forms.ListBox> 内のすべてのアイテムのサイズを決定する、 <xref:System.Windows.Forms.ListBox>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定した値、 <paramref name="index" /> パラメーターが 0 未満か、項目数より大きい。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetItemRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetItemRectangle (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetItemRectangle(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.GetItemRectangle(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">項目の外接する四角形が取得するの 0 から始まるインデックス。</param>
        <summary>内の項目の外接する四角形を返す、 <see cref="T:System.Windows.Forms.ListBox" />です。</summary>
        <returns>A <see cref="T:System.Drawing.Rectangle" /> を表す、指定した項目の外接する四角形。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 項目が指定されている場合、 `index` パラメーターが表示されていない、このメソッドによって返された四角形は、コントロールの表示部分を外になります。 このメソッドを使用すると、サイズと、リスト内の項目の位置を決定します。 項目の高さを取得する可変サイズのオーナー描画リスト アイテムを特にを使えば、 <xref:System.Windows.Forms.ListBox.GetItemHeight%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> パラメーターが 0 未満かより大きいかの値と等しく、 <see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" /> のプロパティ、 <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> クラスです。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetScaledBounds">
      <MemberSignature Language="C#" Value="protected override System.Drawing.Rectangle GetScaledBounds (System.Drawing.Rectangle bounds, System.Drawing.SizeF factor, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Drawing.Rectangle GetScaledBounds(valuetype System.Drawing.Rectangle bounds, valuetype System.Drawing.SizeF factor, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="factor" Type="System.Drawing.SizeF" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="bounds">ディスプレイの範囲の取得条件となる領域を指定する <see cref="T:System.Drawing.Rectangle" />。</param>
        <param name="factor">コントロールの境界の高さおよび幅。</param>
        <param name="specified">コントロールのサイズと位置を定義するときに使用するコントロールの境界を指定する <see cref="T:System.Windows.Forms.BoundsSpecified" /> の値の 1 つ。</param>
        <summary>境界を取得、 <see cref="T:System.Windows.Forms.ListBox" /> 規模が拡大します。</summary>
        <returns>コントロールのスケールが設定される境界を表す <see cref="T:System.Drawing.Rectangle" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListBox> クラスのオーバーライド、 <xref:System.Windows.Forms.Control.GetScaledBounds%2A?displayProperty=fullName> メソッドを現在の高さではなく、要求された高さが調整されることを確認します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSelected">
      <MemberSignature Language="C#" Value="public bool GetSelected (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetSelected(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.GetSelected(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">選択されているかどうかを決定する項目の 0 から始まるインデックス。</param>
        <summary>指定した項目が選択されているかどうかを示す値を返します。</summary>
        <returns>
          <see langword="true" /> 指定した項目が現在選択されている場合、 <see cref="T:System.Windows.Forms.ListBox" />。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して、指定した項目が選択されているかどうかをすばやく確認できます。 このメソッドは、特定の操作は、特定の項目を複数選択のときに行われる必要がある場合に便利な <xref:System.Windows.Forms.ListBox> が選択されています。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.ListBox.GetSelected%2A> でアイテムを決定する方法、 <xref:System.Windows.Forms.ListBox> が選択されていない項目を選択し、選択されている項目の選択を解除するために選択します。 またこの例では使用方法を示します、 <xref:System.Windows.Forms.ListBox.SelectionMode%2A> プロパティを有効にする、 <xref:System.Windows.Forms.ListBox> 使用して項目を選択して、1 つ以上、 <xref:System.Windows.Forms.ListBox.Sorted%2A> の項目を並べ替える方法を示すためのプロパティ、 <xref:System.Windows.Forms.ListBox> 自動的にします。 この例では、する必要があります、 <xref:System.Windows.Forms.ListBox>, 、名前付き `listBox1`, 、フォームに追加されて、 `InitializeMyListBox` からこの例で定義されたメソッドが呼び出される、 <xref:System.Windows.Forms.Form.Load> 形式のイベントです。  
  
 [!code-cpp[ListBox.GetSelected\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.GetSelected/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.GetSelected\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.GetSelected/CS/form1.cs#1)]
 [!code-vb[ListBox.GetSelected\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.GetSelected/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> パラメーターが 0 未満かより大きいかの値と等しく、 <see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" /> のプロパティ、 <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> クラスです。</exception>
      </Docs>
    </Member>
    <Member MemberName="HorizontalExtent">
      <MemberSignature Language="C#" Value="public int HorizontalExtent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HorizontalExtent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.HorizontalExtent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または幅を設定するの水平スクロール バー、 <see cref="T:System.Windows.Forms.ListBox" /> スクロールできます。</summary>
        <value>水平スクロール バーでコントロールをスクロールできる幅 \(ピクセル単位\)。 既定値は 0 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティがのみ場合に役立つ値が報告、 <xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A> にプロパティが設定されている `true`します。 場合の幅、 <xref:System.Windows.Forms.ListBox> 内のアイテムを水平方向にスクロール バーの水平のスクロールは、このプロパティの値より小さい、 <xref:System.Windows.Forms.ListBox>です。 場合の幅、 <xref:System.Windows.Forms.ListBox> がこの値以上、水平スクロール バーを非表示にします。 このプロパティの値が動的に更新しない、 <xref:System.Windows.Forms.ListBox>です。 このプロパティは、便利な場合に、項目の <xref:System.Windows.Forms.ListBox> オーナー描画します。 たとえば場合のオーナー描画項目、 <xref:System.Windows.Forms.ListBox> は 200 ピクセルですが、 <xref:System.Windows.Forms.ListBox> 60 ピクセル、 <xref:System.Windows.Forms.ListBox.HorizontalExtent%2A> プロパティは、アイテムの右端をコントロールの可視領域にスクロールするために 200 に設定する必要があります。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A> と <xref:System.Windows.Forms.ListBox.HorizontalExtent%2A> 内のすべての項目テキストを示す水平スクロール バーを表示するプロパティ、 <xref:System.Windows.Forms.ListBox> コントロールです。 また、例では、 <xref:System.Windows.Forms.ListBox.IntegralHeight%2A> いる項目のサイズによって部分的には表示されないようにするプロパティ、 <xref:System.Windows.Forms.ListBox> コントロールです。 この例で必要とする、 <xref:System.Windows.Forms.ListBox> という名前のコントロール `listBox1`, 、フォームに追加されました。  
  
 [!code-cpp[ListView.HorizontalExtent\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.HorizontalExtent/CPP/form1.cpp#1)]
 [!code-csharp[ListView.HorizontalExtent\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.HorizontalExtent/CS/form1.cs#1)]
 [!code-vb[ListView.HorizontalExtent\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.HorizontalExtent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.HorizontalScrollbar" />
      </Docs>
    </Member>
    <Member MemberName="HorizontalScrollbar">
      <MemberSignature Language="C#" Value="public bool HorizontalScrollbar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HorizontalScrollbar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.HorizontalScrollbar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>水平スクロール バーをコントロールに表示するかどうかを示す値を取得または設定します。</summary>
        <value>
          <see langword="true" /> コントロールに水平スクロール バーを表示するにはそれ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A> プロパティを決定するかどうか、 <xref:System.Windows.Forms.ListBox> 水平のスクロールを表示する必要がある場合のバー内のアイテムの幅、 <xref:System.Windows.Forms.ListBox> コントロールの右端を超えることはできます。 このプロパティに設定すると `true`, 、内のアイテムの幅に基づく、スクロール バーが自動的に表示、 <xref:System.Windows.Forms.ListBox>です。 場合、 <xref:System.Windows.Forms.ListBox> オーナー描画 <xref:System.Windows.Forms.ListBox>, 、水平スクロール バーを正しく表示するために設定する必要があります、 <xref:System.Windows.Forms.ListBox.HorizontalExtent%2A> プロパティです。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A> と <xref:System.Windows.Forms.ListBox.HorizontalExtent%2A> 内のすべての項目テキストを示す水平スクロール バーを表示するプロパティ、 <xref:System.Windows.Forms.ListBox> コントロールです。 また、例では、 <xref:System.Windows.Forms.ListBox.IntegralHeight%2A> いる項目のサイズによって部分的には表示されないようにするプロパティ、 <xref:System.Windows.Forms.ListBox> コントロールです。 この例で必要とする、 <xref:System.Windows.Forms.ListBox> という名前のコントロール `listBox1`, 、フォームに追加されました。  
  
 [!code-cpp[ListView.HorizontalExtent\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.HorizontalExtent/CPP/form1.cpp#1)]
 [!code-csharp[ListView.HorizontalExtent\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.HorizontalExtent/CS/form1.cs#1)]
 [!code-vb[ListView.HorizontalExtent\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.HorizontalExtent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.HorizontalExtent" />
      </Docs>
    </Member>
    <Member MemberName="IndexFromPoint">
      <MemberSignature Language="C#" Value="public int IndexFromPoint (System.Drawing.Point p);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexFromPoint(valuetype System.Drawing.Point p) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.IndexFromPoint(System.Drawing.Point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="p">A <see cref="T:System.Drawing.Point" /> 項目のインデックスを取得するために使用する座標を格納するオブジェクト。</param>
        <summary>指定した座標にある項目の 0 から始まるインデックス番号を返します。</summary>
        <returns>指定した座標にある項目の 0 から始まるインデックス返します <see langword="ListBox.NoMatches" /> 一致が見つからない場合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドでは、コントロール内で特定の場所にある項目を確認することができます。 このメソッドを使用するには、ユーザーを右クリックしたときに選択されたリスト内でアイテムを決定する、 <xref:System.Windows.Forms.ListBox>です。 カーソルの位置を決定しに渡される、 `p` のパラメーター、 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> 、ユーザーが項目を決定する方法をマウスを右クリックします。 タスクと特定の項目に基づく機能を提供するユーザーに、ショートカット メニューを表示できます。  
  
   
  
## 例  
 次のコード例を使用して、ドラッグ アンド ドロップ操作を実行する方法を示しています、 <xref:System.Windows.Forms.ListBox> コントロールにドロップするアイテムを含む、 <xref:System.Windows.Forms.RichTextBox> コントロールです。 フォームのセットのコンス トラクター、 <xref:System.Windows.Forms.RichTextBox.AllowDrop%2A> プロパティを `true` で発生するドラッグ アンド ドロップ操作を有効にする、 <xref:System.Windows.Forms.RichTextBox>です。 例では、 <xref:System.Windows.Forms.Control.MouseDown> のイベント、 <xref:System.Windows.Forms.ListBox> を呼び出すことによって、ドラッグ操作を開始する、 <xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドです。 例では、 <xref:System.Windows.Forms.Control.DragEnter> に項目をドラッグしている場合に、 <xref:System.Windows.Forms.RichTextBox> は有効なデータ型です。<xref:System.Windows.Forms.Control.DragDrop> イベントにドラッグされるアイテムの実際の削除を実行する、 <xref:System.Windows.Forms.RichTextBox> 内の現在のカーソル位置にあるコントロール、 <xref:System.Windows.Forms.RichTextBox>です。 この例で必要とする、 <xref:System.Windows.Forms.Control.DragDrop> と <xref:System.Windows.Forms.Control.DragEnter> の例で定義されたイベント ハンドラーにイベントが接続されました。  
  
 [!code-cpp[RichTextBox.AllowDrop\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.AllowDrop/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.AllowDrop\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.AllowDrop/CS/form1.cs#1)]
 [!code-vb[RichTextBox.AllowDrop\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.AllowDrop/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexFromPoint">
      <MemberSignature Language="C#" Value="public int IndexFromPoint (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexFromPoint(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.IndexFromPoint(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">検索する位置の x 座標。</param>
        <param name="y">検索する位置の y 座標。</param>
        <summary>指定した座標にある項目の 0 から始まるインデックス番号を返します。</summary>
        <returns>指定した座標にある項目の 0 から始まるインデックス返します <see langword="ListBox.NoMatches" /> 一致が見つからない場合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドでは、コントロール内の特定の位置にある項目を特定することができます。 このメソッドを使用するには、ユーザーを右クリックしたときに選択されたリスト内でアイテムを決定する、 <xref:System.Windows.Forms.ListBox>です。 カーソルの位置を決定しに渡される、 `x` と `y` のパラメーター、 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> 、ユーザーが項目を決定する方法をマウスを右クリックします。 タスクと特定の項目に基づく機能を提供するユーザーに、ショートカット メニューを表示できます。  
  
   
  
## 例  
 次のコード例を使用して、ドラッグ アンド ドロップ操作を実行する方法を示しています、 <xref:System.Windows.Forms.ListBox> コントロールにドロップするアイテムを含む、 <xref:System.Windows.Forms.RichTextBox> コントロールです。 フォームのセットのコンス トラクター、 <xref:System.Windows.Forms.RichTextBox.AllowDrop%2A> プロパティを `true` で発生するドラッグ アンド ドロップ操作を有効にする、 <xref:System.Windows.Forms.RichTextBox>です。 例では、 <xref:System.Windows.Forms.Control.MouseDown> のイベント、 <xref:System.Windows.Forms.ListBox> を呼び出すことによって、ドラッグ操作を開始する、 <xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッドです。 例では、 <xref:System.Windows.Forms.Control.DragEnter> に項目をドラッグしている場合に、 <xref:System.Windows.Forms.RichTextBox> は有効なデータ型です。<xref:System.Windows.Forms.Control.DragDrop> イベントにドラッグされるアイテムの実際の削除を実行する、 <xref:System.Windows.Forms.RichTextBox> 内の現在のカーソル位置にあるコントロール、 <xref:System.Windows.Forms.RichTextBox>です。 この例で必要とする、 <xref:System.Windows.Forms.Control.DragDrop> と <xref:System.Windows.Forms.Control.DragEnter> の例で定義されたイベント ハンドラーにイベントが接続されました。  
  
 [!code-cpp[RichTextBox.AllowDrop\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.AllowDrop/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.AllowDrop\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.AllowDrop/CS/form1.cs#1)]
 [!code-vb[RichTextBox.AllowDrop\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.AllowDrop/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntegralHeight">
      <MemberSignature Language="C#" Value="public bool IntegralHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IntegralHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.IntegralHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>一部の項目しか表示されない状況を避けるために、コントロールのサイズを変更するかどうかを示す値を取得または設定します。</summary>
        <value>
          <see langword="true" /> it に一部の項目が表示されない場合はそのため、コントロールのサイズ変更それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティに設定すると `true`, 、項目が部分的に表示されないようにするコントロールが自動的にサイズ変更します。 元のサイズを維持する場合、 <xref:System.Windows.Forms.ListBox> にこのプロパティを設定する、フォームの領域の要件に基づき、 `false`です。  
  
 既定では、 <xref:System.Windows.Forms.ListBox> と <xref:System.Windows.Forms.CheckedListBox> サイズにできるため、全体の項目のみが表示されます。 場合は、 <xref:System.Windows.Forms.ListBox> または <xref:System.Windows.Forms.CheckedListBox> ドッキング領域がいっぱいにする次のように設定します。 <xref:System.Windows.Forms.ListBox.IntegralHeight%2A> に `false`します。 これにより、領域がいっぱいにするコントロールが、最後の項目が完全に表示されません。  
  
 場合、 <xref:System.Windows.Forms.ListBox> すべての項目が含まれていないこのプロパティは影響を与えません。  
  
> [!NOTE]
>  整数の高さがの高さに基づく、 <xref:System.Windows.Forms.ListBox>, 、クライアント領域の高さではなく。 その結果、ときに、 <xref:System.Windows.Forms.ListBox.IntegralHeight%2A> プロパティが設定されて `true`, 、項目も部分的に表示できるかどうか、スクロール バーが表示されます。  
  
> [!NOTE]
>  場合、 <xref:System.Windows.Forms.ListBox.DrawMode%2A> にプロパティが設定されている `DrawMode.OwnerDrawVariable`, 、このプロパティは影響を与えません。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A> と <xref:System.Windows.Forms.ListBox.HorizontalExtent%2A> 内のすべての項目テキストを示す水平スクロール バーを表示するプロパティ、 <xref:System.Windows.Forms.ListBox> コントロールです。 また、例では、 <xref:System.Windows.Forms.ListBox.IntegralHeight%2A> いる項目のサイズによって部分的には表示されないようにするプロパティ、 <xref:System.Windows.Forms.ListBox> コントロールです。 この例で必要とする、 <xref:System.Windows.Forms.ListBox> という名前のコントロール `listBox1`, 、フォームに追加されました。  
  
 [!code-cpp[ListView.HorizontalExtent\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.HorizontalExtent/CPP/form1.cpp#1)]
 [!code-csharp[ListView.HorizontalExtent\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.HorizontalExtent/CS/form1.cs#1)]
 [!code-vb[ListView.HorizontalExtent\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.HorizontalExtent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.DrawMode" />
      </Docs>
    </Member>
    <Member MemberName="ItemHeight">
      <MemberSignature Language="C#" Value="public virtual int ItemHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ItemHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ItemHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(13)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定内の項目の高さ、 <see cref="T:System.Windows.Forms.ListBox" />です。</summary>
        <value>コントロール内の項目の高さ \(ピクセル単位\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、 <xref:System.Windows.Forms.ListBox.DrawMode%2A> にプロパティが設定されている `DrawMode.OwnerDrawFixed`, 、すべての項目を同じ高さがあります。 ときに、 <xref:System.Windows.Forms.ListBox.DrawMode%2A> にプロパティが設定されている `DrawMode.OwnerDrawVariable`, 、 <xref:System.Windows.Forms.ListBox.ItemHeight%2A> プロパティに追加された各項目の高さを指定する、 <xref:System.Windows.Forms.ListBox>です。 オーナー描画のリスト内の各項目が別の高さを持てないためにを使用して、 <xref:System.Windows.Forms.ListBox.GetItemHeight%2A> の特定の項目の高さを取得するメソッド、 <xref:System.Windows.Forms.ListBox>です。 使用する場合、 <xref:System.Windows.Forms.ListBox.ItemHeight%2A> プロパティを <xref:System.Windows.Forms.ListBox> 変数の高さの項目をこのプロパティは、コントロール内の最初の項目の高さを返します。  
  
 最大の高さ、 <xref:System.Windows.Forms.ListBox> 項目は 255 ピクセルです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.Windows.Forms.ListBox.ItemHeight" /> プロパティが 0 または 255 個を超えるピクセルより低く設定されました。</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.GetItemHeight(System.Int32)" />
        <altmember cref="P:System.Windows.Forms.ListBox.DrawMode" />
        <altmember cref="E:System.Windows.Forms.ListBox.MeasureItem" />
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListBox.ObjectCollection Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListBox/ObjectCollection Items" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.Items" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ListControlStringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+ObjectCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>項目を取得、 <see cref="T:System.Windows.Forms.ListBox" />です。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> の項目を表す、 <see cref="T:System.Windows.Forms.ListBox" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティに格納されている項目のリストへの参照を取得すると、 <xref:System.Windows.Forms.ListBox>です。 この参照を持つ項目を追加、アイテムを削除でき、コレクション内の項目の数を取得できます。 項目のコレクションで実行できるタスクの詳細については、次を参照してください。、 <xref:System.Windows.Forms.ListBox.ObjectCollection> クラスのリファレンス トピックです。  
  
 項目を操作することも、 <xref:System.Windows.Forms.ListBox> を使用して、 <xref:System.Windows.Forms.ListControl.DataSource%2A> プロパティです。 使用する場合、 <xref:System.Windows.Forms.ListControl.DataSource%2A> に項目を追加するプロパティ、 <xref:System.Windows.Forms.ListBox>, 、内の項目を表示する、 <xref:System.Windows.Forms.ListBox> を使用して、 <xref:System.Windows.Forms.ListBox.Items%2A> プロパティが追加または削除できない項目のメソッドを使用してリストから、 <xref:System.Windows.Forms.ListBox.ObjectCollection>です。  
  
   
  
## 例  
 次のコード例では、作成、 <xref:System.Windows.Forms.ListBox> コントロールの列に複数の項目を表示し、複数の項目がコントロールのリストで選択されていることができます。 この例のコードに 50 個の項目の追加、 <xref:System.Windows.Forms.ListBox> を使用して、 <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> のメソッド、 <xref:System.Windows.Forms.ListBox.ObjectCollection> を使用して、一覧から項目を 3 つのクラスと、選択、 <xref:System.Windows.Forms.ListBox.SetSelected%2A> メソッドです。 コードからの値を表示、 <xref:System.Windows.Forms.ListBox.SelectedObjectCollection> コレクション \(を通じて、 <xref:System.Windows.Forms.ListBox.SelectedItems%2A> プロパティ\) および <xref:System.Windows.Forms.ListBox.SelectedIndexCollection> \(を通じて、 <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> プロパティ\)。 この例では、コードにあるし、それがから呼び出される、 <xref:System.Windows.Forms.Form>です。  
  
 [!code-cpp[Classic ListBox Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListBox.ObjectCollection" />
      </Docs>
    </Member>
    <Member MemberName="MeasureItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MeasureItemEventHandler MeasureItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MeasureItemEventHandler MeasureItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.MeasureItem" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MeasureItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>オーナー描画するときに発生 <see cref="T:System.Windows.Forms.ListBox" /> を作成し、リスト項目のサイズを決定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 項目になりますで描画する前にサイズを指定するには、このイベントのイベント ハンドラーを作成することができます、 <xref:System.Windows.Forms.ListBox.DrawItem> イベントです。 イベントは、いつ発生するか、 <xref:System.Windows.Forms.ListBox.DrawMode%2A> にプロパティが設定されている <xref:System.Windows.Forms.DrawMode.OwnerDrawVariable>します。  
  
 有効な最大の高さ、 <xref:System.Windows.Forms.ListBox> 項目は 255 ピクセルです。 設定、 <xref:System.Windows.Forms.MeasureItemEventArgs.ItemHeight%2A> のプロパティ、 <xref:System.Windows.Forms.MeasureItemEventArgs> 予期しない結果が生じるこのイベントを処理する場合は 255 より大きい値にします。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、オーナー描画を示しています <xref:System.Windows.Forms.ListBox> を設定して、 <xref:System.Windows.Forms.ListBox.DrawMode%2A> プロパティを <xref:System.Windows.Forms.DrawMode.OwnerDrawVariable> と処理、 <xref:System.Windows.Forms.ListBox.DrawItem> と <xref:System.Windows.Forms.ListBox.MeasureItem> イベントです。 設定も紹介しています、 <xref:System.Windows.Forms.ListBox.BorderStyle%2A> と <xref:System.Windows.Forms.ListBox.ScrollAlwaysVisible%2A> プロパティとを使用して、 <xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A> メソッドです。  
  
 この例を実行するインポートの空のフォームに貼り付ける、 <xref:System.Drawing> 名前空間および <xref:System.Windows.Forms> 名前空間。 呼び出す `InitializeOwnerDrawnListBox` フォームのコンス トラクターからまたは <xref:System.Windows.Forms.Form.Load> イベント処理メソッドです。  
  
 [!code-cpp[System.Windows.Forms.ListBoxExample\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListBoxExample\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBoxExample\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.ItemHeight" />
      </Docs>
    </Member>
    <Member MemberName="MouseClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.MouseClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがクリックしたときに発生、 <see cref="T:System.Windows.Forms.ListBox" /> コントロールがマウス ポインターを使用します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiColumn">
      <MemberSignature Language="C#" Value="public bool MultiColumn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MultiColumn" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.MultiColumn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはを示す値を設定するかどうか、 <see cref="T:System.Windows.Forms.ListBox" /> 複数の列をサポートしています。</summary>
        <value>
          <see langword="true" /> 場合、 <see cref="T:System.Windows.Forms.ListBox" /> 複数の列をサポートしています。 そうしないと、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 複数列 <xref:System.Windows.Forms.ListBox> 項目、垂直方向のスクロールが不要に必要な数の列に配置します。 ユーザーは、キーボードを使用して、現在表示されていない列に移動します。 設定、 <xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A> プロパティを `true` ユーザーの可視領域に現在表示されていない列にスクロールすることができる水平スクロール バーを表示する、 <xref:System.Windows.Forms.ListBox>です。 値、 <xref:System.Windows.Forms.ListBox.ColumnWidth%2A> プロパティは、各列の幅を決定します。  
  
   
  
## 例  
 次のコード例は、単純な 2 つの列を示します <xref:System.Windows.Forms.ListBox>します。  
  
 [!code-csharp[System.Windows.Forms.ListBox.MultiColumn\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBox.MultiColumn/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBox.MultiColumn\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBox.MultiColumn/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">複数列 <see cref="T:System.Windows.Forms.ListBox" /> 可変サイズの高さを持つことはできません。</exception>
        <altmember cref="P:System.Windows.Forms.ListBox.HorizontalScrollbar" />
        <altmember cref="P:System.Windows.Forms.ListBox.ColumnWidth" />
      </Docs>
    </Member>
    <Member MemberName="NoMatches">
      <MemberSignature Language="C#" Value="public const int NoMatches = -1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 NoMatches = (-1)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ListBox.NoMatches" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary>検索中に一致する値が見つからなかったことを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この定数はによって返される、 <xref:System.Windows.Forms.ListBox.FindString%2A>, 、<xref:System.Windows.Forms.ListBox.FindStringExact%2A>, 、および <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> メソッドの検索に一致する値が見つからない場合。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnChangeUICues">
      <MemberSignature Language="C#" Value="protected override void OnChangeUICues (System.Windows.Forms.UICuesEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnChangeUICues(class System.Windows.Forms.UICuesEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.UICuesEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.UICuesEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.ChangeUICues" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDataSourceChanged">
      <MemberSignature Language="C#" Value="protected override void OnDataSourceChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDataSourceChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnDataSourceChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.ListControl.DataSourceChanged" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDisplayMemberChanged">
      <MemberSignature Language="C#" Value="protected override void OnDisplayMemberChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDisplayMemberChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnDisplayMemberChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.ListControl.DisplayMemberChanged" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDrawItem">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawItem (System.Windows.Forms.DrawItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawItem(class System.Windows.Forms.DrawItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DrawItemEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.ListBox.DrawItem" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.ListBox.OnDrawItem%2A> メソッドでは、派生クラスでデリゲートを結び付けずに、イベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例は、オーナー描画を作成する方法を示します <xref:System.Windows.Forms.ListBox> 項目。 コードを使用して、 <xref:System.Windows.Forms.ListBox.DrawMode%2A> 描画された項目を修正することを指定するプロパティのサイズと <xref:System.Windows.Forms.ListBox.DrawItem> に各項目の描画を実行するイベント、 <xref:System.Windows.Forms.ListBox>です。 プロパティとメソッドのコード例を使用して、 <xref:System.Windows.Forms.DrawItemEventArgs> クラスは、項目を描画するイベント ハンドラーをパラメーターとして渡します。 この例では、する必要があります、 <xref:System.Windows.Forms.ListBox> というコントロール `listBox1` フォームに追加されて、 <xref:System.Windows.Forms.ListBox.DrawItem> のコード例で定義されているイベント ハンドラーでイベントを処理します。 例では項目に追加されている必要があります、 <xref:System.Windows.Forms.ListBox> その順序で"Apple"、「オレンジ」および「プラム」のテキストを使用します。  
  
 [!code-csharp[ListBox.DrawMode\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.DrawMode/CS/form1.cs#1)]
 [!code-vb[ListBox.DrawMode\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.DrawMode/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.ListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.ListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListBox.DrawItem" />
      </Docs>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected override void OnFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnFontChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.FontChanged" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnHandleCreated(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>ウィンドウ ハンドルが作成されたときにそのことを示して、列幅などの特性を設定できるようにします。 クラスの継承を呼び出す必要があります <see langword="base.OnHandleCreated" />します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleDestroyed">
      <MemberSignature Language="C#" Value="protected override void OnHandleDestroyed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleDestroyed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnHandleDestroyed(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>項目が正しく設定および消去されるようオーバーライドされています。 継承コントロールを呼び出す必要があります <see langword="base.OnHandleDestroyed" />します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMeasureItem">
      <MemberSignature Language="C#" Value="protected virtual void OnMeasureItem (System.Windows.Forms.MeasureItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMeasureItem(class System.Windows.Forms.MeasureItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MeasureItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.MeasureItemEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.ListBox.MeasureItem" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.ListBox.OnMeasureItem%2A> メソッドでは、派生クラスでデリゲートを結び付けずに、イベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.ListBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.ListBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListBox.MeasureItem" />
      </Docs>
    </Member>
    <Member MemberName="OnParentChanged">
      <MemberSignature Language="C#" Value="protected override void OnParentChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnParentChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnParentChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.ParentChanged" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnResize">
      <MemberSignature Language="C#" Value="protected override void OnResize (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnResize(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnResize(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.Resize" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSelectedIndexChanged">
      <MemberSignature Language="C#" Value="protected override void OnSelectedIndexChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnSelectedIndexChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnSelectedIndexChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.ListControl.SelectedValueChanged" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSelectedValueChanged">
      <MemberSignature Language="C#" Value="protected override void OnSelectedValueChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnSelectedValueChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnSelectedValueChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.ListControl.SelectedValueChanged" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.Padding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このクラスでは、このプロパティは使用されません。</summary>
        <value>
          <see cref="T:System.Windows.Forms.Padding" /> 値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスでは、このプロパティは使用されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaddingChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PaddingChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PaddingChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.PaddingChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.ListBox.Padding" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Paint">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.PaintEventHandler Paint;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.PaintEventHandler Paint" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.Paint" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PaintEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに、 <see cref="T:System.Windows.Forms.ListBox" /> コントロールを描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスでは、このイベントは使用されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredHeight">
      <MemberSignature Language="C#" Value="public int PreferredHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PreferredHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.PreferredHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>すべてのアイテムの高さの合計を取得、 <see cref="T:System.Windows.Forms.ListBox" />です。</summary>
        <value>コントロール内のすべての項目を組み合わせた高さ \(ピクセル単位\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティでは、高さを決定することができますが、 <xref:System.Windows.Forms.ListBox> サイズを調整できない、リスト内の利用可能なすべての項目を表示するために、および垂直スクロール バーが表示されないようにする必要があります。 場合内の項目の金額、 <xref:System.Windows.Forms.ListBox> が多くの値を使用してコントロールをサイズ変更、 <xref:System.Windows.Forms.ListBox.PreferredHeight%2A> プロパティが発生する可能性があります、 <xref:System.Windows.Forms.ListBox> サイズ指定をフォームのクライアント領域外にまたは <xref:System.Windows.Forms.ListBox> コンテナーです。  
  
   
  
## 例  
 次のコード例を設定する方法を示しています、 <xref:System.Windows.Forms.Control.Size%2A> のプロパティ、 <xref:System.Windows.Forms.ListBox> の値に基づいて、 <xref:System.Windows.Forms.ListBox.PreferredHeight%2A> プロパティのすべてのアイテムを表示するために、 <xref:System.Windows.Forms.ListBox> スクロール バーを使用しません。 この例で必要とする、 <xref:System.Windows.Forms.ListBox> という名前のコントロール `listBox1`, 、フォームに追加されました。  
  
 [!code-cpp[ListBox.PreferredHeight\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.PreferredHeight/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.PreferredHeight\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.PreferredHeight/CS/form1.cs#1)]
 [!code-vb[ListBox.PreferredHeight\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.PreferredHeight/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Height" />
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public override void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.Refresh" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>強制的に、コントロールがクライアント領域を無効化し、直後にそのコントロール自体とその子コントロールを再描画するようにします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshItem">
      <MemberSignature Language="C#" Value="protected override void RefreshItem (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RefreshItem(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.RefreshItem(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">更新する要素の、0 から始まるインデックス。</param>
        <summary>指定したインデックスにある項目を更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Windows.Forms.ListControl.DisplayMember%2A> プロパティ セットに割り当てられているデータ ソースのプロパティは、 <xref:System.Windows.Forms.ListControl.DisplayMember%2A> 、変更を使用して、 <xref:System.Windows.Forms.ListBox.RefreshItem%2A> の値を更新する方法、 <xref:System.Windows.Forms.ListBox> コントロールです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshItems">
      <MemberSignature Language="C#" Value="protected override void RefreshItems ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RefreshItems() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.RefreshItems" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>すべてを更新 <see cref="T:System.Windows.Forms.ListBox" /> アイテムし、それらの新しい文字列を取得します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RescaleConstantsForDpi">
      <MemberSignature Language="C#" Value="protected override void RescaleConstantsForDpi (int deviceDpiOld, int deviceDpiNew);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RescaleConstantsForDpi(int32 deviceDpiOld, int32 deviceDpiNew) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.RescaleConstantsForDpi(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deviceDpiOld" Type="System.Int32" />
        <Parameter Name="deviceDpiNew" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="deviceDpiOld">変更前の DPI 値。</param>
        <param name="deviceDpiNew">変更後の DPI 値。</param>
        <summary>DPI の変更が発生したときに、コントロールの再スケーリングの定数を提供します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetBackColor">
      <MemberSignature Language="C#" Value="public override void ResetBackColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ResetBackColor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ResetBackColor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.BackColor" /> プロパティを既定値にリセットします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetForeColor">
      <MemberSignature Language="C#" Value="public override void ResetForeColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ResetForeColor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ResetForeColor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.ForeColor" /> プロパティを既定値にリセットします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.RightToLeft RightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RightToLeft RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.RightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RightToLeft</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールがテキストを右から左に表示するかどうかを示す値を取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.RightToLeft" /> 値のいずれか。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、右から左に記述されている言語をサポートするメニューを使用します。 このプロパティに設定すると `true`, 、項目のテキストが右から左から右メソッドに既定ではなく左に表示されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleControl">
      <MemberSignature Language="C#" Value="protected override void ScaleControl (System.Drawing.SizeF factor, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ScaleControl(valuetype System.Drawing.SizeF factor, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factor" Type="System.Drawing.SizeF" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="factor">コントロールの高さと幅のスケールを設定するときのファクター。</param>
        <param name="specified">コントロールのサイズと位置を定義するときに使用するコントロールの境界を指定する <see cref="T:System.Windows.Forms.BoundsSpecified" /> 値。</param>
        <summary>コントロールの位置、サイズ、埋め込み、およびマージンのスケールを設定します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollAlwaysVisible">
      <MemberSignature Language="C#" Value="public bool ScrollAlwaysVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ScrollAlwaysVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ScrollAlwaysVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>垂直スクロール バーを常に表示するかどうかを示す値を取得または設定します。</summary>
        <value>
          <see langword="true" /> 場合は、垂直スクロール バーは、常に表示される必要があります。それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListBox.ScrollAlwaysVisible%2A> プロパティは、垂直スクロール バーが常に表示されるかどうかを示す場合でも内の項目数、 <xref:System.Windows.Forms.ListBox> 垂直スクロール バーを表示するは必要ありません。 既定では、 <xref:System.Windows.Forms.ListBox> のみを表示することを保証するための十分な項目があるときに垂直スクロール バーが表示されます。 複数列の <xref:System.Windows.Forms.ListBox>, 、 <xref:System.Windows.Forms.ListBox.ScrollAlwaysVisible%2A> プロパティは、水平スクロール バーが表示されることを示します。 複数列のこのプロパティの値に関係なく、垂直スクロール バーが表示されません <xref:System.Windows.Forms.ListBox>します。  
  
   
  
## 例  
 次のコード例では、オーナー描画を示しています <xref:System.Windows.Forms.ListBox> を設定して、 <xref:System.Windows.Forms.ListBox.DrawMode%2A> プロパティを `OwnerDrawVariable` 値と処理、 <xref:System.Windows.Forms.ListBox.DrawItem> と <xref:System.Windows.Forms.ListBox.MeasureItem> イベントです。 設定も紹介しています、 <xref:System.Windows.Forms.ListBox.BorderStyle%2A> と <xref:System.Windows.Forms.ListBox.ScrollAlwaysVisible%2A> プロパティとを使用して、 <xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A> メソッドです。  
  
 この例を実行するインポートの空のフォームに貼り付ける、 <xref:System.Drawing> 名前空間および <xref:System.Windows.Forms> 名前空間。 呼び出す `InitializeOwnerDrawnListBox` フォームのコンス トラクターからまたは <xref:System.Windows.Forms.Form.Load> イベント処理メソッドです。  
  
 [!code-cpp[System.Windows.Forms.ListBoxExample\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListBoxExample\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBoxExample\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.HorizontalScrollbar" />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndex">
      <MemberSignature Language="C#" Value="public override int SelectedIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectedIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.SelectedIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定で現在選択されている項目の 0 から始まるインデックス、 <see cref="T:System.Windows.Forms.ListBox" />です。</summary>
        <value>現在選択されている項目の 0 から始まるインデックス番号。 項目が選択されていない場合は、値 \-1 が返されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 標準の <xref:System.Windows.Forms.ListBox>, 、このプロパティを使用するをで選択されている項目のインデックスを判断、 <xref:System.Windows.Forms.ListBox>です。 場合、 <xref:System.Windows.Forms.ListBox.SelectionMode%2A> のプロパティ、 <xref:System.Windows.Forms.ListBox> に設定されている `SelectionMode.MultiSimple` または `SelectionMode.MultiExtended` \(複数選択を示す <xref:System.Windows.Forms.ListBox>\) リストに複数の項目が選択されていると、このプロパティは、選択したアイテムにインデックスを返すことができます。  
  
 複数選択で選択された項目をすべてのインデックスを含むコレクションを取得する <xref:System.Windows.Forms.ListBox>, を使用して、 <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> プロパティです。 現在選択されている項目を取得する場合、 <xref:System.Windows.Forms.ListBox>, を使用して、 <xref:System.Windows.Forms.ListBox.SelectedItem%2A> プロパティです。 さらに、使用、 <xref:System.Windows.Forms.ListBox.SelectedItems%2A> 複数選択で選択されたすべての項目を取得するプロパティ <xref:System.Windows.Forms.ListBox>します。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.ListBox.SelectedIndex%2A> プロパティを <xref:System.Windows.Forms.ListBox.TopIndex%2A> プロパティの表示領域内の項目の一覧の上部に移動して、現在選択されている項目を <xref:System.Windows.Forms.ListBox>です。 さらに例を使用して項目を削除する方法、 <xref:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt%2A> のメソッド、 <xref:System.Windows.Forms.ListBox.ObjectCollection?displayProperty=fullName> クラス、およびすべての選択を使用して項目をクリアする方法、 <xref:System.Windows.Forms.ListBox.ClearSelected%2A> メソッドです。 コードは最初現在選択されている項目を移動、 <xref:System.Windows.Forms.ListBox> 、一覧の上部にします。 コードは、現在選択されている項目の前にすべての項目を削除し、すべての選択項目をクリア、 <xref:System.Windows.Forms.ListBox>です。 この例で必要とする、 <xref:System.Windows.Forms.ListBox> 、フォームに追加された項目を含むで選択した項目が現在は、 <xref:System.Windows.Forms.ListBox>です。  
  
 [!code-cpp[ListBox.SelectedIndex\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndex/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndex\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndex/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndex\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndex/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">割り当てられた値が\-1 よりまたはより大きいか項目カウントと同じです。</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Windows.Forms.ListBox.SelectionMode" /> プロパティが <see langword="None" /> に設定されている。</exception>
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedIndices" />
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedItems" />
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedItem" />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndexChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SelectedIndexChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SelectedIndexChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.SelectedIndexChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに、 <see cref="P:System.Windows.Forms.ListBox.SelectedIndex" /> プロパティまたは <see cref="P:System.Windows.Forms.ListBox.SelectedIndices" /> コレクションが変更されました。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 タイミングを決定するには、このイベントのイベント ハンドラーを作成するで選択されたインデックス、 <xref:System.Windows.Forms.ListBox> が変更されました。 これは、役立ちますの現在の選択に基づく他のコントロールで情報を表示する必要がある場合、 <xref:System.Windows.Forms.ListBox>です。 このイベントのイベント ハンドラーを使用して、他のコントロールで情報を読み込むことができます。  
  
 場合、 <xref:System.Windows.Forms.ListBox.SelectionMode%2A> にプロパティが設定されている <xref:System.Windows.Forms.SelectionMode.MultiSimple?displayProperty=fullName> または <xref:System.Windows.Forms.SelectionMode.MultiExtended?displayProperty=fullName>, に変更を加えた、 <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> 、選択範囲から削除した項目を含むコレクションには、このイベントが発生します。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.ListBox.SelectedIndexChanged> イベントを検索して別の項目を選択する <xref:System.Windows.Forms.ListBox> コントロールです。 例では、 <xref:System.Windows.Forms.ListBox.SelectedIndexChanged> タイミングを決定するイベントで選択した項目、 <xref:System.Windows.Forms.ListBox> を変更します。 コード例を使用して項目のテキストを読み取って、 <xref:System.Windows.Forms.ListBox.SelectedItem%2A> プロパティや呼び出しを <xref:System.Windows.Forms.ListBox.FindString%2A> 、別のメソッド <xref:System.Windows.Forms.ListBox> によって返されるテキストを使用して <xref:System.Windows.Forms.ListBox.SelectedItem%2A> 最初 <xref:System.Windows.Forms.ListBox>します。 もう一方で、項目が見つかった場合 <xref:System.Windows.Forms.ListBox>, 、項目が選択されています。 この例には、2 つが必要です <xref:System.Windows.Forms.ListBox> という名前のコントロール `listBox1` と `listBox2`, 、フォームに追加された両方 <xref:System.Windows.Forms.ListBox> コントロールが同じ項目が含まれています。 また、例ではの例で定義されているイベント処理メソッドに接続されている必要があります、 <xref:System.Windows.Forms.ListBox.SelectedIndexChanged> のイベント `listBox1`です。  
  
 [!code-cpp[ListBox.SelectedIndexChanged\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndexChanged\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndexChanged\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedIndex" />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndices">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListBox.SelectedIndexCollection SelectedIndices { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListBox/SelectedIndexCollection SelectedIndices" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.SelectedIndices" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+SelectedIndexCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在選択されているすべての項目の 0 から始まるインデックスを含むコレクションを取得、 <see cref="T:System.Windows.Forms.ListBox" />です。</summary>
        <value>A <see cref="T:System.Windows.Forms.ListBox.SelectedIndexCollection" /> コントロールで現在選択されている項目のインデックスを格納します。 項目が選択されていない場合、空 <see cref="T:System.Windows.Forms.ListBox.SelectedIndexCollection" /> が返されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 複数選択の <xref:System.Windows.Forms.ListBox>, 、このプロパティで選択されているすべての項目のインデックスを含むコレクションを取得する、 <xref:System.Windows.Forms.ListBox>です。 単一選択の <xref:System.Windows.Forms.ListBox>, 、このプロパティの唯一の選択した項目のインデックスを含む 1 つの要素を含むコレクションを取得する、 <xref:System.Windows.Forms.ListBox>です。 コレクションのアイテムを操作する方法の詳細については、次を参照してください。 <xref:System.Windows.Forms.ListBox.SelectedIndexCollection>します。  
  
 <xref:System.Windows.Forms.ListBox> クラスには、さまざまな選択した項目を参照する方法が用意されています。 使用する代わりに、 <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> 単一選択で現在選択されている項目のインデックス位置を取得するプロパティ <xref:System.Windows.Forms.ListBox>, 、使用することができます、 <xref:System.Windows.Forms.ListBox.SelectedIndex%2A> プロパティです。 現在選択されている項目を取得する場合、 <xref:System.Windows.Forms.ListBox>, 、項目のインデックス位置ではなくを使用して、 <xref:System.Windows.Forms.ListBox.SelectedItem%2A> プロパティです。 さらに、使用、 <xref:System.Windows.Forms.ListBox.SelectedItems%2A> 複数選択で選択されたすべての項目を取得する場合はプロパティ <xref:System.Windows.Forms.ListBox>します。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.ListBox.FindString%2A> の項目の検索文字列のすべてのインスタンスを検索する方法、 <xref:System.Windows.Forms.ListBox>です。 この例のバージョンを使用する、 <xref:System.Windows.Forms.ListBox.FindString%2A> メソッドのすべてのアイテムの継続的な検索を実行する開始検索インデックスを指定することができます、 <xref:System.Windows.Forms.ListBox>です。 タイミングを決定する方法も示します、 <xref:System.Windows.Forms.ListBox.FindString%2A> メソッドは再帰的な検索を防止する項目の一覧の一番下に到達後、一覧の一番上から検索を開始します。 項目が見つかると、 <xref:System.Windows.Forms.ListBox>, を使用して選択しても、 <xref:System.Windows.Forms.ListBox.SetSelected%2A> メソッドです。  
  
 [!code-cpp[ListBox.FindString\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.FindString/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.FindString\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.FindString/CS/form1.cs#1)]
 [!code-vb[ListBox.FindString\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.FindString/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedIndex" />
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedItem" />
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedItems" />
      </Docs>
    </Member>
    <Member MemberName="SelectedItem">
      <MemberSignature Language="C#" Value="public object SelectedItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SelectedItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.SelectedItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または現在選択されている項目を設定、 <see cref="T:System.Windows.Forms.ListBox" />です。</summary>
        <value>コントロール内で現在選択されている項目を表すオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 標準の <xref:System.Windows.Forms.ListBox>, 、このプロパティを使用するをで選択されている項目を判断、 <xref:System.Windows.Forms.ListBox>です。 場合、 <xref:System.Windows.Forms.ListBox.SelectionMode%2A> のプロパティ、 <xref:System.Windows.Forms.ListBox> に設定されている `SelectionMode.MultiSimple` または `SelectionMode.MultiExtended` \(複数選択を示す <xref:System.Windows.Forms.ListBox>\) リストに複数の項目が選択されていると、このプロパティは、選択した項目を返すことができます。  
  
 複数選択で選択されているすべての項目を含むコレクションを取得する <xref:System.Windows.Forms.ListBox>, を使用して、 <xref:System.Windows.Forms.ListBox.SelectedItems%2A> プロパティです。 現在選択されている項目のインデックス位置を取得するかどうか、 <xref:System.Windows.Forms.ListBox>, を使用して、 <xref:System.Windows.Forms.ListBox.SelectedIndex%2A> プロパティです。 さらに、使用、 <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> 複数選択の選択したすべてのインデックスを取得するプロパティ <xref:System.Windows.Forms.ListBox>します。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.ListBox.SelectedIndexChanged> イベントを検索して別の項目を選択する <xref:System.Windows.Forms.ListBox> コントロールです。 例では、 <xref:System.Windows.Forms.ListBox.SelectedIndexChanged> タイミングを決定するイベントで選択した項目、 <xref:System.Windows.Forms.ListBox> を変更します。 コード例を使用して項目のテキストを読み取って、 <xref:System.Windows.Forms.ListBox.SelectedItem%2A> プロパティや呼び出しを <xref:System.Windows.Forms.ListBox.FindString%2A> 、別のメソッド <xref:System.Windows.Forms.ListBox> によって返されるテキストを使用して <xref:System.Windows.Forms.ListBox.SelectedItem%2A> 最初 <xref:System.Windows.Forms.ListBox>します。 もう一方で、項目が見つかった場合 <xref:System.Windows.Forms.ListBox>, 、項目が選択されています。 この例には、2 つが必要です <xref:System.Windows.Forms.ListBox> という名前のコントロール `listBox1` と `listBox2`, 、フォームに追加された両方 <xref:System.Windows.Forms.ListBox> コントロールが同じ項目が含まれています。 また、例ではの例で定義されているイベント処理メソッドに接続されている必要があります、 <xref:System.Windows.Forms.ListBox.SelectedIndexChanged> のイベント `listBox1`です。  
  
 [!code-cpp[ListBox.SelectedIndexChanged\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndexChanged\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndexChanged\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedItems">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListBox.SelectedObjectCollection SelectedItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListBox/SelectedObjectCollection SelectedItems" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.SelectedItems" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+SelectedObjectCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在選択されている項目を含むコレクションを取得、 <see cref="T:System.Windows.Forms.ListBox" />です。</summary>
        <value>A <see cref="T:System.Windows.Forms.ListBox.SelectedObjectCollection" /> コントロールで現在選択されている項目を格納します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 複数選択の <xref:System.Windows.Forms.ListBox>, 、このプロパティで選択されているすべての項目を含むコレクションを返します、 <xref:System.Windows.Forms.ListBox>です。 単一選択の <xref:System.Windows.Forms.ListBox>, 、このプロパティの唯一の選択した項目を含む 1 つの要素を含むコレクションを取得する、 <xref:System.Windows.Forms.ListBox>です。 コレクションのアイテムを操作する方法の詳細については、次を参照してください。 <xref:System.Windows.Forms.ListBox.SelectedObjectCollection>します。  
  
 <xref:System.Windows.Forms.ListBox> クラスには、さまざまな選択した項目を参照する方法が用意されています。 使用する代わりに、 <xref:System.Windows.Forms.ListBox.SelectedItems%2A> 単一選択で現在選択されている項目を取得するプロパティ <xref:System.Windows.Forms.ListBox>, 、使用することができます、 <xref:System.Windows.Forms.ListBox.SelectedItem%2A> プロパティです。 現在選択されている項目のインデックス位置を取得する場合、 <xref:System.Windows.Forms.ListBox>, 、項目自体ではなくを使用して、 <xref:System.Windows.Forms.ListBox.SelectedIndex%2A> プロパティです。 さらに、使用、 <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> 複数選択で選択されているすべての項目のインデックス位置を取得する場合はプロパティ <xref:System.Windows.Forms.ListBox>します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionMode">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.SelectionMode SelectionMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.SelectionMode SelectionMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.SelectionMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.SelectionMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定で項目を選択する方法、 <see cref="T:System.Windows.Forms.ListBox" />です。</summary>
        <value>
          <see cref="T:System.Windows.Forms.SelectionMode" /> 値のいずれか。 既定値は、<see langword="SelectionMode.One" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListBox.SelectionMode%2A> プロパティでは、項目の数を確認できます。、 <xref:System.Windows.Forms.ListBox> ユーザーが同時に選択し、ユーザーが複数選択を許可する方法です。 ときに、 <xref:System.Windows.Forms.ListBox.SelectionMode%2A> にプロパティが設定されている `SelectionMode.MultiExtended`, shift キーを押すと、マウスのクリックしてやキーを押してシフト、および現在のアイテムに、以前に選択した項目から選択範囲を拡大、方向キー \(上向き矢印、下矢印、左矢印および右矢印\) のいずれかです。 CTRL キーを押し、マウスをクリックして、選択またはリスト内の項目の選択を解除します。 プロパティを設定すると `SelectionMode.MultiSimple`, マウス クリックして、またはスペースバーを押して選択またはリスト内の項目を選択解除します。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.ListBox.GetSelected%2A> でアイテムを決定する方法、 <xref:System.Windows.Forms.ListBox> が選択されていない項目を選択し、選択されている項目の選択を解除するために選択します。 またこの例では使用方法を示します、 <xref:System.Windows.Forms.ListBox.SelectionMode%2A> プロパティを有効にする、 <xref:System.Windows.Forms.ListBox> 使用して項目を選択して、1 つ以上、 <xref:System.Windows.Forms.ListBox.Sorted%2A> の項目を並べ替える方法を示すためのプロパティ、 <xref:System.Windows.Forms.ListBox> 自動的にします。 この例では、する必要があります、 <xref:System.Windows.Forms.ListBox>, 、名前付き `listBox1`, 、フォームに追加されて、 `InitializeMyListBox` からこの例で定義されたメソッドが呼び出される、 <xref:System.Windows.Forms.Form.Load> 形式のイベントです。  
  
 [!code-cpp[ListBox.GetSelected\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.GetSelected/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.GetSelected\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.GetSelected/CS/form1.cs#1)]
 [!code-vb[ListBox.GetSelected\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.GetSelected/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">割り当てられた値は、のいずれかではありません、 <see cref="T:System.Windows.Forms.SelectionMode" /> 値。</exception>
        <altmember cref="T:System.Windows.Forms.SelectionMode" />
      </Docs>
    </Member>
    <Member MemberName="SetBoundsCore">
      <MemberSignature Language="C#" Value="protected override void SetBoundsCore (int x, int y, int width, int height, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetBoundsCore(int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="x">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Left" /> プロパティ値。</param>
        <param name="y">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Top" /> プロパティ値。</param>
        <param name="width">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Width" /> プロパティ値。</param>
        <param name="height">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Height" /> プロパティ値。</param>
        <param name="specified">
          <see cref="T:System.Windows.Forms.BoundsSpecified" /> 値のビットごとの組み合わせ。</param>
        <summary>指定した範囲の設定、 <see cref="T:System.Windows.Forms.ListBox" /> コントロールです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 高さ、 <xref:System.Windows.Forms.ListBox> コントロールが増加し、複数の減少、 <xref:System.Windows.Forms.ListBox.ItemHeight%2A> プロパティです。 高さがの倍数ではない数 <xref:System.Windows.Forms.ListBox.ItemHeight%2A>, の高さ、 <xref:System.Windows.Forms.ListBox> 複数である高さより小さい最大によって変更されます。  
  
 通常、その現在の値を使用して、指定したパラメーターに含まれていない境界に対応するパラメーターが渡されます。 たとえば、 `height`, 、`width`, 、または `x` または `y` のプロパティ、 <xref:System.Windows.Forms.Control.Location%2A> プロパティは、コントロールの現在のインスタンスへの参照を使用して渡すことができます。 ただしで渡されるすべての値が受け入れられ、コントロールに適用します。  
  
 `specified` パラメーターは、コントロールの要素を表す <xref:System.Windows.Forms.Control.Bounds%2A> アプリケーションによって変更します。 変更する場合など、 <xref:System.Windows.Forms.Control.Size%2A> 、コントロールの `specified` パラメーターの値が <xref:System.Windows.Forms.BoundsSpecified.Size>です。 ただし場合、 <xref:System.Windows.Forms.Control.Size%2A> への応答で調整、 <xref:System.Windows.Forms.Control.Dock%2A> プロパティが設定されている、 `specified` パラメーターの値が <xref:System.Windows.Forms.BoundsSpecified.None>です。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.ListBox.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.ListBox.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /> method to force the bounds of the control to change. Derived classes can add size restrictions to the <see cref="M:System.Windows.Forms.ListBox.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /> method.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SetItemCore">
      <MemberSignature Language="C#" Value="protected override void SetItemCore (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetItemCore(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.SetItemCore(System.Int32,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">オブジェクトの配列インデックス。</param>
        <param name="value">オブジェクト。</param>
        <summary>派生クラスで、指定したインデックスを使用してオブジェクトを設定します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetItemsCore">
      <MemberSignature Language="C#" Value="protected override void SetItemsCore (System.Collections.IList value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetItemsCore(class System.Collections.IList value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.SetItemsCore(System.Collections.IList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Collections.IList" />
      </Parameters>
      <Docs>
        <param name="value">コントロールに挿入するオブジェクトの配列。</param>
        <summary>内容をクリア、 <see cref="T:System.Windows.Forms.ListBox" /> し、指定した項目をコントロールに追加します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSelected">
      <MemberSignature Language="C#" Value="public void SetSelected (int index, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSelected(int32 index, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.SetSelected(System.Int32,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="index">内の項目の 0 から始まるインデックス、 <see cref="T:System.Windows.Forms.ListBox" /> を選択または選択をクリアします。</param>
        <param name="value">
          <see langword="true" /> 指定した項目を選択するにはそれ以外の場合、 <see langword="false" />です。</param>
        <summary>オンまたはオフに指定された項目を選択、 <see cref="T:System.Windows.Forms.ListBox" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを使用するには複数選択項目の選択範囲を設定する <xref:System.Windows.Forms.ListBox>です。 単一選択の項目を選択する <xref:System.Windows.Forms.ListBox>, を使用して、 <xref:System.Windows.Forms.ListBox.SelectedIndex%2A> プロパティです。  
  
   
  
## 例  
 次のコード例では、作成、 <xref:System.Windows.Forms.ListBox> コントロールの列に複数の項目を表示し、複数の項目がコントロールのリストで選択されていることができます。 この例のコードに 50 個の項目の追加、 <xref:System.Windows.Forms.ListBox> を使用して、 <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> のメソッド、 <xref:System.Windows.Forms.ListBox.ObjectCollection> を使用して、一覧から項目を 3 つのクラスと、選択、 <xref:System.Windows.Forms.ListBox.SetSelected%2A> メソッドです。 コードからの値を表示、 <xref:System.Windows.Forms.ListBox.SelectedObjectCollection> コレクション \(を通じて、 <xref:System.Windows.Forms.ListBox.SelectedItems%2A> プロパティ\) および <xref:System.Windows.Forms.ListBox.SelectedIndexCollection> \(を通じて、 <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> プロパティ\)。 この例では、コードにあるし、それがから呼び出される、 <xref:System.Windows.Forms.Form>です。  
  
 [!code-cpp[Classic ListBox Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定したインデックスは、有効な値の範囲外でした。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.ListBox.SelectionMode" /> プロパティに設定されました <see langword="None" />します。</exception>
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedIndex" />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="protected virtual void Sort ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Sort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.Sort" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>内の項目を並べ替えて、 <see cref="T:System.Windows.Forms.ListBox" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListBox.Sort%2A> 場合に、それ自体への各項目を追加するコレクションを強制的に、 <xref:System.Windows.Forms.ListBox.Sorted%2A> プロパティは `true`です。 各項目は、正しい位置に挿入されます。  
  
   
  
## 例  
 次のコード例では、使用方法を示します、 <xref:System.Windows.Forms.ListBox.Sort%2A> メソッドです。 継承するこの例は、 <xref:System.Windows.Forms.ListBox> クラスをオーバーライドする、 <xref:System.Windows.Forms.ListBox.Sort%2A> ユーザー定義の並べ替えを実行する派生クラスでメソッドです。 実行には、この例は、空のフォームで、次のコードを貼り付けます。  
  
 [!code-cpp[System.Windows.Forms.ListBoxSort\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxSort/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListBoxSort\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxSort/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBoxSort\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBoxSort/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>You can override this method in your derived class to provide your own sorting routine. Access the results of the overridden <see cref="M:System.Windows.Forms.ListBox.Sort" /> method by setting the <see cref="P:System.Windows.Forms.ListBox.Sorted" /> property to <see langword="true" />. When adding items to a <see cref="T:System.Windows.Forms.ListBox" />, it is more efficient to sort the items first and then add new items.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.ListBox.Sorted" />
      </Docs>
    </Member>
    <Member MemberName="Sorted">
      <MemberSignature Language="C#" Value="public bool Sorted { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Sorted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.Sorted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を示す値かどうかの項目、 <see cref="T:System.Windows.Forms.ListBox" /> はアルファベット順に並べ替えられます。</summary>
        <value>
          <see langword="true" /> コントロール内の項目が並べ替えられている場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Windows.Forms.ListBox.Sorted%2A> プロパティを自動的に並べ替えるには文字列でアルファベット順に、 <xref:System.Windows.Forms.ListBox>です。 項目が追加されると、並べ替えに <xref:System.Windows.Forms.ListBox>, 、アイテムが並べ替えられたリスト内の適切な場所に移動します。 項目を追加するときに、 <xref:System.Windows.Forms.ListBox>, 、最初の項目を並べ替えるし、新しい項目を追加する方が効率的です。  
  
 A <xref:System.Windows.Forms.ListBox> とその <xref:System.Windows.Forms.ListBox.Sorted%2A> に設定 `true` を使用してデータにバインドされていません、 <xref:System.Windows.Forms.ListControl.DataSource%2A> プロパティです。 バインドでデータを並べ替えられて表示 <xref:System.Windows.Forms.ListBox>, 、並べ替えをサポートするデータ ソースにバインドし、並べ替え、データ ソースがある必要があります。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.ListBox.GetSelected%2A> でアイテムを決定する方法、 <xref:System.Windows.Forms.ListBox> が選択されていない項目を選択し、選択されている項目の選択を解除するために選択します。 またこの例では使用方法を示します、 <xref:System.Windows.Forms.ListBox.SelectionMode%2A> プロパティを有効にする、 <xref:System.Windows.Forms.ListBox> 使用して項目を選択して、1 つ以上、 <xref:System.Windows.Forms.ListBox.Sorted%2A> の項目を並べ替える方法を示すためのプロパティ、 <xref:System.Windows.Forms.ListBox> 自動的にします。 この例では、する必要があります、 <xref:System.Windows.Forms.ListBox>, 、名前付き `listBox1`, 、フォームに追加されて、 `InitializeMyListBox` からこの例で定義されたメソッドが呼び出される、 <xref:System.Windows.Forms.Form.Load> 形式のイベントです。  
  
 [!code-cpp[ListBox.GetSelected\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.GetSelected/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.GetSelected\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.GetSelected/CS/form1.cs#1)]
 [!code-vb[ListBox.GetSelected\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.GetSelected/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはで現在選択されている項目のテキストの検索、 <see cref="T:System.Windows.Forms.ListBox" />です。</summary>
        <value>コントロール内で現在選択されている項目のテキスト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティの値が文字列値に設定されている場合、 <xref:System.Windows.Forms.ListBox> 内で項目を検索、 <xref:System.Windows.Forms.ListBox> を指定した文字列と一致する項目を選択して、します。 このプロパティを使用してで現在選択されているアイテムを決定する、 <xref:System.Windows.Forms.ListBox>です。 場合、 <xref:System.Windows.Forms.ListBox.SelectionMode%2A> のプロパティ、 <xref:System.Windows.Forms.ListBox> に設定されている `SelectionMode.MultiExtended`, 、このプロパティは、最初に選択した項目のテキストを返します。 場合、 <xref:System.Windows.Forms.ListBox.SelectionMode%2A> のプロパティ、 <xref:System.Windows.Forms.ListBox> に設定されていない `SelectionMode.None`, 、このプロパティは、最初に選択した項目のテキストを返します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.TextChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに、 <see cref="P:System.Windows.Forms.ListBox.Text" /> プロパティを変更します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TopIndex">
      <MemberSignature Language="C#" Value="public int TopIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TopIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.TopIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>インデックスで最初に表示される項目の取得または設定、 <see cref="T:System.Windows.Forms.ListBox" />です。</summary>
        <value>コントロールに最初に表示される項目の 0 から始まるインデックス番号。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 最初に、インデックス位置に項目がゼロ \(0\) の可視領域の上部にある、 <xref:System.Windows.Forms.ListBox>です。 場合の内容、 <xref:System.Windows.Forms.ListBox> スクロールされたコントロールの表示領域の上部にある別の項目があります。 このプロパティを使用するを内のインデックスを取得、 <xref:System.Windows.Forms.ListBox.ObjectCollection> の <xref:System.Windows.Forms.ListBox> コントロールの可視領域の上部にある現在位置にある項目のです。 このプロパティを使用して、コントロールの可視領域の上部にある一覧に項目を配置することもします。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.ListBox.SelectedIndex%2A> プロパティを <xref:System.Windows.Forms.ListBox.TopIndex%2A> プロパティの表示領域内の項目の一覧の上部に移動して、現在選択されている項目を <xref:System.Windows.Forms.ListBox>です。 さらに例を使用して項目を削除する方法、 <xref:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt%2A> のメソッド、 <xref:System.Windows.Forms.ListBox.ObjectCollection?displayProperty=fullName> クラス、およびすべての選択を使用して項目をクリアする方法、 <xref:System.Windows.Forms.ListBox.ClearSelected%2A> メソッドです。 コードは最初現在選択されている項目を移動、 <xref:System.Windows.Forms.ListBox> 、一覧の上部にします。 コードは、現在選択されている項目の前にすべての項目を削除し、すべての選択項目をクリア、 <xref:System.Windows.Forms.ListBox>です。 この例で必要とする、 <xref:System.Windows.Forms.ListBox> 、フォームに追加された項目を含むで選択した項目が現在は、 <xref:System.Windows.Forms.ListBox>です。  
  
 [!code-cpp[ListBox.SelectedIndex\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndex/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndex\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndex/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndex\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndex/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> の文字列形式を返します。</summary>
        <returns>コントロールを示す文字列を入力、内の項目の数、 <see cref="T:System.Windows.Forms.ListBox" /> コントロール、および最初の項目の Text プロパティ、 <see cref="T:System.Windows.Forms.ListBox" />, カウントがない場合、0 です。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseCustomTabOffsets">
      <MemberSignature Language="C#" Value="public bool UseCustomTabOffsets { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseCustomTabOffsets" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.UseCustomTabOffsets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を示す値かどうか、 <see cref="T:System.Windows.Forms.ListBox" /> を認識およびを使用してその文字列を描画するときにタブ文字を展開、 <see cref="P:System.Windows.Forms.ListBox.CustomTabOffsets" /> 整数の配列。</summary>
        <value>
          <see langword="true" /> 場合、 <see cref="T:System.Windows.Forms.ListBox" /> を認識およびタブ文字を展開しない場合は、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.CustomTabOffsets" />
      </Docs>
    </Member>
    <Member MemberName="UseTabStops">
      <MemberSignature Language="C#" Value="public bool UseTabStops { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseTabStops" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.UseTabStops" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはを示す値を設定するかどうか、 <see cref="T:System.Windows.Forms.ListBox" /> を認識してその文字列を描画するときにタブ文字を展開します。</summary>
        <value>
          <see langword="true" /> コントロールがタブ文字を展開する場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例では、作成、 <xref:System.Windows.Forms.ListBox> タブ文字で項目を表示します。  
  
 [!code-cpp[ListBox.UseTabStops\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.UseTabStops/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.UseTabStops\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.UseTabStops/CS/form1.cs#1)]
 [!code-vb[ListBox.UseTabStops\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.UseTabStops/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for operating with unmanaged code. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="WmReflectCommand">
      <MemberSignature Language="C#" Value="protected virtual void WmReflectCommand (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WmReflectCommand(valuetype System.Windows.Forms.Message m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.WmReflectCommand(System.Windows.Forms.Message@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">
          <see cref="T:System.Windows.Forms.Message" /> に送信されるトップレベル ウィンドウ、 <see cref="T:System.Windows.Forms.ListBox" /> コントロールです。</param>
        <summary>コマンド メッセージを処理、 <see cref="T:System.Windows.Forms.ListView" /> コントロールがトップレベル ウィンドウから受信します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.WndProc(System.Windows.Forms.Message@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">Windows メッセージ オブジェクト。</param>
        <summary>リストのウィンドウ プロシージャです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 クラスを継承する追加の機能を追加するときにオーバーライドできますが、呼び出す必要があります、 <xref:System.Windows.Forms.ListBox.WndProc%2A> リストは引き続き正常に機能をできるようにする基本クラスのメソッドです。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for operating with unmanaged code. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="IndexFromPoint">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した座標にある項目の 0 から始まるインデックス番号を返します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="FindString">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>最初の項目を検索、 <see cref="T:System.Windows.Forms.ListBox" /> が、指定した文字列で始まります。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="FindStringExact">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>最初の項目を検索、 <see cref="T:System.Windows.Forms.ListBox" /> 、指定した文字列を正確に一致します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>