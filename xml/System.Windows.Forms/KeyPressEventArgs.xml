<Type Name="KeyPressEventArgs" FullName="System.Windows.Forms.KeyPressEventArgs">
  <TypeSignature Language="C#" Value="public class KeyPressEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyPressEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.KeyPressEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see cref="E:System.Windows.Forms.Control.KeyPress" /> イベントのデータを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Windows.Forms.KeyPressEventArgs> キーを押したときに作成される文字を指定します。 たとえば、ユーザーが押したとき shift キーを押しながら K、 <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> プロパティは、大文字の K を返します。  
  
 A <xref:System.Windows.Forms.Control.KeyPress> イベント キーを押したときに発生します。 密接に関連する 2 つのイベント、 <xref:System.Windows.Forms.Control.KeyPress> がイベント <xref:System.Windows.Forms.Control.KeyUp> と <xref:System.Windows.Forms.Control.KeyDown>です。<xref:System.Windows.Forms.Control.KeyDown> イベントの前に各 <xref:System.Windows.Forms.Control.KeyPress> 、キーを押したときにイベントと <xref:System.Windows.Forms.Control.KeyUp> イベント キーを離したときに発生します。 ユーザーが、キーを押したときに重複する <xref:System.Windows.Forms.Control.KeyDown> と <xref:System.Windows.Forms.Control.KeyPress> 、文字が繰り返されるたびにイベントが発生しました。 1 つ <xref:System.Windows.Forms.Control.KeyUp> リリース時にイベントを生成します。  
  
 各 <xref:System.Windows.Forms.Control.KeyPress> 、イベント、 <xref:System.Windows.Forms.KeyPressEventArgs> が渡されます。 A <xref:System.Windows.Forms.KeyEventArgs> それぞれで渡される <xref:System.Windows.Forms.Control.KeyDown> と <xref:System.Windows.Forms.Control.KeyUp> イベントです。 A <xref:System.Windows.Forms.KeyEventArgs> 別のキーと修飾キー \(ctrl キーを押し、shift キー、または alt キー\) が押されたかどうかを指定します。 \(この修飾子の詳細についてからも取得できます、 <xref:System.Windows.Forms.Control.ModifierKeys%2A> のプロパティ、 <xref:System.Windows.Forms.Control> クラスです\)。  
  
 設定 <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> に `true` を取り消す、 `KeyPress` イベントです。 これは、キーを押すの処理とコントロールを保持します。  
  
> [!NOTE]
>  一部のコントロール上で特定のキー ストロークの処理は <xref:System.Windows.Forms.Control.KeyDown>です。 たとえば、 <xref:System.Windows.Forms.RichTextBox> する前に Enter キーを処理 <xref:System.Windows.Forms.Control.KeyPress> が呼び出されます。 このような場合はキャンセルできません、 <xref:System.Windows.Forms.Control.KeyPress> イベントからキー ストロークを取り消す必要があると <xref:System.Windows.Forms.Control.KeyDown> 代わりにします。  
  
 イベント モデルについては、次を参照してください。 [Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次の例を使用して、 <xref:System.Windows.Forms.KeyPressEventArgs> キーを押すと、キーをカウントし、各キーを押す、結果を表示します。<xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> これ以上のオペレーティング システムを保持する場合は true に設定キーを処理します。 この例では使用して、フォーム、 <xref:System.Windows.Forms.TextBox> 配置します。  
  
 [!code-cpp[Classic KeyPressEventArgs Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CPP/source.cpp#1)]
 [!code-csharp[Classic KeyPressEventArgs Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic KeyPressEventArgs Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/VB/source.vb#1)]  
  
 このクラスの新しいインスタンスを作成する必要があります。 また、イベント ハンドラーを設定する必要があります。 この設定は、クラスのコンス トラクターで行うことができます。  
  
 [!code-cpp[Classic KeyPressEventArgs Example\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic KeyPressEventArgs Example\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CS/source2.cs#2)]
 [!code-vb[Classic KeyPressEventArgs Example\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/VB/source2.vb#2)]  
  
 コントロールで指定されたイベントを発生するとは、接続されているメソッドが呼び出され、アプリケーションは、イベントに応答コードを実行することができます。  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
    <altmember cref="T:System.Windows.Forms.KeyEventArgs" />
    <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
    <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
    <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyPressEventArgs (char keyChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char keyChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.KeyPressEventArgs.#ctor(System.Char)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="keyChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="keyChar">ユーザーが押されたキーに対応する ASCII 文字。</param>
        <summary>
          <see cref="T:System.Windows.Forms.KeyPressEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Windows.Forms.Control.ModifierKeys%2A?displayProperty=fullName> 修飾子キーの現在の状態を取得するプロパティです。  
  
   
  
## 例  
 次の例では、SHIFT キーの現在の状態を示すメッセージ ボックスが表示されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Handled">
      <MemberSignature Language="C#" Value="public bool Handled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Handled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyPressEventArgs.Handled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはを示す値を設定するかどうか、 <see cref="E:System.Windows.Forms.Control.KeyPress" /> イベントが処理します。</summary>
        <value>
          <see langword="true" /> イベントが処理された場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントが処理されない場合は、既定の処理用のオペレーティング システムに送信されます。 設定 <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> に `true` を取り消す、 `KeyPress` イベントです。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Windows.Forms.TextBox> コントロールです。`keypressed` メソッドの使用方法、 <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> 、ENTER キーを押したかどうかを確認するプロパティです。 ENTER キーが押された場合、 <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> にプロパティが設定されている `true`, 、処理は、イベントを示します。  
  
 [!code-cpp[KeyPressEventArgs\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyPressEventArgs/CPP/form1.cpp#1)]
 [!code-csharp[KeyPressEventArgs\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyPressEventArgs/CS/form1.cs#1)]
 [!code-vb[KeyPressEventArgs\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyPressEventArgs/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
      </Docs>
    </Member>
    <Member MemberName="KeyChar">
      <MemberSignature Language="C#" Value="public char KeyChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char KeyChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyPressEventArgs.KeyChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>押されたキーに対応する文字を取得または設定します。</summary>
        <value>作成される ASCII 文字。 たとえば、ユーザーが Shift キーを押しながら K キーを押した場合、このプロパティは大文字の K を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> サンプル キーストロークを実行時に、実行時の特殊な状況でのキーボード操作を変更するプロパティです。 たとえば、使用 <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> に郵便番号に設定した場合は、数値以外のキープレスを無効にする、データの入力フィールドに大文字にすべてのアルファベット キープレスを変更するか、キーボード、または特定のキーの組み合わせのキーの入力デバイスを監視します。  
  
 取得または次のキーを設定することができます。  
  
-   a ~ z、A ~ Z。  
  
-   CTRL キーをします。  
  
-   区切り記号。  
  
-   数字キーの両方とキーボードのテンキーの上部にします。  
  
-   入力します。  
  
 取得または次のキーを設定することはできません。  
  
-   Tab キー。  
  
-   挿入および削除します。  
  
-   ホームです。  
  
-   終了します。  
  
-   PAGEUP、PAGEDOWN します。  
  
-   F1、F2 キー。  
  
-   ALT キーです。  
  
-   方向キー  
  
> [!NOTE]
>  上記で説明した以外の文字のキーのいずれかを検出する方法については、次を参照してください。、 <xref:System.Windows.Forms.KeyEventArgs> クラスです。  
  
-  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Windows.Forms.TextBox> コントロールです。`keypressed` メソッドの使用方法、 <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> 、ENTER キーが押されたかどうかを確認するプロパティです。 ENTER キーが押された場合、 <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> にプロパティが設定されている `true`, 、処理は、イベントを示します。  
  
 [!code-cpp[KeyPressEventArgs\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyPressEventArgs/CPP/form1.cpp#1)]
 [!code-csharp[KeyPressEventArgs\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyPressEventArgs/CS/form1.cs#1)]
 [!code-vb[KeyPressEventArgs\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyPressEventArgs/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
        <altmember cref="M:System.Windows.Forms.Control.IsInputChar(System.Char)" />
      </Docs>
    </Member>
  </Members>
</Type>