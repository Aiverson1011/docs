<Type Name="BindingSource" FullName="System.Windows.Forms.BindingSource">
  <TypeSignature Language="C#" Value="public class BindingSource : System.ComponentModel.Component, System.Collections.IList, System.ComponentModel.IBindingListView, System.ComponentModel.ICancelAddNew, System.ComponentModel.ISupportInitializeNotification, System.ComponentModel.ITypedList, System.Windows.Forms.ICurrencyManagerProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BindingSource extends System.ComponentModel.Component implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList, class System.ComponentModel.IBindingList, class System.ComponentModel.IBindingListView, class System.ComponentModel.ICancelAddNew, class System.ComponentModel.ISupportInitialize, class System.ComponentModel.ISupportInitializeNotification, class System.ComponentModel.ITypedList, class System.Windows.Forms.ICurrencyManagerProvider" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.BindingSource" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.IBindingListView</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ICancelAddNew</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitializeNotification</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ITypedList</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Forms.ICurrencyManagerProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ComplexBindingProperties("DataSource", "DataMember")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("CurrentChanged")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("DataSource")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.BindingSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>フォームのデータ ソースをカプセル化します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.BindingSource> コンポーネントは、さまざまな目的を提供します。 最初に、通貨管理、変更通知、および Windows フォーム コントロールとデータ ソースの間には、その他のサービスを提供することによってデータをフォーム上のバインド コントロールを簡単になります。 これを行うにアタッチすることにより、 <xref:System.Windows.Forms.BindingSource> コンポーネントを使用してデータ ソースに、 <xref:System.Windows.Forms.BindingSource.DataSource%2A> プロパティです。 複合バインディングのシナリオで必要に応じて設定できます、 <xref:System.Windows.Forms.BindingSource.DataMember%2A> プロパティを特定の列またはデータ ソースの一覧です。 コントロールをバインド、 <xref:System.Windows.Forms.BindingSource>です。 呼び出しにデータを使用して、さらにすべての操作を行う、 <xref:System.Windows.Forms.BindingSource> コンポーネントです。 例については、 <xref:System.Windows.Forms.BindingSource> バインド プロセスを簡略化できるを参照してください [How to: Bind Windows Forms Controls to DbNull Database Values](http://msdn.microsoft.com/ja-jp/96494e6f-5f40-4f83-af97-bbd7192c2af8) と [How to: Handle Errors and Exceptions that Occur with Databinding](http://msdn.microsoft.com/ja-jp/eddc5bad-9513-47df-ab28-f02d8dff7892)です。 移動およびデータ ソースの更新がメソッドを通じてなど実行 <xref:System.Windows.Forms.BindingSource.MoveNext%2A>, 、<xref:System.Windows.Forms.BindingSource.MoveLast%2A>, 、および <xref:System.Windows.Forms.BindingSource.Remove%2A>です。 によって並べ替えとフィルター処理などの操作が処理される、 <xref:System.Windows.Forms.BindingSource.Sort%2A> と <xref:System.Windows.Forms.BindingSource.Filter%2A> プロパティです。 詳細について、並べ替えおよびフィルタ リングを使用して、 <xref:System.Windows.Forms.BindingSource>, を参照してください [How to: Sort and Filter ADO.NET Data with the Windows Forms BindingSource Component](http://msdn.microsoft.com/ja-jp/6c206daf-d706-4602-9dbe-435343052063)します。  
  
 さらに、 <xref:System.Windows.Forms.BindingSource> コンポーネントは、厳密に型指定のデータ ソースとして使用できます。 通常、基になるデータ ソースの種類は、次のメカニズムのいずれかを通じて固定されます。  
  
-   使用して、 <xref:System.Windows.Forms.BindingSource.Add%2A> に項目を追加する方法、 <xref:System.Windows.Forms.BindingSource> コンポーネントです。  
  
-   設定、 <xref:System.Windows.Forms.BindingSource.DataSource%2A> リスト、1 つのオブジェクトまたは型のプロパティです。  
  
 どちらのメカニズムは、厳密に型指定されたリストを作成します。 使用する方法の詳細についての <xref:System.Windows.Forms.BindingSource> 型にバインドするを参照してください。 [How to: Bind a Windows Forms Control to a Type](http://msdn.microsoft.com/ja-jp/94faeebb-d2bc-45d6-86d7-96a42661b43d)します。 使用することも、 <xref:System.Windows.Forms.BindingSource> 、コントロールをファクトリ オブジェクトにバインドします。 この手順の詳細については、「[How to: Bind a Windows Forms Control to a Factory Object](http://msdn.microsoft.com/ja-jp/7d59af89-ff82-41d8-a48a-f1fbae788b0d)」を参照してください。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.BindingSource> ハンドル両方の単純および複雑なデータ ソース、用語集は問題が発生します。 このクラスのドキュメント内でという用語は、 *リスト* ホストされているデータ ソース内のデータ コレクションを参照し、 *項目* 1 つの要素を表します。 機能について説明に関連付けられている複雑なデータ ソースと同じ用語 *テーブル* と *行* 使用されます。  
  
 <xref:System.Windows.Forms.BindingSource> 基になるデータにアクセスするためには、メンバーを提供します。 現在の項目を通じて取得できます、 <xref:System.Windows.Forms.BindingSource.Current%2A> を通じてプロパティ、および全体の一覧を取得できます、 <xref:System.Windows.Forms.BindingSource.List%2A> プロパティです。 現在の項目での編集操作がサポートされている <xref:System.Windows.Forms.BindingSource.Current%2A> と <xref:System.Windows.Forms.BindingSource.RemoveCurrent%2A>, 、<xref:System.Windows.Forms.BindingSource.EndEdit%2A>, 、<xref:System.Windows.Forms.BindingSource.CancelEdit%2A> と <xref:System.Windows.Forms.BindingSource.Add%2A> と <xref:System.Windows.Forms.BindingSource.AddNew%2A> メソッドです。 このクラスなどに、イベントの数を公開、通貨管理は、基になるすべてのデータ ソースの種類の自動的に処理されますが、 <xref:System.Windows.Forms.BindingSource.CurrentItemChanged> と <xref:System.Windows.Forms.BindingSource.DataSourceChanged>, 、カスタマイズ可能にします。  
  
 データ ソースにバインドされている、 <xref:System.Windows.Forms.BindingSource> コンポーネントも移動および管理をすれば、 <xref:System.Windows.Forms.BindingNavigator> リスト内の項目内の移動に関する VCR のようなユーザー インターフェイス \(UI\) を提供するクラス。<xref:System.Windows.Forms.BindingNavigator> バインドできる任意のデータ ソースと統合するに設計されて、 <xref:System.Windows.Forms.BindingSource> を通じてコンポーネント、 <xref:System.Windows.Forms.BindingNavigator.BindingSource%2A?displayProperty=fullName> プロパティです。  
  
 既定のプロパティ、 <xref:System.Windows.Forms.BindingSource> クラスは <xref:System.Windows.Forms.BindingSource.DataSource%2A>です。 既定のイベントは、 <xref:System.Windows.Forms.BindingSource.CurrentChanged>です。  
  
> [!CAUTION]
>  メンバーの多くは、 <xref:System.Windows.Forms.BindingSource> クラスによって表される基底のリストを操作、 <xref:System.Windows.Forms.BindingSource.List%2A> プロパティだけを基になるリストには、その操作を参照してください。 したがって、 <xref:System.Windows.Forms.BindingSource> のカスタム実装にバインドされて <xref:System.Collections.IList>, 、これらのメンバーの正確な動作のクラスのドキュメントで説明した動作が異なる場合があります。 たとえば、 <xref:System.Windows.Forms.BindingSource.RemoveAt%2A> メソッドの呼び出し <xref:System.Collections.IList.RemoveAt%2A?displayProperty=fullName>します。<xref:System.Windows.Forms.BindingSource> ドキュメントについて説明します、 <xref:System.Windows.Forms.BindingSource.RemoveAt%2A> 了解の下のメソッドを <xref:System.Collections.IList.RemoveAt%2A> 、基になるメソッド <xref:System.Collections.IList> が正しく実装されています。  
  
   
  
## 例  
 次のコード例を示しています、 <xref:System.Windows.Forms.ListBox> にバインドされている、 <xref:System.Windows.Forms.BindingSource>です。<xref:System.Windows.Forms.BindingSource> にバインドされて、 <xref:System.ComponentModel.BindingList%601> フォントのリストを格納します。  
  
 [!code-csharp[System.Windows.Forms.BindingSourceAndBindingListOfT\#0](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.BindingSourceAndBindingListOfT/CS/Form1.cs#0)]
 [!code-vb[System.Windows.Forms.BindingSourceAndBindingListOfT\#0](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.BindingSourceAndBindingListOfT/VB/Form1.vb#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.BindingSource" />
    <altmember cref="T:System.Windows.Forms.BindingNavigator" />
    <altmember cref="T:System.Windows.Forms.DataGridView" />
    <altmember cref="T:System.Windows.Forms.CurrencyManager" />
    <altmember cref="T:System.Collections.IList" />
    <altmember cref="T:System.ComponentModel.IBindingList" />
    <altmember cref="T:System.ComponentModel.IEditableObject" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BindingSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Windows.Forms.BindingSource" /> クラスを既定のプロパティ値です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 次の表は、既定値を示しています。 <xref:System.Windows.Forms.BindingSource> このコンス トラクターによって初期化されたプロパティ値です。  
  
|プロパティ|既定値|  
|-----------|---------|  
|<xref:System.Windows.Forms.BindingSource.DataSource%2A>|`null`|  
|<xref:System.Windows.Forms.BindingSource.DataMember%2A>|<xref:System.String.Empty>|  
|<xref:System.Windows.Forms.BindingSource.Sort%2A>|`null`|  
|<xref:System.Windows.Forms.BindingSource.Filter%2A>|`null`|  
|<xref:System.Windows.Forms.BindingSource.RaiseListChangedEvents%2A>|`true`|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.BindingSource.DataSource" />
        <altmember cref="P:System.Windows.Forms.BindingSource.DataMember" />
        <altmember cref="T:System.Windows.Forms.CurrencyManager" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BindingSource (System.ComponentModel.IContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.IContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.#ctor(System.ComponentModel.IContainer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="container" Type="System.ComponentModel.IContainer" />
      </Parameters>
      <Docs>
        <param name="container">
          <see cref="T:System.ComponentModel.IContainer" /> 現在を追加する <see cref="T:System.Windows.Forms.BindingSource" /> にします。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Windows.Forms.BindingSource" /> クラスが強化され、 <see cref="T:System.Windows.Forms.BindingSource" /> 指定されたコンテナーにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターの既定のコンス トラクターを呼び出すし、現在を追加 <xref:System.Windows.Forms.BindingSource> 指定されたコンテナーにします。 それは通常によって使用されないソリューション プログラマが代わりにデザイン時環境の作成者です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BindingSource (object dataSource, string dataMember);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object dataSource, string dataMember) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.#ctor(System.Object,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSource">データ ソース、 <see cref="T:System.Windows.Forms.BindingSource" />です。</param>
        <param name="dataMember">バインド先となるデータ ソース内の特定の列またはリストの名前。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Windows.Forms.BindingSource" /> と、指定されたデータ ソースとデータ メンバーのクラスです。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual int Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.Add(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Object" /> 内部リストに追加します。</param>
        <summary>既存の項目を内部リストに追加します。</summary>
        <returns>位置の 0 から始まるインデックス <paramref name="value" /> によって表される基底のリストに追加された、 <see cref="P:System.Windows.Forms.BindingSource.List" /> プロパティです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.BindingSource.Add%2A> メソッドは、基になるリストへの呼び出し、参照 `Add` メソッドです。  
  
 内部リストには、同じ種類の型を含める必要があります。 場合、 <xref:System.Windows.Forms.BindingSource.DataSource%2A> プロパティが設定されていないし、一覧に追加する最初のオブジェクトがリストの型を定義します。  
  
 このメソッドを生成、 <xref:System.Windows.Forms.BindingSource.ListChanged> イベントです。  
  
   
  
## 例  
 次のコード例を使用する方法、 <xref:System.Windows.Forms.BindingSource.Add%2A> メソッドです。 この例を実行するには、Windows フォームと呼び出しにコードを貼り付けます、 `PopulateBindingSourceWithFonts` フォームのコンス トラクターからのメソッドです。  
  
 [!code-csharp[System.Windows.Forms.BindingSourceMethods\#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.BindingSourceMethods/CS/Form1.cs#6)]
 [!code-vb[System.Windows.Forms.BindingSourceMethods\#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.BindingSourceMethods/VB/Form1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="value" /> 基になるリスト内の既存の項目からの型で異なります。</exception>
        <altmember cref="P:System.Windows.Forms.BindingSource.List" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Position" />
        <altmember cref="M:System.Windows.Forms.BindingSource.AddNew" />
        <altmember cref="M:System.Windows.Forms.BindingSource.Remove(System.Object)" />
        <altmember cref="M:System.Windows.Forms.BindingSource.RemoveCurrent" />
        <altmember cref="M:System.Windows.Forms.BindingSource.Insert(System.Int32,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="AddingNew">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.AddingNewEventHandler AddingNew;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.AddingNewEventHandler AddingNew" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.BindingSource.AddingNew" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AddingNewEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>項目が基底のリストに追加される前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.BindingSource.AddingNew> によって表される基底のリストに新しいオブジェクトが追加される前に、イベントが発生した、 <xref:System.Windows.Forms.BindingSource.List%2A> プロパティです。 後にこのイベントが発行される、 <xref:System.Windows.Forms.BindingSource.AddNew%2A> メソッドが呼び出されると、新しい項目が作成され、基になるリストに追加する前にします。 このイベントを処理することにより、プログラマがカスタム項目の作成を提供できますおよびから派生しなければならない挿入動作せず、 <xref:System.Windows.Forms.BindingSource> クラスです。 これは、イベント ハンドラーを設定して、 <xref:System.ComponentModel.AddingNewEventArgs.NewObject%2A> のプロパティ、 <xref:System.ComponentModel.AddingNewEventArgs?displayProperty=fullName> を新しいアイテムのパラメーターです。 作成された新しいオブジェクト、 <xref:System.Windows.Forms.BindingSource.AddingNew> 、リストに含まれる型と同じ型のイベントがあります。 または、例外が発生します。 設定することはできません、 <xref:System.ComponentModel.AddingNewEventArgs.NewObject%2A> プロパティにバインドされると、 <xref:System.Data.DataView> または <xref:System.Data.DataTable> 新しい追加できないため、 <xref:System.Data.DataRowView> 一覧にします。  
  
 新しい項目のカスタム機能を指定する方法の詳細については、次を参照してください。、 <xref:System.Windows.Forms.BindingSource.AddNew%2A> メソッドです。 イベント処理の詳細については、「[Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Windows.Forms.BindingSource> リストにバインドするコンポーネント、 <xref:System.Windows.Forms.DataGridView> コントロールです。 新しい項目がリストに追加されます、 <xref:System.Windows.Forms.BindingSource.AddingNew> イベント ハンドラーです。 このコード例に示されている例の一部である [How to: Customize Item Addition with the Windows Forms BindingSource](http://msdn.microsoft.com/ja-jp/1aae11fc-6fb2-4cb9-b3d0-e0638fe77ef0)です。  
  
 [!code-cpp[System.Windows.Forms.DataConnector.AddingNew\#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataConnector.AddingNew/CPP/form1.cpp#8)]
 [!code-csharp[System.Windows.Forms.DataConnector.AddingNew\#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataConnector.AddingNew/CS/form1.cs#8)]
 [!code-vb[System.Windows.Forms.DataConnector.AddingNew\#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataConnector.AddingNew/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.ComponentModel.AddingNewEventArgs.NewObject" /> リストに含まれる型と同じ型ではありません。</exception>
        <altmember cref="M:System.Windows.Forms.BindingSource.AddNew" />
        <altmember cref="M:System.Windows.Forms.BindingSource.OnAddingNew(System.ComponentModel.AddingNewEventArgs)" />
        <altmember cref="T:System.ComponentModel.AddingNewEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="AddNew">
      <MemberSignature Language="C#" Value="public virtual object AddNew ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AddNew() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.AddNew" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>基になるリストに新しい項目を追加します。</summary>
        <returns>
          <see cref="T:System.Object" /> が作成され、一覧に追加します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.BindingSource.AddNew%2A> メソッドによって表される基底のリストに新しい項目の追加、 <xref:System.Windows.Forms.BindingSource.List%2A> プロパティです。 このメソッドは、次の一連のアクションを設定します。  
  
1.  <xref:System.Windows.Forms.BindingSource.EndEdit%2A> メソッドがコミットの保留中の編集操作を自動的に呼び出されます。  
  
2.  <xref:System.Windows.Forms.BindingSource.AddingNew> イベントは、自動的に発生します。 このイベントは、新しい項目を作成するプログラムを使用して処理できます。 これは、イベント ハンドラーを設定して、 <xref:System.ComponentModel.AddingNewEventArgs.NewObject%2A> のプロパティ、 <xref:System.ComponentModel.AddingNewEventArgs?displayProperty=fullName> を新しいアイテムのパラメーターです。 作成された新しいオブジェクト、 <xref:System.Windows.Forms.BindingSource.AddingNew> 、リストに含まれる型と同じ型のイベントがあります。 または、例外が発生します。  
  
     場合、 <xref:System.Windows.Forms.BindingSource.AddingNew> イベントが処理されないと、基になるリストが、 <xref:System.ComponentModel.IBindingList>, 、リストの要求が渡され、 <xref:System.ComponentModel.IBindingList.AddNew%2A?displayProperty=fullName> メソッドです。 基になるリストが <xref:System.ComponentModel.IBindingList> でない場合は、既定のパブリック コンストラクターを使用して項目が自動的に作成されます。 いずれの場合は、新しい項目がリストの末尾に追加されます。  
  
3.  新しい項目がすぐにリストに追加、内部データ ソースを実装しない限り、 <xref:System.ComponentModel.IEditableObject> インターフェイスです。 この場合、新しい項目を明示的に呼び出すまではコミットではない <xref:System.Windows.Forms.BindingSource.System%23ComponentModel%23ICancelAddNew%23EndNew%2A> されるか、新しいリスト操作が開始されるまでです。 コミットする前に、新しい項目をロールバックできますを呼び出して <xref:System.Windows.Forms.BindingSource.CancelEdit%2A>, 、その場合、新しい項目は破棄されます。  
  
 このメソッドを生成、 <xref:System.Windows.Forms.BindingSource.ListChanged> イベントです。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Windows.Forms.BindingSource> リストにバインドするコンポーネント、 <xref:System.Windows.Forms.DataGridView> コントロールです。 新しい項目がリストに追加されます、 <xref:System.Windows.Forms.BindingSource.AddingNew> イベント ハンドラーです。 このコード例に示されている例の一部である [How to: Customize Item Addition with the Windows Forms BindingSource](http://msdn.microsoft.com/ja-jp/1aae11fc-6fb2-4cb9-b3d0-e0638fe77ef0)です。  
  
 [!code-cpp[System.Windows.Forms.DataConnector.AddingNew\#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataConnector.AddingNew/CPP/form1.cpp#7)]
 [!code-csharp[System.Windows.Forms.DataConnector.AddingNew\#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataConnector.AddingNew/CS/form1.cs#7)]
 [!code-vb[System.Windows.Forms.DataConnector.AddingNew\#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataConnector.AddingNew/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.BindingSource.AllowNew" /> プロパティが <see langword="false" /> に設定されている。  
  
 または  
  
 現在の項目の種類の既定のパブリック コンス トラクターが見つかりませんでした。</exception>
        <altmember cref="M:System.Windows.Forms.BindingSource.AddNew" />
        <altmember cref="T:System.ComponentModel.AddingNewEventArgs" />
        <altmember cref="E:System.Windows.Forms.BindingSource.AddingNew" />
        <altmember cref="P:System.Windows.Forms.BindingSource.AllowNew" />
        <altmember cref="T:System.ComponentModel.IBindingList" />
      </Docs>
    </Member>
    <Member MemberName="AllowEdit">
      <MemberSignature Language="C#" Value="public virtual bool AllowEdit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowEdit" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingSource.AllowEdit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>基になるリスト内の項目を編集できるかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> リスト項目を編集できます。それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.BindingSource.AllowEdit%2A> プロパティは、通常使用他のコンポーネントが、リスト内の項目の編集ができるかどうかかを決定します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowNew">
      <MemberSignature Language="C#" Value="public virtual bool AllowNew { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowNew" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingSource.AllowNew" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を示す値かどうか、 <see cref="M:System.Windows.Forms.BindingSource.AddNew" /> 、リストに項目を追加するメソッドを使用できます。</summary>
        <value>
          <see langword="true" /> 場合 <see cref="M:System.Windows.Forms.BindingSource.AddNew" /> 、リスト項目を追加するために使用されない場合は、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定値、 <xref:System.Windows.Forms.BindingSource.AllowNew%2A> プロパティは、基になるデータ ソースの種類によって異なります。 基になるリストを実装する場合、 <xref:System.ComponentModel.IBindingList> インターフェイス、このプロパティは、基底のリストにデリゲートされます。 それ以外の場合、このプロパティは返します `false` 基になるリストが次の特徴の値に。  
  
-   固定サイズでによって決定される、 <xref:System.Collections.IList.IsFixedSize%2A?displayProperty=fullName> プロパティです。  
  
-   読み取り専用で、 <xref:System.Collections.IList.IsReadOnly%2A?displayProperty=fullName> プロパティです。  
  
-   アイテムの種類には、既定のコンス トラクターはありません。  
  
> [!NOTE]
>  このプロパティの値を設定すると、getter は不要になった基になるリストへの呼び出しを指します。 代わりに、までに設定されている値を単純に返します、 <xref:System.Windows.Forms.BindingSource.ResetAllowNew%2A> メソッドが呼び出されます。  
  
 このプロパティを生成する設定、 <xref:System.Windows.Forms.BindingSource.ListChanged> イベントと <xref:System.ComponentModel.ListChangedEventArgs.ListChangedType?displayProperty=fullName> に設定 <xref:System.ComponentModel.ListChangedType.Reset?displayProperty=fullName>します。  
  
 設定した場合、 <xref:System.Windows.Forms.BindingSource.AllowNew%2A> プロパティを `true` と基になるリストの種類が既定のコンス トラクターを持たない、行う必要があります、 <xref:System.Windows.Forms.BindingSource.AddingNew> イベントし、適切な型を作成します。  
  
   
  
## 例  
 次のコード例では、使用方法を示します、 <xref:System.Windows.Forms.BindingSource.AllowNew%2A> のプロパティ、 <xref:System.Windows.Forms.BindingSource> コンポーネントに新しい項目を追加するユーザーを許可するように、 <xref:System.Windows.Forms.BindingSource> コンポーネントの一覧を基になります。 このプロパティを設定 `true` バインドされていると、 <xref:System.Windows.Forms.DataGridView> コントロールに新しいレコードの行を表示します。  
  
 [!code-cpp[System.Windows.Forms.DataConnector.ItemChangedEventMode\#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataConnector.ItemChangedEventMode/CPP/form1.cpp#6)]
 [!code-csharp[System.Windows.Forms.DataConnector.ItemChangedEventMode\#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataConnector.ItemChangedEventMode/CS/form1.cs#6)]
 [!code-vb[System.Windows.Forms.DataConnector.ItemChangedEventMode\#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataConnector.ItemChangedEventMode/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このプロパティが <see langword="true" /> によって表される基底のリストの場合、 <see cref="P:System.Windows.Forms.BindingSource.List" /> プロパティが固定サイズまたは読み取り専用です。</exception>
        <exception cref="T:System.MissingMethodException">設定されて <see langword="true" /> と <see cref="E:System.Windows.Forms.BindingSource.AddingNew" /> 基になるリストの種類に既定のコンス トラクターがあるない場合に、イベントが処理されません。</exception>
        <altmember cref="P:System.ComponentModel.AddingNewEventArgs.NewObject" />
        <altmember cref="M:System.Windows.Forms.BindingSource.ResetAllowNew" />
        <altmember cref="P:System.Windows.Forms.BindingSource.List" />
        <altmember cref="P:System.Windows.Forms.BindingSource.AllowEdit" />
        <altmember cref="P:System.Windows.Forms.BindingSource.AllowRemove" />
        <altmember cref="M:System.Windows.Forms.BindingSource.EndEdit" />
        <altmember cref="M:System.Windows.Forms.BindingSource.CancelEdit" />
        <altmember cref="M:System.Windows.Forms.BindingSource.AddNew" />
      </Docs>
    </Member>
    <Member MemberName="AllowRemove">
      <MemberSignature Language="C#" Value="public virtual bool AllowRemove { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowRemove" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingSource.AllowRemove" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>基になるリストから項目を削除できるかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> ボックスの一覧を示すためには、リストから項目を削除します。それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.BindingSource.AllowRemove%2A> プロパティは、通常使用他のコンポーネントが、リスト内の項目の編集ができるかどうかかを決定します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplySort">
      <MemberSignature Language="C#" Value="public virtual void ApplySort (System.ComponentModel.ListSortDescriptionCollection sorts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplySort(class System.ComponentModel.ListSortDescriptionCollection sorts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.ApplySort(System.ComponentModel.ListSortDescriptionCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sorts" Type="System.ComponentModel.ListSortDescriptionCollection" />
      </Parameters>
      <Docs>
        <param name="sorts">A <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> データ ソースに適用する並べ替え記述子を格納します。</param>
        <summary>指定された並べ替えに関する説明に基づいて、データ ソースを並べ替えます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.IBindingListView> 複数列の並べ替えプロパティ記述子と方向のペアのセットとして実装されています。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">データ ソースが、 <see cref="T:System.ComponentModel.IBindingListView" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ApplySort">
      <MemberSignature Language="C#" Value="public virtual void ApplySort (System.ComponentModel.PropertyDescriptor property, System.ComponentModel.ListSortDirection sort);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplySort(class System.ComponentModel.PropertyDescriptor property, valuetype System.ComponentModel.ListSortDirection sort) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.ComponentModel.PropertyDescriptor" />
        <Parameter Name="sort" Type="System.ComponentModel.ListSortDirection" />
      </Parameters>
      <Docs>
        <param name="property">A <see cref="T:System.ComponentModel.PropertyDescriptor" /> によってデータ ソースの並べ替えに使用するプロパティを説明します。</param>
        <param name="sort">A <see cref="T:System.ComponentModel.ListSortDirection" /> 一覧の並べ替え方法を示します。</param>
        <summary>指定されたプロパティ記述子と並べ替え方向を使用して、データ ソースを並べ替えます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.IBindingList> を使用して 1 つの列の並べ替えを実装して、 <xref:System.ComponentModel.PropertyDescriptor> 並べ替えるプロパティを指定して、 <xref:System.ComponentModel.ListSortDirection> プロパティの内容を昇順または降順で並べ替える必要があるかどうかを示します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">データ ソースが、 <see cref="T:System.ComponentModel.IBindingList" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="BindingComplete">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.BindingCompleteEventHandler BindingComplete;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.BindingCompleteEventHandler BindingComplete" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.BindingSource.BindingComplete" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingCompleteEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>すべてのクライアントは、これにバインドされているときに発生 <see cref="T:System.Windows.Forms.BindingSource" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.BindingSource.BindingComplete> イベントが続くすべてのクライアントの場合は、通常、コントロールにバインドされている現在 <xref:System.Windows.Forms.BindingSource>します。 このイベントのハンドラーが確認するには、成功した場合、エラー、またはバインド プロセスでの例外に基づく適切なアクションを実行できます、 <xref:System.Windows.Forms.BindingCompleteEventArgs.BindingCompleteState%2A> のプロパティ、 <xref:System.Windows.Forms.BindingCompleteEventArgs> パラメーター。  
  
 イベント処理の詳細については、「[Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
   
  
## 例  
 次のコード例に示します処理、 <xref:System.Windows.Forms.BindingSource.BindingComplete> イベントです。 このコードを実行するには、空のコード ファイルに貼り付けます。  
  
 [!code-cpp[System.Windows.Forms.DataConnectorBindingComplete\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorBindingComplete/CPP/form1.cpp#3)]
 [!code-csharp[System.Windows.Forms.DataConnectorBindingComplete\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorBindingComplete/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.DataConnectorBindingComplete\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorBindingComplete/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.BindingCompleteEventArgs.BindingCompleteState" />
        <altmember cref="T:System.Windows.Forms.BindingCompleteEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="CancelEdit">
      <MemberSignature Language="C#" Value="public void CancelEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelEdit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.CancelEdit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の編集操作をキャンセルします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この方法では、データに対する変更を破棄ので、最後の保存または読み込みの両方の次の条件が満たされた場合の操作。  
  
-   データ ソースを実装して、 <xref:System.ComponentModel.IEditableObject> インターフェイスです。  
  
-   <xref:System.Windows.Forms.BindingSource.EndEdit%2A> メソッドが呼び出されていません。  
  
 このメソッドは、 <xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A> 、基になるメソッド <xref:System.Windows.Forms.CurrencyManager>, 、行レベルの変更を対象とします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.BindingSource.AddNew" />
        <altmember cref="M:System.Windows.Forms.BindingSource.EndEdit" />
        <altmember cref="T:System.ComponentModel.IEditableObject" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.Clear" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>リストからすべての要素を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.BindingSource.Clear%2A> メソッドによって表される基底のリストからすべての要素を削除する、 <xref:System.Windows.Forms.BindingSource.List%2A> プロパティとセット、 <xref:System.Windows.Forms.BindingSource.Count%2A> プロパティを 0 にします。  
  
 このメソッドを生成、 <xref:System.Windows.Forms.BindingSource.ListChanged> イベントです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.BindingSource.Count" />
        <altmember cref="M:System.Windows.Forms.BindingSource.RemoveCurrent" />
        <altmember cref="M:System.Windows.Forms.BindingSource.CancelEdit" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public virtual bool Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.Contains(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Object" /> によって表される基底のリスト内で検索する、 <see cref="P:System.Windows.Forms.BindingSource.List" /> プロパティです。 値として <see langword="null" /> を指定できます。</param>
        <summary>オブジェクトがリストの項目であるかどうか判断します。</summary>
        <returns>
          <see langword="true" /> 場合、 <paramref name="value" /> パラメーターが見つかった場合に、 <see cref="P:System.Windows.Forms.BindingSource.List" />。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 実装は、基になるリストの \[依存 `Contains` メソッドでは、通常、次の特性を適用します。  
  
-   <xref:System.Windows.Forms.BindingSource.List%2A> 最初の要素を起点と終了の最後の要素に検索されます。  
  
-   基になるメソッドは、一方向の検索を実行します。したがって、平均実行時間の値に比例、 <xref:System.Windows.Forms.BindingSource.Count%2A> プロパティです。  
  
-   基になるメソッドを呼び出して等しいかどうかを決定する、 <xref:System.Object.Equals%2A> メソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.BindingSource.IndexOf(System.Object)" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Count" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Position" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Item(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.BindingSource.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public virtual void CopyTo (Array arr, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array arr, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.CopyTo(System.Array,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arr" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="arr">コピー先の配列。</param>
        <param name="index">コピー操作の開始位置を示す、コピー先の配列内のインデックス。</param>
        <summary>内容をコピー、 <see cref="P:System.Windows.Forms.BindingSource.List" /> を開始、指定したインデックス位置の指定した配列にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、1 つの配列に複数のソースから項目を組み合わせて使用できます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public virtual int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingSource.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在、基になるリスト内の項目の合計数を取得 <see cref="P:System.Windows.Forms.BindingSource.Filter" /> 値を考慮します。</summary>
        <value>基底のリストに含まれる、フィルター処理された項目の総数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.BindingSource.Count%2A> プロパティによって表される基底のリストに項目の数を取得する、 <xref:System.Windows.Forms.BindingSource.List%2A> プロパティの値によって変更された、 <xref:System.Windows.Forms.BindingSource.Filter%2A> プロパティです。  
  
   
  
## 例  
 次のコード例を示しています、 <xref:System.Windows.Forms.BindingSource.List%2A>, 、<xref:System.Windows.Forms.BindingSource.RemoveAt%2A>, 、および <xref:System.Windows.Forms.BindingSource.Count%2A> メンバーです。 この例を実行するを含むフォームにコードを貼り付けます、 <xref:System.Windows.Forms.BindingSource> という名前 `BindingSource1`, 、という名前の 2 つのラベル `label1` と `label2`, という名前のボタン `button1`します。 関連付ける、 `button1_Click` メソッドを <xref:System.Windows.Forms.Control.Click> イベントを `button1`します。 Visual Basic の場合は、System.Data.dll への参照を追加する必要があります。  
  
 [!code-csharp[System.Windows.Forms.DataConnectorFilterAndSort\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorFilterAndSort/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.DataConnectorFilterAndSort\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorFilterAndSort/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.BindingSource.List" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Position" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Current" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyManager">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.CurrencyManager CurrencyManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CurrencyManager CurrencyManager" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingSource.CurrencyManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CurrencyManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>これに関連付けられた currencymanager を取得 <see cref="T:System.Windows.Forms.BindingSource" />します。</summary>
        <value>この <see cref="T:System.Windows.Forms.CurrencyManager" /> に関連付けられている <see cref="T:System.Windows.Forms.BindingSource" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 同じデータ メンバーを使用する別のバインディングの現在位置マネージャーにアクセスする場合、 <xref:System.Windows.Forms.BindingSource.GetRelatedCurrencyManager%2A> メソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public object Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Current" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingSource.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>リスト内の現在の項目を取得します。</summary>
        <value>
          <see cref="T:System.Object" /> によって表される基底のリストにおける現在の項目を表す、 <see cref="P:System.Windows.Forms.BindingSource.List" /> プロパティ、または <see langword="null" /> リストに項目がないです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Windows.Forms.BindingSource.Current%2A> プロパティに現在の項目へのアクセスを使用して、 <xref:System.Windows.Forms.BindingSource.List%2A> 全体の一覧を取得するプロパティです。 現在のオブジェクトの種類を確認するのには、使用、 <xref:System.Object.GetType%2A>, 、または <xref:System.Object.ToString%2A> メソッドです。  
  
 現在の項目を変更するには、設定、 <xref:System.Windows.Forms.BindingSource.Position%2A> プロパティを新しいの整数値またはを使用してナビゲーションのいずれかのように <xref:System.Windows.Forms.BindingSource.MoveNext%2A>します。  
  
   
  
## 例  
 次のコード例を示しています、 <xref:System.Windows.Forms.BindingSource.Current%2A> プロパティです。 この例を実行するには、フォームと呼び出しにコードを貼り付けます、 `PopulateBindingSourceWithFonts` メソッドから、フォームの <xref:System.Windows.Forms.Form.Load> イベント メソッドを処理します。  
  
 [!code-csharp[System.Windows.Forms.BindingSourceMethods\#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.BindingSourceMethods/CS/Form1.cs#6)]
 [!code-vb[System.Windows.Forms.BindingSourceMethods\#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.BindingSourceMethods/VB/Form1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.BindingSource.List" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Position" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Count" />
      </Docs>
    </Member>
    <Member MemberName="CurrentChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CurrentChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CurrentChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.BindingSource.CurrentChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在バインドされている項目が変更されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.BindingSource.CurrentChanged> イベントが発生するたびに、 <xref:System.Windows.Forms.BindingSource.Current%2A> 理由として、次のいずれかのプロパティの変更。  
  
-   現在の位置、 <xref:System.Windows.Forms.BindingSource.List%2A> 変更します。  
  
-   <xref:System.Windows.Forms.BindingSource.DataSource%2A> または <xref:System.Windows.Forms.BindingSource.DataMember%2A> プロパティが変更されます。  
  
-   メンバーシップ、基になる <xref:System.Windows.Forms.BindingSource.List%2A> 変更されると、これにより <xref:System.Windows.Forms.BindingSource.Position%2A> に別の項目を参照してください。 例には、追加または削除した現在の項目を削除または自体には、現在のアイテムを移動または現在の位置にアイテムを移動する前にアイテムが含まれます。  
  
-   基になるリストは、新しい並べ替えまたはフィルター処理操作によって更新されます。  
  
 このイベントがトリガーされたときに、 <xref:System.Windows.Forms.BindingSource.Current%2A> プロパティには、その新しい値は既に含まれています。  
  
 <xref:System.Windows.Forms.BindingSource.CurrentChanged> 既定のイベントは、 <xref:System.Windows.Forms.BindingSource> クラスです。  
  
 イベント処理の詳細については、「[Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.CurrentChanged" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Current" />
        <altmember cref="M:System.Windows.Forms.BindingSource.OnCurrentChanged(System.EventArgs)" />
        <altmember cref="E:System.Windows.Forms.BindingSource.ListChanged" />
        <altmember cref="E:System.Windows.Forms.BindingSource.CurrentItemChanged" />
        <altmember cref="E:System.Windows.Forms.BindingSource.PositionChanged" />
      </Docs>
    </Member>
    <Member MemberName="CurrentItemChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CurrentItemChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CurrentItemChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.BindingSource.CurrentItemChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プロパティの値のときに発生、 <see cref="P:System.Windows.Forms.BindingSource.Current" /> プロパティが変更されました。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.BindingSource.CurrentItemChanged> イベントはすべての状況が発生するのに対して、 <xref:System.Windows.Forms.BindingSource.CurrentChanged> イベントです。 さらに、 <xref:System.Windows.Forms.BindingSource.CurrentItemChanged> も発生するときに、いずれかのプロパティの値 <xref:System.Windows.Forms.BindingSource.Current%2A> を変更します。  
  
 イベント処理の詳細については、「[Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.BindingSource.Current" />
        <altmember cref="M:System.Windows.Forms.BindingSource.OnCurrentChanged(System.EventArgs)" />
        <altmember cref="E:System.Windows.Forms.BindingSource.ListChanged" />
        <altmember cref="E:System.Windows.Forms.BindingSource.CurrentChanged" />
        <altmember cref="E:System.Windows.Forms.BindingSource.PositionChanged" />
      </Docs>
    </Member>
    <Member MemberName="DataError">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.BindingManagerDataErrorEventHandler DataError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.BindingManagerDataErrorEventHandler DataError" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.BindingSource.DataError" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingManagerDataErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>同時実行に関する例外がによって処理されたときに発生、 <see cref="T:System.Windows.Forms.BindingSource" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは情報、CLS 準拠の例外のみを報告します。 どのような種類の例外が発生したかを確認するには、このイベントを処理し、確認、 <xref:System.Windows.Forms.BindingManagerDataErrorEventArgs.Exception%2A> のプロパティ、 <xref:System.Windows.Forms.BindingManagerDataErrorEventArgs>です。  
  
 イベント処理の詳細については、「[Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataMember">
      <MemberSignature Language="C#" Value="public string DataMember { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataMember" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingSource.DataMember" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataMemberListEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コネクタの現在のバインド先であるデータ ソースの特定のリストを取得または設定します。</summary>
        <value>リスト \(または行\) の名前、 <see cref="P:System.Windows.Forms.BindingSource.DataSource" />です。 既定値は、空の文字列 \(""\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Windows.Forms.BindingSource.DataSource%2A> 複数のリスト \(またはテーブル\) を含むデータを設定する必要があります、 <xref:System.Windows.Forms.BindingSource.DataMember%2A> プロパティ ソースのいずれかの名前をします。  
  
 このプロパティを生成する設定、 <xref:System.Windows.Forms.BindingSource.DataMemberChanged> イベント  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.BindingSource.DataSource" />
        <altmember cref="P:System.Windows.Forms.BindingSource.List" />
        <altmember cref="E:System.Windows.Forms.BindingSource.DataMemberChanged" />
      </Docs>
    </Member>
    <Member MemberName="DataMemberChanged">
      <MemberSignature Language="C#" Value="public event EventHandler DataMemberChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DataMemberChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.BindingSource.DataMemberChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.BindingSource.DataMember" /> プロパティ値が変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Windows.Forms.BindingSource.DataMemberChanged> event occurs after the <xref:System.Windows.Forms.BindingSource.DataMember%2A> property changes.  
  
 For more information about handling events, see [Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.BindingSource.DataMember" />
        <altmember cref="M:System.Windows.Forms.BindingSource.OnDataMemberChanged(System.EventArgs)" />
        <altmember cref="E:System.Windows.Forms.BindingSource.DataSourceChanged" />
      </Docs>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public object DataSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingSource.DataSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AttributeProvider(typeof(System.ComponentModel.IListSource))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コネクタのバインド先であるデータ ソースを取得または設定します。</summary>
        <value>
          <see cref="T:System.Object" /> をデータ ソースとして動作します。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.BindingSource.DataSource%2A> プロパティは、型、オブジェクト、および種類の一覧を含む、データ ソースの数に設定することができます。 作成されるデータ ソースは、一覧として公開されます。 次の表は、いくつかの一般的なデータ ソースと結果のリストの評価を示します。  
  
|データ ソースのプロパティ|結果のリスト|  
|-------------------|------------|  
|`null`|空 <xref:System.ComponentModel.IBindingList> オブジェクトです。 アイテムを追加すると、リストが、追加された項目の種類に設定します。|  
|`null` <xref:System.Windows.Forms.BindingSource.DataMember%2A> 設定|サポートされていません <xref:System.ArgumentException>します。|  
|リスト以外の型または型"T"のオブジェクト|空 <xref:System.ComponentModel.IBindingList> 型"T"のです。|  
|配列のインスタンス|<xref:System.ComponentModel.IBindingList> 配列の要素を含むです。|  
|<xref:System.Collections.IEnumerable> インスタンス|<xref:System.ComponentModel.IBindingList> を含む、 <xref:System.Collections.IEnumerable> 項目。|  
|"T"の種類を含むインスタンスを一覧表示します。|<xref:System.ComponentModel.IBindingList> 型"T"を含むインスタンス。|  
  
 さらに、 <xref:System.Windows.Forms.BindingSource.DataSource%2A> などその他のリストの種類を設定することができます <xref:System.ComponentModel.IListSource> と <xref:System.ComponentModel.ITypedList> と <xref:System.Windows.Forms.BindingSource> 適切に処理されます。 この場合は、一覧に含まれる型には、既定のコンス トラクターが必要です。  
  
 設定する必要があります指定された参照には、1 つ以上のリストまたはテーブルが含まれている場合は、データ ソースを設定するとき、 <xref:System.Windows.Forms.BindingSource.DataMember%2A> プロパティをバインドするリストを指定する文字列にします。 このプロパティを生成する設定、 <xref:System.Windows.Forms.BindingSource.DataSourceChanged> イベントです。  
  
> [!NOTE]
>  変更を加えた場合、 <xref:System.Windows.Forms.BindingSource.DataSource%2A> プロパティの値がこれを行う UI に変更が反映されていることを確認するユーザー インターフェイス \(UI\) スレッドでします。  
  
 <xref:System.Windows.Forms.BindingSource.DataSource%2A> プロパティは、既定のプロパティを <xref:System.Windows.Forms.BindingSource> クラスです。  
  
   
  
## 例  
 次のコード例は、顧客のリストを割り当てます、 <xref:System.Windows.Forms.BindingSource.DataSource%2A> の <xref:System.Windows.Forms.BindingSource> コンポーネントです。 このコード例に示されている例の一部である [How to: Raise Change Notifications Using the BindingSource ResetItem Method](http://msdn.microsoft.com/ja-jp/ab8b4096-37ff-4e30-aabc-de79a2f2e972)です。  
  
 [!code-cpp[System.Windows.Forms.DataConnector.ResetItem\#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataConnector.ResetItem/CPP/form1.cpp#6)]
 [!code-csharp[System.Windows.Forms.DataConnector.ResetItem\#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataConnector.ResetItem/CS/form1.cs#6)]
 [!code-vb[System.Windows.Forms.DataConnector.ResetItem\#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataConnector.ResetItem/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.BindingSource.DataMember" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="T:System.ComponentModel.IListSource" />
      </Docs>
    </Member>
    <Member MemberName="DataSourceChanged">
      <MemberSignature Language="C#" Value="public event EventHandler DataSourceChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DataSourceChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.BindingSource.DataSourceChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.BindingSource.DataSource" /> プロパティ値が変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Windows.Forms.BindingSource.DataSourceChanged> event occurs after the <xref:System.Windows.Forms.BindingSource.DataSource%2A> property changes.  
  
 For more information about handling events, see [Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.BindingSource.DataSource" />
        <altmember cref="M:System.Windows.Forms.BindingSource.OnDataSourceChanged(System.EventArgs)" />
        <altmember cref="E:System.Windows.Forms.BindingSource.DataMemberChanged" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.Windows.Forms.BindingSource" /> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method is called by the public **languageKeyword tag is not supported!!!!**  
 method and the <xref:System.Object.Finalize%2A> method. **languageKeyword tag is not supported!!!!**  
 invokes the protected **languageKeyword tag is not supported!!!!**  
 method with the **parameterReference tag is not supported!!!!**  
 parameter set to **languageKeyword tag is not supported!!!!**  
. <xref:System.Object.Finalize%2A> invokes **languageKeyword tag is not supported!!!!**  
 with **parameterReference tag is not supported!!!!**  
 set to **languageKeyword tag is not supported!!!!**  
.  
  
 When the **parameterReference tag is not supported!!!!**  
 parameter is true, this method releases all resources held by any managed objects that this <xref:System.Windows.Forms.BindingSource> references. This method invokes the **languageKeyword tag is not supported!!!!**  
 method of each referenced object.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> can be called multiple times by other objects. When overriding <see langword="Dispose(Boolean)" /> be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />. For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
 For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndEdit">
      <MemberSignature Language="C#" Value="public void EndEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndEdit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.EndEdit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>基になるデータ ソースに保留中の変更を適用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 When the <xref:System.Windows.Forms.BindingSource.EndEdit%2A> method is called, all pending changes are applied to the underlying data source.  
  
 This method has no effect unless the objects contained by the data source implement the <xref:System.ComponentModel.IEditableObject> interface. If the objects do not implement the <xref:System.ComponentModel.IEditableObject> interface, changes to the data are copied to the underlying data source immediately after each change.  
  
 This method raises the <xref:System.Windows.Forms.BindingSource.ListChanged> event.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.BindingSource.List" />
        <altmember cref="T:System.ComponentModel.IEditableObject" />
        <altmember cref="M:System.Windows.Forms.BindingSource.CancelEdit" />
        <altmember cref="M:System.Windows.Forms.BindingSource.System#ComponentModel#ICancelAddNew#EndNew(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public virtual string Filter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Filter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingSource.Filter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示する行のフィルター処理に使用する式を取得または設定します。</summary>
        <value>行のフィルター処理方法を指定する文字列。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 複雑なデータ バインディングのシナリオで通常使用される、 <xref:System.Windows.Forms.BindingSource.Filter%2A> プロパティでは、サブセットを表示することができます、 <xref:System.Windows.Forms.BindingSource.DataSource%2A>です。 実装するだけの基になる一覧表示、 <xref:System.ComponentModel.IBindingListView> インターフェイスのサポートがフィルター処理します。  
  
 <xref:System.Windows.Forms.BindingSource.Filter%2A> は `null`, 、 <xref:System.Windows.Forms.BindingSource> 基底のリストにこのプロパティを渡します。 オブジェクトの初期化中にこのプロパティを設定する場合、初期化が完了した後に、呼び出しはまで延期されます。  
  
 フィルター値を作成するには、後にフィルターを適用するには、演算子と値列の名前を指定します。 許容されるフィルター構文は、基になるデータ ソースによって異なります。 基になるデータ ソースがある場合、 <xref:System.Data.DataSet>, 、<xref:System.Data.DataTable>, 、または <xref:System.Data.DataView>, に記載されている構文を使用してブール式を指定する、 <xref:System.Data.DataColumn.Expression%2A?displayProperty=fullName> プロパティです。  
  
 値、 <xref:System.Windows.Forms.BindingSource.Filter%2A> プロパティの値に影響、 <xref:System.Windows.Forms.BindingSource.Count%2A> プロパティです。 さらに、 <xref:System.Windows.Forms.BindingSource.Filter%2A> データ ソースが変更されたときに、値は保持されます。 フィルター処理を停止する、 <xref:System.Windows.Forms.BindingSource.DataSource%2A>, を呼び出す、 <xref:System.Windows.Forms.BindingSource.RemoveFilter%2A> メソッドです。  
  
   
  
## 例  
 次の例では、使用する方法、 <xref:System.Windows.Forms.BindingSource.Filter%2A> プロパティを <xref:System.Data.DataView>です。 この例を実行するには、Windows フォームと呼び出しにコードを貼り付けます `PopulateDataViewAndFilter` フォームのコンス トラクターからまたは <xref:System.Windows.Forms.Form.Load> イベント処理メソッドです。 フォームをインポートする必要があります、 <xref:System.Xml> と <xref:System.IO> 名前空間。  
  
 [!code-csharp[System.Windows.Forms.BindingSourceMethods\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.BindingSourceMethods/CS/Form1.cs#3)]
 [!code-vb[System.Windows.Forms.BindingSourceMethods\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.BindingSourceMethods/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.BindingSource.DataSource" />
        <altmember cref="P:System.Windows.Forms.BindingSource.List" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Sort" />
        <altmember cref="M:System.Windows.Forms.BindingSource.RemoveFilter" />
        <altmember cref="P:System.ComponentModel.IBindingList.IsSorted" />
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public virtual int Find (System.ComponentModel.PropertyDescriptor prop, object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Find(class System.ComponentModel.PropertyDescriptor prop, object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prop" Type="System.ComponentModel.PropertyDescriptor" />
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="prop">検索対象の <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
        <param name="key">値 <c>prop</c> 一致するようにします。</param>
        <summary>指定したプロパティ記述子を持つ項目のインデックスを検索します。</summary>
        <returns>指定された値を持つ項目の 0 から始まるインデックス <see cref="T:System.ComponentModel.PropertyDescriptor" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、通常使用複合データ バインディングで、フィールドの値が指定されている最初の行を検索、 `prop` パラメーターの値に等しい、 `key` パラメーター  
  
 このメソッドは、基になるリストの要求を参照するだけで <xref:System.ComponentModel.IBindingList.Find%2A?displayProperty=fullName> メソッドです。 たとえば、基になるデータ ソースが、 <xref:System.Data.DataSet>, 、<xref:System.Data.DataTable>, 、または <xref:System.Data.DataView>, 、このメソッドは、 <xref:System.Data.DataView.System%23ComponentModel%23IBindingList%23Find%2A?displayProperty=fullName> メソッドです。 動作 <xref:System.ComponentModel.IBindingList.Find%2A?displayProperty=fullName>, などが返される値が一致する項目が見つからない場合は、基になるリスト内のメソッドの実装によって異なります。  
  
   
  
## 例  
 次のコード例は、<xref:System.Windows.Forms.BindingSource.Find%2A> メソッドの使用方法を示します。 完全な例は、クラスの概要に関するトピックを参照してください。  
  
 [!code-csharp[System.Windows.Forms.BindingSourceAndBindingListOfT\#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.BindingSourceAndBindingListOfT/CS/Form1.cs#4)]
 [!code-vb[System.Windows.Forms.BindingSourceAndBindingListOfT\#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.BindingSourceAndBindingListOfT/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">基になるリストの種類ではありません <see cref="T:System.ComponentModel.IBindingList" />します。</exception>
        <altmember cref="P:System.Windows.Forms.BindingSource.List" />
        <altmember cref="M:System.Windows.Forms.BindingSource.IndexOf(System.Object)" />
        <altmember cref="M:System.Windows.Forms.BindingSource.Contains(System.Object)" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Count" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Position" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Item(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public int Find (string propertyName, object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Find(string propertyName, object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.Find(System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="propertyName">検索するプロパティの名前。</param>
        <param name="key">指定した項目の値 <c>propertyName</c> を検索します。</param>
        <summary>指定した名前のプロパティと値を持つリスト内の項目のインデックスを返します。</summary>
        <returns>指定した名前のプロパティと値を持つ項目の 0 から始まるインデックス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.BindingSource.Find%2A> メソッドは、基になるリストが場合にのみ使用できます、 <xref:System.ComponentModel.IBindingList> 実装を検索します。 このメソッドは、基になるリストの要求を参照するだけで <xref:System.ComponentModel.IBindingList.Find%2A?displayProperty=fullName> メソッドです。 たとえば、基になるデータ ソースが、 <xref:System.Data.DataSet>, 、<xref:System.Data.DataTable>, 、または <xref:System.Data.DataView>, 、このメソッドは変換 `propertyName` に、 <xref:System.ComponentModel.PropertyDescriptor> を呼び出すと、 <xref:System.Data.DataView.System%23ComponentModel%23IBindingList%23Find%2A> メソッドです。 動作 <xref:System.Windows.Forms.BindingSource.Find%2A>, などが返される値が一致する項目が見つからない場合は、基になるリスト内のメソッドの実装によって異なります。  
  
 プロパティ名の比較は大文字です。  
  
   
  
## 例  
 次の例では、使用する方法、 <xref:System.Windows.Forms.BindingSource.Find%2A> メソッドを <xref:System.Data.DataView>です。 この例を実行するには、Windows フォームと呼び出しにコードを貼り付けます `PopulateDataViewAndFind` フォームのコンス トラクターからまたは <xref:System.Windows.Forms.Form.Load> イベント処理メソッドです。 フォームをインポートする必要があります、 <xref:System.Xml> と <xref:System.IO> 名前空間。  
  
 [!code-csharp[System.Windows.Forms.BindingSourceMethods\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.BindingSourceMethods/CS/Form1.cs#1)]
 [!code-vb[System.Windows.Forms.BindingSourceMethods\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.BindingSourceMethods/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">基になるリストが、 <see cref="T:System.ComponentModel.IBindingList" /> と検索機能を実装します。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="propertyName" /> 一覧でプロパティが一致しません。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>列挙子を取得、 <see cref="P:System.Windows.Forms.BindingSource.List" />です。</summary>
        <returns>
          <see cref="T:System.Collections.IEnumerator" /> の <see cref="P:System.Windows.Forms.BindingSource.List" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemProperties">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.PropertyDescriptorCollection GetItemProperties (System.ComponentModel.PropertyDescriptor[] listAccessors);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.PropertyDescriptorCollection GetItemProperties(class System.ComponentModel.PropertyDescriptor[] listAccessors) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.GetItemProperties(System.ComponentModel.PropertyDescriptor[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptorCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listAccessors" Type="System.ComponentModel.PropertyDescriptor[]" />
      </Parameters>
      <Docs>
        <param name="listAccessors">配列 <see cref="T:System.ComponentModel.PropertyDescriptor" /> バインド可能な一覧で検索するオブジェクト。</param>
        <summary>配列を取得 <see cref="T:System.ComponentModel.PropertyDescriptor" /> ソース リストの種類のデータのバインド可能なプロパティを表すオブジェクト。</summary>
        <returns>配列 <see cref="T:System.ComponentModel.PropertyDescriptor" /> をこのリストの種類のプロパティを表すオブジェクト データをバインドするために使用します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListBindingHelper" />
      </Docs>
    </Member>
    <Member MemberName="GetListName">
      <MemberSignature Language="C#" Value="public virtual string GetListName (System.ComponentModel.PropertyDescriptor[] listAccessors);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetListName(class System.ComponentModel.PropertyDescriptor[] listAccessors) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.GetListName(System.ComponentModel.PropertyDescriptor[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listAccessors" Type="System.ComponentModel.PropertyDescriptor[]" />
      </Parameters>
      <Docs>
        <param name="listAccessors">配列 <see cref="T:System.ComponentModel.PropertyDescriptor" /> バインド可能な一覧で検索するオブジェクト。</param>
        <summary>バインディングのためのデータを提供するリストの名前を取得します。</summary>
        <returns>バインディングのためのデータを提供するリストの名前。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListBindingHelper" />
      </Docs>
    </Member>
    <Member MemberName="GetRelatedCurrencyManager">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.CurrencyManager GetRelatedCurrencyManager (string dataMember);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.CurrencyManager GetRelatedCurrencyManager(string dataMember) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.GetRelatedCurrencyManager(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CurrencyManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataMember" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataMember">CurrencyManager を取得するデータ ソース内の列またはリストの名前。</param>
        <summary>指定されたデータ メンバーに関連付けられた CurrencyManager を取得します。</summary>
        <returns>関連する <see cref="T:System.Windows.Forms.CurrencyManager" /> 指定されたデータ メンバーにします。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 `dataMember` は `null` または空の文字列 \(""\)、 <xref:System.Windows.Forms.BindingSource.GetRelatedCurrencyManager%2A> メイン currencymanager を返しますそれ以外の場合、別の確認 <xref:System.Windows.Forms.BindingSource> 指定されたデータ メンバーにバインドされ、その currencymanager を取得します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.IndexOf(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Object" /> によって表される基底のリスト内で検索する、 <see cref="P:System.Windows.Forms.BindingSource.List" /> プロパティです。 値として <see langword="null" /> を指定できます。</param>
        <summary>指定したオブジェクトを検索し、リスト全体でそのオブジェクトが最初に見つかった位置のインデックスを返します。</summary>
        <returns>最初に見つかった位置の 0 から始まるインデックス、 <paramref name="value" /> パラメーターの場合は\-1 場合 <paramref name="value" /> が一覧にありません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 実装は、基になるリストの \[依存 `IndexOf` メソッドでは、通常、次の特性を適用します。  
  
-   <xref:System.Windows.Forms.BindingSource.List%2A> は、最初の要素を起点と最後の要素で終わる検索します。  
  
-   基になるメソッドは、一方向の検索を実行します。したがって、平均実行時間の値に比例、 <xref:System.Windows.Forms.BindingSource.Count%2A> プロパティです。  
  
-   基になるメソッドを呼び出して等しいかどうかを決定する、 <xref:System.Object.Equals%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.BindingSource.List" />
        <altmember cref="M:System.Windows.Forms.BindingSource.Contains(System.Object)" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Count" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Position" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Item(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.BindingSource.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual void Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.Insert(System.Int32,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">
          <c>value</c> を挿入する位置の、0 から始まるインデックス。</param>
        <param name="value">挿入する <see cref="T:System.Object" />。 値として <see langword="null" /> を指定できます。</param>
        <summary>リスト内の指定したインデックスに項目を挿入します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを生成、 <xref:System.Windows.Forms.BindingSource.ListChanged> イベントです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 0 より大きいか小さい <see cref="P:System.Windows.Forms.BindingSource.Count" />します。</exception>
        <exception cref="T:System.NotSupportedException">リストは読み取り専用または固定サイズです。</exception>
        <altmember cref="P:System.Windows.Forms.BindingSource.List" />
        <altmember cref="P:System.Windows.Forms.BindingSource.IsReadOnly" />
        <altmember cref="P:System.Windows.Forms.BindingSource.IsFixedSize" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Count" />
        <altmember cref="M:System.Windows.Forms.BindingSource.Add(System.Object)" />
        <altmember cref="M:System.Windows.Forms.BindingSource.RemoveCurrent" />
      </Docs>
    </Member>
    <Member MemberName="IsBindingSuspended">
      <MemberSignature Language="C#" Value="public bool IsBindingSuspended { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBindingSuspended" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingSource.IsBindingSuspended" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>リストのバインディングが中断されているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> バインディングを示すためには、中断されています。それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFixedSize">
      <MemberSignature Language="C#" Value="public virtual bool IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingSource.IsFixedSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>基になるリストが固定サイズかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 基になるリストがある、固定サイズを場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 リストが固定サイズの場合に、追加または削除できません要素の後、リストが作成されましたが、既存の要素を変更することができます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public virtual bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingSource.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>基になるリストが読み取り専用かどうかを示す値を取得します。</summary>
        <value>リストが読み取り専用の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 読み取り専用であるリストできません追加、削除、または項目の変更一覧を作成した後。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSorted">
      <MemberSignature Language="C#" Value="public virtual bool IsSorted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSorted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingSource.IsSorted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>基になるリスト内の項目を並べ替えるかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> リストの場合、 <see cref="T:System.ComponentModel.IBindingList" /> が並べ替えられている、それ以外の場合と <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.BindingSource.IsSorted%2A> 常に返します `false` 、リストがない場合、 <xref:System.ComponentModel.IBindingList>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public virtual bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingSource.IsSynchronized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コレクションへのアクセスが同期されている \(スレッド セーフである\) かどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 一覧を示すためには同期されます。それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual object this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingSource.Item(System.Int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">取得する要素の、0 から始まるインデックス。</param>
        <summary>指定したインデックスにあるリスト要素を取得または設定します。</summary>
        <value>指定したインデックス位置にある要素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.BindingSource.Item%2A> プロパティは、このクラスのインデクサーを表します。 受け入れる `null` 有効な値としてでき、リスト内の重複する項目。  
  
 設定値を発生させる、 <xref:System.Windows.Forms.BindingSource.ListChanged> イベントです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 0 より小さいかに等しいかより大きい <see cref="P:System.Windows.Forms.BindingSource.Count" />します。</exception>
        <altmember cref="P:System.Windows.Forms.BindingSource.List" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Position" />
      </Docs>
    </Member>
    <Member MemberName="List">
      <MemberSignature Language="C#" Value="public System.Collections.IList List { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList List" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingSource.List" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コネクタのバインド先であるリストを取得します。</summary>
        <value>
          <see cref="T:System.Collections.IList" /> 、一覧を表すまたは<see langword="null" />これに関連付けられている基になるリストがないかどうかは<see cref="T:System.Windows.Forms.BindingSource" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.BindingSource>さまざまなデータ ソースを一様に処理するクラス。 理想的には、<xref:System.Windows.Forms.BindingSource.List%2A>一般的なプロパティを設定する必要があります<xref:System.Collections.IList>です。 ただし、場合によって必要があります、このプロパティをより具体的な種類にキャストします。 次の表では、基になるリストの種類は、型またはデータ ソースの値によって異なります。  
  
|データ ソースの種類|基になるリストの説明|  
|----------------|----------------|  
|<xref:System.Windows.Forms.BindingSource.DataSource%2A>および<xref:System.Windows.Forms.BindingSource.DataMember%2A>は`null`|空の <xref:System.Collections.ArrayList>。|  
|<xref:System.Windows.Forms.BindingSource.DataSource%2A> `null`が<xref:System.Windows.Forms.BindingSource.DataMember%2A>はありません`null`|\[なし\] です。取得しようと、<xref:System.Windows.Forms.BindingSource.List%2A>がスローされます、<xref:System.ArgumentException>です。|  
|<xref:System.Array>インスタンス|<xref:System.Array>。|  
|<xref:System.ComponentModel.IListSource>インスタンス|呼び出しからの戻り値、<xref:System.ComponentModel.IListSource.GetList%2A>メソッドのこの<xref:System.ComponentModel.IListSource>インスタンス。|  
|<xref:System.ComponentModel.IBindingList>インスタンス|<xref:System.ComponentModel.IBindingList>。|  
|<xref:System.Collections.IList>インスタンス|<xref:System.Collections.IList>。|  
|以外<xref:System.Collections.IList>型"T"のインスタンス|A <xref:System.ComponentModel.BindingList%601> 1 つの要素を使用します。|  
|<xref:System.ComponentModel.ICustomTypeDescriptor>インスタンス|<xref:System.Collections.ArrayList> 1 つの要素を使用します。|  
|、<xref:System.Collections.IEnumerable>|<xref:System.Collections.ArrayList>した要素をコピーします。|  
|<xref:System.Array>タイプを<xref:System.Windows.Forms.BindingSource.DataMember%2A>項目の"T"と入力します。|<xref:System.ComponentModel.BindingList%601>|  
|A<xref:System.Type>を表す、<xref:System.ComponentModel.IListSource>または<xref:System.ComponentModel.ITypedList>|呼び出しによって作成されたインスタンス、<xref:System.Activator.CreateInstance%28System.Type%29>方法、<xref:System.Activator>クラスです。 A<xref:System.NotSupportedException>スローされる可能性があります。|  
|<xref:System.Collections.IList>タイプを<xref:System.Windows.Forms.BindingSource.DataMember%2A>項目の"T"と入力します。<br /><br /> または<br /><br /> 以外<xref:System.Collections.IList>型|<xref:System.ComponentModel.BindingList%601>|  
|<xref:System.ComponentModel.ICustomTypeDescriptor>型|\[なし\] です。取得しようと、<xref:System.Windows.Forms.BindingSource.List%2A>がスローされます、<xref:System.NotSupportedException>です。|  
  
 型が取得された場合は、<xref:System.Collections.IList>インターフェイス、基になるコレクションがなどのより複雑な可能性があります、<xref:System.Collections.ArrayList>または<xref:System.Data.DataView>クラスです。  
  
   
  
## 例  
 次のコード例を示しています、 <xref:System.Windows.Forms.BindingSource.List%2A>、 <xref:System.Windows.Forms.BindingSource.RemoveAt%2A>、および<xref:System.Windows.Forms.BindingSource.Count%2A>メンバー。 この例を実行するコードを貼り付けます、フォームが含まれていますが、<xref:System.Windows.Forms.BindingSource>という`BindingSource1`、という 2 つのラベル`label1`と`label2`、という名前のボタンと`button1`です。 関連付ける、`button1_Click`メソッドを<xref:System.Windows.Forms.Control.Click>イベントを`button1`です。 Visual Basic の場合は、System.Data.dll への参照を追加する必要があります。  
  
 [!code-csharp[System.Windows.Forms.DataConnectorFilterAndSort\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorFilterAndSort/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.DataConnectorFilterAndSort\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorFilterAndSort/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Item(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ListChanged">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.ListChangedEventHandler ListChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.ListChangedEventHandler ListChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.BindingSource.ListChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ListChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>基底のリストまたはリスト内の項目が変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.BindingSource.ListChanged> メンバーシップまたはによって表される基底のリストのメタデータへの変更がある場合に、イベントが発生した、 <xref:System.Windows.Forms.BindingSource.List%2A> プロパティです。 たとえば、このイベントは項目の追加、削除、または移動すると、または <xref:System.Windows.Forms.BindingSource.DataSource%2A> または <xref:System.Windows.Forms.BindingSource.DataMember%2A> プロパティが変更されます。 値、 <xref:System.Windows.Forms.BindingSource.Sort%2A> と <xref:System.Windows.Forms.BindingSource.Filter%2A> このイベントが発生したときに、プロパティは保持されます。  
  
 このイベントを完全に設定して抑制する、 <xref:System.Windows.Forms.BindingSource.RaiseListChangedEvents%2A> プロパティを `false`します。 イベント処理の詳細については、「[Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
   
  
## 例  
 次のコード例は、処理を示します、 <xref:System.Windows.Forms.BindingSource.ListChanged> のイベント、 <xref:System.Windows.Forms.BindingSource> コンポーネントを検出する、 <xref:System.Windows.Forms.BindingSource> コンポーネントの基になるリストを変更します。  
  
 [!code-cpp[System.Windows.Forms.DataConnector.ItemChangedEventMode\#9](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataConnector.ItemChangedEventMode/CPP/form1.cpp#9)]
 [!code-csharp[System.Windows.Forms.DataConnector.ItemChangedEventMode\#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataConnector.ItemChangedEventMode/CS/form1.cs#9)]
 [!code-vb[System.Windows.Forms.DataConnector.ItemChangedEventMode\#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataConnector.ItemChangedEventMode/VB/form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.BindingSource.List" />
        <altmember cref="M:System.Windows.Forms.BindingSource.OnListChanged(System.ComponentModel.ListChangedEventArgs)" />
        <altmember cref="P:System.Windows.Forms.BindingSource.RaiseListChangedEvents" />
        <altmember cref="T:System.ComponentModel.ListChangedType" />
        <altmember cref="E:System.Windows.Forms.BindingSource.CurrentChanged" />
        <altmember cref="E:System.Windows.Forms.BindingSource.CurrentItemChanged" />
      </Docs>
    </Member>
    <Member MemberName="MoveFirst">
      <MemberSignature Language="C#" Value="public void MoveFirst ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveFirst() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.MoveFirst" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>リストの最初の項目に移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 現在の値を変更、 <xref:System.Windows.Forms.BindingSource.Position%2A> プロパティを 0 に、基になるデータ ソースの最初の項目。  
  
   
  
## 例  
 次のコード例を示しています、 <xref:System.Windows.Forms.BindingSource.MoveNext%2A>, 、<xref:System.Windows.Forms.BindingSource.MoveFirst%2A>, 、<xref:System.Windows.Forms.BindingSource.Current%2A>, 、および <xref:System.Windows.Forms.BindingSource.Position%2A> メンバーです。 この例を実行するには、インポートするフォームにコードを貼り付けます、 <xref:System.Drawing.Drawing2D> 名前空間が含まれている、 <xref:System.Windows.Forms.BindingSource> という名前 `BindingSource1` という名前のボタンと `button1`です。 関連付ける、 `Form1_Load` と `Form1_Paint` メソッド、 <xref:System.Windows.Forms.Form.Load> と <xref:System.Windows.Forms.Control.Paint> フォーム、および関連のイベント、 `button1_click` メソッドを <xref:System.Windows.Forms.Control.Click> イベントを `button1`します。 Visual Basic の場合は、System.Data.dll への参照を追加する必要があります。  
  
 [!code-cpp[System.Windows.Forms.DataConnectorCurrent\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorCurrent/cpp/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.DataConnectorCurrent\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorCurrent/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.DataConnectorCurrent\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorCurrent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.BindingSource.List" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Position" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Count" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Current" />
        <altmember cref="M:System.Windows.Forms.BindingSource.MoveNext" />
        <altmember cref="M:System.Windows.Forms.BindingSource.MovePrevious" />
        <altmember cref="M:System.Windows.Forms.BindingSource.MoveLast" />
      </Docs>
    </Member>
    <Member MemberName="MoveLast">
      <MemberSignature Language="C#" Value="public void MoveLast ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveLast() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.MoveLast" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>リストの最後の項目に移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 現在の値を変更、 <xref:System.Windows.Forms.BindingSource.Position%2A> プロパティの値には、基になるデータ ソース内の最後の項目のインデックスを <xref:System.Windows.Forms.BindingSource.Count%2A> から 1 を引いたプロパティです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.BindingSource.List" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Position" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Count" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Current" />
        <altmember cref="M:System.Windows.Forms.BindingSource.MoveNext" />
        <altmember cref="M:System.Windows.Forms.BindingSource.MovePrevious" />
        <altmember cref="M:System.Windows.Forms.BindingSource.MoveFirst" />
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public void MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.MoveNext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>リストの次の項目に移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 現在の値を変更、 <xref:System.Windows.Forms.BindingSource.Position%2A> プロパティを基になるデータ ソースの次の項目。  
  
   
  
## 例  
 次のコード例を示しています、 <xref:System.Windows.Forms.BindingSource.MoveNext%2A>, 、<xref:System.Windows.Forms.BindingSource.MoveFirst%2A>, 、<xref:System.Windows.Forms.BindingSource.Current%2A>, 、および <xref:System.Windows.Forms.BindingSource.Position%2A> メンバーです。 この例を実行するには、インポートするフォームにコードを貼り付けます、 <xref:System.Drawing.Drawing2D> 名前空間が含まれている、 <xref:System.Windows.Forms.BindingSource> という名前 `BindingSource1` という名前のボタンと `button1`です。 関連付ける、 `Form1_Load` と `Form1_Paint` メソッド、 <xref:System.Windows.Forms.Form.Load> と <xref:System.Windows.Forms.Control.Paint> フォーム、および関連のイベント、 `button1_click` メソッドを <xref:System.Windows.Forms.Control.Click> イベントを `button1`します。 Visual Basic の場合は、System.Data.dll への参照を追加する必要があります。  
  
 [!code-cpp[System.Windows.Forms.DataConnectorCurrent\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorCurrent/cpp/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.DataConnectorCurrent\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorCurrent/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.DataConnectorCurrent\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorCurrent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.BindingSource.List" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Position" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Count" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Current" />
        <altmember cref="M:System.Windows.Forms.BindingSource.MoveLast" />
        <altmember cref="M:System.Windows.Forms.BindingSource.MovePrevious" />
        <altmember cref="M:System.Windows.Forms.BindingSource.MoveFirst" />
      </Docs>
    </Member>
    <Member MemberName="MovePrevious">
      <MemberSignature Language="C#" Value="public void MovePrevious ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MovePrevious() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.MovePrevious" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>リストの前の項目に移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの現在の値を変更する、 <xref:System.Windows.Forms.BindingSource.Position%2A> プロパティを基になるデータ ソースの前の項目。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.BindingSource.List" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Position" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Count" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Current" />
        <altmember cref="M:System.Windows.Forms.BindingSource.MoveLast" />
        <altmember cref="M:System.Windows.Forms.BindingSource.MoveNext" />
        <altmember cref="M:System.Windows.Forms.BindingSource.MoveFirst" />
      </Docs>
    </Member>
    <Member MemberName="OnAddingNew">
      <MemberSignature Language="C#" Value="protected virtual void OnAddingNew (System.ComponentModel.AddingNewEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAddingNew(class System.ComponentModel.AddingNewEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.OnAddingNew(System.ComponentModel.AddingNewEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.AddingNewEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.BindingSource.AddingNew" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.BindingSource.OnAddingNew%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.BindingSource.OnAddingNew(System.ComponentModel.AddingNewEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.BindingSource.OnAddingNew(System.ComponentModel.AddingNewEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.BindingSource.AddingNew" />
        <altmember cref="M:System.Windows.Forms.BindingSource.AddNew" />
        <altmember cref="M:System.Windows.Forms.BindingSource.OnListChanged(System.ComponentModel.ListChangedEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnBindingComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnBindingComplete (System.Windows.Forms.BindingCompleteEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBindingComplete(class System.Windows.Forms.BindingCompleteEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.BindingCompleteEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.BindingCompleteEventArgs" /> イベント データを格納します。</param>
        <summary>
          <see cref="E:System.Windows.Forms.BindingSource.BindingComplete" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.BindingSource.OnBindingComplete%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.BindingSource.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.BindingSource.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCurrentChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCurrentChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCurrentChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.OnCurrentChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.BindingSource.CurrentChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、「[Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.BindingSource.OnCurrentChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.BindingSource.OnCurrentChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.BindingSource.OnCurrentChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.BindingSource.CurrentChanged" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Current" />
        <altmember cref="M:System.Windows.Forms.BindingSource.OnCurrentItemChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnCurrentItemChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCurrentItemChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCurrentItemChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.OnCurrentItemChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.BindingSource.CurrentItemChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.BindingSource.OnCurrentItemChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.BindingSource.OnCurrentItemChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.BindingSource.OnCurrentItemChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.BindingSource.Current" />
        <altmember cref="E:System.Windows.Forms.BindingSource.CurrentItemChanged" />
        <altmember cref="M:System.Windows.Forms.BindingSource.OnCurrentChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnDataError">
      <MemberSignature Language="C#" Value="protected virtual void OnDataError (System.Windows.Forms.BindingManagerDataErrorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDataError(class System.Windows.Forms.BindingManagerDataErrorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.OnDataError(System.Windows.Forms.BindingManagerDataErrorEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.BindingManagerDataErrorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.BindingManagerDataErrorEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.BindingSource.DataError" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.BindingSource.OnDataError%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.BindingSource.OnDataError(System.Windows.Forms.BindingManagerDataErrorEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.BindingSource.OnDataError(System.Windows.Forms.BindingManagerDataErrorEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDataMemberChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnDataMemberChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDataMemberChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.OnDataMemberChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.BindingSource.DataMemberChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.BindingSource.OnDataMemberChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.BindingSource.OnDataMemberChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.BindingSource.OnDataMemberChanged(System.EventArgs)" /> method so that registered delegates receive the event.  
  
 The <see cref="M:System.Windows.Forms.BindingSource.OnDataMemberChanged(System.EventArgs)" /> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.BindingSource.DataMemberChanged" />
        <altmember cref="P:System.Windows.Forms.BindingSource.DataMember" />
        <altmember cref="M:System.Windows.Forms.BindingSource.OnDataSourceChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnDataSourceChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnDataSourceChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDataSourceChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.OnDataSourceChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.BindingSource.DataSourceChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.BindingSource.OnDataSourceChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.BindingSource.OnDataSourceChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.BindingSource.OnDataSourceChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.BindingSource.DataSourceChanged" />
        <altmember cref="P:System.Windows.Forms.BindingSource.DataSource" />
        <altmember cref="M:System.Windows.Forms.BindingSource.OnDataMemberChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnListChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnListChanged (System.ComponentModel.ListChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnListChanged(class System.ComponentModel.ListChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.OnListChanged(System.ComponentModel.ListChangedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.ListChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.BindingSource.ListChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.BindingSource.OnListChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.BindingSource.OnListChanged(System.ComponentModel.ListChangedEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.BindingSource.OnListChanged(System.ComponentModel.ListChangedEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.BindingSource.ListChanged" />
        <altmember cref="E:System.Windows.Forms.BindingSource.DataSourceChanged" />
        <altmember cref="P:System.Windows.Forms.BindingSource.List" />
      </Docs>
    </Member>
    <Member MemberName="OnPositionChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPositionChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPositionChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.OnPositionChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.ComponentModel.ListChangedEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.BindingSource.PositionChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.BindingSource.OnPositionChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.BindingSource.OnPositionChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.BindingSource.OnPositionChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.BindingSource.PositionChanged" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Position" />
        <altmember cref="M:System.Windows.Forms.BindingSource.OnCurrentChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public int Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Position" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingSource.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>基底のリストにおける現在の項目のインデックスを取得または設定します。</summary>
        <value>基底のリストにおける現在の項目の位置を指定する 0 から始まるインデックス。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 設定するときに、 <xref:System.Windows.Forms.BindingSource.Position%2A> プロパティには、範囲外の値は次のように扱われます。  
  
-   負の値は 0 として扱われます。  
  
-   値より大きいまたは等しい <xref:System.Windows.Forms.BindingSource.Count%2A> として扱われます <xref:System.Windows.Forms.BindingSource.Count%2A> \-1 です。  
  
 変更する、 <xref:System.Windows.Forms.BindingSource.Position%2A> プロパティは調整、 <xref:System.Windows.Forms.BindingSource.Current%2A> プロパティ同様にします。  
  
   
  
## 例  
 次のコード例を示しています、 <xref:System.Windows.Forms.BindingSource.MoveNext%2A>, 、<xref:System.Windows.Forms.BindingSource.MoveFirst%2A>, 、<xref:System.Windows.Forms.BindingSource.Current%2A>, 、および <xref:System.Windows.Forms.BindingSource.Position%2A> メンバーです。 この例を実行するには、インポートするフォームにコードを貼り付けます、 <xref:System.Drawing.Drawing2D> 名前空間が含まれている、 <xref:System.Windows.Forms.BindingSource> という名前 `BindingSource1` という名前のボタンと `button1`です。 関連付ける、 `Form1_Load` と `Form1_Paint` メソッド、 <xref:System.Windows.Forms.Form.Load> と <xref:System.Windows.Forms.Control.Paint> フォーム、および関連のイベント、 `button1_click` メソッドを <xref:System.Windows.Forms.Control.Click> イベントを `button1`します。 Visual Basic の場合は、System.Data.dll への参照を追加する必要があります。  
  
 [!code-cpp[System.Windows.Forms.DataConnectorCurrent\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorCurrent/cpp/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.DataConnectorCurrent\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorCurrent/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.DataConnectorCurrent\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorCurrent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.BindingSource.List" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Current" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Count" />
      </Docs>
    </Member>
    <Member MemberName="PositionChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PositionChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PositionChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.BindingSource.PositionChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>値の後に発生する、 <see cref="P:System.Windows.Forms.BindingSource.Position" /> プロパティが変更されました。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.BindingSource.PositionChanged> イベントが発生した後、 <xref:System.Windows.Forms.BindingSource.Position%2A> プロパティが変更されました。  
  
 イベント処理の詳細については、「[Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.BindingSource.Position" />
        <altmember cref="M:System.Windows.Forms.BindingSource.OnPositionChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="RaiseListChangedEvents">
      <MemberSignature Language="C#" Value="public bool RaiseListChangedEvents { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RaiseListChangedEvents" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingSource.RaiseListChangedEvents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を示す値かどうか <see cref="E:System.Windows.Forms.BindingSource.ListChanged" /> イベントが発生する必要があります。</summary>
        <value>
          <see langword="true" /> 場合 <see cref="E:System.Windows.Forms.BindingSource.ListChanged" /> イベントが発生した以外にする必要があります <see langword="false" />します。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、 <xref:System.Windows.Forms.BindingSource.RaiseListChangedEvents%2A> プロパティは、 `false`, 、中断の発生 <xref:System.Windows.Forms.BindingSource.ListChanged> イベントです。 このイベントは、追加、削除、挿入、または項目の変更など、何らかの方法でバインドされたリストが変更されたことを示します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.BindingSource.List" />
        <altmember cref="E:System.Windows.Forms.BindingSource.ListChanged" />
        <altmember cref="E:System.Windows.Forms.BindingSource.CurrentItemChanged" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual void Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.Remove(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">によって表される基底のリストから削除する項目、 <see cref="P:System.Windows.Forms.BindingSource.List" /> プロパティです。</param>
        <summary>指定した項目をリストから削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.BindingSource.Remove%2A> メソッドにより、リストを検索するが、 `value` パラメーター。 かどうか、このメソッドはしようから項目を削除する、 <xref:System.Windows.Forms.BindingSource.List%2A>です。 一覧のサイズが固定されては読み取り専用である場合、この試行は失敗します。 これら 2 つの条件をチェックできます、 <xref:System.Windows.Forms.BindingSource.IsFixedSize%2A> と <xref:System.Windows.Forms.BindingSource.IsReadOnly%2A> プロパティそれぞれします。  
  
 このメソッドを生成、 <xref:System.Windows.Forms.BindingSource.ListChanged> イベントです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">基になるリストでは、サイズが固定されてまたは読み取り専用です。</exception>
        <altmember cref="M:System.Windows.Forms.BindingSource.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.BindingSource.RemoveCurrent" />
        <altmember cref="P:System.Windows.Forms.BindingSource.List" />
        <altmember cref="P:System.Windows.Forms.BindingSource.IsFixedSize" />
        <altmember cref="P:System.Windows.Forms.BindingSource.IsReadOnly" />
        <altmember cref="M:System.Windows.Forms.BindingSource.Insert(System.Int32,System.Object)" />
        <altmember cref="M:System.Windows.Forms.BindingSource.Add(System.Object)" />
        <altmember cref="M:System.Windows.Forms.BindingSource.AddNew" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public virtual void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.RemoveAt(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">削除する項目の 0 から始まるインデックス。</param>
        <summary>リスト内の指定したインデックスにある項目を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これら 2 つの条件をチェックできます、 <xref:System.Windows.Forms.BindingSource.IsFixedSize%2A> と <xref:System.Windows.Forms.BindingSource.IsReadOnly%2A> プロパティそれぞれします。  
  
 このメソッドを生成、 <xref:System.Windows.Forms.BindingSource.ListChanged> イベントです。  
  
   
  
## 例  
 次のコード例を示しています、 <xref:System.Windows.Forms.BindingSource.List%2A>, 、<xref:System.Windows.Forms.BindingSource.RemoveAt%2A>, 、および <xref:System.Windows.Forms.BindingSource.Count%2A> メンバーです。 この例を実行するを含むフォームにコードを貼り付けます、 <xref:System.Windows.Forms.BindingSource> という名前 `BindingSource1`, 、という名前の 2 つのラベル `label1` と `label2`, という名前のボタン `button1`します。 関連付ける、 `button1_Click` メソッドを <xref:System.Windows.Forms.Control.Click> イベントを `button1`します。 Visual Basic の場合は、System.Data.dll への参照を追加する必要があります。  
  
 [!code-csharp[System.Windows.Forms.DataConnectorFilterAndSort\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorFilterAndSort/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.DataConnectorFilterAndSort\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorFilterAndSort/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 0 以下の値よりも大きい、 <see cref="P:System.Windows.Forms.BindingSource.Count" /> プロパティです。</exception>
        <exception cref="T:System.NotSupportedException">によって表される基底のリスト、 <see cref="P:System.Windows.Forms.BindingSource.List" /> プロパティは読み取り専用または固定サイズが使用されています。</exception>
        <altmember cref="M:System.Windows.Forms.BindingSource.RemoveCurrent" />
        <altmember cref="M:System.Windows.Forms.BindingSource.Remove(System.Object)" />
        <altmember cref="P:System.Windows.Forms.BindingSource.List" />
        <altmember cref="P:System.Windows.Forms.BindingSource.IsFixedSize" />
        <altmember cref="P:System.Windows.Forms.BindingSource.IsReadOnly" />
        <altmember cref="M:System.Windows.Forms.BindingSource.IndexOf(System.Object)" />
        <altmember cref="M:System.Windows.Forms.BindingSource.Insert(System.Int32,System.Object)" />
        <altmember cref="M:System.Windows.Forms.BindingSource.Add(System.Object)" />
        <altmember cref="M:System.Windows.Forms.BindingSource.AddNew" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public void RemoveCurrent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveCurrent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.RemoveCurrent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>リストから現在の項目を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.BindingSource.RemoveCurrent%2A> メソッドは、 <xref:System.Windows.Forms.BindingSource.RemoveAt%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.BindingSource.AllowRemove" /> プロパティが <see langword="false" /> です。  
  
 または  
  
 <see cref="P:System.Windows.Forms.BindingSource.Position" /> 0 より大きいか小さい <see cref="P:System.Windows.Forms.BindingSource.Count" />します。</exception>
        <exception cref="T:System.NotSupportedException">によって表される基底のリスト、 <see cref="P:System.Windows.Forms.BindingSource.List" /> プロパティは読み取り専用または固定サイズが使用されています。</exception>
        <altmember cref="P:System.Windows.Forms.BindingSource.List" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Position" />
        <altmember cref="M:System.Windows.Forms.BindingSource.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.BindingSource.Add(System.Object)" />
        <altmember cref="M:System.Windows.Forms.BindingSource.Insert(System.Int32,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveFilter">
      <MemberSignature Language="C#" Value="public virtual void RemoveFilter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveFilter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.RemoveFilter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>関連付けられているフィルターを削除、 <see cref="T:System.Windows.Forms.BindingSource" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.BindingSource.RemoveFilter%2A> メソッドは、要求を基になるリストの参照 <xref:System.ComponentModel.IBindingListView.RemoveFilter%2A?displayProperty=fullName> メソッドです。 実装するに過ぎない <xref:System.ComponentModel.IBindingListView> フィルタ リングをサポートします。  
  
 既定では、このメソッドの呼び出しは同じことに、 <xref:System.Windows.Forms.BindingSource.Filter%2A> プロパティを `null`します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">基になるリストでは、フィルター処理することはできません。</exception>
        <altmember cref="P:System.Windows.Forms.BindingSource.Filter" />
      </Docs>
    </Member>
    <Member MemberName="RemoveSort">
      <MemberSignature Language="C#" Value="public virtual void RemoveSort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveSort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.RemoveSort" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>関連付けられている並べ替えを削除、 <see cref="T:System.Windows.Forms.BindingSource" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.BindingSource.RemoveSort%2A> メソッドは、要求を基になるリストの参照 <xref:System.ComponentModel.IBindingList.RemoveSort%2A?displayProperty=fullName> メソッドです。 実装するに過ぎない <xref:System.ComponentModel.IBindingList> 並べ替えをサポートします。  
  
 既定では、このメソッドの呼び出しは同じことに、 <xref:System.Windows.Forms.BindingSource.Sort%2A> プロパティを `null`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">基になるリストが並べ替えをサポートしていません。</exception>
        <altmember cref="P:System.Windows.Forms.BindingSource.Sort" />
      </Docs>
    </Member>
    <Member MemberName="ResetAllowNew">
      <MemberSignature Language="C#" Value="public virtual void ResetAllowNew ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetAllowNew() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.ResetAllowNew" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>再初期化、 <see cref="P:System.Windows.Forms.BindingSource.AllowNew" /> プロパティです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.BindingSource.ResetAllowNew%2A> メソッドの再初期化、 <xref:System.Windows.Forms.BindingSource.AllowNew%2A> プロパティの対応する値を反映するように <xref:System.Windows.Forms.BindingSource.AllowNew%2A> 基になるリスト内のプロパティです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.BindingSource.AllowNew" />
      </Docs>
    </Member>
    <Member MemberName="ResetBindings">
      <MemberSignature Language="C#" Value="public void ResetBindings (bool metadataChanged);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetBindings(bool metadataChanged) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.ResetBindings(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadataChanged" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="metadataChanged">
          <see langword="true" /> データ スキーマが変更された場合 <see langword="false" /> 値が変更された場合のみです。</param>
        <summary>
          <see cref="T:System.Windows.Forms.BindingSource" /> にバインドされたコントロールに対し、リスト内のすべての項目を再度読み込んで表示値を更新するよう通知します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.BindingSource.ResetBindings%2A> メソッドにバインドされているすべてのコントロールの通知、 <xref:System.Windows.Forms.BindingSource> をその値を更新します。 メソッドが発生させることによって、 <xref:System.Windows.Forms.BindingSource.ListChanged> イベントを少なくとも 1 回、 `metaDataChanged` パラメーターを基になる変更の性質を示します。  
  
-   A `metaDataChanged` の値 `true` ことを示しますのデータ スキーマ <xref:System.Windows.Forms.BindingSource> が変更されました。 A <xref:System.Windows.Forms.BindingSource.ListChanged> イベントが発生 <xref:System.ComponentModel.ListChangedEventArgs.ListChangedType?displayProperty=fullName> 設定 <xref:System.ComponentModel.ListChangedType.PropertyDescriptorChanged?displayProperty=fullName>します。  
  
-   A `metaDataChanged` の値 `false` 1 つまたは複数の項目の値のみが変更されたことを示します。  
  
 値に関係なく `metaDataChanged`, 、 <xref:System.Windows.Forms.BindingSource.ListChanged> イベントが発生 <xref:System.ComponentModel.ListChangedEventArgs.ListChangedType?displayProperty=fullName> 設定 <xref:System.ComponentModel.ListChangedType.Reset?displayProperty=fullName>します。 その結果を呼び出す <xref:System.Windows.Forms.BindingSource.ResetBindings%2A> のパラメーターを持つ `true` 2 つを発生させる <xref:System.Windows.Forms.BindingSource.ListChanged> イベントです。  
  
 <xref:System.Windows.Forms.BindingSource.ResetBindings%2A> 別のメンバーによって設定のデータのバインドが主要な変更されるたびに、自動的に呼び出されますが、 <xref:System.Windows.Forms.BindingSource.DataSource%2A> または <xref:System.Windows.Forms.BindingSource.DataMember%2A> プロパティです。 ただし、プログラマでは、このメソッドが明示的に呼び出してもできます。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Windows.Forms.BindingSource> 変更通知を提供しない配列のリストをバインドするコンポーネントです。 項目がリストから削除し、バインドされたコントロールに呼び出すことによって変更の通知、 <xref:System.Windows.Forms.BindingSource.ResetBindings%2A> メソッドです。 このコード例に示されている例の一部である [How to: Reflect Data Source Updates in a Windows Forms Control with the BindingSource](http://msdn.microsoft.com/ja-jp/bd8bd9b2-af8a-4f11-a3d5-54eecbe2400b)です。  
  
 [!code-cpp[System.Windows.Forms.DataConnector.ResetBindings\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataConnector.ResetBindings/CPP/form1.cpp#3)]
 [!code-csharp[System.Windows.Forms.DataConnector.ResetBindings\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataConnector.ResetBindings/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.DataConnector.ResetBindings\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataConnector.ResetBindings/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.BindingSource.List" />
        <altmember cref="M:System.Windows.Forms.BindingSource.ResetItem(System.Int32)" />
        <altmember cref="E:System.Windows.Forms.BindingSource.ListChanged" />
        <altmember cref="T:System.ComponentModel.ListChangedType" />
      </Docs>
    </Member>
    <Member MemberName="ResetCurrentItem">
      <MemberSignature Language="C#" Value="public void ResetCurrentItem ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetCurrentItem() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.ResetCurrentItem" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>バインドされたコントロール、 <see cref="T:System.Windows.Forms.BindingSource" /> 現在選択されている項目を再読み込みし、表示値を更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、通話、 <xref:System.Windows.Forms.BindingSource.ListChanged> イベントが発生すると、現在の位置で変更されたアイテムを指定します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetItem">
      <MemberSignature Language="C#" Value="public void ResetItem (int itemIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetItem(int32 itemIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.ResetItem(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="itemIndex">変更された項目の、0 から始まるインデックス。</param>
        <summary>バインドされたコントロール、 <see cref="T:System.Windows.Forms.BindingSource" /> を指定したインデックス位置にある項目を読み込んで表示値を更新しています。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.BindingSource.ResetItem%2A> メソッドは、指定した位置にある項目にバインドされているすべてのコントロールに通知 <xref:System.Windows.Forms.BindingSource.Position%2A> をその値を更新します。 メソッドが発生させることによって、 <xref:System.Windows.Forms.BindingSource.ListChanged> イベントと <xref:System.ComponentModel.ListChangedEventArgs.ListChangedType?displayProperty=fullName> に設定 <xref:System.ComponentModel.ListChangedType.ItemChanged?displayProperty=fullName>します。  
  
 <xref:System.Windows.Forms.BindingSource.ResetItem%2A> 個々 の項目の値に変更を加えるたびに呼び出されます自動的には。 ただし、プログラマでは、このメソッドが明示的に呼び出してもできます。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Windows.Forms.BindingSource> リストにバインドするコンポーネント、 <xref:System.Windows.Forms.DataGridView> コントロールです。 一覧は変更通知を発生していないため、 <xref:System.Windows.Forms.BindingSource.ResetItem%2A> メソッドを <xref:System.Windows.Forms.BindingSource> を発生させるため、 <xref:System.Windows.Forms.BindingSource.ListChanged> イベントです。 このコード例に示されている例の一部である [How to: Raise Change Notifications Using the BindingSource ResetItem Method](http://msdn.microsoft.com/ja-jp/ab8b4096-37ff-4e30-aabc-de79a2f2e972)です。  
  
 [!code-cpp[System.Windows.Forms.DataConnector.ResetItem\#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataConnector.ResetItem/CPP/form1.cpp#7)]
 [!code-csharp[System.Windows.Forms.DataConnector.ResetItem\#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataConnector.ResetItem/CS/form1.cs#7)]
 [!code-vb[System.Windows.Forms.DataConnector.ResetItem\#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataConnector.ResetItem/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.BindingSource.ResetBindings(System.Boolean)" />
        <altmember cref="P:System.Windows.Forms.BindingSource.Position" />
        <altmember cref="E:System.Windows.Forms.BindingSource.ListChanged" />
        <altmember cref="T:System.ComponentModel.ListChangedType" />
      </Docs>
    </Member>
    <Member MemberName="ResumeBinding">
      <MemberSignature Language="C#" Value="public void ResumeBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResumeBinding() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.ResumeBinding" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>データ バインディングを再開します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.BindingSource.SuspendBinding%2A> <xref:System.Windows.Forms.BindingSource.ResumeBinding%2A> 単純なバインドのシナリオでは一時中断とデータ バインディングの再開を許可する方法は 2 つです。 通常、検証が行われる前に、ユーザー データ フィールドの編集を許可する必要がある場合は、データ バインディングを中断します。 たとえば、秒、に従って 1 つのフィールドを変更する必要がありますが、検証された時点の最初のフィールドとエラーが発生する 2 番目のフィールドを起こします。  
  
> [!NOTE]
>  使用して <xref:System.Windows.Forms.BindingSource.SuspendBinding%2A> ことを防止するまでのデータ ソースに押して離した <xref:System.Windows.Forms.BindingSource.ResumeBinding%2A> が呼び出されるしますが、実際には、イベントが発生します。 複合データ バインドを使用してコントロール、 <xref:System.Windows.Forms.DataGridView> 制御、変更イベントに基づいて、その値を更新、 <xref:System.Windows.Forms.CurrencyManager.ListChanged> のでを呼び出すイベント <xref:System.Windows.Forms.BindingSource.SuspendBinding%2A> データ ソースへの変更を受信できなくなります。 このため、この <xref:System.Windows.Forms.BindingSource.SuspendBinding%2A> と <xref:System.Windows.Forms.BindingSource.ResumeBinding%2A> 単純バインド コントロールで使用するように設計されていますが、 <xref:System.Windows.Forms.TextBox> コントロールです。 代わりこれらのメソッド複合バインディングのシナリオでは非表示にする場合は、 <xref:System.Windows.Forms.BindingSource.ListChanged> イベントを設定して、 <xref:System.Windows.Forms.BindingSource.RaiseListChangedEvents%2A> プロパティを `false`します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.CurrencyManager.ResumeBinding" />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public string Sort { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Sort" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingSource.Sort" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>並べ替えに使用する列名と、データ ソースで行を表示するときの並べ替え順序を取得または設定します。</summary>
        <value>列名の後に "ASC" \(昇順\) または "DESC" \(降順\) を付けた、大文字と小文字が区別される文字列。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.BindingSource.Sort%2A> プロパティは、大文字小文字を区別、並べ替えの方向のほかに、行の並べ替えに使用する列名を指定する文字列。 既定では列は昇順で並べ替えられます。 複数の列をなど、コンマで区切ることができます `"State, ZipCode DESC"`します。  
  
 並べ替えをサポートする基底のリストを実装する必要があります、 <xref:System.ComponentModel.IBindingList> または <xref:System.ComponentModel.IBindingListView> インターフェイスです。 この機能で照会できる、 <xref:System.Windows.Forms.BindingSource.SupportsSorting%2A> プロパティです。 複数列の並べ替えは、使用可能な場合に、 <xref:System.Windows.Forms.BindingSource.SupportsAdvancedSorting%2A> プロパティは `true`です。  
  
 設定、 <xref:System.Windows.Forms.BindingSource.Sort%2A> プロパティはその種類に応じて内部リストを変更します。  
  
-   リストの型の場合 <xref:System.ComponentModel.IBindingList>, 、 <xref:System.ComponentModel.IBindingList.SortProperty%2A?displayProperty=fullName> と <xref:System.ComponentModel.IBindingList.SortDirection%2A?displayProperty=fullName> 内部リストにプロパティが設定されます。  
  
-   リストの型の場合 <xref:System.ComponentModel.IBindingListView>, 、 <xref:System.ComponentModel.IBindingListView.SortDescriptions%2A?displayProperty=fullName> プロパティを設定します。  
  
 内部リストの並べ替えプロパティが変更される並べ替え文字列が `null`です。`get` このプロパティのアクセサーは内部リストの並べ替えの値を取得できません。 代わりに、返すは、 `set` アクセサー値。 値、 <xref:System.Windows.Forms.BindingSource.Sort%2A> データ ソースが変更されたときに、プロパティは保持されます。  
  
   
  
## 例  
 次の例では、使用する方法、 <xref:System.Windows.Forms.BindingSource.Sort%2A> プロパティで、基本的な並べ替えを実行する、 <xref:System.Data.DataView>です。 この例を実行するには、Windows フォームと呼び出しにコードを貼り付けます `PopulateDataViewAndSort` フォームのコンス トラクターからまたは <xref:System.Windows.Forms.Form.Load> イベント処理メソッドです。 フォームをインポートする必要があります、 <xref:System.Xml> と <xref:System.IO> 名前空間。  
  
 [!code-csharp[System.Windows.Forms.BindingSourceMethods\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.BindingSourceMethods/CS/Form1.cs#2)]
 [!code-vb[System.Windows.Forms.BindingSourceMethods\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.BindingSourceMethods/VB/Form1.vb#2)]  
  
 次の例を使用する方法を示しています、 <xref:System.Windows.Forms.BindingSource.Sort%2A> プロパティを実行する高度なと並べ替え、 <xref:System.Data.DataView>です。 この例を実行するには、Windows フォームと呼び出しにコードを貼り付けます `PopulateDataViewAndAdvancedSort` フォームのコンス トラクターからまたは <xref:System.Windows.Forms.Form.Load> イベント処理メソッドです。 フォームをインポートする必要があります、 <xref:System.Xml> と <xref:System.IO> 名前空間。  
  
 [!code-csharp[System.Windows.Forms.BindingSourceMethods\#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.BindingSourceMethods/CS/Form1.cs#4)]
 [!code-vb[System.Windows.Forms.BindingSourceMethods\#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.BindingSourceMethods/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.BindingSource.Filter" />
        <altmember cref="M:System.Windows.Forms.BindingSource.RemoveSort" />
      </Docs>
    </Member>
    <Member MemberName="SortDescriptions">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.ListSortDescriptionCollection SortDescriptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ListSortDescriptionCollection SortDescriptions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingSource.SortDescriptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ListSortDescriptionCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソースに適用される並べ替えに関する説明のコレクションを取得します。</summary>
        <value>データ ソースがある場合、 <see cref="T:System.ComponentModel.IBindingListView" />, 、 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> は、リストに適用される並べ替えに関する説明を格納している場合は、 <see langword="null" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一覧にある場合、 <xref:System.ComponentModel.IBindingListView>, 、 <xref:System.Windows.Forms.BindingSource.SortDescriptions%2A> は常に返します `null`します。  
  
 <xref:System.ComponentModel.ListSortDescriptionCollection> は読み取り専用コレクション。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SortDirection">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.ListSortDirection SortDirection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ComponentModel.ListSortDirection SortDirection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingSource.SortDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ListSortDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>リスト項目の並べ替え方向を取得します。</summary>
        <value>いずれか、 <see cref="T:System.ComponentModel.ListSortDirection" /> 方向を示す値の一覧が並べ替えられます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 基になるリストがない場合、 <xref:System.ComponentModel.IBindingList>, 、 <xref:System.Windows.Forms.BindingSource.SortDirection%2A> プロパティは常に返す <xref:System.ComponentModel.ListSortDirection.Ascending>します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SortProperty">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.PropertyDescriptor SortProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.PropertyDescriptor SortProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingSource.SortProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.ComponentModel.PropertyDescriptor" /> リストの並べ替えに使用されています。</summary>
        <value>リストの場合、 <see cref="T:System.ComponentModel.IBindingList" />, 、 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 並べ替えに使用されます。 それ以外の場合、対象が <see langword="null" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一覧にある場合、 <xref:System.ComponentModel.IBindingList>, 、<xref:System.Windows.Forms.BindingSource.SortProperty%2A> は常に返します `null`します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsAdvancedSorting">
      <MemberSignature Language="C#" Value="public virtual bool SupportsAdvancedSorting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsAdvancedSorting" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingSource.SupportsAdvancedSorting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソースが複数列の並べ替えをサポートしているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> リストの場合、 <see cref="T:System.ComponentModel.IBindingListView" /> 複数列の並べ替えをサポートしているとそれ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一覧にある場合、 <xref:System.ComponentModel.IBindingListView>, 、<xref:System.Windows.Forms.BindingSource.SupportsAdvancedSorting%2A> は常に返します `false`します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsChangeNotification">
      <MemberSignature Language="C#" Value="public virtual bool SupportsChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsChangeNotification" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingSource.SupportsChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソースが変更通知をサポートしているかどうかを示す値を取得します。</summary>
        <value>常に <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsFiltering">
      <MemberSignature Language="C#" Value="public virtual bool SupportsFiltering { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsFiltering" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingSource.SupportsFiltering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソースがフィルター処理をサポートしているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> リストの場合、 <see cref="T:System.ComponentModel.IBindingListView" /> フィルタ リングをサポートしてそれ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一覧にある場合、 <xref:System.ComponentModel.IBindingListView>, 、<xref:System.Windows.Forms.BindingSource.SupportsFiltering%2A> は常に返します `false`します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsSearching">
      <MemberSignature Language="C#" Value="public virtual bool SupportsSearching { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsSearching" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingSource.SupportsSearching" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソースが検索をサポートしているかどうかを示す値を取得、 <see cref="M:System.Windows.Forms.BindingSource.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> メソッドです。</summary>
        <value>
          <see langword="true" /> リストの場合、 <see cref="T:System.ComponentModel.IBindingList" /> で検索をサポートし、 <see cref="Overload:System.Windows.Forms.BindingSource.Find" /> メソッド以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 データ ソースがない場合、 <xref:System.ComponentModel.IBindingList>, 、<xref:System.Windows.Forms.BindingSource.SupportsSearching%2A> は常に返します `false`します。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.BindingSource.SupportsSearching%2A> メンバーです。 完全な例は、クラスの概要に関するトピックを参照してください。  
  
 [!code-csharp[System.Windows.Forms.BindingSourceAndBindingListOfT\#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.BindingSourceAndBindingListOfT/CS/Form1.cs#4)]
 [!code-vb[System.Windows.Forms.BindingSourceAndBindingListOfT\#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.BindingSourceAndBindingListOfT/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsSorting">
      <MemberSignature Language="C#" Value="public virtual bool SupportsSorting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsSorting" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingSource.SupportsSorting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソースが並べ替えをサポートしているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> データ ソースがある場合、 <see cref="T:System.ComponentModel.IBindingList" /> ; の並べ替えをサポートし、それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 データ ソースがない場合、 <xref:System.ComponentModel.IBindingList>, 、 <xref:System.Windows.Forms.BindingSource.SupportsSorting%2A> プロパティは常に返します `false`します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SuspendBinding">
      <MemberSignature Language="C#" Value="public void SuspendBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SuspendBinding() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.SuspendBinding" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>データ バインディングに伴う変更によるバインド データ ソースの更新を中断します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.BindingSource.SuspendBinding%2A>および<xref:System.Windows.Forms.BindingSource.ResumeBinding%2A>単純バインディング シナリオでは一時中断とデータ バインディングの再開を許可する方法は 2 つです。 通常、いくつかの編集を行えないをデータ フィールドに検証が行われる前にユーザーを許可する必要がある場合は、データ バインディングを中断します。 たとえば、に従ってを 2 回、1 つのフィールドを変更する必要がありますが、検証された時点最初のフィールドにエラーが発生する 2 番目のフィールドとが発生します。  
  
> [!NOTE]
>  使用して<xref:System.Windows.Forms.BindingSource.SuspendBinding%2A>ことを防止するまで、データ ソースにプッシュされると<xref:System.Windows.Forms.BindingSource.ResumeBinding%2A>が呼び出されるしますが、実際には、イベントが発生します。 など、複合データ バインディングを使用するコントロール、<xref:System.Windows.Forms.DataGridView>などの変更イベントに基づくの値を更新、制御、<xref:System.Windows.Forms.CurrencyManager.ListChanged>呼び出すので、イベント<xref:System.Windows.Forms.BindingSource.SuspendBinding%2A>がないようにデータ ソースへの変更を受信します。 このため、この<xref:System.Windows.Forms.BindingSource.SuspendBinding%2A>と<xref:System.Windows.Forms.BindingSource.ResumeBinding%2A>単純バインド コントロールで使用するように設計されていますが、<xref:System.Windows.Forms.TextBox>コントロール。 またはこれらのメソッドで使える複合バインディング シナリオを抑制する場合<xref:System.Windows.Forms.BindingSource.ListChanged>イベントを設定して、<xref:System.Windows.Forms.BindingSource.RaiseListChangedEvents%2A>プロパティを`false`です。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.CurrencyManager.SuspendBinding" />
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public virtual object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingSource.SyncRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>基になるリストへのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
        <value>基になるリストへのアクセスを同期するために使用できるオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IBindingList.AddIndex">
      <MemberSignature Language="C#" Value="void IBindingList.AddIndex (System.ComponentModel.PropertyDescriptor property);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.IBindingList.AddIndex(class System.ComponentModel.PropertyDescriptor property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.ComponentModel.PropertyDescriptor" />
      </Parameters>
      <Docs>
        <param name="property">
          <see cref="T:System.ComponentModel.PropertyDescriptor" /> 検索に使用されるインデックスに追加します。</param>
        <summary>追加、 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 検索に使用されるインデックスにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 基になるリストがある場合、 <xref:System.ComponentModel.IBindingList> 型では、このメソッドは、追加、 <xref:System.ComponentModel.PropertyDescriptor> インデックス。 それ以外の場合、呼び出し元がスローされます、 <xref:System.NotSupportedException>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">基になるリストが、 <see cref="T:System.ComponentModel.IBindingList" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IBindingList.RemoveIndex">
      <MemberSignature Language="C#" Value="void IBindingList.RemoveIndex (System.ComponentModel.PropertyDescriptor prop);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.IBindingList.RemoveIndex(class System.ComponentModel.PropertyDescriptor prop) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prop" Type="System.ComponentModel.PropertyDescriptor" />
      </Parameters>
      <Docs>
        <param name="prop">
          <see cref="T:System.ComponentModel.PropertyDescriptor" /> 検索に使用されるインデックスから削除します。</param>
        <summary>削除、 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 検索に使用されるインデックスからです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 基になるリストがない場合、 <xref:System.ComponentModel.IBindingList?displayProperty=fullName>, 、このメソッドは常にスロー、 <xref:System.NotSupportedException>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.ICancelAddNew.CancelNew">
      <MemberSignature Language="C#" Value="void ICancelAddNew.CancelNew (int position);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.ICancelAddNew.CancelNew(int32 position) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.System#ComponentModel#ICancelAddNew#CancelNew(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="position">コレクションに追加された項目のインデックス。</param>
        <summary>保留中の新しい項目をコレクションから破棄します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.BindingSource.System%23ComponentModel%23ICancelAddNew%23CancelNew%2A> メソッドが保留中のコレクションで指定されたインデックス位置に追加した項目の追加をロールバック `position`します。`position` パラメーターは、いくつかの新しい項目が同時に保留されているために必要です。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.ICancelAddNew.CancelNew(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.ICancelAddNew.EndNew">
      <MemberSignature Language="C#" Value="void ICancelAddNew.EndNew (int position);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.ICancelAddNew.EndNew(int32 position) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.System#ComponentModel#ICancelAddNew#EndNew(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="position">コレクションに追加された項目のインデックス。</param>
        <summary>保留中の新しい項目をコレクションにコミットします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.BindingSource.System%23ComponentModel%23ICancelAddNew%23EndNew%2A> メソッドは、コレクションで指定されたインデックス位置に追加した項目の追加の保留中、コミット `position`します。`position` パラメーターは、いくつかの新しい項目が同時に保留されているために必要です。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.ICancelAddNew.EndNew(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.ISupportInitialize.BeginInit">
      <MemberSignature Language="C#" Value="void ISupportInitialize.BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.ISupportInitialize.BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.System#ComponentModel#ISupportInitialize#BeginInit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>シグナル、 <see cref="T:System.Windows.Forms.BindingSource" /> その初期化を開始します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.ISupportInitialize.EndInit">
      <MemberSignature Language="C#" Value="void ISupportInitialize.EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.ISupportInitialize.EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingSource.System#ComponentModel#ISupportInitialize#EndInit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>シグナル、 <see cref="T:System.Windows.Forms.BindingSource" /> 初期化が完了します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.ISupportInitializeNotification.IsInitialized">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.ISupportInitializeNotification.IsInitialized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.ISupportInitializeNotification.IsInitialized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingSource.System#ComponentModel#ISupportInitializeNotification#IsInitialized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.BindingSource" /> が初期化されているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 示すために、 <see cref="T:System.Windows.Forms.BindingSource" /> が初期化されているそれ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Windows.Forms.BindingSource> のインスタンスが <xref:System.ComponentModel.ISupportInitializeNotification> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.BindingSource" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Find">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>データ ソースから指定された項目を検索します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ApplySort">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された並べ替えに関する説明に基づいて、データ ソースを並べ替えます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>