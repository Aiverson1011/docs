<Type Name="ContainerControl" FullName="System.Windows.Forms.ContainerControl">
  <TypeSignature Language="C#" Value="public class ContainerControl : System.Windows.Forms.ScrollableControl, System.Windows.Forms.IContainerControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ContainerControl extends System.Windows.Forms.ScrollableControl implements class System.Windows.Forms.IContainerControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ContainerControl" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.ScrollableControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Forms.IContainerControl</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>他のコントロールのコンテナーとして機能するコントロールにフォーカスを管理する機能を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Windows.Forms.ContainerControl> その他のコンテナーを制御し、フォーカスの管理機能を提供として機能するコントロールを表します。 このクラスから継承するコントロールには、そこに含まれるフォーカスが別のコンテナーにどこかに移動したときにもアクティブなコントロールを追跡できます。  
  
 <xref:System.Windows.Forms.ContainerControl> オブジェクトは、格納されているコントロールを論理的な境界を提供します。 コンテナー コントロールは、TAB キーが押さをキャプチャして、コレクション内の次のコントロールにフォーカスを移動できます。  
  
> [!NOTE]
>  コンテナー コントロールがフォーカスを受け取るできません。フォーカスは常に、格納されているコントロールのコレクションの最初の子コントロールに設定します。  
  
 通常から直接継承していない、 <xref:System.Windows.Forms.ContainerControl> クラスです。<xref:System.Windows.Forms.Form>, 、<xref:System.Windows.Forms.UserControl>, 、および <xref:System.Windows.Forms.UpDownBase> クラスから継承 <xref:System.Windows.Forms.ContainerControl>します。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.Form" />
    <altmember cref="T:System.Windows.Forms.UserControl" />
    <altmember cref="T:System.Windows.Forms.UpDownBase" />
    <altmember cref="T:System.Windows.Forms.IContainerControl" />
    <altmember cref="T:System.Windows.Forms.ScrollableControl" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContainerControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ContainerControl" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例から継承、 <xref:System.Windows.Forms.ScrollableControl> クラスを実装して、 <xref:System.Windows.Forms.IContainerControl> インターフェイスです。 実装を追加、 <xref:System.Windows.Forms.IContainerControl.ActiveControl%2A> プロパティおよび <xref:System.Windows.Forms.IContainerControl.ActivateControl%2A> メソッドです。  
  
 [!code-cpp[IContainerControl Implementation\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IContainerControl Implementation/CPP/mycontainercontrol.cpp#1)]
 [!code-csharp[IContainerControl Implementation\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IContainerControl Implementation/CS/mycontainercontrol.cs#1)]
 [!code-vb[IContainerControl Implementation\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IContainerControl Implementation/VB/mycontainercontrol.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActiveControl">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control ActiveControl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control ActiveControl" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ContainerControl.ActiveControl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンテナー コントロール上のアクティブ コントロールを取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.Control" /> で現在アクティブになっている、 <see cref="T:System.Windows.Forms.ContainerControl" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> プロパティでアクティブ化またはコンテナー コントロール上のアクティブ コントロールを取得します。  
  
 をこのプロパティから有効な値を受信するのには、含める必要がありますか、または、呼び出し元コントロールに含まれているを呼び出し元オブジェクト。 1 つのフォームを別の形式を呼び出そうとすると場合 <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> プロパティ、未定義の値が表示されます。 この場合、このデータを渡すためのフォーム間で、独自の通信メカニズムを定義する必要があります。  
  
   
  
## 例  
 次のコード例から継承、 <xref:System.Windows.Forms.ScrollableControl> クラスを実装して、 <xref:System.Windows.Forms.IContainerControl> インターフェイスです。 実装を追加、 <xref:System.Windows.Forms.IContainerControl.ActiveControl%2A> プロパティおよび <xref:System.Windows.Forms.IContainerControl.ActivateControl%2A> メソッドです。  
  
 [!code-cpp[IContainerControl Implementation\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IContainerControl Implementation/CPP/mycontainercontrol.cpp#1)]
 [!code-csharp[IContainerControl Implementation\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IContainerControl Implementation/CS/mycontainercontrol.cs#1)]
 [!code-vb[IContainerControl Implementation\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IContainerControl Implementation/VB/mycontainercontrol.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="T:System.Windows.Forms.Control" /> 割り当てられているアクティブ化できませんでした。</exception>
        <altmember cref="T:System.Windows.Forms.ScrollableControl" />
        <altmember cref="T:System.Windows.Forms.Control" />
      </Docs>
    </Member>
    <Member MemberName="AdjustFormScrollbars">
      <MemberSignature Language="C#" Value="protected override void AdjustFormScrollbars (bool displayScrollbars);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AdjustFormScrollbars(bool displayScrollbars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.AdjustFormScrollbars(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="displayScrollbars" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="displayScrollbars">スクロール バーを表示する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>現在のコントロールの位置、および現在選択されているコントロールを基準として、コンテナー上のスクロール バーを調整します。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.ScrollableControl.AdjustFormScrollbars(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="AutoScaleDimensions">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF AutoScaleDimensions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.SizeF AutoScaleDimensions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ContainerControl.AutoScaleDimensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールがデザインされたときの寸法を取得または設定します。</summary>
        <value>A <see cref="T:System.Drawing.SizeF" /> ドット\/インチ \(DPI\) を含むまたは <see cref="T:System.Drawing.Font" /> 、コントロールがデザインのサイズ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ContainerControl.AutoScaleDimensions%2A> プロパティは、コントロールにスケールまたは用に設計された、画面の DPI またはフォントの設定を表します。 具体的には、デザイン時にこのプロパティに設定されます、Windows フォーム デザイナーによって、値、モニターが現在使用しています。 次に、フォームの読み込み時に、実行時に場合は、 <xref:System.Windows.Forms.ContainerControl.CurrentAutoScaleDimensions%2A> プロパティとは異なる、 <xref:System.Windows.Forms.ContainerControl.AutoScaleDimensions%2A>, 、 <xref:System.Windows.Forms.ContainerControl.PerformAutoScale%2A> コントロールとそのすべての子のスケーリングを実行するメソッドが呼び出されます。 その後、 <xref:System.Windows.Forms.ContainerControl.AutoScaleDimensions%2A> 新しいスケール サイズを反映するように更新されます。  
  
 自動スケーリングの詳細については、次を参照してください。 [Automatic Scaling in Windows Forms](http://msdn.microsoft.com/ja-jp/68fad25b-afbc-44bd-8e1b-966fc43507a4)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">高さまたは幅、 <see cref="T:System.Drawing.SizeF" /> 値が 0 より小さい場合、この値を設定します。</exception>
        <altmember cref="P:System.Windows.Forms.ContainerControl.AutoScaleMode" />
        <altmember cref="P:System.Windows.Forms.ContainerControl.AutoScaleFactor" />
        <altmember cref="P:System.Windows.Forms.ContainerControl.CurrentAutoScaleDimensions" />
        <altmember cref="M:System.Windows.Forms.ContainerControl.PerformAutoScale" />
      </Docs>
    </Member>
    <Member MemberName="AutoScaleFactor">
      <MemberSignature Language="C#" Value="protected System.Drawing.SizeF AutoScaleFactor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.SizeF AutoScaleFactor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ContainerControl.AutoScaleFactor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在、デザイン時の自動スケーリング ディメンション間でのスケール ファクターを取得します。</summary>
        <value>A <see cref="T:System.Drawing.SizeF" /> 現在と設計時の自動スケーリングの寸法の間のスケーリング比を格納しています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ContainerControl.AutoScaleFactor%2A> プロパティ間のスケール ファクターを表す、 <xref:System.Windows.Forms.ContainerControl.CurrentAutoScaleDimensions%2A> と <xref:System.Windows.Forms.ContainerControl.AutoScaleDimensions%2A> プロパティです。 必要な場合に、この値が計算されます。 たとえば場合、 <xref:System.Windows.Forms.ContainerControl.CurrentAutoScaleDimensions%2A> が \(192, 144\) と <xref:System.Windows.Forms.ContainerControl.AutoScaleDimensions%2A> は 96 \(96\)、 <xref:System.Windows.Forms.ContainerControl.AutoScaleFactor%2A> が \(2.0、1.5\) です。  
  
 自動スケーリングの詳細については、次を参照してください。 [Automatic Scaling in Windows Forms](http://msdn.microsoft.com/ja-jp/68fad25b-afbc-44bd-8e1b-966fc43507a4)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ContainerControl.AutoScaleMode" />
        <altmember cref="P:System.Windows.Forms.ContainerControl.AutoScaleDimensions" />
        <altmember cref="P:System.Windows.Forms.ContainerControl.CurrentAutoScaleDimensions" />
        <altmember cref="M:System.Windows.Forms.ContainerControl.PerformAutoScale" />
      </Docs>
    </Member>
    <Member MemberName="AutoScaleMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.AutoScaleMode AutoScaleMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.AutoScaleMode AutoScaleMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ContainerControl.AutoScaleMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AutoScaleMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの自動スケーリング モードを取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.AutoScaleMode" /> を表す現在のスケーリング モードです。 既定値は、<see cref="F:System.Windows.Forms.AutoScaleMode.None" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ContainerControl.AutoScaleMode%2A> プロパティは、このコントロールの現在の自動スケーリング モードを指定します。 拡大縮小を <xref:System.Windows.Forms.AutoScaleMode.Font> コントロールまたはフォームを拡大または縮小、オペレーティング システムでのフォントのサイズに応じてにして、コントロールまたはフォームの絶対サイズは重要でないときに使用する場合に便利です。 拡大縮小を <xref:System.Windows.Forms.AutoScaleMode.Dpi> はコントロールや、画面を基準とフォームのサイズを変更する場合に便利です。 たとえば、ドット\/インチ \(DPI\) は、画面の一定の割合を常に使用できるように、グラフなどのグラフィックを表示するコントロールのスケーリングを使用することがあります。  
  
 自動スケーリングの詳細については、次を参照してください。 [Automatic Scaling in Windows Forms](http://msdn.microsoft.com/ja-jp/68fad25b-afbc-44bd-8e1b-966fc43507a4)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <see cref="T:System.Windows.Forms.AutoScaleMode" /> が正しくない値を使用してこのプロパティを設定します。</exception>
        <altmember cref="P:System.Windows.Forms.ContainerControl.AutoScaleFactor" />
        <altmember cref="P:System.Windows.Forms.ContainerControl.AutoScaleDimensions" />
        <altmember cref="P:System.Windows.Forms.ContainerControl.CurrentAutoScaleDimensions" />
        <altmember cref="M:System.Windows.Forms.ContainerControl.PerformAutoScale" />
      </Docs>
    </Member>
    <Member MemberName="AutoValidate">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.AutoValidate AutoValidate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.AutoValidate AutoValidate" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ContainerControl.AutoValidate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AutoValidate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フォーカスが変更されたときに、このコンテナーのコントロールを自動的に検証するかどうかを示す値を取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.AutoValidate" /> 格納されているコントロールがフォーカス変更時に暗黙的に検証するかどうかを示す値を列挙します。 既定値は、<see cref="F:System.Windows.Forms.AutoValidate.Inherit" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定値 <xref:System.Windows.Forms.ContainerControl.AutoValidate%2A> コントロールごとに異なります。 暗黙の検証の詳細については、次を参照してください。 [User Input Validation in Windows Forms \(Windows Forms\)](http://msdn.microsoft.com/ja-jp/4ec07681-1dee-4bf9-be5e-718f635a33a1)します。  
  
 このプロパティを新しい値に設定を発生させる、 <xref:System.Windows.Forms.ContainerControl.AutoValidateChanged> イベントです。  
  
   
  
## 例  
 次のコード例では、フォームとそのコンテナー内のコントロールのすべての暗黙の型の検証をオフにし、代わりに、マウス ボタンがクリックされたときに手動ですべてのフォームの子の検証を実行します。  
  
 [!code-csharp[ValidateChildren\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ValidateChildren/CS/Form1.cs#1)]
 [!code-vb[ValidateChildren\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ValidateChildren/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">A <see cref="T:System.Windows.Forms.AutoValidate" /> が正しくない値を使用してこのプロパティを設定します。</exception>
        <altmember cref="T:System.Windows.Forms.AutoValidate" />
        <altmember cref="Overload:System.Windows.Forms.ContainerControl.Validate" />
        <altmember cref="E:System.Windows.Forms.ContainerControl.AutoValidateChanged" />
      </Docs>
    </Member>
    <Member MemberName="AutoValidateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AutoValidateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AutoValidateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ContainerControl.AutoValidateChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.ContainerControl.AutoValidate" /> プロパティが変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、「[Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
   
  
## 例  
 <xref:System.Windows.Forms.ContainerControl.AutoValidate%2A>  
  
 <xref:System.Windows.Forms.ContainerControl.OnAutoValidateChanged%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingContext">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.BindingContext BindingContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.BindingContext BindingContext" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ContainerControl.BindingContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの <see cref="T:System.Windows.Forms.BindingContext" /> を取得または設定します。</summary>
        <value>コントロールの <see cref="T:System.Windows.Forms.BindingContext" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.Control.BindingContext" />
      </Docs>
    </Member>
    <Member MemberName="CanEnableIme">
      <MemberSignature Language="C#" Value="protected override bool CanEnableIme { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanEnableIme" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ContainerControl.CanEnableIme" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.ImeMode" /> プロパティをアクティブな値に設定して、IME サポートを有効にできるかどうかを示す値を取得します。</summary>
        <value>常に <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] と後で、IME 機能はフレームワークによって処理され、個々 のコントロールのネイティブの IME サポートを無効にします。  
  
 派生したユーザー コントロール、 <xref:System.Windows.Forms.ContainerControl> クラスは、ネイティブの IME サポートを有効に戻るには、このプロパティをオーバーライドすることで `true`します。 ただし、アプリケーションは、ネイティブの IME と Windows フォームの IME 間の競合がないことを確認する責任があります。 このシナリオはサポートされていません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ContainerControl.CreateParams" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロール ハンドルが作成されるときに必要な作成パラメーターを取得します。</summary>
        <value>コントロールを識別するハンドルを作成するときに必要な作成パラメーターを格納している <see cref="T:System.Windows.Forms.CreateParams" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentAutoScaleDimensions">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF CurrentAutoScaleDimensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.SizeF CurrentAutoScaleDimensions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ContainerControl.CurrentAutoScaleDimensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の画面の実行時寸法を取得します。</summary>
        <value>A <see cref="T:System.Drawing.SizeF" /> 現在ドット\/インチ \(DPI\) を含むまたは <see cref="T:System.Drawing.Font" /> 、画面のサイズ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ContainerControl.CurrentAutoScaleDimensions%2A> プロパティは現在の画面に参照ディメンションを表します。 これに対し、 <xref:System.Windows.Forms.ContainerControl.AutoScaleDimensions%2A> プロパティは、現在のコントロールのデザイン環境のデザイン時の参照ディメンションを表します。 中に、 <xref:System.Windows.Forms.ContainerControl.AutoScaleFactor%2A> プロパティは、2 つの比率。  
  
 ディメンションの値の解釈が異なります、 <xref:System.Windows.Forms.ContainerControl.AutoScaleMode%2A> 次の方法でのプロパティ。  
  
-   モードの場合 <xref:System.Windows.Forms.AutoScaleMode.Dpi>, 、このプロパティは、ドット\/インチで、画面の解像度を表します。  
  
-   モードの場合 <xref:System.Windows.Forms.AutoScaleMode.Font>, 、このプロパティは、平均のフォントの文字サイズ \(ピクセル単位\) を表します。  
  
 場合、 <xref:System.Windows.Forms.ContainerControl.AutoScaleMode%2A> にプロパティが設定されている <xref:System.Windows.Forms.AutoScaleMode.None>, 、<xref:System.Windows.Forms.ContainerControl.CurrentAutoScaleDimensions%2A> に設定されている <xref:System.Windows.Forms.ContainerControl.AutoScaleDimensions%2A>します。  
  
 自動スケーリングの詳細については、次を参照してください。 [Automatic Scaling in Windows Forms](http://msdn.microsoft.com/ja-jp/68fad25b-afbc-44bd-8e1b-966fc43507a4)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">現在の画面、Win32 デバイス コンテキストを作成できませんでした。</exception>
        <altmember cref="P:System.Windows.Forms.ContainerControl.AutoScaleMode" />
        <altmember cref="P:System.Windows.Forms.ContainerControl.AutoScaleFactor" />
        <altmember cref="P:System.Windows.Forms.ContainerControl.AutoScaleDimensions" />
        <altmember cref="M:System.Windows.Forms.ContainerControl.PerformAutoScale" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.Windows.Forms.Control" /> とその子コントロールが使用しているアンマネージ リソースを解放します。オプションで、マネージ リソースも解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="OnAutoValidateChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAutoValidateChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAutoValidateChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.OnAutoValidateChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.ContainerControl.AutoValidateChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.ContainerControl.OnAutoValidateChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.ContainerControl.OnAutoValidateChanged(System.EventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.ContainerControl.OnAutoValidateChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ContainerControl.AutoValidateChanged" />
        <altmember cref="P:System.Windows.Forms.ContainerControl.AutoValidate" />
        <altmember cref="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateControl">
      <MemberSignature Language="C#" Value="protected override void OnCreateControl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnCreateControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.OnCreateControl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="M:System.Windows.Forms.Control.CreateControl" /> メソッドを発生させます。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnCreateControl" />
      </Docs>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected override void OnFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.OnFontChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.FontChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用されるフォントを変更する、 <xref:System.Windows.Forms.ContainerControl> 、レイアウトを再計算される場合は、格納されているコントロールに再適用すると、 <xref:System.Windows.Forms.ContainerControl.AutoScaleMode%2A> プロパティの値を持つ <xref:System.Windows.Forms.AutoScaleMode.Font>です。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.ContainerControl.OnFontChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.ContainerControl.OnFontChanged(System.EventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Forms.ContainerControl.OnFontChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.FontChanged" />
        <altmember cref="P:System.Windows.Forms.Control.Font" />
        <altmember cref="P:System.Windows.Forms.ContainerControl.AutoScaleMode" />
      </Docs>
    </Member>
    <Member MemberName="OnLayout">
      <MemberSignature Language="C#" Value="protected override void OnLayout (System.Windows.Forms.LayoutEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnLayout(class System.Windows.Forms.LayoutEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.OnLayout(System.Windows.Forms.LayoutEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.LayoutEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.LayoutEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.Layout" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnParentChanged">
      <MemberSignature Language="C#" Value="protected override void OnParentChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnParentChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.OnParentChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.ParentChanged" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ParentForm">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Form ParentForm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Form ParentForm" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ContainerControl.ParentForm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Form</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンテナー コントロールが割り当てられるフォームを取得します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.Form" /> にコンテナー コントロールが割り当てられています。 このプロパティは、コントロールが Internet Explorer 内、または親フォームの存在しない別のホスト コンテキスト内でホストされている場合に null を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、2 つのフォームを作成する方法を示しています。 `Form1` と `Form2`です。 設定、 <xref:System.Windows.Forms.Form.IsMdiContainer%2A> プロパティの `Form1` に `true` 行い、 <xref:System.Windows.Forms.Form.MdiParent%2A> の `Form2`です。 次に、ボタンを作成 `button1`, 、各フォームにします。 親フォームのボタンがクリックされたときに、イベント ハンドラーは、子フォームを表示します。 子フォームのボタンがクリックされたときにイベント ハンドラーを表示、 <xref:System.Windows.Forms.Control.Name%2A> その親フォームのプロパティです。 次の 2 つのコード セグメントを上書きを使用して `button1` 両方の形式でイベント ハンドラーです。  
  
 [!code-cpp[ParentForm2\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ParentForm2/CPP/form1.cpp#1)]
 [!code-csharp[ParentForm2\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ParentForm2/CS/form1.cs#1)]
 [!code-vb[ParentForm2\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ParentForm2/VB/form1.vb#1)]  
  
 [!code-cpp[ParentForm2\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ParentForm2/CPP/form2.cpp#2)]
 [!code-csharp[ParentForm2\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ParentForm2/CS/form2.cs#2)]
 [!code-vb[ParentForm2\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ParentForm2/VB/form2.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for all windows to get this property value. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="T:System.Windows.Forms.Form" />
      </Docs>
    </Member>
    <Member MemberName="PerformAutoScale">
      <MemberSignature Language="C#" Value="public void PerformAutoScale ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PerformAutoScale() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.PerformAutoScale" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コンテナー コントロールとその子のスケーリングを実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 明示的に呼び出す、 <xref:System.Windows.Forms.ContainerControl.PerformAutoScale%2A> メソッドは、通常実行時にレイアウトをプログラムで変更した後にのみ必要です。<xref:System.Windows.Forms.ContainerControl.PerformAutoScale%2A> 暗黙的に呼び出されますが、 <xref:System.Windows.Forms.ContainerControl.OnLayout%2A> メソッドです。  
  
 <xref:System.Windows.Forms.ContainerControl.PerformAutoScale%2A> 再帰的です。各子コントロールのコンテナーである場合がそのバージョンのコンテナーのバージョンを実行するときと呼ばれるこのメソッドがあります。  
  
 自動スケーリングの詳細については、次を参照してください。 [Automatic Scaling in Windows Forms](http://msdn.microsoft.com/ja-jp/68fad25b-afbc-44bd-8e1b-966fc43507a4)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Form.AutoScale" />
        <altmember cref="P:System.Windows.Forms.ContainerControl.AutoScaleMode" />
        <altmember cref="P:System.Windows.Forms.ContainerControl.AutoScaleFactor" />
        <altmember cref="M:System.Windows.Forms.ContainerControl.OnLayout(System.Windows.Forms.LayoutEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ProcessCmdKey">
      <MemberSignature Language="C#" Value="protected override bool ProcessCmdKey (ref System.Windows.Forms.Message msg, System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ProcessCmdKey(valuetype System.Windows.Forms.Message msg, valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="msg">処理するウィンドウ メッセージを表す、参照渡しされた <see cref="T:System.Windows.Forms.Message" />。</param>
        <param name="keyData">処理するキーを表す <see cref="T:System.Windows.Forms.Keys" /> 値の 1 つ。</param>
        <summary>コマンド キーを処理します。</summary>
        <returns>文字がコントロールによって処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      </Docs>
    </Member>
    <Member MemberName="ProcessDialogChar">
      <MemberSignature Language="C#" Value="protected override bool ProcessDialogChar (char charCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ProcessDialogChar(char charCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.ProcessDialogChar(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="charCode">処理対象の文字。</param>
        <summary>ダイアログ文字を処理します。</summary>
        <returns>文字がコントロールによって処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="ProcessDialogKey">
      <MemberSignature Language="C#" Value="protected override bool ProcessDialogKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ProcessDialogKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.ProcessDialogKey(System.Windows.Forms.Keys)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">処理するキーを表す <see cref="T:System.Windows.Forms.Keys" /> 値の 1 つ。</param>
        <summary>ダイアログ キーを処理します。</summary>
        <returns>キーがコントロールによって処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)" />
      </Docs>
    </Member>
    <Member MemberName="ProcessMnemonic">
      <MemberSignature Language="C#" Value="protected override bool ProcessMnemonic (char charCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance bool ProcessMnemonic(char charCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.ProcessMnemonic(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="charCode">処理対象の文字。</param>
        <summary>ニーモニック文字を処理します。</summary>
        <returns>文字がコントロールによってニーモニックとして処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.ProcessMnemonic(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="ProcessTabKey">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessTabKey (bool forward);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ProcessTabKey(bool forward) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.ProcessTabKey(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forward" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="forward">
          <see langword="true" /> 循環して内のコントロールを <see cref="T:System.Windows.Forms.ContainerControl" />。 そうしないと、 <see langword="false" />です。</param>
        <summary>次に使用できるコントロールを選択し、そのコントロールをアクティブにします。</summary>
        <returns>
          <see langword="true" /> コントロールが選択されている場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、コントロール、 <xref:System.Windows.Forms.Control.TabStop%2A> プロパティに設定 `false` をオンにできないため、次に使用できるコントロールを選択します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.TabStop" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="protected override void Select (bool directed, bool forward);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Select(bool directed, bool forward) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.Select(System.Boolean,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directed" Type="System.Boolean" />
        <Parameter Name="forward" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="directed">選択するコントロールの方向を指定する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <param name="forward">タブ オーダー内を前方に移動する場合は <see langword="true" />。後方に移動する場合は <see langword="false" />。</param>
        <summary>子コントロールをアクティブにします。 オプションとして、タブ オーダーでコントロールを選択するときの方向を指定します。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.Select(System.Boolean,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Forms.IContainerControl.ActivateControl">
      <MemberSignature Language="C#" Value="bool IContainerControl.ActivateControl (System.Windows.Forms.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Forms.IContainerControl.ActivateControl(class System.Windows.Forms.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.System#Windows#Forms#IContainerControl#ActivateControl(System.Windows.Forms.Control)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="control">
          <see cref="T:System.Windows.Forms.Control" /> をアクティブ化します。</param>
        <summary>指定したコントロールをアクティブにします。</summary>
        <returns>
          <see langword="true" /> コントロールが正常にアクティブにする場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `control` パラメーターは、コンテナー コントロールの子である必要があります。  
  
   
  
## 例  
 継承する次のコード例には、 <xref:System.Windows.Forms.ScrollableControl> クラスし、実装、 <xref:System.Windows.Forms.IContainerControl> インターフェイスです。 実装を追加、 <xref:System.Windows.Forms.IContainerControl.ActiveControl%2A> プロパティおよび <xref:System.Windows.Forms.IContainerControl.ActivateControl%2A> メソッドです。  
  
 [!code-cpp[IContainerControl Implementation\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IContainerControl Implementation/CPP/mycontainercontrol.cpp#1)]
 [!code-csharp[IContainerControl Implementation\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IContainerControl Implementation/CS/mycontainercontrol.cs#1)]
 [!code-vb[IContainerControl Implementation\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IContainerControl Implementation/VB/mycontainercontrol.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ContainerControl.ActiveControl" />
      </Docs>
    </Member>
    <Member MemberName="UpdateDefaultButton">
      <MemberSignature Language="C#" Value="protected virtual void UpdateDefaultButton ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void UpdateDefaultButton() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.UpdateDefaultButton" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスによってオーバーライドされた場合に、既定のボタンを更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ContainerControl> クラスの実装を提供しない、 <xref:System.Windows.Forms.ContainerControl.UpdateDefaultButton%2A> メソッドです。 このメソッドを継承するクラスを実装する必要があります <xref:System.Windows.Forms.ContainerControl.UpdateDefaultButton%2A> を既定のボタンを更新します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public bool Validate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Validate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.Validate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>発生させることによってフォーカスを失ったコントロールの値を確認、 <see cref="E:System.Windows.Forms.Control.Validating" /> と <see cref="E:System.Windows.Forms.Control.Validated" /> をこの順序で発生するイベントです。</summary>
        <returns>
          <see langword="true" /> 検証が成功した場合それ以外の場合、 <see langword="false" />です。 呼び出された場合、 <see cref="E:System.Windows.Forms.Control.Validating" /> または <see cref="E:System.Windows.Forms.Control.Validated" /> イベント ハンドラーでは、このメソッドは常に返す <see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ContainerControl.Validate%2A> メソッドは、検証されていない最後の子コントロールとその祖先が含まれていない、現在のコンテナー コントロールを確認します。 このオーバー ロードされたバージョンが常の値に関係なく、検証を実行、 <xref:System.Windows.Forms.ContainerControl.AutoValidate%2A> コントロールの親のプロパティです。 したがって無条件に検証を使用します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ContainerControl.ValidateChildren" />
        <altmember cref="P:System.Windows.Forms.ContainerControl.AutoValidate" />
        <altmember cref="E:System.Windows.Forms.ContainerControl.AutoValidateChanged" />
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public bool Validate (bool checkAutoValidate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Validate(bool checkAutoValidate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.Validate(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="checkAutoValidate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="checkAutoValidate">場合 <see langword="true" />, の値、 <see cref="P:System.Windows.Forms.ContainerControl.AutoValidate" /> プロパティのかどうかは、検証を実行する必要があります。 かどうかを使用 <see langword="false" />, 、無条件に検証を実行します。</param>
        <summary>フォーカスを失ったコントロールの値を確認します。自動検証が有効かどうかに条件付きで依存しています。</summary>
        <returns>
          <see langword="true" /> 検証が成功した場合それ以外の場合、 <see langword="false" />です。 呼び出された場合、 <see cref="E:System.Windows.Forms.Control.Validating" /> または <see cref="E:System.Windows.Forms.Control.Validated" /> イベント ハンドラーでは、このメソッドは常に返す <see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ContainerControl.Validate%2A> メソッドは、検証されていない最後の子コントロールとその祖先が含まれていない、現在のコンテナー コントロールを確認します。 このオーバー ロードされたバージョンでは、次の条件に基づく検証を実行します。  
  
-   場合、 `checkAutoValidate` パラメーターは `true`, は検証されません子コントロールに対して常に検証が発生します。  
  
-   場合、 `checkAutoValidate` パラメーターは、 `false`, 場合に、のみ検証が発生した、 <xref:System.Windows.Forms.ContainerControl.AutoValidate%2A> コントロールの親のプロパティを有効にします。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ContainerControl.AutoValidate" />
        <altmember cref="M:System.Windows.Forms.ContainerControl.ValidateChildren(System.Windows.Forms.ValidationConstraints)" />
        <altmember cref="P:System.Windows.Forms.Control.CausesValidation" />
        <altmember cref="E:System.Windows.Forms.ContainerControl.AutoValidateChanged" />
      </Docs>
    </Member>
    <Member MemberName="ValidateChildren">
      <MemberSignature Language="C#" Value="public virtual bool ValidateChildren ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ValidateChildren() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.ValidateChildren" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>検証をサポートするコントロールに含まれるすべての子コントロールでデータを検証します。</summary>
        <returns>すべての子の検証が正常に実行された場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 呼び出された場合、 <see cref="E:System.Windows.Forms.Control.Validating" /> または <see cref="E:System.Windows.Forms.Control.Validated" /> イベント ハンドラーでは、このメソッドは常に返す <see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ContainerControl.ValidateChildren%2A> 下りる際に、コントロールの階層を各コントロールの検証がサポートされているかを確認します。 コントロールは、ユーザーが選択できる場合、その <xref:System.Windows.Forms.Control.CausesValidation%2A> プロパティは、 `true`, 、<xref:System.Windows.Forms.ContainerControl.ValidateChildren%2A> により、 <xref:System.Windows.Forms.Control.Validating> イベントが発生します。 キャンセルのコントロールのいずれかの場合、 <xref:System.Windows.Forms.Control.Validating> イベントでは、このメソッドは `false`。 そうしないと、が返されます `true`します。  
  
 コントロールがデータ ソースにバインドされている場合、 <xref:System.Windows.Forms.Control.Validating> イベントが発生するデータ ソースへの現在のデータをプッシュ バックするコントロールが発生します。  
  
 呼び出す <xref:System.Windows.Forms.ContainerControl.ValidateChildren%2A> は呼び出すことと同じ <xref:System.Windows.Forms.ContainerControl.ValidateChildren%2A> で、 <xref:System.Windows.Forms.ValidationConstraints> の <xref:System.Windows.Forms.ValidationConstraints.None>です。  
  
   
  
## 例  
 次のコード例では、フォームとそのコンテナー内のコントロールのすべての暗黙の型の検証をオフにし、代わりに、マウス ボタンがクリックされたときに手動ですべてのフォームの子の検証を実行します。  
  
 [!code-csharp[ValidateChildren\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ValidateChildren/CS/Form1.cs#1)]
 [!code-vb[ValidateChildren\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ValidateChildren/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateChildren">
      <MemberSignature Language="C#" Value="public virtual bool ValidateChildren (System.Windows.Forms.ValidationConstraints validationConstraints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ValidateChildren(valuetype System.Windows.Forms.ValidationConstraints validationConstraints) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.ValidateChildren(System.Windows.Forms.ValidationConstraints)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="validationConstraints" Type="System.Windows.Forms.ValidationConstraints" />
      </Parameters>
      <Docs>
        <param name="validationConstraints">コントロールがある制限を適用、 <see cref="E:System.Windows.Forms.Control.Validating" /> に発生するイベントです。</param>
        <summary>検証をサポートするコントロールに含まれるすべての子コントロールでデータを検証します。</summary>
        <returns>すべての子の検証が正常に実行された場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 呼び出された場合、 <see cref="E:System.Windows.Forms.Control.Validating" /> または <see cref="E:System.Windows.Forms.Control.Validated" /> イベント ハンドラーでは、このメソッドは常に返す <see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ContainerControl.ValidateChildren%2A> 現在のコントロールのすべての子スクリプトを調べて原因、 <xref:System.Windows.Forms.Control.Validating> 条件を満たしている場合は、コントロールで発生するイベントに記述 <xref:System.Windows.Forms.ValidationConstraints>します。  
  
 いくつかを使用することが <xref:System.Windows.Forms.ValidationConstraints> ビットごとの OR 演算子を組み合わせることにより、一度にパラメーター。 ビットごとの OR 演算子でパラメーターを組み合わせると、論理 AND 演算が発生します。 などを呼び出す `ValidateChildren(ValidationConstraints.ImmediateChildren | ValidationConstraints.Enabled)` のみを発生させる、 <xref:System.Windows.Forms.Control.Validating> は、コンテナーの両方の直接の子は有効になっているコントロールのイベントです。  
  
 このメソッドを指定するパラメーターに関係なく、コントロールが必要、 <xref:System.Windows.Forms.Control.CausesValidation%2A> プロパティに設定 `true` ためにその <xref:System.Windows.Forms.Control.Validating> イベントが発生します。 設定する必要があります、 <xref:System.Windows.Forms.ContainerControl.AutoValidate%2A> またはコントロールのコンテナーのコントロールのプロパティ `false` を呼び出したときのみ発生する可能性を検証する場合 <xref:System.Windows.Forms.ContainerControl.ValidateChildren%2A>, 、コントロールからにユーザーがフォーカスを移すときにないとします。  
  
 コントロールがデータ ソースにバインドされている場合、 <xref:System.Windows.Forms.Control.Validating> イベントが発生するデータ ソースへの現在のデータをプッシュ バックするコントロールが発生します。  
  
 逆の効果を実現できない、 <xref:System.Windows.Forms.ValidationConstraints> ビットごとの否定演算子を適用することでパラメーター。 負の値を指定する場合など、 <xref:System.Windows.Forms.ValidationConstraints.Visible> フィールドを <xref:System.Windows.Forms.ContainerControl.ValidateChildren%2A>, 、コンテナーに表示されていないすべての子は検証されません。 負のパラメーターを指定して <xref:System.Windows.Forms.ContainerControl.ValidateChildren%2A> コンテナーまたはその子の効果はありません。  
  
   
  
## 例  
 次のコード例と、のみ、 <xref:System.Windows.Forms.Control.Validating> イベントのフォームの直接の子の発生元を <xref:System.Windows.Forms.Control.Enabled%2A> プロパティは `true`です。  
  
 [!code-csharp[ValidateChildrenWithConstraints\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ValidateChildrenWithConstraints/CS/Form1.cs#1)]
 [!code-vb[ValidateChildrenWithConstraints\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ValidateChildrenWithConstraints/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.WndProc(System.Windows.Forms.Message@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">処理対象の Windows <see cref="T:System.Windows.Forms.Message" />。</param>
        <summary>Windows メッセージを処理します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateChildren">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>検証をサポートするコントロールに含まれるすべての子コントロールでデータを検証します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Validate">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>発生させることによってフォーカスを失ったコントロールの値を確認、 <see cref="E:System.Windows.Forms.Control.Validating" /> と <see cref="E:System.Windows.Forms.Control.Validated" /> をこの順序で発生するイベントです。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>