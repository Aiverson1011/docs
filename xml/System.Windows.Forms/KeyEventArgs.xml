<Type Name="KeyEventArgs" FullName="System.Windows.Forms.KeyEventArgs">
  <TypeSignature Language="C#" Value="public class KeyEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.KeyEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>データを提供、 <see cref="E:System.Windows.Forms.Control.KeyDown" /> または <see cref="E:System.Windows.Forms.Control.KeyUp" /> イベントです。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Windows.Forms.KeyEventArgs>, 、それぞれに、ユーザーが押され、任意の修飾キー \(ctrl キーを押し、alt キーと shift キーを押し\) が同時に押されたかどうかが渡されたキーを指定する <xref:System.Windows.Forms.Control.KeyDown> または <xref:System.Windows.Forms.Control.KeyUp> イベントです。  
  
 <xref:System.Windows.Forms.Control.KeyDown> イベント、ユーザーが任意のキーを押したときに発生します。<xref:System.Windows.Forms.Control.KeyUp> イベント、キーを離したときに発生します。 重複して <xref:System.Windows.Forms.Control.KeyDown> イベントは、1 つだけですが、キーが保持されている場合、キーが表示されるたびが発生した <xref:System.Windows.Forms.Control.KeyUp> キーを離したときにイベントが生成されます。  
  
 <xref:System.Windows.Forms.Control.KeyPress> イベントは、キーが押されたときにも発生します。 A <xref:System.Windows.Forms.KeyPressEventArgs> それぞれで渡される <xref:System.Windows.Forms.Control.KeyPress> イベント、し、各キーを押すの結果として作成された文字を指定します。  
  
 イベント モデルについては、次を参照してください。 [Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、押されたキーの状態を検出する方法を示します。  
  
 **例 1**  
  
 次のコード例では、使用して、 <xref:System.Windows.Forms.Control.KeyDown> イベントと、 <xref:System.Windows.Forms.Help> ポップアップ スタイル アプリケーションのユーザーにヘルプを表示するクラス。 例では、 <xref:System.Windows.Forms.KeyEventArgs> 修飾子キーに F1 キーを押すのすべてのバリエーションのフィルター処理するイベント ハンドラー メソッドに渡されるプロパティ。 いずれかのバリエーション、キーボードの修飾子が含まれる f1 を押すと、 <xref:System.Windows.Forms.Help> クラスのようなポップアップ ウィンドウを表示する、 <xref:System.Windows.Forms.ToolTip>, 、コントロールの近くです。 ユーザーは、ALT \+ F2 を押すと、追加情報を含む別のヘルプのポップアップが表示されます。  
  
 [!code-cpp[KeyEventArgs.Modifiers\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 **例 2**  
  
 次の例では、alt キーを押しながら E キーを押したかどうか、およびマウス ポインターが上の決定、 <xref:System.Windows.Forms.TreeNode>, 、により、ユーザーを編集する <xref:System.Windows.Forms.TreeNode>です。  
  
 [!code-cpp[Windows.Forms.Control Members4\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#3)]
 [!code-csharp[Windows.Forms.Control Members4\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#3)]
 [!code-vb[Windows.Forms.Control Members4\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#3)]  
  
 **例 3**  
  
 次の例では、ユーザーが、数値以外のキーを押したかどうかを決定し、必要な場合は、キャンセル、 <xref:System.Windows.Forms.Control.KeyPress> イベントを使用して、 <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> プロパティです。  
  
 [!code-cpp[Control.KeyDown\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
    <altmember cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
    <altmember cref="T:System.Windows.Forms.KeyPressEventArgs" />
    <altmember cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyEventArgs (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.KeyEventArgs.#ctor(System.Windows.Forms.Keys)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">A <see cref="T:System.Windows.Forms.Keys" /> を同時に押されたキーが ctrl キー、shift キー、および ALT キーを示す任意の修飾フラグと組み合わせて、押されたキーを表します。 使用可能な値が取得したビットごとの OR を適用する \(|\) 演算子の定数を <see cref="T:System.Windows.Forms.Keys" /> 列挙します。</param>
        <summary>
          <see cref="T:System.Windows.Forms.KeyEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.KeyPressEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="Alt">
      <MemberSignature Language="C#" Value="public virtual bool Alt { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Alt" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.Alt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Alt キーが押されたかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> ALT キーが押された場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 **例 1**  
  
 次のコード例では、使用して、 <xref:System.Windows.Forms.Control.KeyDown> イベントと、 <xref:System.Windows.Forms.Help> ポップアップ スタイル アプリケーションのユーザーにヘルプを表示するクラス。 例では、 <xref:System.Windows.Forms.KeyEventArgs> 修飾子キーに F1 キーを押すのすべてのバリエーションのフィルター処理するイベント ハンドラー メソッドに渡されるプロパティ。 いずれかのバリエーション、キーボードの修飾子が含まれる f1 を押すと、 <xref:System.Windows.Forms.Help> クラスのようなポップアップ ウィンドウを表示する、 <xref:System.Windows.Forms.ToolTip>, 、コントロールの近くです。 ユーザーは、ALT \+ F2 を押すと、追加情報を含む別のヘルプのポップアップが表示されます。  
  
 [!code-cpp[KeyEventArgs.Modifiers\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 **例 2**  
  
 次の例は、alt キーを押しながら E キーを押したかどうか、およびマウス ポインターが上を決定 <xref:System.Windows.Forms.TreeNode>, 、により、ユーザーが編集される <xref:System.Windows.Forms.TreeNode>します。  
  
 [!code-cpp[Windows.Forms.Control Members4\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#3)]
 [!code-csharp[Windows.Forms.Control Members4\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#3)]
 [!code-vb[Windows.Forms.Control Members4\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Control" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Shift" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Modifiers" />
      </Docs>
    </Member>
    <Member MemberName="Control">
      <MemberSignature Language="C#" Value="public bool Control { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Control" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.Control" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ctrl キーが押されたかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> CTRL キーが押された場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.Control.KeyDown> イベントと、 <xref:System.Windows.Forms.Help> ポップアップ スタイル アプリケーションのユーザーにヘルプを表示するクラス。 例では、 <xref:System.Windows.Forms.KeyEventArgs> 修飾子キーに F1 キーを押すのすべてのバリエーションのフィルター処理するイベント ハンドラー メソッドに渡されるプロパティ。 いずれかのバリエーション、キーボードの修飾子が含まれる f1 を押すと、 <xref:System.Windows.Forms.Help> クラスのようなポップアップ ウィンドウを表示する、 <xref:System.Windows.Forms.ToolTip>, 、コントロールの近くです。 ユーザーは、ALT \+ F2 を押すと、追加情報を含む別のヘルプのポップアップが表示されます。  
  
 [!code-cpp[KeyEventArgs.Modifiers\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Alt" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Shift" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Modifiers" />
      </Docs>
    </Member>
    <Member MemberName="Handled">
      <MemberSignature Language="C#" Value="public bool Handled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Handled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.Handled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>イベントが処理されたかどうかを示す値を取得または設定します。</summary>
        <value>
          <see langword="true" /> コントロールをバイパスするが既定の処理です。それ以外の場合、 <see langword="false" /> に沿ったイベントを既定のコントロール ハンドラーも渡す。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> Windows フォーム内で別のコントロールによっては異なる方法で実装されます。 ようなコントロールに対して <xref:System.Windows.Forms.TextBox> どのサブクラス ネイティブ Win32 コントロールで、重要なメッセージを基になるネイティブ コントロールに渡すことはできません、という意味に解釈されます。 設定した場合 `Handled` を true に、 <xref:System.Windows.Forms.TextBox>, 、コントロールがキーを押すを通過しません `events` が基になる Win32 テキスト ボックス コントロールでは、まだ表示、ユーザーが入力した文字。  
  
 現在のコントロールを使用して、キーが押さを受け取らないようにする場合、 <xref:System.Windows.Forms.KeyEventArgs.SuppressKeyPress%2A> プロパティです。  
  
   
  
## 例  
 次の例では、ユーザーが、数値以外のキーを押したかどうかを決定し、必要な場合は、キャンセル、 <xref:System.Windows.Forms.Control.KeyPress> イベントを使用して、 <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> プロパティです。  
  
 [!code-cpp[Control.KeyDown\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.SuppressKeyPress" />
      </Docs>
    </Member>
    <Member MemberName="KeyCode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Keys KeyCode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Keys KeyCode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.KeyCode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Keys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>キーボード コードを取得、 <see cref="E:System.Windows.Forms.Control.KeyDown" /> または <see cref="E:System.Windows.Forms.Control.KeyUp" /> イベントです。</summary>
        <value>A <see cref="T:System.Windows.Forms.Keys" /> 値は、イベントの重要なコードです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、使用する方法を示して、 <xref:System.Windows.Forms.KeyEventArgs.KeyCode%2A> 押下されたキーを決定するプロパティです。  
  
 **例 1**  
  
 次のコード例では、使用して、 <xref:System.Windows.Forms.Control.KeyDown> イベントと、 <xref:System.Windows.Forms.Help> ポップアップ スタイル アプリケーションのユーザーにヘルプを表示するクラス。 例では、 <xref:System.Windows.Forms.KeyEventArgs> 修飾子キーに F1 キーを押すのすべてのバリエーションのフィルター処理するイベント ハンドラー メソッドに渡されるプロパティ。 いずれかのバリエーション、キーボードの修飾子が含まれる f1 を押すと、 <xref:System.Windows.Forms.Help> クラスのようなポップアップ ウィンドウを表示する、 <xref:System.Windows.Forms.ToolTip>, 、コントロールの近くです。 ユーザーは、ALT \+ F2 を押すと、追加情報を含む別のヘルプのポップアップが表示されます。  
  
 [!code-cpp[KeyEventArgs.Modifiers\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 **例 2**  
  
 次の例では、alt キーを押しながら E キーを押したかどうか、およびマウス ポインターが上の決定、 <xref:System.Windows.Forms.TreeNode>, 、により、ユーザーを編集する <xref:System.Windows.Forms.TreeNode>です。  
  
 [!code-cpp[Windows.Forms.Control Members4\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#3)]
 [!code-csharp[Windows.Forms.Control Members4\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#3)]
 [!code-vb[Windows.Forms.Control Members4\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#3)]  
  
 **例 3**  
  
 次の例では、ユーザーが、数値以外のキーを押したかどうかを決定し、必要な場合は、キャンセル、 <xref:System.Windows.Forms.Control.KeyPress> イベントを使用して、 <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> プロパティです。  
  
 [!code-cpp[Control.KeyDown\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyData" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyValue" />
      </Docs>
    </Member>
    <Member MemberName="KeyData">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Keys KeyData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Keys KeyData" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.KeyData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Keys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>キーのデータの取得、 <see cref="E:System.Windows.Forms.Control.KeyDown" /> または <see cref="E:System.Windows.Forms.Control.KeyUp" /> イベントです。</summary>
        <value>A <see cref="T:System.Windows.Forms.Keys" /> を ctrl キーを押し、shift キー、および ALT キーの組み合わせが、同時に押されたかを示す修飾フラグと組み合わせて、押されたキーのキー コードを表します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 定数を使用する <xref:System.Windows.Forms.Keys> から情報を抽出する、 <xref:System.Windows.Forms.KeyEventArgs.KeyData%2A> プロパティです。 によって返されるデータを比較する、ビットごとの AND 演算子を使用して <xref:System.Windows.Forms.KeyEventArgs.KeyData%2A> で定数を使用して <xref:System.Windows.Forms.Keys> 、ユーザーが押されたキーに関する情報を取得します。 固有の修飾子キーが押されたかどうかを確認するのには、使用、 <xref:System.Windows.Forms.KeyEventArgs.Control%2A>, 、<xref:System.Windows.Forms.KeyEventArgs.Shift%2A>, 、および <xref:System.Windows.Forms.KeyEventArgs.Alt%2A> プロパティです。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.Control.KeyDown?displayProperty=fullName> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行するから継承する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.Control>, など、 <xref:System.Windows.Forms.Button> または <xref:System.Windows.Forms.ComboBox>です。 インスタンスを名前 `Control1` イベント ハンドラーが関連付けられていることを確認し、 <xref:System.Windows.Forms.Control.KeyDown?displayProperty=fullName> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#48](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#48)]
 [!code-vb[System.Windows.Forms.EventExamples\#48](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#48)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyCode" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyValue" />
      </Docs>
    </Member>
    <Member MemberName="KeyValue">
      <MemberSignature Language="C#" Value="public int KeyValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.KeyValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>キーボード値を取得、 <see cref="E:System.Windows.Forms.Control.KeyDown" /> または <see cref="E:System.Windows.Forms.Control.KeyUp" /> イベントです。</summary>
        <value>整数表現、 <see cref="P:System.Windows.Forms.KeyEventArgs.KeyCode" /> プロパティです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.Control.KeyDown?displayProperty=fullName> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行するから継承する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.Control>, など、 <xref:System.Windows.Forms.Button> または <xref:System.Windows.Forms.ComboBox>です。 インスタンスを名前 `Control1` イベント ハンドラーが関連付けられていることを確認し、 <xref:System.Windows.Forms.Control.KeyDown?displayProperty=fullName> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#48](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#48)]
 [!code-vb[System.Windows.Forms.EventExamples\#48](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#48)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyData" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyCode" />
      </Docs>
    </Member>
    <Member MemberName="Modifiers">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Keys Modifiers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Keys Modifiers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.Modifiers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Keys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>修飾フラグを取得、 <see cref="E:System.Windows.Forms.Control.KeyDown" /> または <see cref="E:System.Windows.Forms.Control.KeyUp" /> イベントです。 このフラグは、Ctrl キー、Shift キー、および Alt キーのどの組み合わせが押されたのかを示します。</summary>
        <value>A <see cref="T:System.Windows.Forms.Keys" /> 1 つまたは複数の修飾フラグを表す値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 固有の修飾子キーが押されたかどうかを確認するのには、使用、 <xref:System.Windows.Forms.KeyEventArgs.Control%2A>, 、<xref:System.Windows.Forms.KeyEventArgs.Shift%2A>, 、および <xref:System.Windows.Forms.KeyEventArgs.Alt%2A> プロパティです。 修飾フラグと組み合わせることができますビットごとの OR。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Windows.Forms.KeyEventArgs.Modifiers%2A> プロパティを主キーと共にどの修飾子キーが押されたかを判断します。  
  
 [!code-cpp[KeyEventArgs.Modifiers\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Alt" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Control" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Shift" />
        <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
      </Docs>
    </Member>
    <Member MemberName="Shift">
      <MemberSignature Language="C#" Value="public virtual bool Shift { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Shift" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.Shift" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Shift キーが押されたかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> SHIFT キーが押された場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例では、ヘルプを表示する場合、ユーザーには、F1 キーと Shift キーが押されたかどうかを決定します。  
  
 [!code-cpp[KeyEventArgs.Modifiers\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Alt" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Control" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Modifiers" />
      </Docs>
    </Member>
    <Member MemberName="SuppressKeyPress">
      <MemberSignature Language="C#" Value="public bool SuppressKeyPress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SuppressKeyPress" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.SuppressKeyPress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>キー イベントを基になるコントロールに渡すかどうかを示す値を取得または設定します。</summary>
        <value>
          <see langword="true" /> キー イベントをしないコントロールに送信する場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 割り当てることができます `true` など、イベント ハンドラーでは、このプロパティに <xref:System.Windows.Forms.Control.KeyDown> ユーザー入力を防ぐためにします。  
  
 設定 <xref:System.Windows.Forms.KeyEventArgs.SuppressKeyPress%2A> に `true` も設定 <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> に `true`します。  
  
   
  
## 例  
 次のコード例では、数値のキーストロークをによりに到達できない、 <xref:System.Windows.Forms.TextBox> という名前のコントロール `textBox1`します。  
  
 [!code-csharp[KeyEventArgs.SuppressKeyPress\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/keyeventargs.suppresskeypress/cs/form1.cs#1)]
 [!code-vb[KeyEventArgs.SuppressKeyPress\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/keyeventargs.suppresskeypress/vb/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Handled" />
      </Docs>
    </Member>
  </Members>
</Type>