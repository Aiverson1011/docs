<Type Name="ListView" FullName="System.Windows.Forms.ListView">
  <TypeSignature Language="C#" Value="public class ListView : System.Windows.Forms.Control" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ListView extends System.Windows.Forms.Control" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ListView" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Control</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("SelectedIndexChanged")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Items")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.ListViewDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Forms.Docking(System.Windows.Forms.DockingBehavior.Ask)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>4 種類のビューのいずれかを使用して表示できる項目のコレクションを表示する、Windows のリストのビュー コントロールを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Windows.Forms.ListView> コントロールでは、項目のテキストと、オプションでは、項目の種類を識別するためにアイコンを持つ項目の一覧を表示することができます。 たとえば、ファイルの Windows エクスプ ローラーの一覧は表示形式と同様、 <xref:System.Windows.Forms.ListView> コントロールです。 これには、ファイルと、ツリーで現在選択されているフォルダーの一覧が表示されます。 各ファイルおよびフォルダーにファイルまたはフォルダーの種類を識別しやすく、関連付けられているアイコンが表示されます。<xref:System.Windows.Forms.ListViewItem> クラス内の項目を表す、 <xref:System.Windows.Forms.ListView> コントロールです。 一覧に表示される項目は、5 つの異なるビューのいずれかで表示できます。 項目は、大きいアイコン、小さいアイコンまたは小さいアイコン、垂直方向に一覧表示できます。 項目は、親アイテムに関連付けられている情報を含むサブ項目を持つこともできます。 詳細ビューでは、サブ項目に表示される情報を識別する列ヘッダーを持つグリッドで、項目とそのサブ項目を表示することができます。 で可用性が制限されているは、以下の説明に従って、\[並べて表示ビューでは、テキスト情報は、横にある大きいアイコンを含むタイルとして項目とそのサブ項目を表示することができます。<xref:System.Windows.Forms.ListView> サポートしている 1 つまたは複数を選択します。 複数選択機能を使用して、ユーザーと同様の方法で項目の一覧から選択して、 <xref:System.Windows.Forms.ListBox> コントロールです。 さらに、ユーザーは、タスクを実行する、選択した項目をアクティブ化できます。 たとえば、使用する、 <xref:System.Windows.Forms.ListView> アプリケーションを開いて、使用するファイルの一覧を表示するコントロール。 ユーザーを開き、ダブルクリックして、項目をアクティブ化し、アプリケーションでファイルを開くファイルを選択できます。<xref:System.Windows.Forms.ListView> を使用する\] チェック ボックスを表示することも、 <xref:System.Windows.Forms.ListView.CheckBoxes%2A> プロパティは、ユーザーが操作を実行する項目を確認できるようにします。 使用することができます、 <xref:System.Windows.Forms.ListView> さまざまな方法で制御します。 コントロールを使用して、アプリケーション、データベース、またはテキスト ファイルから情報を表示します。<xref:System.Windows.Forms.ListView> などを処理するファイルのセットを選択すると、ユーザーから情報を取得できます。  
  
 <xref:System.Windows.Forms.ListView> 多くの外観と動作に柔軟性を提供するプロパティを提供します。<xref:System.Windows.Forms.ListView.View%2A> プロパティでは、項目が表示される方法を変更することができます。<xref:System.Windows.Forms.ListView.LargeImageList%2A>, 、<xref:System.Windows.Forms.ListView.SmallImageList%2A>, と <xref:System.Windows.Forms.ListView.StateImageList%2A> を指定するプロパティを使用する、 <xref:System.Windows.Forms.ImageList> 項目とは、場合に表示される画像を格納するオブジェクト、 <xref:System.Windows.Forms.ListView.StateImageList%2A>, 、チェック ボックスを場合に表示される、 <xref:System.Windows.Forms.ListView.CheckBoxes%2A> プロパティに設定されて `true`します。 どの項目がチェックするには、使用することができます、 <xref:System.Windows.Forms.ListView.CheckedItems%2A> にアクセスするプロパティ、 <xref:System.Windows.Forms.ListView.CheckedListViewItemCollection> コレクションです。<xref:System.Windows.Forms.ListView.Columns%2A> プロパティへのアクセスを使用する、 <xref:System.Windows.Forms.ListView.ColumnHeaderCollection>, は、列ヘッダーを格納している場合に表示される、 <xref:System.Windows.Forms.ListView.View%2A> にコントロールのプロパティが設定されている <xref:System.Windows.Forms.View.Details>します。 項目の追加や削除、 <xref:System.Windows.Forms.ListView> を通じて、 <xref:System.Windows.Forms.ListView.Items%2A> プロパティです。<xref:System.Windows.Forms.ListView.Items%2A> プロパティを使用すると、アクセス、 <xref:System.Windows.Forms.ListView.ListViewItemCollection> コントロール内の項目を操作するためのメソッドを提供するコントロールのです。 ユーザーが項目のテキストを編集できるようにする場合は、使用、 <xref:System.Windows.Forms.ListView.LabelEdit%2A> プロパティです。 コントロールに多くのアイテムが含まれている場合、それを確認する並べ替え済みリストでユーザーを簡単には多くの場合です。 使用することができます、 <xref:System.Windows.Forms.ListView.Sorting%2A> プロパティをアルファベット順に並べ替えます。 外観をカスタマイズできる完全にも、 <xref:System.Windows.Forms.ListView> コントロールです。 これを行うには、設定、 <xref:System.Windows.Forms.ListView.OwnerDraw%2A> プロパティを `true` し、次のイベントの 1 つ以上の処理: <xref:System.Windows.Forms.ListView.DrawItem>, 、<xref:System.Windows.Forms.ListView.DrawSubItem>, 、<xref:System.Windows.Forms.ListView.DrawColumnHeader>です。  
  
 プロパティの多くは、 <xref:System.Windows.Forms.ListView> コントロールは際に使用される、 <xref:System.Windows.Forms.ListView.View%2A> にコントロールのプロパティが設定されている <xref:System.Windows.Forms.View.Details>します。<xref:System.Windows.Forms.ListView.AllowColumnReorder%2A> プロパティでは、ユーザーの <xref:System.Windows.Forms.ListView> 実行時に列の順序を再構成するコントロール。<xref:System.Windows.Forms.ListView.FullRowSelect%2A> プロパティでは、アイテムとそのサブ アイテムだけではなく選択します。 項目とサブ項目の境界を識別するために \[詳細\] ビューでグリッド線を表示する、 <xref:System.Windows.Forms.ListView>, 、使用することができます、 <xref:System.Windows.Forms.ListView.GridLines%2A> プロパティです。<xref:System.Windows.Forms.ListView.HeaderStyle%2A> プロパティでは、表示する列ヘッダーの種類を指定することができます。  
  
 A <xref:System.Windows.Forms.ListView> コントロールが仮想モードで運用する、 <xref:System.Windows.Forms.ListViewItem> で保存する代わりにオブジェクトが動的に生成される、 <xref:System.Windows.Forms.ListView.Items%2A> コレクションです。 これは、非常に大きなリストまたはリストの内容が頻繁に変更を処理するための便利なことができます。 仮想モードを有効にするには設定、 <xref:System.Windows.Forms.ListView.VirtualMode%2A> プロパティを `true` を処理し、 <xref:System.Windows.Forms.ListView.RetrieveVirtualItem>, 、<xref:System.Windows.Forms.ListView.CacheVirtualItems>, 、および <xref:System.Windows.Forms.ListView.SearchForVirtualItem> イベントです。  
  
 使用できる多くのプロパティだけでなく、 <xref:System.Windows.Forms.ListView> メソッドおよびその他の機能を提供するアプリケーションで使用できるイベントは、制御、 <xref:System.Windows.Forms.ListView>です。<xref:System.Windows.Forms.ListView.BeginUpdate%2A> と <xref:System.Windows.Forms.ListView.EndUpdate%2A> の方法は、多くの項目に追加すると、パフォーマンスを向上させることができます、 <xref:System.Windows.Forms.ListView> コントロールが項目を追加するたびに再描画するを防ぐことで。 場合、 <xref:System.Windows.Forms.ListView> コントロールが項目とサブ項目を表示する次のようにサブ項目を右クリックしたときに、機能を提供することがあります。 使用することができますがサブ項目がクリックされた項目を確認するのには <xref:System.Windows.Forms.ListView.GetItemAt%2A> メソッドです。 項目の検証を実行して、ユーザーが編集した後、特定の項目を変更するユーザーに表示することがあります。<xref:System.Windows.Forms.ListView.EnsureVisible%2A> 特定の項目がコントロールの可視領域にあることを確認するメソッドを呼び出すことができます。  
  
 場合、 <xref:System.Windows.Forms.ListView.LabelEdit%2A> プロパティに設定 `true`, 前に、と後のイベント ハンドラーを作成することで変更されたテキストを編集するテキストを検証するなどのタスクを行うことができます、 <xref:System.Windows.Forms.ListView.BeforeLabelEdit> と <xref:System.Windows.Forms.ListView.AfterLabelEdit> イベントです。 ファイルを開くときに表示されるアイテムの編集\] ダイアログ ボックスを表示するなどのタスクを実行する、 <xref:System.Windows.Forms.ListView>, のイベント ハンドラーを作成する、 <xref:System.Windows.Forms.ListView.ItemActivate> イベントです。 項目を並べ替えるにユーザーを許可するかどうか、 <xref:System.Windows.Forms.ListView> のイベント ハンドラーを作成するには、列の見出しをクリックすると、 <xref:System.Windows.Forms.ListView.ColumnClick> 並べ替えを実行するイベントです。 ときに、 <xref:System.Windows.Forms.ListView.CheckBoxes%2A> にプロパティが設定されている `true`, 、処理することにより、項目のチェック状態の変更が発生した場合を指定できます、 <xref:System.Windows.Forms.ListView.ItemCheck> イベントです。  
  
 背景画像を設定することも、 <xref:System.Windows.Forms.ListView> で、 <xref:System.Windows.Forms.Control.BackgroundImage%2A> プロパティです。 アプリケーションが必要、 <xref:System.STAThreadAttribute> でその `Main` の背景画像を正しく表示するメソッド、 <xref:System.Windows.Forms.ListView> コントロールです。 さらに場合、 <xref:System.Windows.Forms.ListView> 背景イメージを含むコントロールが Internet Explorer でホストされている、背景画像が表示されるプロパティであることを確認するアプリケーションのマニフェスト ファイル内の依存アセンブリとして comctl32.dll のバージョン 6.0 を指定します。  
  
> [!NOTE]
>  設定、 <xref:System.Windows.Forms.Control.Cursor%2A> プロパティを <xref:System.Windows.Forms.ListView> コントロールのカーソルの外観に影響がありません [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 1.1 またはそれ以前のバージョン。  
  
 Windows XP および Windows Server 2003 を強化する次の 3 つの機能を提供する、 <xref:System.Windows.Forms.ListView> 制御、アプリケーションを呼び出すと、 <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=fullName> メソッド: 表示、グループ化、および挿入マークを並べて表示します。  
  
 並べて表示ビューでは、大きいアイコンの横にある項目とサブ項目のテキストを表示することで、グラフィカルとテキストの情報を調整することができます。 設定、 <xref:System.Windows.Forms.ListView.View%2A> プロパティを <xref:System.Windows.Forms.View.Tile?displayProperty=fullName> この動作を有効にします。  
  
 グループ化機能を使用して、視覚的にアイテムを関連するカテゴリにグループ化できます。 使用して、 <xref:System.Windows.Forms.ListView.Groups%2A> プロパティを追加する <xref:System.Windows.Forms.ListViewGroup> オブジェクトを <xref:System.Windows.Forms.ListView> この機能を有効にする場合を制御します。 機能を一時的に無効にするには設定、 <xref:System.Windows.Forms.ListView.ShowGroups%2A> プロパティを `false`します。  
  
 挿入マーク機能では、ドラッグ アンド ドロップの項目のドロップ場所を示す視覚的なフィードバックを再配置を提供することができます。 使用して、 <xref:System.Windows.Forms.ListViewInsertionMark> オブジェクトを使用して取得、 <xref:System.Windows.Forms.ListView.InsertionMark%2A> 挿入マークを表示するプロパティです。  
  
 これらの機能は、Windows XP および Windows Server 2003 でのみ使用できます。 以前のオペレーティング システムでは、これらの機能に関連するコードが影響を与えません、並べて表示ビューが大きいアイコン表示として表示され挿入マークとグループは表示されません。 場合によっては、これらの機能は、使用できるかどうかを決定するコードを追加して、利用できない場合は、代替機能を提供可能性があります。 これらの機能は、オペレーティング システムのテーマの機能を提供する、同じライブラリによって提供されます。 このライブラリの可用性を確認するには、呼び出し、 <xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=fullName> メソッドのオーバー ロードは、パス、 <xref:System.Windows.Forms.OSFeature.Themes?displayProperty=fullName> 値。  
  
 次の表にはいくつかの <xref:System.Windows.Forms.ListView> メンバーおよびがで有効であるビューです。  
  
|ListView のメンバー|表示|  
|--------------------|--------|  
|<xref:System.Windows.Forms.ListView.Alignment%2A> プロパティ|<xref:System.Windows.Forms.View.SmallIcon> または <xref:System.Windows.Forms.View.LargeIcon>|  
|<xref:System.Windows.Forms.ListView.AutoArrange%2A> プロパティ|<xref:System.Windows.Forms.View.SmallIcon> または <xref:System.Windows.Forms.View.LargeIcon>|  
|<xref:System.Windows.Forms.ListView.AutoResizeColumn%2A> メソッド|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.Columns%2A> プロパティ|<xref:System.Windows.Forms.View.Details> または <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.DrawSubItem> イベント|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.FindItemWithText%2A> メソッド|<xref:System.Windows.Forms.View.Details>、<xref:System.Windows.Forms.View.List>、または <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.FindNearestItem%2A> メソッド|<xref:System.Windows.Forms.View.SmallIcon> または <xref:System.Windows.Forms.View.LargeIcon>|  
|<xref:System.Windows.Forms.ListView.GetItemAt%2A> メソッド|<xref:System.Windows.Forms.View.Details> または <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.Groups%2A> プロパティ|以外のすべてのビュー <xref:System.Windows.Forms.View.List>|  
|<xref:System.Windows.Forms.ListView.HeaderStyle%2A> プロパティ|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.InsertionMark%2A> プロパティ|<xref:System.Windows.Forms.View.LargeIcon>、<xref:System.Windows.Forms.View.SmallIcon>、または <xref:System.Windows.Forms.View.Tile>|  
  
   
  
## 例  
 次のコード例を作成、 <xref:System.Windows.Forms.ListView> の 3 つのコントロール <xref:System.Windows.Forms.ListViewItem> 指定されたオブジェクトと 3 つ <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> オブジェクトの各項目に指定します。 この例でも作成 <xref:System.Windows.Forms.ColumnHeader> 詳細ビューにサブ項目を表示するオブジェクト。 2 つ <xref:System.Windows.Forms.ImageList> にイメージを用意するコード例でも作成されるオブジェクト、 <xref:System.Windows.Forms.ListViewItem> オブジェクトです。 これら <xref:System.Windows.Forms.ImageList> にオブジェクトを追加、 <xref:System.Windows.Forms.ListView.LargeImageList%2A> と <xref:System.Windows.Forms.ListView.SmallImageList%2A> プロパティです。 この例を作成するのには、次のプロパティを使用して、 <xref:System.Windows.Forms.ListView> コントロール。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 この例では、コードが追加されたことが必要です、 <xref:System.Windows.Forms.Form> コンス トラクターまたは、フォーム上の別の方法の例で作成したメソッドを呼び出します。 また、例ではイメージがという名前が必要です `MySmallImage1`, 、`MySmallImage2`, 、`MyLargeImage1`, 、および `MyLargeImage2` C: ドライブのルート ディレクトリにあります。  
  
 [!code-cpp[ListViewExample\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.ListViewItem" />
    <altmember cref="T:System.Windows.Forms.ImageList" />
    <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ListView" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例を作成、 <xref:System.Windows.Forms.ListView> の 3 つのコントロール <xref:System.Windows.Forms.ListViewItem> 指定されたオブジェクトと 3 つ <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> オブジェクトの各項目に指定します。 この例でも作成 <xref:System.Windows.Forms.ColumnHeader> 詳細ビューにサブ項目を表示するオブジェクト。 2 つ <xref:System.Windows.Forms.ImageList> にイメージを用意するコード例でも作成されるオブジェクト、 <xref:System.Windows.Forms.ListViewItem> オブジェクトです。 これら <xref:System.Windows.Forms.ImageList> にオブジェクトを追加、 <xref:System.Windows.Forms.ListView.LargeImageList%2A> と <xref:System.Windows.Forms.ListView.SmallImageList%2A> プロパティです。 この例を作成するのには、次のプロパティを使用して、 <xref:System.Windows.Forms.ListView> コントロール。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 この例では、コードが追加されたことが必要です、 <xref:System.Windows.Forms.Form> コンス トラクターまたは、フォーム上の別の方法の例で作成したメソッドを呼び出します。 また、例ではイメージがという名前が必要です `MySmallImage1`, 、`MySmallImage2`, 、`MyLargeImage1`, 、および `MyLargeImage2` C: ドライブのルート ディレクトリにあります。  
  
 [!code-cpp[ListViewExample\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Activation">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ItemActivation Activation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ItemActivation Activation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Activation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemActivation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>項目をアクティブにするためにユーザーが実行する必要のあるアクションの種類を取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ItemActivation" /> 値のいずれか。 既定値は、<see cref="F:System.Windows.Forms.ItemActivation.Standard" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListView.Activation%2A> プロパティでは、ユーザーがアイテムをアクティブ化方法を指定することができます、 <xref:System.Windows.Forms.ListView> コントロールです。 内の項目をアクティブ化、 <xref:System.Windows.Forms.ListView> のみ項目を選択するとは異なります。 アイテムをアクティブになったときに、アクションは通常のイベント ハンドラーで、 <xref:System.Windows.Forms.ListView.ItemActivate> イベントです。 たとえば、アイテムがアクティブになったときにファイルを開くまたは項目を編集しようとするダイアログ ボックスを表示可能性があります。 通常は、ライセンス認証を行うユーザーが、項目をダブルクリックします。 場合、 <xref:System.Windows.Forms.ListView.Activation%2A> にプロパティが設定されている <xref:System.Windows.Forms.ItemActivation.OneClick>, 、アクティブ化して 1 つの項目の時間\] をクリックします。 設定、 <xref:System.Windows.Forms.ListView.Activation%2A> プロパティを <xref:System.Windows.Forms.ItemActivation.TwoClick> 2 回のクリックの間に任意の期間があるため、標準のダブルクリックは異なります。  
  
> [!NOTE]
>  場合、 <xref:System.Windows.Forms.ListView.Activation%2A> にプロパティが設定されている <xref:System.Windows.Forms.ItemActivation.OneClick> または <xref:System.Windows.Forms.ItemActivation.TwoClick>, 、ラベルを編集できなくなりますの値に関係なく、 <xref:System.Windows.Forms.ListView.LabelEdit%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定された値は、のいずれかではありません、 <see cref="T:System.Windows.Forms.ItemActivation" /> メンバーです。</exception>
        <altmember cref="T:System.Windows.Forms.ItemActivation" />
        <altmember cref="E:System.Windows.Forms.ListView.ItemActivate" />
      </Docs>
    </Member>
    <Member MemberName="AfterLabelEdit">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.LabelEditEventHandler AfterLabelEdit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.LabelEditEventHandler AfterLabelEdit" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.AfterLabelEdit" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LabelEditEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>項目のラベルがユーザーによって編集されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Windows.Forms.ListView.AfterLabelEdit> event occurs when the user finishes modifying the text for an item. The new string that the user types for the item is passed to the event, and the event handler can reject the change. If the event handler rejects the change, the text reverts to the text as it was before the user began editing the item.  
  
> [!NOTE]
>  Because the <xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=fullName> event takes place before the label edit is committed, calling the <xref:System.Windows.Forms.ListView.Sort%2A?displayProperty=fullName> method in a handler for this event will sort the item using the original value.  
  
 In order for the <xref:System.Windows.Forms.ListView.AfterLabelEdit> event to be raised, the <xref:System.Windows.Forms.ListView.LabelEdit%2A> property of the <xref:System.Windows.Forms.ListView> control must be set to **languageKeyword tag is not supported!!!!**  
.  
  
 You can create an event handler for the <xref:System.Windows.Forms.ListView.BeforeLabelEdit> event to perform tasks before the user edits the text of an item.  
  
 For more information about handling events, see [Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f).  
  
   
  
## 例  
 The following code example demonstrates how to use the <xref:System.Windows.Forms.ListView.AfterLabelEdit> event to restrict a newly edited label to characters in the alphabet. The example uses the <xref:System.Text.ASCIIEncoding> class to obtain the ASCII character code of each character of the new label. If the character falls between the ASCII codes that represent numbers, the new label cannot be applied to the item. This example requires that you have created a <xref:System.Windows.Forms.ListView> control on a form and added items to it. The example also requires that you have connected the <xref:System.Windows.Forms.ListView.AfterLabelEdit> event to the event handler defined in the example code. In order to use the <xref:System.Text.ASCIIEncoding> class, your file must include the <xref:System.Text> namespace.  
  
 [!code-cpp[ListView.AfterLabelEdit\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.AfterLabelEdit/CPP/form1.cpp#1)]
 [!code-csharp[ListView.AfterLabelEdit\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.AfterLabelEdit/CS/form1.cs#1)]
 [!code-vb[ListView.AfterLabelEdit\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.AfterLabelEdit/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnAfterLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />
        <altmember cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
        <altmember cref="T:System.Windows.Forms.LabelEditEventHandler" />
        <altmember cref="P:System.Windows.Forms.ListView.LabelEdit" />
      </Docs>
    </Member>
    <Member MemberName="Alignment">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewAlignment Alignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ListViewAlignment Alignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Alignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロール内の項目の配置を取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListViewAlignment" /> 値のいずれか。 既定値は、<see cref="F:System.Windows.Forms.ListViewAlignment.Top" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListView.Alignment%2A> プロパティのみの配置に影響と、 <xref:System.Windows.Forms.ListView.View%2A> にプロパティが設定されている <xref:System.Windows.Forms.View.LargeIcon> または <xref:System.Windows.Forms.View.SmallIcon>です。  
  
> [!NOTE]
>  このプロパティに影響を与えません、 <xref:System.Windows.Forms.ListView.View%2A> にプロパティが設定されている <xref:System.Windows.Forms.View.List>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定された値は、のいずれかではありません、 <see cref="T:System.Windows.Forms.ListViewAlignment" /> 値。</exception>
        <altmember cref="T:System.Windows.Forms.ListViewAlignment" />
      </Docs>
    </Member>
    <Member MemberName="AllowColumnReorder">
      <MemberSignature Language="C#" Value="public bool AllowColumnReorder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowColumnReorder" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.AllowColumnReorder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーが列ヘッダーをドラッグしてコントロールの列の並べ替えができるかどうかを示す値を、取得または設定します。</summary>
        <value>
          <see langword="true" /> ドラッグ アンド ドロップの列の順序変更が許可された場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値を設定、 <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A> プロパティも何も起こりませんしない限り、 <xref:System.Windows.Forms.ListView.View%2A> にプロパティが設定されている <xref:System.Windows.Forms.View.Details>します。 このプロパティを使用して、実行時にコントロールの列の位置を変更できるようにすることができます。 ときに、 <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A> にプロパティが設定されている `true`, 、ユーザーは、アプリケーション内でニーズを満たす方法で、項目とそのサブ項目を表示するコントロールの列を配置することができます。  
  
   
  
## 例  
 次のコード例を作成、 <xref:System.Windows.Forms.ListView> の 3 つのコントロール <xref:System.Windows.Forms.ListViewItem> 指定されたオブジェクトと 3 つ <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> オブジェクトの各項目に指定します。 この例でも作成 <xref:System.Windows.Forms.ColumnHeader> 詳細ビューにサブ項目を表示するオブジェクト。 2 つ <xref:System.Windows.Forms.ImageList> にイメージを用意するコード例でも作成されるオブジェクト、 <xref:System.Windows.Forms.ListViewItem> オブジェクトです。 これら <xref:System.Windows.Forms.ImageList> にオブジェクトを追加、 <xref:System.Windows.Forms.ListView.LargeImageList%2A> と <xref:System.Windows.Forms.ListView.SmallImageList%2A> プロパティです。 この例を作成するのには、次のプロパティを使用して、 <xref:System.Windows.Forms.ListView> コントロール。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 この例では、コードが追加されたことが必要です、 <xref:System.Windows.Forms.Form> コンス トラクターまたは、フォーム上の別の方法の例で作成したメソッドを呼び出します。 また、例ではイメージがという名前が必要です `MySmallImage1`, 、`MySmallImage2`, 、`MyLargeImage1`, 、および `MyLargeImage2` C: ドライブのルート ディレクトリにあります。  
  
 [!code-cpp[ListViewExample\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="ArrangeIcons">
      <MemberSignature Language="C#" Value="public void ArrangeIcons ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ArrangeIcons() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.ArrangeIcons" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>値に基づいてアイコンとして表示されるときに、コントロール内の項目を配置、 <see cref="P:System.Windows.Forms.ListView.Alignment" /> プロパティです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListView.ArrangeIcons%2A> メソッドは便利な場合に、 <xref:System.Windows.Forms.ListView.View%2A> にプロパティが設定されている <xref:System.Windows.Forms.View.LargeIcon> または <xref:System.Windows.Forms.View.SmallIcon>です。 このバージョンの呼び出し、 <xref:System.Windows.Forms.ListView.ArrangeIcons%2A> メソッドの値に基づいて項目を配置、 <xref:System.Windows.Forms.ListView.Alignment%2A> プロパティです。 配置する項目が発生するのとは異なる値に基づく、 <xref:System.Windows.Forms.ListView.Alignment%2A> プロパティには、その他のバージョンの使用、 <xref:System.Windows.Forms.ListView.ArrangeIcons%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.Alignment" />
      </Docs>
    </Member>
    <Member MemberName="ArrangeIcons">
      <MemberSignature Language="C#" Value="public void ArrangeIcons (System.Windows.Forms.ListViewAlignment value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ArrangeIcons(valuetype System.Windows.Forms.ListViewAlignment value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.ArrangeIcons(System.Windows.Forms.ListViewAlignment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Forms.ListViewAlignment" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Windows.Forms.ListViewAlignment" /> 値のいずれか。</param>
        <summary>コントロール内の項目が指定した配置設定を使用してアイコンとして表示されるときに、それらの項目を配置します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListView.ArrangeIcons%2A> メソッドは便利な場合に、 <xref:System.Windows.Forms.ListView.View%2A> にプロパティが設定されている <xref:System.Windows.Forms.View.LargeIcon> または <xref:System.Windows.Forms.View.SmallIcon>です。 このバージョンの <xref:System.Windows.Forms.ListView.ArrangeIcons%2A> メソッドは、アイコンを整列、 <xref:System.Windows.Forms.ListView> に基づいて、 <xref:System.Windows.Forms.ListViewAlignment> で指定された値、 `value` パラメーター。 このメソッドを呼び出すことは、値を変更しない、 <xref:System.Windows.Forms.ListView.Alignment%2A> コントロールのプロパティです。 このメソッドがの場合よりも別の値を使用して、コントロールのアイコンを配置に使用される、 <xref:System.Windows.Forms.ListView.Alignment%2A> プロパティです。 配置する項目の値に基づく、 <xref:System.Windows.Forms.ListView.Alignment%2A> プロパティには、他のバージョンの使用、 <xref:System.Windows.Forms.ListView.ArrangeIcons%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定された値、 <paramref name="value" /> パラメーターは、のメンバーではない、 <see cref="T:System.Windows.Forms.ListViewAlignment" /> 列挙します。</exception>
        <altmember cref="T:System.Windows.Forms.ListViewAlignment" />
        <altmember cref="P:System.Windows.Forms.ListView.Alignment" />
      </Docs>
    </Member>
    <Member MemberName="AutoArrange">
      <MemberSignature Language="C#" Value="public bool AutoArrange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoArrange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.AutoArrange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アイコンが自動的に配置されるかどうかを取得または設定します。</summary>
        <value>
          <see langword="true" /> 配置とは、グリッドにスナップ アイコンが自動的に配置される場合はそれ以外の場合、 <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListView.AutoArrange%2A> プロパティのみによって項目に、 <xref:System.Windows.Forms.ListView> タイミングを制御、 <xref:System.Windows.Forms.ListView.View%2A> にプロパティが設定されている <xref:System.Windows.Forms.View.LargeIcon> または <xref:System.Windows.Forms.View.SmallIcon>です。 内のアイテムの配置を変更する、 <xref:System.Windows.Forms.ListView> コントロールを使用して、 <xref:System.Windows.Forms.ListView.Alignment%2A> プロパティです。 使用することができます <xref:System.Windows.Forms.ListView.AutoArrange%2A> いるすべての項目を確認する、 <xref:System.Windows.Forms.ListView> コントロールが実行時に重ならないように自動的に配置します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.Alignment" />
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumn">
      <MemberSignature Language="C#" Value="public void AutoResizeColumn (int columnIndex, System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeColumn(int32 columnIndex, valuetype System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.AutoResizeColumn(System.Int32,System.Windows.Forms.ColumnHeaderAutoResizeStyle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="headerAutoResize" Type="System.Windows.Forms.ColumnHeaderAutoResizeStyle" />
      </Parameters>
      <Docs>
        <param name="columnIndex">サイズを変更する列の 0 から始まるインデックス。</param>
        <param name="headerAutoResize">
          <see cref="T:System.Windows.Forms.ColumnHeaderAutoResizeStyle" /> 値のいずれか。</param>
        <summary>特定の列の幅を、サイズ変更スタイルで示された幅にサイズ変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを呼び出すことは有効な 1 回、 <xref:System.Windows.Forms.ListView> に含まれる <xref:System.Windows.Forms.Form> 作成されていると、 <xref:System.Windows.Forms.ListView> 項目を含む列ヘッダーおよび列が設定されます。 新しい項目が追加された場合、 <xref:System.Windows.Forms.ListView>, 、サイズしない限り、列が変更されない <xref:System.Windows.Forms.ListView.AutoResizeColumn%2A> を再び呼び出しています。  
  
   
  
## 例  
 次のコード例では、初期化を示しています、 <xref:System.Windows.Forms.ListView> 詳細の表示とを使用して列を自動的にサイズ変更、 <xref:System.Windows.Forms.ListView.AutoResizeColumn%2A> メソッドです。 この例を実行するを Windows フォームと呼び出しにこのコードを貼り付けて、 `InitializeResizingListView` フォームのコンス トラクターからのメソッドまたは <xref:System.Windows.Forms.Form.Load> イベント ハンドラーです。  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndex" /> 場合は 0 より大きい <see cref="P:System.Windows.Forms.ListView.Columns" /> は <see langword="null" />  
  
 または  
  
 <paramref name="columnIndex" /> 0 より小さいか、列の組数よりも大きい値です。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="headerAutoResize" /> メンバーではない、 <see cref="T:System.Windows.Forms.ColumnHeaderAutoResizeStyle" /> 列挙します。</exception>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumns">
      <MemberSignature Language="C#" Value="public void AutoResizeColumns (System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeColumns(valuetype System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.AutoResizeColumns(System.Windows.Forms.ColumnHeaderAutoResizeStyle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="headerAutoResize" Type="System.Windows.Forms.ColumnHeaderAutoResizeStyle" />
      </Parameters>
      <Docs>
        <param name="headerAutoResize">
          <see cref="T:System.Windows.Forms.ColumnHeaderAutoResizeStyle" /> 値のいずれか。</param>
        <summary>列の幅を、サイズ変更スタイルで示された幅にサイズ変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを呼び出すことは有効な 1 回、 <xref:System.Windows.Forms.ListView> に含まれる <xref:System.Windows.Forms.Form> 作成されていると、 <xref:System.Windows.Forms.ListView> 項目を含む列ヘッダーおよび列が設定されます。 新しい項目が追加された場合、 <xref:System.Windows.Forms.ListView>, 、サイズしない限り、列が変更されない <xref:System.Windows.Forms.ListView.AutoResizeColumns%2A> を再び呼び出しています。  
  
   
  
## 例  
 次のコード例では、初期化を示しています、 <xref:System.Windows.Forms.ListView> 詳細の表示とを使用して列を自動的にサイズ変更、 <xref:System.Windows.Forms.ListView.AutoResizeColumns%2A> メソッドです。 この例を実行するを Windows フォームと呼び出しにこのコードを貼り付けて、 `InitializeResizingListView2` フォームのコンス トラクターからのメソッドまたは <xref:System.Windows.Forms.Form.Load> イベント ハンドラーです。  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties\#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#9)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties\#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Windows.Forms.ListView.AutoResizeColumn(System.Int32,System.Windows.Forms.ColumnHeaderAutoResizeStyle)" /> 以外の値で呼び出された <see cref="F:System.Windows.Forms.ColumnHeaderAutoResizeStyle.None" /> と <see cref="P:System.Windows.Forms.ListView.View" /> に設定されていない <see cref="F:System.Windows.Forms.View.Details" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.BackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>背景色を取得または設定します。</summary>
        <value>
          <see cref="T:System.Drawing.Color" /> バック グラウンドのです。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayout">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImageLayout BackgroundImageLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.BackgroundImageLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、 <see cref="T:System.Windows.Forms.ImageLayout" /> 値。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ImageLayout" /> 値のいずれか。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティの背景イメージのレイアウトに影響を与えません、 <xref:System.Windows.Forms.ListView> コントロール、したがっては表示されませんが、デザイナーまたは IntelliSense によってです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定された値は、のいずれかではありません、 <see cref="T:System.Windows.Forms.ImageLayout" /> 値。</exception>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageLayoutChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.BackgroundImageLayoutChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.ListView.BackgroundImageLayout" /> プロパティが変更されたときに発生します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageTiled">
      <MemberSignature Language="C#" Value="public bool BackgroundImageTiled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BackgroundImageTiled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.BackgroundImageTiled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはを示す値を設定するかどうかの背景イメージ、 <see cref="T:System.Windows.Forms.ListView" /> 並べて表示する必要があります。</summary>
        <value>
          <see langword="true" /> 場合の背景イメージ、 <see cref="T:System.Windows.Forms.ListView" /> 並べて表示される以外にする必要があります <see langword="false" />します。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListView.BackgroundImageTiled%2A> プロパティを返します。 `false` イメージが設定されていない場合。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeLabelEdit">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.LabelEditEventHandler BeforeLabelEdit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.LabelEditEventHandler BeforeLabelEdit" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LabelEditEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーが項目のラベルの編集を開始すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListView.BeforeLabelEdit> イベント、ユーザーが項目のテキストの変更を開始するときに発生します。 イベント ハンドラーは、このイベントをキャンセルした場合、ユーザーは、テキストを編集できません。 このイベントを使用するには、ユーザーが特定の項目を編集しないようにする、 <xref:System.Windows.Forms.ListView> コントロールです。 場合、 <xref:System.Windows.Forms.ListView.LabelEdit%2A> のプロパティ、 <xref:System.Windows.Forms.ListView> にコントロールが設定されている `false`, 、 <xref:System.Windows.Forms.ListView.BeforeLabelEdit> イベントは発生しません。 項目のラベルを編集するユーザーのすべての試行が自動的に拒否されます。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例には、処理を示しています、 <xref:System.Windows.Forms.ListView.BeforeLabelEdit> イベントを使用して、 <xref:System.Windows.Forms.LabelEditEventArgs.Item%2A?displayProperty=fullName> と <xref:System.Windows.Forms.LabelEditEventArgs.CancelEdit%2A?displayProperty=fullName> プロパティです。 例を実行するを含むフォームに次のコードを貼り付け、 <xref:System.Windows.Forms.ListView> という名前のコントロール `ListView1` し、少なくとも 3 つの項目を格納します。 例では、イベント ハンドラーがそのイベントに関連付けられていることを確認します。  
  
 [!code-cpp[System.Windows.Forms.ListView3\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView3\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView3\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView3/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnBeforeLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />
        <altmember cref="E:System.Windows.Forms.ListView.AfterLabelEdit" />
        <altmember cref="T:System.Windows.Forms.LabelEditEventHandler" />
        <altmember cref="P:System.Windows.Forms.ListView.LabelEdit" />
      </Docs>
    </Member>
    <Member MemberName="BeginUpdate">
      <MemberSignature Language="C#" Value="public void BeginUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.BeginUpdate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>により、このコントロールは描画するまで、 <see cref="M:System.Windows.Forms.ListView.EndUpdate" /> メソッドが呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 複数の項目を追加することをお勧め、 <xref:System.Windows.Forms.ListView> を使用して、 <xref:System.Windows.Forms.ListView.ListViewItemCollection.AddRange%2A> のメソッド、 <xref:System.Windows.Forms.ListView.ListViewItemCollection> \(を使用してアクセス、 <xref:System.Windows.Forms.ListView.Items%2A> のプロパティ、 <xref:System.Windows.Forms.ListView>\)。 これにより、1 回の操作リストに項目の配列を追加することができます。 ただしを追加する場合は、アイテムを一度に 1 つを使用して、時間、 <xref:System.Windows.Forms.ListView.ListViewItemCollection.Add%2A> のメソッド、 <xref:System.Windows.Forms.ListView.ListViewItemCollection> クラスを使用できます、 <xref:System.Windows.Forms.ListView.BeginUpdate%2A> メソッドをコントロールが再描画するを防ぐために、 <xref:System.Windows.Forms.ListView> に項目が追加されるたびにします。 コントロールに項目を追加するタスクを完了したらを呼び出す、 <xref:System.Windows.Forms.ListView.EndUpdate%2A> を有効にする方法、 <xref:System.Windows.Forms.ListView> を再描画します。 この方法で項目を追加するときにちらつきませんの描画、 <xref:System.Windows.Forms.ListView> は、多くの項目をコントロールに追加する場合。  
  
 場合 <xref:System.Windows.Forms.ListView.BeginUpdate%2A> 複数回と呼ばれる <xref:System.Windows.Forms.ListView.EndUpdate%2A> と同じ回数だけを呼び出す必要があります。 最後の呼び出しまで <xref:System.Windows.Forms.ListView.EndUpdate%2A> 、 <xref:System.Windows.Forms.ListView> 再描画されません。 また、何度も呼び出すを <xref:System.Windows.Forms.ListView.BeginUpdate%2A> 影響を与えるありません。  
  
   
  
## 例  
 次のコード例では、初期化を示しています、 <xref:System.Windows.Forms.ListView> にあるチェック ボックスを制御します。 使用する方法も示します、 <xref:System.Windows.Forms.ListView.BeginUpdate%2A> と <xref:System.Windows.Forms.ListView.EndUpdate%2A> メソッドです。 この例を実行するを含むフォームに次のコードを貼り付け、 <xref:System.Windows.Forms.ListView> という `ListView1`します。 呼び出す、 `InititalizeListView` フォームのコンス トラクターからのメソッドまたは `Load` メソッドです。  
  
 [!code-cpp[System.Windows.Forms.ListView2\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView2\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView2\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.EndUpdate" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.AddRange(System.Windows.Forms.ListViewItem[])" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.Add(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="BorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BorderStyle BorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.BorderStyle BorderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.BorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-504)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの境界線スタイルを取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.BorderStyle" /> 値のいずれか。 既定値は、<see cref="F:System.Windows.Forms.BorderStyle.Fixed3D" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することができます、 <xref:System.Windows.Forms.ListView.BorderStyle%2A> の罫線のスタイルを変更するプロパティ、 <xref:System.Windows.Forms.ListView> コントロールをフォーム上の他のコントロールの罫線のスタイル設定に一致します。 たとえば、フォーム上で他のコントロールの \[なし\] には、枠線が表示されている場合を設定できます、 <xref:System.Windows.Forms.ListView.BorderStyle%2A> のプロパティ、 <xref:System.Windows.Forms.ListView> に制御を <xref:System.Windows.Forms.BorderStyle.None> 他のコントロールを一致するようにします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定された値は、のいずれかではありません、 <see cref="T:System.Windows.Forms.BorderStyle" /> 値。</exception>
        <altmember cref="T:System.Windows.Forms.BorderStyle" />
      </Docs>
    </Member>
    <Member MemberName="CacheVirtualItems">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.CacheVirtualItemsEventHandler CacheVirtualItems;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.CacheVirtualItemsEventHandler CacheVirtualItems" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.CacheVirtualItems" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CacheVirtualItemsEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときの表示領域の内容、 <see cref="T:System.Windows.Forms.ListView" /> 仮想モードが変更されたと <see cref="T:System.Windows.Forms.ListView" /> 項目の新しい範囲が必要になっていることを決定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントのみ発生時に <xref:System.Windows.Forms.ListView.VirtualMode%2A> は `true`です。 により、このイベントの処理、 <xref:System.Windows.Forms.ListView> 項目情報を更新するキャッシュに保持、すぐに使用できるようにします。 これにより、大きなリストまたはリスト項目であるにかかるコストは計算にパフォーマンスが向上することができます。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 この例では、イベント ハンドラーは、キャッシュの更新が本当に必要し、キャッシュを再構築されていることを確認するを確認します。 このコード例が示されている例の一部は、 <xref:System.Windows.Forms.ListView.VirtualMode%2A> プロパティです。  
  
 [!code-csharp[System.Windows.Forms.ListView.VirtualMode\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/cs/VirtualMode.cs#3)]
 [!code-vb[System.Windows.Forms.ListView.VirtualMode\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/vb/VirtualMode.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckBoxes">
      <MemberSignature Language="C#" Value="public bool CheckBoxes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckBoxes" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.CheckBoxes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの各項目の横にチェック ボックスを表示するかどうかを示す値を取得または設定します。</summary>
        <value>
          <see langword="true" /> 内の各項目の横にあるチェック ボックスを表示するかどうか、 <see cref="T:System.Windows.Forms.ListView" /> コントロール。 それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListView.CheckBoxes%2A> プロパティでは、一覧に各項目の横のチェック ボックスを表示することができます。 これにより、アプリケーションのアイテムの一覧を表示する \(subitems 場合と、 <xref:System.Windows.Forms.ListView.View%2A> にプロパティが設定されている `View.Details`\) チェック ボックスをクリックして、ユーザーを選択できます。<xref:System.Windows.Forms.ListView.CheckBoxes%2A> プロパティの複数の項目を選択する方法には、 <xref:System.Windows.Forms.ListView> コントロールせずに、CTRL キーを使用します。 アプリケーションによっては、複数の選択方法標準ではなく、アイテムを選択する\] チェック ボックスを使用して、ユーザーが簡単にもあります。 場合でも、 <xref:System.Windows.Forms.ListView.MultiSelect%2A> のプロパティ、 <xref:System.Windows.Forms.ListView> にコントロールが設定されている `false`, 、チェック ボックスを表示し、複数選択機能をユーザーに提供できます。 この機能はない複数のアイテムを選択するまだユーザーが、アプリケーション内で操作を実行するリストから複数の項目を選択できるようにする場合、役に立ちます。  
  
 項目がチェックされたかを確認するには、イベント ハンドラーを作成、 <xref:System.Windows.Forms.ListView.ItemCheck> イベントです。 チェックインされているすべての項目を取得する、 <xref:System.Windows.Forms.ListView>, を使用して、 <xref:System.Windows.Forms.ListView.CheckedItems%2A> にアクセスするプロパティ、 <xref:System.Windows.Forms.ListView.CheckedIndexCollection> コントロールのです。 チェックインされているすべての項目のインデックスを取得する、 <xref:System.Windows.Forms.ListView>, を使用して、 <xref:System.Windows.Forms.ListView.CheckedIndices%2A> プロパティです。  
  
 場合、 <xref:System.Windows.Forms.ImageList> で指定された、 <xref:System.Windows.Forms.ListView.StateImageList%2A> プロパティ、イメージのインデックス位置 0 と 1 に、 <xref:System.Windows.Forms.ImageList> \] チェック ボックスの代わりに表示されます。 チェック ボックスをオンになっていないのではなくインデックス位置 0 に画像が表示され、チェックされたチェック ボックスではなく、インデックス位置 1 のイメージが表示されます。  
  
> [!NOTE]
>  このプロパティを設定すると `true`, 、 <xref:System.Windows.Forms.ListView.ItemCheck> イベントが発生します。  
>   
>  チェック ボックスができない場合に表示される、 <xref:System.Windows.Forms.ListView.View%2A> にプロパティが設定されている <xref:System.Windows.Forms.View.Tile>します。  
  
   
  
## 例  
 次のコード例を作成、 <xref:System.Windows.Forms.ListView> の 3 つのコントロール <xref:System.Windows.Forms.ListViewItem> 指定されたオブジェクトと 3 つ <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> オブジェクトの各項目に指定します。 この例でも作成 <xref:System.Windows.Forms.ColumnHeader> 詳細ビューにサブ項目を表示するオブジェクト。 2 つ <xref:System.Windows.Forms.ImageList> にイメージを用意するコード例でも作成されるオブジェクト、 <xref:System.Windows.Forms.ListViewItem> オブジェクトです。 これら <xref:System.Windows.Forms.ImageList> にオブジェクトを追加、 <xref:System.Windows.Forms.ListView.LargeImageList%2A> と <xref:System.Windows.Forms.ListView.SmallImageList%2A> プロパティです。 この例を作成するのには、次のプロパティを使用して、 <xref:System.Windows.Forms.ListView> コントロールです。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 この例では、コードが追加されたことが必要です、 <xref:System.Windows.Forms.Form> コンス トラクターまたは、フォーム上の別の方法の例で作成したメソッドを呼び出します。 また、例ではイメージがという名前が必要です `MySmallImage1`, 、`MySmallImage2`, 、`MyLargeImage1`, 、および `MyLargeImage2` C: ドライブのルート ディレクトリにあります。  
  
 [!code-cpp[ListViewExample\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.StateImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="P:System.Windows.Forms.ListView.MultiSelect" />
      </Docs>
    </Member>
    <Member MemberName="CheckedIndices">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.CheckedIndexCollection CheckedIndices { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/CheckedIndexCollection CheckedIndices" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.CheckedIndices" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+CheckedIndexCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの現在チェックされている項目のインデックスを取得します。</summary>
        <value>A <see cref="T:System.Windows.Forms.ListView.CheckedIndexCollection" /> 現在チェックされている項目のインデックスを含んでいます。 項目が現在チェックされていない場合、空 <see cref="T:System.Windows.Forms.ListView.CheckedIndexCollection" /> が返されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときにこのプロパティは便利なだけ、 <xref:System.Windows.Forms.ListView.CheckBoxes%2A> のプロパティ、 <xref:System.Windows.Forms.ListView> に設定されているコントロール `true`します。<xref:System.Windows.Forms.ListView.CheckedIndices%2A> プロパティ内のインデックス位置を含むコレクションを返します、 <xref:System.Windows.Forms.ListView.ListViewItemCollection> すべての項目のコントロールでオンになっています。 コレクション内の項目を操作する方法の詳細については、次を参照してください。 <xref:System.Windows.Forms.ListView.CheckedIndexCollection>します。  
  
 チェックインされている項目のコレクションを取得するかどうか、 <xref:System.Windows.Forms.ListView> インデックス位置を使用して、項目がチェックされるのではなく、コントロール、 <xref:System.Windows.Forms.ListView.CheckedItems%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.CheckedIndexCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckedItems" />
      </Docs>
    </Member>
    <Member MemberName="CheckedItems">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.CheckedListViewItemCollection CheckedItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/CheckedListViewItemCollection CheckedItems" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.CheckedItems" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+CheckedListViewItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの現在チェックされている項目を取得します。</summary>
        <value>A <see cref="T:System.Windows.Forms.ListView.CheckedListViewItemCollection" /> 現在チェックされている項目を格納します。 項目が現在チェックされていない場合、空 <see cref="T:System.Windows.Forms.ListView.CheckedListViewItemCollection" /> が返されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときにこのプロパティは便利なだけ、 <xref:System.Windows.Forms.ListView.CheckBoxes%2A> のプロパティ、 <xref:System.Windows.Forms.ListView> に設定されているコントロール `true`します。<xref:System.Windows.Forms.ListView.CheckedItems%2A> プロパティをコントロールでオンになっているすべての項目を含むコレクションを返します。 コレクション内の項目を操作する方法の詳細については、次を参照してください。 <xref:System.Windows.Forms.ListView.CheckedListViewItemCollection>します。  
  
 内のインデックス位置のコレクションを取得するかどうか、 <xref:System.Windows.Forms.ListView.ListViewItemCollection> でオンになっている項目の <xref:System.Windows.Forms.ListView> コントロールを使用する、項目がチェックされるのではなく、 <xref:System.Windows.Forms.ListView.CheckedIndices%2A> プロパティです。  
  
   
  
## 例  
 次のコード例に示しますチェック <xref:System.Windows.Forms.ListView> を処理する、 <xref:System.Windows.Forms.ListView.ItemChecked> イベントです。 例では、 <xref:System.Windows.Forms.ListView.CheckedItems%2A> 項目がオンまたはオフになるたびに新しい価格を集計するためのプロパティです。 この例を実行するを含むフォームに次のコードを貼り付け、 <xref:System.Windows.Forms.ListView> という名前 `ListView1` と <xref:System.Windows.Forms.TextBox> という名前 `Textbox1`します。 呼び出す、 `InititalizeListView` フォームのコンス トラクターからのメソッドまたは `Load` メソッドです。  
  
 [!code-cpp[System.Windows.Forms.ListView2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView2#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#3)]
[!code-csharp[System.Windows.Forms.ListView2#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#3)]
[!code-vb[System.Windows.Forms.ListView2#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.CheckedListViewItemCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckedIndices" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.Clear" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールからすべての項目と列を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 You can use this method to remove all items and columns from the <xref:System.Windows.Forms.ListView> control without having to call the individual **languageKeyword tag is not supported!!!!**  
 methods from the <xref:System.Windows.Forms.ListView.ColumnHeaderCollection> and <xref:System.Windows.Forms.ListView.ListViewItemCollection> classes.  
  
> [!NOTE]
>  The <xref:System.Windows.Forms.ListView.Clear%2A> method does not clear <xref:System.Windows.Forms.ListView.Groups%2A> specified for the <xref:System.Windows.Forms.ListView> control. To clear <xref:System.Windows.Forms.ListView.Groups%2A> call <xref:System.Windows.Forms.ListViewGroupCollection.Clear%2A?displayProperty=fullName>.  
  
   
  
## 例  
 The following code example demonstrates the use of <xref:System.Windows.Forms.ListView.Clear%2A> and <xref:System.Windows.Forms.ListViewItem.Selected%2A?displayProperty=fullName> members. To run this example, paste the following code into a form that contains a <xref:System.Windows.Forms.ListView> named `ListView1` and a button, located toward the bottom of the form, named `Button1`. Call the `InitializeListView` method from the form's constructor or `Load` method.  
  
 [!code-cpp[System.Windows.Forms.ListView4\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView4/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView4\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView4/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView4\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView4/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.ColumnHeaderCollection.Clear" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.Clear" />
      </Docs>
    </Member>
    <Member MemberName="ColumnClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ColumnClickEventHandler ColumnClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ColumnClickEventHandler ColumnClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ColumnClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnClickEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがリスト ビュー コントロール内の列ヘッダーをクリックすると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Windows.Forms.ListView.ColumnClick> event occurs when the user clicks one of the column headers in a details view of the items in a <xref:System.Windows.Forms.ListView> control \(when the <xref:System.Windows.Forms.ListView.View%2A> property is set to <xref:System.Windows.Forms.View.Details>\). The <xref:System.Windows.Forms.ListView.ColumnClick> event is typically handled to sort the items in the <xref:System.Windows.Forms.ListView> using the clicked column as the column to sort by.  
  
 For more information about handling events, see [Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f).  
  
   
  
## 例  
 The following code example creates a form that contains a <xref:System.Windows.Forms.ListView> control that manually sorts items when a column in the <xref:System.Windows.Forms.ListView> control is clicked. The example defines a class called `ListViewItemComparer` that implements the <xref:System.Collections.IComparer?displayProperty=fullName> interface that performs the <xref:System.Windows.Forms.ListViewItem> comparison. The example creates an instance of `ListViewItemComparer` and uses it to set the <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> property of the <xref:System.Windows.Forms.ListView> control. The <xref:System.Windows.Forms.ListView.Sort%2A> method call in the <xref:System.Windows.Forms.ListView.ColumnClick> event handler uses the methods defined in `ListViewItemComparer` to perform the sort of items, based on the column that is clicked.  
  
 [!code-cpp[ListView.ColumnClick\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.ColumnClick/CPP/listviewsort1.cpp#1)]
 [!code-csharp[ListView.ColumnClick\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.ColumnClick/CS/listviewsort1.cs#1)]
 [!code-vb[ListView.ColumnClick\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.ColumnClick/VB/listviewsort1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ColumnReordered">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ColumnReorderedEventHandler ColumnReordered;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ColumnReorderedEventHandler ColumnReordered" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ColumnReordered" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnReorderedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>列ヘッダーの順序が変更されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Windows.Forms.ListView.ColumnReordered> event is a cancelable event and can be canceled by handling the event and setting the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property to **languageKeyword tag is not supported!!!!**  
. However, if the event is canceled, the <xref:System.Windows.Forms.ColumnReorderedEventArgs.NewDisplayIndex%2A> of the <xref:System.Windows.Forms.ColumnReorderedEventArgs> will not change to the <xref:System.Windows.Forms.ColumnReorderedEventArgs.OldDisplayIndex%2A> value.  
  
 For more information about handling events, see [Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f).  
  
   
  
## 例  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.ListView.ColumnReordered> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.ListView> named `ListView1`. Then ensure that the event handler is associated with the <xref:System.Windows.Forms.ListView.ColumnReordered> event.  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#467](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#467)]
 [!code-vb[System.Windows.Forms.EventExamples\#467](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#467)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Columns">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.ColumnHeaderCollection Columns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/ColumnHeaderCollection Columns" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Columns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ColumnHeaderCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+ColumnHeaderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールに表示されるすべての列ヘッダーのコレクションを取得します。</summary>
        <value>A <see cref="T:System.Windows.Forms.ListView.ColumnHeaderCollection" /> ときに表示される列ヘッダーを表す、 <see cref="P:System.Windows.Forms.ListView.View" /> にプロパティが設定されている <see cref="F:System.Windows.Forms.View.Details" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListView.Columns%2A> プロパティを含むコレクションを返します、 <xref:System.Windows.Forms.ColumnHeader> に表示されるオブジェクト、 <xref:System.Windows.Forms.ListView> コントロールです。<xref:System.Windows.Forms.ColumnHeader> オブジェクトに表示される列を定義する、 <xref:System.Windows.Forms.ListView> タイミングを制御、 <xref:System.Windows.Forms.ListView.View%2A> にプロパティが設定されている <xref:System.Windows.Forms.View.Details>します。 項目ごとにサブ項目の情報を表示する各列の使用、 <xref:System.Windows.Forms.ListView>です。 コレクション内の項目を操作する方法の詳細については、次を参照してください。 <xref:System.Windows.Forms.ListView.ColumnHeaderCollection>します。  
  
> [!NOTE]
>  場合、 <xref:System.Windows.Forms.ListView> コントロールには、指定された任意の列ヘッダーはありません。 設定すると、 <xref:System.Windows.Forms.ListView.View%2A> プロパティを <xref:System.Windows.Forms.View.Details>, 、 <xref:System.Windows.Forms.ListView> コントロールはすべての項目が表示されません。  
  
   
  
## 例  
 次のコード例を作成、 <xref:System.Windows.Forms.ListView> の 3 つのコントロール <xref:System.Windows.Forms.ListViewItem> 指定されたオブジェクトと 3 つ <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> オブジェクトの各項目に指定します。 この例でも作成 <xref:System.Windows.Forms.ColumnHeader> 詳細ビューにサブ項目を表示するオブジェクト。 2 つ <xref:System.Windows.Forms.ImageList> にイメージを用意するコード例でも作成されるオブジェクト、 <xref:System.Windows.Forms.ListViewItem> オブジェクトです。 これら <xref:System.Windows.Forms.ImageList> にオブジェクトを追加、 <xref:System.Windows.Forms.ListView.LargeImageList%2A> と <xref:System.Windows.Forms.ListView.SmallImageList%2A> プロパティです。 この例を作成するのには、次のプロパティを使用して、 <xref:System.Windows.Forms.ListView> コントロールです。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 この例では、コードが追加されたことが必要です、 <xref:System.Windows.Forms.Form> コンス トラクターまたは、フォーム上の別の方法の例で作成したメソッドを呼び出します。 また、例ではイメージがという名前が必要です `MySmallImage1`, 、`MySmallImage2`, 、`MyLargeImage1`, 、および `MyLargeImage2` C: ドライブのルート ディレクトリにあります。  
  
 [!code-cpp[ListViewExample\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.ColumnHeaderCollection" />
        <altmember cref="T:System.Windows.Forms.ColumnHeader" />
      </Docs>
    </Member>
    <Member MemberName="ColumnWidthChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ColumnWidthChangedEventHandler ColumnWidthChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ColumnWidthChangedEventHandler ColumnWidthChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ColumnWidthChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnWidthChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>列の幅が正常に変更された後で発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This event will not occur if the column width change is canceled in the <xref:System.Windows.Forms.ListView.ColumnWidthChanging> event  
  
 For more information about handling events, see [Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f).  
  
   
  
## 例  
 The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.ListView.ColumnWidthChanged> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  
  
 To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.ListView> named `ListView1`. Then ensure that the event handler is associated with the <xref:System.Windows.Forms.ListView.ColumnWidthChanged> event.  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#468](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#468)]
 [!code-vb[System.Windows.Forms.EventExamples\#468](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#468)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnWidthChanging">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ColumnWidthChangingEventHandler ColumnWidthChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ColumnWidthChangingEventHandler ColumnWidthChanging" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ColumnWidthChanging" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnWidthChangingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>列の幅が変更される場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、使用して新しい列の幅を確認するため、 <xref:System.Windows.Forms.ColumnWidthChangingEventArgs.NewWidth%2A?displayProperty=fullName> プロパティ、および \[キャンセル\] を設定して選択した場合、イベント、 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> プロパティを `true`します。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例に示します処理、 <xref:System.Windows.Forms.ListView.ColumnWidthChanging> イベントです。 また、 <xref:System.Windows.Forms.ColumnWidthChangingEventArgs.NewWidth%2A?displayProperty=fullName> と <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> メンバーです。 この例を実行するには、Windows フォームにコードを貼り付けます。 呼び出す `InitializeListView1` フォームのコンス トラクターからまたは <xref:System.Windows.Forms.Form.Load> イベント ハンドラーです。  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties\#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#6)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties\#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="protected override void CreateHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CreateHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.CreateHandle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールのハンドルを作成します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.CreateParams" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このクラスでは、このプロパティは使用されません。</summary>
        <value>常に <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This property is not relevant for this class.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultSize">
      <MemberSignature Language="C#" Value="protected override System.Drawing.Size DefaultSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.DefaultSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの既定のサイズを取得します。</summary>
        <value>コントロールの既定の <see cref="T:System.Drawing.Size" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.Windows.Forms.ListView" /> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Call the <xref:System.Windows.Forms.ListView.Dispose%2A> method when the component is no longer needed. This method removes the component from its container \(if the component has a site\) and triggers the dispose event.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoubleBuffered">
      <MemberSignature Language="C#" Value="protected override bool DoubleBuffered { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DoubleBuffered" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.DoubleBuffered" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ちらつきを軽減または回避するために、2 次バッファーを使用してコントロールの表面を再描画するかどうかを示す値を取得または設定します。</summary>
        <value>ダブル バッファリングを使用してコントロールの表面を再描画する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawColumnHeader">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawListViewColumnHeaderEventHandler DrawColumnHeader;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawListViewColumnHeaderEventHandler DrawColumnHeader" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.DrawColumnHeader" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawListViewColumnHeaderEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>詳細の表示のときに発生、 <see cref="T:System.Windows.Forms.ListView" /> が描画されると、 <see cref="P:System.Windows.Forms.ListView.OwnerDraw" /> にプロパティが設定されている <see langword="true" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントでは、外観をカスタマイズすることができます、 <xref:System.Windows.Forms.ListView> オーナー描画を使用してコントロールします。 このイベントは発生される場合にのみ、 <xref:System.Windows.Forms.ListView.OwnerDraw%2A> プロパティに設定されて `true` と <xref:System.Windows.Forms.ListView.View%2A> にプロパティが設定されている <xref:System.Windows.Forms.View.Details?displayProperty=fullName>します。 このイベントは、コントロール内の各列見出しに発生します。 オーナー描画の詳細については、次を参照してください。、 <xref:System.Windows.Forms.ListView.OwnerDraw%2A> プロパティの参照トピックです。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例の実装を提供する、 <xref:System.Windows.Forms.ListView.DrawColumnHeader> イベント ハンドラーです。 実装を含む完全な例については、 <xref:System.Windows.Forms.ListView.DrawSubItem> イベント ハンドラーを参照してください、 <xref:System.Windows.Forms.ListView.OwnerDraw%2A> リファレンス トピックです。  
  
 [!code-csharp[ListViewOwnerDraw\#5](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewOwnerDraw/CS/listviewownerdraw.cs#5)]
 [!code-vb[ListViewOwnerDraw\#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewOwnerDraw/VB/listviewownerdraw.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ColumnHeader" />
        <altmember cref="T:System.Windows.Forms.DrawListViewColumnHeaderEventArgs" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawSubItem" />
        <altmember cref="P:System.Windows.Forms.ListView.OwnerDraw" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="DrawItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawListViewItemEventHandler DrawItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawListViewItemEventHandler DrawItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.DrawItem" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawListViewItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに、 <see cref="T:System.Windows.Forms.ListView" /> が描画されると、 <see cref="P:System.Windows.Forms.ListView.OwnerDraw" /> にプロパティが設定されている <see langword="true" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントでは、外観をカスタマイズすることができます、 <xref:System.Windows.Forms.ListView> オーナー描画を使用してコントロールします。 このイベントは発生される場合にのみ、 <xref:System.Windows.Forms.ListView.OwnerDraw%2A> にプロパティが設定されている `true`します。 オーナー描画の詳細については、次を参照してください。、 <xref:System.Windows.Forms.ListView.OwnerDraw%2A> プロパティの参照トピックです。  
  
 <xref:System.Windows.Forms.ListView.DrawItem> ごとにイベントが発生する可能性が <xref:System.Windows.Forms.ListView> 項目。 ときに、 <xref:System.Windows.Forms.ListView.View%2A> プロパティに設定されて <xref:System.Windows.Forms.View.Details?displayProperty=fullName>, 、 <xref:System.Windows.Forms.ListView.DrawSubItem> と <xref:System.Windows.Forms.ListView.DrawColumnHeader> イベントも発生します。 この場合、処理することができます、 <xref:System.Windows.Forms.ListView.DrawItem> 、背景など、すべてのアイテムに共通する要素を描画および処理するイベント、 <xref:System.Windows.Forms.ListView.DrawSubItem> テキスト値など、個々 のサブ項目の要素を描画するイベントです。 すべての項目を描画することも、 <xref:System.Windows.Forms.ListView> はあまり便利な可能性がありますが、2 つのイベントの 1 つだけを使用してを制御します。 詳細ビューで列ヘッダーを描画するには、処理、 <xref:System.Windows.Forms.ListView.DrawColumnHeader> イベントです。  
  
> [!NOTE]
>  基になる Win32 コントロールで、バグがあるため、 <xref:System.Windows.Forms.ListView.DrawItem> せずに付属するイベントが発生した <xref:System.Windows.Forms.ListView.DrawSubItem> 行の上にマウス ポインターが移動すると、詳細ビューの行に 1 回のイベント、何かの原因で描画された、 <xref:System.Windows.Forms.ListView.DrawSubItem> で描画されるカスタムの背景になるイベント ハンドラー、 <xref:System.Windows.Forms.ListView.DrawItem> イベント ハンドラーです。 例を参照して、 <xref:System.Windows.Forms.ListView.OwnerDraw%2A> 問題を回避する追加のイベントが発生すると、各行を無効にするリファレンス トピックです。 別の回避策にすべてのカスタム描画コードを格納する、 <xref:System.Windows.Forms.ListView.DrawSubItem> イベント ハンドラーおよび \(サブ項目を含む\)、全体のアイテムの背景を描画される場合にのみ、 <xref:System.Windows.Forms.DrawListViewSubItemEventArgs.ColumnIndex%2A?displayProperty=fullName> 値は 0 です。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例の実装を提供する、 <xref:System.Windows.Forms.ListView.DrawItem> イベント ハンドラーです。 完全な例については、 <xref:System.Windows.Forms.ListView.OwnerDraw%2A> リファレンス トピックです。  
  
 [!code-csharp[ListViewOwnerDraw\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewOwnerDraw/CS/listviewownerdraw.cs#3)]
 [!code-vb[ListViewOwnerDraw\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewOwnerDraw/VB/listviewownerdraw.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ColumnHeader" />
        <altmember cref="T:System.Windows.Forms.DrawListViewItemEventArgs" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawSubItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawColumnHeader" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="P:System.Windows.Forms.ListView.OwnerDraw" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="DrawSubItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawListViewSubItemEventHandler DrawSubItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawListViewSubItemEventHandler DrawSubItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.DrawSubItem" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawListViewSubItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>詳細の表示のときに発生、 <see cref="T:System.Windows.Forms.ListView" /> が描画されると、 <see cref="P:System.Windows.Forms.ListView.OwnerDraw" /> にプロパティが設定されている <see langword="true" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントでは、外観をカスタマイズすることができます、 <xref:System.Windows.Forms.ListView> オーナー描画を使用してコントロールします。 このイベントは発生される場合にのみ、 <xref:System.Windows.Forms.ListView.OwnerDraw%2A> プロパティに設定されて `true` と <xref:System.Windows.Forms.ListView.View%2A> にプロパティが設定されている <xref:System.Windows.Forms.View.Details?displayProperty=fullName>します。 オーナー描画の詳細については、次を参照してください。、 <xref:System.Windows.Forms.ListView.OwnerDraw%2A> プロパティの参照トピックです。  
  
> [!NOTE]
>  サブ項目の情報は、並べて表示ビューに通常表示されるだけでなく、詳細ビューしますが、その、並べて表示ビューでのハンドラーで描画する必要があります、 <xref:System.Windows.Forms.ListView.DrawItem> イベントです。  
  
 <xref:System.Windows.Forms.ListView.DrawSubItem> ごとにイベントが発生する可能性が <xref:System.Windows.Forms.ListView> サブアイテム。 処理できる、 <xref:System.Windows.Forms.ListView.DrawItem> 、背景など、すべてのサブ項目に共通する要素を描画および処理するイベント、 <xref:System.Windows.Forms.ListView.DrawSubItem> テキスト値など、個々 のサブ項目の要素を描画するイベントです。 すべての項目を描画することも、 <xref:System.Windows.Forms.ListView> はあまり便利な可能性がありますが、2 つのイベントの 1 つだけを使用してを制御します。 詳細ビューで列ヘッダーを描画するには、処理、 <xref:System.Windows.Forms.ListView.DrawColumnHeader> イベントです。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.ListView.DrawSubItem> いないすべてのサブ項目のイベントが発生しない <xref:System.Windows.Forms.ColumnHeader> オブジェクトが追加されました、 <xref:System.Windows.Forms.ListView.Columns%2A> コレクションです。 なおそれぞれの最初のサブ項目 <xref:System.Windows.Forms.ListViewItem> オブジェクトは親アイテム自体を表し、最初の列に表示されます。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例の実装を提供する、 <xref:System.Windows.Forms.ListView.DrawSubItem> イベント ハンドラーです。 完全な例については、 <xref:System.Windows.Forms.ListView.OwnerDraw%2A> リファレンス トピックです。  
  
 [!code-csharp[ListViewOwnerDraw\#4](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewOwnerDraw/CS/listviewownerdraw.cs#4)]
 [!code-vb[ListViewOwnerDraw\#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewOwnerDraw/VB/listviewownerdraw.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ColumnHeader" />
        <altmember cref="T:System.Windows.Forms.DrawListViewSubItemEventArgs" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawColumnHeader" />
        <altmember cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem" />
        <altmember cref="P:System.Windows.Forms.ListView.OwnerDraw" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="EndUpdate">
      <MemberSignature Language="C#" Value="public void EndUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.EndUpdate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>一覧の描画を再開ビュー コントロールによって描画が中断された、 <see cref="M:System.Windows.Forms.ListView.BeginUpdate" /> メソッドです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 複数の項目を追加することをお勧め、 <xref:System.Windows.Forms.ListView> を使用して、 <xref:System.Windows.Forms.ListView.ListViewItemCollection.AddRange%2A> のメソッド、 <xref:System.Windows.Forms.ListView.ListViewItemCollection> \(を使用してアクセス、 <xref:System.Windows.Forms.ListView.Items%2A> のプロパティ、 <xref:System.Windows.Forms.ListView>\)。 これにより、1 回の操作リストに項目の配列を追加することができます。 ただしを追加する場合は、アイテムを一度に 1 つを使用して、時間、 <xref:System.Windows.Forms.ListView.ListViewItemCollection.Add%2A> のメソッド、 <xref:System.Windows.Forms.ListView.ListViewItemCollection> クラスを使用できます、 <xref:System.Windows.Forms.ListView.BeginUpdate%2A> メソッドをコントロールが再描画するを防ぐために、 <xref:System.Windows.Forms.ListView> 項目が追加されるたびにします。 コントロールに項目を追加するタスクを完了すると、呼び出し、 <xref:System.Windows.Forms.ListView.EndUpdate%2A> を有効にする方法、 <xref:System.Windows.Forms.ListView> を再描画します。 この方法で項目を追加するときにちらつきませんの描画、 <xref:System.Windows.Forms.ListView> は、多くのアイテムをコントロールに追加する場合。  
  
 場合 <xref:System.Windows.Forms.ListView.BeginUpdate%2A> 複数回と呼ばれる <xref:System.Windows.Forms.ListView.EndUpdate%2A> と同じ回数だけを呼び出す必要があります。 最後の呼び出しまで <xref:System.Windows.Forms.ListView.EndUpdate%2A> 、 <xref:System.Windows.Forms.ListView> 再描画されません。 また、何度も呼び出すを <xref:System.Windows.Forms.ListView.BeginUpdate%2A> 影響を与えるありません。  
  
   
  
## 例  
 次のコード例では、初期化を示しています、 <xref:System.Windows.Forms.ListView> にあるチェック ボックスを制御します。 使用しても示します、 <xref:System.Windows.Forms.ListView.BeginUpdate%2A> と <xref:System.Windows.Forms.ListView.EndUpdate%2A> メソッドです。 この例を実行するを含むフォームに次のコードを貼り付け、 <xref:System.Windows.Forms.ListView> という `ListView1`します。 呼び出す、 `InititalizeListView` フォームのコンス トラクターからのメソッドまたは `Load` メソッドです。  
  
 [!code-cpp[System.Windows.Forms.ListView2\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView2\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView2\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.BeginUpdate" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.AddRange(System.Windows.Forms.ListViewItem[])" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.Add(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="EnsureVisible">
      <MemberSignature Language="C#" Value="public void EnsureVisible (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnsureVisible(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.EnsureVisible(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">表示されるまでスクロールする項目の、0 から始まるインデックス番号。</param>
        <summary>必要に応じてコントロールの内容をスクロールして、指定した項目がコントロール内に確実に表示されるようにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 You can use this method to ensure that a specific item is visible within the <xref:System.Windows.Forms.ListView> control. When performing validation on the items in a <xref:System.Windows.Forms.ListView>, you can call the <xref:System.Windows.Forms.ListView.EnsureVisible%2A> method to ensure that an item that failed validation is displayed in the <xref:System.Windows.Forms.ListView> control to allow the user to perform changes on the item. If the item that you want to ensure is visible is located above the viewable region of the <xref:System.Windows.Forms.ListView> control, calling the <xref:System.Windows.Forms.ListView.EnsureVisible%2A> method will scroll the contents of the control until it is the first item in the viewable area of the control. If the item is below the viewable region of the <xref:System.Windows.Forms.ListView> control, calling the <xref:System.Windows.Forms.ListView.EnsureVisible%2A> method will scroll the contents of the <xref:System.Windows.Forms.ListView> control until the item is the last item in the viewable area of the control.  
  
 To determine if an item is located at the top of the display area of a <xref:System.Windows.Forms.ListView> control, use the <xref:System.Windows.Forms.ListView.TopItem%2A> property.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.TopItem" />
      </Docs>
    </Member>
    <Member MemberName="FindItemWithText">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindItemWithText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindItemWithText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindItemWithText(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">検索するテキストです。</param>
        <summary>最初に見つかった <see cref="T:System.Windows.Forms.ListViewItem" /> 指定されたテキスト値で始まります。</summary>
        <returns>最初の <see cref="T:System.Windows.Forms.ListViewItem" /> 指定されたテキスト値で始まります。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 検索では、大文字と小文字を区別しません。  
  
 `text` パラメーターは、目的の一致するテキストの部分文字列を指定できます。 さらに、このメソッドは、指定したテキストで始まる最初の項目を返します。 などの場合、 <xref:System.Windows.Forms.ListView> 2 つのリスト項目が含まれています:「山かっ」と 2 番目の項目のテキストに設定する最初の項目のテキストが"bracket"に設定 — への呼び出し <xref:System.Windows.Forms.ListView.FindItemWithText%2A> を渡す `brack` 、パラメーターには、テキストが"bracket"項目が返されるとします。  
  
 <xref:System.Windows.Forms.ListView.FindItemWithText%2A> メソッドが返す `null` リストが空か、一致する項目がない場合。  
  
   
  
## 例  
 次のコード例を示しています、 <xref:System.Windows.Forms.ListView.FindItemWithText%2A> メソッドです。 この例を実行するには、Windows フォームと呼び出しに次のコードを貼り付け、 `InitializeFindListView` フォームのコンス トラクターからのメソッドまたは <xref:System.Windows.Forms.Form.Load> イベント ハンドラーです。 メソッド呼び出しの結果を表示するボタンをクリックします。  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindItemWithText">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindItemWithText (string text, bool includeSubItemsInSearch, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindItemWithText(string text, bool includeSubItemsInSearch, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindItemWithText(System.String,System.Boolean,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="includeSubItemsInSearch" Type="System.Boolean" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">検索するテキストです。</param>
        <param name="includeSubItemsInSearch">
          <see langword="true" /> 検索にサブ項目を含めるそれ以外の場合、 <see langword="false" />です。</param>
        <param name="startIndex">検索を開始する位置の項目のインデックス。</param>
        <summary>最初に見つかった <see cref="T:System.Windows.Forms.ListViewItem" /> または <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem" />, 、示されている場合は、指定したテキスト値で始まります。 検索は、指定したインデックス位置から開始されます。</summary>
        <returns>最初の <see cref="T:System.Windows.Forms.ListViewItem" /> 指定されたテキスト値で始まります。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 検索では、大文字と小文字を区別しません。  
  
 `text` パラメーターは、目的の一致するテキストの部分文字列を指定できます。 さらに、このメソッドは、指定したテキストで始まる最初の項目を返します。 たとえば場合、 <xref:System.Windows.Forms.ListView> 2 つのリスト項目が含まれています:「山かっ」と 2 番目の項目のテキストに設定する最初の項目のテキストが"bracket"に設定 — への呼び出し <xref:System.Windows.Forms.ListView.FindItemWithText%2A> 受け渡し"brack"ように、パラメーターが返される項目のテキストは"bracket"です。  
  
 <xref:System.Windows.Forms.ListView.FindItemWithText%2A> メソッドが返す `null` リストが空か、一致する項目がない場合。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> 小さい 0 以上のアイテムの数よりも、 <see cref="T:System.Windows.Forms.ListView" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FindItemWithText">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindItemWithText (string text, bool includeSubItemsInSearch, int startIndex, bool isPrefixSearch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindItemWithText(string text, bool includeSubItemsInSearch, int32 startIndex, bool isPrefixSearch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindItemWithText(System.String,System.Boolean,System.Int32,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="includeSubItemsInSearch" Type="System.Boolean" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="isPrefixSearch" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">検索するテキストです。</param>
        <param name="includeSubItemsInSearch">
          <see langword="true" /> 検索にサブ項目を含めるそれ以外の場合、 <see langword="false" />です。</param>
        <param name="startIndex">検索を開始する位置の項目のインデックス。</param>
        <param name="isPrefixSearch">
          <see langword="true" /> 部分的な一致を許可するにはそれ以外の場合、 <see langword="false" />です。</param>
        <summary>最初に見つかった <see cref="T:System.Windows.Forms.ListViewItem" /> または <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem" />, 、示されている場合は、指定したテキスト値で始まります。 検索は、指定したインデックス位置から開始されます。</summary>
        <returns>最初の <see cref="T:System.Windows.Forms.ListViewItem" /> 指定されたテキスト値で始まります。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListView.FindItemWithText%2A> メソッドが返す `null` リストが空か、一致する項目がない場合。  
  
 検索では、大文字と小文字を区別しません。  
  
 `text` パラメーターは、目的の一致するテキストの部分文字列を指定できます。 このメソッドは、しない限り、指定したテキストで始まる最初の項目は返さ `false` に渡された `isPrefixSearch`です。 たとえば場合、 <xref:System.Windows.Forms.ListView> 2 つのリスト項目が含まれています:「山かっ」と 2 番目の項目のテキストに設定する最初の項目のテキストが"bracket"に設定 — への呼び出し <xref:System.Windows.Forms.ListView.FindItemWithText%2A> 受け渡し"brack"など、検索テキストはテキストに、項目に返すが"bracket"です。 場合 `isPrefixSearch` に設定されている `false`, 、この呼び出しが戻ります `null`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> 0 より小さいか、内の項目の数よりも詳細には、 <see cref="T:System.Windows.Forms.ListView" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FindNearestItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindNearestItem (System.Windows.Forms.SearchDirectionHint dir, System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindNearestItem(valuetype System.Windows.Forms.SearchDirectionHint dir, valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindNearestItem(System.Windows.Forms.SearchDirectionHint,System.Drawing.Point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dir" Type="System.Windows.Forms.SearchDirectionHint" />
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="dir">
          <see cref="T:System.Windows.Forms.SearchDirectionHint" /> 値のいずれか。</param>
        <param name="point">検索の開始位置を示すポイント。</param>
        <summary>指定したポイントから次の項目を検索します。検索は、指定した方向で実行されます。</summary>
        <returns>
          <see cref="T:System.Windows.Forms.ListViewItem" /> 指定位置にある、指定した方向での検索に最も近いです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListView.FindNearestItem%2A> メソッドが返す `null` 指定した方向に項目が見つからない場合。 最も近い項目を識別する、アプリケーションが実行されているオペレーティング システムによって異なることができの結果に影響を与える <xref:System.Windows.Forms.ListView.FindNearestItem%2A>します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.ListView.View" /> 以外の値に設定されて <see cref="F:System.Windows.Forms.View.SmallIcon" /> または <see cref="F:System.Windows.Forms.View.LargeIcon" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FindNearestItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindNearestItem (System.Windows.Forms.SearchDirectionHint searchDirection, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindNearestItem(valuetype System.Windows.Forms.SearchDirectionHint searchDirection, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindNearestItem(System.Windows.Forms.SearchDirectionHint,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchDirection" Type="System.Windows.Forms.SearchDirectionHint" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="searchDirection">
          <see cref="T:System.Windows.Forms.SearchDirectionHint" /> 値のいずれか。</param>
        <param name="x">検索を開始する位置を表すポイントの x 座標。</param>
        <param name="y">検索を開始する位置を表すポイントの y 座標。</param>
        <summary>次の項目から、指定した x 座標と y 座標、指定した方向に検索を検索します。</summary>
        <returns>
          <see cref="T:System.Windows.Forms.ListViewItem" /> 、指定した方向での検索、特定の座標に最も近いです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListView.FindNearestItem%2A> メソッドが返す `null` 指定した方向に項目が見つからない場合。 最も近い項目を識別する、アプリケーションが実行されているオペレーティング システムによって異なることができの結果に影響を与える <xref:System.Windows.Forms.ListView.FindNearestItem%2A>します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.ListView.View" /> 以外の値に設定されて <see cref="F:System.Windows.Forms.View.SmallIcon" /> または <see cref="F:System.Windows.Forms.View.LargeIcon" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FocusedItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FocusedItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListViewItem FocusedItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.FocusedItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在フォーカスを持つコントロールの項目を取得または設定します。</summary>
        <value>A <see cref="T:System.Windows.Forms.ListViewItem" /> 、フォーカスがある項目を表すまたは <see langword="null" /> 項目フォーカスがあるない場合、 <see cref="T:System.Windows.Forms.ListView" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListView.FocusedItem%2A> プロパティを返します。、 <xref:System.Windows.Forms.ListViewItem> のフォーカスされた四角形が表示されている項目を表す、 <xref:System.Windows.Forms.ListView> コントロールです。<xref:System.Windows.Forms.ListView> コントロールに、表示する項目以外の直接編集可能な領域がないときに、 <xref:System.Windows.Forms.ListView> コントロールにフォーカス内の項目がある、 <xref:System.Windows.Forms.ListView> その項目のテキストを囲むフォーカス十字線が表示されます。 通常は、選択した最後の項目で、 <xref:System.Windows.Forms.ListView> コントロールがフォーカスを持つ項目。 項目は、フォーカスの十字線を表示する 1 つにありますが、実際ににくいかもしれませんで選択したアイテム、 <xref:System.Windows.Forms.ListView>です。 使用して、 <xref:System.Windows.Forms.ListView.SelectedItems%2A> または <xref:System.Windows.Forms.ListView.SelectedIndices%2A> で選択された項目を取得するプロパティ、 <xref:System.Windows.Forms.ListView> コントロール、 <xref:System.Windows.Forms.ListView.FocusedItem%2A> プロパティが必ずしも選択されていません。 使用することができます、 <xref:System.Windows.Forms.ListView.FocusedItem%2A> でどの項目が最後を決定するプロパティがクリックされる、 <xref:System.Windows.Forms.ListView> 選択状態に関係なく、管理します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>前景色を取得または設定します。</summary>
        <value>
          <see cref="T:System.Drawing.Color" /> つまり前景色を指定します。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FullRowSelect">
      <MemberSignature Language="C#" Value="public bool FullRowSelect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FullRowSelect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.FullRowSelect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>項目をクリックするとそのすべてのサブ項目を選択するかどうかを示す値を取得または設定します。</summary>
        <value>
          <see langword="true" /> 場合は、アイテムとすべてのサブ項目をクリックすると選択 <see langword="false" /> 場合、項目をクリックすると、その項目だけを選択します。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListView.FullRowSelect%2A> プロパティも何も起こりませんしない限り、 <xref:System.Windows.Forms.ListView.View%2A> のプロパティ、 <xref:System.Windows.Forms.ListView> にコントロールが設定されている <xref:System.Windows.Forms.View.Details>します。<xref:System.Windows.Forms.ListView.FullRowSelect%2A> プロパティで使用される際に使用される、 <xref:System.Windows.Forms.ListView> 多数のサブ項目とそのアイテムが表示されますがする項目のテキストがコントロールの内容の水平方向にスクロールによって認識されない場合は、選択した項目を表示することが重要です。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.ListView.FullRowSelect%2A> に設定されている `true`, のヒント、 <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> は表示されません。 親のツールヒントにのみ <xref:System.Windows.Forms.ListViewItem> が表示されます。  
  
   
  
## 例  
 次のコード例を作成、 <xref:System.Windows.Forms.ListView> の 3 つのコントロール <xref:System.Windows.Forms.ListViewItem> 指定されたオブジェクトと 3 つ <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> オブジェクトの各項目に指定します。 この例でも作成 <xref:System.Windows.Forms.ColumnHeader> 詳細ビューにサブ項目を表示するオブジェクト。 2 つ <xref:System.Windows.Forms.ImageList> にイメージを用意するコード例でも作成されるオブジェクト、 <xref:System.Windows.Forms.ListViewItem> オブジェクトです。 これら <xref:System.Windows.Forms.ImageList> にオブジェクトを追加、 <xref:System.Windows.Forms.ListView.LargeImageList%2A> と <xref:System.Windows.Forms.ListView.SmallImageList%2A> プロパティです。 この例を作成するのには、次のプロパティを使用して、 <xref:System.Windows.Forms.ListView> コントロールです。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 この例では、コードが追加されたことが必要です、 <xref:System.Windows.Forms.Form> コンス トラクターまたは、フォーム上の別の方法の例で作成したメソッドを呼び出します。 また、例ではイメージがという名前が必要です `MySmallImage1`, 、`MySmallImage2`, 、`MyLargeImage1`, 、および `MyLargeImage2` C: ドライブのルート ディレクトリにあります。  
  
 [!code-cpp[ListViewExample\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="F:System.Windows.Forms.View.Details" />
      </Docs>
    </Member>
    <Member MemberName="GetItemAt">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem GetItemAt (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem GetItemAt(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.GetItemAt(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">\(クライアント座標で表されます\) の項目を検索する位置の x 座標。</param>
        <param name="y">\(クライアント座標で表されます\) の項目を検索する位置の y 座標。</param>
        <summary>指定した位置にある項目を取得します。</summary>
        <returns>A<see cref="T:System.Windows.Forms.ListViewItem" />を表す、指定した位置にある項目。 メソッドを返しますのかどうかは項目指定の位置にある、<see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListView.GetItemAt%2A>メソッドでは、特定の場所のクライアント領域内にある項目を確認することができます、<xref:System.Windows.Forms.ListView>コントロール。 ユーザーがクリックするか、サブ項目を右クリックしたときに、このメソッドを使用することができます \(ときに、<xref:System.Windows.Forms.ListView.View%2A>プロパティに設定されている`View.Details`\) どの項目がクリックされたユーザーがマウスをクリックした時にマウスの座標に基づくサブアイテムを所有しているを確認するとします。  
  
> [!NOTE]
>  ときに、<xref:System.Windows.Forms.ListView.FullRowSelect%2A>プロパティの値が`false`、指定された場所が、親アイテム \(詳細モードでは、コントロールと、最初の列に表示されます\) の境界内にある場合にのみ、このメソッドは、項目を返します。 設定する必要があります、<xref:System.Windows.Forms.ListView.FullRowSelect%2A>プロパティを`true`サブ項目の境界内の場所を指定して、このメソッドで項目を取得します。 使用することも、<xref:System.Windows.Forms.ListView.HitTest%2A>特定位置にある項目に関する詳細情報を取得します。  
  
 内の項目のドラッグ アンド ドロップ位置の変更を行う、<xref:System.Windows.Forms.ListView>を使用することができます、<xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A?displayProperty=fullName>メソッドではなく、<xref:System.Windows.Forms.ListView.GetItemAt%2A>メソッドです。<xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A?displayProperty=fullName>メソッドは、マウス ポインターがある場所に関係なく、最も近い項目を検索します。<xref:System.Windows.Forms.ListView.GetItemAt%2A> 、その一方を返します`null`指定した位置に項目がない場合。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.ListViewInsertionMark>クラスは、アプリケーションが呼び出すときに、Windows XP および Windows Server 2003 でのみサポート、<xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=fullName>メソッドです。  
  
   
  
## 例  
 使用を次のコード例に示します、<xref:System.Windows.Forms.PictureBox>と<xref:System.Windows.Forms.ListView>コントロール。<xref:System.Windows.Forms.PictureBox>を設定して初期化されて、<xref:System.Windows.Forms.PictureBox.BorderStyle%2A?displayProperty=fullName>と<xref:System.Windows.Forms.PictureBox.SizeMode%2A?displayProperty=fullName>プロパティを使用して、<xref:System.Windows.Forms.BorderStyle>と<xref:System.Windows.Forms.PictureBoxSizeMode>列挙型、それぞれします。<xref:System.Windows.Forms.ListView> Samples ディレクトリからの画像が挿入されます。<xref:System.Windows.Forms.ListView.GetItemAt%2A>メソッドは、処理するときの使用、<xref:System.Windows.Forms.ListView>コントロールの<xref:System.Windows.Forms.Control.MouseDown>項目が選択されているかどうかを決定するイベントです。 イベント ハンドラーが設定して、選択したファイルを表示する項目が選択されている場合、<xref:System.Windows.Forms.PictureBox.Image%2A?displayProperty=fullName>プロパティです。 例では、C:\\documents and settings \\all Users\\Documents\\My pictures \\sample Pictures ディレクトリに配置された JPG ファイルの存在が必要です。 この例を実行するには、フォームと呼び出しにコードを貼り付けます、`InitializePictureBox`と`PopulateListView`フォームのコンス トラクターのメソッドまたは`Load`メソッドです。 すべてのイベントがイベント ハンドラーに関連付けられていることを確認します。  
  
 [!code-cpp[System.Windows.Forms.ListViewAndPictureBox\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListViewAndPictureBox/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ListViewAndPictureBox\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewAndPictureBox/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ListViewAndPictureBox\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewAndPictureBox/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.PointToScreen(System.Drawing.Point)" />
        <altmember cref="M:System.Windows.Forms.Control.PointToClient(System.Drawing.Point)" />
        <altmember cref="T:System.Windows.Forms.ListViewInsertionMark" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="GetItemRect">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetItemRect (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetItemRect(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.GetItemRect(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">内の項目の 0 から始まるインデックス、 <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" /> 含む外接する四角形を取得します。</param>
        <summary>リスト ビュー コントロール内の特定の項目の外接する四角形を取得します。</summary>
        <returns>A <see cref="T:System.Drawing.Rectangle" /> 指定された外接する四角形を表す <see cref="T:System.Windows.Forms.ListViewItem" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このバージョンのによって返される外接する四角形、 <xref:System.Windows.Forms.ListView.GetItemRect%2A> メソッドは、アイコン、項目のテキストとサブ項目のテキストを含むアイテム全体を表します。 項目の特定部分の外接する四角形を指定するの他のバージョンを使用して、 <xref:System.Windows.Forms.ListView.GetItemRect%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Rectangle" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
      </Docs>
    </Member>
    <Member MemberName="GetItemRect">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetItemRect (int index, System.Windows.Forms.ItemBoundsPortion portion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetItemRect(int32 index, valuetype System.Windows.Forms.ItemBoundsPortion portion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.GetItemRect(System.Int32,System.Windows.Forms.ItemBoundsPortion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="portion" Type="System.Windows.Forms.ItemBoundsPortion" />
      </Parameters>
      <Docs>
        <param name="index">内の項目の 0 から始まるインデックス、 <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" /> 含む外接する四角形を取得します。</param>
        <param name="portion">いずれか、 <see cref="T:System.Windows.Forms.ItemBoundsPortion" /> の部分を表す値、 <see cref="T:System.Windows.Forms.ListViewItem" /> を外接する四角形を取得します。</param>
        <summary>リスト ビュー コントロール内の特定の項目の外接する四角形の指定した部分を取得します。</summary>
        <returns>A <see cref="T:System.Drawing.Rectangle" /> の指定した部分で指定された外接する四角形を表す <see cref="T:System.Windows.Forms.ListViewItem" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このバージョンのによって返される外接する四角形、 <xref:System.Windows.Forms.ListView.GetItemRect%2A> メソッドで指定されたアイテムのセクションのみを表す、 `portion` パラメーター。 全体の項目の外接する四角形を返すには、するその他のバージョンの使用、 <xref:System.Windows.Forms.ListView.GetItemRect%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Rectangle" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="T:System.Windows.Forms.ItemBoundsPortion" />
      </Docs>
    </Member>
    <Member MemberName="GridLines">
      <MemberSignature Language="C#" Value="public bool GridLines { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool GridLines" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.GridLines" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの項目とサブ項目を含む行と列の間にグリッド線を表示するかどうかを示す値を取得または設定します。</summary>
        <value>
          <see langword="true" /> 項目とサブ項目の周りにグリッド線を描画する場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListView.GridLines%2A> プロパティも何も起こりませんしない限り、 <xref:System.Windows.Forms.ListView.View%2A> のプロパティ、 <xref:System.Windows.Forms.ListView> にコントロールが設定されている <xref:System.Windows.Forms.View.Details>します。<xref:System.Windows.Forms.ListView.GridLines%2A> プロパティを使用する行とに表示される列を識別するために線を表示する、 <xref:System.Windows.Forms.ListView> 項目とそのサブ項目を表示して制御します。 表示されるグリッド線は、サイズを変更する行と列をアプリケーションとしては Microsoft Excel などの機能を提供してください。 サイズ変更する列の右側にマウス ポインターを移動\] をクリックし、列が必要なサイズになるまでドラッグすることによって、列ヘッダーが表示される場合、列のみをサイズ変更できます。 グリッド線の機能を使用して、表示されている境界項目とサブ項目の周りにコントロールのユーザーを提供します。  
  
   
  
## 例  
 次のコード例を作成、 <xref:System.Windows.Forms.ListView> の 3 つのコントロール <xref:System.Windows.Forms.ListViewItem> 指定されたオブジェクトと 3 つ <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> オブジェクトの各項目に指定します。 この例でも作成 <xref:System.Windows.Forms.ColumnHeader> 詳細ビューにサブ項目を表示するオブジェクト。 2 つ <xref:System.Windows.Forms.ImageList> にイメージを用意するコード例でも作成されるオブジェクト、 <xref:System.Windows.Forms.ListViewItem> オブジェクトです。 これら <xref:System.Windows.Forms.ImageList> にオブジェクトを追加、 <xref:System.Windows.Forms.ListView.LargeImageList%2A> と <xref:System.Windows.Forms.ListView.SmallImageList%2A> プロパティです。 この例を作成するのには、次のプロパティを使用して、 <xref:System.Windows.Forms.ListView> コントロールです。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 この例では、コードが追加されたことが必要です、 <xref:System.Windows.Forms.Form> コンス トラクターまたは、フォーム上の別の方法の例で作成したメソッドを呼び出します。 また、例ではイメージがという名前が必要です `MySmallImage1`, 、`MySmallImage2`, 、`MyLargeImage1`, 、および `MyLargeImage2` C: ドライブのルート ディレクトリにあります。  
  
 [!code-cpp[ListViewExample\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.View" />
      </Docs>
    </Member>
    <Member MemberName="Groups">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewGroupCollection Groups { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListViewGroupCollection Groups" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Groups" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ListViewGroupCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewGroupCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コレクションを取得 <see cref="T:System.Windows.Forms.ListViewGroup" /> コントロールに割り当てられたオブジェクト。</summary>
        <value>A <see cref="T:System.Windows.Forms.ListViewGroupCollection" /> 内のすべてのグループを含む、 <see cref="T:System.Windows.Forms.ListView" /> コントロールです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListView> グループ化機能では、論理的に関連する複数の視覚的なグループを作成できます。 <xref:System.Windows.Forms.ListView> 項目。 各グループは、水平の線に続くテキスト ヘッダーとそのグループに割り当てられた項目で構成されます。 左、右、またはコントロールの中央ヘッダー テキストを揃えることができます。 すべてのグループに割り当てられている、 <xref:System.Windows.Forms.ListView> コントロールが表示されるたびに、 <xref:System.Windows.Forms.ListView.View%2A> プロパティが以外の値に設定されて <xref:System.Windows.Forms.View.List?displayProperty=fullName>します。  
  
 <xref:System.Windows.Forms.ListView> グループは、使いやすいカテゴリにアイテムを分離することで探している項目を検索するユーザーに役立ちます。 必要な任意のカテゴリを作成できます。 1 つの一般的なアプローチでは、リストの並べ替え方法に基づいて項目をグループ化します。 たとえば、アルファベット順またはサブ項目の種類の詳細ビューで列ヘッダーをクリックしてリストの並べ替えと日付など、リストが並べ替えられた場合は、項目名の最初の文字で、項目をグループことができます。 Windows エクスプ ローラーでは、このグループの種類を使用します。  
  
 1 つ以上の追加、グループ化機能を使用する <xref:System.Windows.Forms.ListViewGroup> オブジェクトを <xref:System.Windows.Forms.ListView.Groups%2A> のコレクション、 <xref:System.Windows.Forms.ListView> コントロールです。 グループ ヘッダーのテキストとヘッダーの配置設定、 <xref:System.Windows.Forms.ListViewGroup.%23ctor%2A> コンス トラクターに設定を使用して、 <xref:System.Windows.Forms.ListViewGroup.Header%2A?displayProperty=fullName> と <xref:System.Windows.Forms.ListViewGroup.HeaderAlignment%2A?displayProperty=fullName> プロパティです。  
  
 グループ化機能を一時的に無効にするには設定、 <xref:System.Windows.Forms.ListView.ShowGroups%2A> プロパティを `false`します。  
  
 内のグループを指定することで項目をグループに割り当てることができます、 <xref:System.Windows.Forms.ListViewItem.%23ctor%2A> を設定して、コンス トラクター、 <xref:System.Windows.Forms.ListViewItem.Group%2A?displayProperty=fullName> プロパティ、または直接項目を追加することで、 <xref:System.Windows.Forms.ListViewGroup.Items%2A?displayProperty=fullName> グループのコレクション。 表示される前に、すべての項目をグループに割り当てる必要があります。 グループに割り当てられていないすべての項目は、"DefaultGroup {0}"というヘッダー ラベルを持つ既定のグループに表示されます。 既定のグループが含まれていない、 <xref:System.Windows.Forms.ListView.Groups%2A> 、コレクション、変更できません。 すべてのアイテムがグループに正しく追加されていることを確認する、デバッグでは、主に便利です。  
  
 項目の 1 つのグループで一度にできます。 設定して項目が所属するグループを変更する、 <xref:System.Windows.Forms.ListViewItem.Group%2A?displayProperty=fullName> プロパティは実行時に、またはに追加することによって、 <xref:System.Windows.Forms.ListViewGroup.Items%2A?displayProperty=fullName> 前のグループが別のグループのコレクション。  
  
 グループを使用する場合は、挿入マーク機能を無効になっています。 これは、挿入マーク機能の使用にドラッグ アンド ドロップ操作を再配置中に、グループ化機能がグループのメンバーシップによって項目を並べ替えますため、 <xref:System.Windows.Forms.ListView> コントロールをその項目を既に順序付けしません。  
  
 <xref:System.Windows.Forms.ListView> アプリケーションが呼び出すと、グループが Windows XP および Windows Server 2003 でのみ使用できますが、 <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=fullName> メソッドです。 以前のオペレーティング システム グループに関連するすべてのコードは有効になり、グループは表示されません。 その結果、グループ化機能に依存するすべてのコードが正しく動作しない可能性があります。  
  
 グループ化機能が使用可能かどうかを決定するコードを追加してが利用できない場合は、代替機能を提供可能性があります。 たとえば、グループ別に並べ替えをサポートしないオペレーティング システムで実行すると、別の並べ替えを提供することができます。  
  
 グループ化機能は、オペレーティング システムのテーマの機能を提供する、同じライブラリによって提供されます。 このライブラリの可用性を確認するには、呼び出し、 <xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=fullName> メソッドのオーバー ロードは、パス、 <xref:System.Windows.Forms.OSFeature.Themes?displayProperty=fullName> 値。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.ListView> アイテムを整理する詳細ビューにサブ項目の値によってグループ化機能です。 この形式のグループ化は、Windows エクスプ ローラーで使用されているグループに似ています。 例では、グループは動的に作成されます。 サブアイテムの列ごとに一意のサブ項目の値ごとに 1 つのグループが作成されます。 親項目の列の一意の初期名ごとに 1 つのグループが作成されます。 列のヘッダーをクリックすると、その列に対して作成されたグループに項目が並べ替えられます。 同じ列ヘッダーを再度クリックすると、グループの順序を反転させます。  
  
 [!code-cpp[System.Windows.Forms.ListView.Groups\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.Groups/CPP/listviewgroupsexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView.Groups\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.Groups/CS/listviewgroupsexample.cs#1)]
 [!code-vb[System.Windows.Forms.ListView.Groups\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.Groups/VB/listviewgroupsexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListViewGroup" />
        <altmember cref="T:System.Windows.Forms.ListViewGroupCollection" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="P:System.Windows.Forms.ListView.ShowGroups" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="HeaderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ColumnHeaderStyle HeaderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ColumnHeaderStyle HeaderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.HeaderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnHeaderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>列ヘッダーのスタイルを取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ColumnHeaderStyle" /> 値のいずれか。 既定値は、<see cref="F:System.Windows.Forms.ColumnHeaderStyle.Clickable" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListView.HeaderStyle%2A> プロパティを使用するときに表示する列ヘッダーの種類を指定する、 <xref:System.Windows.Forms.ListView.View%2A> のプロパティ、 <xref:System.Windows.Forms.ListView> にコントロールが設定されている <xref:System.Windows.Forms.View.Details> と <xref:System.Windows.Forms.ListView> コントロールが <xref:System.Windows.Forms.ColumnHeader> で指定されたオブジェクト、 <xref:System.Windows.Forms.ListView.ColumnHeaderCollection>です。<xref:System.Windows.Forms.ColumnHeader> オブジェクトに表示される列を定義する、 <xref:System.Windows.Forms.ListView> コントロールです。 項目ごとにサブ項目の情報を表示する各列の使用、 <xref:System.Windows.Forms.ListView>です。  
  
 <xref:System.Windows.Forms.ListView.HeaderStyle%2A> プロパティでは、列ヘッダーを表示するか、表示されているかどうかそれらが機能クリック可能なボタンとしてかを指定することができます。 場合、 <xref:System.Windows.Forms.ListView.HeaderStyle%2A> にプロパティが設定されている <xref:System.Windows.Forms.ColumnHeaderStyle.None?displayProperty=fullName>, 、ですが、列ヘッダーは表示されませんが、項目とサブ項目の <xref:System.Windows.Forms.ListView> コントロールは列にも配置されます。 場合、 <xref:System.Windows.Forms.ListView.HeaderStyle%2A> にプロパティが設定されている <xref:System.Windows.Forms.ColumnHeaderStyle.Clickable?displayProperty=fullName>, 、列ヘッダーがでアイテムの並べ替えなどの操作を実行するユーザーがクリックされるボタンのように機能、 <xref:System.Windows.Forms.ListView> キーとしてクリックされた列で、項目の使用を制御します。 この動作を実装するには、イベントのハンドラーで、 <xref:System.Windows.Forms.ListView.ColumnClick> イベントです。 場合、 <xref:System.Windows.Forms.ListView.HeaderStyle%2A> にプロパティが設定されている <xref:System.Windows.Forms.ColumnHeaderStyle.Nonclickable?displayProperty=fullName>, 、列ヘッダーが発生してもクリックすることはできません。  
  
   
  
## 例  
 次のコード例を示しています、 <xref:System.Windows.Forms.ListView> できるように複数のアイテムを選択します。 設定の例を示します、 <xref:System.Windows.Forms.ListView.HideSelection%2A> と <xref:System.Windows.Forms.ListView.HeaderStyle%2A> プロパティです。 紹介しています、 <xref:System.Windows.Forms.ColumnHeader.Text%2A?displayProperty=fullName>, 、<xref:System.Windows.Forms.ColumnHeader.TextAlign%2A?displayProperty=fullName> と <xref:System.Windows.Forms.ColumnHeader.Width%2A?displayProperty=fullName> プロパティです。 この例を実行するを含むフォームに次のコードを貼り付け、 <xref:System.Windows.Forms.ListView> という名前のオブジェクト `ListView1` と <xref:System.Windows.Forms.TextBox> という名前 `TextBox1`します。 呼び出す、 `InitializeListView` フォームのコンス トラクターからのメソッドまたは <xref:System.Windows.Forms.Form.Load> イベント ハンドラーです。  
  
 [!code-cpp[System.Windows.Forms.ListView1\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定された値は、のいずれかではありません、 <see cref="T:System.Windows.Forms.ColumnHeaderStyle" /> 値。</exception>
        <altmember cref="E:System.Windows.Forms.ListView.ColumnClick" />
        <altmember cref="T:System.Windows.Forms.ColumnHeaderStyle" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="HideSelection">
      <MemberSignature Language="C#" Value="public bool HideSelection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HideSelection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.HideSelection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールがフォーカスを失ったときに、そのコントロールで選択されている項目が強調表示されたままかどうかを示す値を取得または設定します。</summary>
        <value>
          <see langword="true" /> 選択した項目が表示されない場合は、コントロールがフォーカスを失ったときに強調表示されます。 <see langword="false" /> も選択した項目が強調表示されている表示された場合と、コントロールがフォーカスを失った。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを設定すると `false`, で選択された項目、 <xref:System.Windows.Forms.ListView> コントロールは、オペレーティング システムで指定された現在の選択色は異なる色で強調表示されたときに、 <xref:System.Windows.Forms.ListView> コントロールがフォーカスを失った。 このプロパティを使用して、ユーザーがフォーム上の別の管理\] をクリックし、別のウィンドウに移動したりするときに表示されているユーザーが選択されている項目を保持することができます。  
  
> [!NOTE]
>  アプリケーションのユーザー補助に懸念がある場合は、設定することをお勧めします <xref:System.Windows.Forms.ListView.HideSelection%2A> プロパティを `false`します。  
  
   
  
## 例  
 次のコード例を示しています、 <xref:System.Windows.Forms.ListView> できるように複数のアイテムを選択します。 設定の例を示します、 <xref:System.Windows.Forms.ListView.HideSelection%2A> と <xref:System.Windows.Forms.ListView.HeaderStyle%2A> プロパティです。 紹介しています、 <xref:System.Windows.Forms.ColumnHeader.Text%2A?displayProperty=fullName>, 、<xref:System.Windows.Forms.ColumnHeader.TextAlign%2A?displayProperty=fullName>, 、および <xref:System.Windows.Forms.ColumnHeader.Width%2A?displayProperty=fullName> プロパティです。 この例を実行するを含むフォームに次のコードを貼り付け、 <xref:System.Windows.Forms.ListView> という名前のオブジェクト `ListView1` と <xref:System.Windows.Forms.TextBox> という名前 `TextBox1`します。 呼び出す、 `InitializeListView` フォームのコンス トラクターからのメソッドまたは <xref:System.Windows.Forms.Form.Load> イベント ハンドラーです。  
  
 [!code-cpp[System.Windows.Forms.ListView1\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HitTest">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewHitTestInfo HitTest (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewHitTestInfo HitTest(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.HitTest(System.Drawing.Point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewHitTestInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">
          <see cref="T:System.Drawing.Point" /> 項目情報を取得する位置。 座標は、このコントロールの左上隅を起点とした相対座標です。</param>
        <summary>指定した位置の項目情報を提示します。</summary>
        <returns>指定した位置の項目情報。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 かどうか、ポイントが、項目またはサブ項目と項目にそのポイントが、ラベルやイメージの領域を確認するのには、このメソッドを使用します。 座標が、返された制御範囲外にあるかどうかは <xref:System.Windows.Forms.ListViewHitTestInfo> オブジェクトには、 <xref:System.Windows.Forms.ListViewHitTestInfo.Location%2A> "None"; のプロパティと <xref:System.Windows.Forms.ListViewHitTestInfo.Item%2A> と <xref:System.Windows.Forms.ListViewHitTestInfo.SubItem%2A> プロパティに設定されます `null`します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">ポイントには、0 未満の座標が含まれています。</exception>
      </Docs>
    </Member>
    <Member MemberName="HitTest">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewHitTestInfo HitTest (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewHitTestInfo HitTest(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.HitTest(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewHitTestInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">項目情報を取得する位置を表す x 座標。 座標は、このコントロールの左上隅を起点とした相対座標です。</param>
        <param name="y">項目情報を取得する位置を表す y 座標。 座標は、このコントロールの左上隅を起点とした相対座標です。</param>
        <summary>指定した x 座標と y 座標の項目情報を提示します。</summary>
        <returns>指定した x 座標と y 座標の項目情報。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用するかどうか、ポイントが、項目またはサブ項目、および項目にそのポイントが保存されているように、ラベルやイメージの領域に決定します。 座標が、返された制御範囲外にあるかどうかは <xref:System.Windows.Forms.ListViewHitTestInfo> オブジェクトには、 <xref:System.Windows.Forms.ListViewHitTestInfo.Location%2A> "None"; のプロパティと <xref:System.Windows.Forms.ListViewHitTestInfo.Item%2A> と <xref:System.Windows.Forms.ListViewHitTestInfo.SubItem%2A> プロパティに設定されます `null`します。  
  
   
  
## 例  
 次のコード例では、使用方法を示します、 <xref:System.Windows.Forms.ListView.HitTest%2A> のマウス イベントの場所を決定する方法、 <xref:System.Windows.Forms.ListView>です。 この例を実行するを含む Windows フォームに貼り付け、 <xref:System.Windows.Forms.ListView> という名前 `listView1` 項目に設定されます。 関連付ける、 <xref:System.Windows.Forms.Control.MouseDown> イベントを `listView1` で、 `listView1_MouseDown` この例ではメソッドです。  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties\#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#7)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties\#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">X 座標または y 座標が 0 未満です。</exception>
      </Docs>
    </Member>
    <Member MemberName="HotTracking">
      <MemberSignature Language="C#" Value="public bool HotTracking { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HotTracking" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.HotTracking" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マウス ポインターが置かれたときに、項目またはサブ項目のテキストの外観がハイパーリンクになるかどうかを示す値を取得または設定します。</summary>
        <value>
          <see langword="true" /> 持っていない場合、項目のテキスト、ハイパーリンクの外観と上にマウスを置くそれ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ホット トラッキングが有効にするとが発生する、 <xref:System.Windows.Forms.ListView.Activation%2A> プロパティに設定する <xref:System.Windows.Forms.ItemActivation.OneClick> と、<xref:System.Windows.Forms.ListView.HoverSelection%2A> プロパティに設定する `true`です。 さらに、実行時のラベルの編集は許可されませんホット トラッキングが有効な場合。  
  
   
  
## 例  
 次のコード例を示しています、 <xref:System.Windows.Forms.ListView> ホット追跡を有効にします。 この例を実行するには、Windows フォームと呼び出しに次のコードを貼り付け、 `InitializeHotTrackingListView` フォームのコンス トラクターからのメソッドまたは <xref:System.Windows.Forms.Form.Load> イベント ハンドラーです。  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HoverSelection">
      <MemberSignature Language="C#" Value="public bool HoverSelection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HoverSelection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.HoverSelection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マウス ポインターが項目の上に数秒間留まったときに、項目が自動的に選択されるかどうかを示す値を取得または設定します。</summary>
        <value>
          <see langword="true" /> 項目が自動的に選択されている場合と、マウス ポインターが移動します。それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを設定すると `true`, 、ユーザーは、内のアイテムを指すことができます、 <xref:System.Windows.Forms.ListView> コントロール項目を選択します。 複数の項目を選択できます \(ときに、 <xref:System.Windows.Forms.ListView.MultiSelect%2A> プロパティが設定されてを true に\)、CTRL キーを押しながら各項目をポイントします。 この機能を使用するには方が簡単に項目を選択するアプリケーションのユーザーに提供する、 <xref:System.Windows.Forms.ListView> コントロールです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertionMark">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewInsertionMark InsertionMark { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListViewInsertionMark InsertionMark" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.InsertionMark" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewInsertionMark</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>内で項目をドラッグすると、目的のドロップ位置を示すために使用するオブジェクトを取得、 <see cref="T:System.Windows.Forms.ListView" /> コントロールです。</summary>
        <value>A <see cref="T:System.Windows.Forms.ListViewInsertionMark" /> 挿入マークを表すオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListView> 挿入マーク機能では、新しい位置に項目をドラッグすると、ドラッグ アンド ドロップ操作で目的のドロップ位置を視覚的に示すことができます。 この機能は、される場合にのみ、 <xref:System.Windows.Forms.ListView.AutoArrange%2A> プロパティに設定されて `true` とタイミング、 <xref:System.Windows.Forms.ListView> コントロールが項目を自動的に並べ替えられません。 自動並べ替えを防ぐために、 <xref:System.Windows.Forms.ListView.Sorting%2A> にプロパティを設定する必要があります <xref:System.Windows.Forms.SortOrder.None?displayProperty=fullName> と <xref:System.Windows.Forms.ListView.View%2A> にプロパティを設定する必要があります <xref:System.Windows.Forms.View.LargeIcon?displayProperty=fullName>, 、<xref:System.Windows.Forms.View.SmallIcon?displayProperty=fullName>, 、または <xref:System.Windows.Forms.View.Tile?displayProperty=fullName>です。 さらに、挿入マーク機能は反映されませんで、 <xref:System.Windows.Forms.ListView> 、グループ化機能グループのメンバーシップによって、項目を注文するために、機能をグループ化します。  
  
 <xref:System.Windows.Forms.ListViewInsertionMark> クラスは、通常、イベントのハンドラーの使用、 <xref:System.Windows.Forms.Control.DragOver?displayProperty=fullName> または <xref:System.Windows.Forms.Control.MouseMove?displayProperty=fullName> 項目がドラッグされると、挿入マークの位置を更新するイベントです。 イベントのハンドラーでも使用、 <xref:System.Windows.Forms.Control.DragDrop?displayProperty=fullName> または <xref:System.Windows.Forms.Control.MouseUp?displayProperty=fullName> 正しい位置にドラッグした項目を挿入するイベントです。 詳細については、次を参照してください。 <xref:System.Windows.Forms.ListViewInsertionMark> と [方法: Windows フォーム ListView コントロールに挿入マークを表示](http://msdn.microsoft.com/ja-jp/88d0a15b-25fd-4dc3-a685-297351311940)します。  
  
> [!NOTE]
>  挿入マーク機能は Windows XP および Windows Server 2003 でのみ使用できますが、アプリケーションを呼び出すと、 <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=fullName> メソッドです。 以前のオペレーティング システムでは、挿入マークに関連するすべてのコードは効果がなく、挿入マークは表示されません。 その結果、挿入マーク機能に依存するすべてのコードが正しく動作しない可能性があります。 この機能は、使用できるかどうかを決定するコードを追加して、利用できない場合は、代替機能を提供可能性があります。 たとえば、挿入マークをサポートしないオペレーティング システムを実行するときの位置を変更する項目のドラッグ アンド ドロップを実装するすべてのコードをバイパスすることができます。  
>   
>  挿入マーク機能は、オペレーティング システムのテーマの機能を提供する、同じライブラリによって提供されます。 このライブラリの可用性を確認するには、呼び出し、 <xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=fullName> メソッドのオーバー ロードは、パス、 <xref:System.Windows.Forms.OSFeature.Themes?displayProperty=fullName> 値。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.ListView> 挿入マーク機能します。 この例では、標準的なドラッグ イベントを使用するドラッグ アンド ドロップの項目の順番変更を実装します。 ハンドラーで、挿入マークの位置が更新される、 <xref:System.Windows.Forms.Control.DragOver?displayProperty=fullName> イベントです。 このハンドラーでは、マウス ポインターの位置を最も近い項目の中間点と比較し、結果を使用して、アイテムの左右に挿入マークが表示されるかどうかが決定します。  
  
 [!code-cpp[System.Windows.Forms.ListView.InsertionMark\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CPP/listviewinsertionmarkexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView.InsertionMark\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CS/listviewinsertionmarkexample.cs#1)]
 [!code-vb[System.Windows.Forms.ListView.InsertionMark\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/VB/listviewinsertionmarkexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListViewInsertionMark" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="IsInputKey">
      <MemberSignature Language="C#" Value="protected override bool IsInputKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsInputKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.IsInputKey(System.Windows.Forms.Keys)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">
          <see cref="T:System.Windows.Forms.Keys" /> 値のいずれか。</param>
        <summary>指定されているキーが、通常の入力キーであるか、またはプリプロセスを必要とする特殊なキーであるかを確認します。</summary>
        <returns>指定されているキーが通常の入力キーである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemActivate">
      <MemberSignature Language="C#" Value="public event EventHandler ItemActivate;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ItemActivate" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemActivate" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アイテムがアクティブになったときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListView.ItemActivate> 、ユーザーが 1 つまたは複数の項目をアクティブ化イベントが発生した、 <xref:System.Windows.Forms.ListView> コントロールです。 シングル クリックまたはダブルクリックの値に応じてを持つ項目をアクティブにする、 <xref:System.Windows.Forms.ListView.Activation%2A> プロパティ、またはキーボードを使用します。 イベント ハンドラー内で、 <xref:System.Windows.Forms.ListView.ItemActivate> イベントを参照できます、 <xref:System.Windows.Forms.ListView.SelectedItems%2A> または <xref:System.Windows.Forms.ListView.SelectedIndices%2A> で選択した項目のコレクションにアクセスするプロパティ、 <xref:System.Windows.Forms.ListView> を決定するアイテムがアクティブにします。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.ListView.ItemActivate> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.ListView> という `ListView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.ListView.ItemActivate> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#473](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#473)]
 [!code-vb[System.Windows.Forms.EventExamples\#473](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#473)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnItemActivate(System.EventArgs)" />
        <altmember cref="T:System.EventHandler" />
        <altmember cref="P:System.Windows.Forms.ListView.Activation" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedItems" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedIndices" />
      </Docs>
    </Member>
    <Member MemberName="ItemCheck">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ItemCheckEventHandler ItemCheck;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ItemCheckEventHandler ItemCheck" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemCheck" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemCheckEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>項目のチェックの状態が変更されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListView.CheckBoxes%2A> プロパティを設定する必要が真のチェック ボックスの各項目の横に表示される場合、 <xref:System.Windows.Forms.ListView> コントロールです。<xref:System.Windows.Forms.ListView.ItemCheck> 項目のチェックの状態が変更されたとき、またはイベントが発生した、 <xref:System.Windows.Forms.ListView.CheckBoxes%2A> にプロパティが設定されている `true`します。 イベント ハンドラーを作成する、 <xref:System.Windows.Forms.ListView.ItemCheck> で項目をチェックインするたびに、項目のアイコンまたは別のアプリケーション固有のタスクの状態の変更などのタスクを実行するイベント、 <xref:System.Windows.Forms.ListView> コントロールです。  
  
> [!NOTE]
>  ウィンドウ ハンドルが作成されていない場合がある場合、 <xref:System.Windows.Forms.ListView.ItemCheck> イベントは、イベントは遅れます。 \(フォームが表示される\) とウィンドウ ハンドルが作成されると、いずれかの遅延 <xref:System.Windows.Forms.ListView.ItemCheck> イベントが発生します。 詳細については、「<xref:System.Windows.Forms.Control.HandleCreated>」を参照してください。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例に示しますチェック <xref:System.Windows.Forms.ListView> を処理するコントロール、 <xref:System.Windows.Forms.ListView.ItemCheck> イベントです。 メソッドを使用して、 <xref:System.Windows.Forms.ItemCheckEventArgs.CurrentValue%2A?displayProperty=fullName> と <xref:System.Windows.Forms.ItemCheckEventArgs.Index%2A?displayProperty=fullName> プロパティを取得し、選択されたメニュー項目の価格を反映します。 この例を実行するを含むフォームに次のコードを貼り付け、 `ListView` という名前 `ListView1` と `TextBox` という名前 `Textbox1`します。 呼び出す、 `InititalizeListView` フォームのコンス トラクターからのメソッドまたは `Load` メソッドです。 いることを確認、 <xref:System.Windows.Forms.ListView.ItemCheck> イベントは、この例では、イベント ハンドラーに関連付けられています。  
  
 [!code-cpp[System.Windows.Forms.ListView2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView2#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#2)]
[!code-csharp[System.Windows.Forms.ListView2#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#2)]
[!code-vb[System.Windows.Forms.ListView2#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" />
        <altmember cref="T:System.Windows.Forms.ItemCheckEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="ItemChecked">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ItemCheckedEventHandler ItemChecked;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ItemCheckedEventHandler ItemChecked" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemChecked" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemCheckedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>項目のチェック状態が変更されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントはのような <xref:System.Windows.Forms.ListView.ItemCheck> イベントが、項目がチェックされた後に生成します。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.ListView.ItemChecked> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 別の例については、 <xref:System.Windows.Forms.ListView.ItemCheck> イベントです。 イベント ハンドラーに接続されている場合は、あるコードが同等に機能、 <xref:System.Windows.Forms.ListView.ItemChecked> イベントです。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.ListView> という `ListView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.ListView.ItemChecked> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#475](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#475)]
 [!code-vb[System.Windows.Forms.EventExamples\#475](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#475)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ItemDragEventHandler ItemDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ItemDragEventHandler ItemDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemDrag" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがアイテムのドラッグを始めたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListView.ItemDrag> イベント、ユーザーが項目のドラッグを始めたときに発生します。 イベント ハンドラーでは通常、 <xref:System.Windows.Forms.ListView.ItemDrag> イベントを呼び出してドラッグのタスクを実行する、 <xref:System.Windows.Forms.Control.DoDragDrop%2A?displayProperty=fullName> メソッドです。 このイベントを使用するには、アプリケーションに出入りする項目をドラッグするために必要なタスクを実行する <xref:System.Windows.Forms.ListView> コントロールです。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.ListView.ItemDrag> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.ListView> という `ListView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.ListView.ItemDrag> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#476](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#476)]
 [!code-vb[System.Windows.Forms.EventExamples\#476](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#476)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" />
        <altmember cref="T:System.Windows.Forms.ItemDragEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="ItemMouseHover">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ListViewItemMouseHoverEventHandler ItemMouseHover;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ListViewItemMouseHoverEventHandler ItemMouseHover" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemMouseHover" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItemMouseHoverEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マウス ポインターをアイテムの上に移動したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.ListView.ItemMouseHover> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.ListView> という `ListView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.ListView.ItemMouseHover> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#477](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#477)]
 [!code-vb[System.Windows.Forms.EventExamples\#477](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#477)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.ListViewItemCollection Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/ListViewItemCollection Items" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Items" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ListViewItemCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+ListViewItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロール内のすべての項目を格納するコレクションを取得します。</summary>
        <value>A <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" /> 内のすべての項目を格納する、 <see cref="T:System.Windows.Forms.ListView" /> コントロールです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Windows.Forms.ListView.ListViewItemCollection> このプロパティによって返される項目の追加、アイテムを削除して項目の数を取得します。 コレクション内の項目を使用して実行できるタスクの詳細については、次を参照してください。、 <xref:System.Windows.Forms.ListView.ListViewItemCollection> クラスのリファレンス トピックです。  
  
   
  
## 例  
 次のコード例を作成、 <xref:System.Windows.Forms.ListView> の 3 つのコントロール <xref:System.Windows.Forms.ListViewItem> 指定されたオブジェクトと 3 つ <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> オブジェクトの各項目に指定します。 この例でも作成 <xref:System.Windows.Forms.ColumnHeader> 詳細ビューにサブ項目を表示するオブジェクト。 2 つ <xref:System.Windows.Forms.ImageList> にイメージを用意するコード例でも作成されるオブジェクト、 <xref:System.Windows.Forms.ListViewItem> オブジェクトです。 これら <xref:System.Windows.Forms.ImageList> にオブジェクトを追加、 <xref:System.Windows.Forms.ListView.LargeImageList%2A> と <xref:System.Windows.Forms.ListView.SmallImageList%2A> プロパティです。 この例を作成するのには、次のプロパティを使用して、 <xref:System.Windows.Forms.ListView> コントロールです。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 この例では、コードが追加されたことが必要です、 <xref:System.Windows.Forms.Form> コンス トラクターまたは、フォーム上の別の方法の例で作成したメソッドを呼び出します。 また、例ではイメージがという名前が必要です `MySmallImage1`, 、`MySmallImage2`, 、`MyLargeImage1`, 、および `MyLargeImage2` C: ドライブのルート ディレクトリにあります。  
  
 [!code-cpp[ListViewExample\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.ListViewItemCollection" />
      </Docs>
    </Member>
    <Member MemberName="ItemSelectionChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ListViewItemSelectionChangedEventHandler ItemSelectionChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ListViewItemSelectionChangedEventHandler ItemSelectionChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemSelectionChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItemSelectionChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>項目の選択状態が変更されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 仮想モードで、 <xref:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged> イベントが複数の項目の選択状態が変更されたときに発生します。  
  
 <xref:System.Windows.Forms.ListView.ItemSelectionChanged> イベントから選択を解除する選択または選択を解除すると、選択した項目の状態が変わったかどうかが発生します。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.ListView.ItemSelectionChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.ListView> という `ListView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.ListView.ItemSelectionChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#478](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#478)]
 [!code-vb[System.Windows.Forms.EventExamples\#478](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#478)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged" />
      </Docs>
    </Member>
    <Member MemberName="LabelEdit">
      <MemberSignature Language="C#" Value="public bool LabelEdit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LabelEdit" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.LabelEdit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの項目のラベルをユーザーが編集できるかどうかを示す値を取得または設定します。</summary>
        <value>
          <see langword="true" /> 実行時に、ユーザーが項目のラベルを編集できる場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、 <xref:System.Windows.Forms.ListView.LabelEdit%2A> にプロパティが設定されている `true`, 、ユーザーがそれを選択する項目のテキストをクリックして、項目のテキストを変更すること、およびモードを編集し、\[項目のテキストにラベルのテキストを挿入するには、もう一度クリックするとします。 ユーザーは、変更し、または項目のテキスト ラベルを置換します。 使用することができます、 <xref:System.Windows.Forms.ListView.BeforeLabelEdit> と <xref:System.Windows.Forms.ListView.AfterLabelEdit> 、ユーザーが項目のテキストを編集後し、前にタスクを実行するイベントです。 このプロパティ設定されている場合、サブ項目のテキストを変更できません `true`します。 サブ項目のテキストを変更するには、コントロールにサブ項目をダブルクリックしたときに、ユーザーにダイアログ ボックスを表示できます。  
  
> [!NOTE]
>  場合、 <xref:System.Windows.Forms.ListView.Activation%2A> にプロパティが設定されている <xref:System.Windows.Forms.ItemActivation.OneClick> または <xref:System.Windows.Forms.ItemActivation.TwoClick>, 、ラベルを編集できなくなりますの値に関係なく、 <xref:System.Windows.Forms.ListView.LabelEdit%2A> プロパティです。  
  
   
  
## 例  
 次のコード例を作成、 <xref:System.Windows.Forms.ListView> の 3 つのコントロール <xref:System.Windows.Forms.ListViewItem> 指定されたオブジェクトと 3 つ <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> オブジェクトの各項目に指定します。 この例でも作成 <xref:System.Windows.Forms.ColumnHeader> 詳細ビューにサブ項目を表示するオブジェクト。 2 つ <xref:System.Windows.Forms.ImageList> にイメージを用意するコード例でも作成されるオブジェクト、 <xref:System.Windows.Forms.ListViewItem> オブジェクトです。 これら <xref:System.Windows.Forms.ImageList> にオブジェクトを追加、 <xref:System.Windows.Forms.ListView.LargeImageList%2A> と <xref:System.Windows.Forms.ListView.SmallImageList%2A> プロパティです。 この例を作成するのには、次のプロパティを使用して、 <xref:System.Windows.Forms.ListView> コントロールです。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 この例では、コードが追加されたことが必要です、 <xref:System.Windows.Forms.Form> コンス トラクターまたは、フォーム上の別の方法の例で作成したメソッドを呼び出します。 また、例ではイメージがという名前が必要です `MySmallImage1`, 、`MySmallImage2`, 、`MyLargeImage1`, 、および `MyLargeImage2` C: ドライブのルート ディレクトリにあります。  
  
 [!code-cpp[ListViewExample\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
        <altmember cref="E:System.Windows.Forms.ListView.AfterLabelEdit" />
      </Docs>
    </Member>
    <Member MemberName="LabelWrap">
      <MemberSignature Language="C#" Value="public bool LabelWrap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LabelWrap" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.LabelWrap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>項目がアイコンとしてコントロールに表示されているときに、項目のラベルを折り返すかどうかを示す値を取得または設定します。</summary>
        <value>
          <see langword="true" /> 項目のラベルを折り返す場合と項目アイコンとして表示されます。それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、 <xref:System.Windows.Forms.ListView.LabelWrap%2A> にプロパティが設定されている `true`, 、項目のテキストがテキストの次の行が必要な場合にラップされます。 テキストが 2 行のテキストよりも長い場合は、テキストが詰められます。 ユーザーは、項目を選択する場合は、すべての項目のテキストが表示されます。 場合、 <xref:System.Windows.Forms.ListView.LabelWrap%2A> にプロパティが設定されている `false`, 、すべての項目のテキストが 1 つの行に表示されます。 全体の項目のテキストが表示されるときに、 <xref:System.Windows.Forms.ListView.LabelWrap%2A> に設定されている `false`します。 使用される場合にのみ、このプロパティは、 <xref:System.Windows.Forms.ListView.View%2A> にプロパティが設定されている <xref:System.Windows.Forms.View.LargeIcon> または <xref:System.Windows.Forms.View.SmallIcon>です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.View" />
      </Docs>
    </Member>
    <Member MemberName="LargeImageList">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImageList LargeImageList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ImageList LargeImageList" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.LargeImageList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、 <see cref="T:System.Windows.Forms.ImageList" /> 項目コントロールで大きいアイコンとして表示するときに使用します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ImageList" /> ときに使用するアイコンを含む、 <see cref="P:System.Windows.Forms.ListView.View" /> にプロパティが設定されている <see cref="F:System.Windows.Forms.View.LargeIcon" />します。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListView.LargeImageList%2A> プロパティでは、指定することができます、 <xref:System.Windows.Forms.ImageList> 大きいアイコン表示で項目を表示するときに使用するアイコンを格納しているオブジェクト \(ときに、 <xref:System.Windows.Forms.ListView.View%2A> にプロパティが設定されている <xref:System.Windows.Forms.View.LargeIcon>\)。<xref:System.Windows.Forms.ListView> グラフィック形式でコントロールが受け入れる、 <xref:System.Windows.Forms.ImageList> アイコンを表示するときにコントロールをサポートしています。<xref:System.Windows.Forms.ListView> コントロールは .ico ファイルに限定されません。 1 回、 <xref:System.Windows.Forms.ImageList> に割り当てられている、 <xref:System.Windows.Forms.ListView.LargeImageList%2A> プロパティを設定できます、 <xref:System.Windows.Forms.ListViewItem.ImageIndex%2A> の各プロパティ <xref:System.Windows.Forms.ListViewItem> で、 <xref:System.Windows.Forms.ListView> コントロールで適切なイメージのインデックス位置を <xref:System.Windows.Forms.ImageList>です。 アイコンのサイズ、 <xref:System.Windows.Forms.ListView.LargeImageList%2A> で指定された、 <xref:System.Windows.Forms.ImageList.ImageSize%2A>です。  
  
 1 つだけのインデックスを指定できるので、 <xref:System.Windows.Forms.ListViewItem.ImageIndex%2A?displayProperty=fullName> プロパティには、 <xref:System.Windows.Forms.ImageList> で指定されたオブジェクト、 <xref:System.Windows.Forms.ListView.LargeImageList%2A> と <xref:System.Windows.Forms.ListView.SmallImageList%2A> プロパティに表示するイメージの同じインデックス位置を持つ必要があります。 たとえば場合、 <xref:System.Windows.Forms.ListViewItem.ImageIndex%2A> のプロパティ、 <xref:System.Windows.Forms.ListViewItem> 設定されている内の同じインデックス位置にする必要があります小規模および大規模の両方のアイコンを使用するイメージを 0 に、 <xref:System.Windows.Forms.ImageList> で指定されたオブジェクト、 <xref:System.Windows.Forms.ListView.LargeImageList%2A> と <xref:System.Windows.Forms.ListView.SmallImageList%2A> プロパティです。  
  
> [!NOTE]
>  イメージをキーを持つ指定した場合は、各イメージ リストの同じインデックス位置にある大小さまざまなバージョンのイメージを配置する必要があります。 ビューを切り替えるときに、1 つのリスト内のイメージのインデックスの場所を使用して、指定されたキーの値に関係なく、他の一覧で、イメージを見つけます。  
  
 設定する、 <xref:System.Windows.Forms.ImageList> 小さなアイコンが表示された項目を表示するときに使用する \(すべてのビュー モード以外の <xref:System.Windows.Forms.View.LargeIcon>\) を使用して、 <xref:System.Windows.Forms.ListView.SmallImageList%2A> プロパティです。 イメージを使用して、項目の状態の表示を使用するかどうか、 <xref:System.Windows.Forms.ListView.StateImageList%2A> プロパティです。  
  
   
  
## 例  
 次のコード例を作成、 <xref:System.Windows.Forms.ListView> の 3 つのコントロール <xref:System.Windows.Forms.ListViewItem> 指定されたオブジェクトと 3 つ <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> オブジェクトの各項目に指定します。 この例でも作成 <xref:System.Windows.Forms.ColumnHeader> 詳細ビューにサブ項目を表示するオブジェクト。 2 つ <xref:System.Windows.Forms.ImageList> にイメージを用意するコード例でも作成されるオブジェクト、 <xref:System.Windows.Forms.ListViewItem> オブジェクトです。 これら <xref:System.Windows.Forms.ImageList> にオブジェクトを追加、 <xref:System.Windows.Forms.ListView.LargeImageList%2A> と <xref:System.Windows.Forms.ListView.SmallImageList%2A> プロパティです。 この例を作成するのには、次のプロパティを使用して、 <xref:System.Windows.Forms.ListView> コントロールです。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 この例では、コードが追加されたことが必要です、 <xref:System.Windows.Forms.Form> コンス トラクターまたは、フォーム上の別の方法の例で作成したメソッドを呼び出します。 また、例ではイメージがという名前が必要です `MySmallImage1`, 、`MySmallImage2`, 、`MyLargeImage1`, 、および `MyLargeImage2` C: ドライブのルート ディレクトリにあります。  
  
 [!code-cpp[ListViewExample\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.SmallImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.StateImageList" />
      </Docs>
    </Member>
    <Member MemberName="ListViewItemSorter">
      <MemberSignature Language="C#" Value="public System.Collections.IComparer ListViewItemSorter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IComparer ListViewItemSorter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.ListViewItemSorter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの並べ替え比較子を取得または設定します。</summary>
        <value>
          <see cref="T:System.Collections.IComparer" /> を表すコントロールの並べ替え比較子。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> プロパティでは、内の項目の並べ替えを実行するオブジェクトを指定することができます、 <xref:System.Windows.Forms.ListView> タイミングを制御、 <xref:System.Windows.Forms.ListView.Sort%2A> メソッドが呼び出されるか、一覧に項目を追加するとします。 項目が並べ替えられないことに自動的にそのラベルのテキストが変更されたときに注意してください。  
  
 指定したオブジェクトを実装するクラスのインスタンスである必要があります、 <xref:System.Collections.IComparer> という単一のメソッドを持つインターフェイス <xref:System.Collections.Comparer.Compare%2A?displayProperty=fullName>します。  
  
 このプロパティを使用して、カスタムの並べ替えなどの詳細ビューで列ヘッダーがクリックされたときに提供することができます。 これを行うを実装するクラスを作成、 <xref:System.Collections.IComparer> インターフェイスし、並べ替える列のインデックスを受け取るコンス トラクターを提供します。 ハンドラーを実装する、 <xref:System.Windows.Forms.ListView.ColumnClick> クリックした列のインデックスを使用してこのクラスのインスタンスを作成するイベントです。 設定すると、 <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> プロパティを新しいインスタンスに、 <xref:System.Windows.Forms.ListView> コントロールの指定したオブジェクトを使用してを自動的に並べ替えます。 以降の呼び出し、 <xref:System.Windows.Forms.ListView.Sort%2A> メソッドが同じオブジェクトを使用します。  
  
> [!NOTE]
>  値を設定すると、 <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> 、プロパティ、 <xref:System.Windows.Forms.ListView.Sort%2A> メソッドが自動的に呼び出されます。  
  
   
  
## 例  
 次のコード例を含むフォームを作成、 <xref:System.Windows.Forms.ListView> 内の列の場合は、項目を手動で並べ替える、 <xref:System.Windows.Forms.ListView> コントロールをクリックします。 例では、定義と呼ばれるクラス `ListViewItemComparer` を実装する、 <xref:System.Collections.IComparer?displayProperty=fullName> を実行するインターフェイス、 <xref:System.Windows.Forms.ListViewItem> 比較します。 インスタンスを作成する例では、 `ListViewItemComparer` 設定を使用して、 <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> のプロパティ、 <xref:System.Windows.Forms.ListView> コントロールです。<xref:System.Windows.Forms.ListView.Sort%2A> でメソッドを呼び出す、 <xref:System.Windows.Forms.ListView.ColumnClick> イベント ハンドラーで定義されたメソッドを使用して `ListViewItemComparer` がクリックされた列に基づく項目の並べ替えを実行します。  
  
 [!code-cpp[ListView.ColumnClick\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.ColumnClick/CPP/listviewsort1.cpp#1)]
 [!code-csharp[ListView.ColumnClick\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.ColumnClick/CS/listviewsort1.cs#1)]
 [!code-vb[ListView.ColumnClick\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.ColumnClick/VB/listviewsort1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="E:System.Windows.Forms.ListView.ColumnClick" />
      </Docs>
    </Member>
    <Member MemberName="MultiSelect">
      <MemberSignature Language="C#" Value="public bool MultiSelect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MultiSelect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.MultiSelect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>複数の項目を選択できるかどうかを示す値を取得または設定します。</summary>
        <value>
          <see langword="true" /> 場合は、コントロールの複数の項目を同時に、選択することができます。それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、 <xref:System.Windows.Forms.ListView.MultiSelect%2A> にプロパティが設定されている `true`, で複数の項目を選択できます、 <xref:System.Windows.Forms.ListView> コントロールです。 複数の項目を選択するには、ユーザー必要があります押したまま、CTRL キーを選択する項目をクリックします。 最初の項目を選択する\] をクリックし、選択する最後の項目をクリックすると、SHIFT キーを押しながら、連続した項目を選択できます。 複数選択機能を使用するには複数の項目を選択する、 <xref:System.Windows.Forms.ListView> を制御し、選択したすべてのアイテムに対して操作を実行します。 たとえば、ユーザーは、複数の項目を選択し、選択した項目に対して実行できるタスクのセットが表示されるショートカット メニューを表示する選択項目を右クリックします。  
  
 選択された項目を決定する、 <xref:System.Windows.Forms.ListView> コントロールを使用して、 <xref:System.Windows.Forms.ListView.SelectedItems%2A> プロパティです。<xref:System.Windows.Forms.ListView.SelectedItems%2A> プロパティを使用すると、アクセス、 <xref:System.Windows.Forms.ListView.SelectedListViewItemCollection> 選択された項目のリストを格納します。 インデックス位置をする場合、 <xref:System.Windows.Forms.ListView.ListViewItemCollection> 、アイテムの代わりに使用することができます、 <xref:System.Windows.Forms.ListView.SelectedIndices%2A> にアクセスするプロパティ、 <xref:System.Windows.Forms.ListView.SelectedIndexCollection>です。  
  
 複数の選択を許可しないかどうか、 <xref:System.Windows.Forms.ListView>, 、ながらも、ユーザーに提供する複数の項目のチェック ボックスを表示するには設定して、選択をするため、 <xref:System.Windows.Forms.ListView.CheckBoxes%2A> プロパティを `true`します。  
  
   
  
## 例  
 次のコード例を示しています、 <xref:System.Windows.Forms.ListView> できるように複数のアイテムを選択します。 設定の例を示します、 <xref:System.Windows.Forms.ListView.HideSelection%2A> と <xref:System.Windows.Forms.ListView.HeaderStyle%2A> プロパティです。 この例を実行するを含むフォームに次のコードを貼り付け、 <xref:System.Windows.Forms.ListView> という名前のオブジェクト `ListView1` と <xref:System.Windows.Forms.TextBox> という名前 `TextBox1`します。 呼び出す、 `InitializeListView` フォームのコンス トラクターからのメソッドまたは `Load` メソッドです。  
  
 [!code-cpp[System.Windows.Forms.ListView1\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.SelectedItems" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedIndices" />
        <altmember cref="T:System.Windows.Forms.ListView.SelectedIndexCollection" />
        <altmember cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckBoxes" />
      </Docs>
    </Member>
    <Member MemberName="OnAfterLabelEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterLabelEdit (System.Windows.Forms.LabelEditEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterLabelEdit(class System.Windows.Forms.LabelEditEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnAfterLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.LabelEditEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.LabelEditEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.ListView.AfterLabelEdit" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.ListView.OnAfterLabelEdit%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.ListView.AfterLabelEdit> 新しく編集されたラベルをアルファベットの文字に制限するイベントです。 例では、 <xref:System.Text.ASCIIEncoding> 新しいラベルの各文字の ASCII 文字コードを取得するクラス。 文字が数値を表す ASCII コードの間にある場合は、項目に新しいラベルを適用できません。 この例では、作成済みである必要があります、 <xref:System.Windows.Forms.ListView> フォームに追加された項目を制御します。 また、例では接続していることが必要です、 <xref:System.Windows.Forms.ListView.AfterLabelEdit> イベントをコード例で定義されているイベント ハンドラーです。 使用するために、 <xref:System.Text.ASCIIEncoding> クラスをファイルを含める必要があります、 <xref:System.Text> 名前空間。  
  
 [!code-cpp[ListView.AfterLabelEdit\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.AfterLabelEdit/CPP/form1.cpp#1)]
 [!code-csharp[ListView.AfterLabelEdit\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.AfterLabelEdit/CS/form1.cs#1)]
 [!code-vb[ListView.AfterLabelEdit\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.AfterLabelEdit/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.ListView.OnAfterLabelEdit(System.Windows.Forms.LabelEditEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.ListView.OnAfterLabelEdit(System.Windows.Forms.LabelEditEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.AfterLabelEdit" />
        <altmember cref="T:System.Windows.Forms.LabelEditEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnBackgroundImageChanged">
      <MemberSignature Language="C#" Value="protected override void OnBackgroundImageChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnBackgroundImageChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnBackgroundImageChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.BackgroundImageChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.ListView.OnBackgroundImageChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.ListView.OnBackgroundImageChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.ListView.OnBackgroundImageChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnBeforeLabelEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnBeforeLabelEdit (System.Windows.Forms.LabelEditEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBeforeLabelEdit(class System.Windows.Forms.LabelEditEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnBeforeLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.LabelEditEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.LabelEditEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.ListView.OnBeforeLabelEdit%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.ListView.OnBeforeLabelEdit(System.Windows.Forms.LabelEditEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.ListView.OnBeforeLabelEdit(System.Windows.Forms.LabelEditEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
        <altmember cref="T:System.Windows.Forms.LabelEditEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnCacheVirtualItems">
      <MemberSignature Language="C#" Value="protected virtual void OnCacheVirtualItems (System.Windows.Forms.CacheVirtualItemsEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCacheVirtualItems(class System.Windows.Forms.CacheVirtualItemsEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnCacheVirtualItems(System.Windows.Forms.CacheVirtualItemsEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.CacheVirtualItemsEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.CacheVirtualItemsEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.ListView.CacheVirtualItems" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.ListView.OnCacheVirtualItems%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.ListView.OnCacheVirtualItems(System.Windows.Forms.CacheVirtualItemsEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.ListView.OnCacheVirtualItems(System.Windows.Forms.CacheVirtualItemsEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnClick">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnClick (System.Windows.Forms.ColumnClickEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnClick(class System.Windows.Forms.ColumnClickEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ColumnClickEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.ColumnClickEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.ListView.ColumnClick" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.ListView.OnColumnClick%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例を含むフォームを作成、 <xref:System.Windows.Forms.ListView> 内の列の場合は、項目を手動で並べ替える、 <xref:System.Windows.Forms.ListView> コントロールをクリックします。 例では、定義と呼ばれるクラス `ListViewItemComparer` を実装する、 <xref:System.Collections.IComparer?displayProperty=fullName> を実行するインターフェイス、 <xref:System.Windows.Forms.ListViewItem> 比較します。 インスタンスを作成する例では、 `ListViewItemComparer` 設定を使用して、 <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> のプロパティ、 <xref:System.Windows.Forms.ListView> コントロールです。<xref:System.Windows.Forms.ListView.Sort%2A> でメソッドを呼び出す、 <xref:System.Windows.Forms.ListView.ColumnClick> イベント ハンドラーで定義されたメソッドを使用して `ListViewItemComparer` がクリックされた列に基づく項目の並べ替えを実行します。  
  
 [!code-cpp[ListView.ColumnClick\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.ColumnClick/CPP/listviewsort1.cpp#1)]
 [!code-csharp[ListView.ColumnClick\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.ColumnClick/CS/listviewsort1.cs#1)]
 [!code-vb[ListView.ColumnClick\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.ColumnClick/VB/listviewsort1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.ColumnClick" />
        <altmember cref="T:System.Windows.Forms.ColumnClickEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnColumnReordered">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnReordered (System.Windows.Forms.ColumnReorderedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnReordered(class System.Windows.Forms.ColumnReorderedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnColumnReordered(System.Windows.Forms.ColumnReorderedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ColumnReorderedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.ColumnReorderedEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.ListView.ColumnReordered" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.ListView.OnColumnReordered%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.ListView.OnColumnReordered(System.Windows.Forms.ColumnReorderedEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.ListView.OnColumnReordered(System.Windows.Forms.ColumnReorderedEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnWidthChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnWidthChanged (System.Windows.Forms.ColumnWidthChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnWidthChanged(class System.Windows.Forms.ColumnWidthChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnColumnWidthChanged(System.Windows.Forms.ColumnWidthChangedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ColumnWidthChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.ColumnWidthChangedEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.ListView.ColumnWidthChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.ListView.OnColumnWidthChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.ListView.OnColumnWidthChanged(System.Windows.Forms.ColumnWidthChangedEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.ListView.OnColumnWidthChanged(System.Windows.Forms.ColumnWidthChangedEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnWidthChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnWidthChanging (System.Windows.Forms.ColumnWidthChangingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnWidthChanging(class System.Windows.Forms.ColumnWidthChangingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnColumnWidthChanging(System.Windows.Forms.ColumnWidthChangingEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ColumnWidthChangingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.ColumnWidthChangingEventArgs" /> イベント データを格納します。</param>
        <summary>
          <see cref="E:System.Windows.Forms.ListView.ColumnWidthChanging" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListView.ColumnWidthChanging> イベントはドラッグ機能で、「を表示する内容ドラッグ中にウィンドウ」のオプションが無効になっている場合は、ウィンドウの完全発生しません。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.ListView.OnColumnWidthChanging%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.ListView.OnColumnWidthChanging(System.Windows.Forms.ColumnWidthChangingEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.ListView.OnColumnWidthChanging(System.Windows.Forms.ColumnWidthChangingEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDrawColumnHeader">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawColumnHeader (System.Windows.Forms.DrawListViewColumnHeaderEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawColumnHeader(class System.Windows.Forms.DrawListViewColumnHeaderEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnDrawColumnHeader(System.Windows.Forms.DrawListViewColumnHeaderEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawListViewColumnHeaderEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DrawListViewColumnHeaderEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.ListView.DrawColumnHeader" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.ListView.OnDrawColumnHeader%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.ListView.OnDrawColumnHeader(System.Windows.Forms.DrawListViewColumnHeaderEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.ListView.OnDrawColumnHeader(System.Windows.Forms.DrawListViewColumnHeaderEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDrawItem">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawItem (System.Windows.Forms.DrawListViewItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawItem(class System.Windows.Forms.DrawListViewItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnDrawItem(System.Windows.Forms.DrawListViewItemEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawListViewItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DrawListViewItemEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.ListView.DrawItem" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.ListView.OnDrawItem%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.ListView.OnDrawItem(System.Windows.Forms.DrawListViewItemEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.ListView.OnDrawItem(System.Windows.Forms.DrawListViewItemEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.DrawItem" />
        <altmember cref="T:System.Windows.Forms.DrawListViewItemEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnDrawSubItem">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawSubItem (System.Windows.Forms.DrawListViewSubItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawSubItem(class System.Windows.Forms.DrawListViewSubItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnDrawSubItem(System.Windows.Forms.DrawListViewSubItemEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawListViewSubItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DrawListViewSubItemEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.ListView.DrawSubItem" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.ListView.OnDrawSubItem%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.ListView.OnDrawSubItem(System.Windows.Forms.DrawListViewSubItemEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.ListView.OnDrawSubItem(System.Windows.Forms.DrawListViewSubItemEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.DrawListViewSubItemEventArgs" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawSubItem" />
      </Docs>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected override void OnFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnFontChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see langword="FontChanged" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnHandleCreated(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.HandleCreated" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleDestroyed">
      <MemberSignature Language="C#" Value="protected override void OnHandleDestroyed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleDestroyed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnHandleDestroyed(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.HandleDestroyed" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnItemActivate">
      <MemberSignature Language="C#" Value="protected virtual void OnItemActivate (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemActivate(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemActivate(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.ListView.ItemActivate" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.ListView.OnItemActivate%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.ListView.OnItemActivate(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.ListView.OnItemActivate(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.ItemActivate" />
        <altmember cref="T:System.EventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemCheck">
      <MemberSignature Language="C#" Value="protected virtual void OnItemCheck (System.Windows.Forms.ItemCheckEventArgs ice);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemCheck(class System.Windows.Forms.ItemCheckEventArgs ice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ice" Type="System.Windows.Forms.ItemCheckEventArgs" />
      </Parameters>
      <Docs>
        <param name="ice">イベント データを格納している <see cref="T:System.Windows.Forms.ItemCheckEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.ListView.ItemCheck" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.ListView.OnItemCheck%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.ListView.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.ListView.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.ItemCheck" />
        <altmember cref="T:System.Windows.Forms.ItemCheckEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemChecked">
      <MemberSignature Language="C#" Value="protected virtual void OnItemChecked (System.Windows.Forms.ItemCheckedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemChecked(class System.Windows.Forms.ItemCheckedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemChecked(System.Windows.Forms.ItemCheckedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ItemCheckedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.ItemCheckedEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.ListView.ItemChecked" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.ListView.OnItemChecked%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.ListView.OnItemChecked(System.Windows.Forms.ItemCheckedEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.ListView.OnItemChecked(System.Windows.Forms.ItemCheckedEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnItemDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnItemDrag (System.Windows.Forms.ItemDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemDrag(class System.Windows.Forms.ItemDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ItemDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.ItemDragEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.ListView.ItemDrag" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.ListView.OnItemDrag%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.ListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.ListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.ItemDrag" />
        <altmember cref="T:System.Windows.Forms.ItemDragEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemMouseHover">
      <MemberSignature Language="C#" Value="protected virtual void OnItemMouseHover (System.Windows.Forms.ListViewItemMouseHoverEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemMouseHover(class System.Windows.Forms.ListViewItemMouseHoverEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemMouseHover(System.Windows.Forms.ListViewItemMouseHoverEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ListViewItemMouseHoverEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.ListViewItemMouseHoverEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.ListView.ItemMouseHover" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.ListView.OnItemMouseHover%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.ListView.OnItemMouseHover(System.Windows.Forms.ListViewItemMouseHoverEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.ListView.OnItemMouseHover(System.Windows.Forms.ListViewItemMouseHoverEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnItemSelectionChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnItemSelectionChanged (System.Windows.Forms.ListViewItemSelectionChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemSelectionChanged(class System.Windows.Forms.ListViewItemSelectionChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemSelectionChanged(System.Windows.Forms.ListViewItemSelectionChangedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ListViewItemSelectionChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.ListViewItemSelectionChangedEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.ListView.ItemSelectionChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.ListView.OnItemSelectionChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.ListView.OnItemSelectionChanged(System.Windows.Forms.ListViewItemSelectionChangedEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.ListView.OnItemSelectionChanged(System.Windows.Forms.ListViewItemSelectionChangedEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseHover">
      <MemberSignature Language="C#" Value="protected override void OnMouseHover (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseHover(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnMouseHover(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.MouseHover" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Windows.Forms.ListView.OnMouseHover%2A> メソッドは、マウスを置いたときに、 <xref:System.Windows.Forms.ListViewItem>, 、メソッドを生成、 <xref:System.Windows.Forms.ListView.ItemMouseHover> イベントです。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.ListView.OnMouseHover%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.ListView.OnMouseHover(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.ListView.OnMouseHover(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected override void OnMouseLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnMouseLeave(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.MouseLeave" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnParentChanged">
      <MemberSignature Language="C#" Value="protected override void OnParentChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnParentChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnParentChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.ParentChanged" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnResize">
      <MemberSignature Language="C#" Value="protected override void OnResize (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnResize(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnResize(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.Resize" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRetrieveVirtualItem">
      <MemberSignature Language="C#" Value="protected virtual void OnRetrieveVirtualItem (System.Windows.Forms.RetrieveVirtualItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRetrieveVirtualItem(class System.Windows.Forms.RetrieveVirtualItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnRetrieveVirtualItem(System.Windows.Forms.RetrieveVirtualItemEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.RetrieveVirtualItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.RetrieveVirtualItemEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.ListView.OnRetrieveVirtualItem%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.ListView.OnRetrieveVirtualItem(System.Windows.Forms.RetrieveVirtualItemEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.ListView.OnRetrieveVirtualItem(System.Windows.Forms.RetrieveVirtualItemEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRightToLeftLayoutChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRightToLeftLayoutChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRightToLeftLayoutChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnRightToLeftLayoutChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.ListView.RightToLeftLayoutChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.ListView.OnRightToLeftLayoutChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.ListView.OnRightToLeftLayoutChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.ListView.OnRightToLeftLayoutChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnSearchForVirtualItem">
      <MemberSignature Language="C#" Value="protected virtual void OnSearchForVirtualItem (System.Windows.Forms.SearchForVirtualItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSearchForVirtualItem(class System.Windows.Forms.SearchForVirtualItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnSearchForVirtualItem(System.Windows.Forms.SearchForVirtualItemEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.SearchForVirtualItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.SearchForVirtualItemEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.ListView.SearchForVirtualItem" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.ListView.OnSearchForVirtualItem%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.ListView.OnSearchForVirtualItem(System.Windows.Forms.SearchForVirtualItemEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.ListView.OnSearchForVirtualItem(System.Windows.Forms.SearchForVirtualItemEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnSelectedIndexChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSelectedIndexChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelectedIndexChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnSelectedIndexChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.ListView.SelectedIndexChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.ListView.OnSelectedIndexChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.ListView.OnSelectedIndexChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.ListView.OnSelectedIndexChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.SelectedIndexChanged" />
        <altmember cref="T:System.EventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnSystemColorsChanged">
      <MemberSignature Language="C#" Value="protected override void OnSystemColorsChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnSystemColorsChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnSystemColorsChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.SystemColorsChanged" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVirtualItemsSelectionRangeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnVirtualItemsSelectionRangeChanged (System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnVirtualItemsSelectionRangeChanged(class System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnVirtualItemsSelectionRangeChanged(System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.ListView.OnVirtualItemsSelectionRangeChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.ListView.OnVirtualItemsSelectionRangeChanged(System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.ListView.OnVirtualItemsSelectionRangeChanged(System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OwnerDraw">
      <MemberSignature Language="C#" Value="public bool OwnerDraw { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OwnerDraw" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.OwnerDraw" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を示す値かどうか、 <see cref="T:System.Windows.Forms.ListView" /> オペレーティング システムによって、または独自のコードでコントロールを描画します。</summary>
        <value>
          <see langword="true" /> 場合、 <see cref="T:System.Windows.Forms.ListView" /> ; 独自のコードによってコントロールが描画される <see langword="false" /> 場合、 <see cref="T:System.Windows.Forms.ListView" /> オペレーティング システムによってコントロールを描画します。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Windows.Forms.ListView> オペレーティング システムによって通常コントロールを描画します。 外観をカスタマイズするために <xref:System.Windows.Forms.ListView> 項目、サブ項目、および列ヘッダーのセット、 <xref:System.Windows.Forms.ListView.OwnerDraw%2A> プロパティを `true` し、次のイベントの 1 つ以上のハンドラーを用意します。 <xref:System.Windows.Forms.ListView.DrawItem>, 、<xref:System.Windows.Forms.ListView.DrawSubItem>, 、<xref:System.Windows.Forms.ListView.DrawColumnHeader>です。 これには、オーナー描画が呼び出されます。 ときに、 <xref:System.Windows.Forms.ListView.View%2A> プロパティに設定されて <xref:System.Windows.Forms.View.Details?displayProperty=fullName>, 、3 つすべてのイベントが発生したそれ以外の場合のみ、 <xref:System.Windows.Forms.ListView.DrawItem> イベントが発生します。  
  
> [!NOTE]
>  サブ項目の情報は、並べて表示ビューに通常表示されるだけでなく、詳細ビューしますが、その、並べて表示ビューでのハンドラーで描画する必要があります、 <xref:System.Windows.Forms.ListView.DrawItem> イベントです。<xref:System.Windows.Forms.ListView.DrawSubItem> いないすべてのサブ項目のイベントが発生しない <xref:System.Windows.Forms.ColumnHeader> オブジェクトが追加されました、 <xref:System.Windows.Forms.ListView.Columns%2A> コレクションです。 なおそれぞれの最初のサブ項目 <xref:System.Windows.Forms.ListViewItem> オブジェクトは親アイテム自体を表し、最初の列に表示されます。  
  
 詳細ビューで処理することができます、 <xref:System.Windows.Forms.ListView.DrawItem> 、背景など、すべてのサブ項目に共通する要素を描画および処理するイベント、 <xref:System.Windows.Forms.ListView.DrawSubItem> テキスト値など、個々 のサブ項目の要素を描画するイベントです。 すべての項目を描画することも、 <xref:System.Windows.Forms.ListView> はあまり便利な可能性がありますが、2 つのイベントの 1 つだけを使用してを制御します。 詳細ビューで列ヘッダーを描画するには、処理、 <xref:System.Windows.Forms.ListView.DrawColumnHeader> イベントです。  
  
> [!NOTE]
>  オーナー描画、オーバーライドとグラフィックスのちらつきの問題を回避する、 <xref:System.Windows.Forms.ListView> を制御し、設定、 <xref:System.Windows.Forms.ListView.DoubleBuffered%2A> プロパティを `true`します。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、カスタム描画を提供する <xref:System.Windows.Forms.ListView> コントロールです。<xref:System.Windows.Forms.ListView> コントロールの例ではグラデーションの背景。 負の値とサブ項目は、前景色が赤と黒の背景にあります。  
  
 ハンドラーを <xref:System.Windows.Forms.ListView.DrawItem> イベントは、全体の項目の背景を描画します。 ハンドラーを <xref:System.Windows.Forms.ListView.DrawSubItem> イベントは、テキスト値と、テキストおよび負の値を持つサブ項目の背景を描画します。 ハンドラーを <xref:System.Windows.Forms.ListView.DrawColumnHeader> イベントは、各列見出しを描画します。  
  
 A <xref:System.Windows.Forms.ContextMenu> コンポーネントは、詳細ビューとリスト ビューを切り替える方法を提供します。 リスト ビューのみで、 <xref:System.Windows.Forms.ListView.DrawItem> イベントが発生します。 この場合、テキストと背景両方でが描画される、 <xref:System.Windows.Forms.ListView.DrawItem> イベント ハンドラーです。  
  
 [!code-csharp[ListViewOwnerDraw\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewOwnerDraw/CS/listviewownerdraw.cs#1)]
 [!code-vb[ListViewOwnerDraw\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewOwnerDraw/VB/listviewownerdraw.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.DrawItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawSubItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawColumnHeader" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Padding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定間の空白、 <see cref="T:System.Windows.Forms.ListView" /> コントロールとその内容。</summary>
        <value>
          <see cref="T:System.Windows.Forms.Padding" /> 間の空白を指定する、 <see cref="T:System.Windows.Forms.ListView" /> コントロールとその内容。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスでは、このプロパティは使用されません。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaddingChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PaddingChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PaddingChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.PaddingChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.ListView.Padding" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Paint">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.PaintEventHandler Paint;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.PaintEventHandler Paint" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.Paint" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PaintEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに、 <see cref="T:System.Windows.Forms.ListView" /> コントロールを描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListView> オペレーティング システムによってコントロールが描画されるか、所有者を描画するため、 <xref:System.Windows.Forms.ListView.Paint> イベントは生成されません。 オーナー描画の詳細については、次を参照してください。、 <xref:System.Windows.Forms.ListView.OwnerDraw%2A> プロパティです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RealizeProperties">
      <MemberSignature Language="C#" Value="protected void RealizeProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RealizeProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.RealizeProperties" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>プロパティを初期化、 <see cref="T:System.Windows.Forms.ListView" /> コントロールの外観を管理するコントロール。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RedrawItems">
      <MemberSignature Language="C#" Value="public void RedrawItems (int startIndex, int endIndex, bool invalidateOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RedrawItems(int32 startIndex, int32 endIndex, bool invalidateOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.RedrawItems(System.Int32,System.Int32,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="endIndex" Type="System.Int32" />
        <Parameter Name="invalidateOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="startIndex">再描画される範囲内の最初の項目のインデックス。</param>
        <param name="endIndex">再描画される範囲内の最後の項目のインデックス。</param>
        <param name="invalidateOnly">
          <see langword="true" /> 範囲の項目を無効にするには <see langword="false" /> を無効化し、項目を再描画します。</param>
        <summary>ある範囲の <see cref="T:System.Windows.Forms.ListViewItem" /> オブジェクトを再描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListView.RedrawItems%2A> メソッドになるかどうかを使用、 <xref:System.Windows.Forms.ListView> 仮想モードまたは標準モードにします。  
  
 場合、 <xref:System.Windows.Forms.ListView.BeginUpdate%2A> を呼び出す前にメソッドが呼び出された <xref:System.Windows.Forms.ListView.RedrawItems%2A>, 、再描画は行われません。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> または <paramref name="endIndex" /> 内の項目数以上の 0 より小さい、 <see cref="T:System.Windows.Forms.ListView" /> 仮想モードでの値よりも大きい場合は <see cref="P:System.Windows.Forms.ListView.VirtualListSize" />です。  
  
 または  
  
 指定された <paramref name="startIndex" /> よりも大きい、 <paramref name="endIndex." /></exception>
      </Docs>
    </Member>
    <Member MemberName="RetrieveVirtualItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.RetrieveVirtualItemEventHandler RetrieveVirtualItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.RetrieveVirtualItemEventHandler RetrieveVirtualItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.RetrieveVirtualItem" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RetrieveVirtualItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに、 <see cref="T:System.Windows.Forms.ListView" /> が仮想モードであり、必要、 <see cref="T:System.Windows.Forms.ListViewItem" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、 <xref:System.Windows.Forms.ListView> オブジェクトが仮想モードで、作成 <xref:System.Windows.Forms.ListViewItem> を使用する代わりに動的にオブジェクトを <xref:System.Windows.Forms.ListView.Items%2A> コレクションです。 このイベントは、オブジェクトを作成する必要があります、 <xref:System.Windows.Forms.ListViewItem> オブジェクトです。 このイベントのハンドラーを作成する必要があります、適切な <xref:System.Windows.Forms.ListViewItem> 渡すの動作で戻ることや、キャッシュから取得、 <xref:System.Windows.Forms.RetrieveVirtualItemEventArgs.Item%2A> プロパティです。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、このイベントのハンドラーを示します。 この例では listView1 必要がある各 <xref:System.Windows.Forms.ListViewItem> をそのインデックスの正方形を表示します。 このコード例が示されている例の一部は、 <xref:System.Windows.Forms.ListView.VirtualMode%2A> プロパティです。  
  
 [!code-csharp[System.Windows.Forms.ListView.VirtualMode\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/cs/VirtualMode.cs#2)]
 [!code-vb[System.Windows.Forms.ListView.VirtualMode\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/vb/VirtualMode.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.RetrieveVirtualItemEventArgs.Item" /> アイテムにプロパティが設定されていないときに、 <see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem" /> イベントを処理します。</exception>
      </Docs>
    </Member>
    <Member MemberName="RightToLeftLayout">
      <MemberSignature Language="C#" Value="public virtual bool RightToLeftLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RightToLeftLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.RightToLeftLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールを右から左方向にレイアウトするかどうかを示す値を取得または設定します。</summary>
        <value>
          <see langword="true" /> 示すために、 <see cref="T:System.Windows.Forms.ListView" /> コントロールをレイアウトに右から左。 そうしないと、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListView> プロパティは、国際対応のアプリケーションで使用する言語の右から左に読む場所です。 設定した場合 <xref:System.Windows.Forms.ListView> と <xref:System.Windows.Forms.RightToLeft> コントロールの内容とのテキストを true にレイアウトする右から左にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RightToLeftLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RightToLeftLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RightToLeftLayoutChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.RightToLeftLayoutChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.ListView.RightToLeftLayout" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.ListView.RightToLeftLayoutChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.ListView> という `ListView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.ListView.RightToLeftLayoutChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#462](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#462)]
 [!code-vb[System.Windows.Forms.EventExamples\#462](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#462)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scrollable">
      <MemberSignature Language="C#" Value="public bool Scrollable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Scrollable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Scrollable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>すべての項目を表示する十分な領域がない場合に、スクロール バーをコントロールに追加するかどうかを示す値を取得または設定します。</summary>
        <value>
          <see langword="true" /> すべての項目を表示するユーザーを許可するように必要な場合に、コントロールにスクロール バーを追加する場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティに設定すると `true`, 、 <xref:System.Windows.Forms.ListView> 項目の数が、コントロールのクライアント領域のサイズを超えているときに使用する垂直スクロール バーが表示されます。 このプロパティを使用するには、ユーザーがで使用可能なすべての項目にアクセスできるようにする、 <xref:System.Windows.Forms.ListView> コントロールです。  
  
> [!NOTE]
>  バージョンでは、 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] バージョン 2.0 より前の列ヘッダーが描画されません正しくこのプロパティを設定するときに `false` して大きくコントロールのサイズを変更するとします。 この問題を解決するには、このプロパティを設定 `true` で、 <xref:System.Windows.Forms.Form.ResizeBegin> にイベント ハンドラーと `false` で、 <xref:System.Windows.Forms.Form.ResizeEnd> イベント ハンドラーです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchForVirtualItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.SearchForVirtualItemEventHandler SearchForVirtualItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.SearchForVirtualItemEventHandler SearchForVirtualItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.SearchForVirtualItem" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.SearchForVirtualItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに、 <see cref="T:System.Windows.Forms.ListView" /> 仮想モードでは、検索の実行とします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントが発生したときに、 <xref:System.Windows.Forms.ListView> 仮想モードでは、および <xref:System.Windows.Forms.ListView.FindNearestItem%2A> または <xref:System.Windows.Forms.ListView.FindItemWithText%2A> メソッドが呼び出されます。 このイベントを処理する場合は、によって提供される項目の一覧から項目を計算する必要があります、 <xref:System.Windows.Forms.ListView.Items%2A> 検索条件と一致して、 <xref:System.Windows.Forms.SearchForVirtualItemEventArgs.Index%2A?displayProperty=fullName> プロパティのインデックスを <xref:System.Windows.Forms.ListViewItem>です。 項目が指定されていない場合 <xref:System.Windows.Forms.ListView.FindNearestItem%2A> と <xref:System.Windows.Forms.ListView.FindItemWithText%2A> 戻ります `null`します。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、検索は 1万最初の 2 乗のリストで指定された整数に最も近い一致を返します。 このコード例が示されている例の一部は、 <xref:System.Windows.Forms.ListView.VirtualMode%2A> プロパティです。  
  
 [!code-csharp[System.Windows.Forms.ListView.VirtualMode\#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/cs/VirtualMode.cs#4)]
 [!code-vb[System.Windows.Forms.ListView.VirtualMode\#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/vb/VirtualMode.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedIndexChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SelectedIndexChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SelectedIndexChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.SelectedIndexChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに、 <see cref="P:System.Windows.Forms.ListView.SelectedIndices" /> コレクションへの変更。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListView.SelectedIndices%2A> コレクションが変更されるたびに、 <xref:System.Windows.Forms.ListViewItem.Selected%2A> のプロパティ、 <xref:System.Windows.Forms.ListViewItem> 変更します。 プロパティの変更はプログラムで発生することが、または、ユーザーが項目を選択またはアイテムの選択を解除します。 ユーザーは、複数選択を実行するには、ctrl キーを押さずに項目を選択するときに、コントロールは、最初に、直前の選択を消去します。 この場合、このイベントは、以前に選択した項目ごとに 1 回は、新しく選択された項目に対して同時に発生します。  
  
 選択された項目を決定する、 <xref:System.Windows.Forms.ListView> コントロールを使用して、 <xref:System.Windows.Forms.ListView.SelectedItems%2A> にアクセスするプロパティ、 <xref:System.Windows.Forms.ListView.SelectedListViewItemCollection>です。 選択された項目への変更が発生するたびに、タスクを実行するには、このイベントのイベント ハンドラーを作成することができます、 <xref:System.Windows.Forms.ListView> コントロールです。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.ListView.SelectedItems%2A> プロパティには、 <xref:System.Windows.Forms.ListView.SelectedIndexChanged> イベント、 <xref:System.Windows.Forms.ListView.HeaderStyle%2A> メンバー、および <xref:System.Windows.Forms.ListView.SelectedListViewItemCollection> クラスです。 この例を実行するを含むフォームに次のコードを貼り付け、 <xref:System.Windows.Forms.ListView> という名前のオブジェクト `ListView1` と <xref:System.Windows.Forms.TextBox> という名前 `TextBox1`します。 呼び出す、 `InitializeListView` フォームのコンス トラクターからのメソッドまたは `Load` メソッドです。 この例は、イベント ハンドラーが正しく関連付けである必要があります、 <xref:System.Windows.Forms.ListView.SelectedIndexChanged> イベント  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView1#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#2)]
[!code-csharp[System.Windows.Forms.ListView1#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#2)]
[!code-vb[System.Windows.Forms.ListView1#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.ItemSelectionChanged" />
        <altmember cref="M:System.Windows.Forms.ListView.OnSelectedIndexChanged(System.EventArgs)" />
        <altmember cref="T:System.EventHandler" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedIndices" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedItems" />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndices">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.SelectedIndexCollection SelectedIndices { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/SelectedIndexCollection SelectedIndices" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.SelectedIndices" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+SelectedIndexCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロール内の選択された項目のインデックスを取得します。</summary>
        <value>A <see cref="T:System.Windows.Forms.ListView.SelectedIndexCollection" /> 選択された項目のインデックスを含んでいます。 項目が選択されていない場合、空 <see cref="T:System.Windows.Forms.ListView.SelectedIndexCollection" /> が返されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListView.SelectedIndices%2A> する前に、プロパティにアクセスした場合は、プロパティは、インデックスを含まない。、 <xref:System.Windows.Forms.ListView> ハンドルを作成すると、一般的に発生するときに、 <xref:System.Windows.Forms.ListView> フォームでの表示に最初に読み込まれます。 ハンドルが作成されを確認できる、 <xref:System.Windows.Forms.Control.IsHandleCreated%2A> プロパティです。 ときに、 <xref:System.Windows.Forms.ListView.MultiSelect%2A> にプロパティが設定されている `true`, 、このプロパティで選択されているすべての項目のインデックスを含むコレクションを取得する、 <xref:System.Windows.Forms.ListView>です。 単一選択の <xref:System.Windows.Forms.ListView>, 、このプロパティの唯一の選択した項目のインデックスを含む 1 つの要素を含むコレクションを取得する、 <xref:System.Windows.Forms.ListView>です。 コレクション内の項目を使用して実行できるタスクの詳細については、次を参照してください。 <xref:System.Windows.Forms.ListView.SelectedIndexCollection>します。  
  
 選択されている項目のコレクションを取得するかどうか、 <xref:System.Windows.Forms.ListView> インデックス位置を使用して、項目が選択されているのではなく、コントロール、 <xref:System.Windows.Forms.ListView.SelectedItems%2A> プロパティです。  
  
   
  
## 例  
 次のコード例では、使用方法を示します、 <xref:System.Windows.Forms.ListView.SelectedIndices%2A>, 、<xref:System.Windows.Forms.ListView.SelectedIndexChanged>, 、および <xref:System.Windows.Forms.ListView.HeaderStyle%2A> メンバーおよび <xref:System.Windows.Forms.ListView.SelectedIndexCollection> クラスです。 この例を実行するを含むフォームに次のコードを貼り付け、 <xref:System.Windows.Forms.ListView> という名前のオブジェクト `ListView1` と <xref:System.Windows.Forms.TextBox> という名前 `TextBox1`します。 呼び出す、 `InitializeListView` フォームのコンス トラクターからのメソッドまたは `Load` メソッドです。 この例では、イベント ハンドラーが正しく関連付けが必要です、 <xref:System.Windows.Forms.ListView.SelectedIndexChanged> イベントです。  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView1#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#3)]
[!code-csharp[System.Windows.Forms.ListView1#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#3)]
[!code-vb[System.Windows.Forms.ListView1#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.SelectedIndexCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedItems" />
      </Docs>
    </Member>
    <Member MemberName="SelectedItems">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.SelectedListViewItemCollection SelectedItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/SelectedListViewItemCollection SelectedItems" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.SelectedItems" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+SelectedListViewItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロール内の選択された項目を取得します。</summary>
        <value>A <see cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection" /> コントロールで選択されている項目を格納します。 項目が選択されていない場合、空 <see cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection" /> が返されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListView.SelectedItems%2A> する前に、プロパティにアクセスした場合は、プロパティにすべての項目は含まれません、 <xref:System.Windows.Forms.ListView> ハンドルを作成すると、一般的に発生するときに <xref:System.Windows.Forms.ListView> フォームでの表示に最初に読み込まれます。 ハンドルが作成されを確認できる、 <xref:System.Windows.Forms.Control.IsHandleCreated%2A> プロパティです。 ときに、 <xref:System.Windows.Forms.ListView.MultiSelect%2A> にプロパティが設定されている `true`, 、このプロパティで選択されている項目を含むコレクションを返します、 <xref:System.Windows.Forms.ListView>です。 単一選択の <xref:System.Windows.Forms.ListView>, 、このプロパティの唯一の選択した項目を含むコレクションを取得する、 <xref:System.Windows.Forms.ListView>です。 コレクション内の項目を使用して実行できるタスクの詳細については、次を参照してください。 <xref:System.Windows.Forms.ListView.SelectedListViewItemCollection>します。  
  
 内のインデックス位置のコレクションを取得するかどうか、 <xref:System.Windows.Forms.ListView.ListViewItemCollection> で選択されている項目の <xref:System.Windows.Forms.ListView> 、選択された項目を使用する代わりに、コントロール、 <xref:System.Windows.Forms.ListView.SelectedIndices%2A> プロパティです。  
  
   
  
## 例  
 次のコード例では、使用方法を示します、 <xref:System.Windows.Forms.ListView.SelectedItems%2A>, 、<xref:System.Windows.Forms.ListView.SelectedIndexChanged> イベント、および <xref:System.Windows.Forms.ListView.HeaderStyle%2A> メンバーおよび <xref:System.Windows.Forms.ListView.SelectedListViewItemCollection> クラスです。 この例を実行するを含むフォームに次のコードを貼り付け、 <xref:System.Windows.Forms.ListView> という名前のオブジェクト `ListView1` と <xref:System.Windows.Forms.TextBox> という名前 `TextBox1`します。 呼び出す、 `InitializeListView` フォームのコンス トラクターからのメソッドまたは `Load` メソッドです。 この例では、イベント ハンドラーが正しく関連付けが必要です、 <xref:System.Windows.Forms.ListView.SelectedIndexChanged> イベント  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView1#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#2)]
[!code-csharp[System.Windows.Forms.ListView1#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#2)]
[!code-vb[System.Windows.Forms.ListView1#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedIndices" />
      </Docs>
    </Member>
    <Member MemberName="ShowGroups">
      <MemberSignature Language="C#" Value="public bool ShowGroups { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowGroups" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.ShowGroups" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>項目をグループ化して表示するかどうかを示す値を取得または設定します。</summary>
        <value>
          <see langword="true" /> アイテムのグループを表示するにはそれ以外の場合、 <see langword="false" />です。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 すべてのグループに割り当てられている、 <xref:System.Windows.Forms.ListView> コントロールが表示されるたびに、 <xref:System.Windows.Forms.ListView.View%2A> プロパティが以外の値に設定されて <xref:System.Windows.Forms.View.List>します。<xref:System.Windows.Forms.ListView> グループ化機能では、論理的に関連する複数の視覚的なグループを作成できます。 <xref:System.Windows.Forms.ListView> Windows XP と Windows Server 2003 上の項目。 この機能を実現する、アプリケーションを呼び出す必要があります、 <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=fullName> メソッドです。 詳細については、<xref:System.Windows.Forms.ListView.Groups%2A> プロパティを参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.Groups" />
        <altmember cref="T:System.Windows.Forms.ListViewGroup" />
        <altmember cref="T:System.Windows.Forms.ListViewGroupCollection" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="ShowItemToolTips">
      <MemberSignature Language="C#" Value="public bool ShowItemToolTips { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowItemToolTips" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.ShowItemToolTips" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定のツールヒントを表示するかどうかを示す値、 <see cref="T:System.Windows.Forms.ListViewItem" /> に含まれるオブジェクト、 <see cref="T:System.Windows.Forms.ListView" />です。</summary>
        <value>
          <see langword="true" /> 場合 <see cref="T:System.Windows.Forms.ListViewItem" /> ツールヒントが表示されている以外にする必要があります <see langword="false" />します。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Windows.Forms.ListView.ShowItemToolTips%2A> にプロパティが設定されている `true`, 、 <xref:System.Windows.Forms.ListViewItem> を表示するツールヒントには、それ以外の場合は何も表示されます。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.ListView.ShowItemToolTips%2A> と <xref:System.Windows.Forms.ListViewItem.ToolTipText%2A?displayProperty=fullName> プロパティです。 この例を実行するには、Windows フォームと呼び出しにコードを貼り付けます `InitializeItemsWithToolTips` フォームのコンス トラクターからまたは <xref:System.Windows.Forms.Form.Load> イベント ハンドラーです。  
  
 [!code-csharp[System.Windows.Forms.ListViewItemWhidbeyMembers\#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemWhidbeyMembers/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.ListViewItemWhidbeyMembers\#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemWhidbeyMembers/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SmallImageList">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImageList SmallImageList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ImageList SmallImageList" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.SmallImageList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、 <see cref="T:System.Windows.Forms.ImageList" /> 項目コントロールで小さいアイコンとして表示するときに使用します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ImageList" /> ときに使用するアイコンを含む、 <see cref="P:System.Windows.Forms.ListView.View" /> にプロパティが設定されている <see cref="F:System.Windows.Forms.View.SmallIcon" />します。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListView.SmallImageList%2A> プロパティでは、指定することができます、 <xref:System.Windows.Forms.ImageList> 小さなアイコンが表示された項目を表示するときに使用するアイコンを格納しているオブジェクト \(ときに、 <xref:System.Windows.Forms.ListView.View%2A> プロパティが以外の任意の値に設定されて <xref:System.Windows.Forms.View.LargeIcon>\)。<xref:System.Windows.Forms.ListView> グラフィック形式でコントロールが受け入れる、 <xref:System.Windows.Forms.ImageList> アイコンを表示するときにコントロールをサポートしています。<xref:System.Windows.Forms.ListView> コントロールは .ico ファイルに限定されません。 1 回、 <xref:System.Windows.Forms.ImageList> に割り当てられている、 <xref:System.Windows.Forms.ListView.SmallImageList%2A> プロパティを設定できます、 <xref:System.Windows.Forms.ListViewItem.ImageIndex%2A> の各プロパティ <xref:System.Windows.Forms.ListViewItem> で、 <xref:System.Windows.Forms.ListView> コントロールで適切なイメージのインデックス位置を <xref:System.Windows.Forms.ImageList>です。 アイコンのサイズ、 <xref:System.Windows.Forms.ListView.SmallImageList%2A> で指定された、 <xref:System.Windows.Forms.ImageList.ImageSize%2A> プロパティです。  
  
 1 つだけのインデックスを指定できるので、 <xref:System.Windows.Forms.ListViewItem.ImageIndex%2A?displayProperty=fullName> プロパティには、 <xref:System.Windows.Forms.ImageList> で指定されたオブジェクト、 <xref:System.Windows.Forms.ListView.LargeImageList%2A> と <xref:System.Windows.Forms.ListView.SmallImageList%2A> プロパティに表示するイメージの同じインデックス位置を持つ必要があります。 たとえば場合、 <xref:System.Windows.Forms.ListViewItem.ImageIndex%2A> のプロパティ、 <xref:System.Windows.Forms.ListViewItem> 設定されている内の同じインデックス位置にする必要があります小規模および大規模の両方のアイコンを使用するイメージを 0 に、 <xref:System.Windows.Forms.ImageList> で指定されたオブジェクト、 <xref:System.Windows.Forms.ListView.LargeImageList%2A> と <xref:System.Windows.Forms.ListView.SmallImageList%2A> プロパティです。  
  
> [!NOTE]
>  イメージをキーを持つ指定した場合は、各イメージ リストの同じインデックス位置にある大小さまざまなバージョンのイメージを配置する必要があります。 ビューを切り替えるときに、1 つのリスト内のイメージのインデックスの場所を使用して、指定されたキーの値に関係なく、他の一覧で、イメージを見つけます。  
  
 設定する、 <xref:System.Windows.Forms.ImageList> 大きいアイコン表示で項目を表示するときに使用する \(ときに、 <xref:System.Windows.Forms.ListView.View%2A> にプロパティが設定されている <xref:System.Windows.Forms.View.LargeIcon>\) を使用して、 <xref:System.Windows.Forms.ListView.LargeImageList%2A> プロパティです。 イメージを使用して、項目の状態の表示を使用するかどうか、 <xref:System.Windows.Forms.ListView.StateImageList%2A> プロパティです。  
  
   
  
## 例  
 次のコード例を作成、 <xref:System.Windows.Forms.ListView> の 3 つのコントロール <xref:System.Windows.Forms.ListViewItem> 指定されたオブジェクトと 3 つ <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> オブジェクトの各項目に指定します。 この例でも作成 <xref:System.Windows.Forms.ColumnHeader> 詳細ビューにサブ項目を表示するオブジェクト。 2 つ <xref:System.Windows.Forms.ImageList> にイメージを用意するコード例でも作成されるオブジェクト、 <xref:System.Windows.Forms.ListViewItem> オブジェクトです。 これら <xref:System.Windows.Forms.ImageList> にオブジェクトを追加、 <xref:System.Windows.Forms.ListView.LargeImageList%2A> と <xref:System.Windows.Forms.ListView.SmallImageList%2A> プロパティです。 この例を作成するのには、次のプロパティを使用して、 <xref:System.Windows.Forms.ListView> コントロールです。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 この例では、コードが追加されたことが必要です、 <xref:System.Windows.Forms.Form> コンス トラクターまたは、フォーム上の別の方法の例で作成したメソッドを呼び出します。 また、例ではイメージがという名前が必要です `MySmallImage1`, 、`MySmallImage2`, 、`MyLargeImage1`, 、および `MyLargeImage2` C: ドライブのルート ディレクトリにあります。  
  
 [!code-cpp[ListViewExample\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView" />
        <altmember cref="P:System.Windows.Forms.ListView.LargeImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.StateImageList" />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.Sort" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>リスト ビューの項目を並べ替えます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 通常アイテムが並べ替えられるを使用して、 <xref:System.Windows.Forms.ListView.Sorting%2A> プロパティで、項目のテキストに基づいて項目を並べ替えます。 並べ替え順序をカスタマイズするを実装するクラスを記述する必要があります、 <xref:System.Collections.IComparer> インターフェイスし、設定、 <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> プロパティをそのクラスのオブジェクト。 これは、項目を並べ替えるサブ項目のテキストをする場合に便利です。 アイテムの手動による並べ替えを実行する方法の詳細については、の例を参照してください、 <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> プロパティです。  
  
 場合、 <xref:System.Windows.Forms.ListView.Sorting%2A?displayProperty=fullName> プロパティが以外の値に設定されて <xref:System.Windows.Forms.SortOrder.None?displayProperty=fullName> 場合や、 <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> プロパティが設定されて、リストは自動的に項目が追加されるとします。 ラベルのテキストが変更されたときに、項目が自動的に並べ替えられません。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.ListViewItemSorter" />
      </Docs>
    </Member>
    <Member MemberName="Sorting">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.SortOrder Sorting { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.SortOrder Sorting" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Sorting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.SortOrder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロール内の項目の並べ替え順序を取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.SortOrder" /> 値のいずれか。 既定値は、<see cref="F:System.Windows.Forms.SortOrder.None" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListView.Sorting%2A> プロパティでは、内の項目が並べ替えられたかどうかを指定することができます、 <xref:System.Windows.Forms.ListView> コントロールです。 既定では、並べ替えは実行されません。 ときに、 <xref:System.Windows.Forms.ListView.Sorting%2A> プロパティに設定されて <xref:System.Windows.Forms.SortOrder.Ascending> または <xref:System.Windows.Forms.SortOrder.Descending>, 、内の項目、 <xref:System.Windows.Forms.ListView> 自動的にアルファベットの昇順で並べ替えられます \(にプロパティを設定すると <xref:System.Windows.Forms.SortOrder.Ascending>\) または降順 \(にプロパティを設定すると <xref:System.Windows.Forms.SortOrder.Descending>\)。 このプロパティを使用するには自動的に表示される項目の並べ替えに、 <xref:System.Windows.Forms.ListView> コントロールをユーザーに多くのアイテムが使用可能な場合に項目を検索しやすきます。  
  
 並べ替えを使用せずに、独自の項目を実行するかどうか、 <xref:System.Windows.Forms.ListView.Sorting%2A> プロパティには、使用、 <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> プロパティと組み合わせて、 <xref:System.Windows.Forms.ListView.Sort%2A> メソッドです。  
  
 場合、 <xref:System.Windows.Forms.ListView.Sorting%2A?displayProperty=fullName> プロパティが以外の値に設定されて <xref:System.Windows.Forms.SortOrder.None?displayProperty=fullName> 場合や、 <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> プロパティが設定されて、リストが自動的に並べ替えられます項目を追加するとします。 ラベルのテキストが変更されたときに、項目が自動的に並べ替えられません。  
  
   
  
## 例  
 次のコード例を作成、 <xref:System.Windows.Forms.ListView> の 3 つのコントロール <xref:System.Windows.Forms.ListViewItem> 指定されたオブジェクトと 3 つ <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> オブジェクトの各項目に指定します。 この例でも作成 <xref:System.Windows.Forms.ColumnHeader> 詳細ビューにサブ項目を表示するオブジェクト。 2 つ <xref:System.Windows.Forms.ImageList> にイメージを用意するコード例でも作成されるオブジェクト、 <xref:System.Windows.Forms.ListViewItem> オブジェクトです。 これら <xref:System.Windows.Forms.ImageList> にオブジェクトを追加、 <xref:System.Windows.Forms.ListView.LargeImageList%2A> と <xref:System.Windows.Forms.ListView.SmallImageList%2A> プロパティです。 この例を作成するのには、次のプロパティを使用して、 <xref:System.Windows.Forms.ListView> コントロールです。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 この例では、コードが追加されたことが必要です、 <xref:System.Windows.Forms.Form> コンス トラクターまたは、フォーム上の別の方法の例で作成したメソッドを呼び出します。 また、例ではイメージがという名前が必要です `MySmallImage1`, 、`MySmallImage2`, 、`MyLargeImage1`, 、および `MyLargeImage2` C: ドライブのルート ディレクトリにあります。  
  
 [!code-cpp[ListViewExample\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定された値は、のいずれかではありません、 <see cref="T:System.Windows.Forms.SortOrder" /> 値。</exception>
        <altmember cref="T:System.Windows.Forms.SortOrder" />
      </Docs>
    </Member>
    <Member MemberName="StateImageList">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImageList StateImageList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ImageList StateImageList" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.StateImageList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、 <see cref="T:System.Windows.Forms.ImageList" /> コントロールでのアプリケーション定義の状態に関連付けられています。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ImageList" /> アプリケーション定義の項目の状態を示すために使用できる状態のイメージのセットを格納します。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListView.StateImageList%2A> プロパティでは、指定することができます、 <xref:System.Windows.Forms.ImageList> 内の項目のアプリケーション固有の状態を表すために使用するイメージを格納している、 <xref:System.Windows.Forms.ListView> コントロールです。 状態のイメージは、項目のアイコンの左側に表示されます。 Checked と unchecked のチェック ボックスなどの状態のイメージを使用すると、アプリケーション定義の項目の状態を示します。 状態のイメージがのすべてのビューに表示される、 <xref:System.Windows.Forms.ListView> コントロールです。  
  
 場合、 <xref:System.Windows.Forms.ImageList> で指定された、 <xref:System.Windows.Forms.ListView.StateImageList%2A> プロパティおよび <xref:System.Windows.Forms.ListView.CheckBoxes%2A> にプロパティが設定されている `true`, 、イメージのインデックス位置 0 と 1 に、 <xref:System.Windows.Forms.ImageList> \] チェック ボックスの代わりに表示されます。 チェック ボックスをオンになっていないのではなくインデックス位置 0 に画像が表示され、チェックされたチェック ボックスではなく、インデックス位置 1 のイメージが表示されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.LargeImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.SmallImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckBoxes" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このクラスでは、このプロパティは使用されません。</summary>
        <value>表示するテキスト、 <see cref="T:System.Windows.Forms.ListView" /> コントロールです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスでは、このプロパティは使用されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.TextChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.ListView.Text" /> プロパティが変更されたときに発生します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TileSize">
      <MemberSignature Language="C#" Value="public System.Drawing.Size TileSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size TileSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.TileSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>タイル ビューで表示されるタイルのサイズを取得または設定します。</summary>
        <value>A <see cref="T:System.Drawing.Size" /> 新しいタイルのサイズを格納しています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 タイルのサイズの場合にこのプロパティにより制御、 <xref:System.Windows.Forms.ListView.View%2A> にプロパティが設定されている <xref:System.Windows.Forms.View.Tile?displayProperty=fullName>します。 このプロパティを設定することは、サブ項目のテキストが長すぎて 1 行に表示される場合は、行の折り返しを防ぐために便利です。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Windows.Forms.ListView> タイル機能します。 この例では、並べて表示ビューは、本を表す項目を表示します。 各項目は、書籍、タイトル、作成者、および発行年のアイコンが含まれたタイルとして表示されます。 動作するコードの例では、Book.ico という名前の例と同じディレクトリにアイコン ファイルを含める必要があります。 アイコンなしのビューで、関連する行をコメント アウト、タイルを表示する、 <xref:System.Windows.Forms.ImageList> オブジェクトです。  
  
 [!code-cpp[System.Windows.Forms.ListView.Tiling\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.Tiling/CPP/listviewtilingexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView.Tiling\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.Tiling/CS/listviewtilingexample.cs#1)]
 [!code-vb[System.Windows.Forms.ListView.Tiling\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.Tiling/VB/listviewtilingexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListViewItem.ListViewSubItemCollection" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="TopItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem TopItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListViewItem TopItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.TopItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールで最初に表示される項目を取得または設定します。</summary>
        <value>A <see cref="T:System.Windows.Forms.ListViewItem" /> コントロールで最初に表示される項目を表します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 上部にあるゼロ \(0\) のインデックス位置に項目が初期状態では、 <xref:System.Windows.Forms.ListView> コントロールです。 場合、 <xref:System.Windows.Forms.ListView> コントロールの内容がスクロールされたといった、別の項目がコントロールの上部にあることができます。 このプロパティは、の上部に表示されている項目を確認またはを使用して、 <xref:System.Windows.Forms.ListView> コントロールです。 値、 <xref:System.Windows.Forms.ListView.TopItem%2A> プロパティは常に永続化されません、目的の最上位の項目がリスト ビューでは場所によってです。  
  
 表示される項目の数、 <xref:System.Windows.Forms.ListView> いつでも制御は、リスト ビューの高さとそれに含まれる項目のサイズに依存します。 項目は、リスト ビューの高さを超えている場合、項目は、ユーザーがスクロールできる複数のページに続けます。 設定した場合、 <xref:System.Windows.Forms.ListView.TopItem%2A> プロパティの最後のページ内の項目を <xref:System.Windows.Forms.ListView>, 、項目は、ビューに自動的にスクロールされますただし、 <xref:System.Windows.Forms.ListView.TopItem%2A> 最後のページの実際の上位の項目に設定されます。  
  
 特定の項目がコントロールの可視領域には必ずしも上端の位置で\)、使用、 <xref:System.Windows.Forms.ListView.EnsureVisible%2A> メソッドです。  
  
> [!NOTE]
>  なしに、このプロパティを設定する場合のみ有効、 <xref:System.Windows.Forms.ListView.Scrollable%2A> プロパティの値が `false`です。  
>   
>  このプロパティの設定は、バージョンのではサポートされていません、 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] バージョン 2.0 より前です。  
  
   
  
## 例  
 次のコード例では、リセットのスタイルを示しています、 <xref:System.Windows.Forms.ListViewItem> を使用すると、オブジェクトのサブ項目、 <xref:System.Windows.Forms.ListView.TopItem%2A> プロパティおよび <xref:System.Windows.Forms.ListViewItem.ListViewSubItem.ResetStyle%2A?displayProperty=fullName> メソッドです。 例を実行するには、という名前のボタンを表示するフォームに次のコードを貼り付けます `Button1` を呼び出すと、 `InitializeListView` フォームのコンス トラクター メソッドまたは <xref:System.Windows.Forms.Form.Load> イベント ハンドラーです。  
  
 [!code-cpp[System.Windows.Forms.ListViewItemStyle\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemStyle/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ListViewItemStyle\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemStyle/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ListViewItemStyle\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemStyle/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.ListView.View" /> にプロパティが設定されている <see cref="F:System.Windows.Forms.View.LargeIcon" />,  、<see cref="F:System.Windows.Forms.View.SmallIcon" />, 、または <see cref="F:System.Windows.Forms.View.Tile" />です。</exception>
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="M:System.Windows.Forms.ListView.EnsureVisible(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>文字列表現を返す、 <see cref="T:System.Windows.Forms.ListView" /> コントロールです。</summary>
        <returns>コントロールを示す文字列を入力、内の項目の数、 <see cref="T:System.Windows.Forms.ListView" /> コントロール、および最初の項目の種類、 <see cref="T:System.Windows.Forms.ListView" />, カウントがない場合、0 です。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateExtendedStyles">
      <MemberSignature Language="C#" Value="protected void UpdateExtendedStyles ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateExtendedStyles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.UpdateExtendedStyles" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>リスト ビュー コントロールに適用されている拡張スタイルを更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することができます、 <xref:System.Windows.Forms.ListView.UpdateExtendedStyles%2A> メソッドで使用する拡張スタイルをオーバーライドする派生クラスでは、 <xref:System.Windows.Forms.ListView> コントロールです。 このメソッドを呼び出す場合はことを確認するでのプロパティによって設定された拡張スタイル、 <xref:System.Windows.Forms.ListView> コントロールがコントロールの派生バージョンで使用されます。  
  
 拡張スタイルを適用するプロパティは、次のとおり、 <xref:System.Windows.Forms.ListView> コントロールです。  
  
-   <xref:System.Windows.Forms.ListView.Activation%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.HoverSelection%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.Activation" />
        <altmember cref="P:System.Windows.Forms.ListView.AllowColumnReorder" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckBoxes" />
        <altmember cref="P:System.Windows.Forms.ListView.FullRowSelect" />
        <altmember cref="P:System.Windows.Forms.ListView.GridLines" />
        <altmember cref="P:System.Windows.Forms.ListView.HoverSelection" />
      </Docs>
    </Member>
    <Member MemberName="UseCompatibleStateImageBehavior">
      <MemberSignature Language="C#" Value="public bool UseCompatibleStateImageBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseCompatibleStateImageBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.UseCompatibleStateImageBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を示す値かどうか、 <see cref="T:System.Windows.Forms.ListView" /> 使用状態イメージの動作と互換性がある、 .NET Framework 1.1 または .NET Framework 2.0 です。</summary>
        <value>
          <see langword="true" /> 状態イメージの動作と互換性のある場合、 .NET Framework 1.1; <see langword="false" /> 動作と互換性のある場合、 .NET Framework 2.0 です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 変更、 <xref:System.Windows.Forms.ListView> の制御、 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 2.0 には、項目がオンまたはオフであるかどうか、または中間状態を示すために設定するカスタムの状態のイメージが有効にします。 この機能を追加することで、 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 2.0 の .NET Framework 1.1 とは異なる動作です。 内の動作に依存するアプリケーションを作成した場合、 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 1.1 では、あることを確認、 <xref:System.Windows.Forms.ListView.UseCompatibleStateImageBehavior%2A> にプロパティが設定されている `true`, 、これは、既定値です。 完全にカスタム状態のイメージを活用するために次のように設定します。 <xref:System.Windows.Forms.ListView.UseCompatibleStateImageBehavior%2A> に `false`します。  
  
> [!NOTE]
>  使用している場合、 [!INCLUDE[vsprvsext](~/includes/vsprvsext-md.md)] デザイナー、 <xref:System.Windows.Forms.ListView.UseCompatibleStateImageBehavior%2A> プロパティに設定する `false`です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="View">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.View View { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.View View" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.View" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.View</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールに項目を表示する方法を取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.View" /> 値のいずれか。 既定値は、<see cref="F:System.Windows.Forms.View.LargeIcon" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ListView.View%2A> プロパティでは、表示の種類を指定することができます、 <xref:System.Windows.Forms.ListView> 項目を表示するコントロールを使用します。 設定することができます、 <xref:System.Windows.Forms.ListView.View%2A> プロパティを大きいアイコンまたは小さいアイコンで各項目の表示または垂直方向の一覧で項目を表示します。 豊富なオプションは、使用するだけでなく、項目、項目ごとに指定されているすべてのサブ項目を表示する詳細ビューです。 各項目は、垂直方向に表示される項目と、列ヘッダーを持つ列に表示される各アイテムのサブ項目をグリッドに表示されます。 詳細ビューは、データベースの情報をユーザーに表示する最適な方法です。 Windows XP と Windows Server 2003 では、独自のサブ項目の情報と共に大きいアイコンを表示することによって情報グラフィカルとテキスト情報のバランスをとるタイルとして項目を表示することもできます。 並べて表示ビューを有効にする、アプリケーションを呼び出す必要があります、 <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=fullName> メソッドです。 小さなイメージ ビューには、アイコンの右側に各項目のアイコンとテキストの情報が表示されます。 大きいイメージ ビューには、アイコンとテキスト情報は、アイコンの下で各アイテムが表示されます。 イメージ リストのアイコンのサイズがで指定された、 <xref:System.Windows.Forms.ImageList.ImageSize%2A> のプロパティ、 <xref:System.Windows.Forms.ImageList> の <xref:System.Windows.Forms.ListView.SmallImageList%2A> または <xref:System.Windows.Forms.ListView.LargeImageList%2A> プロパティです。  
  
> [!NOTE]
>  小規模および大規模のアイコンのビューの複数のイメージ リストを使用している場合、 <xref:System.Windows.Forms.ListView> コントロールを配置して小規模および大規模なバージョンを同じイメージのインデックスを各イメージ リスト内の場所。 ビューを切り替えるときに、1 つのリスト内のイメージのインデックスの場所を使用して、指定されたキーの値に関係なく、他の一覧で、イメージを見つけます。  
  
 ほとんどのプロパティで、 <xref:System.Windows.Forms.ListView> コントロールに影響を与えるさまざまなビューの動作またはが表示されます。 ときに、アイテムのビューに影響を与えるいくつかのプロパティは便利なだけ、 <xref:System.Windows.Forms.ListView.View%2A> プロパティがすべてのビューでは特定の値に設定します。 などのプロパティなど <xref:System.Windows.Forms.ListView.GridLines%2A> と <xref:System.Windows.Forms.ListView.FullRowSelect%2A> が役立つ場合に、 <xref:System.Windows.Forms.ListView.View%2A> にプロパティが設定されている <xref:System.Windows.Forms.View.Details?displayProperty=fullName>, 、中に、 <xref:System.Windows.Forms.ListView.MultiSelect%2A> と <xref:System.Windows.Forms.ListView.CheckBoxes%2A> プロパティは、すべてのビューで役立ちます。  
  
 次の表にはいくつかの <xref:System.Windows.Forms.ListView> メンバーおよびがで有効であるビューです。  
  
|ListView のメンバー|表示|  
|--------------------|--------|  
|<xref:System.Windows.Forms.ListView.Alignment%2A> プロパティ|<xref:System.Windows.Forms.View.SmallIcon> または <xref:System.Windows.Forms.View.LargeIcon>|  
|<xref:System.Windows.Forms.ListView.AutoArrange%2A> プロパティ|<xref:System.Windows.Forms.View.SmallIcon> または <xref:System.Windows.Forms.View.LargeIcon>|  
|<xref:System.Windows.Forms.ListView.AutoResizeColumn%2A> メソッド|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.CheckBoxes%2A>|以外のすべてのビュー <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.Columns%2A> プロパティ|<xref:System.Windows.Forms.View.Details> または <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.DrawSubItem> イベント|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.FindItemWithText%2A> メソッド|<xref:System.Windows.Forms.View.Details>、<xref:System.Windows.Forms.View.List>、または <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.FindNearestItem%2A> メソッド|<xref:System.Windows.Forms.View.SmallIcon> または <xref:System.Windows.Forms.View.LargeIcon>|  
|<xref:System.Windows.Forms.ListView.GetItemAt%2A> メソッド|<xref:System.Windows.Forms.View.Details> または <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.Groups%2A> プロパティ|以外のすべてのビュー <xref:System.Windows.Forms.View.List>|  
|<xref:System.Windows.Forms.ListView.HeaderStyle%2A> プロパティ|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.InsertionMark%2A> プロパティ|<xref:System.Windows.Forms.View.LargeIcon>、<xref:System.Windows.Forms.View.SmallIcon>、または <xref:System.Windows.Forms.View.Tile>|  
  
 使用することができます、 <xref:System.Windows.Forms.ListView.View%2A> プロパティをそのビューのメリットを利用する特定のビューをロックしたり、アプリケーション内のデータの異なったビューを提供します。 たとえば、 <xref:System.Windows.Forms.ListView.View%2A> プロパティが多くの場合に設定されている <xref:System.Windows.Forms.View.Details?displayProperty=fullName> 詳細ビューにより、多数の他のビューでは使用できないオプションを表示することができます。  
  
> [!NOTE]
>  場合、 <xref:System.Windows.Forms.ListView> コントロールには、指定された任意の列ヘッダーはありません。 設定すると、 <xref:System.Windows.Forms.ListView.View%2A> プロパティを <xref:System.Windows.Forms.View.Details?displayProperty=fullName>, 、 <xref:System.Windows.Forms.ListView> コントロールはすべての項目が表示されません。 場合、 <xref:System.Windows.Forms.ListView> コントロールには、指定された任意の列ヘッダーはありません。 設定すると、 <xref:System.Windows.Forms.ListView.View%2A> プロパティを <xref:System.Windows.Forms.View.Tile?displayProperty=fullName>, 、 <xref:System.Windows.Forms.ListView> コントロールはすべてのサブ項目が表示されません。  
  
 タイル ビューには、右側の左側とテキストの情報を各項目に大きなアイコンが表示されます。 テキストの情報は、後にサブ項目を項目のラベルで構成されます。 既定では、最初のサブ項目のみが表示されます、項目のラベルに対応します。 追加表示するにはサブ項目を追加する必要があります <xref:System.Windows.Forms.ColumnHeader> オブジェクトを <xref:System.Windows.Forms.ListView.Columns%2A> コレクションです。 タイルの各サブ項目は、列ヘッダーに対応します。 サブ項目をどのが表示され、その表示順序を制御するに設定する必要があります、 <xref:System.Windows.Forms.ListViewItem.ListViewSubItem.Name%2A?displayProperty=fullName> 各項目のプロパティと <xref:System.Windows.Forms.ColumnHeader.Name%2A?displayProperty=fullName> 各ヘッダーのプロパティです。 ことができますし、追加、削除、およびヘッダーを再配置、 <xref:System.Windows.Forms.ListView.Columns%2A> 、目的の結果を実現するために収集します。  
  
 タイル ビューでタイルのサイズを制御する設定、 <xref:System.Windows.Forms.ListView.TileSize%2A> プロパティです。 これは、サブ項目のテキストが長すぎて単一の行には、行の折り返しを防ぐに便利です。  
  
 並べて表示ビューの例は、次を参照してください。、 <xref:System.Windows.Forms.ListView.TileSize%2A> プロパティです。  
  
> [!NOTE]
>  詳細ビューには、列は表示のみ、詳細ビューまたは並べて表示ビューでは列ヘッダーのないサブ項目は表示されません。  
  
 並べて表示ビューは Windows XP および Windows Server 2003 でのみ使用できますが、アプリケーションを呼び出すと、 <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=fullName> メソッドです。 旧バージョンのオペレーティング システムでは、並べて表示ビューに関するコードがすべて無効になり、<xref:System.Windows.Forms.ListView> コントロールは大きなアイコンのビューで表示されます。 その結果、並べて表示ビューに依存するすべてのコードが正しく動作しない可能性があります。  
  
 並べて表示ビューは、使用できるかどうかを決定するコードを追加してが利用できない場合は、代替機能を提供可能性があります。 たとえば、オーナー描画の外観をカスタマイズするを使用する <xref:System.Windows.Forms.ListView> 並べて表示ビュー内のアイテムを並べて表示ビューをサポートしないオペレーティング システムを実行するときに、大きいアイコン ビューに適切な描画コードを使用する可能性があります。  
  
 並べて表示ビュー機能は、オペレーティング システムのテーマの機能を提供する、同じライブラリによって提供されます。 このライブラリの可用性を確認するには、呼び出し、 <xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=fullName> メソッドのオーバー ロードは、パス、 <xref:System.Windows.Forms.OSFeature.Themes?displayProperty=fullName> 値。  
  
   
  
## 例  
 次のコード例を作成、 <xref:System.Windows.Forms.ListView> の 3 つのコントロール <xref:System.Windows.Forms.ListViewItem> 指定されたオブジェクトと 3 つ <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> オブジェクトの各項目に指定します。 この例でも作成 <xref:System.Windows.Forms.ColumnHeader> 詳細ビューにサブ項目を表示するオブジェクト。 2 つ <xref:System.Windows.Forms.ImageList> にイメージを用意するコード例でも作成されるオブジェクト、 <xref:System.Windows.Forms.ListViewItem> オブジェクトです。 これら <xref:System.Windows.Forms.ImageList> にオブジェクトを追加、 <xref:System.Windows.Forms.ListView.LargeImageList%2A> と <xref:System.Windows.Forms.ListView.SmallImageList%2A> プロパティです。 この例を作成するのには、次のプロパティを使用して、 <xref:System.Windows.Forms.ListView> コントロールです。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 この例では、コードが追加されたことが必要です、 <xref:System.Windows.Forms.Form> コンス トラクターまたは、フォーム上の別の方法の例で作成したメソッドを呼び出します。 また、例ではイメージがという名前が必要です `MySmallImage1`, 、`MySmallImage2`, 、`MyLargeImage1`, 、および `MyLargeImage2` C: ドライブのルート ディレクトリにあります。  
  
 [!code-cpp[ListViewExample\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定された値は、のいずれかではありません、 <see cref="T:System.Windows.Forms.View" /> 値。</exception>
        <altmember cref="T:System.Windows.Forms.View" />
        <altmember cref="P:System.Windows.Forms.ListView.TileSize" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="VirtualItemsSelectionRangeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler VirtualItemsSelectionRangeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler VirtualItemsSelectionRangeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに、 <see cref="T:System.Windows.Forms.ListView" /> が仮想モードと、選択で範囲の項目の状態が変更されました。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Windows.Forms.ListView> 仮想モードではない、 <xref:System.Windows.Forms.ListView.ItemSelectionChanged> イベントが発生します。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.ListView> という `ListView1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#482](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#482)]
 [!code-vb[System.Windows.Forms.EventExamples\#482](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#482)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.ItemSelectionChanged" />
      </Docs>
    </Member>
    <Member MemberName="VirtualListSize">
      <MemberSignature Language="C#" Value="public int VirtualListSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VirtualListSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.VirtualListSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定の数 <see cref="T:System.Windows.Forms.ListViewItem" /> 仮想モードの場合にリストに含まれるオブジェクト。</summary>
        <value>数 <see cref="T:System.Windows.Forms.ListViewItem" /> に含まれるオブジェクト、 <see cref="T:System.Windows.Forms.ListView" /> 仮想モードの場合にします。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 取得または設定、 <xref:System.Windows.Forms.ListView.VirtualListSize%2A> プロパティと <xref:System.Windows.Forms.ListView.VirtualMode%2A> に設定 `false` 効果はありません、 <xref:System.Windows.Forms.ListView>です。  
  
 場合 <xref:System.Windows.Forms.ListView.VirtualMode%2A> に設定されている `true`, 、および <xref:System.Windows.Forms.ListView.VirtualListSize%2A> プロパティが 0 より大きい、行う必要があります、 <xref:System.Windows.Forms.ListView.RetrieveVirtualItem> イベントの有効なを提供する <xref:System.Windows.Forms.ListViewItem>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Windows.Forms.ListView.VirtualListSize" /> 0 より小さい値に設定されます。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.ListView.VirtualMode" /> 設定されている <see langword="true" />, 、<see cref="P:System.Windows.Forms.ListView.VirtualListSize" /> は 0 を超えると <see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem" /> が処理されません。</exception>
        <altmember cref="P:System.Windows.Forms.ListView.VirtualMode" />
      </Docs>
    </Member>
    <Member MemberName="VirtualMode">
      <MemberSignature Language="C#" Value="public bool VirtualMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool VirtualMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.VirtualMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ListView" /> コントロールに対して独自のデータ管理操作を指定したかどうかを示す値を取得または設定します。</summary>
        <value>
          <see langword="true" /> 場合 <see cref="T:System.Windows.Forms.ListView" /> 独自のデータ管理操作を使用してそれ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 設定、 <xref:System.Windows.Forms.ListView.VirtualMode%2A> プロパティを `true` 配置、 <xref:System.Windows.Forms.ListView> 仮想モードにします。 仮想モードの場合、通常 <xref:System.Windows.Forms.ListView.Items%2A> コレクションは使用されません。 代わりに、 <xref:System.Windows.Forms.ListViewItem> としてオブジェクトを動的に作成された、 <xref:System.Windows.Forms.ListView> 必要があります。  
  
 仮想モードは、さまざまな状況で役立ちます。 場合、 <xref:System.Windows.Forms.ListView> 既にメモリに非常に大きいコレクションからオブジェクトを作成する必要がありますを作成する、 <xref:System.Windows.Forms.ListViewItem> オブジェクトの各エントリには無駄にすることができます。 仮想モードでは、必要な項目のみが作成されます。 それ以外の場合の値で、 <xref:System.Windows.Forms.ListViewItem> オブジェクトの多くの場合、再計算が必要になるし、コレクション全体に関しては、パフォーマンスが著しく悪化します。 仮想モードでは、必要な項目のみが計算されます。  
  
 仮想モードを使用するのには、処理、 <xref:System.Windows.Forms.ListView.RetrieveVirtualItem> たびに発生するイベント、 <xref:System.Windows.Forms.ListView> 、項目が必要です。 このイベント ハンドラーを作成する必要があります、 <xref:System.Windows.Forms.ListViewItem> 指定したインデックスに属しているオブジェクト。 さらに、 <xref:System.Windows.Forms.ListView.VirtualListSize%2A> プロパティは、仮想一覧のサイズに設定する必要があります。  
  
 処理、 <xref:System.Windows.Forms.ListView.SearchForVirtualItem> イベントにより、仮想モードで検索します。 このイベントが処理されない場合、 <xref:System.Windows.Forms.ListView.FindItemWithText%2A> と <xref:System.Windows.Forms.ListView.FindNearestItem%2A> メソッドが返す `null`します。  
  
 処理できる、 <xref:System.Windows.Forms.ListView.CacheVirtualItems> のキャッシュを維持するためにイベント <xref:System.Windows.Forms.ListViewItem> オブジェクトです。 場合、計算または参照を作成する、 <xref:System.Windows.Forms.ListViewItem> オブジェクトがかかり、保守、キャッシュは、パフォーマンスを向上させることができます。  
  
 場合、 <xref:System.Windows.Forms.ListView.View%2A> にプロパティが設定されている <xref:System.Windows.Forms.View.Tile>, 、値に変更に自動的に <xref:System.Windows.Forms.View.LargeIcon> と <xref:System.Windows.Forms.ListView.VirtualMode%2A> に設定されている `true`します。  
  
 仮想モードで、 <xref:System.Windows.Forms.ListView.Items%2A> コレクションが無効にします。 結果にアクセスすることにしようとすると、 <xref:System.InvalidOperationException>です。 場合も同様です、 <xref:System.Windows.Forms.ListView.CheckedItems%2A> コレクションおよび <xref:System.Windows.Forms.ListView.SelectedItems%2A> コレクションです。 選択されているか、チェックされた項目を取得する場合は、使用、 <xref:System.Windows.Forms.ListView.SelectedIndices%2A> と <xref:System.Windows.Forms.ListView.CheckedIndices%2A> コレクション代わりにします。  
  
   
  
## 例  
 この例で、単純な <xref:System.Windows.Forms.ListView> 10, 000 正方形で構成されます。 検索を処理し、パフォーマンス向上のため、キャッシュを使用します。  
  
 [!code-csharp[System.Windows.Forms.ListView.VirtualMode\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/cs/VirtualMode.cs#1)]
 [!code-vb[System.Windows.Forms.ListView.VirtualMode\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/vb/VirtualMode.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.ListView.VirtualMode" /> 設定されている <see langword="true" /> し、次の条件の 1 つ存在します。  
  
-   <see cref="P:System.Windows.Forms.ListView.VirtualListSize" /> 0 より大きいと <see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem" /> は与えられません。  
  
     または  
  
-   <see cref="P:System.Windows.Forms.ListView.Items" />, 、<see cref="P:System.Windows.Forms.ListView.CheckedItems" />, 、または <see cref="P:System.Windows.Forms.ListView.SelectedItems" /> 項目が含まれています。  
  
     または  
  
-   編集が加えられる <see cref="P:System.Windows.Forms.ListView.Items" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.WndProc(System.Windows.Forms.Message@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">処理対象の Windows <see cref="T:System.Windows.Forms.Message" />。</param>
        <summary>上書き <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" />します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetItemRect">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>コントロール内の項目の外接する四角形を取得します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ArrangeIcons">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>コントロール内の項目がアイコンとして表示されるときに、それらの項目を配置します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="FindItemWithText">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>最初の検索 <see cref="T:System.Windows.Forms.ListViewItem" /> で始まる指定されたテキスト値。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="HitTest">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した x 座標と y 座標の項目情報を提示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="FindNearestItem">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した方向に検索、特定のポイントから次の項目を検索します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>