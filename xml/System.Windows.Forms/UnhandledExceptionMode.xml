<Type Name="UnhandledExceptionMode" FullName="System.Windows.Forms.UnhandledExceptionMode">
  <TypeSignature Language="C#" Value="public enum UnhandledExceptionMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed UnhandledExceptionMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.UnhandledExceptionMode" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Windows フォーム アプリケーションが未処理の例外を送信する場所を定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 この列挙体を使って <xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A>します。  
  
> [!NOTE]
>  .NET Framework version 2.0 では、共通言語ランタイムの動作は、未処理の例外のコール スタック上方向へ伝達を許可するように変更します。 アプリケーション構成ファイルでは、この動作を無効にすることができます。 詳細については、「[Exceptions in Managed Threads](http://msdn.microsoft.com/ja-jp/11294769-2e89-43cb-890e-ad4ad79cfbee)」を参照してください。  
  
   
  
## 例  
 次のコード例では、Windows フォーム スレッドと他のスレッドで発生したエラーの発生した両方のエラーのイベント ハンドラーを設定します。 設定 <xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A> すべてのエラーは、アプリケーションのユーザー構成ファイルの設定に関係なく、アプリケーションで処理されるようにします。 使用して、 <xref:System.Windows.Forms.Application.ThreadException> 、以前のイベントと <xref:System.AppDomain.UnhandledException> 後者のイベントです。<xref:System.AppDomain.UnhandledException> アプリケーションを防ぐことはできませんが終了するには、例では、単にエラーを記録終了する前に、システム イベント ログにします。  
  
 このサンプルは、2 つが定義済みであると想定しています。 <xref:System.Windows.Forms.Button> コントロール、 `button1` と `button2`, の、 <xref:System.Windows.Forms.Form> クラスです。  
  
 [!code-cpp[Classic Application.ThreadException Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.ThreadException Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.ThreadException Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.ThreadException Example/CS/source.cs#1)]
 [!code-vb[Classic Application.ThreadException Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.ThreadException Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Automatic">
      <MemberSignature Language="C#" Value="Automatic" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.UnhandledExceptionMode Automatic = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.UnhandledExceptionMode.Automatic" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.UnhandledExceptionMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>すべての例外のルーティング、 <see cref="E:System.Windows.Forms.Application.ThreadException" /> ハンドラー、アプリケーションの構成ファイルが別途指定されない限りです。</summary>
      </Docs>
    </Member>
    <Member MemberName="CatchException">
      <MemberSignature Language="C#" Value="CatchException" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.UnhandledExceptionMode CatchException = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.UnhandledExceptionMode.CatchException" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.UnhandledExceptionMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>常に例外をルーティング、 <see cref="E:System.Windows.Forms.Application.ThreadException" /> ハンドラー。 アプリケーション構成ファイルを無視します。</summary>
      </Docs>
    </Member>
    <Member MemberName="ThrowException">
      <MemberSignature Language="C#" Value="ThrowException" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.UnhandledExceptionMode ThrowException = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.UnhandledExceptionMode.ThrowException" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.UnhandledExceptionMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>例外をルーティングできないように、 <see cref="E:System.Windows.Forms.Application.ThreadException" /> ハンドラー。 アプリケーション構成ファイルを無視します。</summary>
      </Docs>
    </Member>
  </Members>
</Type>