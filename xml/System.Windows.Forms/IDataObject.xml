<Type Name="IDataObject" FullName="System.Windows.Forms.IDataObject">
  <TypeSignature Language="C#" Value="public interface IDataObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.IDataObject" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>データを転送するための形式に依存しないメカニズムを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 `IDataObject` インターフェイスを使用して、 <xref:System.Windows.Forms.Clipboard> クラスおよびドラッグ アンド ドロップの操作です。  
  
 クラスで実装された場合、 <xref:System.Windows.Forms.IDataObject> メソッド、クラスのインスタンスで複数の形式でデータを格納するユーザーを使用します。 複数の形式でデータを格納するには、形式の要件が分からないありますが、対象アプリケーションが格納されているデータを取得できる可能性が高くなります。 インスタンスにデータを格納する <xref:System.Windows.Forms.IDataObject>, を呼び出す、 <xref:System.Windows.Forms.IDataObject.SetData%2A> メソッドでデータ形式を指定して、 `format` パラメーター。 設定、 `autoConvert` パラメーターを `false` 格納されているデータの取得時に別の形式に変換しないかどうか。 呼び出す <xref:System.Windows.Forms.IDataObject.SetData%2A> の 1 つのインスタンスで複数回 <xref:System.Windows.Forms.IDataObject> 1 つ以上の形式でデータを格納します。  
  
 保存されたデータを取得する、 <xref:System.Windows.Forms.IDataObject> を呼び出して、 <xref:System.Windows.Forms.IDataObject.GetData%2A> で書式設定方法と、データを指定する、 `format` パラメーター。 設定、 `autoConvert` パラメーターを `false` を指定した形式で格納されたデータのみを取得します。 格納されているデータを指定された形式に変換する次のように設定します。 `autoConvert` に `true`, 、または使用しない `autoConvert`します。  
  
 格納されたデータの形式を決定する、 <xref:System.Windows.Forms.IDataObject>, 、次を使用して <xref:System.Windows.Forms.IDataObject> メソッドです。  
  
-   呼び出す、 <xref:System.Windows.Forms.IDataObject.GetFormats%2A> データは、使用するすべての形式の配列を取得します。 設定、 `autoConvert` パラメーターを `false` データが格納されている形式のみを取得します。 データの使用可能なすべての形式を取得するには、次のように設定します。 `autoConvert` に `true`, 、またはこのパラメーターを使用しないでください。  
  
-   呼び出す、 <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> メソッドが格納されているデータが特定の形式で使用できるかどうかを確認します。 指定した形式に変換する格納されているデータしたくない場合は、設定、 `autoConvert` パラメーターを `false`します。  
  
 参照してください、 <xref:System.Windows.Forms.DataObject> このインターフェイスの実装のクラスです。 参照してください、 <xref:System.Windows.Forms.DataFormats> 、定義済みのクラス <xref:System.Windows.Forms.Clipboard> データ形式です。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.DataObject" />
    <altmember cref="T:System.Windows.Forms.DataFormats" />
  </Docs>
  <Members>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">取得するデータの形式。 参照してください <see cref="T:System.Windows.Forms.DataFormats" /> 定義済みの形式です。</param>
        <summary>指定したデータ形式に関連付けられているデータを取得します。</summary>
        <returns>指定した形式に関連付けられたデータまたは <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、指定した形式でデータを見つけることはできません、データを形式に変換しようとします。 このメソッドが戻るかどうかは、指定した形式にデータを変換できない、 `null`です。  
  
 データが、関連付けられているか、形式に変換できるかを確認するのには、呼び出す <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> 呼び出す前に <xref:System.Windows.Forms.IDataObject.GetData%2A>します。 呼び出す <xref:System.Windows.Forms.IDataObject.GetFormats%2A> のこのインスタンスに格納されたデータの有効な形式の一覧です。  
  
> [!NOTE]
>  データは、格納されている変換が許可されている場合、要求された形式が格納されている形式と互換性のある場合、別の形式に変換できます。 テキストに変換できる Unicode として格納されているデータなどです。  
  
 このメソッドの実装は、次を参照してください。 <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=fullName>します。  
  
   
  
## 例  
 この例では、 <xref:System.Windows.Forms.DataObject> クラスを実装する `IDataObject,` の使用をデモ、 `GetData` メソッドです。 格納されているデータを取得するメソッドが使用される `myDataObject`, 、関連付けられている、 `Text` 形式です。 この例では、既に作成している、 <xref:System.Windows.Forms.Form> という名前 `Form1` と <xref:System.Windows.Forms.TextBox> という `textBox1`します。  
  
 [!code-cpp[GetData1\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData1/CPP/getdata1.cpp#1)]
 [!code-csharp[GetData1\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData1/CS/getdata1.cs#1)]
 [!code-vb[GetData1\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData1/VB/getdata1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format">A <see cref="T:System.Type" /> 取得するデータの形式を表します。 参照してください <see cref="T:System.Windows.Forms.DataFormats" /> 定義済みの形式です。</param>
        <summary>指定されたクラス型形式に関連付けられているデータを取得します。</summary>
        <returns>指定した形式に関連付けられたデータまたは <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、指定した形式でデータを見つけることはできません、データを形式に変換しようとします。 このメソッドが戻るかどうかは、指定した形式にデータを変換できない、 `null`です。  
  
 データが、関連付けられているか、形式に変換できるかを確認するのには、呼び出す <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> 呼び出す前に <xref:System.Windows.Forms.IDataObject.GetData%2A>します。 呼び出す <xref:System.Windows.Forms.IDataObject.GetFormats%2A> のこのインスタンスに格納されたデータの有効な形式の一覧です。  
  
> [!NOTE]
>  データは、格納されている変換が許可されている場合、要求された形式が格納されている形式と互換性のある場合、別の形式に変換できます。 テキストに変換できる Unicode として格納されているデータなどです。  
  
 このメソッドの実装は、次を参照してください。 <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=fullName>します。  
  
   
  
## 例  
 この例では、 <xref:System.Windows.Forms.DataObject> クラスを実装する `IDataObject`, の使用をデモ、 `GetData` メソッドです。 格納されているデータを取得するメソッドが使用される `myObject`, 、特定の種類に関連付けられている `myType`します。 取得したデータの種類は、メッセージ ボックスに表示されます。 この例では、既に作成している、 <xref:System.Windows.Forms.Form> という `Form1`します。  
  
 [!code-cpp[GetData2\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData2/CPP/getdata2.cpp#1)]
 [!code-csharp[GetData2\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData2/CS/getdata2.cs#1)]
 [!code-vb[GetData2\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData2/VB/getdata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">取得するデータの形式。 参照してください <see cref="T:System.Windows.Forms.DataFormats" /> 定義済みの形式です。</param>
        <param name="autoConvert">
          <see langword="true" /> 指定した形式にデータを変換するにはそれ以外の場合、 <see langword="false" />です。</param>
        <summary>ブール値を使用してデータを形式に変換するかどうかを決定する、指定したデータ形式に関連付けられたデータを取得します。</summary>
        <returns>指定した形式に関連付けられたデータまたは <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 `autoConvert` パラメーターは `true` このメソッドでは、指定した形式でデータが見つからないと、データを形式に変換しようとします。 データは、指定した形式に変換できない場合、またはデータに保存された場合、 `autoConvert` パラメーターを設定する `false`, 、このメソッドが戻る `null`します。  
  
 場合、 `autoConvert` パラメーターは `false`, 、このメソッドは、指定した形式でデータを返すまたは `null` 形式でデータが見つからない場合。  
  
 データが、関連付けられているか、形式に変換できるかを確認するのには、呼び出す <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> 呼び出す前に <xref:System.Windows.Forms.IDataObject.GetData%2A>します。 呼び出す <xref:System.Windows.Forms.IDataObject.GetFormats%2A> のこのインスタンスに格納されたデータの有効な形式の一覧です。  
  
> [!NOTE]
>  データは、格納されている変換が許可されている場合、要求された形式が格納されている形式と互換性のある場合、別の形式に変換できます。 テキストに変換できる Unicode として格納されているデータなどです。  
  
 このメソッドの実装は、次を参照してください。 <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=fullName>します。  
  
   
  
## 例  
 この例では、 <xref:System.Windows.Forms.DataObject> クラスを実装する `IDataObject`, の使用をデモ、 `GetData` メソッドです。 格納されたデータを取得、 `DataObject`, を使用して、 `autoConvert` データ形式を変換するかどうかを指定するパラメーターです。 まず、 `myDataObject` はテキスト データで作成します。 次の例は、データを取得するには、2 回試みます。 最初の評価版にという文字列とセットの形式を指定して、 `autoConvert` パラメーターを `false`します。 この評価版は失敗し、結果が"Message 1"というラベルの付いたメッセージ ボックスに表示されます。 使用して同じデータを取得する例では、2 つ目の評価版に、 `autoConvert` パラメーターを設定する `true`です。 この評価版が成功し、結果が"Message 2"というラベルの付いたメッセージ ボックスに表示されます。 この例では作成済みである、 <xref:System.Windows.Forms.Form> という `Form1`します。  
  
 [!code-cpp[GetData3\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData3/CPP/getdata3.cpp#1)]
 [!code-csharp[GetData3\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData3/CS/getdata3.cs#1)]
 [!code-vb[GetData3\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData3/VB/getdata3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">確認対象の形式です。 参照してください <see cref="T:System.Windows.Forms.DataFormats" /> 定義済みの形式です。</param>
        <summary>このインスタンスに格納されたデータが、関連付けられているか、指定した形式に変換できるかどうかが決まります。</summary>
        <returns>
          <see langword="true" /> このインスタンスが、関連付けられていること、または指定した形式に変換できますでデータが格納されている場合それ以外の場合 <see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これで、形式が存在するかどうかを調べるには、このメソッドを呼び出す <xref:System.Windows.Forms.DataObject> 呼び出す前に <xref:System.Windows.Forms.IDataObject.GetData%2A>します。 呼び出す <xref:System.Windows.Forms.IDataObject.GetFormats%2A> のこのインスタンスで使用可能な形式です。  
  
> [!NOTE]
>  データは、格納されている変換が許可されている場合、要求された形式が格納されている形式と互換性のある場合、別の形式に変換できます。 テキストに変換できる Unicode として格納されているデータなどです。  
  
 このメソッドの実装は、次を参照してください。 <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=fullName>します。  
  
   
  
## 例  
 この例では、 <xref:System.Windows.Forms.DataObject> クラスを実装する `IDataObject`, の使用をデモ、 `GetDataPresent` メソッドです。 まず、文字列を使用してデータ オブジェクトを作成し、 `Text` 形式です。 次のデータにあることを確認して、 `Text` 書式を設定し、メッセージ ボックスに、結果を表示します。 この例では作成済みである、 <xref:System.Windows.Forms.Form> という `Form1`します。  
  
 [!code-cpp[GetDataPresent1\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent1/CPP/getdatapresent1.cpp#1)]
 [!code-csharp[GetDataPresent1\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent1/CS/getdatapresent1.cs#1)]
 [!code-vb[GetDataPresent1\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent1/VB/getdatapresent1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format">A <see cref="T:System.Type" /> 検査する対象の形式を表します。 参照してください <see cref="T:System.Windows.Forms.DataFormats" /> 定義済みの形式です。</param>
        <summary>このインスタンスに格納されたデータが、関連付けられているか、指定した形式に変換できるかどうかが決まります。</summary>
        <returns>
          <see langword="true" /> このインスタンスが、関連付けられていること、または指定した形式に変換できますでデータが格納されている場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これで、形式が存在するかどうかを調べるには、このメソッドを呼び出す <xref:System.Windows.Forms.DataObject> 呼び出す前に <xref:System.Windows.Forms.IDataObject.GetData%2A>します。 呼び出す <xref:System.Windows.Forms.IDataObject.GetFormats%2A> のこのインスタンスで使用可能な形式です。  
  
> [!NOTE]
>  データは、格納されている変換が許可されている場合、要求された形式が格納されている形式と互換性のある場合、別の形式に変換できます。 テキストに変換できる Unicode として格納されているデータなどです。  
  
 このメソッドの実装は、次を参照してください。 <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=fullName>します。  
  
   
  
## 例  
 この例では、 <xref:System.Windows.Forms.DataObject> クラスを実装する `IDataObject`, の使用をデモ、 `GetDataPresent` メソッドです。 最初に、コンポーネントを作成 \(`myComponent`\) し、データ オブジェクトの格納 \(`myDataObject`\)。 指定されたデータが格納されているかどうかを確認し、 `myDataObject`です。 テストと評価された場合 `true`, 、メッセージ ボックスに、結果を表示し、テキスト ボックスに、データ型を表示します。 この例では、既に作成したこと、 <xref:System.Windows.Forms.Form> という名前 `Form1` と <xref:System.Windows.Forms.TextBox> という `textBox1`します。  
  
 [!code-cpp[GetDataPresent2\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent2/CPP/getdatapresent2.cpp#1)]
 [!code-csharp[GetDataPresent2\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent2/CS/getdatapresent2.cs#1)]
 [!code-vb[GetDataPresent2\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent2/VB/getdatapresent2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">確認対象の形式です。 参照してください <see cref="T:System.Windows.Forms.DataFormats" /> 定義済みの形式です。</param>
        <param name="autoConvert">
          <see langword="true" /> 指定した形式に変換できるデータがこのインスタンスに格納するかどうかを決定するには <see langword="false" /> データが、指定した形式かどうかを確認します。</param>
        <summary>このインスタンスに格納されたデータがデータを形式に変換するかどうかを判断するブール値を使用して、指定した形式に関連付けられているかどうかを判断します。</summary>
        <returns>
          <see langword="true" /> データには、または、指定した形式に変換できる場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これで、形式が存在するかどうかを調べるには、このメソッドを呼び出す <xref:System.Windows.Forms.DataObject> 呼び出す前に <xref:System.Windows.Forms.IDataObject.GetData%2A>します。 呼び出す <xref:System.Windows.Forms.IDataObject.GetFormats%2A> のこのインスタンスで使用可能な形式です。  
  
 このメソッドが戻る `true` とき。  
  
-   `autoConvert` パラメーターは `true` 、データが適切な形式に変換できる形式とします。  
  
-   `autoConvert` パラメーターは `false` し、データが適切な形式でします。  
  
 このメソッドが戻る `false` とき。  
  
-   `autoConvert` パラメーターは `true` し、このメソッドは、指定した形式でデータを見つけることはできませんと指定した形式に変換できないデータまたはデータに保存された `autoConvert` 設定 `false`します。  
  
-   `autoConvert` パラメーターは `false`, 、および指定した形式では、このインスタンスにデータが存在しません。  
  
> [!NOTE]
>  データは、格納されている変換が許可されている場合、要求された形式が格納されている形式と互換性のある場合、別の形式に変換できます。 テキストに変換できる Unicode として格納されているデータなどです。  
  
 このメソッドの実装は、次を参照してください。 <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=fullName>します。  
  
   
  
## 例  
 この例では、 <xref:System.Windows.Forms.DataObject> クラスを実装する `IDataObject`, の使用をデモ、 `GetDataPresent` メソッドです。 最初に、データ オブジェクトを作成 \(`myDataObject`\) 文字列を使用して、 `Text` 形式です。 オブジェクトと関連付けられたデータを照会し、 `Text` 形式で、 `autoConvert` パラメーターを設定する `false`です。 この評価版は失敗し、結果が"Message 1"というラベルの付いたメッセージ ボックスに表示されます。 2 つ目の試行で設定、 `autoConvert` パラメーターを `true`します。 この評価版が成功し、結果が"Message 2"というラベルの付いたメッセージ ボックスに表示されます。 この例では作成済みである、 <xref:System.Windows.Forms.Form> という `Form1`します。  
  
 [!code-cpp[GetDataPresent3\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent3/CPP/getdatapresent3.cpp#1)]
 [!code-csharp[GetDataPresent3\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent3/CS/getdatapresent3.cs#1)]
 [!code-vb[GetDataPresent3\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent3/VB/getdatapresent3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスに格納されたデータに関連付けられているかに変換できるすべての形式の一覧を返します。</summary>
        <returns>このオブジェクトに格納されたデータでサポートされているすべての形式の一覧を表す名前の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す前に、サポートされているデータ形式を取得するには、このメソッドを呼び出して、 <xref:System.Windows.Forms.IDataObject.GetData%2A> メソッドです。 参照してください、 <xref:System.Windows.Forms.DataFormats> クラスの定義済みの形式です。  
  
> [!NOTE]
>  データは、格納されている変換が許可されている場合、要求された形式が格納されている形式と互換性のある場合、別の形式に変換できます。 テキストに変換できる Unicode として格納されているデータなどです。  
  
 このメソッドの実装は、次を参照してください。 <xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=fullName>します。  
  
   
  
## 例  
 この例では、 <xref:System.Windows.Forms.DataObject> クラスを実装する `IDataObject`, の使用をデモ、 `GetFormats` メソッドです。 最初に、データ オブジェクトを作成 \(`myDataObject`\) 文字列を使用して、 `Text` 形式です。 すべてのデータ形式とデータ オブジェクト内のデータ変換形式を取得し、メッセージ ボックスに、結果のリストを表示します。 この例では、作成した、 <xref:System.Windows.Forms.Form> という `Form1`します。  
  
 [!code-cpp[GetFormats1\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats1/CPP/getformats1.cpp#1)]
 [!code-csharp[GetFormats1\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats1/CS/getformats1.cs#1)]
 [!code-vb[GetFormats1\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats1/VB/getformats1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats (bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats(bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="autoConvert">
          <see langword="true" /> すべての形式を取得するこのインスタンスに格納されるデータに関連付けられているまたは; を変換することができます。 <see langword="false" /> ネイティブ データ形式だけを取得します。</param>
        <summary>このインスタンスに格納されたデータに関連付けられているまたはできる形式に変換するかどうかをすべての形式に変換できるデータやネイティブ データのみを取得する形式を決定するブール値を使用してすべての形式の一覧を取得します。</summary>
        <returns>このオブジェクトに格納されたデータでサポートされているすべての形式の一覧を表す名前の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す前に、サポートされているデータ形式を取得するには、このメソッドを呼び出して、 <xref:System.Windows.Forms.IDataObject.GetData%2A> メソッドです。 参照してください、 <xref:System.Windows.Forms.DataFormats> クラスの定義済みの形式です。  
  
> [!NOTE]
>  データは、格納されている変換が許可されている場合、要求された形式が格納されている形式と互換性のある場合、別の形式に変換できます。 テキストに変換できる Unicode として格納されているデータなどです。  
  
 このメソッドの実装は、次を参照してください。 <xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=fullName>します。  
  
   
  
## 例  
 この例では、 <xref:System.Windows.Forms.DataObject> クラスを実装する `IDataObject`, の使用をデモ、 `GetFormats` メソッドです。 最初に、データ オブジェクトを作成 \(`myDataObject`\) 文字列を使用して、 `UnicodeText` 形式です。 2 つのクエリをデータに関連付けられている形式を取得することができます。 最初のクエリでは、設定、 `autoConvert` パラメーターを `false` : この場合は、データのネイティブ形式のみが返されます。 2 番目のクエリでは、設定、 `autoConvert` パラメーターを `true`, にデータを変換できる形式を含む、形式の一覧を取得できるように、します。 各ケースでは、メッセージ ボックスに、結果のリストが表示されます。 この例では、作成した、 <xref:System.Windows.Forms.Form> という `Form1`します。  
  
 [!code-cpp[GetFormats2\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats2/CPP/getformats2.cpp#1)]
 [!code-csharp[GetFormats2\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats2/CS/getformats2.cs#1)]
 [!code-vb[GetFormats2\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats2/VB/getformats2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">格納するデータ。</param>
        <summary>形式のデータのクラスを使用して、このインスタンスで指定されたデータを格納します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 形式は、データ クラスから派生します。  
  
 このメソッドを使用して格納されているデータは、取得されるときに互換性のある形式に変換できます。  
  
 このメソッドの実装は、次を参照してください。 <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=fullName>します。  
  
   
  
## 例  
 この例では、 <xref:System.Windows.Forms.DataObject> クラスを実装する `IDataObject`, の使用をデモ、 `SetData` メソッドです。 最初に、コンポーネントを作成 \(`myComponent`\) し、データ オブジェクトの格納 \(`myDataObject`\)。 指定されたデータがデータ オブジェクトに格納され、結果をメッセージ ボックスに表示するかどうかを確認します。 この例では作成済みである、 <xref:System.Windows.Forms.Form> という `Form1`します。  
  
 [!code-cpp[SetData1\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData1/CPP/setdata1.cpp#1)]
 [!code-csharp[SetData1\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData1/CS/setdata1.cs#1)]
 [!code-vb[SetData1\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData1/VB/setdata1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">データに関連付けられている形式。 参照してください <see cref="T:System.Windows.Forms.DataFormats" /> 定義済みの形式です。</param>
        <param name="data">格納するデータ。</param>
        <summary>指定されたデータとその関連する形式をこのインスタンスに格納します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 対象アプリケーションの形式を把握していない場合は、このメソッドを使用して複数の形式でデータを格納することができます。  
  
 このメソッドを使用して格納されているデータは、取得されるときに互換性のある形式に変換できます。  
  
 このメソッドの実装は、次を参照してください。 <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=fullName>します。  
  
   
  
## 例  
 この例では、 <xref:System.Windows.Forms.DataObject> クラスを実装する `IDataObject`, の使用をデモ、 `SetData` メソッドです。 最初に、データ オブジェクトを作成 \(`myDataObject`\) はオブジェクトに指定することで文字列を格納し、 `UnicodeText` 形式です。 指定されているオブジェクトに格納されるデータを取得し、 `Text` にデータが変換されるように書式設定、 `Text` 形式です。 結果は、メッセージ ボックスに表示されます。 この例では、作成した、 <xref:System.Windows.Forms.Form> という `Form1`します。  
  
 [!code-cpp[SetData2\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData2/CPP/setdata2.cpp#1)]
 [!code-csharp[SetData2\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData2/CS/setdata2.cs#1)]
 [!code-vb[SetData2\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData2/VB/setdata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (Type format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(class System.Type format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Type,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">A <see cref="T:System.Type" /> データに関連付けられている形式を表します。 参照してください <see cref="T:System.Windows.Forms.DataFormats" /> 定義済みの形式です。</param>
        <param name="data">格納するデータ。</param>
        <summary>このインスタンスに指定されたデータと関連付けられているクラス型を格納します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 対象アプリケーションの形式を把握していない場合は、このメソッドを使用して複数の形式でデータを格納することができます。  
  
 このメソッドを使用して格納されているデータは、取得されるときに互換性のある形式に変換できます。  
  
 このメソッドの実装は、次を参照してください。 <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=fullName>します。  
  
   
  
## 例  
 この例では、 <xref:System.Windows.Forms.DataObject> クラスを実装する `IDataObject`, の使用をデモ、 `SetData` メソッドです。 最初に、コンポーネントを作成 \(`myComponent`\) し、データ オブジェクトに格納 \(`myDataObject`\) を使用して、 `myType` データ形式を指定します。 指定した型のデータは、オブジェクトに格納され、結果をメッセージ ボックスに表示するかどうかを確認します。 この例では作成済みである、 <xref:System.Windows.Forms.Form> という `Form1`します。  
  
 [!code-cpp[SetData3\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData3/CPP/setdata3.cpp#1)]
 [!code-csharp[SetData3\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData3/CS/setdata3.cs#1)]
 [!code-vb[SetData3\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData3/VB/setdata3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, bool autoConvert, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, bool autoConvert, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">データに関連付けられている形式。 参照してください <see cref="T:System.Windows.Forms.DataFormats" /> 定義済みの形式です。</param>
        <param name="autoConvert">
          <see langword="true" /> 別の形式に変換されるデータを許可するにはそれ以外の場合、 <see langword="false" />です。</param>
        <param name="data">格納するデータ。</param>
        <summary>データを別の形式に変換できるかどうかを指定するブール値を使用して、このインスタンスで指定されたデータとその関連付けられている形式を格納します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 対象アプリケーションの形式を把握していない場合は、このメソッドを使用して複数の形式でデータを格納することができます。  
  
 このメソッドの実装は、次を参照してください。 <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=fullName>します。  
  
   
  
## 例  
 この例では、 <xref:System.Windows.Forms.DataObject> クラスを実装する `IDataObject`, の使用をデモ、 `SetData` メソッドです。 最初に、データ オブジェクトを作成 \(`myDataObject`\) を格納し、 `UnicodeText` 、文字列、 `autoConvert` パラメーターを設定する `false`です。 オブジェクトに格納されたデータに関連付けられている形式を取得し、メッセージ ボックスに結果を表示します。 データに関連付けられている唯一の形式は、 `UnicodeText` 形式です。 この例では、作成した、 <xref:System.Windows.Forms.Form> という `Form1`します。  
  
 [!code-cpp[SetData4\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData4/CPP/form1.cpp#1)]
 [!code-csharp[SetData4\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData4/CS/form1.cs#1)]
 [!code-vb[SetData4\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData4/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetData">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したデータ形式に関連付けられているデータを取得します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="SetData">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定されたデータとその関連する形式をこのインスタンスに格納します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetFormats">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このインスタンスに格納されたデータに関連付けられているかに変換できるすべての形式の一覧を返します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetDataPresent">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このインスタンスに格納されたデータが指定された形式に関連付けられているかどうかを判断します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>