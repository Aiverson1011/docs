<Type Name="HtmlWindow" FullName="System.Windows.Forms.HtmlWindow">
  <TypeSignature Language="C#" Value="public sealed class HtmlWindow" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HtmlWindow extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.HtmlWindow" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see cref="T:System.Windows.Forms.HtmlDocument" /> のインスタンスを 1 つ以上格納する論理的なウィンドウを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.HtmlWindow> Windows フォームや Win32 API でウィンドウの概念を混同しないようにします。ない `HWND` などの Windows リソースのインスタンスに直接対応する <xref:System.Windows.Forms.HtmlWindow>です。 代わりに、 <xref:System.Windows.Forms.HtmlWindow> ユーザーの画面で、およびメッセージとダイアログ ボックスを使用するユーザーと対話するメソッドにドキュメントの場所の概要を紹介します。<xref:System.Windows.Forms.HtmlWindow> Web ページのドキュメントおよびドキュメントの場所や Web ブラウザーの機能など、メタデータの論理コンテナーとして機能します。  
  
 Web ページから成る 1 つのドキュメントや `FRAMESET` 1 つ以上含む `FRAME` 要素、独自のドキュメントをホストします。 Web 開発者は、フレーム セットを使用して、論理的に関連するページ サイド バイ サイドで \(たとえば、ナビゲーション ページの横にあるコンテンツ ページ\) を示します。 ページは、1 つのドキュメントで構成されていますと、をを通じてアクセスできる、 <xref:System.Windows.Forms.HtmlWindow.Document%2A> プロパティの <xref:System.Windows.Forms.HtmlWindow>フレームのかどうかは、ページの使用、を通じて、該当するドキュメントへのアクセス、 <xref:System.Windows.Forms.HtmlWindow.Frames%2A> 1 つまたは複数から成るコレクション <xref:System.Windows.Forms.HtmlWindow> オブジェクトです。  
  
 ときに、ホスト、 <xref:System.Windows.Forms.WebBrowser> コントロール Windows フォーム アプリケーションなどの標準の Windows フォーム クラスを使用するユーザーとの対話を選択できます <xref:System.Windows.Forms.Form> または <xref:System.Windows.Forms.MessageBox>, でメソッドを使用することも <xref:System.Windows.Forms.HtmlWindow> この目的で定義されています。<xref:System.Windows.Forms.HtmlWindow.Alert%2A> メソッドでは、独自の文字列の簡単なダイアログ ボックスが表示されますと **\[ok\]** \] ボタンをクリックします。 <xref:System.Windows.Forms.HtmlWindow.Prompt%2A> カスタム テキストとテキスト入力フィールドの線のユーザーを表示します。 と <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> のカスタムのテキスト行にダイアログ ボックスを表示および **\[ok\]** と **キャンセル** ボタン。  
  
 使用する <xref:System.Windows.Forms.HtmlWindow> を新しいドキュメントを含む新しいウィンドウを開きます。<xref:System.Windows.Forms.HtmlWindow.Open%2A> 指定された URL を指定したウィンドウに読み込みます中に作成することが既に存在しない場合、 <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> 常に新しく作成されたウィンドウでその URL を開きます。  
  
   
  
## 例  
 次のコード例には、2 つのメソッドが含まれています。 1 つ目では、URL を開くという名前のウィンドウで `displayWindow`, 、表示されるステータス バーを作成します。 2 番目は、同じウィンドウで別の URL を開きますが、アドレス バーのみを表示することを指定します。 \[URL は、最初に開いたをウィンドウと表示されているコントロールのディメンションが依存していることに注意してください。 このコード例は、フォームが含まれている、 <xref:System.Windows.Forms.WebBrowser> という名前のコントロール `WebBrowser1`します。  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow\#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#13)]
 [!code-vb[System.Windows.Forms.HtmlWindow\#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#13)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Alert">
      <MemberSignature Language="C#" Value="public void Alert (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Alert(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Alert(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">メッセージ ボックスに表示する <see cref="T:System.String" />。</param>
        <summary>メッセージ ボックスを表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.MessageBox> クラスのより強力なバージョンには、 <xref:System.Windows.Forms.HtmlWindow.Alert%2A> メソッドです。  
  
 <xref:System.Windows.Forms.HtmlWindow.Alert%2A> Unicode テキスト入力値として、Internet Explorer スクリプトのプロンプトは表示されませんラテン語以外の言語のテキスト適切に Windows 95、Windows 98、Windows ME および Windows NT オペレーティング システムの制限によりします。 詳細については、次を参照してください。 [INFO: Internet Explorer Script Prompts and MBCS\/Unicode](http://support.microsoft.com/default.aspx?scid=kb;en-us;211147)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachEventHandler">
      <MemberSignature Language="C#" Value="public void AttachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.AttachEventHandler(System.String,System.EventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">処理するイベントの名前。</param>
        <param name="eventHandler">イベントを処理するマネージ コードへの参照。</param>
        <summary>指定した HTML DOM イベントのイベント ハンドラーを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 割り当てないでくださいイベント HTML ドキュメントやそのオブジェクトの 1 つに、ドキュメントの読み込みが完了するまでです。 最初のこのメソッドを呼び出す必要がありますが、 <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> のイベント、 <xref:System.Windows.Forms.WebBrowser> コントロールです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Close" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ウィンドウを閉じます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Use the <xref:System.Windows.Forms.HtmlWindow.IsClosed%2A> property to determine if the window is already closed. If the window is already closed, this method will have no effect.  
  
 When you create new windows using <xref:System.Windows.Forms.HtmlWindow.Open%2A> or <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, <xref:System.Windows.Forms.HtmlWindow.Close%2A> causes the HTML Document Object Model to open a new instance of Internet Explorer. If you do not call <xref:System.Windows.Forms.HtmlWindow.Close%2A> on all of the windows you have created, this instance of Internet Explorer will remain running even after your application closes.  
  
   
  
## 例  
 The following code example opens a window, and closes it if the user has not used it in the past five minutes. The code example was written under the assumption that your form has a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`, a <xref:System.Windows.Forms.Button> named `Button1`, and a <xref:System.Windows.Forms.Timer> class named `Timer1`. To run this example successfully, change the first argument supplied to <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> to a valid URL.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow\#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#9)]
 [!code-vb[System.Windows.Forms.HtmlWindow\#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Confirm">
      <MemberSignature Language="C#" Value="public bool Confirm (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Confirm(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Confirm(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">ユーザーに表示するテキスト。</param>
        <summary>yes\/no の応答を求めるメッセージとボタンを含むダイアログ ボックスを表示します。</summary>
        <returns>ユーザーが **\[はい\]** をクリックした場合は <see langword="true" />。ユーザーが **\[いいえ\]** をクリックしたか、ダイアログ ボックスを閉じた場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> モーダル ダイアログ ボックスが表示されます。ユーザーはこのダイアログ ボックスを閉じることがなく、基になる HTML ページにアクセスできません。  
  
 <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> Unicode テキスト入力値として、Internet Explorer スクリプトのプロンプトは表示されませんラテン語以外の言語のテキスト適切に Windows 95、Windows 98、Windows ME および Windows NT オペレーティング システムの制限によりします。 詳細については、次を参照してください。 [INFO: Internet Explorer Script Prompts and MBCS\/Unicode](http://support.microsoft.com/default.aspx?scid=kb;en-us;211147)します。  
  
   
  
## 例  
 次の HTML をコピーし、orderForm.htm という名前のフォームに保存します。  
  
 `<HTML>`  
  
 `<BODY>`  
  
 `<FORM name="NewOrderForm">`  
  
 `Select Part Type:`  
  
 `<SELECT name="PartType">`  
  
 `<OPTION>AZ-3700`  
  
 `<OPTION>AZ-3701`  
  
 `<OPTION>AZ-3702`  
  
 `<SELECT><br>`  
  
 `Quantity: <INPUT type="text" name="PartQty" size="2" maxsize="2"><br>`  
  
 `Building/Desk:`  
  
 `<INPUT type="text" name="PartBuilding" size="2" maxsize="2"> /`  
  
 `<INPUT type="text" name="PartDesk" size="2" maxsize="2"><p>`  
  
 `<INPUT type="submit" value="Transmit Order">`  
  
 `</FORM>`  
  
 `</BODY>`  
  
 `</HTML>`  
  
 次のコード例を表示、 <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> ダイアログ ボックスのユーザーが送信と `NewOrderForm`です。  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow\#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#10)]
 [!code-vb[System.Windows.Forms.HtmlWindow\#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DetachEventHandler">
      <MemberSignature Language="C#" Value="public void DetachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DetachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.DetachEventHandler(System.String,System.EventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">処理するイベントの名前。</param>
        <param name="eventHandler">イベントを処理するマネージ コードへの参照。</param>
        <summary>指定したイベント ハンドラーを削除します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Document">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlDocument Document { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlDocument Document" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Document" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlDocument</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ウィンドウに格納されている HTML ドキュメントを取得します。</summary>
        <value>ドキュメントが読み込まれている場合は、<see cref="T:System.Windows.Forms.HtmlDocument" /> の有効なインスタンス。 このウィンドウが <c>FRAMESET</c> を格納しているか、現在読み込まれているドキュメントがない場合は、<see langword="null" /> を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Typically, you will access the <xref:System.Windows.Forms.HtmlWindow.Document%2A> through the <xref:System.Windows.Forms.WebBrowser.Document%2A> property of the <xref:System.Windows.Forms.WebBrowser> control. Use this property when you need to access a document within a `FRAME` using the <xref:System.Windows.Forms.HtmlWindow.Frames%2A> collection.  
  
   
  
## 例  
 The following code example inspects each document within a page containing frames and creates a table of all of the outgoing hyperlinks from each page for future inspection.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#2)]
 [!code-vb[System.Windows.Forms.HtmlWindow\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DomWindow">
      <MemberSignature Language="C#" Value="public object DomWindow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DomWindow" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.DomWindow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このクラスによってラップされたアンマネージ インターフェイスを取得します。</summary>
        <value>
          <see langword="IHTMLWindow2" />、<see langword="IHTMLWindow3" />、<see langword="IHTMLWindow4 " /> のポインターのいずれかにキャスト可能なオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Use the underlying unmanaged interface pointers to the Document Object Model \(DOM\) to execute methods not exposed by <xref:System.Windows.Forms.HtmlWindow>.  
  
 You must add a referenced to the unmanaged MSHTML.dll in order to use <xref:System.Windows.Forms.HtmlWindow.DomWindow%2A>. For more information, see [Importing a Type Library as an Assembly](http://msdn.microsoft.com/ja-jp/d1898229-cd40-426e-a275-f3eb65fbc79f).  
  
   
  
## 例  
 The following code example obtains an `IHTMLWindow2` pointer from a document's window and displays a new document in a modal window.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#3)]
 [!code-vb[System.Windows.Forms.HtmlWindow\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">テストするオブジェクト。</param>
        <summary>指定したオブジェクトと現在のオブジェクトとを比較し、等しいかどうかをテストします。</summary>
        <returns>オブジェクトが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementErrorEventHandler Error;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementErrorEventHandler Error" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Error" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ウィンドウ内で実行されているスクリプトがランタイム エラーを検出すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 HTML ページには、JScript、またはページが読み込まれるときに実行するには、VBScript で記述された通常のスクリプト コードを含めることができます。<xref:System.Windows.Forms.HtmlWindow.Error> スクリプトが実行時エラーを検出するたびに発生します。 スクリプト コードは遅延バインディングであるため、オブジェクトに対する呼び出しがないことを意味まで解決実行時エラーが未定義のプロパティまたはメソッドの呼び出しに null オブジェクトの参照からのすべてを含めることができます。  
  
 設定することができます、 <xref:System.Windows.Forms.HtmlElementErrorEventArgs.Handled%2A> プロパティの <xref:System.Windows.Forms.HtmlElementErrorEventArgs> Internet Explorer でネイティブ エラー\] ダイアログ ボックスを表示するようにするために true を指定します。  
  
 イベント バブルとイベントの既定の操作をキャンセルの取り消しの違いについての詳細については、次を参照してください。 [About the DHTML Object Model](http://msdn.microsoft.com/library/ms533022.aspx)します。  
  
   
  
## 例  
 次のコード例では、HTML ページ上のスクリプト操作を実行した場合の結果が、ドキュメントで定義されていないオブジェクトにアクセスしようとするエラーをトラップします。 ページは前に完全に読み込む必要がありますが、 <xref:System.Windows.Forms.HtmlWindow.Error> イベント ハンドラーがアタッチされている、それ以外の場合の例は機能しません。  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow\#16](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#16)]
 [!code-vb[System.Windows.Forms.HtmlWindow\#16](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public void Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Focus" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のウィンドウにフォーカスを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 別のウィンドウには、前にフォーカスが保持されている場合 <xref:System.Windows.Forms.HtmlWindow.Focus%2A> が呼び出されると、そのウィンドウがフォーカスが失うされます。  
  
 ウィンドウ内で要素にまで、ウィンドウのフォーカスを呼び出す必要はありません <xref:System.Windows.Forms.HtmlWindow.Load> イベントが発生しました。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Frames">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindowCollection Frames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindowCollection Frames" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Frames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindowCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Web ページ内で定義されている各 <c>FRAME</c> 要素への参照を取得します。</summary>
        <value>ドキュメントの <c>FRAME</c> オブジェクトおよび <c>IFRAME</c> オブジェクトの <see cref="T:System.Windows.Forms.HtmlWindowCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A `FRAME` 一連のウィンドウ内で定義されているは、 `FRAMESET`です。`FRAME`使用すると、1 つのドキュメント内で複数のドキュメントをホストします。 各 `FRAME` 特定行と列の幅を処理するとして定義され、他の関連ページ上の位置は、 `FRAME`s で定義されている、 `FRAMESET`; の位置、 `FRAME` が固定されているユーザーもを使用しても、マウス カーソルを拡大または縮小、 `FRAME`です。`IFRAME` 、フレームに似ていますが、固定位置に固定する必要がありますが、します。  
  
 フレームは 1 つのインスタンスを含む <xref:System.Windows.Forms.HtmlWindow> 各 `FRAME` または `IFRAME` Web ページ内で定義します。  
  
   
  
## 例  
 次のコード例では、フレームを含むページ内の各ドキュメントを検査し、今後の調査には、各ページからの送信のハイパーリンクのすべてのテーブルを作成します。  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#2)]
 [!code-vb[System.Windows.Forms.HtmlWindow\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>特定の型のハッシュ関数として機能します。</summary>
        <returns>現在の <see cref="T:System.Windows.Forms.HtmlWindow" /> のハッシュ コード。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.GotFocus" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のウィンドウがユーザーの入力フォーカスを得ると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.HtmlWindow.GotFocus> 表示されます。  
  
-   最初のウィンドウで、 `FRAMESET` ときに、 `FRAMESET` が初めて読み込まれます。  
  
-   `FRAME` を最終がフォーカスを含むウィンドウ、 <xref:System.Windows.Forms.WebBrowser> コントロールが前面に移動します。  
  
-   A `FRAME` 、ユーザーがクリックされたが、ユーザーのクリックがウィンドウ内の要素にフォーカスを設定していない場合にのみです。  
  
 既定のアクションを取り消すことはできません、 <xref:System.Windows.Forms.HtmlWindow.GotFocus> イベント、またはバブルを防ぐことです。 イベント バブルとイベントの既定の操作をキャンセルの取り消しの違いについての詳細については、次を参照してください。 [About the DHTML Object Model](http://msdn.microsoft.com/library/ms533022.aspx)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.HtmlWindow.GotFocus> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.HtmlWindow> という `HtmlWindow1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.HtmlWindow.GotFocus> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#452](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#452)]
 [!code-vb[System.Windows.Forms.EventExamples\#452](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#452)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="History">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlHistory History { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlHistory History" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.History" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlHistory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーが最近表示した URL を格納するオブジェクトを取得します。</summary>
        <value>現在のウィンドウの <see cref="T:System.Windows.Forms.HtmlHistory" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.HtmlWindow.History%2A> 移動先と呼ばれますが、現在のウィンドウ内のすべての Url が含まれています、 *移動スタック*, 、それらのドキュメントに移動するためのメソッドを提供します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClosed">
      <MemberSignature Language="C#" Value="public bool IsClosed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClosed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.IsClosed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このウィンドウが開いているか閉じているかを示す値を取得します。</summary>
        <value>ウィンドウが画面上でまだ開いている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Windows.Forms.HtmlWindow> またはへの呼び出しを使用して、ユーザーが閉じられましたが、 <xref:System.Windows.Forms.HtmlWindow.Close%2A> 新しい URL に移動するか、ウィンドウのドキュメントにアクセスしようとしています。 メソッドが、エラーになります。 このプロパティを使用して、現在のウィンドウ オブジェクトのプロパティとメソッドを呼び出しても安全かどうかを確認します。  
  
   
  
## 例  
 次のコード例では、ウィンドウが開きして、ユーザーでは、過去 5 分間で使用しない場合に閉じます。 このコード例は、フォームに、 <xref:System.Windows.Forms.WebBrowser> という名前のコントロール `WebBrowser1`, 、 <xref:System.Windows.Forms.Button> という名前 `Button1`, 、および <xref:System.Windows.Forms.Timer> という名前のクラス `Timer1`します。  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow\#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlWindow\#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Load;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Load" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Load" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ウィンドウのドキュメントとそのすべての要素の初期化が終了すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.HtmlWindow.Load> イベントの動作は同じように、 <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> でイベントを <xref:System.Windows.Forms.WebBrowser> コントロール: ドキュメント内部アクセス HTML 要素にも安全であるに通知します。  
  
 既定のアクションを取り消すことはできません、 <xref:System.Windows.Forms.HtmlWindow.Load> イベントです。  
  
 イベント バブルとイベントの既定の操作をキャンセルの取り消しの違いについての詳細については、次を参照してください。 [About the DHTML Object Model](http://msdn.microsoft.com/library/ms533022.aspx)します。  
  
   
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.HtmlWindow.Load> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.HtmlWindow> という `HtmlWindow1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.HtmlWindow.Load> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#453](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#453)]
 [!code-vb[System.Windows.Forms.EventExamples\#453](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#453)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.LostFocus" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ウィンドウがユーザーの入力フォーカスを失うと発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.HtmlWindow.LostFocus> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.HtmlWindow> という `HtmlWindow1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.HtmlWindow.LostFocus> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#454](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#454)]
 [!code-vb[System.Windows.Forms.EventExamples\#454](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#454)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveTo">
      <MemberSignature Language="C#" Value="public void MoveTo (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveTo(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.MoveTo(System.Drawing.Point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">ウィンドウの左上隅の x 座標と y 座標。</param>
        <summary>画面上の指定した座標にウィンドウを移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することはできません <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> を画面の表示の端からウィンドウを移動; このメソッドは、Web ページ上のスクリプトを通じて使用も信頼されていないスクリプトを windows の非表示を表示することができますがのでと見なされませんセキュリティで保護します。  
  
 <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> 発生させる、 <xref:System.UnauthorizedAccessException> 移動しようとしているウィンドウとその親ウィンドウに別の最上位レベル ドメインがあるかどうか。 たとえば、ホストしている場合、 <xref:System.Windows.Forms.WebBrowser> a.adatum.com を指すをコントロールを使用して新しいウィンドウを作成 <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> b.adatum.com を表示します。 この場合、両方のウィンドウは同じトップレベル ドメインの一部であると見なされ、例外はスローされません。 ただしを呼び出す場合 <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> を表示する www,microsoft.com 2 つのウィンドウようになりましたが、トップレベル ドメイン、および <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> 操作には、スローする例外が発生します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">この操作を実行しようとしています。 コードには、このウィンドウを操作するアクセス許可がありません。 詳細については、「解説」を参照してください。</exception>
      </Docs>
    </Member>
    <Member MemberName="MoveTo">
      <MemberSignature Language="C#" Value="public void MoveTo (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveTo(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.MoveTo(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">ウィンドウの左上隅の x 座標。</param>
        <param name="y">ウィンドウの左上隅の y 座標。</param>
        <summary>画面上の指定した座標にウィンドウを移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することはできません <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> を画面の表示の端からウィンドウを移動; このメソッドは、Web ページ上のスクリプトを通じて使用も信頼されていないスクリプトを windows の非表示を表示することができますがのでと見なされませんセキュリティで保護します。  
  
 <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> 発生させる、 <xref:System.UnauthorizedAccessException> 移動しようとしているウィンドウとその親ウィンドウに別の最上位レベル ドメインがあるかどうか。 たとえば、ホストしている場合、 <xref:System.Windows.Forms.WebBrowser> コントロールとそれを指す a.adatum.com を作成する新しいウィンドウを使用して、 <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> b.adatum.com を表示します。 この場合、両方のウィンドウは同じトップレベル ドメインの一部であると見なされ、例外はスローされません。 ただしを呼び出す場合 <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> を表示する www,microsoft.com 2 つのウィンドウようになりましたが、トップレベル ドメイン、および <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> 操作には、スローする例外が発生します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">この操作を実行しようとしています。 コードには、このウィンドウを操作するアクセス許可がありません。 詳細については、「解説」を参照してください。</exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ウィンドウの名前を取得または設定します。</summary>
        <value>名前を表す <see cref="T:System.String" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public void Navigate (string urlString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Navigate(string urlString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Navigate(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="urlString">URL \(Uniform Resource Locator\) で表される表示対象のリソース。</param>
        <summary>指定した URL にある新しいコンテンツを表示またはダウンロードします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 `url` ウィンドウに表示されているページが破棄され、新しいページに置き換え、アプリケーションが前のページの管理対象の DOM オブジェクトに保持してすべての参照は無効になります; パラメーターが、HTML ページをポイントします。 場合 `url` Internet Explorer によって表示できないリソースへのポインター、ユーザーは、ダウンロード操作をキャンセルしたり、ディスクに保存する、アプリケーションの外部でリソースを開くかどうかを確認するダイアログ ボックスに表示されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public void Navigate (Uri url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Navigate(class System.Uri url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Navigate(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="url">現在のウィンドウに表示するドキュメントまたはオブジェクトの、<see cref="T:System.Uri" /> で指定された場所。</param>
        <summary>現在のウィンドウに新しいドキュメントを表示します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (System.Windows.Forms.HtmlWindow left, System.Windows.Forms.HtmlWindow right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Windows.Forms.HtmlWindow left, class System.Windows.Forms.HtmlWindow right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.op_Equality(System.Windows.Forms.HtmlWindow,System.Windows.Forms.HtmlWindow)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlWindow" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlWindow" />
      </Parameters>
      <Docs>
        <param name="left">最初の <see cref="T:System.Windows.Forms.HtmlWindow" /> オブジェクト。</param>
        <param name="right">2 番目の <see cref="T:System.Windows.Forms.HtmlWindow" /> オブジェクト。</param>
        <summary>2 つの <see cref="T:System.Windows.Forms.HtmlWindow" /> オブジェクトが等しいかどうかをテストします。</summary>
        <returns>両方のパラメーターが <see langword="null" /> の場合、または、基になる COM インターフェイスが両方の要素で同じ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The equality operator tests the **languageKeyword tag is not supported!!!!**  
 pointers of the underlying COM objects wrapped by the supplied <xref:System.Windows.Forms.HtmlWindow> classes.  
  
 The equivalent method for this operator is <xref:System.Windows.Forms.HtmlWindow.Equals%28System.Object%29?displayProperty=fullName>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (System.Windows.Forms.HtmlWindow left, System.Windows.Forms.HtmlWindow right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Windows.Forms.HtmlWindow left, class System.Windows.Forms.HtmlWindow right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.op_Inequality(System.Windows.Forms.HtmlWindow,System.Windows.Forms.HtmlWindow)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlWindow" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlWindow" />
      </Parameters>
      <Docs>
        <param name="left">最初の <see cref="T:System.Windows.Forms.HtmlWindow" /> オブジェクト。</param>
        <param name="right">2 番目の <see cref="T:System.Windows.Forms.HtmlWindow" /> オブジェクト。</param>
        <summary>2 つの <see langword="HtmlWindow" /> オブジェクトが等しくないかどうかをテストします。</summary>
        <returns>いずれか一方のオブジェクトだけが <see langword="null" /> の場合、または、基になる COM ポインターが一致しない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Open (string urlString, string target, string windowOptions, bool replaceEntry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow Open(string urlString, string target, string windowOptions, bool replaceEntry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlString" Type="System.String" />
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="windowOptions" Type="System.String" />
        <Parameter Name="replaceEntry" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="urlString">読み込むファイルの場所を記述する URL。</param>
        <param name="target">リソースを開くウィンドウの名前。 これは、開発者が指定した名前、または次の特殊な値のいずれかです。  
  
 <c>_blank</c>: 新しいウィンドウで <c>url</c> を開きます。<see cref="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" /> を呼び出した場合と同じ動作を実行します。  
  
 <c>_media</c>: メディア バーで <c>url</c> を開きます。  
  
 <c>_parent</c>: 現在のウィンドウを作成したウィンドウで <c>url</c> を開きます。  
  
 <c>_search</c>: 検索バーで <c>url</c> を開きます。  
  
 <c>_self</c>: 現在のウィンドウで <c>url</c> を開きます。  
  
 <c>_top</c>: <c>FRAME</c> 要素に属するウィンドウに対して呼び出した場合は、その <c>FRAMESET</c> をホストするウィンドウで <c>url</c> を開きます。 それ以外の場合は、<c>_self</c> と同じ動作になります。</param>
        <param name="windowOptions">次のオプションのうち、<c>name=value</c> の形式で表された 0 個以上のオプションを含むコンマ区切り文字列。<c>left</c>、<c>top</c>、<c>height</c>、<c>width</c> のオプションについては、任意の整数を指定できます。それ以外の各オプションについて有効な値は、<c>yes</c> \(<see langword="1" />\) と <c>no</c> \(<see langword="0" />\) のいずれかです。  
  
 <c>channelmode</c>: Internet Explorer 4.0 の廃止されたチャネルのテクノロジで使用されます。 既定値は <c>no</c> です。  
  
 <c>directories</c>: ウィンドウにディレクトリ移動ボタンを表示するかどうか。 既定値は <c>yes</c> です。  
  
 <c>height</c>: ウィンドウのクライアント領域の高さ \(ピクセル単位\)。 最小値は 100 です。これよりも小さいウィンドウを開こうとすると、Internet Explorer の既定値に従ってウィンドウが開かれます。  
  
 <c>left</c>: ユーザーの画面の左上隅を基準とした、ウィンドウの左側 \(x 座標\) の相対位置 \(ピクセル単位\)。 正の整数にする必要があります。  
  
 <c>location</c>: ユーザーがウィンドウを新しい URL に移動できるようにするアドレス バーを表示するかどうか。 既定値は <c>yes</c> です。  
  
 <c>menubar</c>: 新しいウィンドウにメニューを表示するかどうか。 既定値は <c>yes</c> です。  
  
 <c>resizable</c>: ユーザーがウィンドウのサイズを変更できるかどうか。 既定値は <c>yes</c> です。  
  
 <c>scrollbars</c>: ウィンドウに水平スクロール バーと垂直スクロール バーを配置するかどうか。 既定値は <c>yes</c> です。  
  
 <c>status</c>: ウィンドウの下部にステータス バーを配置するかどうか。 既定値は <c>yes</c> です。  
  
 <c>titlebar</c>: 現在のページのタイトルを表示するかどうか。 マネージ アプリケーションでこのオプションを <c>no</c> に設定しても影響はなく、タイトル バーは常に表示されます。  
  
 <c>toolbar</c>: **\[戻る\]**、**\[進む\]**、**\[停止\]**などのツールバー ボタンを表示するかどうか。 既定値は <c>yes</c> です。  
  
 <c>top</c>: ユーザーの画面の左上隅を基準とした、ウィンドウの上端 \(y 座標\) の相対位置 \(ピクセル単位\)。 正の整数にする必要があります。  
  
 <c>width</c>: ウィンドウのクライアント領域の幅 \(ピクセル単位\)。 最小値は 100 です。これよりも小さいウィンドウを開こうとすると、Internet Explorer の既定値に従ってウィンドウが開かれます。</param>
        <param name="replaceEntry">
          <c>url</c> がナビゲーション履歴に存在する現在のウィンドウの URL を置き換えるかどうか。 これは、<see cref="T:System.Windows.Forms.HtmlHistory" /> クラスのメソッドの操作に影響を及ぼします。</param>
        <summary>指定したウィンドウにファイルを表示します。</summary>
        <returns>新しいウィンドウ、または <paramref name="target" /> パラメーターで指定された以前に作成されたウィンドウを表す <see cref="T:System.Windows.Forms.HtmlWindow" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `target` を前回呼び出したときの結果として作成されたウィンドウの名前をパラメーター <xref:System.Windows.Forms.HtmlWindow.Open%2A>します。 パラメーターは、ハイパーリンクをクリックすると開くウィンドウを指す場合も \(`A` 要素\)、または `FORM` を使用する要素、 `TARGET` 属性を新しいウィンドウでその URL を開きます。 次の HTML コードがという名前の新しいウィンドウを開きます `orderWindow` 、ユーザーがそれをクリックしたとき。  
  
 `<A HREF="/startOrder.aspx" TARGET="orderWindow">Click to Start Order</a>`  
  
 任意のオプションを指定する場合、 `windowOptions` 含まれていない任意のオプションのパラメーターが自動的に無効にします。 つまり、によるだけを指定する場合は、 `windowOptions` するステータス バーが、そのメニュー バー、ツールバー、タイトル、スクロール バー、およびでは表示されません明示的に有効にした場合を除き、 `windowOptions`です。  
  
 によって、ファイルが参照される場合 `url` が HTML ファイル、テキスト ファイルまたは Internet Explorer の内部でホストできるその他のファイルの種類が指定したウィンドウに表示されます。 Internet Explorer の内部では、ファイルを表示できません\] ウィンドウのターゲットによってという名前の存在しないかどうかは、ウィンドウが開き、リソースのダウンロードに Internet Explorer の間だけ直ちに終了後です。  
  
 使用して新しいウィンドウを作成すると <xref:System.Windows.Forms.HtmlWindow.Open%2A> または <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, 、Internet Explorer の新しいインスタンスを開くには、HTML ドキュメント オブジェクト モデルになります。 呼び出さない場合 <xref:System.Windows.Forms.HtmlWindow.Close%2A> のすべてのウィンドウで作成した、Internet Explorer のこのインスタンスは実行を続け、アプリケーションが終了した後もします。  
  
 使用する場合 <xref:System.Windows.Forms.HtmlWindow.Open%2A> を既存のウィンドウ内の URL を読み込む `windowOptions` は無視されます。 ディメンション、外観、および画面上の位置が最初に最初の呼び出しで指定されたウィンドウが保持されます <xref:System.Windows.Forms.HtmlWindow.Open%2A>します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Open (Uri url, string target, string windowOptions, bool replaceEntry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow Open(class System.Uri url, string target, string windowOptions, bool replaceEntry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Open(System.Uri,System.String,System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="windowOptions" Type="System.String" />
        <Parameter Name="replaceEntry" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="url">読み込むファイルの場所を記述する URL。</param>
        <param name="target">リソースを開くウィンドウの名前。 これは、開発者が指定した名前、または次の特殊な値のいずれかです。  
  
 <c>_blank</c>: 新しいウィンドウで <c>url</c> を開きます。<see cref="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" /> を呼び出した場合と同じ動作を実行します。  
  
 <c>_media</c>: メディア バーで <c>url</c> を開きます。  
  
 <c>_parent</c>: 現在のウィンドウを作成したウィンドウで <c>url</c> を開きます。  
  
 <c>_search</c>: 検索バーで <c>url</c> を開きます。  
  
 <c>_self</c>: 現在のウィンドウで <c>url</c> を開きます。  
  
 <c>_top</c>: <c>FRAME</c> 要素に属するウィンドウに対して呼び出した場合は、その <c>FRAMESET</c> をホストするウィンドウで <c>url</c> を開きます。 それ以外の場合は、<c>_self</c> と同じ動作になります。</param>
        <param name="windowOptions">次のオプションのうち、<c>name=value</c> の形式で表された 0 個以上のオプションを含むコンマ区切り文字列。<c>left</c>、<c>top</c>、<c>height</c>、<c>width</c> のオプションについては、任意の整数を指定できます。それ以外の各オプションについて有効な値は、<c>yes</c> \(<see langword="1" />\) と <c>no</c> \(<see langword="0" />\) のいずれかです。  
  
 <c>channelmode</c>: Internet Explorer 4.0 の廃止されたチャネルのテクノロジで使用されます。 既定値は <c>no</c> です。  
  
 <c>directories</c>: ウィンドウにディレクトリ移動ボタンを表示するかどうか。 既定値は <c>yes</c> です。  
  
 <c>height</c>: ウィンドウのクライアント領域の高さ \(ピクセル単位\)。 最小値は 100 です。これよりも小さいウィンドウを開こうとすると、Internet Explorer の既定値に従ってウィンドウが開かれます。  
  
 <c>left</c>: ユーザーの画面の左上隅を基準とした、ウィンドウの左側 \(x 座標\) の相対位置 \(ピクセル単位\)。 正の整数にする必要があります。  
  
 <c>location</c>: ユーザーがウィンドウを新しい URL に移動できるようにするアドレス バーを表示するかどうか。 既定値は <c>yes</c> です。  
  
 <c>menubar</c>: 新しいウィンドウにメニューを表示するかどうか。 既定値は <c>yes</c> です。  
  
 <c>resizable</c>: ユーザーがウィンドウのサイズを変更できるかどうか。 既定値は <c>yes</c> です。  
  
 <c>scrollbars</c>: ウィンドウに水平スクロール バーと垂直スクロール バーを配置するかどうか。 既定値は <c>yes</c> です。  
  
 <c>status</c>: ウィンドウの下部にステータス バーを配置するかどうか。 既定値は <c>yes</c> です。  
  
 <c>titlebar</c>: 現在のページのタイトルを表示するかどうか。 マネージ アプリケーションでこのオプションを <c>no</c> に設定しても影響はなく、タイトル バーは常に表示されます。  
  
 <c>toolbar</c>: **\[戻る\]**、**\[進む\]**、**\[停止\]**などのツールバー ボタンを表示するかどうか。 既定値は <c>yes</c> です。  
  
 <c>top</c>: ユーザーの画面の左上隅を基準とした、ウィンドウの上端 \(y 座標\) の相対位置 \(ピクセル単位\)。 正の整数にする必要があります。  
  
 <c>width</c>: ウィンドウのクライアント領域の幅 \(ピクセル単位\)。 最小値は 100 です。これよりも小さいウィンドウを開こうとすると、Internet Explorer の既定値に従ってウィンドウが開かれます。</param>
        <param name="replaceEntry">
          <c>url</c> がナビゲーション履歴に存在する現在のウィンドウの URL を置き換えるかどうか。 これは、<see cref="T:System.Windows.Forms.HtmlHistory" /> クラスのメソッドの操作に影響を及ぼします。</param>
        <summary>指定したウィンドウにファイルを表示します。</summary>
        <returns>新しいウィンドウ、または <paramref name="target" /> パラメーターで指定された以前に作成されたウィンドウを表す <see cref="T:System.Windows.Forms.HtmlWindow" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `target` を前回呼び出したときの結果として作成されたウィンドウの名前をパラメーター <xref:System.Windows.Forms.HtmlWindow.Open%2A>します。 パラメーターは、ハイパーリンクをクリックすると開くウィンドウを指す場合も \(`A` 要素\)、または `FORM` を使用する要素、 `TARGET` 属性を新しいウィンドウでその URL を開きます。 次の HTML コードがという名前の新しいウィンドウを開きます `orderWindow` 、ユーザーがそれをクリックしたとき。  
  
 `<A HREF="/startOrder.aspx" TARGET="orderWindow">Click to Start Order</a>`  
  
 任意のオプションを指定する場合、 `windowOptions` 含まれていない任意のオプションのパラメーターが自動的に無効にします。 つまり、によるだけを指定する場合は、 `windowOptions` するステータス バーが、そのメニュー バー、ツールバー、タイトル、スクロール バー、およびでは表示されません明示的に有効にした場合を除き、 `windowOptions`です。  
  
 によって、ファイルが参照される場合 `url` が HTML ファイル、テキスト ファイルまたは Internet Explorer の内部でホストできるその他のファイルの種類が指定したウィンドウに表示されます。 Internet Explorer の内部では、ファイルを表示できません\] ウィンドウのターゲットによってという名前の存在しないかどうかは、ウィンドウが開き、リソースのダウンロードに Internet Explorer の間だけ直ちに終了後です。  
  
 使用して新しいウィンドウを作成すると <xref:System.Windows.Forms.HtmlWindow.Open%2A> または <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, 、Internet Explorer の新しいインスタンスを開くには、HTML ドキュメント オブジェクト モデルになります。 呼び出さない場合 <xref:System.Windows.Forms.HtmlWindow.Close%2A> のすべてのウィンドウで作成した、Internet Explorer のこのインスタンスは実行を続け、アプリケーションが終了した後もします。  
  
 使用する場合 <xref:System.Windows.Forms.HtmlWindow.Open%2A> を既存のウィンドウ内の URL を読み込む `windowOptions` は無視されます。 ディメンション、外観、および画面上の位置が最初に最初の呼び出しで指定されたウィンドウが保持されます <xref:System.Windows.Forms.HtmlWindow.Open%2A> します。  
  
   
  
## 例  
 次のコード例には、2 つのメソッドが含まれています。  
  
-   1 つ目では、URL を開くという名前のウィンドウで `displayWindow`, 、表示されるステータス バーを作成します。  
  
-   2 番目は、同じウィンドウで別の URL を開きますが、アドレス バーのみを表示することを指定します。  
  
 \[URL は、最初に開いたをウィンドウと表示されているコントロールのディメンションが依存していることに注意してください。 このコード例は、フォームが含まれている、 <xref:System.Windows.Forms.WebBrowser> という名前のコントロール `WebBrowser1`します。  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow\#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#13)]
 [!code-vb[System.Windows.Forms.HtmlWindow\#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Opener">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Opener { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindow Opener" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Opener" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のウィンドウを開いたウィンドウへの参照を取得します。</summary>
        <value>
          <see cref="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" /> メソッドまたは <see cref="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" /> メソッドの呼び出しによって作成された <see cref="T:System.Windows.Forms.HtmlWindow" />。 ウィンドウがこれらのメソッドのいずれかを使用して作成されていない場合、このプロパティは <see langword="null" /> を返します。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenNew">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow OpenNew (string urlString, string windowOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow OpenNew(string urlString, string windowOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlString" Type="System.String" />
        <Parameter Name="windowOptions" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="urlString">読み込むファイルの場所を記述する URL。</param>
        <param name="windowOptions">次のオプションのうち、<c>name=value</c> の形式で表された 0 個以上のオプションを含むコンマ区切り文字列。 有効なオプションの詳細については、<see cref="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" /> を参照してください。</param>
        <summary>新しいウィンドウにファイルを表示します。</summary>
        <returns>新しいウィンドウを表す <see cref="T:System.Windows.Forms.HtmlWindow" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 によって、ファイルが参照される場合 `url` が HTML ファイル、テキスト ファイルまたは Internet Explorer の内部でホストできるその他のファイルの種類が新しいウィンドウに表示されます。 Internet Explorer の内部で、ファイルを表示できないかどうかは、ウィンドウが開き、リソースのダウンロードに Internet Explorer の間だけ直ちに終了後です。  
  
 使用して新しいウィンドウを作成すると <xref:System.Windows.Forms.HtmlWindow.Open%2A> または <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, 、Internet Explorer の新しいインスタンスを開くには、HTML ドキュメント オブジェクト モデルになります。 呼び出さない場合 <xref:System.Windows.Forms.HtmlWindow.Close%2A> のすべてのウィンドウで作成した、Internet Explorer のこのインスタンスは実行を続け、アプリケーションが終了した後もします。  
  
 以前に開いたウィンドウにドキュメントを読み込む場合を参照してください、 <xref:System.Windows.Forms.HtmlWindow.Open%2A> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenNew">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow OpenNew (Uri url, string windowOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow OpenNew(class System.Uri url, string windowOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.OpenNew(System.Uri,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
        <Parameter Name="windowOptions" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">読み込むファイルの場所を記述する URL。</param>
        <param name="windowOptions">次のオプションのうち、<c>name=value</c> の形式で表された 0 個以上のオプションを含むコンマ区切り文字列。 有効なオプションの詳細については、<see cref="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" /> を参照してください。</param>
        <summary>新しいウィンドウにファイルを表示します。</summary>
        <returns>新しいウィンドウを表す <see cref="T:System.Windows.Forms.HtmlWindow" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 によって、ファイルが参照される場合 `url` が HTML ファイル、テキスト ファイルまたは Internet Explorer の内部でホストできるその他のファイルの種類が新しいウィンドウに表示されます。 Internet Explorer の内部で、ファイルを表示できないかどうかは、ウィンドウが開き、リソースのダウンロードに Internet Explorer の間だけ直ちに終了後です。  
  
 使用して新しいウィンドウを作成すると <xref:System.Windows.Forms.HtmlWindow.Open%2A> または <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, 、Internet Explorer の新しいインスタンスを開くには、HTML ドキュメント オブジェクト モデルになります。 呼び出さない場合 <xref:System.Windows.Forms.HtmlWindow.Close%2A> のすべてのウィンドウで作成した、Internet Explorer のこのインスタンスは実行を続け、アプリケーションが終了した後もします。  
  
 以前に開いたウィンドウにドキュメントを読み込む場合を参照してください、 <xref:System.Windows.Forms.HtmlWindow.Open%2A> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindow Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フレームを含むページにおいて、現在のウィンドウの上位にあるウィンドウを取得します。</summary>
        <value>現在のウィンドウを所有する <see cref="T:System.Windows.Forms.HtmlWindow" />。 現在のウィンドウが <c>FRAME</c> ではない、または <c>FRAME</c> 内に埋め込まれていない場合は、<see langword="null" /> を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 フレームを含むドキュメントで各 `FRAME` 内で、 `FRAMESET` 、ページ上の 1 つの子ウィンドウとして機能します。 それぞれの親 `FRAME` は、 `FRAMESET` を含む、 `FRAME`です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public System.Drawing.Point Position { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point Position" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>画面におけるウィンドウのクライアント領域の位置を取得します。</summary>
        <value>画面の左上隅の x 座標と y 座標をピクセル単位で記述する <see cref="T:System.Drawing.Point" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.Location%2A> のプロパティ、 <xref:System.Windows.Forms.WebBrowser> コントロールは、フォームの左上隅を基準としたコントロールの位置を返します。 これに対し、 <xref:System.Windows.Forms.HtmlWindow.Position%2A> はユーザーのモニターの左上隅を基準とした、ドキュメントの表示領域の場所を返します。  
  
   
  
## 例  
 次のコード例では、新しいウィンドウを開きます経由で直接、 <xref:System.Windows.Forms.WebBrowser> フォーム上のコントロールです。 このコード例は、フォームにはでのインスタンスが含まれている、 <xref:System.Windows.Forms.WebBrowser> という名前のコントロール `WebBrowser1`します。  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow\#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#5)]
 [!code-vb[System.Windows.Forms.HtmlWindow\#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prompt">
      <MemberSignature Language="C#" Value="public string Prompt (string message, string defaultInputValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Prompt(string message, string defaultInputValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Prompt(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="defaultInputValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">ユーザーに表示するメッセージ。</param>
        <param name="defaultInputValue">テキスト ボックスに表示する既定値。</param>
        <summary>メッセージとテキスト ボックスをユーザーに表示するダイアログ ボックスを表示します。</summary>
        <returns>ユーザーが入力したテキストを表す <see cref="T:System.String" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.HtmlWindow.Prompt%2A> ユーザーからの単純なテキスト入力を取得するクイック簡単な方法を提供します。  
  
 <xref:System.Windows.Forms.HtmlWindow.Prompt%2A> Unicode テキスト入力値として、Internet Explorer スクリプトのプロンプトは表示されませんラテン語以外の言語のテキスト適切に Windows 95、Windows 98、Windows ME および Windows NT オペレーティング システムの制限によりします。 詳細については、次を参照してください。 [INFO: Internet Explorer Script Prompts and MBCS\/Unicode](http://support.microsoft.com/default.aspx?scid=kb;en-us;211147)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFocus">
      <MemberSignature Language="C#" Value="public void RemoveFocus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveFocus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.RemoveFocus" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のウィンドウからフォーカスを移します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出されると、 `FRAME` ウィンドウで、 `FRAMESET`, 、<xref:System.Windows.Forms.HtmlWindow.RemoveFocus%2A> によって、フォーカスが失われ、そのウィンドウが、自動的には設定されませんフォーカス別のウィンドウです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Resize">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Resize;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Resize" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Resize" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがマウスを使用してウィンドウの寸法を変更すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.HtmlWindow.Resize> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.HtmlWindow> という `HtmlWindow1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.HtmlWindow.Resize> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#455](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#455)]
 [!code-vb[System.Windows.Forms.EventExamples\#455](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#455)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResizeTo">
      <MemberSignature Language="C#" Value="public void ResizeTo (System.Drawing.Size size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResizeTo(valuetype System.Drawing.Size size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ResizeTo(System.Drawing.Size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="size">ウィンドウの幅と高さをピクセル単位で記述する <see cref="T:System.Drawing.Size" />。 幅も高さも 100 ピクセル以上にする必要があります。</param>
        <summary>ウィンドウのサイズを指定した寸法に変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例では、新しいウィンドウを開き、使用可能な画面領域に合わせてサイズを変更します。  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow\#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#15)]
 [!code-vb[System.Windows.Forms.HtmlWindow\#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">サイズを変更しようとして、ウィンドウは、親ウィンドウとは異なるドメインです。 この制限は、クロス フレーム スクリプティング セキュリティの一部詳細については、次を参照してください。 [About Cross\-Frame Scripting and Security](http://msdn.microsoft.com/library/ms533028.aspx)します。</exception>
      </Docs>
    </Member>
    <Member MemberName="ResizeTo">
      <MemberSignature Language="C#" Value="public void ResizeTo (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResizeTo(int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ResizeTo(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">目的のウィンドウの幅をピクセル単位で記述します。 100 ピクセル以上にする必要があります。</param>
        <param name="height">目的のウィンドウの高さをピクセル単位で記述します。 100 ピクセル以上にする必要があります。</param>
        <summary>ウィンドウのサイズを指定した寸法に変更します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.UnauthorizedAccessException">サイズを変更しようとして、ウィンドウは、親ウィンドウとは異なるドメインです。 この制限は、クロス フレーム スクリプティング セキュリティの一部詳細については、次を参照してください。 [About Cross\-Frame Scripting and Security](http://msdn.microsoft.com/library/ms533028.aspx)します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Scroll">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Scroll;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Scroll" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Scroll" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがウィンドウをスクロールして、画面に表示されていなかったテキストを表示すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.HtmlWindow.Scroll> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.HtmlWindow> という `HtmlWindow1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.HtmlWindow.Scroll> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#456](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#456)]
 [!code-vb[System.Windows.Forms.EventExamples\#456](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#456)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollTo">
      <MemberSignature Language="C#" Value="public void ScrollTo (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollTo(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ScrollTo(System.Drawing.Point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">現在のウィンドウの左上隅を基準とした、ページのスクロール先の x 座標と y 座標。</param>
        <summary>ウィンドウを指定された座標に移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> ドキュメントのウィンドウの左上隅にあるドキュメントに対して指定した座標が配置されるようにスクロールするドキュメントになります。 ドキュメントが長であるか、またはこれを実現するには、するのに十分な幅でもない場合 <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> 限り、指定した方向でドキュメントをスクロールします。  
  
   
  
## 例  
 次のコード例は、ユーザーがクリックされた座標位置にドキュメントをスクロールします。  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow\#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#15)]
 [!code-vb[System.Windows.Forms.HtmlWindow\#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollTo">
      <MemberSignature Language="C#" Value="public void ScrollTo (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollTo(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ScrollTo(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">現在のウィンドウの左上隅を基準とした、ページのスクロール先の x 座標。</param>
        <param name="y">現在のウィンドウの左上隅を基準とした、ページのスクロール先の y 座標。</param>
        <summary>指定した位置までウィンドウをスクロールします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> ドキュメントのウィンドウの左上隅にあるドキュメントに対して指定した座標が配置されるようにスクロールするドキュメントになります。 ドキュメントが長であるか、またはこれを実現するには、するのに十分な幅でもない場合 <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> 限り、指定した方向でドキュメントをスクロールします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public System.Drawing.Size Size { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size Size" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のウィンドウのサイズを取得または設定します。</summary>
        <value>ウィンドウのサイズをピクセル単位で記述する <see cref="T:System.Drawing.Size" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StatusBarText">
      <MemberSignature Language="C#" Value="public string StatusBarText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StatusBarText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.StatusBarText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ウィンドウのステータス バーに表示されるテキストを取得または設定します。</summary>
        <value>現在のステータス テキストを格納する <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.WebBrowser> コントロールにステータス バーが表示されません。 任意の新しいウィンドウで開かれた、 <xref:System.Windows.Forms.HtmlWindow.Open%2A> または <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> メソッド、ただしは既定で表示ステータス バー。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unload">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Unload;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Unload" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Unload" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のページがアンロード中で、新しいページが表示される直前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例では、このメンバーの使用方法を示します。 例では、イベント ハンドラーは、発生するときに報告、 <xref:System.Windows.Forms.HtmlWindow.Unload> イベントです。 このレポートは、イベントが発生してデバッグに役立つ説明を使用します。 複数のイベントまたは頻繁に発生するイベントを報告するためには、交換を検討 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> と <xref:System.Console.WriteLine%2A?displayProperty=fullName> またはメッセージを複数行に追加する <xref:System.Windows.Forms.TextBox>です。  
  
 このコード例を実行する型のインスタンスを含むプロジェクトに貼り付けること <xref:System.Windows.Forms.HtmlWindow> という `HtmlWindow1`します。 イベント ハンドラーが関連付けられていることを確認して、 <xref:System.Windows.Forms.HtmlWindow.Unload> イベントです。  
  
 [!code-csharp[System.Windows.Forms.EventExamples\#457](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#457)]
 [!code-vb[System.Windows.Forms.EventExamples\#457](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#457)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Url">
      <MemberSignature Language="C#" Value="public Uri Url { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Url" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Url" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ウィンドウに表示されている現在の項目に対応する URL を取得します。</summary>
        <value>URL を記述する <see cref="T:System.Uri" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは読み取り専用です。 新しいドキュメント ウィンドウを移動するを使用して、 <xref:System.Windows.Forms.HtmlWindow.Navigate%2A> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowFrameElement">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement WindowFrameElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement WindowFrameElement" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.WindowFrameElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このウィンドウに対応するフレーム要素を取得します。</summary>
        <value>このウィンドウの <c>FRAME</c> 要素に対応する <see cref="T:System.Windows.Forms.HtmlElement" />。 このウィンドウがフレームではない場合、<see langword="null" /> を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 取得する場合、 `FRAME` 要素を <xref:System.Windows.Forms.HtmlWindow.Frames%2A> 、コレクションが返されます、 <xref:System.Windows.Forms.HtmlWindow>です。 呼び出す <xref:System.Windows.Forms.HtmlWindow.WindowFrameElement%2A> 、基になる属性にアクセスする必要がある場合は、このオブジェクトに `FRAME` 要素など、 `SRC` 属性です。  
  
   
  
## 例  
 次のコード例に比較して、 `SRC` 内のフレームの属性、 `FRAMESET` を現在の場所。 2 つが異なる場合は、フレームが元の Url にリセットされます。  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow\#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlWindow\#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.UnauthorizedAccessException">You cannot access a <c>FRAME</c> elements or the <c>FRAME</c>'s document if the <c>FRAME</c> is in a different zone than the <c>FRAMESET</c> that contains it. For a full explanation, see [About Cross\-Frame Scripting and Security](http://msdn.microsoft.com/library/ms533028.aspx).</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Open">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したウィンドウにファイルを表示します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ResizeTo">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ウィンドウのサイズを指定した寸法に変更します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ScrollTo">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した位置までウィンドウをスクロールします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Navigate">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した URL にある新しいコンテンツを表示またはダウンロードします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="MoveTo">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>画面上の指定した座標にウィンドウを移動します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="OpenNew">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>新しいウィンドウにファイルを表示します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>