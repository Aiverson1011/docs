<Type Name="CommonDialog" FullName="System.Windows.Forms.CommonDialog">
  <TypeSignature Language="C#" Value="public abstract class CommonDialog : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CommonDialog extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.CommonDialog" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Windows.Forms")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>画面上にダイアログ ボックスを表示するために使用する基本クラスを指定します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 Inherited classes are required to implement <xref:System.Windows.Forms.CommonDialog.RunDialog%2A> by invoking <xref:System.Windows.Forms.CommonDialog.ShowDialog%2A> to create a specific common dialog box. Inherited classes can optionally override <xref:System.Windows.Forms.CommonDialog.HookProc%2A> to implement specific dialog box hook functionality.  
  
   
  
## 例  
 The following code example uses the <xref:System.Windows.Forms.ColorDialog> implementation of <xref:System.Windows.Forms.CommonDialog> and illustrates creating and showing a dialog box. This example requires that the method is called from within an existing form, which has a <xref:System.Windows.Forms.TextBox> and <xref:System.Windows.Forms.Button> placed on it.  
  
 [!code-cpp[Classic ColorDialog Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ColorDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ColorDialog Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ColorDialog Example/CS/source.cs#1)]
 [!code-vb[Classic ColorDialog Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ColorDialog Example/VB/Form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommonDialog ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CommonDialog.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.CommonDialog" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HelpRequest">
      <MemberSignature Language="C#" Value="public event EventHandler HelpRequest;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler HelpRequest" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.CommonDialog.HelpRequest" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがコモン ダイアログ ボックスの \[?\] ボタンをクリックすると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを処理する方法の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、初期化を示しています、 <xref:System.Windows.Forms.ColorDialog> オブジェクトの設定、 <xref:System.Windows.Forms.ColorDialog.AnyColor%2A>, 、<xref:System.Windows.Forms.ColorDialog.AllowFullOpen%2A> プロパティです。<xref:System.Windows.Forms.ColorDialog> オブジェクトには、カスタムの色を設定するユーザーでできませんが、表示する基本色の完全なセットを許可します。 設定して、 <xref:System.Windows.Forms.ColorDialog.SolidColorOnly%2A> プロパティが false の色を色の 256 個以下のシステムでは、他の色の組み合わせを表示できます。 設定も示しています、 <xref:System.Windows.Forms.ColorDialog.ShowHelp%2A> プロパティと処理、 <xref:System.Windows.Forms.CommonDialog.HelpRequest> \] ダイアログ ボックスのイベントです。 例を実行するには、フォームと呼び出しで次のコードを貼り付け、 `InitializeColorDialog` フォームのコンス トラクター メソッドまたは `Load` メソッドです。 この例で必要とする、 `Click` ボタンのイベントがこの例で定義されているイベント ハンドラーに関連付けられています。  
  
 [!code-cpp[System.Windows.Forms.ColorDialogHelp\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ColorDialogHelp/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ColorDialogHelp\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ColorDialogHelp/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ColorDialogHelp\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ColorDialogHelp/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.CommonDialog.OnHelpRequest(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="HookProc">
      <MemberSignature Language="C#" Value="protected virtual IntPtr HookProc (IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance native int HookProc(native int hWnd, int32 msg, native int wparam, native int lparam) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CommonDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hWnd" Type="System.IntPtr" />
        <Parameter Name="msg" Type="System.Int32" />
        <Parameter Name="wparam" Type="System.IntPtr" />
        <Parameter Name="lparam" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hWnd">ダイアログ ボックスのウィンドウ ハンドル。</param>
        <param name="msg">メッセージを受信しています。</param>
        <param name="wparam">メッセージに関する追加情報。</param>
        <param name="lparam">メッセージに関する追加情報。</param>
        <summary>コモン ダイアログ ボックスに特定の機能を追加するためにオーバーライドされる、コモン ダイアログ ボックスのフック プロシージャを定義します。</summary>
        <returns>既定のダイアログ ボックス プロシージャでメッセージを処理する場合は値 0。既定のダイアログ ボックス プロシージャではメッセージを無視する場合は 0 以外の値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 用のフック プロシージャは、関数がアプリケーションに到達する前にイベントをインターセプトするメカニズムです。 オーバーライドする場合、 <xref:System.Windows.Forms.CommonDialog.HookProc%2A> のメソッド、 <xref:System.Windows.Forms.CommonDialog> クラス、オペレーティング システムが呼び出されるウィンドウにオペレーティング システムのメッセージをポストする関数のオーバーライドします。  
  
 既定ではのフック プロシージャ中央スクリーン WM\_INITDIALOG メッセージへの応答では、ダイアログ ボックスに配置します。  
  
> [!NOTE]
>  このメソッドを使用して <xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=fullName> されないようにすることに信頼できないコードから呼び出すことは直前の呼び出し元だけする必要がある <xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A?displayProperty=fullName> 権限です。 場合は、コードは、部分信頼コードから呼び出すことができる、処理されないユーザー入力を <xref:System.Runtime.InteropServices.Marshal> クラスの検証を伴わないメソッドです。 使用に関する重要な制限事項について、 `LinkDemand` 、メンバーを参照してください [と要求LinkDemand](http://msdn.microsoft.com/ja-jp/1ab877f2-70f4-4e0d-8116-943999dfe8f5)します。  
  
 このプロパティを使用しても、 <xref:System.Security.Permissions.SecurityAction.InheritanceDemand?displayProperty=fullName> セキュリティ属性であるこのメンバーをオーバーライドする派生クラスが必要、 `CustomPermission` 権限です。  
  
   
  
## 例  
 次のコード例では、オーバーライド、 <xref:System.Windows.Forms.CommonDialog.HookProc%2A> メソッドです。 例では、継承するクラスから成る、 <xref:System.Windows.Forms.CommonDialog> クラスです。 クラスの <xref:System.Windows.Forms.CommonDialog.HookProc%2A> オーバーライドで、例では、評価、メソッドの `msg` パラメーターの特定の Windows メッセージの定数値です。 場合、 `msg` パラメーターでは、指定した定数と等しい、例では、書き込むトレース出力に渡された Windows メッセージを識別する、 <xref:System.Windows.Forms.CommonDialog.HookProc%2A> メソッドです。 この例では、クラスを <xref:System.Windows.Forms.CommonDialog.HookProc%2A> メソッドが宣言された場合は、継承、 <xref:System.Windows.Forms.CommonDialog> クラスです。  
  
 [!code-cpp[HookProc Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/HookProc Example/CPP/fontdialogoverride.cpp#1)]
 [!code-csharp[HookProc Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/HookProc Example/CS/fontdialogoverride.cs#1)]
 [!code-vb[HookProc Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/HookProc Example/VB/fontdialogoverride.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for the immediate caller to call unmanaged code. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <block subset="none" type="overrides">
          <para>Inheriting classes can override this method to add specific functionality to a common dialog box. When overriding <see cref="M:System.Windows.Forms.CommonDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.CommonDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" /> method.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnHelpRequest">
      <MemberSignature Language="C#" Value="protected virtual void OnHelpRequest (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHelpRequest(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CommonDialog.OnHelpRequest(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.HelpEventArgs" /> イベント データを提供します。</param>
        <summary>
          <see cref="E:System.Windows.Forms.CommonDialog.HelpRequest" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、\[ヘルプ\] ボタンがクリックされたときに呼び出されます。 クラスを継承すると、イベントを処理するには、このメソッドがオーバーライドすることができます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerWndProc">
      <MemberSignature Language="C#" Value="protected virtual IntPtr OwnerWndProc (IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance native int OwnerWndProc(native int hWnd, int32 msg, native int wparam, native int lparam) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CommonDialog.OwnerWndProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hWnd" Type="System.IntPtr" />
        <Parameter Name="msg" Type="System.Int32" />
        <Parameter Name="wparam" Type="System.IntPtr" />
        <Parameter Name="lparam" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hWnd">送信メッセージのウィンドウ ハンドル。</param>
        <param name="msg">送信する Win32 メッセージ。</param>
        <param name="wparam">
          <c>wparam</c> メッセージと一緒に送信します。</param>
        <param name="lparam">
          <c>lparam</c> メッセージと一緒に送信します。</param>
        <summary>コモン ダイアログ ボックスに特定の機能を追加するためにオーバーライドされる、オーナー ウィンドウ プロシージャを定義します。</summary>
        <returns>送信されたメッセージの処理結果 \(メッセージによって異なる\)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コモン ダイアログ ボックスのオーナー ウィンドウに送信されたメッセージは、コントロールはここで転送されます。 クラスを継承すると、コモン ダイアログ ボックスに特定の機能を追加するには、このメソッドをオーバーライドできます。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for the immediate caller to call unmanaged code. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public abstract void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CommonDialog.Reset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされるときに、コモン ダイアログ ボックスのプロパティを既定値にリセットします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for unmanaged code to call this method. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <block subset="none" type="overrides">
          <para>Inheriting classes can override this method to reset their properties.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RunDialog">
      <MemberSignature Language="C#" Value="protected abstract bool RunDialog (IntPtr hwndOwner);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool RunDialog(native int hwndOwner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CommonDialog.RunDialog(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwndOwner" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hwndOwner">コモン ダイアログ ボックスのオーナー ウィンドウのウィンドウ ハンドルを表す値。</param>
        <summary>派生クラスでオーバーライドされるときに、コモン ダイアログ ボックスを指定します。</summary>
        <returns>ダイアログ ボックスが正常に動作した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コモン ダイアログ ボックスのユーザーが呼び出すときに、このメソッドが呼び出される <xref:System.Windows.Forms.CommonDialog.ShowDialog%2A>, の継承するクラスでオーバーライドする必要があり、 <xref:System.Windows.Forms.CommonDialog> 特定コモン ダイアログ ボックスを実装します。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for unmanaged code to call this method. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="M:System.Windows.Forms.CommonDialog.ShowDialog" />
        <altmember cref="M:System.Windows.Forms.CommonDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="ShowDialog">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DialogResult ShowDialog ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Forms.DialogResult ShowDialog() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CommonDialog.ShowDialog" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DialogResult</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>既定のオーナーを使用してコモン ダイアログ ボックスを実行します。</summary>
        <returns>
          <see cref="F:System.Windows.Forms.DialogResult.OK" /> ユーザーがダイアログ ボックスで \[ok\] をクリックした場合それ以外の場合、 <see cref="F:System.Windows.Forms.DialogResult.Cancel" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、<xref:System.Windows.Forms.CommonDialog.RunDialog%2A> を実装します。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Windows.Forms.ColorDialog> の実装 <xref:System.Windows.Forms.CommonDialog> を作成して、ダイアログ ボックスを表示します。 この例では、メソッドが、既存のフォーム内から呼び出されることが必要です、 <xref:System.Windows.Forms.TextBox> と <xref:System.Windows.Forms.Button> 配置します。  
  
 [!code-cpp[Classic ColorDialog Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ColorDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ColorDialog Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ColorDialog Example/CS/source.cs#1)]
 [!code-vb[Classic ColorDialog Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ColorDialog Example/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">to print from a <see cref="T:System.Windows.Forms.PrintDialog" />. Associated enumeration: <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.SafePrinting" /></permission>
        <permission cref="T:System.Security.Permissions.UIPermission">for safe subwindows to call this method. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /></permission>
        <altmember cref="M:System.Windows.Forms.CommonDialog.RunDialog(System.IntPtr)" />
        <altmember cref="T:System.Windows.Forms.DialogResult" />
      </Docs>
    </Member>
    <Member MemberName="ShowDialog">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DialogResult ShowDialog (System.Windows.Forms.IWin32Window owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Forms.DialogResult ShowDialog(class System.Windows.Forms.IWin32Window owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CommonDialog.ShowDialog(System.Windows.Forms.IWin32Window)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DialogResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="owner" Type="System.Windows.Forms.IWin32Window" />
      </Parameters>
      <Docs>
        <param name="owner">モーダル ダイアログ ボックスを所有するトップレベル ウィンドウを表す <see cref="T:System.Windows.Forms.IWin32Window" /> を実装しているオブジェクト。</param>
        <summary>指定したオーナーを使用してコモン ダイアログ ボックスを実行します。</summary>
        <returns>
          <see cref="F:System.Windows.Forms.DialogResult.OK" /> ユーザーがクリックした場合 **OK** \] ダイアログ ボックスでそれ以外の場合、 <see cref="F:System.Windows.Forms.DialogResult.Cancel" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このバージョンの <xref:System.Windows.Forms.CommonDialog.ShowDialog%2A> メソッドでは、特定のフォームまたはコントロールに表示されるダイアログ ボックスを所有することを指定することができます。 パラメーターを持たないこのメソッドのバージョンを使用する場合、アプリケーションの現在アクティブなウィンドウが表示されるダイアログ ボックスを自動的に所有するは。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">to print from a <see cref="T:System.Windows.Forms.PrintDialog" />. Associated enumeration: <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.SafePrinting" /></permission>
        <permission cref="T:System.Security.Permissions.UIPermission">for safe subwindows to call this method. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CommonDialog.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.StringConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはコントロールに関するデータを格納しているオブジェクトを設定します。</summary>
        <value>に関するデータを格納するオブジェクト、 <see cref="T:System.Windows.Forms.CommonDialog" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを使用して、任意のコントロールに関する情報を格納します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ShowDialog">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>コモン ダイアログ ボックスを実行します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>