<Type Name="Binding" FullName="System.Windows.Forms.Binding">
  <TypeSignature Language="C#" Value="public class Binding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Binding extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Binding" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.ListBindingConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>オブジェクトのプロパティ値とコントロールのプロパティ値との間の簡易バインドを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Windows.Forms.Binding> クラスを作成して、コントロールのプロパティと、オブジェクトのプロパティまたはオブジェクトの一覧の現在のオブジェクトのプロパティのいずれかの単純なバインドを保持します。  
  
 最初のケースの例は、同様に連結できます、 <xref:System.Windows.Forms.Control.Text%2A> のプロパティ、 <xref:System.Windows.Forms.TextBox> への制御、 `FirstName` のプロパティ、 `Customer` オブジェクトです。 2 番目のケースの例は、同様に連結できます、 <xref:System.Windows.Forms.Control.Text%2A> のプロパティ、 <xref:System.Windows.Forms.TextBox> への制御、 `FirstName` のプロパティ、 <xref:System.Data.DataTable> 顧客を格納しています。  
  
 <xref:System.Windows.Forms.Binding> クラスを表示する値をフォーマットするようにも、 <xref:System.Windows.Forms.Binding.Format> イベントを書式設定された値を取得するため、 <xref:System.Windows.Forms.Binding.Parse> イベントです。  
  
 構築するとき、 <xref:System.Windows.Forms.Binding> インスタンス <xref:System.Windows.Forms.Binding.%23ctor%2A> コンス トラクターは、次の 3 つの項目を指定する必要があります。  
  
-   バインドするコントロール プロパティの名前。  
  
-   データ ソース。  
  
-   リストまたはデータ ソースのプロパティに解決されるナビゲーション パス。 ナビゲーション パスは、オブジェクトの作成にも使用 <xref:System.Windows.Forms.Binding.BindingMemberInfo%2A> プロパティです。  
  
 まず、データをバインドするコントロール プロパティの名前を指定する必要があります。 たとえば、データを表示する、 <xref:System.Windows.Forms.TextBox> の制御、 <xref:System.Windows.Forms.TextBoxBase.Text%2A> プロパティです。  
  
 次に、データ ソースとして、次の表に、クラスのいずれかのインスタンスを指定できます。  
  
  3 番目に、空の文字列になる可能性がナビゲーション パスを指定する必要があります \(""\)、単一のプロパティ名または名のピリオド区切りの階層です。 ナビゲーション パスを空の文字列に設定すると、 <xref:System.Object.ToString%2A> 基になるデータ ソース オブジェクトでメソッドが呼び出されます。  
  
 データ ソースがある場合、 <xref:System.Data.DataTable>, を複数含めることができる <xref:System.Data.DataColumn> オブジェクトのナビゲーション パスを使用して特定の列を解決する必要があります。  
  
> [!NOTE]
>  データ ソースがの場合、 <xref:System.Data.DataSet>, 、<xref:System.Data.DataViewManager>, 、または <xref:System.Data.DataTable>, 、実際にバインドする、 <xref:System.Data.DataView>です。 したがって、バインドされている行が、実際には <xref:System.Data.DataRowView> オブジェクトです。  
  
 データ ソースが複数含まれているオブジェクトに設定されている場合は、ピリオド区切りのナビゲーション パスが必要な <xref:System.Data.DataTable> オブジェクト \(など、 <xref:System.Data.DataSet> または <xref:System.Data.DataViewManager>\)。 \(その他のクラス オブジェクトを取得するプロパティを持つクラス\) などの他のオブジェクトへの参照を返すプロパティを持つオブジェクトにバインドする場合は、またピリオド区切りのナビゲーション パスを使用することができます。 たとえば、次のナビゲーション パスすべてでは、有効なデータ フィールドについて説明します。  
  
-   「1 つ」  
  
-   "Suppliers.CompanyName"  
  
-   "Regions.regionsToCustomers.CustomerFirstName"  
  
-   "Regions.regionsToCustomers.customersToOrders.ordersToDetails.Quantity"  
  
 パスの各メンバーには、いずれかの \(整数\) などの単一の値に解決されるプロパティまたは文字列の配列\) などの値の一覧を返すことができます。 パス内の各メンバーは、リストまたはプロパティが、最後のメンバーがプロパティに解決する必要があります。 各メンバーは、前のメンバーには: 1 つの解決、 <xref:System.Drawing.Size.Height%2A> 現在のプロパティ <xref:System.Drawing.Size>です。"Regions.regionsToCustomers.CustomerFirstName"名に解決される、最初に現在の顧客な顧客では、現在の地域に住む顧客のいずれかです。  
  
 A <xref:System.Data.DataRelation> 1 つをリンクすることによって値の一覧を返す <xref:System.Data.DataTable> もう 1 つ <xref:System.Data.DataTable> で、 <xref:System.Data.DataSet>です。 場合、 <xref:System.Data.DataSet> が含まれています <xref:System.Data.DataRelation> オブジェクトとデータ メンバーを指定することができます、 <xref:System.Data.DataTable.TableName%2A> 続けて、 <xref:System.Data.DataRelation.RelationName%2A>, 、し、 <xref:System.Data.DataColumn.ColumnName%2A>です。 などの場合、 <xref:System.Data.DataTable> "Suppliers"という名前を含む、 <xref:System.Data.DataRelation> "suppliers2products"というデータ メンバーは"Suppliers.suppliers2products.ProductName"をする可能性があります。  
  
 データ ソースは、関連するクラスのセットで構成できます。 たとえば、太陽系一連のクラスがあるとします。 という名前のクラス `System` という名前のプロパティを含む `Stars` のコレクションを返す `Star` オブジェクトです。 各 `Star` オブジェクトには `Name` と `Mass` プロパティと同様に、 `Planets` プロパティのコレクションを返す `Planet` オブジェクトです。 このシステムは、各惑星もが `Mass` と `Name` プロパティです。 各 `Planet` オブジェクトをさらに、 `Moons` プロパティのコレクションを返す `Moon` もこれらの各オブジェクト `Name` と `Mass` プロパティです。 指定した場合、 `System` オブジェクト データ ソースとしてデータ メンバーとして、次のいずれかを指定できます。  
  
-   "Stars.Name"  
  
-   "Stars.Mass"  
  
-   "Stars.Planets.Name"  
  
-   "Stars.Planets.Mass"  
  
-   "Stars.Planets.Moons.Name"  
  
-   "Stars.Planets.Moons.Mass"  
  
 単純バインドできるコントロールの機能のコレクション <xref:System.Windows.Forms.Binding> 内のオブジェクト、 <xref:System.Windows.Forms.ControlBindingsCollection>, 、コントロールのを介してアクセスできる <xref:System.Windows.Forms.Control.DataBindings%2A> プロパティです。 追加する、 <xref:System.Windows.Forms.Binding> を呼び出すことによってコレクションに、 <xref:System.Windows.Forms.ControlBindingsCollection.Add%2A> メソッド、それによって、オブジェクトのプロパティ \(または、リストの現在のオブジェクトのプロパティ\)、コントロールのプロパティをバインドします。  
  
 単純な連結できますから派生した任意のオブジェクトに、 <xref:System.Windows.Forms.Control?displayProperty=fullName> クラス、たとえば、次の Windows のコントロール。  
  
-   <xref:System.Windows.Forms.Button>  
  
-   <xref:System.Windows.Forms.CheckBox>  
  
-   <xref:System.Windows.Forms.CheckedListBox>  
  
-   <xref:System.Windows.Forms.ComboBox>  
  
-   <xref:System.Windows.Forms.DateTimePicker>  
  
-   <xref:System.Windows.Forms.DomainUpDown>  
  
-   <xref:System.Windows.Forms.GroupBox>  
  
-   <xref:System.Windows.Forms.HScrollBar>  
  
-   <xref:System.Windows.Forms.Label>  
  
-   <xref:System.Windows.Forms.LinkLabel>  
  
-   <xref:System.Windows.Forms.ListBox>  
  
-   <xref:System.Windows.Forms.ListView>  
  
-   <xref:System.Windows.Forms.MonthCalendar>  
  
-   <xref:System.Windows.Forms.NumericUpDown>  
  
-   <xref:System.Windows.Forms.PictureBox>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.RadioButton>  
  
-   <xref:System.Windows.Forms.RichTextBox>  
  
-   <xref:System.Windows.Forms.ScrollBar>  
  
-   <xref:System.Windows.Forms.StatusBar>  
  
-   <xref:System.Windows.Forms.TextBox>  
  
-   <xref:System.Windows.Forms.TreeView>  
  
-   <xref:System.Windows.Forms.VScrollBar>  
  
> [!NOTE]
>  のみ、 <xref:System.Windows.Forms.ListControl.SelectedValue%2A> のプロパティ、 <xref:System.Windows.Forms.ComboBox>, 、<xref:System.Windows.Forms.CheckedListBox>, 、および <xref:System.Windows.Forms.ListBox> コントロールが単純なバインドされています。  
  
 <xref:System.Windows.Forms.BindingManagerBase> クラスはすべて管理する抽象クラス、 <xref:System.Windows.Forms.Binding> 、特定のデータ ソースおよびデータ メンバー オブジェクトです。 派生するクラス <xref:System.Windows.Forms.BindingManagerBase> は、 <xref:System.Windows.Forms.CurrencyManager> と <xref:System.Windows.Forms.PropertyManager> クラスです。 方法、 <xref:System.Windows.Forms.Binding> 管理されているかによって異なります、 <xref:System.Windows.Forms.Binding> リストのバインディングまたはプロパティのバインディングは、です。 などのリストのバインディングの場合を使用できます、 <xref:System.Windows.Forms.BindingManagerBase> を指定する、 <xref:System.Windows.Forms.BindingManagerBase.Position%2A> の一覧で、 <xref:System.Windows.Forms.BindingManagerBase.Position%2A>, 、したがって、決定 \(外の一覧にすべての項目\) には、どの項目が、コントロールにバインドされて実際にします。 適切な戻ります <xref:System.Windows.Forms.BindingManagerBase>, を使用して、 <xref:System.Windows.Forms.BindingContext>です。  
  
 同じにバインドされるコントロールのセットに新しい行を追加する <xref:System.Windows.Forms.Binding.DataSource%2A>, を使用して、 <xref:System.Windows.Forms.BindingManagerBase.AddNew%2A> のメソッド、 <xref:System.Windows.Forms.BindingManagerBase> クラスです。 使用して、 <xref:System.Windows.Forms.BindingContext.Item%2A> のプロパティ、 <xref:System.Windows.Forms.BindingContext> を返す、適切なクラス <xref:System.Windows.Forms.CurrencyManager>します。 新しい行の追加をエスケープを使用して、 <xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A> メソッドです。  
  
   
  
## 例  
 次のコード例では、単純なデータ バインディングを示すいくつかのコントロールと Windows フォームを作成します。 例を作成し、 <xref:System.Data.DataSet> という名前の 2 つのテーブルと `Customers` と `Orders`, 、および <xref:System.Data.DataRelation> という名前 `custToOrders`します。 4 つのコントロール \(、 <xref:System.Windows.Forms.DateTimePicker> および 3 つ <xref:System.Windows.Forms.TextBox> コントロール\) は、テーブルの列にバインドされたデータ。 各コントロールの例を作成し、追加、 <xref:System.Windows.Forms.Binding> を通じてコントロールを <xref:System.Windows.Forms.Control.DataBindings%2A> プロパティです。 例では、取得、 <xref:System.Windows.Forms.BindingManagerBase> フォームの各テーブルに対して <xref:System.Windows.Forms.BindingContext>します。 次の 4 つ <xref:System.Windows.Forms.Button> インクリメントまたはデクリメントを制御、 <xref:System.Windows.Forms.BindingManagerBase.Position%2A> プロパティを <xref:System.Windows.Forms.BindingManagerBase> オブジェクトです。  
  
 [!code-cpp[Classic Binding Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding Example/CS/source.cs#1)]
 [!code-vb[Classic Binding Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.BindingContext" />
    <altmember cref="T:System.Windows.Forms.BindingManagerBase" />
    <altmember cref="T:System.Windows.Forms.ComboBox" />
    <altmember cref="T:System.Windows.Forms.DataGrid" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">バインドするコントロール プロパティの名前。</param>
        <param name="dataSource">データ ソースを表す <see cref="T:System.Object" />。</param>
        <param name="dataMember">バインド先のプロパティまたはリスト。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Windows.Forms.Binding" /> データ ソースの指定されたデータ メンバーを指定したコントロール プロパティを簡易バインドするクラス。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 任意のデータ ソースの次のクラスのインスタンスを指定できます。  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   実装するクラス、 <xref:System.Collections.IList> インターフェイス  
  
-   任意のクラス  
  
 参照してください、 <xref:System.Windows.Forms.Binding> クラスを作成する方法について、 `dataMember` 文字列。  
  
 コントロールのプロパティへのバインドを作成するときに、新しい <xref:System.Windows.Forms.Binding> 、バインドされたコントロールによって公開されるイベントを検査し、2 つの特定のイベントにアタッチします。  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=fullName>  
  
-   という名前のイベント *PropertyName*`Changed` \(たとえば、 <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=fullName>\)  
  
 存在しないプロパティにバインドしようとすると、 <xref:System.ArgumentException> 場合にスローされます、 <xref:System.Windows.Forms.Binding> コントロールの追加 <xref:System.Windows.Forms.Control.DataBindings%2A?displayProperty=fullName> コレクションです。  
  
   
  
## 例  
 次のコード例のバインド、 <xref:System.Windows.Forms.TextBox> コントロールのテーブルの列を <xref:System.Data.DataSet> という `myDataSet`します。 この例で宣言した `myDataSet` モジュールの宣言セクションにします。  
  
 [!code-cpp[Classic Binding.Binding Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Binding Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Binding Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Binding Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Binding Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Binding Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">
          <paramref name="propertyName" /> コントロールの有効なプロパティも、空の文字列 \(""\) です。</exception>
        <exception cref="T:System.ArgumentException">によって指定されるプロパティ <paramref name="propertyName" /> コントロールに存在しません。</exception>
        <altmember cref="T:System.Windows.Forms.BindingsCollection" />
        <altmember cref="T:System.Windows.Forms.CurrencyManager" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">バインドするコントロール プロパティの名前。</param>
        <param name="dataSource">データ ソースを表す <see cref="T:System.Object" />。</param>
        <param name="dataMember">バインド先のプロパティまたはリスト。</param>
        <param name="formattingEnabled">表示されるデータの書式を指定する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Windows.Forms.Binding" /> クラスを指定したコントロール プロパティをデータ ソースの指定したデータ メンバーにバインドでき、必要に応じて書式を適用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">によって指定されるプロパティ <paramref name="propertyName" /> コントロールに存在しません。  
  
 または  
  
 指定されたプロパティは、読み取り専用プロパティです。</exception>
        <exception cref="T:System.Exception">書式設定を無効にし、 <paramref name="propertyName" /> はコントロールの有効なプロパティも、空の文字列 \(""\) です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" />
      </Parameters>
      <Docs>
        <param name="propertyName">バインドするコントロール プロパティの名前。</param>
        <param name="dataSource">データ ソースを表す <see cref="T:System.Object" />。</param>
        <param name="dataMember">バインド先のプロパティまたはリスト。</param>
        <param name="formattingEnabled">表示されるデータの書式を指定する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <param name="dataSourceUpdateMode">
          <see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> 値のいずれか。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Windows.Forms.Binding" /> 指定したコントロール プロパティを指定したデータ ソースの指定したデータ メンバーにバインドされるクラスです。 オプションで書式を有効にしたり、特定の更新設定に基づいてデータ ソースに値を反映したりできます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 任意のデータ ソースの次のクラスのインスタンスを指定できます。  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   実装するクラス、 <xref:System.Collections.IList> インターフェイス  
  
-   任意のクラス  
  
 参照してください、 <xref:System.Windows.Forms.Binding> クラスを作成する方法について、 `dataMember` 文字列。  
  
 コントロールのプロパティへのバインドを作成するときに、新しい <xref:System.Windows.Forms.Binding> 、バインドされたコントロールによって公開されるイベントを検査し、2 つの特定のイベントにアタッチします。  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=fullName>。  
  
-   という名前のイベント *PropertyName*`Changed` \(たとえば、 <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=fullName>\)  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">によって指定されるプロパティ <paramref name="propertyName" /> コントロールに存在しません。  
  
 または  
  
 指定されるデータ ソースまたはデータ メンバーまたはコントロール プロパティは、コレクション内の別のバインディングに関連付けられます。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode,System.Object)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" />
        <Parameter Name="nullValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="propertyName">バインドするコントロール プロパティの名前。</param>
        <param name="dataSource">データ ソースを表す <see cref="T:System.Object" />。</param>
        <param name="dataMember">バインド先のプロパティまたはリスト。</param>
        <param name="formattingEnabled">表示されるデータの書式を指定する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <param name="dataSourceUpdateMode">
          <see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> 値のいずれか。</param>
        <param name="nullValue">
          <see cref="T:System.Object" /> 場合は、データ ソースの値にバインドされたコントロール プロパティに適用されるは <see cref="T:System.DBNull" />です。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Windows.Forms.Binding" /> 指定したコントロール プロパティを指定したデータ ソースの指定したデータ メンバーにバインドされるクラスです。 必要に応じて書式を有効し、特定の更新設定に基づいてデータ ソースに値を反映しを指定したプロパティを設定値に設定と、 <see cref="T:System.DBNull" /> がデータ ソースから返されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 任意のデータ ソースの次のクラスのインスタンスを指定できます。  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   実装するクラス、 <xref:System.Collections.IList> インターフェイス  
  
-   任意のクラス  
  
 参照してください、 <xref:System.Windows.Forms.Binding> クラスを作成する方法について、 `dataMember` 文字列。  
  
 コントロールのプロパティへのバインドを作成するときに、新しい <xref:System.Windows.Forms.Binding> 、バインドされたコントロールによって公開されるイベントを検査し、2 つの特定のイベントにアタッチします。  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=fullName>  
  
-   という名前のイベント *PropertyName*`Changed` \(たとえば、 <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=fullName>\)  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">によって指定されるプロパティ <paramref name="propertyName" /> コントロールに存在しません。  
  
 または  
  
 指定されるデータ ソースまたはデータ メンバーまたはコントロール プロパティは、コレクション内の別のバインディングに関連付けられます。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode,System.Object,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" />
        <Parameter Name="nullValue" Type="System.Object" />
        <Parameter Name="formatString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">バインドするコントロール プロパティの名前。</param>
        <param name="dataSource">データ ソースを表す <see cref="T:System.Object" />。</param>
        <param name="dataMember">バインド先のプロパティまたはリスト。</param>
        <param name="formattingEnabled">表示されるデータの書式を指定する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <param name="dataSourceUpdateMode">
          <see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> 値のいずれか。</param>
        <param name="nullValue">
          <see cref="T:System.Object" /> 場合は、データ ソースの値にバインドされたコントロール プロパティに適用されるは <see cref="T:System.DBNull" />です。</param>
        <param name="formatString">値の表示方法を示す 1 つ以上の書式指定子文字。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Windows.Forms.Binding" /> 指定したコントロール プロパティを指定したデータ ソースの指定したデータ メンバーにバインドされるクラスです。 により、必要に応じて、指定した書式指定文字列に書式設定指定した更新設定に基づいてデータ ソースに値を反映します。指定したプロパティを設定およびときの値、 <see cref="T:System.DBNull" /> がデータ ソースから返されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 任意のデータ ソースの次のクラスのインスタンスを指定できます。  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   実装するクラス、 <xref:System.Collections.IList> インターフェイス  
  
-   任意のクラス  
  
 参照してください、 <xref:System.Windows.Forms.Binding> クラスを作成する方法について、 `dataMember` 文字列。  
  
 コントロールのプロパティへのバインドを作成するときに、新しい <xref:System.Windows.Forms.Binding> 、バインドされたコントロールによって公開されるイベントを検査し、2 つの特定のイベントにアタッチします。  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=fullName>  
  
-   という名前のイベント *PropertyName*`Changed` \(たとえば、 <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=fullName>\)  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">によって指定されるプロパティ <paramref name="propertyName" /> コントロールに存在しません。  
  
 または  
  
 指定されるデータ ソースまたはデータ メンバーまたはコントロール プロパティは、コレクション内の別のバインディングに関連付けられます。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString, IFormatProvider formatInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString, class System.IFormatProvider formatInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode,System.Object,System.String,System.IFormatProvider)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" />
        <Parameter Name="nullValue" Type="System.Object" />
        <Parameter Name="formatString" Type="System.String" />
        <Parameter Name="formatInfo" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="propertyName">バインドするコントロール プロパティの名前。</param>
        <param name="dataSource">データ ソースを表す <see cref="T:System.Object" />。</param>
        <param name="dataMember">バインド先のプロパティまたはリスト。</param>
        <param name="formattingEnabled">表示されるデータの書式を指定する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <param name="dataSourceUpdateMode">
          <see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> 値のいずれか。</param>
        <param name="nullValue">
          <see cref="T:System.Object" /> 場合は、データ ソースの値にバインドされたコントロール プロパティに適用されるは <see cref="T:System.DBNull" />です。</param>
        <param name="formatString">値の表示方法を示す 1 つ以上の書式指定子文字。</param>
        <param name="formatInfo">既定の書式指定動作をオーバーライドする <see cref="T:System.IFormatProvider" /> の実装。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Windows.Forms.Binding" /> 指定したデータ ソースの指定したデータ メンバーの指定したコントロール プロパティを持つクラス。 により、必要に応じて、指定した書式指定文字列に書式設定指定した更新設定に基づいてデータ ソースに値を反映します。により、指定した書式指定文字列に書式設定指定したプロパティを設定するときの値、 <see cref="T:System.DBNull" /> データ ソースから返され、指定された書式プロバイダーを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 任意のデータ ソースの次のクラスのインスタンスを指定できます。  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   実装するクラス、 <xref:System.Collections.IList> インターフェイス  
  
-   任意のクラス  
  
 参照してください、 <xref:System.Windows.Forms.Binding> クラスを作成する方法について、 `dataMember` 文字列。  
  
 コントロールのプロパティへのバインドを作成するときに、新しい <xref:System.Windows.Forms.Binding> 、バインドされたコントロールによって公開されるイベントを検査し、2 つの特定のイベントにアタッチします。  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=fullName>  
  
-   という名前のイベント *PropertyName*`Changed` \(たとえば、 <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=fullName>\)  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">によって指定されるプロパティ <paramref name="propertyName" /> コントロールに存在しません。  
  
 または  
  
 指定されるデータ ソースまたはデータ メンバーまたはコントロール プロパティは、コレクション内の別のバインディングに関連付けられます。</exception>
      </Docs>
    </Member>
    <Member MemberName="BindableComponent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.IBindableComponent BindableComponent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.IBindableComponent BindableComponent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.BindableComponent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.IBindableComponent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールを取得、 <see cref="T:System.Windows.Forms.Binding" /> に関連付けられています。</summary>
        <value>
          <see cref="T:System.Windows.Forms.IBindableComponent" /> 、 <see cref="T:System.Windows.Forms.Binding" /> に関連付けられています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingComplete">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.BindingCompleteEventHandler BindingComplete;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.BindingCompleteEventHandler BindingComplete" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Binding.BindingComplete" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingCompleteEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに、 <see cref="P:System.Windows.Forms.Binding.FormattingEnabled" /> にプロパティが設定されている <see langword="true" /> バインディング操作が完了すると、データ ソースまたはその逆のコントロールからデータをプッシュするときなど、</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、次のいずれかで発生する場合の条件 <xref:System.Windows.Forms.Binding.FormattingEnabled%2A> は `true`:  
  
-   データ ソースのデータは、コントロールのプロパティにプッシュされます。  
  
-   コントロール プロパティからのデータは、データ ソースにプッシュされます。  
  
 このイベントは、完了ステータスに依存しないこれらの操作の完了時に発生します。 バインド操作に null 値をバインドする場合など、 <xref:System.Windows.Forms.DateTimePicker.Value%2A> プロパティには、例外がスローされますが、 <xref:System.Windows.Forms.Binding.BindingComplete> イベントが引き続き発生します。 このイベントのハンドラーが確認するには、成功した場合、エラー、またはバインド プロセスでの例外に基づく、適切なアクションを実行、 <xref:System.Windows.Forms.BindingCompleteEventArgs.BindingCompleteState%2A> のプロパティ、 <xref:System.Windows.Forms.BindingCompleteEventArgs> パラメーター。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例では、処理、 <xref:System.Windows.Forms.Binding.BindingComplete> イベントです。  
  
 [!code-cpp[System.Windows.Forms.DataConnectorBindingComplete\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorBindingComplete/CPP/form1.cpp#3)]
 [!code-csharp[System.Windows.Forms.DataConnectorBindingComplete\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorBindingComplete/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.DataConnectorBindingComplete\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorBindingComplete/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Binding.FormattingEnabled" />
        <altmember cref="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="BindingManagerBase">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BindingManagerBase BindingManagerBase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.BindingManagerBase BindingManagerBase" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.BindingManagerBase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingManagerBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Windows.Forms.BindingManagerBase" /> の <see cref="T:System.Windows.Forms.Binding" /> を取得します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.BindingManagerBase" /> を管理する <see cref="T:System.Windows.Forms.Binding" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Windows.Forms.BindingManagerBase> インクリメントまたはデクリメントしてデータ バインド リストを反復処理する、 <xref:System.Windows.Forms.BindingManagerBase.Position%2A> プロパティです。<xref:System.Windows.Forms.BindingManagerBase> クラスは抽象クラスです。<xref:System.Windows.Forms.CurrencyManager> データ バインド リストを管理するクラスから継承、 <xref:System.Windows.Forms.BindingManagerBase> クラスです。  
  
   
  
## 例  
 次のコード例を取得、 <xref:System.Windows.Forms.BindingManagerBase> の各 <xref:System.Windows.Forms.Binding> フォーム、および印刷の <xref:System.Windows.Forms.BindingManagerBase.Position%2A> プロパティごとに <xref:System.Windows.Forms.BindingManagerBase>します。  
  
 [!code-cpp[Classic Binding.BindingManagerBase Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.BindingManagerBase Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.BindingManagerBase Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.BindingManagerBase Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.BindingManagerBase Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.BindingManagerBase Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingMemberInfo">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BindingMemberInfo BindingMemberInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.BindingMemberInfo BindingMemberInfo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.BindingMemberInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingMemberInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このバインディングに基づく情報が含まれたオブジェクトを取得、 <paramref name="dataMember" /> 内のパラメーター、 <see cref="Overload:System.Windows.Forms.Binding.#ctor" /> コンス トラクターです。</summary>
        <value>A <see cref="T:System.Windows.Forms.BindingMemberInfo" /> これに関する情報を含む <see cref="T:System.Windows.Forms.Binding" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.BindingMemberInfo> から作成された、 `dataMember` に渡された文字列、 <xref:System.Windows.Forms.Binding.%23ctor%2A> コンス トラクターです。  
  
   
  
## 例  
 次のコード例を取得、 <xref:System.Windows.Forms.BindingMemberInfo> それぞれの <xref:System.Windows.Forms.Binding> フォーム、および印刷、 <xref:System.Windows.Forms.BindingMemberInfo.BindingPath%2A>, 、<xref:System.Windows.Forms.BindingMemberInfo.BindingField%2A>, 、および <xref:System.Windows.Forms.BindingMemberInfo.BindingMember%2A> プロパティの値を <xref:System.Windows.Forms.Binding>します。  
  
 [!code-cpp[Classic Binding.BindingMemberInfo Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.BindingMemberInfo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.BindingMemberInfo Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.BindingMemberInfo Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.BindingMemberInfo Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.BindingMemberInfo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.BindingsCollection" />
      </Docs>
    </Member>
    <Member MemberName="Control">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control Control { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control Control" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.Control" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>バインディングが属するコントロールを取得します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.Control" /> バインディングが属するします。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例を取得、 <xref:System.Windows.Forms.BindingManagerBase> 印刷については、特定のデータ ソースの <xref:System.Windows.Forms.Binding.Control%2A> データ ソースにバインドされているプロパティ。 例では、 <xref:System.Windows.Forms.BindingManagerBase.Bindings%2A> のプロパティ、 <xref:System.Windows.Forms.BindingManagerBase> をすべてのコントロールを取得します。  
  
 [!code-cpp[Classic Binding.Control Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Control Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Control Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Control Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Control Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Control Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlUpdateMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ControlUpdateMode ControlUpdateMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ControlUpdateMode ControlUpdateMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.ControlUpdateMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlUpdateMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソースの変更が、バインドされたコントロール プロパティにいつ反映されるかを取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ControlUpdateMode" /> 値のいずれか。 既定値は、<see cref="F:System.Windows.Forms.ControlUpdateMode.OnPropertyChanged" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public object DataSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.DataSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このバインディングのデータ ソースを取得します。</summary>
        <value>データ ソースを表す <see cref="T:System.Object" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Possible data sources include:  
  
-   A <xref:System.Data.DataSet>  
  
-   A <xref:System.Data.DataTable>  
  
-   A <xref:System.Data.DataView>  
  
-   A <xref:System.Data.DataViewManager>  
  
-   Any object that implements the <xref:System.Collections.IList> interface  
  
-   Any object  
  
   
  
## 例  
 The following code example uses the <xref:System.Windows.Forms.Binding.DataSource%2A> property to return a <xref:System.Data.DataSet>.  
  
 [!code-cpp[Classic Binding.DataSource Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.DataSource Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.DataSource Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.DataSource Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.DataSource Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.DataSource Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSourceNullValue">
      <MemberSignature Language="C#" Value="public object DataSourceNullValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataSourceNullValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.DataSourceNullValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの値がある場合、データ ソースに格納される値取得または設定 <see langword="null" /> または空です。</summary>
        <value>
          <see cref="T:System.Object" /> コントロールのプロパティが空の場合は、データ ソースに格納されるか、 <see langword="null" />です。 既定値は <see cref="T:System.DBNull" /> 値型と <see langword="null" /> 値以外の種類。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することができます、 <xref:System.Windows.Forms.Binding.NullValue%2A> プロパティをデータ ソースが含まれている場合は、バインドされたコントロールに表示される値を指定する <xref:System.DBNull>です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Binding.NullValue" />
      </Docs>
    </Member>
    <Member MemberName="DataSourceUpdateMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataSourceUpdateMode DataSourceUpdateMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataSourceUpdateMode DataSourceUpdateMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.DataSourceUpdateMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataSourceUpdateMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>バインドされたコントロール プロパティの変更がデータ ソースにいつ反映されるかを示す値を取得または設定します。</summary>
        <value>変更が反映されたことを示す値。 既定値は、<see cref="F:System.Windows.Forms.DataSourceUpdateMode.OnValidation" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Note that even if this property is set to <xref:System.Windows.Forms.DataSourceUpdateMode.Never>, the binding will update at least one time, when it is first established.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ConvertEventHandler Format;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ConvertEventHandler Format" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Binding.Format" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ConvertEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールのプロパティをデータ値にバインドすると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Binding.Format> コントロールにデータ ソースからデータがプッシュされたときにイベントが発生します。 処理できる、 <xref:System.Windows.Forms.Binding.Format> 書式付きデータを表示するためのイベントにデータ ソースから書式設定されていないデータを変換します。 データ ソースにコントロールからデータを引き出すと、 <xref:System.Windows.Forms.Binding.Parse> アンフォーマット表示された値をイベントが発生し、 <xref:System.Windows.Forms.Binding.Format> データの表示の書式を変更するイベントが発生しました。 これにより、バインドされたコントロールが、ユーザーがコントロールに書式設定された、または書式設定されていないデータを入力するかどうかに関係なく正しく書式設定されたデータを表示します。  
  
 <xref:System.Windows.Forms.Binding.Format> と <xref:System.Windows.Forms.Binding.Parse> イベントでは、データを表示するためのカスタム形式を作成できます。 たとえば、テーブル内のデータが型の場合 <xref:System.Decimal>, 、現地の通貨形式で設定して、データを表示することができます、 <xref:System.Windows.Forms.ConvertEventArgs.Value%2A> のプロパティ、 <xref:System.Windows.Forms.ConvertEventArgs> で書式設定された値を <xref:System.Windows.Forms.Binding.Format> イベントです。 その結果に表示される値をアンフォーマットする必要があります、 <xref:System.Windows.Forms.Binding.Parse> イベントです。  
  
 <xref:System.Windows.Forms.Binding.Format> イベントが発生するたびに、 <xref:System.Windows.Forms.BindingManagerBase.Current%2A> の値、 <xref:System.Windows.Forms.BindingManagerBase> 変更が含まれています。  
  
-   最初に、プロパティがバインドされています。  
  
-   いつでも、 <xref:System.Windows.Forms.BindingManagerBase.Position%2A> 変更します。  
  
-   ときにデータ バインド リストは並べ替えまたはフィルター選択、これは実行するときに、 <xref:System.Data.DataView> 一覧を提供します。  
  
 <xref:System.Windows.Forms.Binding.Format> イベントが発生した後、 <xref:System.Windows.Forms.Binding.Parse> イベントです。 たとえば、コントロールがフォーカスを失ったときにその内容が解析されます。 その後すぐに、新しいデータは、コントロールへのプッシュは、 <xref:System.Windows.Forms.Binding.Format> イベントは、新しいコンテンツだけを書式設定が発生します。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例を作成、 <xref:System.Windows.Forms.Binding>, を追加、 <xref:System.Windows.Forms.ConvertEventHandler> 両方にデリゲート、 <xref:System.Windows.Forms.Binding.Parse> と <xref:System.Windows.Forms.Binding.Format> イベントを追加し、 <xref:System.Windows.Forms.Binding> に、 <xref:System.Windows.Forms.BindingsCollection> の <xref:System.Windows.Forms.TextBox> を通じて制御、 <xref:System.Windows.Forms.Control.DataBindings%2A> プロパティです。`DecimalToCurrencyString` に追加されるイベント デリゲート、 <xref:System.Windows.Forms.Binding.Format> イベント、バインドされた値を書式設定 \(、 <xref:System.Decimal> 型\) の通貨を使用して、 <xref:System.Decimal.ToString%2A> メソッドです。`CurrencyStringToDecimal` に追加されるイベント デリゲート、 <xref:System.Windows.Forms.Binding.Parse> イベントがコントロールによって表示される値に変換に、 <xref:System.Decimal> 型です。  
  
 この例の存在、 <xref:System.Data.DataSet> という `ds`します。  
  
 [!code-cpp[Classic Binding.Format Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Format Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Format Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Format Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Format Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Format Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Binding.Parse" />
        <altmember cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="FormatInfo">
      <MemberSignature Language="C#" Value="public IFormatProvider FormatInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IFormatProvider FormatInfo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.FormatInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IFormatProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、 <see cref="T:System.IFormatProvider" /> カスタム書式設定動作を提供します。</summary>
        <value>
          <see cref="T:System.IFormatProvider" /> をカスタム書式設定動作を提供します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを設定すると、既定の書式を使用する動作がオーバーライドされます、 <xref:System.Windows.Forms.Application.CurrentCulture%2A?displayProperty=fullName> プロパティの設定です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatString">
      <MemberSignature Language="C#" Value="public string FormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FormatString" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.FormatString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>値の表示方法を示す書式指定子文字を取得または設定します。</summary>
        <value>値の表示方法を示す書式指定子文字の文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する書式文字列は、標準の .NET Framework の書式指定に従う必要があります。 詳細については、次を参照してください。 [.NET Framework の型の書式設定](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormattingEnabled">
      <MemberSignature Language="C#" Value="public bool FormattingEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FormattingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.FormattingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロール プロパティ データに型変換および書式指定が適用されるかどうかを示す値を取得または設定します。</summary>
        <value>
          <see langword="true" /> 型変換とコントロール プロパティ データの書式設定が有効な場合です。それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを設定 `true` もエラー処理動作を有効にし、 <xref:System.Windows.Forms.Binding.BindingComplete> イベントが発生します。 このイベントのハンドラーが確認するには、成功した場合、エラー、またはバインド プロセスでの例外に基づく、適切なアクションを実行、 <xref:System.Windows.Forms.BindingCompleteEventArgs.BindingCompleteState%2A> のプロパティ、 <xref:System.Windows.Forms.BindingCompleteEventArgs> パラメーター。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Binding.BindingComplete" />
        <altmember cref="T:System.Windows.Forms.BindingCompleteEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="IsBinding">
      <MemberSignature Language="C#" Value="public bool IsBinding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBinding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.IsBinding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>バインディングがアクティブかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> バインディングがアクティブである場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 バインディングがこれらの条件を満たしている場合にアクティブです  
  
-   すべてのプロパティが設定されます。  
  
-   ユーザーを呼び出さなかった <xref:System.Windows.Forms.BindingManagerBase.ResumeBinding%2A> または <xref:System.Windows.Forms.BindingManagerBase.SuspendBinding%2A> 上、 <xref:System.Windows.Forms.BindingManagerBase> を <xref:System.Windows.Forms.Binding> に属しています。  
  
-   コントロールを <xref:System.Windows.Forms.Binding> が属しているが作成されました。  
  
   
  
## 例  
 例の出力を次のコード、 <xref:System.Windows.Forms.Binding.PropertyName%2A> と <xref:System.Windows.Forms.Binding.IsBinding%2A> ごとに値 <xref:System.Windows.Forms.Binding> フォームにします。  
  
 [!code-cpp[Classic Binding.IsBinding Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.IsBinding Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.IsBinding Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.IsBinding Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.IsBinding Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.IsBinding Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NullValue">
      <MemberSignature Language="C#" Value="public object NullValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NullValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.NullValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、 <see cref="T:System.Object" /> をデータ ソースが含まれている場合は、コントロールのプロパティとして設定する、 <see cref="T:System.DBNull" /> 値。</summary>
        <value>
          <see cref="T:System.Object" /> をデータ ソースが含まれている場合は、コントロールのプロパティとして設定する、 <see cref="T:System.DBNull" /> 値。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 データ ソースを含める必要があります <xref:System.DBNull> の <xref:System.Windows.Forms.Binding.NullValue%2A> プロパティを適切に適用します。 データ ソースの種類の場合は、文字列や整数などの型の値、 <xref:System.Windows.Forms.Binding.NullValue%2A> プロパティは無視されます。 また、 <xref:System.Windows.Forms.Binding.NullValue%2A> に設定されている場合、プロパティは無視されます `null`します。  
  
 オブジェクトにコントロールのプロパティが設定されている場合にその null 値がデータ ソースに追加された <xref:System.Windows.Forms.Binding.NullValue%2A>します。 場合 <xref:System.Windows.Forms.Binding.NullValue%2A> 設定されている文字列値を比較小文字は区別されません。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBindingComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnBindingComplete (System.Windows.Forms.BindingCompleteEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBindingComplete(class System.Windows.Forms.BindingCompleteEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.BindingCompleteEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.BindingCompleteEventArgs" /> イベント データを格納します。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Binding.BindingComplete" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Binding.OnBindingComplete%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnFormat">
      <MemberSignature Language="C#" Value="protected virtual void OnFormat (System.Windows.Forms.ConvertEventArgs cevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFormat(class System.Windows.Forms.ConvertEventArgs cevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cevent" Type="System.Windows.Forms.ConvertEventArgs" />
      </Parameters>
      <Docs>
        <param name="cevent">イベント データを格納している <see cref="T:System.Windows.Forms.ConvertEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Binding.Format" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Binding.OnFormat%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Binding.Format" />
        <altmember cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Binding.Parse" />
      </Docs>
    </Member>
    <Member MemberName="OnParse">
      <MemberSignature Language="C#" Value="protected virtual void OnParse (System.Windows.Forms.ConvertEventArgs cevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParse(class System.Windows.Forms.ConvertEventArgs cevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cevent" Type="System.Windows.Forms.ConvertEventArgs" />
      </Parameters>
      <Docs>
        <param name="cevent">イベント データを格納している <see cref="T:System.Windows.Forms.ConvertEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Binding.Parse" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[イベントの処理と発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 <xref:System.Windows.Forms.Binding.OnParse%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Binding.Format" />
        <altmember cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Binding.Parse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ConvertEventHandler Parse;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ConvertEventHandler Parse" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Binding.Parse" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ConvertEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ連結コントロールの値が変更されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Binding.Format> と <xref:System.Windows.Forms.Binding.Parse> イベントでは、データを表示するためのカスタム形式を作成できます。 たとえば、テーブル内のデータが型の場合 <xref:System.Decimal>, 、現地の通貨形式で設定して、データを表示することができます、 <xref:System.Windows.Forms.ConvertEventArgs.Value%2A> のプロパティ、 <xref:System.Windows.Forms.ConvertEventArgs> で書式設定された値を <xref:System.Windows.Forms.Binding.Format> イベントです。 その結果に表示される値をアンフォーマットする必要があります、 <xref:System.Windows.Forms.Binding.Parse> イベントです。  
  
 <xref:System.Windows.Forms.Binding.Parse> イベントは、次の条件が発生します。  
  
-   後に、 <xref:System.Windows.Forms.Control.Validated> のイベント、 <xref:System.Windows.Forms.Control> に発生します。  
  
-   ときに、 <xref:System.Windows.Forms.BindingManagerBase.EndCurrentEdit%2A> のメソッド、 <xref:System.Windows.Forms.BindingManagerBase> が呼び出されます。  
  
-   ときに、 <xref:System.Windows.Forms.BindingManagerBase.Current%2A> の <xref:System.Windows.Forms.BindingManagerBase> 変更 \(つまり、ときに、 <xref:System.Windows.Forms.BindingManagerBase.Position%2A> 変更\)。  
  
 イベント処理の詳細については、次を参照してください。 [クラスへのイベント](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次のコード例を作成、 <xref:System.Windows.Forms.Binding>, を追加、 <xref:System.Windows.Forms.ConvertEventHandler> 両方にデリゲート、 <xref:System.Windows.Forms.Binding.Parse> と <xref:System.Windows.Forms.Binding.Format> イベントを追加し、 <xref:System.Windows.Forms.Binding> に、 <xref:System.Windows.Forms.BindingsCollection> の <xref:System.Windows.Forms.TextBox> を通じて制御、 <xref:System.Windows.Forms.Control.DataBindings%2A> プロパティです。`DecimalToCurrencyString` に追加されるイベント デリゲート、 <xref:System.Windows.Forms.Binding.Format> イベント、バインドされた値を書式設定 \(、 <xref:System.Decimal> 型\) の通貨を使用して、 <xref:System.Decimal.ToString%2A> メソッドです。`CurrencyStringToDecimal` に追加されるイベント デリゲート、 <xref:System.Windows.Forms.Binding.Parse> イベントがコントロールによって表示される値に変換に、 <xref:System.Decimal> 型です。  
  
 [!code-cpp[Classic Binding.Parse Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Parse Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Parse Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Parse Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Parse Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Parse Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Binding.Format" />
        <altmember cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" />
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.PositionChanged" />
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.CurrentChanged" />
      </Docs>
    </Member>
    <Member MemberName="PropertyName">
      <MemberSignature Language="C#" Value="public string PropertyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PropertyName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.PropertyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールのデータ連結プロパティの名前を取得または設定します。</summary>
        <value>バインド先のコントロール プロパティの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Windows.Forms.Binding.PropertyName%2A> をデータ ソースの一覧にバインドするコントロール プロパティを指定します。 などの表示プロパティをバインドするほとんどの場合、 <xref:System.Windows.Forms.Control.Text%2A> のプロパティ、 <xref:System.Windows.Forms.TextBox> コントロールです。 ただし、コントロールの任意のプロパティをバインドするためは、コントロールをデータベースからデータを使用して、実行時に作成できますプログラムでしました。  
  
   
  
## 例  
 次のコード例の出力、 <xref:System.Windows.Forms.Binding.PropertyName%2A> の各値 <xref:System.Windows.Forms.Binding> フォーム上の各コントロールです。  
  
 [!code-cpp[Classic Binding.PropertyName Example\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.PropertyName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.PropertyName Example\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.PropertyName Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.PropertyName Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.PropertyName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadValue">
      <MemberSignature Language="C#" Value="public void ReadValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.ReadValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロール プロパティをデータ ソースから読み取った値に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public void WriteValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.WriteValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロール プロパティから現在の値を読み取って、データ ソースに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.Binding" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>