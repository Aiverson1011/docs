<Type Name="GiveFeedbackEventArgs" FullName="System.Windows.Forms.GiveFeedbackEventArgs">
  <TypeSignature Language="C#" Value="public class GiveFeedbackEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GiveFeedbackEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.GiveFeedbackEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>データを提供、 <see cref="E:System.Windows.Forms.Control.GiveFeedback" /> ドラッグ操作中に発生するイベントです。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.Control.GiveFeedback> イベントは、ドラッグ操作中に発生します。 ドラッグ アンド ドロップ操作中にユーザーに視覚的フィードバックを提供するためにマウス ポインターの外観を変更するドラッグ イベントのソースを使用します。 A <xref:System.Windows.Forms.GiveFeedbackEventArgs> オブジェクトがドラッグ アンド ドロップ操作と既定のカーソルを使用するかどうかの種類を指定します。  
  
 イベント モデルについては、次を参照してください。 [Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)します。  
  
   
  
## 例  
 次の例では、2 つのドラッグ アンド ドロップ操作 <xref:System.Windows.Forms.ListBox> コントロールです。 呼び出しの例、 <xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッド、ドラッグ操作の開始時にします。 マウスが移動した場合に、ドラッグ操作が開始以上 <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> 中にマウスの位置から、 <xref:System.Windows.Forms.Control.MouseDown> イベントです。<xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> メソッドを使用中にドラッグする項目のインデックスを確認して、 `MouseDown` イベントです。  
  
 例では、ドラッグ アンド ドロップ操作のカスタムのカーソルを使用しても示します。 この例では 2 つカーソル ファイル `3dwarro.cur` と `3dwno.cur`, 、カスタム ドラッグのアプリケーションのディレクトリに存在および非ドロップ カーソルの場合、それぞれします。 場合に使用されるカスタムのカーソル、 `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> がオンになっています。 カスタムのカーソルが設定されている、 <xref:System.Windows.Forms.Control.GiveFeedback> イベント ハンドラーです。  
  
 キーボードの状態を評価、 <xref:System.Windows.Forms.Control.DragOver> 右側のイベント ハンドラー `ListBox`, ドラッグ操作を決定するには、shift キーを押し、CTRL、alt キーを押し、または CTRL \+ ALT キーの状態に基づいています。 内の場所、 `ListBox` 時にも決定されますが、ドロップが発生する可能性、 `DragOver` イベントです。 削除するデータがない場合、 `String`, 、 <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> に設定されている <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=fullName>します。 削除の状態を表示する最後に、 `DropLocationLabel`<xref:System.Windows.Forms.Label>します。  
  
 右側にドロップするデータ `ListBox` で決定、 <xref:System.Windows.Forms.Control.DragDrop> イベント ハンドラーと `String` の適切な場所にある値を追加、 `ListBox`です。 ドラッグ操作が、フォームの境界の外側に移動しでドラッグ アンド ドロップ操作を取り消したかどうか、 <xref:System.Windows.Forms.Control.QueryContinueDrag> イベント ハンドラーです。  
  
 このコードの抜粋では、使用方法を示します、 <xref:System.Windows.Forms.GiveFeedbackEventArgs> クラスです。 参照してください、 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 完全なコード例のメソッドです。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#3)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GiveFeedbackEventArgs (System.Windows.Forms.DragDropEffects effect, bool useDefaultCursors);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Forms.DragDropEffects effect, bool useDefaultCursors) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.GiveFeedbackEventArgs.#ctor(System.Windows.Forms.DragDropEffects,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="effect" Type="System.Windows.Forms.DragDropEffects" />
        <Parameter Name="useDefaultCursors" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="effect">ドラッグ アンド ドロップ操作の種類。 使用可能な値は、ビットごとの適用を取得または \(|\) 演算を定数で定義されている、 <see cref="T:System.Windows.Forms.DragDropEffects" />です。</param>
        <param name="useDefaultCursors">
          <see langword="true" /> 既定のポインターが使用される場合それ以外の場合、 <see langword="false" />です。</param>
        <summary>
          <see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DragDropEffects Effect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DragDropEffects Effect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.GiveFeedbackEventArgs.Effect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragDropEffects</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示されているドラッグ アンド ドロップ操作のフィードバックを取得します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DragDropEffects" /> 値のいずれか。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 The following example demonstrates a drag\-and\-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the **languageKeyword tag is not supported!!!!**  
 event.  
  
 The example also demonstrates using custom cursors for the drag\-and\-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no\-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  
  
 The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right **languageKeyword tag is not supported!!!!**  
, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL\+ALT keys. The location in the **languageKeyword tag is not supported!!!!**  
 where the drop would occur is also determined during the **languageKeyword tag is not supported!!!!**  
 event. If the data to drop is not a **languageKeyword tag is not supported!!!!**  
, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  
  
 The data to drop for the right **languageKeyword tag is not supported!!!!**  
 is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the **languageKeyword tag is not supported!!!!**  
 value is added at the appropriate place in the **languageKeyword tag is not supported!!!!**  
. If the drag operation moves outside the bounds of the form, then the drag\-and\-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  
  
 This code excerpt demonstrates using the <xref:System.Windows.Forms.GiveFeedbackEventArgs> class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#3)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseDefaultCursors">
      <MemberSignature Language="C#" Value="public bool UseDefaultCursors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseDefaultCursors" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.GiveFeedbackEventArgs.UseDefaultCursors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ドラッグ操作において、ドラッグ アンド ドロップ効果に関連付けられている既定のカーソルを使用するかどうかを取得または設定します。</summary>
        <value>
          <see langword="true" /> 既定のポインターが使用される場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 システムでは、移動やコピーなどのさまざまなドラッグ アンド ドロップ操作の既定ドラッグ アンド ドロップ カーソルを提供します。 場合 <xref:System.Windows.Forms.GiveFeedbackEventArgs.UseDefaultCursors%2A> に設定されている `false`, 、適切なカーソルを設定するイベント ソースの役割です。  
  
   
  
## 例  
 次の例では、2 つのドラッグ アンド ドロップ操作 <xref:System.Windows.Forms.ListBox> コントロールです。 呼び出しの例、 <xref:System.Windows.Forms.Control.DoDragDrop%2A> メソッド、ドラッグ操作の開始時にします。 マウスが移動した場合に、ドラッグ操作が開始以上 <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> 中にマウスの位置から、 <xref:System.Windows.Forms.Control.MouseDown> イベントです。<xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> メソッドを使用中にドラッグする項目のインデックスを確認して、 `MouseDown` イベントです。  
  
 例では、ドラッグ アンド ドロップ操作のカスタムのカーソルを使用しても示します。 この例では 2 つカーソル ファイル `3dwarro.cur` と `3dwno.cur`, 、カスタム ドラッグのアプリケーションのディレクトリに存在および非ドロップ カーソルの場合、それぞれします。 場合に使用されるカスタムのカーソル、 `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> がオンになっています。 カスタムのカーソルが設定されている、 <xref:System.Windows.Forms.Control.GiveFeedback> イベント ハンドラーです。  
  
 キーボードの状態を評価、 <xref:System.Windows.Forms.Control.DragOver> 右側のイベント ハンドラー `ListBox`, ドラッグ操作を決定するには、shift キーを押し、CTRL、alt キーを押し、または CTRL \+ ALT キーの状態に基づいています。 内の場所、 `ListBox` 時にも決定されますが、ドロップが発生する可能性、 `DragOver` イベントです。 削除するデータがない場合、 `String`, 、 <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> に設定されている <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=fullName>します。 削除の状態を表示する最後に、 `DropLocationLabel`<xref:System.Windows.Forms.Label>します。  
  
 右側にドロップするデータ `ListBox` で決定、 <xref:System.Windows.Forms.Control.DragDrop> イベント ハンドラーと `String` の適切な場所にある値を追加、 `ListBox`です。 ドラッグ操作が、フォームの境界の外側に移動しでドラッグ アンド ドロップ操作を取り消したかどうか、 <xref:System.Windows.Forms.Control.QueryContinueDrag> イベント ハンドラーです。  
  
 このコードの抜粋では、使用方法を示します、 <xref:System.Windows.Forms.GiveFeedbackEventArgs> クラスです。 参照してください、 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 完全なコード例のメソッドです。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#3)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>