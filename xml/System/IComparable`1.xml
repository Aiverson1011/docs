<Type Name="IComparable&lt;T&gt;" FullName="System.IComparable&lt;T&gt;">
  <TypeSignature Language="C#" Value="public interface IComparable&lt;in T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IComparable`1&lt;- T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IComparable`1" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">比較するオブジェクトの型。</typeparam>
    <summary>インスタンスの並べ替えなどを目的とし、型固有の比較メソッドを作成するために値型またはクラスで実装する、汎用の比較メソッドを定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 This interface is implemented by types whose values can be ordered or sorted and provides a strongly typed comparison method for ordering members of a generic collection object. For example, one number can be larger than a second number, and one string can appear in alphabetical order before another. It requires that implementing types define a single method, <xref:System.IComparable%601.CompareTo%28%600%29>, that indicates whether the position of the current instance in the sort order is before, after, or the same as a second object of the same type. Typically, the method is not called directly from developer code. Instead, it is called automatically by methods such as <xref:System.Collections.Generic.List%601.Sort?displayProperty=fullName> and <xref:System.Collections.Generic.SortedList%602.Add%2A>.  
  
 Typically, types that provide an <xref:System.IComparable%601> implementation also implement the <xref:System.IEquatable%601> interface. The <xref:System.IEquatable%601> interface defines the <xref:System.IEquatable%601.Equals%2A> method, which determines the equality of instances of the implementing type.  
  
 The implementation of the <xref:System.IComparable%601.CompareTo%28%600%29> method must return an <xref:System.Int32> that has one of three values, as shown in the following table.  
  
|Value|Meaning|  
|-----------|-------------|  
|Less than zero|This object precedes the object specified by the <xref:System.IComparable%601.CompareTo%2A> method in the sort order.|  
|Zero|This current instance occurs in the same position in the sort order as the object specified by the <xref:System.IComparable%601.CompareTo%2A> method argument.|  
|Greater than zero|This current instance follows the object specified by the <xref:System.IComparable%601.CompareTo%2A> method argument in the sort order.|  
  
 All numeric types \(such as <xref:System.Int32> and <xref:System.Double>\) implement <xref:System.IComparable%601>, as do <xref:System.String>, <xref:System.Char>, and <xref:System.DateTime>. Custom types should also provide their own implementation of <xref:System.IComparable%601> to enable object instances to be ordered or sorted.  
  
   
  
## 例  
 The following code example illustrates the implementation of  <xref:System.IComparable%601> for a simple `Temperature` object. The example creates a <xref:System.Collections.Generic.SortedList%602> collection of strings with `Temperature` object keys, and adds several pairs of temperatures and strings to the list out of sequence. In the call to the <xref:System.Collections.Generic.SortedList%602.Add%2A> method, the <xref:System.Collections.Generic.SortedList%602> collection uses the <xref:System.IComparable%601> implementation to sort the list entries, which are then displayed in order of increasing temperature.  
  
 [!code-cpp[IComparable\`1 Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable`1 Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable\`1 Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable`1 Example/CS/source.cs#1)]
 [!code-vb[IComparable\`1 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable`1 Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Replace the type parameter of the <see cref="T:System.IComparable`1" /> interface with the type that is implementing this interface.  
  
 If you implement <see cref="T:System.IComparable`1" />, you should overload the <see langword="op_GreaterThan" />, <see langword="op_GreaterThanOrEqual" />, <see langword="op_LessThan" />, and <see langword="op_LessThanOrEqual" /> operators to return values that are consistent with <see cref="M:System.IComparable`1.CompareTo(`0)" />. In addition, you should also implement <see cref="T:System.IEquatable`1" />. See the <see cref="T:System.IEquatable`1" /> article for complete information.</para>
    </block>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.IEquatable`1" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IComparable`1.CompareTo(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other">このインスタンスと比較するオブジェクト。</param>
        <summary>現在のインスタンスを同じ型の別のオブジェクトと比較し、現在のインスタンスの並べ替え順序での位置が、比較対象のオブジェクトと比べて前か、後か、または同じかを示す整数を返します。</summary>
        <returns>比較対象オブジェクトの相対順序を示す値。 戻り値の意味は次のとおりです。  
  
 <list type="table">  
<listheader>  
<term> 値  
  
 </term>  
<description> 説明  
  
 </description>  
</listheader>  
<item>  
<term> 0 より小さい値  
  
 </term>  
<description> このインスタンスの位置が、並べ替え順序において <paramref name="other" /> よりも前です。  
  
 </description>  
</item>  
<item>  
<term> 0  
  
 </term>  
<description> このインスタンスが、並べ替え順序において同じ位置に出現 <paramref name="other" />します。  
  
 </description>  
</item>  
<item>  
<term> 0 より大きい値  
  
 </term>  
<description> このインスタンスの位置が、並べ替え順序において <paramref name="other" /> よりも後ろです。  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IComparable%601.CompareTo%2A> ジェネリック コレクション オブジェクトのメンバーの順序を厳密に型指定の比較メソッドを提供します。 このため、これは通常呼び出されません開発者のコードから直接。 代わりに、自動的に呼び出されますメソッドによってなど <xref:System.Collections.Generic.List%601.Sort?displayProperty=fullName> と <xref:System.Collections.Generic.SortedList%602.Add%2A>です。  
  
 このメソッドは定義のみであるため、効果が特定のクラスまたは値の型によって実装する必要があります。 \(「後ろ」、「と同じ位置に出現する」、および"に依存\) セクションでは、特定の実装によって異なります。 戻り値で指定された比較の意味です。  
  
 定義では、任意のオブジェクトを比較してより大きい `null`, 、互いに等しい 2 つの null 参照を比較します。  
  
   
  
## 例  
 次のコード例は、の実装を示しています。 <xref:System.IComparable> シンプルな `Temperature` オブジェクトです。 例を作成し、 <xref:System.Collections.Generic.SortedList%602> と文字列のコレクション `Temperature` オブジェクトのキー、および温度と文字列のペアを複数を誤った順序の一覧に追加します。 呼び出しで、 <xref:System.Collections.Generic.SortedList%602.Add%2A> メソッドを <xref:System.Collections.Generic.SortedList%602> コレクションは、 <xref:System.IComparable%601> の温度を昇順に表示されてリストの項目の並べ替えに実装します。  
  
 [!code-cpp[IComparable\`1 Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable`1 Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable\`1 Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable`1 Example/CS/source.cs#1)]
 [!code-vb[IComparable\`1 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable`1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>For objects A, B, and C, the following must be true:  
  
 <c>A.CompareTo(A)</c> is required to return zero.  
  
 If <c>A.CompareTo(B)</c> returns zero, then <c>B.CompareTo(A)</c> is required to return zero.  
  
 If <c>A.CompareTo(B)</c> returns zero and <c>B.CompareTo(C)</c> returns zero, then <c>A.CompareTo(C)</c> is required to return zero.  
  
 If <c>A.CompareTo(B)</c> returns a value other than zero, then <c>B.CompareTo(A)</c> is required to return a value of the opposite sign.  
  
 If <c>A.CompareTo(B)</c> returns a value <paramref name="x" /> that is not equal to zero, and <c>B.CompareTo(C)</c> returns a value <paramref name="y" /> of the same sign as <paramref name="x" />, then <c>A.CompareTo(C)</c> is required to return a value of the same sign as <paramref name="x" /> and <paramref name="y" />.</para>
        </block>
        <block subset="none" type="usage">
          <para>Use the <see cref="M:System.IComparable`1.CompareTo(`0)" /> method to determine the ordering of instances of a class.</para>
        </block>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
  </Members>
</Type>