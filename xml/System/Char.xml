<Type Name="Char" FullName="System.Char">
  <TypeSignature Language="C#" Value="public struct Char : IComparable, IComparable&lt;char&gt;, IConvertible, IEquatable&lt;char&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit char extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;char&gt;, class System.IConvertible, class System.IEquatable`1&lt;char&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Char" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Char&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>文字を UTF\-16 コード単位で表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]を使用して、 <xref:System.Char> Unicode 文字を表現する構造体。 Unicode 規格は、コード ポイントと呼ばれる一意の 21 ビット スカラー番号でそれぞれの Unicode 文字を識別し、コード ポイントを 1 つ以上の 16 ビット値のシーケンスにエンコードする方法を指定する utf\-16 エンコード形式を定義します。 各 16 ビット値が 16 進数の 0x0000 から 0 xffff までの範囲しに格納されて、<xref:System.Char>構造体。  値、<xref:System.Char>オブジェクトは、16 ビット数値 \(序数\) の値。  
  
 次のセクションでは、確認の間のリレーションシップ、<xref:System.Char>オブジェクト、および文字で実行される一般的なタスクの説明と<xref:System.Char>インスタンス。  
  
 [Char 型のオブジェクト、Unicode 文字、および文字列](#Relationship)   
 [文字および文字カテゴリ](#Categories)   
 [文字要素と text 要素](#Elements)   
 [一般的な操作](#Operations)   
 [Char 値との相互運用機能](#Interop)  
  
<a name="Relationship"></a>   
## Char 型のオブジェクト、Unicode 文字、および文字列  
 A<xref:System.String>オブジェクトは、シーケンシャル コレクションの<xref:System.Char>テキストの文字列を表す構造体。 ほとんどの Unicode 文字を 1 つで表せる<xref:System.Char>オブジェクト、基本文字としてエンコードされる文字がサロゲート ペアと組み合わせ文字シーケンスが複数で表される<xref:System.Char>オブジェクト。 このため、<xref:System.Char>構造体、<xref:System.String>オブジェクトは、必ずしも単一の Unicode 文字に相当することはありません。  
  
 複数の 16 ビットのコード単位を使用して、次の場合、1 つの Unicode 文字を表現します。  
  
-   グリフは、1 つの文字か、基本文字の後に 1 つまたは複数の結合文字ので構成されている可能性があります。 Ä 文字が a でどのように表されるなど、<xref:System.Char>オブジェクト単位は U \+0 a 続けて 0061 コードが<xref:System.Char>コード単位が u\+0308 オブジェクト。 \(文字 ä は、1 つで定義することも<xref:System.Char>U \+0 00E4 のコード単位を持つオブジェクトです\)。 2 つの文字 ä で構成されている次の例を示しています<xref:System.Char>オブジェクト。  
  
     [!code-csharp[System.Char.Class\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/grapheme1.cs#1)]
     [!code-vb[System.Char.Class\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/grapheme1.vb#1)]  
  
-   Unicode 基本多言語面 \(BMP\) 以外の文字。 Unicode では、0 の平面を表します bmp ファイルだけでなく 16 個の平面をサポートします。 Unicode コード ポイントは、utf\-32 の平面が含まれる 21 ビットの値で表されます。 たとえば、U \+0 1D160 は、音符シンボル 8 分の文字を表します。 Utf\-16 エンコーディングは 16 ビットだけがあるため BMP 以外の文字は、utf\-16 のサロゲート ペアで表されます。 次の例では、U \+ D834 U \+ DD60 は U \+0 1D160、音符シンボル 8 分の文字の utf\-32 相当にことを示します。 U \+ D834 が上位サロゲートです。高サロゲート u\+d800 から U\+DBFF の範囲です。 U \+ DD60 が下位サロゲートです。低サロゲート u\+dc00 から U\+DFFF までの範囲です。  
  
     [!code-csharp[System.Char.Class\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/surrogate1.cs#2)]
     [!code-vb[System.Char.Class\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/surrogate1.vb#2)]  
  
<a name="Categories"></a>   
## 文字および文字カテゴリ  
 各 Unicode 文字または有効なサロゲート ペアは、Unicode カテゴリに属しています。 .NET Framework の Unicode カテゴリがのメンバーによって表される、<xref:System.Globalization.UnicodeCategory>列挙などの値と<xref:System.Globalization.UnicodeCategory.CurrencySymbol?displayProperty=fullName>、 <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=fullName>、および<xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=fullName>、例を示します。  
  
 文字の Unicode カテゴリを確認するを呼び出す、<xref:System.Char.GetUnicodeCategory%2A>メソッドです。 たとえば、次の例では、<xref:System.Char.GetUnicodeCategory%2A>文字列内の各文字の Unicode カテゴリを表示します。  
  
 [!code-csharp[System.Char.Class\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/GetUnicodeCategory3.cs#6)]
 [!code-vb[System.Char.Class\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/GetUnicodeCategory3.vb#6)]  
  
 \(U \+0 0000 から U \+ 00 ff\)、ASCII の範囲外の文字を内部的には、<xref:System.Char.GetUnicodeCategory%2A>メソッドによって報告された Unicode カテゴリによって異なります、<xref:System.Globalization.CharUnicodeInfo>クラスです。 以降で、 [!INCLUDE[net_v462](~/includes/net-v462-md.md)]、Unicode 文字を分類に基づいて[The Unix Standard, Version 8.0.0](http://www.unicode.org/versions/Unicode8.0.0/)です。 .NET Framework のバージョンで、[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]を[!INCLUDE[net_v461](~/includes/net-v461-md.md)]、その分類に基づいて[The Unix Standard, Version 6.3.0](http://www.unicode.org/versions/Unicode6.3.0/)です。  
  
<a name="Elements"></a>   
## 文字要素と text 要素  
 複数によって 1 つの文字を表すことができますので<xref:System.Char>オブジェクトの場合は常に個別を使用する意味のあるいない<xref:System.Char>オブジェクト。 たとえば、次の例では、Aegean 数字 0 ~ 9 を utf\-16 でエンコードされたコード単位を表す Unicode コード ポイントに変換します。 誤ってと同義なるため<xref:System.Char>オブジェクト、文字と正確に報告されて、結果の文字列が 20 文字であります。  
  
 [!code-csharp[System.Char.Class\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/textelements2.cs#3)]
 [!code-vb[System.Char.Class\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/textelements2.vb#3)]  
  
 想定を回避するのには、次を行うことができますを<xref:System.Char>オブジェクトは 1 つの文字を表します。  
  
-   使用する、<xref:System.String>全体を表し、言語的内容を分析する個別の文字の操作ではなくオブジェクト。  
  
-   使用することができます、<xref:System.Globalization.StringInfo>個人ではなくテキスト要素を使用するクラス<xref:System.Char>オブジェクト。 次の例で、<xref:System.Globalization.StringInfo>エーゲで構成される文字列内のテキスト要素の数をカウントする 0 個から 9 の数字です。 1 つの文字がサロゲート ペアを見なすため、文字列に 10 個の文字が含まれているが正しく報告されます。  
  
     [!code-csharp[System.Char.Class\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/textelements2a.cs#4)]
     [!code-vb[System.Char.Class\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/textelements2a.vb#4)]  
  
-   文字列を 1 つまたは複数の結合文字を持つ基本文字が含まれている場合は、呼び出す、<xref:System.String.Normalize%2A?displayProperty=fullName>部分文字列を 1 つの utf\-16 でエンコードされたコード単位に変換します。 次の例では、<xref:System.String.Normalize%2A?displayProperty=fullName>を変換する方法、基本文字 U \+ 0061 \(LATIN SMALL LETTER A\) と組み合わせ文字 u\+0308 \(結合 DIAERESIS\) U \+0 00E4 \(ラテン小さい文字 A で DIAERESIS\)。  
  
     [!code-csharp[System.Char.Class\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/normalized.cs#5)]
     [!code-vb[System.Char.Class\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/normalized.vb#5)]  
  
<a name="Operations"></a>   
## 一般的な操作  
 <xref:System.Char>構造体を比較するメソッドを提供する<xref:System.Char>オブジェクト、現在の値を変換する<xref:System.Char>オブジェクトを別の型のオブジェクトとの Unicode カテゴリを確認、<xref:System.Char>オブジェクト。  
  
|目的|これらを使用して`System.Char`メソッド|  
|--------|-------------------------------|  
|比較<xref:System.Char>オブジェクト|<xref:System.Char.CompareTo%2A> および <xref:System.Char.Equals%2A>|  
|コード ポイントを文字列に変換します。|<xref:System.Char.ConvertFromUtf32%2A>|  
|変換、<xref:System.Char>オブジェクトまたはサロゲート ペアの<xref:System.Char>コード ポイントにオブジェクト|1 つの文字。<xref:System.Convert.ToInt32%28System.Char%29?displayProperty=fullName><br /><br /> サロゲート ペアまたは文字列の文字の場合。<xref:System.Char.ConvertToUtf32%2A?displayProperty=fullName>|  
|文字の Unicode カテゴリを取得します。|<xref:System.Char.GetUnicodeCategory%2A>|  
|制御文字の文字が数字、文字、句読点などの特定の Unicode カテゴリであるかどうかを決定します。|<xref:System.Char.IsControl%2A>, <xref:System.Char.IsDigit%2A>, <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLetter%2A>, <xref:System.Char.IsLetterOrDigit%2A>, <xref:System.Char.IsLower%2A>, <xref:System.Char.IsLowSurrogate%2A>, <xref:System.Char.IsNumber%2A>, <xref:System.Char.IsPunctuation%2A>, <xref:System.Char.IsSeparator%2A>, <xref:System.Char.IsSurrogate%2A>, <xref:System.Char.IsSurrogatePair%2A>, <xref:System.Char.IsSymbol%2A>, <xref:System.Char.IsUpper%2A>, and<xref:System.Char.IsWhiteSpace%2A>|  
|変換、<xref:System.Char>数値型の数値を表すオブジェクトを|<xref:System.Char.GetNumericValue%2A>|  
|文字列内の文字を変換、<xref:System.Char>オブジェクト|<xref:System.Char.Parse%2A> および <xref:System.Char.TryParse%2A>|  
|変換、<xref:System.Char>オブジェクトを<xref:System.String>オブジェクト|<xref:System.Char.ToString%2A>|  
|大文字と小文字の変更、<xref:System.Char>オブジェクト|<xref:System.Char.ToLower%2A>、<xref:System.Char.ToLowerInvariant%2A>, <xref:System.Char.ToUpper%2A>、および <xref:System.Char.ToUpperInvariant%2A>|  
  
<a name="Interop"></a>   
## Char 値との相互運用機能  
 ときにマネージ<xref:System.Char>Unicode utf\-8 でエンコードされたコードの単位として表される型がアンマネージ コードに渡される、相互運用マーシャラーが文字セットを ANSI に変換します。 適用することができます、<xref:System.Runtime.InteropServices.DllImportAttribute>属性をプラットフォーム呼び出しの宣言と<xref:System.Runtime.InteropServices.StructLayoutAttribute>コントロールは、どの文字セット、マーシャ リングする COM 相互運用機能の宣言に属性<xref:System.Char>用途を入力します。  
  
   
  
## 例  
 次のコード例では、メソッドの一部を示しています<xref:System.Char>です。  
  
 [!code-cpp[System.Char &#91;Type Level&#93;\#23](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char [Type Level]/CPP/charstructure.cpp#23)]
 [!code-csharp[System.Char &#91;Type Level&#93;\#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char [Type Level]/CS/charstructure.cs#23)]
 [!code-vb[System.Char &#91;Type Level&#93;\#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char [Type Level]/VB/charstructure.vb#23)]  
  
 ]]></format>
    </remarks>
    <threadsafe>この種類のすべてのメンバーでは、スレッド セーフです。 インスタンスの状態を変更する表示されるメンバーは、新しい値で初期化された新しいインスタンスを実際に返します。 として、他の種類と読み取りと書き込みをこの型のインスタンスを含む、共有変数を保護する必要があるスレッド セーフを確保するロックによってです。</threadsafe>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.IConvertible" />
    <altmember cref="T:System.String" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.CompareTo(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">比較対象の <see cref="T:System.Char" /> オブジェクト。</param>
        <summary>このインスタンスと指定した <see cref="T:System.Char" /> オブジェクトとを比較し、並べ替え順序において、このインスタンスの位置が指定した <see cref="T:System.Char" /> オブジェクトの前、後ろ、または同じのいずれであるかを示します。</summary>
        <returns>並べ替え順序における、<paramref name="value" /> パラメーターに対するこのインスタンスの相対位置を示す符号付き数値。  
  
 <list type="table">  
<listheader>  
<term> 戻り値  
  
 </term>  
<description> 説明  
  
 </description>  
</listheader>  
<item>  
<term> 0 より小さい値  
  
 </term>  
<description> このインスタンスの位置が <paramref name="value" /> よりも前です。  
  
 </description>  
</item>  
<item>  
<term> 0  
  
 </term>  
<description> このインスタンスの位置が、並べ替え順序において <paramref name="value" /> と同じです。  
  
 </description>  
</item>  
<item>  
<term> 0 より大きい値  
  
 </term>  
<description> このインスタンスの位置が <paramref name="value" /> よりも後ろです。  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを実装する、<xref:System.IComparable%601?displayProperty=fullName>インターフェイスし、実行よりもわずかに向上、<xref:System.Char.CompareTo%2A?displayProperty=fullName>メソッドに変換があるないため、`value`オブジェクトへのパラメーターです。  
  
 このメソッドによって実行される比較はこのインスタンスのエンコードされた値に基づいて、 `value`、辞書の特性にありません。  
  
 場合、<xref:System.Char.CompareTo%2A>メソッド パラメーターの型がビット数が少ない範囲が狭い、インスタンスの型よりも一部のプログラミング言語が多くのビット値にパラメーターの値を変換する暗黙の拡大変換を実行します。  
  
 たとえば、インスタンスの型が<xref:System.Int32>パラメーターの型と<xref:System.Byte>です。 Microsoft c\# コンパイラは、パラメーターの値を表す命令を生成、<xref:System.Int32>オブジェクトを生成、<xref:System.Int32.CompareTo%2A?displayProperty=fullName>の値を比較するメソッド、<xref:System.Int32>インスタンスおよび<xref:System.Int32>パラメーター形式です。  
  
 通常は、暗黙の拡大変換は、数値型で実行されます。 コンパイラが拡大変換を実行するかどうかを決定する、プログラミング言語のドキュメントを参照してください。 コンパイラが、パラメーターのボックスを起動する命令を生成する、インスタンスとパラメーター型が一致しないと適切な変換が使用できない場合、<xref:System.Char.CompareTo%2A>を受け取るオーバー ロード、<xref:System.Object>パラメーター。  
  
   
  
## 例  
 次のコード例に示しますのジェネリックと非ジェネリックのバージョン、`CompareTo`いくつかの値と参照型のメソッドです。  
  
 [!code-cpp[T.CompareTo\#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.CompareTo/CPP/cat.cpp#1)]
 [!code-csharp[T.CompareTo\#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.CompareTo/CS/cat.cs#1)]
 [!code-vb[T.CompareTo\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.CompareTo/VB/cat.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IComparable" />
        <altmember cref="M:System.Char.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.CompareTo(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">このインスタンスと比較するオブジェクト、または <see langword="null" />。</param>
        <summary>このインスタンスと指定したオブジェクトとを比較し、並べ替え順序において、このインスタンスの位置が指定した <see cref="T:System.Object" /> の前、後ろ、または同じのいずれであるかを示します。</summary>
        <returns>並べ替え順序における、<paramref name="value" /> パラメーターに対するこのインスタンスの相対位置を示す符号付き数値。  
  
 <list type="table">  
<listheader>  
<term> 戻り値  
  
 </term>  
<description> 説明  
  
 </description>  
</listheader>  
<item>  
<term> 0 より小さい値  
  
 </term>  
<description> このインスタンスの位置が <paramref name="value" /> よりも前です。  
  
 </description>  
</item>  
<item>  
<term> 0  
  
 </term>  
<description> このインスタンスの位置が、並べ替え順序において <paramref name="value" /> と同じです。  
  
 </description>  
</item>  
<item>  
<term> 0 より大きい値  
  
 </term>  
<description> このインスタンスの位置が <paramref name="value" /> よりも後ろです。  
  
 または  
  
 <paramref name="value" /> は <see langword="null" /> です。  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Char.CompareTo%2A>メソッドを実装して、<xref:System.IComparable>インターフェイスです。  
  
 `value`パラメーターでなければなりません`null`またはのインスタンス<xref:System.Char>です。 それ以外の場合、例外がスローされます。  
  
 このメソッドによって実行される比較はこのインスタンスのエンコードされた値に基づいて、 `value`、辞書の特性に限りません。 任意のインスタンス<xref:System.Char>、その値に関係なくが大きいと見なされますより`null`です。  
  
   
  
## 例  
 次のコード例を示します<xref:System.Char.CompareTo%2A>です。  
  
 [!code-cpp[System.Char.CompareTo\#19](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.CompareTo/CPP/compareto.cpp#19)]
 [!code-csharp[System.Char.CompareTo\#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.CompareTo/CS/compareto.cs#19)]
 [!code-vb[System.Char.CompareTo\#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.CompareTo/VB/compareto.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> は <see cref="T:System.Char" /> オブジェクトではありません。</exception>
        <altmember cref="T:System.IComparable" />
        <altmember cref="M:System.Char.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ConvertFromUtf32">
      <MemberSignature Language="C#" Value="public static string ConvertFromUtf32 (int utf32);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ConvertFromUtf32(int32 utf32) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ConvertFromUtf32(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf32" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="utf32">21 ビットの Unicode コード ポイント。</param>
        <summary>指定された Unicode コード ポイントを UTF\-16 エンコードの文字列に変換します。</summary>
        <returns>
          <paramref name="utf32" /> パラメーターに指定されたコード ポイントに対応する、単一の <see cref="T:System.Char" /> オブジェクトから成る文字列または <see cref="T:System.Char" /> オブジェクトのサロゲート ペアから成る文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して、メソッドなど、文字列をテストする前に、21 ビット Unicode コード ポイントを utf\-16 でエンコードされた文字列に変換<xref:System.Char.IsLowSurrogate%28System.Char%29>と<xref:System.Char.IsHighSurrogate%28System.Char%29>です。  
  
 外、平面 \(bmp: Basic Multilingual\)、有効なコード ポイントには、常に有効なサロゲート ペアが生成されます。 ただし、BMP 内の有効なコード ポイントが生成されない Unicode 標準に従って有効な結果の変換で言語的な処理が使用されていないためです。 そのため、使用して、<xref:System.Text.UTF32Encoding?displayProperty=fullName>に変換するクラスでは、utf\-32 データを一括一括 utf\-16 データにします。  
  
   
  
## 例  
 次のコード例を示しています、<xref:System.Char.ConvertToUtf32%2A>と<xref:System.Char.ConvertFromUtf32%2A>メソッドです。  
  
 [!code-cpp[char.cvtutf32\#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.cvtutf32/CPP/utf.cpp#1)]
 [!code-csharp[char.cvtutf32\#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.cvtutf32/CS/utf.cs#1)]
 [!code-vb[char.cvtutf32\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.cvtutf32/VB/utf.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="utf32" /> は U\+0 から U\+10FFFF までの範囲の有効な 21 ビット Unicode コード ポイントではありません。これには、U\+D800 から U\+DFFF までの範囲のサロゲート ペアは含まれません。</exception>
        <altmember cref="M:System.Char.ConvertToUtf32(System.Char,System.Char)" />
        <altmember cref="T:System.Text.UTF32Encoding" />
      </Docs>
    </Member>
    <Member MemberName="ConvertToUtf32">
      <MemberSignature Language="C#" Value="public static int ConvertToUtf32 (char highSurrogate, char lowSurrogate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ConvertToUtf32(char highSurrogate, char lowSurrogate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ConvertToUtf32(System.Char,System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="highSurrogate" Type="System.Char" />
        <Parameter Name="lowSurrogate" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="highSurrogate">上位サロゲートのコード単位 \(U\+D800 から U\+DBFF までのコード単位\)。</param>
        <param name="lowSurrogate">下位サロゲートのコード単位 \(U\+DC00 から U\+DFFF までのコード単位\)。</param>
        <summary>UTF\-16 でエンコードされたサロゲート ペアの値を Unicode コード ポイントに変換します。</summary>
        <returns>
          <paramref name="highSurrogate" /> パラメーターおよび <paramref name="lowSurrogate" /> パラメーターによって表される 21 ビットの Unicode コード ポイント。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 サロゲート ペアを 21 ビット Unicode コード ポイントに変換するのにには、このメソッドを使用します。 Utf\-32 データに utf\-16 データに変換する、<xref:System.Text.UTF32Encoding?displayProperty=fullName>クラスです。  
  
 通常は、utf\-16 エンコードと、16 ビット コードの単位として 1 つの Unicode 文字を表します。 ただし、2 つの 16 ビットのコード単位として表現されている 1 つの抽象文字を許可するサロゲート ペアもサポートします。 これらの 2 つ<xref:System.Char>オブジェクトは、その範囲の最初の \(高\) サロゲート U\+DBFF するには、u\+d800 から U\+DFFF の 2 つ目の \(低\) のサロゲートを u\+dc00 からにコード単位に必要があります。 サロゲート ペアが utf\-16 でのみサポートされているエンコードします。 このメソッドは、utf\-32 エンコーディングを使用する文字に変換する utf\-16 サロゲート ペアで表される文字を使用します。  
  
   
  
## 例  
 次のコード例を示しています、<xref:System.Char.ConvertToUtf32%2A>と<xref:System.Char.ConvertFromUtf32%2A>メソッドです。  
  
 [!code-cpp[char.cvtutf32\#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.cvtutf32/CPP/utf.cpp#1)]
 [!code-csharp[char.cvtutf32\#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.cvtutf32/CS/utf.cs#1)]
 [!code-vb[char.cvtutf32\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.cvtutf32/VB/utf.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="highSurrogate" /> が U\+D800 から U\+DBFF までの範囲内にないか、または <paramref name="lowSurrogate" /> が U\+DC00 から U\+DFFF までの範囲内にありません。</exception>
        <altmember cref="M:System.Char.ConvertFromUtf32(System.Int32)" />
        <altmember cref="T:System.Text.UTF32Encoding" />
      </Docs>
    </Member>
    <Member MemberName="ConvertToUtf32">
      <MemberSignature Language="C#" Value="public static int ConvertToUtf32 (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ConvertToUtf32(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ConvertToUtf32(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">文字またはサロゲート ペアを含む文字列。</param>
        <param name="index">
          <c>s</c> 内の文字またはサロゲート ペアのインデックス位置。</param>
        <summary>文字列中の指定位置にある UTF\-16 エンコード文字またはサロゲート ペアの値を、Unicode コード ポイントに変換します。</summary>
        <returns>
          <paramref name="s" /> パラメーター内の、<paramref name="index" /> パラメーターによって指定された位置にある文字またはサロゲート ペアが表す、21 ビットの Unicode コード ポイント。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して、文字またはサロゲート ペアを 21 ビット Unicode コード ポイントに変換します。 Utf\-32 データに utf\-16 データに変換する、<xref:System.Text.UTF32Encoding?displayProperty=fullName>クラスです。  
  
   
  
## 例  
 次のコード例を示しています、<xref:System.Char.ConvertToUtf32%2A>と<xref:System.Char.ConvertFromUtf32%2A>メソッドです。  
  
 [!code-cpp[char.cvtutf32\#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.cvtutf32/CPP/utf.cpp#1)]
 [!code-csharp[char.cvtutf32\#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.cvtutf32/CS/utf.cs#1)]
 [!code-vb[char.cvtutf32\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.cvtutf32/VB/utf.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> は <paramref name="s" /> 内の位置ではありません。</exception>
        <exception cref="T:System.ArgumentException">指定されたインデックスの位置には、サロゲート ペアが含まれています。ペアの最初の文字が有効な上位サロゲートではないか、または 2 番目の文字が有効な下位サロゲートではありません。</exception>
        <altmember cref="M:System.Char.ConvertFromUtf32(System.Int32)" />
        <altmember cref="T:System.Text.UTF32Encoding" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (char obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(char obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.Equals(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="obj">このインスタンスと比較するオブジェクト。</param>
        <summary>対象のインスタンスが、指定した <see cref="T:System.Char" /> オブジェクトに等しいかどうかを示す値を返します。</summary>
        <returns>
          <see langword="true" /> パラメーターがこのインスタンスの値と等しい場合は <paramref name="obj" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method implements the <xref:System.IEquatable%601?displayProperty=fullName> interface, and performs slightly better than <xref:System.Char.Equals%28System.Object%29?displayProperty=fullName> because it does not need to unbox the **parameterReference tag is not supported!!!!**  
 parameter.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">このインスタンスと比較するオブジェクト、または <see langword="null" />。</param>
        <summary>このインスタンスが、指定されたオブジェクトと等価であるかどうかを示す値を返します。</summary>
        <returns>
          <see langword="true" /> が <paramref name="obj" /> のインスタンスで、このインスタンスの値に等しい場合は <see cref="T:System.Char" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The comparison performed by this method is based on the encoded values of this instance and **parameterReference tag is not supported!!!!**  
, not necessarily their lexicographical characteristics.  
  
   
  
## 例  
 The following code example demonstrates <xref:System.Char.Equals%2A>.  
  
 [!code-cpp[System.Char.Equals\#20](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.Equals/CPP/equals.cpp#20)]
 [!code-csharp[System.Char.Equals\#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.Equals/CS/equals.cs#20)]
 [!code-vb[System.Char.Equals\#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.Equals/VB/equals.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスのハッシュ コードを返します。</summary>
        <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetNumericValue(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">変換する Unicode 文字。</param>
        <summary>指定された Unicode の数字を倍精度浮動小数点数に変換します。</summary>
        <returns>この文字が数字を表す場合は <paramref name="c" /> の数値。それ以外の場合は \-1.0。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `c`パラメーターである必要があります、<xref:System.Char>数値の形式です。 たとえば場合、`c`が「5」の場合、戻り値は 5 です。 ただし場合、 `c` "z"は、戻り値は\-1.0。  
  
 次のいずれかのメンバーである場合にのみ、文字が、関連付けられた数値の値を持つ<xref:System.Globalization.UnicodeCategory>カテゴリ: `DecimalDigitNumber`、 `LetterNumber`、または`OtherNumber`です。  
  
 <xref:System.Char.GetNumericValue%2A>メソッドと見なします`c`単一言語の文字に対応しており、その文字が 10 進数字に変換できるかどうかを確認します。 ただし、Unicode 規格の一部の数値が 2 で表されます<xref:System.Char>サロゲート ペアを形成するオブジェクト。 たとえば、番号付けシステム エーゲはコード ポイント U \+ U \+0 10133 を通じて 10107 で構成されます。 次の例では、 <xref:System.Char.ConvertFromUtf32%2A> AEGEAN 番号 1 を表す文字列をインスタンス化するメソッド。 例から出力として、<xref:System.Char.GetNumericValue%28System.Char%29>上位サロゲートまたは下位サロゲートのこの文字のいずれかが渡された場合、メソッドは\-1 を返します。  
  
 [!code-csharp[System.Char.GetNumericValue\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CS/getnumericvalue1.cs#2)]
 [!code-vb[System.Char.GetNumericValue\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetNumericValue/VB/getnumericvalue1.vb#2)]  
  
   
  
## 例  
 次の例で<xref:System.Char.GetNumericValue%2A>です。  
  
 [!code-cpp[System.Char.GetNumericValue\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CPP/getnumericvalue.cpp#1)]
 [!code-csharp[System.Char.GetNumericValue\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CS/getnumericvalue.cs#1)]
 [!code-vb[System.Char.GetNumericValue\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetNumericValue/VB/getnumericvalue.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetNumericValue(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <see cref="T:System.String" />。</param>
        <param name="index">
          <c>s</c> 内の文字位置。</param>
        <summary>指定した文字列の指定位置にある Unicode の数字を倍精度浮動小数点数に変換します。</summary>
        <returns>この文字が数字の場合は、<paramref name="index" /> の <paramref name="s" /> の位置のこの文字の数値。それ以外の場合は \-1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `s`パラメーターが数値の文字列形式にする必要があります。 たとえば場合、位置にある文字`index`で`s`が「5」の場合、戻り値は 5 です。 ただし場合、文字位置にある`index`で`s`"z"は、戻り値は\-1。  
  
 文字列内の文字位置では、0 から始まるインデックスが作成されます。  
  
 次のいずれかのメンバーである場合にのみ、文字が、関連付けられた数値の値を持つ<xref:System.Globalization.UnicodeCategory>カテゴリ: `DecimalDigitNumber`、 `LetterNumber`、または`OtherNumber`です。  
  
 場合、<xref:System.Char>オブジェクト位置にある`index`、有効なサロゲート ペアの最初の文字は、<xref:System.Char.GetNumericValue%28System.String%2CSystem.Int32%29>メソッドは、サロゲート ペアが数字を形成するかどうかを判断します。 たとえば、番号付けシステム エーゲは U \+0 10133 を通じて 10107 U \+0 のコード ポイントで構成されます。 次の例では、 <xref:System.Char.ConvertFromUtf32%2A> Aegean の個々 の数を表す文字列をインスタンス化するメソッド。 例から出力として、 <xref:System.Char.GetNumericValue%28System.String%2CSystem.Int32%29> Aegean 数の上位サロゲート渡される場合、メソッドが適切な数値を返します。 ただし、これには、下位サロゲートが渡された場合、分離に下位サロゲートのみが考慮し、\-1 を返します。  
  
 [!code-csharp[System.Char.GetNumericValue\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CS/getnumericvalue1.cs#3)]
 [!code-vb[System.Char.GetNumericValue\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetNumericValue/VB/getnumericvalue1.vb#3)]  
  
   
  
## 例  
 次のコード例を示します<xref:System.Char.GetNumericValue%2A>です。  
  
 [!code-cpp[System.Char.GetNumericValue\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CPP/getnumericvalue.cpp#1)]
 [!code-csharp[System.Char.GetNumericValue\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CS/getnumericvalue.cs#1)]
 [!code-vb[System.Char.GetNumericValue\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetNumericValue/VB/getnumericvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetTypeCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.TypeCode" /> 値型の <see cref="T:System.Char" /> を返します。</summary>
        <returns>列挙型定数 <see cref="F:System.TypeCode.Char" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetUnicodeCategory(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">分類する Unicode 文字。</param>
        <summary>指定された Unicode 文字を <see cref="T:System.Globalization.UnicodeCategory" /> 値のいずれかで識別されるグループに分類します。</summary>
        <returns>
          <paramref name="c" /> が含まれているグループを識別する <see cref="T:System.Globalization.UnicodeCategory" /> 値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName>メソッドは常に返しません同じ<xref:System.Globalization.UnicodeCategory>値として、<xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=fullName>特定の文字をパラメーターとして渡されるとメソッド。<xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=fullName>メソッドが現在のバージョンの Unicode 標準を反映するように設計されています。 これに対し、ですが、<xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName>メソッドは通常、Unicode 規格の現在のバージョンを反映して、標準の以前のバージョンに基づく文字のカテゴリを返す可能性がありますまたは旧バージョンとの互換性を保つために、現在の標準からとは異なるカテゴリを復帰して可能性があります。 その結果、ことをお勧めを使用すること、<xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=fullName>メソッドの代わりに<xref:System.Char.GetUnicodeCategory%28System.Char%29?displayProperty=fullName>です。  
  
 以降で、 [!INCLUDE[net_v462](~/includes/net-v462-md.md)]、Unicode 文字は、分類に基づいて[The Unix Standard, Version 8.0.0](http://www.unicode.org/versions/Unicode8.0.0/)です。 .NET Framework のバージョンで、[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]を[!INCLUDE[net_v461](~/includes/net-v461-md.md)]、その分類に基づいて[The Unix Standard, Version 6.3.0](http://www.unicode.org/versions/Unicode6.3.0/)です。  
  
   
  
## 例  
 次のコード例を示します<xref:System.Char.GetUnicodeCategory%2A>です。  
  
 [!code-cpp[System.Char.GetUnicodeCategory\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/CPP/getunicodecategory.cpp#1)]
 [!code-csharp[System.Char.GetUnicodeCategory\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/CS/getunicodecategory.cs#1)]
 [!code-vb[System.Char.GetUnicodeCategory\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/VB/getunicodecategory.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetUnicodeCategory(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <see cref="T:System.String" />。</param>
        <param name="index">
          <c>s</c> 内の文字位置。</param>
        <summary>指定した文字列の指定位置にある文字を <see cref="T:System.Globalization.UnicodeCategory" /> 値のいずれかで識別されるグループに分類します。</summary>
        <returns>
          <see cref="T:System.Globalization.UnicodeCategory" /> の中で <paramref name="index" /> の位置の文字が含まれるグループを識別する <paramref name="s" /> 列挙定数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 文字列内の文字位置では、0 から始まるインデックスが作成されます。  
  
 <xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName>メソッドは常に返しません同じ<xref:System.Globalization.UnicodeCategory>値として、<xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=fullName>メソッドの特定の文字をパラメーターとして渡されるとします。<xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=fullName>メソッドが現在のバージョンの Unicode 標準を反映するように設計されています。 これに対し、ですが、<xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName>メソッドは通常、Unicode 規格の現在のバージョンを反映して、標準の以前のバージョンに基づく文字のカテゴリを返す可能性がありますまたは旧バージョンとの互換性を保つために、現在の標準からとは異なるカテゴリを返すこと可能性があります。 その結果、ことをお勧めを使用すること、<xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=fullName>メソッドの代わりに<xref:System.Char.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=fullName>です。  
  
 以降で、 [!INCLUDE[net_v462](~/includes/net-v462-md.md)]、Unicode 文字は、分類に基づいて[The Unix Standard, Version 8.0.0](http://www.unicode.org/versions/Unicode8.0.0/)です。 .NET Framework のバージョンで、[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]を[!INCLUDE[net_v461](~/includes/net-v461-md.md)]、その分類に基づいて[The Unix Standard, Version 6.3.0](http://www.unicode.org/versions/Unicode6.3.0/)です。  
  
   
  
## 例  
 次の例で<xref:System.Char.GetUnicodeCategory%2A>です。  
  
 [!code-cpp[System.Char.GetUnicodeCategory\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/CPP/getunicodecategory.cpp#1)]
 [!code-csharp[System.Char.GetUnicodeCategory\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/CS/getunicodecategory.cs#1)]
 [!code-vb[System.Char.GetUnicodeCategory\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/VB/getunicodecategory.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</exception>
        <altmember cref="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsControl">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した Unicode 文字が、制御文字かどうかを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 制御文字が書式設定し、確認、ベル、CR、FF、LF、および VT. などその他の印刷されない文字 Unicode 規格では、制御文字を \\U009F に \\U0080 および \\U001F \\U007F でに \\U0000 から、コード ポイントが割り当てられます。 Unicode 標準に従ってこれらの値は、その使用がそれ以外の場合、アプリケーションが定義されていない場合は、制御文字として解釈するです。 有効な制御文字のメンバーである、 <xref:System.Globalization.UnicodeCategory.Control?displayProperty=fullName> カテゴリ。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsControl">
      <MemberSignature Language="C#" Value="public static bool IsControl (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsControl(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsControl(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">評価する Unicode 文字。</param>
        <summary>指定した Unicode 文字が、制御文字かどうかを示します。</summary>
        <returns>
          <paramref name="c" /> が制御文字である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 制御文字が書式設定および ACK、BEL、CR、FF、LF、VT. などその他の非印刷文字 T、Unicode 規格と制御文字を \\U009F に \\U0080 \\U001F、\\U007F でに \\U0000 から、コード ポイントが割り当てられます。 Unicode 標準に従ってこれらの値は、使用がそれ以外の場合アプリケーションによって定義されている場合を除き、制御文字として解釈するは。 メンバーである有効なコントロール文字、<xref:System.Globalization.UnicodeCategory.Control?displayProperty=fullName>カテゴリ。  
  
   
  
## 例  
 次の例では、各コントロールの文字の Unicode コード ポイントが一覧表示します。  
  
 [!code-cpp[System.Char.IsControl\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsControl/CPP/iscontrol1.cpp#1)]
 [!code-csharp[System.Char.IsControl\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsControl/CS/IsControl1.cs#1)]
 [!code-vb[System.Char.IsControl\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsControl/VB/IsControl1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsControl">
      <MemberSignature Language="C#" Value="public static bool IsControl (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsControl(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsControl(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">文字列。</param>
        <param name="index">
          <c>s</c> 内の評価する文字の位置。</param>
        <summary>指定した文字列の指定位置にある文字が制御文字かどうかを示します。</summary>
        <returns>
          <see langword="true" /> の <paramref name="index" /> の位置にある文字が制御文字の場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 文字列内の文字位置では、0 から始まるインデックスが作成されます。  
  
 制御文字が書式設定および ACK、BEL、CR、FF、LF、VT. などその他の非印刷文字 Unicode 規格と制御文字を \\U009F に \\U0080 \\U001F、\\U007F でに \\U0000 から、コード ポイントが割り当てられます。 Unicode 標準に従ってこれらの値は、使用がそれ以外の場合アプリケーションによって定義されている場合を除き、制御文字として解釈するは。 メンバーである有効なコントロール文字、<xref:System.Globalization.UnicodeCategory.Control?displayProperty=fullName>カテゴリ。  
  
   
  
## 例  
 次の例では、文字列の文字を列挙し、いずれかが制御文字であるかどうかを決定します。  
  
 [!code-cpp[System.Char.IsControl\#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsControl/CPP/iscontrol2.cpp#2)]
 [!code-csharp[System.Char.IsControl\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsControl/CS/IsControl2.cs#2)]
 [!code-vb[System.Char.IsControl\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsControl/VB/IsControl2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDigit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Unicode 文字が 10 進数の数字かどうかを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 有効な数字のメンバーである、 <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=fullName> カテゴリ。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDigit">
      <MemberSignature Language="C#" Value="public static bool IsDigit (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDigit(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsDigit(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">評価する Unicode 文字。</param>
        <summary>指定した Unicode 文字が、10 進数の数字かどうかを示します。</summary>
        <returns>
          <see langword="true" /> が 10 進数の数字の場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを判断するかどうか、<xref:System.Char>基数 10 の数字です。 これとは対照的<xref:System.Char.IsNumber%2A>を決定するかどうか、`Char`数値 Unicode カテゴリのです。 番号には、分数、添字、上付き文字、ローマ数字、通貨分子、丸付き数字、およびスクリプトに固有の数字などの文字が含まれます。  
  
 有効な数字のメンバーである、<xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=fullName>カテゴリ。  
  
   
  
## 例  
 次のコード例を示します<xref:System.Char.IsDigit%2A>です。  
  
 [!code-cpp[System.Char.IsDigit\#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsDigit/CPP/isdigit.cpp#4)]
 [!code-csharp[System.Char.IsDigit\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsDigit/CS/isdigit.cs#4)]
 [!code-vb[System.Char.IsDigit\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsDigit/VB/isdigit.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.Char.IsNumber(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsDigit">
      <MemberSignature Language="C#" Value="public static bool IsDigit (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDigit(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsDigit(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">文字列。</param>
        <param name="index">
          <c>s</c> 内の評価する文字の位置。</param>
        <summary>指定した文字列の指定位置にある文字が 10 進数の数字かどうかを示します。</summary>
        <returns>
          <see langword="true" /> の <paramref name="index" /> の位置にある文字が 10 進数の数字の場合は <paramref name="s" />。それ以外の場合は <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを判断するかどうか、<xref:System.Char>基数 10 の数字です。 これとは対照的<xref:System.Char.IsNumber%2A>を決定するかどうか、<xref:System.Char>数値 Unicode カテゴリのです。 番号には、分数、添字、上付き文字、ローマ数字、通貨分子、丸付き数字、およびスクリプトに固有の数字などの文字が含まれます。  
  
 文字列内の文字位置では、0 から始まるインデックスが作成されます。  
  
 有効な数字のメンバーである、<xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=fullName>カテゴリ。  
  
   
  
## 例  
 次のコード例を示します<xref:System.Char.IsDigit%2A>です。  
  
 [!code-cpp[System.Char.IsDigit\#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsDigit/CPP/isdigit.cpp#4)]
 [!code-csharp[System.Char.IsDigit\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsDigit/CS/isdigit.cs#4)]
 [!code-vb[System.Char.IsDigit\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsDigit/VB/isdigit.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.Char.IsNumber(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsHighSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsHighSurrogate (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsHighSurrogate(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsHighSurrogate(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">評価する Unicode 文字。</param>
        <summary>指定された <see cref="T:System.Char" /> オブジェクトが上位サロゲートであるかどうかを示します。</summary>
        <returns>
          <see langword="true" /> パラメーターの数値が U\+D800 から U\+DBFF の範囲内にある場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 16 ビットのコード ポイントを使用して単一の文字を表す、に加えて utf\-16 エンコード文字が許可されて抽象表現されている 2 つの 16 ビットのコード ポイントを使用して、これと呼ばれるサロゲート ペア。 このペアの最初の要素は、高のサロゲートです。 そのコード ポイントの範囲は、u\+d800 から U\+DBFF です。 個々 のサロゲートはそれ自体以外の解釈がありません。サロゲート ペアの一部として使用する場合にのみ意味がします。  
  
   
  
## 例  
 次のコード例を示しています、 <xref:System.Char.IsHighSurrogate%2A>、 <xref:System.Char.IsLowSurrogate%2A>、および<xref:System.Char.IsSurrogatePair%2A>メソッドです。  
  
 [!code-cpp[char.surrogate\#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate\#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHighSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsHighSurrogate (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsHighSurrogate(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsHighSurrogate(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">文字列。</param>
        <param name="index">
          <c>s</c> 内の評価する文字の位置。</param>
        <summary>文字列中の指定された位置にある <see cref="T:System.Char" /> オブジェクトが、上位サロゲートであるかどうかを示します。</summary>
        <returns>
          <see langword="true" /> パラメーターに指定された文字の数値が U\+D800 から U\+DBFF の範囲内にある場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `index` パラメーターは 0 から始まる。  
  
 16 ビット コード ポイントを使用して単一の文字を表すだけでなく utf\-16 エンコードでは抽象文字を表現する 2 つの 16 ビット コード ポイントを使用してと呼ばれ、サロゲート ペア。 このペアの最初の要素は、上位サロゲートです。 そのコード ポイントの範囲は、u\+d800 から U\+DBFF です。 個々 のサロゲートには、独自の解釈がないです。サロゲート ペアの一部として使用する場合にのみ意味があります。  
  
   
  
## 例  
 次のコード例を示しています、 <xref:System.Char.IsHighSurrogate%2A>, 、<xref:System.Char.IsLowSurrogate%2A>, 、および <xref:System.Char.IsSurrogatePair%2A> メソッドです。  
  
 [!code-cpp[char.surrogate\#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate\#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> は <paramref name="s" /> 内の位置ではありません。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsLetter">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Unicode 文字が Unicode の文字かどうかを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを判断するかどうか、 <xref:System.Char> Unicode 文字の任意のカテゴリのメンバーであります。 Unicode 文字を以下に示します。  
  
-   U\+0041 \(LATIN CAPITAL LETTER A\) と 005A を通じてなどの大文字 \(LATIN CAPITAL LETTER Z\)、または U \+ 0400 \(キリル文字の大文字 a IE WITH GRAVE\) を通じて U \+ 042F \(キリル文字の大文字のアルファベットよ\)。 これらの文字のメンバーである、 <xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=fullName> カテゴリ。  
  
-   U \+ 0061 \(LATIN SMALL LETTER A\) と 007A を通じてなどの小文字 \(LATIN SMALL 文字 Z\)、または U \+ 03AC \(ギリシャ語小さな文字アルファにトノス\) と 03CE を通じて \(ギリシャ語小さな文字オメガとトノス\)。 これらの文字のメンバーである、 <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=fullName> カテゴリ。  
  
-   タイトルの小文字の両方、01 C 5 となど \(LATIN CAPITAL LETTER D で小さな文字 Z でキャロン\) または U \+ 1FFC \(ギリシャ語の大文字 a オメガと PROSGEGRAMMENI\)。 これらの文字のメンバーである、 <xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=fullName> カテゴリ。  
  
-   U \+ 02B0 などの修飾子 \(修飾子文字の小さな H\) U \+ 02C 1 \(修飾子文字反転 GLOTTAL 停止\)、または U \+ 1D2C \(修飾子文字の大文字 A\) と 1D 61 \(修飾子文字の小さなカイ\) を通じてします。 これらの文字のメンバーである、 <xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=fullName> カテゴリ。  
  
-   U \+ 05 D 0 \(ヘブライ語文字 ALEF\) ~ U \+ 05EA などの他の文字 \(ヘブライ語の文字 TAV\) と 0621 \(アラビア語文字 HAMZA\) と 063A を通じて \(アラビア語文字 GHAIN\) または U \+ 4E00 \(\< CJK 漢字, 名 \>\) と 9 FC 3 \(\< CJK 漢字、最終 \>\) をします。 これらの文字のメンバーである、 <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=fullName> カテゴリ。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsLetter">
      <MemberSignature Language="C#" Value="public static bool IsLetter (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetter(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLetter(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">評価する Unicode 文字。</param>
        <summary>指定した Unicode 文字が Unicode 文字かどうかを示します。</summary>
        <returns>
          <paramref name="c" /> が文字である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを判断するかどうか、 <xref:System.Char> Unicode 文字の任意のカテゴリのメンバーであります。 Unicode 文字を以下に示します。  
  
-   U\+0041 \(LATIN CAPITAL LETTER A\) U \+0 005A 経由などの大文字 \(LATIN CAPITAL LETTER Z\)、または U \+0 0400 \(キリル CAPITAL LETTER IE WITH GRAVE\) U \+0 042F \(キリル文字の大文字文字で表されるや\) を通じてします。 これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=fullName>カテゴリ。  
  
-   U \+0 0061 \(LATIN SMALL LETTER A\) U \+0 007A を通じてなど、英小文字 \(ラテン小さい文字 Z\)、または U \+0 03AC \(ギリシャ語小さい文字アルファ使用トノス\) U \+0 03CE を通じて \(ギリシャ語小さい文字オメガでトノス\)。 これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=fullName>カテゴリ。  
  
-   タイトルの大文字と小文字、U \+ 01 C 5 など \(ラテン CAPITAL LETTER D の小さい文字 Z でキャロン\) または U \+0 1FFC \(ギリシャ語 CAPITAL LETTER オメガで PROSGEGRAMMENI\)。 これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=fullName>カテゴリ。  
  
-   U \+0 02B0 などの修飾子 \(修飾子文字の小さな H\) U \+0 02C 1 \(修飾子文字 REVERSED GLOTTAL 停止\)、または U \+0 1D2C \(修飾子文字の大文字 A\) U \+0 1D 61 \(修飾子文字の小さなカイ\) を通じてします。 これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=fullName>カテゴリ。  
  
-   U \+ 05 D 0 \(ヘブライ語文字 ALEF\) U \+0 05EA を通じてなどその他の文字 \(ヘブライ語文字 TAV\) U \+0 0621 \(アラビア語文字 HAMZA\) U \+0 063A を通じて \(アラビア語文字 GHAIN\)、または U \+0 4E00 \(\<CJK ideograph,\="" first\=""\>\) U \+0 9 FC 3 を通じて \(\<CJK ideograph,\="" last\=""\>\).\<\/CJK\> \<\/CJK\> これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=fullName>カテゴリ。  
  
   
  
## 例  
 次のコード例を示します<xref:System.Char.IsLetter%2A>です。  
  
 [!code-cpp[System.Char.IsLetter\#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLetter/CPP/isletter.cpp#5)]
 [!code-csharp[System.Char.IsLetter\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLetter/CS/isletter.cs#5)]
 [!code-vb[System.Char.IsLetter\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLetter/VB/isletter.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="IsLetter">
      <MemberSignature Language="C#" Value="public static bool IsLetter (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetter(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLetter(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">文字列。</param>
        <param name="index">
          <c>s</c> 内の評価する文字の位置。</param>
        <summary>指定した文字列の指定位置にある文字が、Unicode 文字かどうかを示します。</summary>
        <returns>
          <paramref name="s" /> の <paramref name="index" /> の位置にある文字が文字である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 文字列内の文字位置では、0 から始まるインデックスが作成されます。  
  
 このメソッドは、文字列で指定したインデックス位置にある文字の Unicode 文字の任意のカテゴリのメンバーであるかどうかを判断します。 Unicode 文字を以下に示します。  
  
-   U\+0041 \(LATIN CAPITAL LETTER A\) U \+0 005A 経由などの大文字 \(LATIN CAPITAL LETTER Z\)、または U \+0 0400 \(キリル CAPITAL LETTER IE WITH GRAVE\) U \+0 042F \(キリル文字の大文字文字で表されるや\) を通じてします。 これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=fullName>カテゴリ。  
  
-   U \+0 0061 \(LATIN SMALL LETTER A\) U \+0 007A 経由などの小文字 \(ラテン小さい文字 Z\)、または U \+0 03AC \(ギリシャ語小さい文字アルファ使用トノス\) U \+0 03CE を通じて \(ギリシャ語小さい文字オメガでトノス\)。 これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=fullName>カテゴリ。  
  
-   タイトルの大文字と小文字、U \+ 01 C 5 など \(LATIN CAPITAL LETTER D と小さな文字 Z とキャロン\) または U \+0 1FFC \(ギリシャ語 CAPITAL LETTER オメガと PROSGEGRAMMENI\)。 これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=fullName>カテゴリ。  
  
-   U \+0 02B0 などの修飾子 \(修飾子文字の小さな H\) U \+0 02C 1 \(修飾子文字 REVERSED GLOTTAL 停止\)、または U \+0 1D2C \(修飾子文字の大文字 A\) U \+0 1D 61 \(修飾子文字の小さなカイ\) を通じてです。 これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=fullName>カテゴリ。  
  
-   U \+ 05 D 0 \(ヘブライ語文字 ALEF\) U \+0 05EA 経由などの他の文字 \(ヘブライ語文字 TAV\) U \+0 0621 \(アラビア語文字 HAMZA\) U \+0 063A を通じて \(アラビア語文字 GHAIN\)、または U \+0 4E00 \(\<CJK ideograph,\="" first\=""\>\) U \+0 9 FC 3 を通じて \(\<CJK ideograph,\="" last\=""\>\).\<\/CJK\> \<\/CJK\> これらの文字のメンバーである、<xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=fullName>カテゴリ。  
  
   
  
## 例  
 次のコード例を示します<xref:System.Char.IsLetter%2A>です。  
  
 [!code-cpp[System.Char.IsLetter\#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLetter/CPP/isletter.cpp#5)]
 [!code-csharp[System.Char.IsLetter\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLetter/CS/isletter.cs#5)]
 [!code-vb[System.Char.IsLetter\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLetter/VB/isletter.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</exception>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsLetterOrDigit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Unicode 文字が文字または 10 進数の数字であるかどうかを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 有効な文字および 10 進数では、次のカテゴリのメンバーである <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`, 、`LowercaseLetter`, 、`TitlecaseLetter`, 、`ModifierLetter`, 、`OtherLetter`, 、または `DecimalDigitNumber`です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsLetterOrDigit">
      <MemberSignature Language="C#" Value="public static bool IsLetterOrDigit (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetterOrDigit(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLetterOrDigit(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">評価する Unicode 文字。</param>
        <summary>指定した Unicode 文字が文字または 10 進数の数字なのかどうかを示します。</summary>
        <returns>
          <see langword="true" /> が文字または 10 進数の数字の場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 有効な文字および 10 進数では、次のカテゴリのメンバーである<xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`、 `LowercaseLetter`、 `TitlecaseLetter`、 `ModifierLetter`、 `OtherLetter`、または`DecimalDigitNumber`です。  
  
   
  
## 例  
 次のコード例を示します<xref:System.Char.IsLetterOrDigit%2A>です。  
  
 [!code-cpp[System.Char.IsLetterOrDigit\#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/CPP/isletterordigit.cpp#6)]
 [!code-csharp[System.Char.IsLetterOrDigit\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/CS/isletterordigit.cs#6)]
 [!code-vb[System.Char.IsLetterOrDigit\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/VB/isletterordigit.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="IsLetterOrDigit">
      <MemberSignature Language="C#" Value="public static bool IsLetterOrDigit (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetterOrDigit(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLetterOrDigit(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">文字列。</param>
        <param name="index">
          <c>s</c> 内の評価する文字の位置。</param>
        <summary>指定した文字列の指定位置にある文字が文字または 10 進数の数字かどうかを示します。</summary>
        <returns>
          <paramref name="s" /> の <paramref name="index" /> の位置にある文字が文字または 10 進数の数字の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 文字列内の文字位置では、0 から始まるインデックスが作成されます。  
  
 有効な文字および 10 進数では、次のカテゴリのメンバーである<xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`、 `LowercaseLetter`、 `TitlecaseLetter`、 `ModifierLetter`、 `OtherLetter`、または`DecimalDigitNumber`です。  
  
   
  
## 例  
 次のコード例を示します<xref:System.Char.IsLetterOrDigit%2A>です。  
  
 [!code-cpp[System.Char.IsLetterOrDigit\#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/CPP/isletterordigit.cpp#6)]
 [!code-csharp[System.Char.IsLetterOrDigit\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/CS/isletterordigit.cs#6)]
 [!code-vb[System.Char.IsLetterOrDigit\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/VB/isletterordigit.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</exception>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="IsLower">
      <MemberSignature Language="C#" Value="public static bool IsLower (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLower(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLower(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">評価する Unicode 文字。</param>
        <summary>指定した Unicode 文字が小文字かどうかを示します。</summary>
        <returns>
          <paramref name="c" /> が小文字の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 次のカテゴリのメンバーである有効な小文字<xref:System.Globalization.UnicodeCategory>:`LowercaseLetter`です。  
  
   
  
## 例  
 次のコード例を示します<xref:System.Char.IsLower%2A>です。  
  
 [!code-cpp[System.Char.IsLower\#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLower/CPP/islower.cpp#7)]
 [!code-csharp[System.Char.IsLower\#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLower/CS/islower.cs#7)]
 [!code-vb[System.Char.IsLower\#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLower/VB/islower.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.Char.IsUpper(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsLower">
      <MemberSignature Language="C#" Value="public static bool IsLower (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLower(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLower(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">文字列。</param>
        <param name="index">
          <c>s</c> 内の評価する文字の位置。</param>
        <summary>指定した文字列の指定位置にある文字が、小文字かどうかを示します。</summary>
        <returns>
          <see langword="true" /> の <paramref name="index" /> の位置にある文字が小文字の場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 文字列内の文字位置では、0 から始まるインデックスが作成されます。  
  
 次のカテゴリのメンバーである有効な小文字<xref:System.Globalization.UnicodeCategory>:`LowercaseLetter`です。  
  
   
  
## 例  
 次のコード例を示します<xref:System.Char.IsLower%2A>です。  
  
 [!code-cpp[System.Char.IsLower\#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLower/CPP/islower.cpp#7)]
 [!code-csharp[System.Char.IsLower\#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLower/CS/islower.cs#7)]
 [!code-vb[System.Char.IsLower\#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLower/VB/islower.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Char.IsUpper(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsLowSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsLowSurrogate (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLowSurrogate(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLowSurrogate(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">評価する文字。</param>
        <summary>指定された <see cref="T:System.Char" /> オブジェクトが下位サロゲートであるかどうかを示します。</summary>
        <returns>
          <see langword="true" /> パラメーターの数値が U\+DC00 から U\+DFFF の範囲内にある場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 16 ビット コード ポイントを使用して単一の文字を表すだけでなく utf\-16 エンコードでは抽象文字を表現する 2 つの 16 ビット コード ポイントを使用してと呼ばれ、サロゲート ペア。 このペアの 2 番目の要素は、下位のサロゲートです。 そのコード ポイントの範囲は、u\+dc00 から U\+DFFF です。 個々 のサロゲートには、独自の解釈がないです。サロゲート ペアの一部として使用する場合にのみ意味があります。  
  
   
  
## 例  
 次のコード例を示しています、 <xref:System.Char.IsHighSurrogate%2A>, 、<xref:System.Char.IsLowSurrogate%2A>, 、および <xref:System.Char.IsSurrogatePair%2A> メソッドです。  
  
 [!code-cpp[char.surrogate\#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate\#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLowSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsLowSurrogate (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLowSurrogate(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLowSurrogate(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">文字列。</param>
        <param name="index">
          <c>s</c> 内の評価する文字の位置。</param>
        <summary>文字列のうち、指定された位置にある <see cref="T:System.Char" /> オブジェクトが、下位サロゲートであるかどうかを示します。</summary>
        <returns>
          <paramref name="s" /> パラメーターに指定された文字の数値が U\+DC00 から U\+DFFF の範囲内にある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `index` パラメーターは 0 から始まる。  
  
 16 ビット コード ポイントを使用して単一の文字を表すだけでなく utf\-16 エンコードでは抽象文字を表現する 2 つの 16 ビット コード ポイントを使用してと呼ばれ、サロゲート ペア。 このペアの 2 番目の要素は、下位のサロゲートです。 そのコード ポイントの範囲は、u\+dc00 から U\+DFFF です。 個々 のサロゲートには、独自の解釈がないです。サロゲート ペアの一部として使用する場合にのみ意味があります。  
  
   
  
## 例  
 次のコード例を示しています、 <xref:System.Char.IsHighSurrogate%2A>, 、<xref:System.Char.IsLowSurrogate%2A>, 、および <xref:System.Char.IsSurrogatePair%2A> メソッドです。  
  
 [!code-cpp[char.surrogate\#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate\#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> は <paramref name="s" /> 内の位置ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNumber">
      <MemberSignature Language="C#" Value="public static bool IsNumber (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNumber(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsNumber(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">評価する Unicode 文字。</param>
        <summary>指定された Unicode 文字が数字かどうかを示します。</summary>
        <returns>
          <see langword="true" /> が数字である場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを判断するかどうか、<xref:System.Char>数値 Unicode カテゴリのです。 桁の数字のほかに、番号には、文字、分数、添字、上付き文字、ローマ数字、通貨分子、および丸付き数字が含まれます。 このメソッドとは対照的、<xref:System.Char.IsDigit%2A>を決定するメソッドかどうか、<xref:System.Char>基数 10 の数字です。  
  
> [!IMPORTANT]
>  <xref:System.Char.IsNumber%28System.Char%29>メソッドは、文字列が \(たとえば、メソッドを呼び出して、文字列内の各文字の\) の数値の文字から成るかどうかを決定するものではありません。 呼び出しのオーバー ロードのいずれかの文字列が数値文字で構成されているかどうかを判断するのには`TryParse`メソッド \(など<xref:System.Int32.TryParse%2A?displayProperty=fullName>または<xref:System.Double.TryParse%2A?displayProperty=fullName>整数または浮動小数点型のです。  
  
 有効な数字のメンバーである、 <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=fullName>、 <xref:System.Globalization.UnicodeCategory.LetterNumber?displayProperty=fullName>、または<xref:System.Globalization.UnicodeCategory.OtherNumber?displayProperty=fullName>カテゴリ。  
  
 <xref:System.Char.IsNumber%28System.Char%29>メソッドと見なします`c`単一言語の文字に対応しており、その文字が数字を表すかどうかを確認します。 ただし、Unicode 規格の一部の数値が 2 で表されます<xref:System.Char>サロゲート ペアを形成するオブジェクト。 たとえば、番号付けシステム エーゲは U \+0 10133 を通じて 10107 U \+0 のコード ポイントで構成されます。 次の例では、 <xref:System.Char.ConvertFromUtf32%2A> AEGEAN 番号 1 を表す文字列をインスタンス化するメソッド。 例から出力として、<xref:System.Char.IsNumber%28System.Char%29>メソッドを返します。`false`上位サロゲートまたは下位サロゲートのこの文字のいずれか渡されます。  
  
 [!code-csharp[System.Char.IsNumber\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsNumber/CS/isnumber1.cs#1)]
 [!code-vb[System.Char.IsNumber\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsNumber/VB/isnumber1.vb#1)]  
  
   
  
## 例  
 次の例で<xref:System.Char.IsNumber%2A>です。  
  
 [!code-cpp[System.Char.IsNumber\#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsNumber/CPP/isnumber.cpp#8)]
 [!code-csharp[System.Char.IsNumber\#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsNumber/CS/isnumber.cs#8)]
 [!code-vb[System.Char.IsNumber\#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsNumber/VB/isnumber.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.Char.IsDigit(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsNumber">
      <MemberSignature Language="C#" Value="public static bool IsNumber (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNumber(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsNumber(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">文字列。</param>
        <param name="index">
          <c>s</c> 内の評価する文字の位置。</param>
        <summary>指定した文字列の指定位置にある文字が数字かどうかを示します。</summary>
        <returns>
          <paramref name="s" /> の <paramref name="index" /> の位置にある文字が数字である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを判断するかどうか、<xref:System.Char>数値 Unicode カテゴリのです。 桁の数字のほかに、番号には、文字、分数、添字、上付き文字、ローマ数字、通貨分子、および丸付き数字が含まれます。 このメソッドとは対照的、<xref:System.Char.IsDigit%2A>を決定するメソッドかどうか、<xref:System.Char>基数 10 の数字です。  
  
 文字列内の文字位置では、0 から始まるインデックスが作成されます。  
  
> [!IMPORTANT]
>  <xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29>メソッドは、文字列が \(たとえば、メソッドを呼び出して、文字列内の各文字の\) の数値の文字から成るかどうかを決定するものではありません。 呼び出しのオーバー ロードのいずれかの文字列が数値文字で構成されているかどうかを判断するのには `TryParse`メソッド \(など<xref:System.Int32.TryParse%2A?displayProperty=fullName>または<xref:System.Double.TryParse%2A?displayProperty=fullName>整数または浮動小数点型のです。  
  
 有効な数字のメンバーである、 <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=fullName>、 <xref:System.Globalization.UnicodeCategory.LetterNumber?displayProperty=fullName>、または<xref:System.Globalization.UnicodeCategory.OtherNumber?displayProperty=fullName>カテゴリ。  
  
 場合、<xref:System.Char>オブジェクト位置にある`index`、有効なサロゲート ペアの最初の文字、<xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29>メソッドは、サロゲート ペアが数字を形成するかどうかを判断します。 たとえば、番号付けシステム エーゲは U \+0 10133 を通じて 10107 U \+0 のコード ポイントで構成されます。 次の例では、 <xref:System.Char.ConvertFromUtf32%2A> AEGEAN 番号 1 を表す文字列をインスタンス化するメソッド。 例から出力として、<xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29>メソッドを返します。`true`渡される上位サロゲート AEGEAN 番号 1 の場合。 ただし、これには、下位サロゲートが渡された場合、下位サロゲートのカテゴリのみを考慮し、返します`false`です。  
  
 [!code-csharp[System.Char.IsNumber\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsNumber/CS/isnumber1.cs#2)]
 [!code-vb[System.Char.IsNumber\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsNumber/VB/isnumber1.vb#2)]  
  
   
  
## 例  
 次の例で<xref:System.Char.IsNumber%2A>です。  
  
 [!code-cpp[System.Char.IsNumber\#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsNumber/CPP/isnumber.cpp#8)]
 [!code-csharp[System.Char.IsNumber\#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsNumber/CS/isnumber.cs#8)]
 [!code-vb[System.Char.IsNumber\#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsNumber/VB/isnumber.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Char.IsDigit(System.Char)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsPunctuation">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Unicode 文字が区切り記号かどうかを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 有効な区切り記号では、次のカテゴリのメンバーである <xref:System.Globalization.UnicodeCategory>: `ConnectorPunctuation`, 、`DashPunctuation`, 、`OpenPunctuation`, 、`ClosePunctuation`, 、`InititalQuotePunctuation`, 、`FinalQuotePunctuation`, 、または `OtherPunctuation`です。 次の表に、Unicode コード ポイントでの文字が含まれます。  
  
|||||  
|-|-|-|-|  
|U \+ U \+ 0023 に 0021|U \+ 060 C および U \+ 060 D|U \+ U \+ 180A を 1800|U \+ U \+ 301F に 3014|  
|U \+ U \+002 に 0025|U \+ 061B|U \+ 1944年および u\+1945|U \+ 3030|  
|U \+ 002 C U \+ 002F を|U \+ 061E と U \+ 061F|U \+ 19DE と U \+ 19DF|U \+ 303D|  
|U \+ 003A と U \+ 003B|U \+ U \+ 方位 066 D に 066A|U \+ 1A1E と U \+ 1A1F|U \+ 30A0|  
|U \+ 003F および u\+0040|U \+ 06D 4|U \+ U \+ 1B60 に 1B5A|U \+ 30FB|  
|U \+ U \+ 005\-D を 005B|U \+ U \+ 070 D に 0700|U \+ U \+ 2027年に 2010|U \+ A877 するには、U A874|  
|U \+ 005F|U \+ U \+ 07F9 に 07F7|U\+2030 U \+ 2043年に|U \+ FD3E と U \+ FD3F|  
|U \+ 007B|U\+0964 および u\+0965|U \+ U \+ 2051年を 2045|U \+ FE19 するには、U FE10|  
|U \+ 007\-D|U \+ 0970|U \+ U \+ 205E に 2053|U \+ FE52 するには、U FE30|  
|U \+ 00A1|U \+ 0DF4|U \+ 207 D と U \+ 207E|U \+ FE61 するには、U FE54|  
|U \+ 00AB|U \+ U \+ 0E5B に 0E4F|U \+ 208 D と U \+ 208E|U \+ FE63|  
|U \+ 00AD|U \+ U \+ 0F12 に 0F04|U \+ の 2329年と 232A|U \+ FE68|  
|U \+ 00B7|U \+ U \+ 0F3D に 0F3A|U \+ U \+ 2775年に 2768|U \+ FE6A と U \+ FE6B|  
|U \+ 00BB|U \+ 0F85|U \+ 27C 6 に U \+ 27C 5|U \+ FF03 に U \+ ff 01|  
|U \+ 00BF|U \+ 0FD0 と U \+ 0FD1|U \+ U \+ 27EB に 27E6|U \+ FF0A するには、U FF05|  
|U \+ 037E|U \+ U \+ 104F に 104A|U \+ U \+ 2998年に 2983|U \+ FF0F するには、U FF0C|  
|U \+ 0387|U \+ 10FB|U \+ 29D 8 U \+ 29DB を|U \+ FF1A と U \+ FF1B|  
|U \+ U \+ 055F に 055A|U \+ U \+ 1368年に 1361|U \+ 29 FC と U \+ 29FD|U \+ FF1F と U \+ FF20|  
|U \+ の 0589年と 058A|U \+ 166 D と U \+ 166E|U \+ U \+ 2CFC に 2CF9|U \+ FF3D するには、U FF3B|  
|U \+ 05BE|U \+ 169B と U \+ 169 C|U \+ 2CFE と U \+ 2CFF|U \+ FF3F|  
|U \+ 05 C 0|U \+ U \+ 16ED に 16EB|U \+ U \+ 2E17 に 2E00|U \+ FF5B|  
|U \+ 05C 3|U\+1735 および u\+1736|U \+ 2E1C と U \+ 2E1D|U \+ FF5D|  
|U \+ 05C 6|U \+ 17D 4 U \+ 17D 6|U \+ U \+ 3003 を 3001|U \+ FF65 するには、U FF5F|  
|U \+ 05F3 と U \+ 05F4|U \+ 17D 8 U \+ 17DA を|U \+ U \+ 3011 に 3008||  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsPunctuation">
      <MemberSignature Language="C#" Value="public static bool IsPunctuation (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPunctuation(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsPunctuation(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">評価する Unicode 文字。</param>
        <summary>指定した Unicode 文字が区切り記号かどうかを示します。</summary>
        <returns>
          <paramref name="c" /> が区切り記号の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 有効な区切り記号では、次のカテゴリのメンバーである<xref:System.Globalization.UnicodeCategory>: `ConnectorPunctuation`、 `DashPunctuation`、 `OpenPunctuation`、 `ClosePunctuation`、 `InititalQuotePunctuation`、 `FinalQuotePunctuation`、または`OtherPunctuation`です。 次の表に、Unicode コード ポイントの文字が含まれます。  
  
|||||  
|-|-|-|-|  
|U \+ U \+0 0023 に 0021|U \+0 060 C と U \+0 060 D|U \+ U \+0 180A を 1800|U \+ U \+0 301F に 3014|  
|U \+ U \+002 に 0025|U \+0 061B|U\+1944 および u\+1945|U \+0 3030|  
|U \+ 002 C U \+0 002F|U \+0 061E と U \+0 061F|U \+0 19DE と U \+0 19DF|U \+0 303D|  
|U \+0 003A と U \+0 003B|U \+ U \+0 方位 066 D を 066A|U \+0 1A1E と U \+0 1A1F|U \+0 30A0|  
|U \+0 003F と U \+0 0040|U \+0 06D 4|U \+ U \+0 1B60 に 1B5A|U \+0 30FB|  
|U \+ U \+0 005\-D を 005B|U \+ U \+0 070 D に 0700|U \+ U \+0 2027 に 2010|U \+ A874 U \+ A877 に|  
|U \+0 005F|U \+ U \+0 07F9 に 07F7|U\+2030 U \+0 2043 に|U \+ FD3E と U \+ FD3F|  
|U \+0 007B|U\+0964 および u\+0965|U \+ U \+0 2051 に 2045|U \+ FE10 U \+ FE19 に|  
|U \+0 007 D|U \+0 0970|U \+ U \+0 205E に 2053|U \+ FE30 U \+ FE52 に|  
|U \+0 00A1|U \+0 0DF4|U \+0 207 D と U \+0 207E|U \+ FE54 U \+ FE61 に|  
|U \+0 00AB|U \+ U \+0 0E5B に 0E4F|U \+0 208 D と U \+0 208E|U \+ FE63|  
|U \+0 00AD|U \+ U \+0 0F12 に 0F04|U \+0 の 2329 と 232A|U \+ FE68|  
|U \+0 00B7|U \+ U \+0 0F3D に 0F3A|U \+ U \+0 2775 に 2768|U \+ FE6A と U \+ FE6B|  
|U \+0 00BB|U \+0 0F85|U \+0 27C 6 に U \+0 27C 5|U \+ FF03 に U \+ ff 01|  
|U \+0 00BF|U \+0 0FD0 と U \+0 0FD1|U \+ U \+0 27EB に 27E6|U \+ FF05 U \+ FF0A に|  
|U \+0 037E|U \+ U \+0 104F に 104A|U \+ U \+0 2998 に 2983|U \+ FF0C U \+ FF0F に|  
|U \+0 0387|U \+0 10FB|U \+0 29D 8 U \+0 29DB を|U \+ FF1A と U \+ FF1B|  
|U \+ U \+0 055F に 055A|U \+ U \+0 1368 に 1361|U \+0 29 FC と U \+0 29FD|U \+ FF1F と U \+ FF20|  
|U \+0 の 0589 と 058A|U \+0 166 D と U \+0 166E|U \+ U \+0 2CFC に 2CF9|U \+ FF3B U \+ FF3D に|  
|U \+0 05BE|U \+0 169B と U \+0 169 C|U \+0 2CFE と U \+0 2CFF|U \+ FF3F|  
|U \+ 05 C 0|U \+ U \+0 16ED に 16EB|U \+ U \+0 2E17 に 2E00|U \+ FF5B|  
|U \+0 05C 3|U\+1735 および u\+1736|U \+0 2E1C と U \+0 2E1D|U \+ FF5D|  
|U \+ 05C 6|U \+0 17D 4 U \+0 17D 6|U \+ U \+0 3003 に 3001|U \+ FF5F U \+ FF65 に|  
|U \+0 05F3 と U \+0 05F4|U \+0 17D 8 U \+0 17DA を|U \+ U \+0 3011 に 3008||  
  
   
  
## 例  
 次のコード例を示します<xref:System.Char.IsPunctuation%2A>です。  
  
 [!code-cpp[System.Char.IsPunctuation\#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsPunctuation/CPP/ispunctuation.cpp#9)]
 [!code-csharp[System.Char.IsPunctuation\#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsPunctuation/CS/ispunctuation.cs#9)]
 [!code-vb[System.Char.IsPunctuation\#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsPunctuation/VB/ispunctuation.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="IsPunctuation">
      <MemberSignature Language="C#" Value="public static bool IsPunctuation (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPunctuation(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsPunctuation(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">文字列。</param>
        <param name="index">
          <c>s</c> 内の評価する文字の位置。</param>
        <summary>指定した文字列の指定位置にある文字が区切り記号かどうかを示します。</summary>
        <returns>
          <see langword="true" /> の <paramref name="index" /> の位置にある文字が区切り記号の場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 文字列内の文字位置では、0 から始まるインデックスが作成されます。  
  
 有効な区切り記号では、次のカテゴリのメンバーである<xref:System.Globalization.UnicodeCategory>: `ConnectorPunctuation`、 `DashPunctuation`、 `OpenPunctuation`、 `ClosePunctuation`、 `InititalQuotePunctuation`、 `FinalQuotePunctuation`、または`OtherPunctuation`です。 次の表に、Unicode コード ポイントの文字が含まれます。  
  
|||||  
|-|-|-|-|  
|U \+ U \+0 0023 に 0021|U \+0 060 C と U \+0 060 D|U \+ U \+0 180A に 1800|U \+ U \+0 301F に 3014|  
|U \+ U \+002 に 0025|U \+0 061B|U\+1944 および u\+1945|U \+0 3030|  
|U \+ 002 C U \+0 002F|U \+0 061E と U \+0 061F|U \+0 19DE と U \+0 19DF|U \+0 303D|  
|U \+0 003A と U \+0 003B|U \+ U \+0 方位 066 D を 066A|U \+0 1A1E と U \+0 1A1F|U \+0 30A0|  
|U \+0 003F と U \+0 0040|U \+0 06D 4|U \+ U \+0 1B60 に 1B5A|U \+0 30FB|  
|U \+ U \+0 005\-D を 005B|U \+ U \+0 070 D を 0700|U \+ U \+0 2027 に 2010|U \+ A874 U \+ A877 に|  
|U \+0 005F|U \+ U \+0 07F9 に 07F7|U\+2030 U \+0 2043 に|U \+ FD3E と U \+ FD3F|  
|U \+0 007B|U\+0964 および u\+0965|U \+ U \+0 2051 に 2045|U \+ FE10 U \+ FE19 に|  
|U \+0 007 D|U \+0 0970|U \+ U \+0 205E に 2053|U \+ FE30 U \+ FE52 に|  
|U \+0 00A1|U \+0 0DF4|U \+0 207 D と U \+0 207E|U \+ FE54 U \+ FE61 に|  
|U \+0 00AB|U \+ U \+0 0E5B に 0E4F|U \+0 208 D と U \+0 208E|U \+ FE63|  
|U \+0 00AD|U \+ U \+0 0F12 に 0F04|U \+0 の 2329 と 232A|U \+ FE68|  
|U \+0 00B7|U \+ U \+0 0F3D に 0F3A|U \+ U \+0 2775 に 2768|U \+ FE6A と U \+ FE6B|  
|U \+0 00BB|U \+0 0F85|U \+0 27C 6 に U \+0 27C 5|U \+ FF03 に U \+ ff 01|  
|U \+0 00BF|U \+0 0FD0 と U \+0 0FD1|U \+ U \+0 27EB に 27E6|U \+ FF05 U \+ FF0A に|  
|U \+0 037E|U \+ U \+0 104F に 104A|U \+ U \+0 2998 に 2983|U \+ FF0C U \+ FF0F に|  
|U \+0 0387|U \+0 10FB|U \+0 29D 8 U \+0 29DB|U \+ FF1A と U \+ FF1B|  
|U \+ U \+0 055F に 055A|U \+ U \+0 1368 に 1361|U \+0 29 FC と U \+0 29FD|U \+ FF1F と U \+ FF20|  
|U \+0 の 0589 と 058A|U \+0 166 D と U \+0 166E|U \+ U \+0 2CFC に 2CF9|U \+ FF3B U \+ FF3D に|  
|U \+0 05BE|U \+0 169B と U \+0 169 C|U \+0 2CFE と U \+0 2CFF|U \+ FF3F|  
|U \+ 05 C 0|U \+ U \+0 16ED に 16EB|U \+ U \+0 2E17 に 2E00|U \+ FF5B|  
|U \+0 05C 3|U\+1735 および u\+1736|U \+0 2E1C と U \+0 2E1D|U \+ FF5D|  
|U \+0 05C 6|U \+0 17D 4 U \+0 17D 6|U \+ U \+0 3003 に 3001|U \+ FF5F U \+ FF65 に|  
|U \+0 05F3 と U \+0 05F4|U \+0 17D 8 U \+0 17DA|U \+ U \+0 3011 に 3008||  
  
   
  
## 例  
 次のコード例を示します<xref:System.Char.IsPunctuation%2A>です。  
  
 [!code-cpp[System.Char.IsPunctuation\#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsPunctuation/CPP/ispunctuation.cpp#9)]
 [!code-csharp[System.Char.IsPunctuation\#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsPunctuation/CS/ispunctuation.cs#9)]
 [!code-vb[System.Char.IsPunctuation\#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsPunctuation/VB/ispunctuation.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSeparator">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Unicode 文字が区切り文字かどうかを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Unicode 規格では、区切り記号の 3 つのサブカテゴリを認識します。  
  
-   区切り記号の領域 \(、 <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=fullName> カテゴリ\)、\\u0020 などの文字が含まれています。  
  
-   行区切り記号 \(、 <xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=fullName> カテゴリ\)、\\u2028 が含まれます。  
  
-   段落区切り記号 \(、 <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=fullName> カテゴリ\)、\\u2029 が含まれます。  
  
> [!NOTE]
>  Unicode 標準の文字の \\u000A \(LF\)、\\u000C \(FF\) および \\u000D \(CR\) が制御文字としては分類 \(のメンバー、 <xref:System.Globalization.UnicodeCategory.Control?displayProperty=fullName> カテゴリ\)、区切り文字としてではなく。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSeparator">
      <MemberSignature Language="C#" Value="public static bool IsSeparator (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSeparator(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSeparator(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">評価する Unicode 文字。</param>
        <summary>指定した Unicode 文字が区切り文字かどうかを示します。</summary>
        <returns>
          <see langword="true" /> が区切り文字である場合は <paramref name="c" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Unicode 規格では、区切り記号の 3 つのサブカテゴリを認識します。  
  
-   区切り記号のスペース \(、<xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=fullName>カテゴリ\)、\\u0020 などの文字が含まれます。  
  
-   行区切り記号 \(、<xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=fullName>カテゴリ\)、\\u2028 が含まれます。  
  
-   段落区切り記号 \(、<xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=fullName>カテゴリ\)、\\u2029 が含まれます。  
  
> [!NOTE]
>  Unicode 標準制御文字としての文字の \\u000A \(LF\)、\\u000C \(FF\) および \\u000D \(CR\) の分類 \(のメンバー、<xref:System.Globalization.UnicodeCategory.Control?displayProperty=fullName>カテゴリ\)、区切り文字としてではなくです。  
  
   
  
## 例  
 次の例の一覧、<xref:System.Char>区切り文字として分類されるオブジェクト。  
  
 [!code-cpp[System.Char.IsSeparator\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSeparator/CPP/isseparator1.cpp#1)]
 [!code-csharp[System.Char.IsSeparator\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSeparator/CS/isseparator1.cs#1)]
 [!code-vb[System.Char.IsSeparator\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSeparator/VB/isseparator1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="IsSeparator">
      <MemberSignature Language="C#" Value="public static bool IsSeparator (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSeparator(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSeparator(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">文字列。</param>
        <param name="index">
          <c>s</c> 内の評価する文字の位置。</param>
        <summary>指定した文字列の指定位置にある文字が区切り文字かどうかを示します。</summary>
        <returns>
          <see langword="true" /> の <paramref name="index" /> の位置にある文字が区切り文字の場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 文字列内の文字位置では、0 から始まるインデックスが作成されます。  
  
 Unicode 規格では、区切り記号の 3 つのサブカテゴリを認識します。  
  
-   区切り記号の領域 \(、 <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=fullName> カテゴリ\)、\\u0020 などの文字が含まれています。  
  
-   行区切り記号 \(、 <xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=fullName> カテゴリ\)、\\u2028 が含まれます。  
  
-   段落区切り記号 \(、 <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=fullName> カテゴリ\)、\\u2029 が含まれます。  
  
> [!NOTE]
>  Unicode 標準の文字の \\u000A \(LF\)、\\u000C \(FF\) および \\u000D \(CR\) が制御文字としては分類 \(のメンバー、 <xref:System.Globalization.UnicodeCategory.Control?displayProperty=fullName> カテゴリ\)、区切り文字としてではなく。  
  
   
  
## 例  
 次の例で <xref:System.Char.IsSeparator%2A>します。  
  
 [!code-cpp[System.Char.IsSeparator\#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSeparator/CPP/isseparator.cpp#10)]
 [!code-csharp[System.Char.IsSeparator\#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSeparator/CS/isseparator.cs#10)]
 [!code-vb[System.Char.IsSeparator\#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSeparator/VB/isseparator.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="IsSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsSurrogate (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSurrogate(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSurrogate(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">評価する Unicode 文字。</param>
        <summary>指定した文字がサロゲート コード単位を持つかどうかを示します。</summary>
        <returns>
          <paramref name="c" /> が上位サロゲートまたは下位サロゲートである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 サロゲートは、 <xref:System.Char> u\+d800 から U\+DFFF の範囲の utf\-16 コード単位を持つオブジェクト。 この範囲内のコード単位での各文字が属する、<xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=fullName>カテゴリ。 個々 のサロゲート コード単位が存在せず、それ自体の解釈がサロゲート ペアの一部として使用される場合にのみ意味します。 サロゲート ペアの詳細についてで Unicode 標準を参照してください、 [Unicode home page](http://go.microsoft.com/fwlink/?linkid=37123)です。  
  
   
  
## 例  
 次の例で、<xref:System.Char.IsSurrogate%2A>メソッドです。  
  
 [!code-cpp[System.Char.IsSurrogate\#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSurrogate/CPP/issurrogate.cpp#11)]
 [!code-csharp[System.Char.IsSurrogate\#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSurrogate/CS/issurrogate.cs#11)]
 [!code-vb[System.Char.IsSurrogate\#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSurrogate/VB/issurrogate.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Char.IsHighSurrogate" />
        <altmember cref="Overload:System.Char.IsLowSurrogate" />
        <altmember cref="Overload:System.Char.IsSurrogatePair" />
      </Docs>
    </Member>
    <Member MemberName="IsSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsSurrogate (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSurrogate(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSurrogate(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">文字列。</param>
        <param name="index">
          <c>s</c> 内の評価する文字の位置。</param>
        <summary>指定した文字列の指定位置にある文字がサロゲート コード単位を持つかどうかを示します。</summary>
        <returns>
          <paramref name="s" /> の <paramref name="index" /> にある文字が上位サロゲートまたは下位サロゲートである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 文字列内の文字位置では、0 から始まるインデックスが作成されます。  
  
 サロゲートとは、 <xref:System.Char> u\+d800 から U\+DFFF の範囲の utf\-16 コード単位を持つオブジェクト。 この範囲内のコード単位で各文字が属する、 <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=fullName> カテゴリ。 個々 のサロゲート コード単位では、独自の解釈は存在せずがサロゲート ペアの一部として使用される場合にのみ意味を持ちます。 サロゲート ペアの詳細については、Unicode 標準を参照してください、 [Unicode home page](http://go.microsoft.com/fwlink/?linkid=37123)します。  
  
   
  
## 例  
 次のコード例を示します <xref:System.Char.IsSurrogate%2A>します。  
  
 [!code-cpp[System.Char.IsSurrogate\#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSurrogate/CPP/issurrogate.cpp#11)]
 [!code-csharp[System.Char.IsSurrogate\#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSurrogate/CS/issurrogate.cs#11)]
 [!code-vb[System.Char.IsSurrogate\#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSurrogate/VB/issurrogate.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</exception>
        <altmember cref="Overload:System.Char.IsHighSurrogate" />
        <altmember cref="Overload:System.Char.IsLowSurrogate" />
        <altmember cref="Overload:System.Char.IsSurrogatePair" />
      </Docs>
    </Member>
    <Member MemberName="IsSurrogatePair">
      <MemberSignature Language="C#" Value="public static bool IsSurrogatePair (char highSurrogate, char lowSurrogate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSurrogatePair(char highSurrogate, char lowSurrogate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSurrogatePair(System.Char,System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="highSurrogate" Type="System.Char" />
        <Parameter Name="lowSurrogate" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="highSurrogate">サロゲート ペアの上位サロゲートとして評価する文字。</param>
        <param name="lowSurrogate">サロゲート ペアの下位サロゲートとして評価する文字。</param>
        <summary>指定された 2 つの <see cref="T:System.Char" /> オブジェクトがサロゲート ペアを形成するかどうかを示します。</summary>
        <returns>
          <see langword="true" /> パラメーターの数値が U\+D800 から U\+DBFF までの範囲内にあり、<paramref name="highSurrogate" /> パラメーターの数値が U\+DC00 から U\+DFFF までの範囲内にある場合は <paramref name="lowSurrogate" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 通常、1 つの文字は、1 つの 16 ビット Unicode コード単位で表されます。 Utf\-16 エンコードでは、サロゲート ペアは、2 つの 16 ビットのコード単位で表される単一の抽象文字を許可するもサポートしています。 値は u\+d800 から U\+DBFF の範囲に、最初のコード単位は、高のサロゲートです。 値は u\+dc00 から U\+DFFF の範囲に、2 つ目のコード単位は、下位のサロゲートです。 個々 のサロゲート コード ポイントがある独自の解釈されません。 サロゲートおよび Unicode 規格の詳細については、次を参照してください。、 [Unicode home page](http://go.microsoft.com/fwlink/?LinkId=37123)です。  
  
   
  
## 例  
 次のコード例を示しています、 <xref:System.Char.IsHighSurrogate%2A>、 <xref:System.Char.IsLowSurrogate%2A>、および<xref:System.Char.IsSurrogatePair%2A>メソッドです。  
  
 [!code-cpp[char.surrogate\#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate\#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.IsHighSurrogate(System.Char)" />
        <altmember cref="M:System.Char.IsLowSurrogate(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsSurrogatePair">
      <MemberSignature Language="C#" Value="public static bool IsSurrogatePair (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSurrogatePair(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSurrogatePair(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">文字列。</param>
        <param name="index">
          <c>s</c> 内の評価する文字のペアの開始位置。</param>
        <summary>文字列中の指定された位置で互いに隣接する 2 つの <see cref="T:System.Char" /> オブジェクトがサロゲート ペアを形成するかどうかを示します。</summary>
        <returns>
          <paramref name="s" /> パラメーターの <paramref name="index" /> 位置と <paramref name="index" /> \+1 位置に隣接して文字が含まれており、<paramref name="index" /> 位置にある文字の数値が U\+D800 から U\+DBFF の範囲内にあり、また、<paramref name="index" /> \+1 位置にある文字の数値が U\+DC00 から U\+DFFF の範囲内にある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 通常、一文字は、1 つの 16 ビット Unicode コード単位で表されます。 Utf\-16 エンコードでは、2 つの 16 ビットのコード単位で表される単一の抽象文字を使用できるサロゲート ペアもサポートしています。 値は u\+d800 から U\+DBFF の範囲に、最初のコード単位は、上位サロゲートです。 値は u\+dc00 から U\+DFFF の範囲に、2 つ目のコード単位は、下位のサロゲートです。 個々 のサロゲート コード ポイントがある独自の解釈なし。 サロゲートおよび Unicode 規格の詳細については、次を参照してください。、 [Unicode home page](http://go.microsoft.com/fwlink/?LinkId=37123)します。  
  
   
  
## 例  
 次のコード例を示しています、 <xref:System.Char.IsHighSurrogate%2A>, 、<xref:System.Char.IsLowSurrogate%2A>, 、および <xref:System.Char.IsSurrogatePair%2A> メソッドです。  
  
 [!code-cpp[char.surrogate\#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate\#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> は <paramref name="s" /> 内の位置ではありません。</exception>
        <altmember cref="M:System.Char.IsHighSurrogate(System.Char)" />
        <altmember cref="M:System.Char.IsLowSurrogate(System.Char)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSymbol">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Unicode 文字が記号かどうかを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 有効なシンボルでは、次のカテゴリのメンバーである <xref:System.Globalization.UnicodeCategory>: `MathSymbol`, 、`CurrencySymbol`, 、`ModifierSymbol`, 、および `OtherSymbol`です。  
  
 大まかに定義された一連の次のような文字を Unicode 規格のシンボルには。  
  
-   通貨記号。  
  
-   文字種記号、数学的な英数字記号として ℅ № などの記号のセットが含まれていると™ です。  
  
-   数字の文字と下付き文字などの書式。  
  
-   算術演算子と矢印です。  
  
-   幾何学模様の記号。  
  
-   技術的な記号です。  
  
-   ブライユ点字パターンです。  
  
-   飾り。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSymbol">
      <MemberSignature Language="C#" Value="public static bool IsSymbol (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSymbol(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSymbol(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">評価する Unicode 文字。</param>
        <summary>指定した Unicode 文字が記号かどうかを示します。</summary>
        <returns>
          <paramref name="c" /> が記号である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 有効なシンボルでは、次のカテゴリのメンバーである<xref:System.Globalization.UnicodeCategory>: `MathSymbol`、 `CurrencySymbol`、 `ModifierSymbol`、および`OtherSymbol`です。  
  
 大まかに定義された一連の次のような文字を Unicode 規格のシンボルには。  
  
-   通貨記号。  
  
-   文字種の記号、数学的な英数字記号だけでなく ℅、№ などの記号のセットが含まれていると™ します。  
  
-   文字と下付き文字などのフォームを番号します。  
  
-   算術演算子、および矢印です。  
  
-   幾何学模様の記号。  
  
-   技術的な記号です。  
  
-   ブライユ点字パターン。  
  
-   飾り。  
  
   
  
## 例  
 次のコード例を示します<xref:System.Char.IsSymbol%2A>です。  
  
 [!code-cpp[System.Char.IsSymbol\#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSymbol/CPP/issymbol.cpp#12)]
 [!code-csharp[System.Char.IsSymbol\#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSymbol/CS/issymbol.cs#12)]
 [!code-vb[System.Char.IsSymbol\#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSymbol/VB/issymbol.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="IsSymbol">
      <MemberSignature Language="C#" Value="public static bool IsSymbol (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSymbol(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSymbol(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">文字列。</param>
        <param name="index">
          <c>s</c> 内の評価する文字の位置。</param>
        <summary>指定した文字列の指定位置にある文字が記号かどうかを示します。</summary>
        <returns>
          <paramref name="s" /> の <paramref name="index" /> の位置にある文字が記号である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 文字列内の文字位置では、0 から始まるインデックスが作成されます。  
  
 有効なシンボルでは、次のカテゴリのメンバーである<xref:System.Globalization.UnicodeCategory?displayProperty=fullName>: `MathSymbol`、 `CurrencySymbol`、 `ModifierSymbol`、および`OtherSymbol`です。  
  
 大まかに定義された一連の次のような文字を Unicode 規格のシンボルには。  
  
-   通貨記号。  
  
-   文字種の記号、数学的な英数字記号だけでなく ℅、№ などの記号のセットが含まれていると™ します。  
  
-   文字と下付き文字などのフォームを番号します。  
  
-   算術演算子、および矢印です。  
  
-   幾何学記号。  
  
-   技術的な記号です。  
  
-   ブライユ点字パターン。  
  
-   飾り。  
  
   
  
## 例  
 次のコード例を示します<xref:System.Char.IsSymbol%2A>です。  
  
 [!code-cpp[System.Char.IsSymbol\#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSymbol/CPP/issymbol.cpp#12)]
 [!code-csharp[System.Char.IsSymbol\#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSymbol/CS/issymbol.cs#12)]
 [!code-vb[System.Char.IsSymbol\#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSymbol/VB/issymbol.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="IsUpper">
      <MemberSignature Language="C#" Value="public static bool IsUpper (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUpper(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsUpper(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">評価する Unicode 文字。</param>
        <summary>指定した Unicode 文字が大文字かどうかを示します。</summary>
        <returns>
          <paramref name="c" /> が大文字である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 有効な文字を大文字で次のカテゴリのメンバーである<xref:System.Globalization.UnicodeCategory>:`UppercaseLetter`です。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.Char.IsLower(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsUpper">
      <MemberSignature Language="C#" Value="public static bool IsUpper (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUpper(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsUpper(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">文字列。</param>
        <param name="index">
          <c>s</c> 内の評価する文字の位置。</param>
        <summary>指定した文字列の指定位置にある文字が大文字かどうかを示します。</summary>
        <returns>
          <paramref name="s" /> の <paramref name="index" /> の位置にある文字が大文字の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 文字列内の文字位置では、0 から始まるインデックスが作成されます。  
  
 有効な文字を大文字で、次のカテゴリのメンバーである<xref:System.Globalization.UnicodeCategory>:`UppercaseLetter`です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsWhiteSpace">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Unicode 文字が空白かどうかを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 空白文字では、次の Unicode 文字です。  
  
-   メンバー、 <xref:System.Globalization.UnicodeCategory.SpaceSeparator> カテゴリが含まれています文字のスペース \(u\+0020\)、OGHAM 領域マーク \(U \+ 1680\)、EN クアッド \(U \+ 2000\)、EM 四角形 \(と 2001 年\)、半角スペース \(U \+ 2002\)、全角スペース \(と 2003\)、EM ごとの 3 つの領域 \(と 2004 年\)、EM ごとの 4 つの領域 \(と 2005\)、EM ごとの 6 つのスペース \(と 2006 年\)、図の領域 \(と 2007 年\)、句読点をシン \(と 2008 年\)、スペース \(と 2009 年\)、スペース髪の毛容量 \(200 U \+ a\)、幅の狭い非分割容量 \(U \+ 202F\)、中程度の数値演算の領域 \(U \+ 205F\)、および IDEOGRAPHIC スペース \(u\+3000\)。  
  
-   メンバー、 <xref:System.Globalization.UnicodeCategory.LineSeparator> カテゴリで、行区切り記号文字のみで構成されます \(u\+2028\)。  
  
-   メンバー、 <xref:System.Globalization.UnicodeCategory.ParagraphSeparator> 段落区切り記号文字のみから構成されるカテゴリ \(u\+2029\)。  
  
-   文字のタブ文字 \(u\+0009\) \(U \+ 0085\)、次の行とライン フィード \(u\+000 a\)、行の集計 \(U \+ 000B\)、フォーム フィード \(U \+ 000 C\)、キャリッジ リターン \(U\+000D\)、および非分割領域 \(U \+ 00A0\)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsWhiteSpace">
      <MemberSignature Language="C#" Value="public static bool IsWhiteSpace (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsWhiteSpace(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsWhiteSpace(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">評価する Unicode 文字。</param>
        <summary>指定した Unicode 文字が空白かどうかを示します。</summary>
        <returns>
          <paramref name="c" /> が空白である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 空白文字は、次の Unicode 文字です。  
  
-   メンバー、<xref:System.Globalization.UnicodeCategory.SpaceSeparator>カテゴリで、スペース文字が含まれています \(u\+0020\) 非分割領域 \(U \+0 00A0\)、OGHAM 領域をマーク \(U \+0 1680\)、EN クアッド \(U \+0 2000\)、EM クアッド \(U \+0 2001 年\)、EN スペース \(U \+0 2002\)、全角スペース \(U \+0 2003\)、3\-EM あたりスペース \(U \+0 2004 年\)、4\-EM あたりスペース \(U \+0 2005\)、6\-EM あたりスペース \(U \+0 2006\)、図の領域 \(U \+0 2007\)、句読点をシン \(U \+0 2008\)、スペース \(U \+0 2009 年\)、スペース髪領域 \(200 U \+ a\)、幅の狭い非分割領域 \(U \+0 202F\)、MEDIUM 数学的な領域 \(U \+0 205F\)、および全角スペース \(u\+3000\)。  
  
-   メンバー、<xref:System.Globalization.UnicodeCategory.LineSeparator>カテゴリで、行区切り記号文字だけで構成されます \(u\+2028\)。  
  
-   メンバー、<xref:System.Globalization.UnicodeCategory.ParagraphSeparator>段落区切り記号文字のみから構成されるカテゴリ \(u\+2029\)。  
  
-   文字のタブ文字 \(u\+0009\)、フィード \(u\+000 a\)、行の集計 \(U \+0 000B\)、フォーム フィード \(U \+ 000 C\)、キャリッジ リターン \(U\+000D\)、行し、次の行 \(U \+0 0085\)。  
  
   
  
## 例  
 次の例で、<xref:System.Char.IsWhiteSpace%28System.Char%29>メソッドです。  
  
 [!code-cpp[System.Char.IsWhiteSpace\#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/CPP/iswhitespace.cpp#14)]
 [!code-csharp[System.Char.IsWhiteSpace\#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/CS/iswhitespace.cs#14)]
 [!code-vb[System.Char.IsWhiteSpace\#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/VB/iswhitespace.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="IsWhiteSpace">
      <MemberSignature Language="C#" Value="public static bool IsWhiteSpace (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsWhiteSpace(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsWhiteSpace(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">文字列。</param>
        <param name="index">
          <c>s</c> 内の評価する文字の位置。</param>
        <summary>指定した文字列の指定位置にある文字が空白かどうかを示します。</summary>
        <returns>
          <paramref name="s" /> の中の位置 <paramref name="index" /> にある文字が空白の場合、<see langword="true" />。それ以外の場合、<see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 文字列内の文字位置では、0 から始まるインデックスが作成されます。  
  
 空白文字は、次の Unicode 文字です。  
  
-   メンバー、<xref:System.Globalization.UnicodeCategory.SpaceSeparator>カテゴリで、スペース文字が含まれています \(u\+0020\) 非分割領域 \(U \+0 00A0\)、OGHAM 領域マーク \(U \+0 1680\)、EN クアッド \(U \+0 2000\)、EM クアッド \(U \+0 2001 年\)、EN スペース \(U \+0 2002\)、全角スペース \(U \+0 2003\)、3\-EM あたりスペース \(U \+0 2004 年\)、4\-EM あたりスペース \(U \+0 2005\)、6\-EM あたりスペース \(U \+0 2006\)、図領域 \(U \+0 2007\)、句読点をシン \(U \+ 2008\)、スペース \(U \+0 2009 年\)、スペース髪領域 \(200 U \+ a\)、幅の狭い非分割領域 \(U \+0 202F\)、MEDIUM 数学的な領域 \(U \+0 205F\)、および全角スペース \(u\+3000\)。  
  
-   メンバー、<xref:System.Globalization.UnicodeCategory.LineSeparator>カテゴリで、行区切り記号文字だけで構成されます \(u\+2028\)。  
  
-   メンバー、<xref:System.Globalization.UnicodeCategory.ParagraphSeparator>段落区切り記号文字のみから構成されるカテゴリ \(u\+2029\)。  
  
-   文字のタブ文字 \(u\+0009\)、ライン フィード \(u\+000 a\)、行の集計 \(U \+0 000B\)、フォーム フィード \(U \+ 000 C\)、キャリッジ リターン \(U\+000D\)、および次の行 \(U \+0 0085\)。  
  
   
  
## 例  
 次のコード例を示します<xref:System.Char.IsWhiteSpace%2A>です。  
  
 [!code-cpp[System.Char.IsWhiteSpace\#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/CPP/iswhitespace.cpp#14)]
 [!code-csharp[System.Char.IsWhiteSpace\#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/CS/iswhitespace.cs#14)]
 [!code-vb[System.Char.IsWhiteSpace\#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/VB/iswhitespace.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満の値か、<paramref name="s" /> の最後の位置より大きい値です。</exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public const char MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.Char.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Char" /> の最大有効値を表します。 このフィールドは定数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この定数の値は、16 進数 0 xffff です。  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Char.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public const char MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char MinValue" />
      <MemberSignature Language="DocId" Value="F:System.Char.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Char" /> の最小有効値を表します。 このフィールドは定数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この定数の値は、16 進数の 0x00 です。  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Char.MaxValue" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static char Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.Parse(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">単一の文字を含む文字列、または <see langword="null" />。</param>
        <summary>指定した文字列の値をそれと等価な Unicode 文字に変換します。</summary>
        <returns>
          <paramref name="s" /> の単一文字と等価な Unicode 文字。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例を示します<xref:System.Char.Parse%2A>です。  
  
 [!code-cpp[System.Char.Parse\#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.Parse/CPP/parse.cpp#15)]
 [!code-csharp[System.Char.Parse\#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.Parse/CS/parse.cs#15)]
 [!code-vb[System.Char.Parse\#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.Parse/VB/parse.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> の長さが 1 ではありません。</exception>
        <altmember cref="M:System.Char.ToString" />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IComparable#CompareTo(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#GetTypeCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>**メモ**: この変換はサポートされていません。 変換を試みると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>この変換はサポートされていません。 値は返されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />」を参照してください。</summary>
        <returns>現在の <see cref="T:System.Char" /> オブジェクトの変換後の値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToByte%28System.Char%29?displayProperty=fullName> メソッド代わりにします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />」を参照してください。</summary>
        <returns>現在の <see cref="T:System.Char" /> オブジェクトの未変更の値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>**メモ**: この変換はサポートされていません。 変換を試みると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>値は返されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>**メモ**: この変換はサポートされていません。 変換を試みると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>値は返されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>**メモ**: この変換はサポートされていません。 変換を試みると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>値は返されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />」を参照してください。</summary>
        <returns>現在の <see cref="T:System.Char" /> オブジェクトの変換後の値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToInt16%28System.Char%29?displayProperty=fullName> メソッド代わりにします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />」をご覧ください。</summary>
        <returns>現在の <see cref="T:System.Char" /> オブジェクトの変換後の値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToInt32%28System.Char%29?displayProperty=fullName> メソッド代わりにします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />」を参照してください。</summary>
        <returns>現在の <see cref="T:System.Char" /> オブジェクトの変換後の値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToInt64%28System.Char%29?displayProperty=fullName> メソッド代わりにします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />」をご覧ください。</summary>
        <returns>現在の <see cref="T:System.Char" /> オブジェクトの変換後の値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToSByte%28System.Char%29?displayProperty=fullName> メソッド代わりにします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>**メモ**: この変換はサポートされていません。 変換を試みると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>値は返されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">この変換はサポートされていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToString">
      <MemberSignature Language="C#" Value="string IConvertible.ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IConvertible.ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToString(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type">
          <see cref="T:System.Type" /> オブジェクト。</param>
        <param name="provider">
          <see cref="T:System.IFormatProvider" /> オブジェクト。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />」を参照してください。</summary>
        <returns>指定した型のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29> メソッド代わりにします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidCastException">現在の <see cref="T:System.Char" /> オブジェクトの値を、<paramref name="type" /> パラメーターで指定された型に変換できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <see cref="T:System.IFormatProvider" /> オブジェクト。 \(<c>provider</c> パラメーターは無視されるため、<see langword="null" /> を指定してください\)。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />」を参照してください。</summary>
        <returns>現在の <see cref="T:System.Char" /> オブジェクトの変換後の値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToUInt16%28System.Char%29?displayProperty=fullName> メソッド代わりにします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <see cref="T:System.IFormatProvider" /> オブジェクト。 \(<c>provider</c> パラメーターは無視されるため、<see langword="null" /> を指定してください\)。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />」をご覧ください。</summary>
        <returns>現在の <see cref="T:System.Char" /> オブジェクトの変換後の値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToUInt32%28System.Char%29?displayProperty=fullName> メソッド代わりにします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <see cref="T:System.IFormatProvider" /> オブジェクト。 \(<c>provider</c> パラメーターは無視されるため、<see langword="null" /> を指定してください\)。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />」をご覧ください。</summary>
        <returns>現在の <see cref="T:System.Char" /> オブジェクトの変換後の値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Char> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToUInt64%28System.Char%29?displayProperty=fullName> メソッド代わりにします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public static char ToLower (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToLower(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToLower(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">変換する Unicode 文字。</param>
        <summary>Unicode 文字の値をそれと等価な小文字に変換します。</summary>
        <returns>
          <paramref name="c" /> の小文字表現。<paramref name="c" /> が既に小文字であるか、アルファベットでない場合、<paramref name="c" /> の値は変換されずにそのまま返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 大文字小文字の規則は、現在のカルチャから取得されます。  
  
 使用して<xref:System.String.ToLower%2A?displayProperty=fullName>文字列を小文字に変換します。  
  
   
  
## 例  
 次の例で<xref:System.Char.ToLower%2A>です。  
  
 [!code-cpp[System.Char.ToLower\#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.ToLower/CPP/tolower.cpp#16)]
 [!code-csharp[System.Char.ToLower\#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.ToLower/CS/tolower.cs#16)]
 [!code-vb[System.Char.ToLower\#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.ToLower/VB/tolower.vb#16)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling character-casing and string-casing methods that substitute default values. Instead, you should call methods that require parameters to be explicitly specified. To convert a character to lowercase by using the casing conventions of the current culture, call the <see cref="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)" /> method overload with a value of <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> for its <paramref name="culture" /> parameter.</para>
        </block>
        <altmember cref="M:System.String.ToLower" />
        <altmember cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public static char ToLower (char c, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToLower(char c, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="c">変換する Unicode 文字。</param>
        <param name="culture">カルチャ固有の大文字と小文字の規則を提供するオブジェクト。</param>
        <summary>指定したカルチャ固有の書式情報を使用して、指定した Unicode 文字の値をそれと等価な小文字へ変換します。</summary>
        <returns>
          <paramref name="culture" /> に基づいて変換された、<paramref name="c" /> の小文字表現。<paramref name="c" /> が既に小文字であるか、アルファベットでない場合、<paramref name="c" /> の値は変換されずにそのまま返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して<xref:System.String.ToLower%2A?displayProperty=fullName>文字列を小文字に変換します。  
  
   
  
## 例  
 次のコード例を示します<xref:System.Char.ToLower%2A>です。  
  
 [!code-cpp[System.Char.ToLower\#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.ToLower/CPP/tolower.cpp#16)]
 [!code-csharp[System.Char.ToLower\#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.ToLower/CS/tolower.cs#16)]
 [!code-vb[System.Char.ToLower\#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.ToLower/VB/tolower.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="culture" /> は <see langword="null" /> です。</exception>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="M:System.String.ToLower" />
        <altmember cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToLowerInvariant">
      <MemberSignature Language="C#" Value="public static char ToLowerInvariant (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToLowerInvariant(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToLowerInvariant(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">変換する Unicode 文字。</param>
        <summary>インバリアント カルチャの大文字と小文字の規則を使用して、Unicode 文字の値を対応する小文字表現に変換します。</summary>
        <returns>
          <paramref name="c" /> パラメーターの小文字表現。<paramref name="c" /> が既に小文字であるか、アルファベットでない場合、<paramref name="c" /> の値は変更なしでそのまま返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アプリケーションが現在のカルチャによって影響を受けるため、予測可能な方法で変更する文字の大文字と小文字によって異なります場合を使用して、 <xref:System.Char.ToLowerInvariant%2A> メソッドです。<xref:System.Char.ToLowerInvariant%2A> メソッドは `ToLower(Char, CultureInfo.InvariantCulture)`です。  
  
 使用 <xref:System.String.ToLowerInvariant%2A?displayProperty=fullName> 文字列を小文字に変換します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.ToLower" />
        <altmember cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスの値を、それと等価の文字列形式に変換します。</summary>
        <returns>このインスタンスの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例を示します<xref:System.Char.ToString%2A>です。  
  
 [!code-cpp[System.Char.ToString\#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.ToString/CPP/tostring.cpp#17)]
 [!code-csharp[System.Char.ToString\#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.ToString/CS/tostring.cs#17)]
 [!code-vb[System.Char.ToString\#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.ToString/VB/tostring.vb#17)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToString(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">変換する Unicode 文字。</param>
        <summary>指定した Unicode 文字をそれと等価な文字列形式に変換します。</summary>
        <returns>
          <paramref name="c" /> の値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例を示します<xref:System.Char.ToString%2A>です。  
  
 [!code-cpp[System.Char.ToString\#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.ToString/CPP/tostring.cpp#17)]
 [!code-csharp[System.Char.ToString\#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.ToString/CS/tostring.cs#17)]
 [!code-vb[System.Char.ToString\#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.ToString/VB/tostring.vb#17)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToString(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">\(予約済み\) カルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>指定したカルチャ固有の書式情報を使用して、このインスタンスの値をそれと等価な文字列形式に変換します。</summary>
        <returns>
          <paramref name="provider" /> で指定された、このインスタンスの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `provider`パラメーターは無視されます。 この操作には参加しません。  
  
   
  
## 例  
 次のコード例に示しますのオーバー ロード<xref:System.Char.ToString%2A>です。  
  
 [!code-cpp[System.Char.ToString\#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.ToString/CPP/tostring.cpp#17)]
 [!code-csharp[System.Char.ToString\#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.ToString/CS/tostring.cs#17)]
 [!code-vb[System.Char.ToString\#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.ToString/VB/tostring.vb#17)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToUpper">
      <MemberSignature Language="C#" Value="public static char ToUpper (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToUpper(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToUpper(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">変換する Unicode 文字。</param>
        <summary>Unicode 文字の値をそれと等価な大文字に変換します。</summary>
        <returns>
          <paramref name="c" /> の大文字表現。<paramref name="c" /> が既に大文字であるか、アルファベットでない場合、またはその大文字表現が存在しない場合、<paramref name="c" /> の値は変更なしでそのまま返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 大文字小文字の規則は、現在のカルチャから取得されます。  
  
 使用して<xref:System.String.ToUpper%2A?displayProperty=fullName>文字列を大文字に変換します。  
  
   
  
## 例  
 次の例は、配列内の各文字を等価な大文字に変換します。  
  
 [!code-csharp[System.Char.ToUpper\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.toupper/cs/toupper1.cs#1)]
 [!code-vb[System.Char.ToUpper\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.toupper/vb/toupper1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling character-casing and string-casing methods that substitute default values. Instead, you should call methods that require parameters to be explicitly specified. To convert a character to uppercase by using the casing conventions of the current culture, call the <see cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" /> method overload with a value of <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> for its <paramref name="culture" /> parameter.</para>
        </block>
        <altmember cref="M:System.String.ToUpper" />
        <altmember cref="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToUpper">
      <MemberSignature Language="C#" Value="public static char ToUpper (char c, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToUpper(char c, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="c">変換する Unicode 文字。</param>
        <param name="culture">カルチャ固有の大文字と小文字の規則を提供するオブジェクト。</param>
        <summary>指定したカルチャ固有の書式情報を使用して、指定した Unicode 文字の値をそれと等価な大文字へ変換します。</summary>
        <returns>
          <paramref name="culture" /> に基づいて変換された、<paramref name="c" /> の大文字表現。<paramref name="c" /> が既に大文字であるか、アルファベットでない場合、またはその大文字表現が存在しない場合、<paramref name="c" /> の値は変換されずにそのまま返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して<xref:System.String.ToUpper%2A?displayProperty=fullName>文字列を大文字に変換します。  
  
   
  
## 例  
 次の例は、配列内の各文字を EN\-US カルチャ、インバリアント カルチャ、および TR\-TR カルチャの大文字表現に変換します。 この例では、各英文字の大文字表現では、1 つのケースを除くすべてのカルチャと一致します。 小文字の"i"文字"I"\(u\+0069\) に変換 \(u\+0049\) EN\-US およびインバリアント カルチャですを""\(u\+0130\) TR\-TR カルチャでします。  
  
 [!code-csharp[System.Char.ToUpper\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.toupper/cs/toupper5.cs#2)]
 [!code-vb[System.Char.ToUpper\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.toupper/vb/toupper5.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="culture" /> は <see langword="null" /> です。</exception>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="M:System.String.ToUpper" />
        <altmember cref="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToUpperInvariant">
      <MemberSignature Language="C#" Value="public static char ToUpperInvariant (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToUpperInvariant(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToUpperInvariant(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">変換する Unicode 文字。</param>
        <summary>インバリアント カルチャの大文字と小文字の規則を使用して、Unicode 文字の値を対応する大文字表現に変換します。</summary>
        <returns>
          <paramref name="c" /> パラメーターの大文字表現。または、<paramref name="c" /> が既に大文字であるか、アルファベットでない場合、<paramref name="c" /> の値は変更なしでそのまま返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合は、アプリケーションは、現在のカルチャによる影響はありませんが、予測可能な方法で変更する文字の大文字と小文字に依存してを使用して、<xref:System.Char.ToUpperInvariant%2A>メソッドです。<xref:System.Char.ToUpperInvariant%2A>メソッドは`ToUpper(Char, CultureInfo.InvariantCulture)`します。  
  
 使用して<xref:System.String.ToUpperInvariant%2A?displayProperty=fullName>文字列を大文字に変換します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.ToUpper" />
        <altmember cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out char result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, char result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.TryParse(System.String,System.Char@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.Char&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">単一の文字を含む文字列、または <see langword="null" />。</param>
        <param name="result">変換に成功した場合、メソッドから制御が戻ったときに、<c>s</c> 内の単一文字に相当する Unicode 文字が格納されます。変換に失敗した場合は、未定義の値が格納されます。<c>s</c> パラメーターが <see langword="null" /> の場合、または <c>s</c> の長さが 1 でない場合、変換は失敗します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定した文字列の値をそれと等価な Unicode 文字に変換します。 リターン コードは、変換が成功したか失敗したかを示します。</summary>
        <returns>
          <paramref name="s" /> パラメーターが正常に変換された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Char.TryParse%2A>などのメソッドは、<xref:System.Char.Parse%2A>メソッドを除く、<xref:System.Char.TryParse%2A>変換が失敗した場合、メソッドが例外をスローしません。  
  
   
  
## 例  
 次のコード例に示しますのオーバー ロード、<xref:System.Char.TryParse%2A>いくつかの基本型のメソッドと<xref:System.DateTime.TryParseExact%2A>メソッドを<xref:System.DateTime>基本データ型。  
  
 [!code-cpp[T.TryParse\#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.TryParse/CPP/tp.cpp#1)]
 [!code-csharp[T.TryParse\#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.TryParse/CS/tp.cs#1)]
 [!code-vb[T.TryParse\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.TryParse/VB/tp.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.Parse(System.String)" />
        <altmember cref="M:System.Char.ToString" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsLower">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Unicode 文字が小文字かどうかを示します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このインスタンスの値を、それと等価の文字列形式に変換します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="IsSurrogate">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>文字がサロゲート コード単位を持つかどうかを示します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetNumericValue">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された Unicode 文字の数字を倍精度浮動小数点数に変換します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="IsNumber">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Unicode 文字が数字かどうかを示します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ToLower">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Unicode 文字の値をそれと等価な小文字に変換します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="IsHighSurrogate">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された <see cref="T:System.Char" /> オブジェクトが上位サロゲートであるかどうかを示します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ToUpper">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Unicode 文字の値をそれと等価な大文字に変換します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>対象のインスタンスが、指定したオブジェクトまたは <see cref="T:System.Char" /> 値に等しいかどうかを示す値を返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このインスタンスと指定したオブジェクトまたは値型とを比較し、並べ替え順序において、このインスタンスの位置が指定したオブジェクトまたは値型の前、後ろ、または同じのいずれであるかを示します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetUnicodeCategory">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Unicode 文字を <see cref="T:System.Globalization.UnicodeCategory" /> 値のいずれかで識別されるグループに分類します。</summary>
        <altmember cref="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ConvertToUtf32">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>UTF\-16 でエンコードされたサロゲート ペアの値を Unicode コード ポイントに変換します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="IsUpper">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Unicode 文字が大文字かどうかを示します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="IsLowSurrogate">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された <see cref="T:System.Char" /> オブジェクトが下位サロゲートであるかどうかを示します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="IsSurrogatePair">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された 2 つの <see cref="T:System.Char" /> オブジェクトがサロゲート ペアを形成するかどうかを示します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>