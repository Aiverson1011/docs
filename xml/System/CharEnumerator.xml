<Type Name="CharEnumerator" FullName="System.CharEnumerator">
  <TypeSignature Language="C#" Value="public sealed class CharEnumerator : ICloneable, System.Collections.Generic.IEnumerator&lt;char&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit CharEnumerator extends System.Object implements class System.Collections.Generic.IEnumerator`1&lt;char&gt;, class System.Collections.IEnumerator, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.CharEnumerator" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see cref="T:System.String" /> オブジェクトの反復処理と個別の文字の読み取りをサポートします。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.CharEnumerator> provides read\-only access to the characters in a referenced <xref:System.String> object. For example, the **languageKeyword tag is not supported!!!!**  
 statement of the Microsoft Visual Basic and C\# programming languages, which iterates through the elements of a collection, retrieves a <xref:System.CharEnumerator> from a <xref:System.String> object in order to iterate through the characters in that object.  
  
 There is no public constructor for <xref:System.CharEnumerator>. Instead, call a <xref:System.String> object's <xref:System.String.GetEnumerator%2A> method to obtain a <xref:System.CharEnumerator> that is initialized to reference the string.  
  
 A <xref:System.CharEnumerator> maintains an internal index to the characters in the string the <xref:System.CharEnumerator> references. The state of the index is invalid when it references a character position logically before the first character or after the last character in the string, and valid when it references a character within the string. The index is initialized to a position logically before the first character, and is set to a position after the last character when the iteration is complete. An exception is thrown if you attempt to access a character while the index is invalid.  
  
 The <xref:System.CharEnumerator.MoveNext%2A> method increments the index by one, so the first and subsequent characters are accessed in turn. The <xref:System.CharEnumerator.Reset%2A> method sets the index to a position logically before the first character. The <xref:System.CharEnumerator.Current%2A> property retrieves the character currently referenced by index. The <xref:System.CharEnumerator.Clone%2A> method creates a copy of the <xref:System.CharEnumerator>.  
  
> [!NOTE]
>  Several independent instances of <xref:System.CharEnumerator> across one or more threads can have access to a single instance of <xref:System.String>. This class is implemented to support the <xref:System.Collections.IEnumerator> interface. For more information regarding the use of an enumerator, see the <xref:System.Collections.IEnumerator> topic.  
  
   
  
## 例  
 The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string. It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=fullName> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.  
  
 [!code-cpp[System.CharEnumerator.Class\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 Note, however, that the same operation can be performed somewhat more intuitively by using **languageKeyword tag is not supported!!!!**  
 \(in C\#\) or **languageKeyword tag is not supported!!!!**  
 \(in Visual Basic\), as the following example shows.  
  
 [!code-cpp[System.CharEnumerator.Class\#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Collections.IEnumerable" />
    <altmember cref="T:System.Collections.ICollection" />
  </Docs>
  <Members>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Clone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のコピーを作成<see cref="T:System.CharEnumerator" />オブジェクト。</summary>
        <returns>
          <see cref="T:System.Object" /> 、現在のコピーである<see cref="T:System.CharEnumerator" />オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 戻り値のこのインスタンスのコピーである<xref:System.CharEnumerator>と現在の状態。 これは反復処理中に、状態を保存するために便利な<xref:System.String>オブジェクト。  
  
 たとえば、アプリケーションで使用する、元のインスタンスの<xref:System.CharEnumerator>内の各文字を反復処理する、<xref:System.String>です。 アプリケーションが処理を一時停止し、呼び出す一意な文字が検出されたときに、<xref:System.CharEnumerator.Clone%2A>メソッドです。 これを実際には、保存、<xref:System.CharEnumerator>内のオブジェクトのインデックス、<xref:System.String>です。  
  
 アプリケーションの別の部分に移動する、複製を使用して、`String`補足的な処理を実行します。 このナビゲーションの副作用は、複製が処理が停止した位置のトラックを失ったです。 ただし、補助処理が完了したら、アプリケーション、複製され、元を使用して<xref:System.CharEnumerator>に関する作業を再開するインスタンス、<xref:System.String>元の処理が停止しました。  
  
> [!NOTE]
>  このメソッドがサポートするために実装されている、<xref:System.ICloneable>インターフェイスです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public char Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>これによって列挙文字列の現在参照されている文字を取得<see cref="T:System.CharEnumerator" />オブジェクト。</summary>
        <value>これによって現在参照されている Unicode 文字<see cref="T:System.CharEnumerator" />オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.CharEnumerator>クラスは、列挙型の文字列を内部のインデックスを保持し、<xref:System.CharEnumerator.Current%2A>プロパティは、インデックスによって現在参照されている文字を返します。 このプロパティは、インデックスが有効である場合にのみ呼び出す必要があります。それ以外の場合、例外がスローされます。  
  
 インデックスは常に空の文字列 \(""\) です。 インデックスが正しくありませんも後に、<xref:System.String.GetEnumerator%2A?displayProperty=fullName>または<xref:System.CharEnumerator.Reset%2A>メソッドが呼び出されます。 これらのメソッドのいずれかが呼び出された後に呼び出し、<xref:System.CharEnumerator.MoveNext%2A>列挙文字列の最初の文字にインデックスを調整する方法です。 インデックスが有効なときに、<xref:System.CharEnumerator.MoveNext%2A>メソッドを返します。`true`です。  
  
 <xref:System.CharEnumerator.Current%2A>連続して呼び出すと、インデックスを移動しません<xref:System.CharEnumerator.Current%2A>まで同じ文字を返す<xref:System.CharEnumerator.MoveNext%2A>、 <xref:System.CharEnumerator.Reset%2A>、または<xref:System.String.GetEnumerator%2A?displayProperty=fullName>と呼びます。  
  
   
  
## 例  
 次の例では、<xref:System.CharEnumerator>文字列内の個々 の文字を列挙するクラス。 インスタンス化、<xref:System.CharEnumerator>オブジェクトを呼び出して、<xref:System.String.GetEnumerator%2A?displayProperty=fullName>メソッド、移動し、1 文字から、次に呼び出すことによって、<xref:System.CharEnumerator.MoveNext%2A>メソッド、しの値を取得することによって、現在の文字を表示、<xref:System.CharEnumerator.Current%2A>プロパティです。  
  
 [!code-cpp[System.CharEnumerator.Class\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 ただしを使用して、同じ操作をより直感的に実行することができます`foreach`\(C\# の場合\) または`For Each`\(Visual Basic の場合\) の次の例として示します。  
  
 [!code-cpp[System.CharEnumerator.Class\#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">インデックスが無効です。つまり、最初の前に、または後列挙文字列の最後の文字です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.CharEnumerator" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Call <xref:System.CharEnumerator.Dispose%2A> when you are finished using the <xref:System.CharEnumerator>. The <xref:System.CharEnumerator.Dispose%2A> method leaves the <xref:System.CharEnumerator> in an unusable state. After calling <xref:System.CharEnumerator.Dispose%2A>, you must release all references to the <xref:System.CharEnumerator> so the garbage collector can reclaim the memory that the <xref:System.CharEnumerator> was occupying.  
  
 For more information, see [Cleaning Up Unmanaged Resources](http://msdn.microsoft.com/ja-jp/a17b0066-71c2-4ba4-9822-8e19332fc213) and [Implementing a Dispose Method](http://msdn.microsoft.com/ja-jp/eb4e1af0-3b48-4fbc-ad4e-fc2f64138bf9).  
  
> [!NOTE]
>  Always call <xref:System.CharEnumerator.Dispose%2A> before you release your last reference to the <xref:System.CharEnumerator>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.CharEnumerator> object's **languageKeyword tag is not supported!!!!**  
>  method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.MoveNext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の内部のインデックスをインクリメント <see cref="T:System.CharEnumerator" /> 列挙型の文字列の次の文字をオブジェクトです。</summary>
        <returns>
          <see langword="true" /> インデックスが正常にインクリメントされた場合、および列挙型の文字列内でそれ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.CharEnumerator> クラスは、列挙型の文字列の内部のインデックスを保持し、 <xref:System.CharEnumerator.MoveNext%2A> メソッドは、いずれかによって、インデックスをインクリメントします。 呼び出す <xref:System.CharEnumerator.MoveNext%2A> 呼び出した後 <xref:System.String.GetEnumerator%2A> または <xref:System.CharEnumerator.Reset%2A> 列挙型の文字列の最初の文字への現在の文字位置をインクリメントします。 戻り値は check `true` を現在の文字位置が有効であるかを判断します。  
  
 インデックスが列挙された文字列の最後の文字を超える場合、インデックスは変更されませんし、 `false` が返されます。  
  
 列挙された文字列が空の場合に、そのことを確認する \(""\) の状態、 <xref:System.CharEnumerator> は常に有効です。 これは、ための内部のインデックス、 <xref:System.CharEnumerator> 列挙型の文字列の最初の文字の前に、最初に、無効です。<xref:System.CharEnumerator.MoveNext%2A> 論理的にも有効ではない列挙型、文字列の最後の \(存在しない\) 文字の後に、インデックスを設定します。  
  
   
  
## 例  
 次の例では、 <xref:System.CharEnumerator> 文字列の個々 の文字を列挙するクラス。 インスタンス化、 <xref:System.CharEnumerator> を呼び出してオブジェクト、 <xref:System.String.GetEnumerator%2A?displayProperty=fullName> メソッドを移動し、1 文字から次の手順を呼び出して、 <xref:System.CharEnumerator.MoveNext%2A> メソッドの値を取得することによって、現在の文字を表示し、 <xref:System.CharEnumerator.Current%2A> プロパティです。  
  
 [!code-cpp[System.CharEnumerator.Class\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 ただしを使用して、同じ操作をより直感的に実行することができます `foreach` \(C\# の場合\) または `For Each` \(Visual Basic の場合\) で次の例として示しています。  
  
 [!code-cpp[System.CharEnumerator.Class\#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Reset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>列挙された文字列の最初の文字の前に論理的に位置するインデックスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.CharEnumerator> クラスは、列挙型の文字列の内部のインデックスを保持し、 <xref:System.CharEnumerator.Reset%2A> メソッドは、無効な状態にインデックスを設定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.System#Collections#IEnumerator#Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>これによって列挙文字列で現在参照されている文字を取得 <see cref="T:System.CharEnumerator" /> オブジェクトです。 このメンバーの詳細については、「<see cref="P:System.Collections.IEnumerator.Current" />」を参照してください。</summary>
        <value>これによって現在参照されているボックス化された Unicode 文字 <see cref="T:System.CharEnumerator" /> オブジェクトです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.CharEnumerator> のインスタンスが <xref:System.Collections.IEnumerator> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">列挙体が開始されていません。  
  
 または  
  
 列挙体が終了します。</exception>
      </Docs>
    </Member>
  </Members>
</Type>