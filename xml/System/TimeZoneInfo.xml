<Type Name="TimeZoneInfo" FullName="System.TimeZoneInfo">
  <TypeSignature Language="C#" Value="public sealed class TimeZoneInfo : IEquatable&lt;TimeZoneInfo&gt;, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit TimeZoneInfo extends System.Object implements class System.IEquatable`1&lt;class System.TimeZoneInfo&gt;, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.TimeZoneInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.TimeZoneInfo&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>世界中のいずれかのタイム ゾーンを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 タイム ゾーンは、同じ時刻が使用されている地域です。  
  
 <xref:System.TimeZoneInfo>では多くの機能強化が施さクラス、<xref:System.TimeZone>限定的な機能のみを提供するクラス。  
  
 <xref:System.TimeZone>クラスは、ローカル タイム ゾーンだけを認識し、世界協定時刻 \(UTC\) とローカル時間の間の時刻を変換することができます。 A<xref:System.TimeZoneInfo>オブジェクトは、任意のタイム ゾーンとのメソッドを表すことができます、<xref:System.TimeZoneInfo>クラスは、他の任意のタイム ゾーンに対応する時刻に 1 つのタイム ゾーンの時刻を変換するために使用できます。 メンバー、<xref:System.TimeZoneInfo>クラスは、次の操作をサポートします。  
  
-   オペレーティング システムで既に定義されているタイム ゾーンを取得しています。  
  
-   システムで使用できるタイム ゾーンを列挙しています。  
  
-   異なるタイム ゾーン間の時間に変換します。  
  
-   オペレーティング システムで既に定義されていない新しいタイム ゾーンを作成します。  
  
-   後で取得のタイム ゾーンのシリアル化します。  
  
> [!NOTE]
>  インスタンス、<xref:System.TimeZoneInfo>クラスは変更できません。 オブジェクトがインスタンス化されると、その値を変更できません。  
  
 インスタンス化することはできません、<xref:System.TimeZoneInfo>オブジェクトを使用して、`new`キーワード。 代わりの静的メンバーの 1 つを呼び出す必要があります、<xref:System.TimeZoneInfo>クラスの次の表に示すようにします。  
  
|静的メンバーの名前|説明|  
|---------------|--------|  
|<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> メソッド|アプリケーションによって提供されるデータをカスタム タイム ゾーンを作成します。|  
|<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> メソッド|ゾーンの識別子に基づいて、システム レジストリで定義されているタイム ゾーンをインスタンス化します。|  
|<xref:System.TimeZoneInfo.FromSerializedString%2A> メソッド|以前にシリアル化を再作成する文字列値を逆シリアル化<xref:System.TimeZoneInfo>オブジェクト。|  
|<xref:System.TimeZoneInfo.GetSystemTimeZones%2A> メソッド|列挙可能な返します<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>の<xref:System.TimeZoneInfo>ローカル システムで使用可能なすべてのタイム ゾーンを表すオブジェクト。|  
|<xref:System.TimeZoneInfo.Local%2A> プロパティ|インスタンスを作成、<xref:System.TimeZoneInfo>ローカル タイム ゾーンを表すオブジェクト。|  
|<xref:System.TimeZoneInfo.Utc%2A> プロパティ|インスタンスを作成、 <xref:System.TimeZoneInfo> \(utc\) ゾーンを表すオブジェクト。|  
  
 使用することができます、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>メソッドをローカル システムのレジストリで定義されていないタイム ゾーンを作成します。 使用して、<xref:System.TimeZoneInfo.ToSerializedString%2A>文字列として、アプリケーションにアクセスできるいくつかの形式で格納することができます、タイム ゾーン オブジェクトの情報を保存するプロパティです。 使用することができます、<xref:System.TimeZoneInfo.FromSerializedString%2A>にシリアル化された文字列に変換するメソッドが戻る、<xref:System.TimeZoneInfo>オブジェクト。  
  
   
  
## 例  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BaseUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan BaseUtcOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan BaseUtcOffset" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.BaseUtcOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のタイム ゾーンの標準時と世界協定時刻 \(UTC\) との差を返します。</summary>
        <value>現在のタイム ゾーンの標準時と世界協定時刻 \(UTC\) との時差を表すオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 によって返される時間間隔、<xref:System.TimeZoneInfo.BaseUtcOffset%2A>プロパティの範囲 \(14 時間の世界協定時刻 \(UTC\) の前であるタイム ゾーン\) の 14 時間 ~\-14 時間にわたってのタイム ゾーンが 14 時間 \(utc\) の背後にある\)。 UTC の前のタイム ゾーンがある正のオフセットです。\(utc\) の背後にあるタイム ゾーンは、負のオフセットを持っています。  
  
 <xref:System.TimeZoneInfo.BaseUtcOffset%2A>値は分単位の整数として表されます。 分の小数部の数を含めることはできません。  
  
> [!NOTE]
>  <xref:System.TimeZoneInfo.BaseUtcOffset%2A>のプロパティ、<xref:System.TimeZoneInfo>オブジェクトではなく、<xref:System.TimeZoneInfo.AdjustmentRule>オブジェクト、<xref:System.TimeZoneInfo>クラスは、すべてのタイム ゾーンの調整に utc を基準にある単一のオフセットに適用されます。 します。 タイム ゾーンを UTC のオフセットは変更を反映するために使用する新しいタイム ゾーンを作成する必要があります、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>メソッドです。  
  
 <xref:System.TimeZoneInfo.BaseUtcOffset%2A>プロパティと異なります、<xref:System.TimeZoneInfo.GetUtcOffset%2A>メソッドを次の方法で。  
  
-   <xref:System.TimeZoneInfo.BaseUtcOffset%2A>プロパティは、UTC とタイム ゾーンの標準時刻の差を返します、<xref:System.TimeZoneInfo.GetUtcOffset%2A>メソッドは、時間 \(utc\) と特定の時点のタイム ゾーンの時刻の差を返します。  
  
-   <xref:System.TimeZoneInfo.GetUtcOffset%2A>メソッドは、タイム ゾーンをすべて調整規則のアプリケーションを反映して、<xref:System.TimeZoneInfo.BaseUtcOffset%2A>プロパティはありません。  
  
   
  
## 例  
 次の例では、<xref:System.TimeZoneInfo.BaseUtcOffset%2A>現地時刻と世界協定時刻 \(UTC\) の違いを表示するプロパティです。  
  
 [!code-csharp[System.TimeZone2.Class\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#1)]
 [!code-vb[System.TimeZone2.Class\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeZoneInfo.GetUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="ClearCachedData">
      <MemberSignature Language="C#" Value="public static void ClearCachedData ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearCachedData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ClearCachedData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>キャッシュされたタイム ゾーン データをクリアします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 キャッシュされたタイム ゾーン データには、ローカル タイム ゾーン、世界協定時刻 \(UTC\) ゾーンなどのメソッドを使用して、取得されるタイム ゾーンがないデータが含まれています。<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>と<xref:System.TimeZoneInfo.GetSystemTimeZones%2A>です。  
  
 呼び出すことができます、<xref:System.TimeZoneInfo.ClearCachedData%2A>メモリを減らすための方法のために使用、アプリケーションのキャッシュのタイム ゾーン情報またはローカル システムのタイム ゾーンに変更されたという事実を反映するようにします。  
  
 ローカルおよび UTC タイム ゾーンへの参照を格納することをお勧めします。 呼び出し後、<xref:System.TimeZoneInfo.ClearCachedData%2A>メソッド、これらのオブジェクト変数は不確定になる<xref:System.TimeZoneInfo>されなくなったへの参照オブジェクト<xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName>または<xref:System.TimeZoneInfo.Utc%2A?displayProperty=fullName>です。 たとえば、次のコードでは、2 番目呼び出しで、<xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=fullName>メソッドがスローされます、<xref:System.ArgumentException>ため、`local`変数は等しいと見なされなく<xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName>です。  
  
 [!code-csharp[System.TimeZone2.BestPractices\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/cs/System.TimeZone2.BestPractices.cs#1)]
 [!code-vb[System.TimeZone2.BestPractices\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/vb/System.TimeZone2.BestPractices.vb#1)]  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">変換する日付と時刻。</param>
        <param name="destinationTimeZone">
          <c>dateTime</c> の変換先タイム ゾーン。</param>
        <summary>時刻を特定のタイム ゾーンの時刻に変換します。</summary>
        <returns>変換先タイム ゾーンでの日付と時刻。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 変換を実行するときに、<xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29>メソッドで有効調整規則を適用する、`destinationTimeZone`タイム ゾーン。  
  
 このオーバー ロード、<xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29>メソッドの値からソース タイム ゾーンの決定、`dateTime`パラメーターの<xref:System.DateTime.Kind%2A>プロパティは、次の表に示すようです。  
  
|Kind プロパティ値|変換元タイム ゾーン|メソッドの動作|  
|-----------------|----------------|-------------|  
|<xref:System.DateTimeKind.Local?displayProperty=fullName>|<xref:System.TimeZoneInfo.Local%2A>|時間を現地時刻に変換します`destinationTimeZone`です。|  
|<xref:System.DateTimeKind.Utc?displayProperty=fullName>|<xref:System.TimeZoneInfo.Utc%2A>|時刻を世界協定時刻 \(UTC\) に変換します`destinationTimeZone`です。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=fullName>|想定する<xref:System.TimeZoneInfo.Local%2A>です。|時間を現地時刻に変換します`destinationTimeZone`です。|  
  
 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>値は次の表に示すように設定されています。  
  
|条件|Kind プロパティの値が返されました|  
|--------|-------------------------|  
|`destinationTimeZone` が <xref:System.TimeZoneInfo.Utc%2A?displayProperty=fullName> です。|<xref:System.DateTimeKind.Utc?displayProperty=fullName>|  
|`destinationTimeZone` が <xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName> です。|<xref:System.DateTimeKind.Local?displayProperty=fullName>|  
|他のすべての日付と時刻の値と変換先タイム ゾーン。|<xref:System.DateTimeKind.Unspecified?displayProperty=fullName>|  
  
 場合の値、`dateTime`パラメーターがあいまいな現地時刻、標準時として解釈されます。 場合、`dateTime`パラメーターが無効なローカル時刻、このメソッドをスロー、<xref:System.ArgumentException>です。  
  
 場合の変換`dateTime`結果の日付と時刻の値よりも前に<xref:System.DateTime.MinValue?displayProperty=fullName>かそれより遅い<xref:System.DateTime.MaxValue?displayProperty=fullName>、このメソッドが戻る<xref:System.DateTime.MinValue?displayProperty=fullName>または<xref:System.DateTime.MaxValue?displayProperty=fullName>、それぞれします。  
  
 呼び出して、UTC の間を変換することも、<xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A>と<xref:System.TimeZoneInfo.ConvertTimeToUtc%2A>メソッドです。  
  
   
  
## 例  
 次の例は、米国およびカナダ東部標準時ゾーンの日付と時刻の値の配列を時刻に変換します。 変換元タイム ゾーンに依存することを示しています、<xref:System.DateTime.Kind%2A?displayProperty=fullName>ソースのプロパティ<xref:System.DateTime>値。 これは、方法についても説明を<xref:System.TimeZoneInfo.ConvertTime%2A>メソッドは、2010 年 11 月 7 日の午前 2 時に、ソースと移行先の両方のタイム ゾーンでタイム ゾーンの調整が行われるために考慮し、タイム ゾーンの調整を受け取ります。  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime1.cs#1)]
 [!code-vb[System.TimeZoneInfo.ConvertTime\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateTime" /> パラメーターの値が無効な時刻を表しています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationTimeZone" /> パラメーターの値が <see langword="null" /> です。</exception>
        <block subset="none" type="usage">
          <para>On [!INCLUDE[winxp](~/includes/winxp-md.md)] systems, this method recognizes only the current adjustment rule when performing the conversion if <paramref name="dateTime" /> is treated as a local time or if <paramref name="destinationTimeZone" /> is <see cref="P:System.TimeZoneInfo.Local" />. As a result, the method may not accurately convert times for periods before the current adjustment rule came into effect. For more information, see the Notes for Callers section in the <see cref="P:System.TimeZoneInfo.Local" /> property.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTime (DateTimeOffset dateTimeOffset, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTime(valuetype System.DateTimeOffset dateTimeOffset, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">変換する日付と時刻。</param>
        <param name="destinationTimeZone">
          <c>dateTime</c> の変換先タイム ゾーン。</param>
        <summary>時刻を特定のタイム ゾーンの時刻に変換します。</summary>
        <returns>変換先タイム ゾーンでの日付と時刻。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 変換を実行するときに、<xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29>メソッドには、有効で、調整規則が適用されます、`destinationTimeZone`タイム ゾーン。  
  
 このオーバー ロードの他のオーバー ロード、<xref:System.TimeZoneInfo.ConvertTime%2A>メソッドをそのまま使用して、<xref:System.DateTimeOffset>最初のパラメーターとして値。 日付と時刻を特定のタイム ゾーンではなく協定世界時 \(UTC\) からのオフセットとしての日付と時刻を識別します。 その結果、`dateTimeOffset`パラメーターは、あいまいな時刻または無効な時刻のいずれかを表すことはできません。  
  
 変換する際に、`dateTimeOffset`値を変換先タイム ゾーンで、このメソッドの時間では、変換先タイム ゾーンで有効に任意の調整規則を考慮に入れます。  
  
 場合の変換`dateTimeOffset`結果よりも前の日付と時刻の値<xref:System.DateTimeOffset.MinValue?displayProperty=fullName>かそれより遅い<xref:System.DateTimeOffset.MaxValue?displayProperty=fullName>、このメソッドが戻る<xref:System.DateTimeOffset.MinValue?displayProperty=fullName>または<xref:System.DateTimeOffset.MaxValue?displayProperty=fullName>、それぞれします。  
  
   
  
## 例  
 次の例の配列の変換<xref:System.DateTimeOffset>の米国およびカナダ東部標準時ゾーンの時刻値。 示されていること、<xref:System.TimeZoneInfo.ConvertTime%2A>メソッドは、2010 年 11 月 7 日の午前 2 時に、ソースと移行先の両方のタイム ゾーンでタイム ゾーンの調整が行われるために考慮し、タイム ゾーンの調整を受け取ります。  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime2.cs#2)]
 [!code-vb[System.TimeZoneInfo.ConvertTime\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationTimeZone" /> パラメーターの値が <see langword="null" /> です。</exception>
        <block subset="none" type="usage">
          <para>On [!INCLUDE[winxp](~/includes/winxp-md.md)] systems, this method applies only the current adjustment rule to the time zone conversion if <paramref name="dateTimeOffset" /> is treated as a local time or if <paramref name="destinationTimeZone" /> is <see cref="P:System.TimeZoneInfo.Local" />. As a result, the method may not accurately convert times for periods before the current adjustment rule came into effect. For more information, see the Notes for Callers section in the <see cref="P:System.TimeZoneInfo.Local" /> property.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">変換する日付と時刻。</param>
        <param name="sourceTimeZone">
          <c>dateTime</c> のタイム ゾーン。</param>
        <param name="destinationTimeZone">
          <c>dateTime</c> の変換先タイム ゾーン。</param>
        <summary>あるタイム ゾーンの時刻を別のタイム ゾーンの時刻に変換します。</summary>
        <returns>変換元タイム ゾーンでの <paramref name="dateTime" /> パラメーターに対応する、変換先タイム ゾーンでの日付と時刻。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 変換を実行するときに、<xref:System.TimeZoneInfo.ConvertTime%2A>メソッドの適用、調整規則で有効、`destinationTimeZone`タイム ゾーン。  
  
 値、<xref:System.DateTime.Kind%2A>のプロパティ、`dateTime`パラメーターに対応する必要があります、`sourceTimeZone`パラメーターは、次の表に示すようです。  
  
|DateTime.Kind 値|sourceTimeZone 値|メソッドの動作|  
|---------------------|----------------------|-------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=fullName>|等しい<xref:System.TimeZoneInfo.Utc%2A?displayProperty=fullName>です。|変換`dateTime`変換先タイム ゾーンの時刻にします。|  
|<xref:System.DateTimeKind.Utc?displayProperty=fullName>|等しくない<xref:System.TimeZoneInfo.Utc%2A?displayProperty=fullName>です。|スロー、<xref:System.ArgumentException>です。|  
|<xref:System.DateTimeKind.Local?displayProperty=fullName>|等しい<xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName>です。|変換`dateTime`変換先タイム ゾーンの時刻にします。|  
|<xref:System.DateTimeKind.Local?displayProperty=fullName>|等しくない<xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName>です。|スロー、<xref:System.ArgumentException>です。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=fullName>|任意です。|変換`dateTime`変換先タイム ゾーンの時刻にします。|  
  
 呼び出して、世界協定時刻 \(UTC\) からまたはを変換することも、<xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A>と<xref:System.TimeZoneInfo.ConvertTimeToUtc%2A>メソッドです。  
  
 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>値は次の表に示すように設定されています。  
  
|条件|Kind プロパティの値が返されました|  
|--------|-------------------------|  
|`destinationTimeZone` 引数が <xref:System.TimeZoneInfo.Utc%2A?displayProperty=fullName> です。|<xref:System.DateTimeKind.Utc?displayProperty=fullName>|  
|`destinationTimeZone` 引数が <xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName> です。|<xref:System.DateTimeKind.Local?displayProperty=fullName>|  
|すべての他の日付と時刻の値、変換元タイム ゾーンと変換先タイム ゾーン。|<xref:System.DateTimeKind.Unspecified?displayProperty=fullName>|  
  
 場合の値、`dateTime`パラメーターは、変換元タイム ゾーンであいまいな時刻、標準時として解釈されます。 場合、`dateTime`パラメーター ソース タイム ゾーンで無効な時間は、このメソッドは、<xref:System.ArgumentException>です。  
  
 場合の変換`dateTime`結果よりも前の日付と時刻の値<xref:System.DateTime.MinValue?displayProperty=fullName>かそれより遅い<xref:System.DateTime.MaxValue?displayProperty=fullName>、このメソッドが戻る<xref:System.DateTime.MinValue?displayProperty=fullName>または<xref:System.DateTime.MaxValue?displayProperty=fullName>、それぞれします。  
  
 <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29>メソッドがスローされます、<xref:System.ArgumentException>例外場合、<xref:System.DateTime.Kind%2A?displayProperty=fullName>のプロパティ、`dateTime`引数は<xref:System.DateTimeKind.Local?displayProperty=fullName>ですが、`sourceTimeZone`引数ではありません<xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName>です。 参照の等価性と値の等価性テストではなく、メソッドがテスト ソース タイム ゾーンは、ローカル タイム ゾーンまたはユニバーサル タイム ゾーンには、かどうかを決定する、<xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29>メソッドです。 なお<xref:System.TimeZoneInfo>ローカル タイム ゾーンを表すし、呼び出すことによって取得されているオブジェクト、<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>メソッドの参照の等価性がない<xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName>です。 さらに、<xref:System.TimeZoneInfo>ローカルまたはユニバーサル タイム ゾーンを表すし、によって返されるコレクションを反復処理して取得するオブジェクト、<xref:System.TimeZoneInfo.GetSystemTimeZones%2A>メソッドの参照の等価性がない<xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName>または<xref:System.TimeZoneInfo.Utc%2A?displayProperty=fullName>です。 代わりに、呼び出すことができます、<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29>メソッドです。  
  
   
  
## 例  
 次の例では、使用、<xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29>ハワイ標準時からを現地時刻に変換します。  
  
 [!code-csharp[System.TimeZone2.Concepts\#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#9)]
 [!code-vb[System.TimeZone2.Concepts\#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateTime" /> パラメーターの <see cref="P:System.DateTime.Kind" /> プロパティは <see cref="F:System.DateTimeKind.Local" /> ですが、<paramref name="sourceTimeZone" /> パラメーターが <see cref="F:System.DateTimeKind.Local" /> と等しくありません。 詳細については、「解説」を参照してください。  
  
 または  
  
 <paramref name="dateTime" /> パラメーターの <see cref="P:System.DateTime.Kind" /> プロパティは <see cref="F:System.DateTimeKind.Utc" /> ですが、<paramref name="sourceTimeZone" /> パラメーターが <see cref="P:System.TimeZoneInfo.Utc" /> と等しくありません。  
  
 または  
  
 <paramref name="dateTime" /> パラメーターが無効な時刻です \(つまり、タイム ゾーンの調整規則が原因で、存在しない時刻を表しています\)。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceTimeZone" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="destinationTimeZone" /> パラメーターが <see langword="null" /> です。</exception>
        <block subset="none" type="usage">
          <para>On [!INCLUDE[winxp](~/includes/winxp-md.md)] systems, this method applies only the current adjustment rule when performing the conversion if <paramref name="dateTime" /> is treated as a local time, if <paramref name="sourceTimeZone" /> is <see cref="P:System.TimeZoneInfo.Local" />, or if <paramref name="destinationTimeZone" /> is <see cref="P:System.TimeZoneInfo.Local" />. As a result, the method may not accurately convert times for periods before the current adjustment rule came into effect. For more information, see the Notes for Callers section in the <see cref="P:System.TimeZoneInfo.Local" /> property.</para>
        </block>
        <altmember cref="Overload:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId" />
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateTime">変換する日付と時刻。</param>
        <param name="destinationTimeZoneId">変換先タイム ゾーンの ID。</param>
        <summary>ある時刻をタイム ゾーン ID に基づいて別のタイム ゾーンの時刻に変換します。</summary>
        <returns>変換先タイム ゾーンでの日付と時刻。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 変換を実行するときに、<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A>メソッドには、有効で、調整規則が適用されます、`destinationTimeZoneId`タイム ゾーン。  
  
 このオーバー ロードを呼び出すこととほぼ同じですが、<xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29>メソッドを除いてことでは、オブジェクト参照ではなく、識別子によって変換先タイム ゾーンを指定することができます。 このメソッドは、それに対応するタイム ゾーン オブジェクトを取得せずに時刻を変換する必要があり、変換された時刻が standard または夏時間かどうかを知る必要はない場合に最も役に立つです。  
  
 <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%29>メソッドの値からソース タイム ゾーンの決定、`dateTime`パラメーターの<xref:System.DateTime.Kind%2A>プロパティは、次の表に示すようです。  
  
|Kind プロパティ値|変換元タイム ゾーン|メソッドの動作|  
|-----------------|----------------|-------------|  
|<xref:System.DateTimeKind.Local?displayProperty=fullName>|<xref:System.TimeZoneInfo.Local%2A>|時間を現地時刻に変換します`destinationTimeZone`です。|  
|<xref:System.DateTimeKind.Utc?displayProperty=fullName>|<xref:System.TimeZoneInfo.Utc%2A>|時刻を世界協定時刻 \(UTC\) に変換します`destinationTimeZone`です。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=fullName>|想定する<xref:System.TimeZoneInfo.Local%2A>です。|時間を現地時刻に変換します`destinationTimeZone`です。|  
  
 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>値は次の表に示すように設定されています。  
  
|条件|Kind プロパティの値が返されました|  
|--------|-------------------------|  
|`destinationTimeZone` が `TimeZoneInfo.Utc.Id` です。|<xref:System.DateTimeKind.Utc?displayProperty=fullName>|  
|その他の`destinationTimeZone`値。|<xref:System.DateTimeKind.Unspecified?displayProperty=fullName>|  
  
 場合の値、`dateTime`パラメーターがあいまいな現地時刻、標準時として解釈されます。 場合、`dateTime`パラメーターが無効なローカル時刻、このメソッドをスロー、<xref:System.ArgumentException>です。  
  
 場合の変換`dateTime`結果よりも前の日付と時刻の値<xref:System.DateTime.MinValue?displayProperty=fullName>かそれより遅い<xref:System.DateTime.MaxValue?displayProperty=fullName>、このメソッドが戻る<xref:System.DateTime.MinValue?displayProperty=fullName>または<xref:System.DateTime.MaxValue?displayProperty=fullName>、それぞれします。  
  
 このメソッドは、タイム ゾーンで指定されている識別子を取得、`destinationTimeZoneId`レジストリからのパラメーターです。 使用して作成されたタイム ゾーン オブジェクトを取得できない、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>メソッドです。`destinationTimeZoneId`パラメーターは、タイム ゾーンのレジストリ キーの長さではなく; が発生する、一致の場合も、正確に対応する必要がありますの比較は、`destinationTimeZoneId`のタイム ゾーン識別子が区別されません。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationTimeZoneId" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidTimeZoneException">タイム ゾーン ID が見つかりましたが、レジストリ データが壊れています。</exception>
        <exception cref="T:System.Security.SecurityException">プロセスには、タイム ゾーン情報を格納するレジストリ キーからの読み取りに必要な権限がありません。</exception>
        <exception cref="T:System.TimeZoneNotFoundException">
          <paramref name="destinationTimeZoneId" /> ID がローカル システムで見つかりませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTimeBySystemTimeZoneId (DateTimeOffset dateTimeOffset, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTimeBySystemTimeZoneId(valuetype System.DateTimeOffset dateTimeOffset, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTimeOffset,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">変換する日付と時刻。</param>
        <param name="destinationTimeZoneId">変換先タイム ゾーンの ID。</param>
        <summary>ある時刻をタイム ゾーン ID に基づいて別のタイム ゾーンの時刻に変換します。</summary>
        <returns>変換先タイム ゾーンでの日付と時刻。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 変換を実行するときに、<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A>メソッドの適用、調整規則で有効、`destinationTimeZoneId`タイム ゾーン。  
  
 このオーバー ロードを呼び出すことと同じ、<xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29>メソッドを除いてことでは、オブジェクト参照ではなく、識別子によって変換先タイム ゾーンを指定することができます。 このメソッドは、それに対応するタイム ゾーン オブジェクトを取得せずに時刻を変換する必要があり、変換された時刻が standard または夏時間かどうかを知る必要はない場合に最も役に立つです。  
  
 `dateTimeOffset`パラメーターが日付を表す、世界協定時刻 \(UTC\) からの時点と時刻のオフセットし、あいまいな時刻または無効な時刻のいずれかに表すことはできません。  
  
 このメソッドは、タイム ゾーンで指定されている識別子を取得、`destinationTimeZoneId`レジストリからのパラメーターです。 使用して作成されたタイム ゾーン オブジェクトを取得できない、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>メソッドです。`destinationTimeZoneId`パラメーターは、タイム ゾーンのレジストリ キーの長さではなく; が発生する、一致の場合も、正確に対応する必要がありますの比較は、`destinationTimeZoneId`のタイム ゾーン識別子が区別されません。  
  
 変換する際に、`dateTimeOffset`値を変換先タイム ゾーン、メソッドの時間では、変換先タイム ゾーンで有効に任意の調整規則を考慮に入れます。  
  
 場合の変換`dateTimeOffset`結果の日付と時刻の値よりも前に<xref:System.DateTimeOffset.MinValue?displayProperty=fullName>かそれより遅い<xref:System.DateTimeOffset.MaxValue?displayProperty=fullName>、このメソッドが戻る<xref:System.DateTimeOffset.MinValue?displayProperty=fullName>または<xref:System.DateTimeOffset.MaxValue?displayProperty=fullName>、それぞれします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationTimeZoneId" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidTimeZoneException">タイム ゾーン ID が見つかりましたが、レジストリ データが壊れています。</exception>
        <exception cref="T:System.Security.SecurityException">プロセスには、タイム ゾーン情報を格納するレジストリ キーからの読み取りに必要なアクセス許可がありません。</exception>
        <exception cref="T:System.TimeZoneNotFoundException">
          <paramref name="destinationTimeZoneId" /> ID がローカル システムで見つかりませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="sourceTimeZoneId" Type="System.String" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateTime">変換する日付と時刻。</param>
        <param name="sourceTimeZoneId">変換元タイム ゾーンの ID。</param>
        <param name="destinationTimeZoneId">変換先タイム ゾーンの ID。</param>
        <summary>あるタイム ゾーンの時刻を別のタイム ゾーンの時刻にタイム ゾーン ID に基づいて変換します。</summary>
        <returns>変換元タイム ゾーンでの <paramref name="dateTime" /> パラメーターに対応する、変換先タイム ゾーンでの日付と時刻。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 変換を実行するときに、<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A>メソッドで有効調整規則を適用する、`destinationTimeZoneId`タイム ゾーン。  
  
 似ていますが、<xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=fullName>使用するメソッド、<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=fullName>の代わりにそれらの識別子を使用してソースと変換先タイム ゾーンを指定する、<xref:System.TimeZoneInfo>オブジェクト。 このメソッドは、それに対応するタイム ゾーン オブジェクトを取得せずに時刻を変換する必要があり、変換された時刻が standard または夏時間かどうかを知る必要はない場合に最も役に立つです。  
  
 このメソッドを持つ識別子は、タイム ゾーンを取得、`sourceTimeZoneId`と`destinationTimeZoneId`レジストリのパラメーターです。 使用して作成されたタイム ゾーン オブジェクトを取得できない、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>メソッドです。  
  
 値、<xref:System.DateTime.Kind%2A>のプロパティ、`dateTime`パラメーターに対応する必要があります、`sourceTimeZoneId`パラメーターは、次の表に示すようです。  
  
|DateTime.Kind 値|sourceTimeZone 値|メソッドの動作|  
|---------------------|----------------------|-------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=fullName>|等しい`TimeZoneInfo.Utc.Id`です。|変換`dateTime`変換先タイム ゾーンの時刻にします。|  
|<xref:System.DateTimeKind.Utc?displayProperty=fullName>|等しくない`TimeZoneInfo.Utc.Id`です。|スロー、<xref:System.ArgumentException>です。|  
|<xref:System.DateTimeKind.Local?displayProperty=fullName>|等しい`TimeZoneInfo.Local.Id`です。|変換`dateTime`変換先タイム ゾーンの時刻にします。|  
|<xref:System.DateTimeKind.Local?displayProperty=fullName>|等しくない`TimeZoneInfo.Local.Id`です。|スロー、<xref:System.ArgumentException>です。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=fullName>|任意です。|変換`dateTime`変換先タイム ゾーンの時刻にします。|  
  
 呼び出しに依存しているため、 <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> 、メソッド、<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A>メソッドに対応するタイム ゾーンを区別しない検索を実行する`sourceTimeZoneId`と`destinationTimeZoneId`です。  
  
 場合の値、`dateTime`パラメーターは、変換元タイム ゾーンであいまいな時刻、標準時として解釈されます。 場合、`dateTime`パラメーター ソース タイム ゾーンで無効な時間は、このメソッドは、<xref:System.ArgumentException>です。  
  
 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>に値が設定されている<xref:System.DateTimeKind.Unspecified?displayProperty=fullName>変換先タイム ゾーンは、世界協定時刻 \(UTC\) でない限り、その場合に設定されている<xref:System.DateTimeKind.Utc?displayProperty=fullName>です。  
  
   
  
## 例  
 次の例では、<xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=fullName>ローカル システム時刻を世界中の 8 つの都市に対応する時刻を表示するメソッド。  
  
 [!code-csharp[System.TimeZone2.Conversions\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#3)]
 [!code-vb[System.TimeZone2.Conversions\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateTime" /> パラメーターの <see cref="P:System.DateTime.Kind" /> プロパティは変換元タイム ゾーンと対応していません。  
  
 または  
  
 <paramref name="dateTime" /> はソース タイム ゾーンで無効な時間です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceTimeZoneId" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="destinationTimeZoneId" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidTimeZoneException">タイム ゾーン ID が見つかりましたが、レジストリ データが破損しています。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、タイム ゾーン データが格納されているレジストリ キーからの読み取りに必要な権限がありません。</exception>
        <exception cref="T:System.TimeZoneNotFoundException">
          <paramref name="sourceTimeZoneId" /> ID がローカル システムで見つかりませんでした。  
  
 または  
  
 <paramref name="destinationTimeZoneId" /> ID がローカル システムで見つかりませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeFromUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeFromUtc (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeFromUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">世界協定時刻 \(UTC\)。</param>
        <param name="destinationTimeZone">
          <c>dateTime</c> の変換先タイム ゾーン。</param>
        <summary>世界協定時刻 \(UTC\) を、指定されたタイム ゾーンの時刻に変換します。</summary>
        <returns>変換先タイム ゾーンでの日付と時刻。<paramref name="destinationTimeZone" /> が <see cref="P:System.TimeZoneInfo.Utc" /> の場合、<see cref="P:System.DateTime.Kind" /> プロパティは <see cref="F:System.DateTimeKind.Utc" />。それ以外の場合、<see cref="P:System.DateTime.Kind" /> プロパティは <see cref="F:System.DateTimeKind.Unspecified" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 変換を実行するときに、<xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A>メソッドには、有効で、調整規則が適用されます、`destinationTimeZone`タイム ゾーン。  
  
 このメソッドの動作の詳細は、値によって異なります、<xref:System.DateTime.Kind%2A>プロパティの`dateTime`パラメーターは、次の表に示すようです。  
  
|DateTime.Kind プロパティ|変換|  
|-------------------------|--------|  
|<xref:System.DateTimeKind.Local?displayProperty=fullName>|スロー、<xref:System.ArgumentException>です。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=fullName> または <xref:System.DateTimeKind.Utc?displayProperty=fullName>|世界協定時刻 \(UTC\) からに変換します。|  
  
 場合の変換`dateTime`結果よりも前の日付と時刻の値<xref:System.DateTime.MinValue?displayProperty=fullName>かそれより遅い<xref:System.DateTime.MaxValue?displayProperty=fullName>、このメソッドが戻る<xref:System.DateTime.MinValue?displayProperty=fullName>または<xref:System.DateTime.MaxValue?displayProperty=fullName>、それぞれします。  
  
   
  
## 例  
 次の例では、中部標準時を世界協定時刻 \(UTC\) に変換します。  
  
 [!code-csharp[System.TimeZone2.Concepts\#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#8)]
 [!code-vb[System.TimeZone2.Concepts\#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateTime" /> の <see cref="P:System.DateTime.Kind" /> プロパティは <see cref="F:System.DateTimeKind.Local" /> です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationTimeZone" /> は <see langword="null" /> です。</exception>
        <block subset="none" type="usage">
          <para>On [!INCLUDE[winxp](~/includes/winxp-md.md)] systems, this method applies only the current adjustment rule to the time zone conversion if <paramref name="destinationTimeZone" /> is <see cref="P:System.TimeZoneInfo.Local" />. As a result, the method may not accurately convert times for periods before the current adjustment rule came into effect. For more information, see the Notes for Callers section in the <see cref="P:System.TimeZoneInfo.Local" /> property.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">変換する日付と時刻。</param>
        <summary>指定の日付と時刻を世界協定時刻 \(UTC\) に変換します。</summary>
        <returns>
          <paramref name="dateTime" /> パラメーターに対応する世界協定時刻 \(UTC\)。<see cref="T:System.DateTime" /> 値の <see cref="P:System.DateTime.Kind" /> プロパティは、常に <see cref="F:System.DateTimeKind.Utc" /> に設定されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 実行される正確な変換は、の値によって異なります、<xref:System.DateTime.Kind%2A>のプロパティ、`dateTime`パラメーターは、次の表に示すようです。  
  
|DateTime.Kind プロパティ|変換|  
|-------------------------|--------|  
|<xref:System.DateTimeKind.Local?displayProperty=fullName>|世界協定時刻 \(UTC\) から現地時刻に変換します。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=fullName>|前提としています`dateTime`ローカル時刻は、現地時刻から UTC に変換します。|  
|<xref:System.DateTimeKind.Utc?displayProperty=fullName>|返します`dateTime`変更されません。|  
  
 場合`dateTime`対応あいまいな現地時刻にこの方法では、標準のローカル時刻であること。 場合`dateTime`メソッドでのスロー、無効なローカル時刻に対応する、<xref:System.ArgumentException>です。  
  
> [!NOTE]
>  タイム ゾーンが複数の調整規則では、このオーバー ロードを含む場合は、現在のコンピューターのローカル、<xref:System.TimeZoneInfo.ConvertTimeToUtc%2A>メソッドとは異なる結果を返すことができます、<xref:System.TimeZone.ToUniversalTime%2A?displayProperty=fullName>と<xref:System.DateTime.ToUniversalTime%2A?displayProperty=fullName>メソッドです。<xref:System.TimeZone.ToUniversalTime%2A?displayProperty=fullName>常にルールが適用されます現在調整をタイム ゾーンに変換するかどうか`dateTime`その日付の範囲内にあります。 実行するときと[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]、<xref:System.DateTime.ToUniversalTime%2A?displayProperty=fullName>にも適用されます、現在の調整規則のタイム ゾーンの変換するかどうか`dateTime`その日付の範囲内にあります。  
  
 場合に相当する UTC`dateTime`よりも前か<xref:System.DateTime.MinValue?displayProperty=fullName>またはそれ以降を<xref:System.DateTime.MaxValue?displayProperty=fullName>、このメソッドが戻る<xref:System.DateTime.MinValue>または<xref:System.DateTime.MaxValue>、それぞれします。  
  
   
  
## 例  
 次の例への変換の時間の値が<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind.Utc?displayProperty=fullName>、 <xref:System.DateTimeKind.Local?displayProperty=fullName>、および<xref:System.DateTimeKind.Unspecified?displayProperty=fullName>、それぞれします。 また、あいまいなと無効な時間の変換を示しています。  
  
 [!code-csharp[System.TimeZone2.Conversions\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#1)]
 [!code-vb[System.TimeZone2.Conversions\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see langword="TimeZoneInfo.Local.IsInvalidDateTime(" /> <paramref name="dateTime" /> <see langword=")" /> は <see langword="true" /> を返します。</exception>
        <block subset="none" type="usage">
          <para>On [!INCLUDE[winxp](~/includes/winxp-md.md)] systems, this method applies only the current adjustment rule to the time zone conversion. As a result, the method may not accurately convert times for periods before the current adjustment rule came into effect. For more information, see the Notes for Callers section in the <see cref="P:System.TimeZoneInfo.Local" /> property.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime, TimeZoneInfo sourceTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">変換する日付と時刻。</param>
        <param name="sourceTimeZone">
          <c>dateTime</c> のタイム ゾーン。</param>
        <summary>指定されたタイム ゾーンの時刻を世界協定時刻 \(UTC\) に変換します。</summary>
        <returns>
          <paramref name="dateTime" /> パラメーターに対応する世界協定時刻 \(UTC\)。<see cref="T:System.DateTime" /> オブジェクトの <see cref="P:System.DateTime.Kind" /> プロパティは、常に <see cref="F:System.DateTimeKind.Utc" /> に設定されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、<xref:System.DateTime.Kind%2A>のプロパティ、`dateTime`パラメーターと等しい<xref:System.DateTimeKind.Utc?displayProperty=fullName>と`sourceTimeZone`パラメーターと等しい<xref:System.TimeZoneInfo.Utc%2A?displayProperty=fullName>、このメソッドが戻る`dateTime`任意の変換を実行することがなくです。  
  
 場合`dateTime`対応このメソッドがあいまいな時刻にはソース タイム ゾーンの標準時である前提としています。 場合`dateTime`スローに時間が無効です、このメソッドに対応する、<xref:System.ArgumentException>です。  
  
 場合に相当する世界協定時刻 \(UTC\)`dateTime`よりも前か<xref:System.DateTime.MinValue?displayProperty=fullName>またはそれ以降を<xref:System.DateTime.MaxValue?displayProperty=fullName>、このメソッドが戻る<xref:System.DateTime.MinValue>または<xref:System.DateTime.MaxValue>、それぞれします。  
  
   
  
## 例  
 次の例、ローカル システムから現在の日付を取得および世界協定時刻 \(UTC\) に変換します東京標準時に変換し、最後に UTC に戻すから東京 \(標準時\) に変換します。 2 つの UTC 時刻が同じであることを注意してください。  
  
 [!code-csharp[System.TimeZone2.Conversions\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateTime" /> <see langword=".Kind" /> は <see cref="F:System.DateTimeKind.Utc" /> ですが、<paramref name="sourceTimeZone" /> は <see cref="P:System.TimeZoneInfo.Utc" /> と一致しません。  
  
 または  
  
 <paramref name="dateTime" /> <see langword=".Kind" /> は <see cref="F:System.DateTimeKind.Local" /> ですが、<paramref name="sourceTimeZone" /> は <see cref="P:System.TimeZoneInfo.Local" /> と一致しません。  
  
 または  
  
 <paramref name="sourceTimeZone" /> <see langword=".IsInvalidDateTime(" /> <paramref name="dateTime" /> <see langword=")" /> は <see langword="true" /> を返します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceTimeZone" /> は <see langword="null" /> です。</exception>
        <block subset="none" type="usage">
          <para>On [!INCLUDE[winxp](~/includes/winxp-md.md)] systems, the method applies only the current adjustment rule to the time zone conversion if <paramref name="sourceTimeZone" /> is <see cref="P:System.TimeZoneInfo.Local" />. As a result, the method may not accurately convert times for periods before the current adjustment rule came into effect. For more information, see the Notes for Callers section in the <see cref="P:System.TimeZoneInfo.Local" /> property.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="standardDisplayName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">タイム ゾーン ID。</param>
        <param name="baseUtcOffset">このタイム ゾーンの標準時と世界協定時刻 \(UTC\) との時差を表すオブジェクト。</param>
        <param name="displayName">新しいタイム ゾーンの表示名。</param>
        <param name="standardDisplayName">新しいタイム ゾーンの標準時名。</param>
        <summary>指定された ID、世界協定時刻 \(UTC\) からのオフセット、表示名、および標準時の表示名を使用して、カスタム タイム ゾーンを作成します。</summary>
        <returns>新しいタイム ゾーン。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このオーバー ロード、<xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29>メソッドは \(夏時間をサポートしていないタイム ゾーン\) の調整がないタイム ゾーンの作成に適しています。 夏時間の調整が含まれるタイム ゾーンを定義するには、いずれかを使用、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=fullName>または<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=fullName>メソッドです。  
  
 次の表は、パラメーターに提供されている間のリレーションシップ、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=fullName>メソッドとプロパティの<xref:System.TimeZoneInfo>メソッドの呼び出しによって返されるオブジェクト。  
  
|CreateCustomTimeZone パラメーター|TimeZoneInfo プロパティ|  
|---------------------------------|------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
  
 通常、タイム ゾーンの標準時名とその識別子は、同じです。 ただし、タイム ゾーンの識別子の長さは 32 文字を超えない必要があります。 渡された文字列、`displayName`パラメーターがかなり標準形式に従います。 表示名の最初の部分は、世界協定時刻の頭字語 GMT \(グリニッジ標準時\)、かっこで囲まれて示されているからタイム ゾーンの基本のオフセットです。 自体は、タイム ゾーンまたは 1 つまたは複数の市区町村、領域、またはタイム ゾーンでの国またはその両方を識別する文字列が続きます。 例:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## 例  
 次の例では、モーソンおよびホルム湾の地域のため、カスタム タイム ゾーンを作成します。 新しいタイム ゾーンの時刻にローカル時刻に変換した結果が表示されます。  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#1)]
 [!code-vb[System.TimeZone2.CreateTimeZone\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="id" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="id" /> パラメーターが空の文字列 \(""\) です。  
  
 または  
  
 <paramref name="baseUtcOffset" /> パラメーターが、分を表す整数値ではありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="baseUtcOffset" /> パラメーターが 14 時間を上回っているか、\-14 時間を下回っています。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="standardDisplayName" Type="System.String" />
        <Parameter Name="daylightDisplayName" Type="System.String" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" />
      </Parameters>
      <Docs>
        <param name="id">タイム ゾーン ID。</param>
        <param name="baseUtcOffset">このタイム ゾーンの標準時と世界協定時刻 \(UTC\) との時差を表すオブジェクト。</param>
        <param name="displayName">新しいタイム ゾーンの表示名。</param>
        <param name="standardDisplayName">新しいタイム ゾーンの標準時名。</param>
        <param name="daylightDisplayName">新しいタイム ゾーンの夏時間名。</param>
        <param name="adjustmentRules">特定の期間のベース UTC オフセットを増やす配列。</param>
        <summary>指定された ID、世界協定時刻 \(UTC\) からのオフセット、表示名、標準時名、夏時間名、および夏時間規則を使用して、カスタム タイム ゾーンを作成します。</summary>
        <returns>新しいタイム ゾーンを表す <see cref="T:System.TimeZoneInfo" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このオーバー ロード、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=fullName>メソッドが夏時間をサポートするタイム ゾーンの作成に適しています。 夏時間をサポートしていないタイム ゾーンを定義するには、いずれかを使用、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=fullName>または<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=fullName>メソッドです。  
  
 次の表は、パラメーターに提供されている間のリレーションシップ、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=fullName>メソッドおよびのメンバー、<xref:System.TimeZoneInfo>メソッドの呼び出しによって返されるオブジェクト。  
  
|CreateCustomTimeZone パラメーター|TimeZoneInfo メンバー|  
|---------------------------------|-----------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A>|  
|`adjustmentRules`|配列<xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=fullName>によって返されるオブジェクト、<xref:System.TimeZoneInfo.GetAdjustmentRules%2A>メソッドです。|  
  
 通常、タイム ゾーンの標準時名とその識別子は、同じです。 ただし、タイム ゾーンの識別子の長さは 32 文字を超えない必要があります。 渡された文字列、`displayName`パラメーター標準形式に依存します。 表示名の最初の部分は、世界協定時刻の頭字語 GMT \(グリニッジ標準時\)、かっこで囲まれて示されているからタイム ゾーンの基本のオフセットです。 自体は、タイム ゾーンまたは 1 つまたは複数の市区町村、領域、またはタイム ゾーンでの国またはその両方を識別する文字列が続きます。 例:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 `baseUtcOffset`パラメーターは、カスタム タイム ゾーンのオフセットから世界協定時刻 \(UTC\) のすべてのタイム ゾーンの調整規則を定義します。 言い換えると、<xref:System.TimeZoneInfo>オブジェクト モデルでは、UTC からのタイム ゾーンのオフセットは、タイム ゾーンの寿命が終わる定数と存在する特定の調整ルールの独立しました。 タイム ゾーンを UTC からのオフセットが変更を反映するように、新しいタイム ゾーン オブジェクトを作成する必要があります。  
  
 次の手順では、タイム ゾーンの調整規則が定義されています。  
  
1.  いずれかの呼び出しの<xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A>または<xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A>最初と最後の調整規則ごとの移行時間を定義するメソッド。  
  
2.  呼び出しの<xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A>調整規則ごとのメソッドです。  
  
3.  として渡される配列に調整規則を割り当てることができます、`adjustmentRules`パラメーター。  
  
   
  
## 例  
 次の例では、南極 Palmer ステーションとアンヴァース島、カスタム タイム ゾーンを作成します。 新しいタイム ゾーンの時刻にローカル時刻を変換し、結果を表示します。  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#2)]
 [!code-vb[System.TimeZone2.CreateTimeZone\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="id" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="id" /> パラメーターが空の文字列 \(""\) です。  
  
 または  
  
 <paramref name="baseUtcOffset" /> パラメーターが、分を表す整数値ではありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="baseUtcOffset" /> パラメーターが 14 時間を上回っているか、\-14 時間を下回っています。</exception>
        <exception cref="T:System.InvalidTimeZoneException">
          <paramref name="adjustmentRules" /> パラメーターに指定された調整規則が重複しています。  
  
 または  
  
 <paramref name="adjustmentRules" /> パラメーターに指定された調整規則が時系列順ではありません。  
  
 または  
  
 <paramref name="adjustmentRules" /> の 1 つ以上の要素が <see langword="null" /> です。  
  
 または  
  
 複数の調整規則を適用できる日付があります。  
  
 または  
  
 <paramref name="baseUtcOffset" /> パラメーターと、<paramref name="adjustmentRules" /> 配列内にある 1 つ以上のオブジェクトの <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> 値の合計が、14 時間を上回っているか、\-14 時間を下回っています。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[],System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="standardDisplayName" Type="System.String" />
        <Parameter Name="daylightDisplayName" Type="System.String" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" />
        <Parameter Name="disableDaylightSavingTime" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="id">タイム ゾーン ID。</param>
        <param name="baseUtcOffset">現在のタイム ゾーンの標準時と世界協定時刻 \(UTC\) との時差を表す <see cref="T:System.TimeSpan" /> オブジェクト。</param>
        <param name="displayName">新しいタイム ゾーンの表示名。</param>
        <param name="standardDisplayName">新しいタイム ゾーンの標準時名。</param>
        <param name="daylightDisplayName">新しいタイム ゾーンの夏時間名。</param>
        <param name="adjustmentRules">特定の期間のベース UTC オフセットを増やす <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> オブジェクトの配列。</param>
        <param name="disableDaylightSavingTime">新しいオブジェクトの <c>adjustmentRules</c> に含まれている夏時間関連の情報をすべて破棄する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>指定された ID、世界協定時刻 \(UTC\) からのオフセット、表示名、標準時名、夏時間名、夏時間規則、および返されるオブジェクトに夏時間情報を反映するかどうかを示す値を使用して、カスタム タイム ゾーンを作成します。</summary>
        <returns>新しいタイム ゾーン。<paramref name="disableDaylightSavingTime" /> パラメーターが <see langword="true" /> の場合、返されるオブジェクトに夏時間データはありません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このオーバー ロードを使用することができます、[CreateCustomTimeZone メソッド \(String, TimeSpan, String, String, String, TimeZoneInfo.AdjustmentRule\<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=fullName>メソッドを実行時に夏時間のサポートの条件で決定できます、カスタム タイム ゾーンを作成します。  
  
 次の表は、パラメーターに提供されている間のリレーションシップ、[CreateCustomTimeZone メソッド \(String, TimeSpan, String, String, String, TimeZoneInfo.AdjustmentRule\<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=fullName>メソッドおよびのメンバー、[CreateCustomTimeZone メソッド \(String, TimeSpan, String, String, String, TimeZoneInfo.AdjustmentRule\<xref:System.TimeZoneInfo>メソッドの呼び出しによって返されるオブジェクト。  
  
|CreateCustomTimeZone パラメーター|TimeZoneInfo プロパティ|  
|---------------------------------|------------------------|  
|`id`|[CreateCustomTimeZone メソッド \(String, TimeSpan, String, String, String, TimeZoneInfo.AdjustmentRule\<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|[CreateCustomTimeZone メソッド \(String, TimeSpan, String, String, String, TimeZoneInfo.AdjustmentRule\<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|[CreateCustomTimeZone メソッド \(String, TimeSpan, String, String, String, TimeZoneInfo.AdjustmentRule\<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|[CreateCustomTimeZone メソッド \(String, TimeSpan, String, String, String, TimeZoneInfo.AdjustmentRule\<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|[CreateCustomTimeZone メソッド \(String, TimeSpan, String, String, String, TimeZoneInfo.AdjustmentRule\<xref:System.TimeZoneInfo.DaylightName%2A>if `disableDaylightSavingTime` is `false`;[CreateCustomTimeZone メソッド \(String, TimeSpan, String, String, String, TimeZoneInfo.AdjustmentRule\<xref:System.String.Empty?displayProperty=fullName> if `disableDaylightSavingTime` is `true`.|  
|`adjustmentRules`|配列[CreateCustomTimeZone メソッド \(String, TimeSpan, String, String, String, TimeZoneInfo.AdjustmentRule\<xref:System.TimeZoneInfo.AdjustmentRule>によって返されるオブジェクト、[CreateCustomTimeZone メソッド \(String, TimeSpan, String, String, String, TimeZoneInfo.AdjustmentRule\<xref:System.TimeZoneInfo.GetAdjustmentRules%2A>メソッド場合`disableDaylightSavingTime`は`false`; によって返される空の配列、[CreateCustomTimeZone メソッド \(String, TimeSpan, String, String, String, TimeZoneInfo.AdjustmentRule\<xref:System.TimeZoneInfo.GetAdjustmentRules%2A>メソッド場合`disableDaylightSavingTime`は`true`します。|  
|`disableDaylightSavingTime`|Not [CreateCustomTimeZone メソッド \(String, TimeSpan, String, String, String, TimeZoneInfo.AdjustmentRule\<xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>.|  
  
 通常、タイム ゾーンの標準時名とその識別子は、同じです。 ただし、タイム ゾーンの識別子の長さは 32 文字を超えない必要があります。 渡された文字列、`displayName`パラメーターがかなり標準形式に従います。 表示名の最初の部分は、世界協定時刻の頭字語 GMT \(グリニッジ標準時\)、かっこで囲まれて示されているからタイム ゾーンの基本のオフセットです。 自体は、タイム ゾーンまたは 1 つまたは複数の市区町村、領域、またはタイム ゾーンでの国またはその両方を識別する文字列が続きます。 例:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 次の手順では、タイム ゾーンの調整規則が定義されています。  
  
1.  いずれかを呼び出す、[CreateCustomTimeZone メソッド \(String, TimeSpan, String, String, String, TimeZoneInfo.AdjustmentRule\<xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A>または[CreateCustomTimeZone メソッド \(String, TimeSpan, String, String, String, TimeZoneInfo.AdjustmentRule\<xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A>最初と最後の調整規則ごとの遷移の規則を定義するメソッド。  
  
2.  呼び出す、[CreateCustomTimeZone メソッド \(String, TimeSpan, String, String, String, TimeZoneInfo.AdjustmentRule\<xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A>調整規則ごとのメソッドです。  
  
3.  として渡される配列に調整規則を割り当てることができます、`adjustmentRules`パラメーター。  
  
 場合`disableDaylightSavingTime`パラメーターは`false`、このメソッドの操作は、[CreateCustomTimeZone メソッド \(String, TimeSpan, String, String, String, TimeZoneInfo.AdjustmentRule\<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=fullName>オーバー ロードします。 場合`disableDaylightSavingTime`は`true`、返されたオブジェクトに調整規則が含まれていませんと[CreateCustomTimeZone メソッド \(String, TimeSpan, String, String, String, TimeZoneInfo.AdjustmentRule\<xref:System.TimeZoneInfo.DaylightName%2A>プロパティの値は空の文字列。  
  
   
  
## 例  
 次の例では、南極 Palmer ステーションとアンヴァース島、カスタム タイム ゾーンを作成します。 設定、`disableDaylightSavingTime`呼び出しでは、パラメーター、[CreateCustomTimeZone メソッド \(String, TimeSpan, String, String, String, TimeZoneInfo.AdjustmentRule\<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=fullName>メソッドを`true`です。 新しいタイム ゾーンの夏時間名、1 つが存在する場合、新しいタイム ゾーンに夏時間情報がないことを確認する調整規則の数が表示されます。  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#3)]
 [!code-vb[System.TimeZone2.CreateTimeZone\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="id" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="id" /> パラメーターが空の文字列 \(""\) です。  
  
 または  
  
 <paramref name="baseUtcOffset" /> パラメーターが、分を表す整数値ではありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="baseUtcOffset" /> パラメーターが 14 時間を上回っているか、\-14 時間を下回っています。</exception>
        <exception cref="T:System.InvalidTimeZoneException">
          <paramref name="adjustmentRules" /> パラメーターに指定された調整規則が重複しています。  
  
 または  
  
 <paramref name="adjustmentRules" /> パラメーターに指定された調整規則が時系列順ではありません。  
  
 または  
  
 <paramref name="adjustmentRules" /> の 1 つ以上の要素が <see langword="null" /> です。  
  
 または  
  
 複数の調整規則を適用できる日付があります。  
  
 または  
  
 <paramref name="baseUtcOffset" /> パラメーターと、<paramref name="adjustmentRules" /> 配列内にある 1 つ以上のオブジェクトの <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> 値の合計が、14 時間を上回っているか、\-14 時間を下回っています。</exception>
      </Docs>
    </Member>
    <Member MemberName="DaylightName">
      <MemberSignature Language="C#" Value="public string DaylightName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DaylightName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DaylightName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のタイム ゾーンの夏時間の表示名を取得します。</summary>
        <value>タイム ゾーンの夏時間の表示名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The display name is localized based on the culture installed with the Windows operating system.  
  
 A <xref:System.TimeZoneInfo.DaylightName%2A> property whose value is not <xref:System.String.Empty?displayProperty=fullName> or **languageKeyword tag is not supported!!!!**  
 does not necessarily indicate that the time zone supports daylight saving time. To determine whether the time zone supports daylight saving time, check the value of its <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> property.  
  
 In most cases, the <xref:System.TimeZoneInfo.DaylightName%2A> property of time zones defined in the registry is not <xref:System.String.Empty?displayProperty=fullName> or **languageKeyword tag is not supported!!!!**  
. However, the <xref:System.TimeZoneInfo.DaylightName%2A> property of custom time zones can be set to <xref:System.String.Empty?displayProperty=fullName>. This occurs when custom time zones are created by the <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29?displayProperty=fullName> or the <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%2CSystem.String%2CSystem.TimeZoneInfo.AdjustmentRule%5B%5D%2CSystem.Boolean%29?displayProperty=fullName> overload and the **parameterReference tag is not supported!!!!**  
 parameter is **languageKeyword tag is not supported!!!!**  
. Therefore, your code should never assume that the value of the <xref:System.TimeZoneInfo.DaylightName%2A> property is not **languageKeyword tag is not supported!!!!**  
 or empty.  
  
 The <xref:System.TimeZoneInfo.DaylightName%2A> property is equivalent to the <xref:System.TimeZone.DaylightName%2A> property of the <xref:System.TimeZone> class.  
  
   
  
## 例  
 The following example defines a method named `DisplayDateWithTimeZoneName` that uses the <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> method to determine whether to display a time zone's standard time name or daylight saving time name.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>タイム ゾーンを表す標準表示名を取得します。</summary>
        <value>タイム ゾーンの標準表示名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The display name is localized based on the culture installed with the Windows operating system.  
  
 Time zone display names for Windows system time zones follow a fairly standard format. The first portion of the display name is the time zone's base offset from Coordinated Universal Time, which is indicated by the acronym GMT \(for Greenwich Mean Time\), enclosed in parentheses. For Coordinated Universal Time, the GMT acronym with no offset is enclosed in parentheses.  This is followed by a string that identifies the time zone or one or more of the cities, regions, or countries in the time zone. For example:  
  
```  
(GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## 例  
 The following example retrieves a <xref:System.TimeZoneInfo> object that represents the local time zone and outputs its display name, standard time name, and daylight saving time name. The output is displayed for a system in the U.S. Pacific Standard Time zone.  
  
 [!code-csharp[System.TimeZone2.Class\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">現在のオブジェクトと比較するもう 1 つのオブジェクト。</param>
        <summary>現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトと別のオブジェクトが等しいかどうかを判断します。</summary>
        <returns>
          <paramref name="obj" /> が現在のインスタンスと等しい <see cref="T:System.TimeZoneInfo" /> オブジェクトである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method converts or casts **parameterReference tag is not supported!!!!**  
 to a <xref:System.TimeZoneInfo> object and compares it with the current instance. The test for equality is based on a comparison of values. The current <xref:System.TimeZoneInfo> instance and **parameterReference tag is not supported!!!!**  
 are considered to be equal under the following conditions:  
  
-   The run\-time type of **parameterReference tag is not supported!!!!**  
     is <xref:System.TimeZoneInfo>.  
  
-   The two objects have the same <xref:System.TimeZoneInfo.Id%2A> property value.  
  
-   The two objects have the same adjustment rules.  
  
 If **parameterReference tag is not supported!!!!**  
 is **languageKeyword tag is not supported!!!!**  
, this method returns **languageKeyword tag is not supported!!!!**  
.  
  
   
  
## 例  
 The following example uses the <xref:System.TimeZoneInfo.Equals%28System.Object%29> method to determine whether the local time zone is Pacific Time or Eastern Time.  
  
 [!code-csharp[System.TimeZoneInfo.Equals\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.equals/cs/equals1.cs#1)]
 [!code-vb[System.TimeZoneInfo.Equals\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="other">現在のオブジェクトと比較するもう 1 つのオブジェクト。</param>
        <summary>現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトと別の <see cref="T:System.TimeZoneInfo" /> オブジェクトが等しいかどうかを判断します。</summary>
        <returns>2 つの <see cref="T:System.TimeZoneInfo" /> オブジェクトが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Equality is based on a comparison of values. Two <xref:System.TimeZoneInfo> objects are considered to be equal under the following conditions:  
  
-   The value of their <xref:System.TimeZoneInfo.Id%2A> property is the same.  
  
-   They have the same adjustment rules.  
  
 <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=fullName> returns the Boolean value that results from evaluating the following expression:  
  
 \[C\#\]  
  
 `other.Id == this.Id && HasSameRules(other);`  
  
 \[Visual Basic\]  
  
 `other.Id = me.Id AndAlso HasSameRules(other)`  
  
 If the **parameterReference tag is not supported!!!!**  
 parameter is an uninitialized <xref:System.TimeZoneInfo> object, this method returns **languageKeyword tag is not supported!!!!**  
.  
  
   
  
## 例  
 The following example uses the <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29> method to determine whether the local time zone is Pacific Time or Eastern Time.  
  
 [!code-csharp[System.TimeZone2.Class\#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#7)]
 [!code-vb[System.TimeZone2.Class\#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindSystemTimeZoneById">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FindSystemTimeZoneById (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FindSystemTimeZoneById(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">タイム ゾーン ID。<see cref="P:System.TimeZoneInfo.Id" /> プロパティの値です。</param>
        <summary>
          <see cref="T:System.TimeZoneInfo" /> オブジェクトを ID に基づいてレジストリから取得します。</summary>
        <returns>ID が <paramref name="id" /> パラメーターの値であるオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `id`パラメーターは、タイム ゾーンのレジストリ キーの長さではなく; が発生する、一致の場合も、正確に対応する必要がありますの比較は、`id`のタイム ゾーン識別子が区別されません。 読み取り専用コレクションを使用するカスタムのプロシージャを作成では、部分的な一致に基づいてタイム ゾーン オブジェクトを取得する場合は、<xref:System.TimeZoneInfo>によって返されるオブジェクト、<xref:System.TimeZoneInfo.GetSystemTimeZones%2A>メソッドです。  
  
 <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>一致を試みます`id`hkey\_local\_machine NT\\CurrentVersion\\Time ゾーン ブランチは、Windows XP および Windows Vista の下のレジストリのサブキーの名前にします。 このブランチ必ずしも含まない包括的なタイム ゾーン識別子の一覧です。 アプリケーションで必要な場合を作成、特定のタイム ゾーンのオーバー ロードのいずれかを呼び出していずれか、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>メソッドの呼び出しでも<xref:System.TimeZoneInfo.FromSerializedString%2A>を逆シリアル化、<xref:System.TimeZoneInfo>必要なタイム ゾーンを表すオブジェクト。 ただし、これらのメソッド呼び出しによって作成されたタイム ゾーンのレジストリに含まれないを使用して取得することはできません、<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>メソッドです。 このカスタムのタイム ゾーンをによって返されるオブジェクトの参照を介してのみアクセスできる、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>または<xref:System.TimeZoneInfo.FromSerializedString%2A>メソッドの呼び出しです。  
  
   
  
## 例  
 次の例では、<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>東京標準タイム ゾーンを取得します。 これは、<xref:System.TimeZoneInfo>東京のローカル時刻を時刻に変換し、東京 \(標準時\) または東京 Daylight Time であるかどうかを決定するオブジェクトを使用しています。  
  
 [!code-csharp[System.TimeZone2.Conversions\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">システムに、タイム ゾーンの情報を保持するための十分なメモリがありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="id" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.TimeZoneNotFoundException">指定されたタイム ゾーン ID <paramref name="id" /> が見つかりませんでした。 つまり、<paramref name="id" /> と同じ名前のレジストリ キーが存在しないか、キーは存在するものの、タイム ゾーンのデータが含まれていません。</exception>
        <exception cref="T:System.Security.SecurityException">このプロセスには、タイム ゾーン情報を含むレジストリ キーからの読み取りに必要な権限がありません。</exception>
        <exception cref="T:System.InvalidTimeZoneException">タイム ゾーン ID が見つかりましたが、レジストリ データが壊れています。</exception>
        <altmember cref="P:System.TimeZoneInfo.Id" />
      </Docs>
    </Member>
    <Member MemberName="FromSerializedString">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FromSerializedString (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FromSerializedString(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">シリアル化された <see cref="T:System.TimeZoneInfo" /> オブジェクトの文字列表現。</param>
        <summary>文字列を逆シリアル化して、シリアル化された元の <see cref="T:System.TimeZoneInfo" /> オブジェクトを再作成します。</summary>
        <returns>シリアル化された元のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、別のタイム ゾーンがレジストリに見つかりませんを作成するために必要なすべてのコードを提供することをします。 カスタムのタイム ゾーンといずれかを定義することができますを使用して、<xref:System.TimeZoneInfo.ToSerializedString%2A>スタンドアロンの実行可能ファイルまたはアプリケーションのセットアップ プログラムを文字列としてのタイム ゾーンの保存に使用するメソッド。 アプリケーションの記憶域の場所からこの文字列を取得しを使用してそれをインスタンス化、<xref:System.TimeZoneInfo.FromSerializedString%2A>メソッドです。  
  
   
  
## 例  
 次の例が、\/南極を取得しようとしています。 ローカル システムからのタイム ゾーン。 失敗した場合、コードは、アプリケーション ディレクトリ内のテキスト ファイルからタイム ゾーンに関する情報を取得しようとします。 この試行が失敗した場合、コードは、タイム ゾーンを作成し、タイム ゾーンに関する情報をテキスト ファイルに書き込みます。  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="source" /> パラメーターが <see cref="F:System.String.Empty" /> です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> パラメーターが null 文字列です。</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">ソース パラメーターを逆シリアル化して <see cref="T:System.TimeZoneInfo" /> オブジェクトに戻すことはできません。</exception>
        <altmember cref="M:System.TimeZoneInfo.ToSerializedString" />
      </Docs>
    </Member>
    <Member MemberName="GetAdjustmentRules">
      <MemberSignature Language="C#" Value="public TimeZoneInfo.AdjustmentRule[] GetAdjustmentRules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.TimeZoneInfo/AdjustmentRule[] GetAdjustmentRules() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAdjustmentRules" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+AdjustmentRule[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトに適用する <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> オブジェクトの配列を取得します。</summary>
        <returns>このタイム ゾーンのオブジェクトの配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.TimeZoneInfo.GetAdjustmentRules%2A>メソッドの配列を取得する<xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=fullName>オブジェクト。 配列内の各オブジェクトがそのタイム ゾーンの調整だけでなく、デルタの有効開始と終了日を定義します \(調整によって変更する時間を正確な量\)。 さらに、2 つのプロパティを返す<xref:System.TimeZoneInfo.TransitionTime?displayProperty=fullName>と標準時の間の切り替えが発生したときを定義するオブジェクト。  
  
 タイム ゾーンに複数の調整規則がある場合は、通常、順序がから最も早い \(インデックス 0 の位置\) を最新 \(インデックスの<xref:System.Array.Length%2A>– 1\)。  
  
 タイム ゾーン調整規則が存在しない場合、<xref:System.TimeZoneInfo.GetAdjustmentRules%2A>メソッドが空の配列を返します \(配列を<xref:System.Array.Length%2A>ゼロ\)。  
  
 によって返される配列の要素を変更したり、<xref:System.TimeZoneInfo.GetAdjustmentRules%2A>メソッドは、特定のタイム ゾーンに属している調整規則には反映されません。 \(その履歴と遷移を反映夏時間からなど\)、タイム ゾーンの調整規則の変更する必要があります、適切な調整規則と、新しいタイム ゾーンを作成ではなく既存のものを変更します。  
  
   
  
## 例  
 次の例は、ローカル システムや表示詳細については、コンソールにそれらの調整規則で定義されているすべてのタイム ゾーンを取得します。  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#3)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">システムには、調整規則のメモリ内コピーを作成するのに十分なメモリがありません。</exception>
        <altmember cref="T:System.TimeZoneInfo.AdjustmentRule" />
      </Docs>
    </Member>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">日付と時刻。</param>
        <summary>あいまいな日付と時刻を割り当て可能な、日付と時刻に関する情報を返します。</summary>
        <returns>特定の日付と時刻を割り当て可能な、世界協定時刻 \(UTC\) オフセットを表すオブジェクトの配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの動作の詳細関係によって異なります、<xref:System.DateTime.Kind%2A>プロパティおよび<xref:System.TimeZoneInfo>オブジェクトは、次の表に示すようです。  
  
|TimeZoneInfo オブジェクトの種類|Kind プロパティ値|動作|  
|----------------------------|-----------------|--------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName>|<xref:System.DateTimeKind.Local?displayProperty=fullName> または <xref:System.DateTimeKind.Unspecified?displayProperty=fullName>|返します。 あいまいな時刻オフセット`dateTime`です。|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName>|<xref:System.DateTimeKind.Utc?displayProperty=fullName>|変換`dateTime`現地時刻、および、その時点のあいまいな時刻のオフセットを返します。|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=fullName>|任意の値。|スロー、<xref:System.ArgumentException>です。|  
|その他のタイム ゾーンの場合です。|<xref:System.DateTimeKind.Local> または <xref:System.DateTimeKind.Utc?displayProperty=fullName>|変換`dateTime`指定のタイム ゾーンに、その時刻があいまいかどうかを判断します。|  
|その他のタイム ゾーンの場合です。|<xref:System.DateTimeKind.Unspecified?displayProperty=fullName>|決定するかどうか`dateTime`が指定されたタイム ゾーンであいまいです。|  
  
 順序<xref:System.TimeSpan>このメソッドによって返される配列内のオブジェクトが定義されていません。 ただしを指定できますのどの要素では、タイム ゾーンの標準時間からのオフセットを表すタイム ゾーンのでは、その値を比較することによって<xref:System.TimeZoneInfo.BaseUtcOffset%2A>プロパティです。 あいまいな時刻をタイム ゾーンの標準時にマップするを参照してください。[How to: Resolve Ambiguous Times](http://msdn.microsoft.com/ja-jp/2cf5fb25-492c-4875-9245-98cac8348e97)です。  
  
   
  
## 例  
 次の例は、という名前のメソッドを定義`ShowPossibleUtcTimes`を使用して、<xref:System.TimeZoneInfo.GetAmbiguousTimeOffsets%28System.DateTime%29>あいまいな時刻をその考えられる対応する世界協定時刻 \(UTC\) 時刻にマップする方法です。  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#1)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#1)]  
  
 次のようなコードを使用して、メソッドを呼び出すことができます。  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#2)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateTime" /> はあいまいな時刻ではありません。</exception>
        <block subset="none" type="usage">
          <para>On [!INCLUDE[winxp](~/includes/winxp-md.md)] systems, this method applies only the current adjustment rule when determining whether <paramref name="dateTime" /> is ambiguous if the current instance is <see cref="P:System.TimeZoneInfo.Local" />. As a result, the method may not accurately report ambiguous time offsets for periods before the current adjustment rule came into effect. For more information, see the Notes for Callers section in the <see cref="P:System.TimeZoneInfo.Local" /> property.</para>
        </block>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
      </Docs>
    </Member>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">日付と時刻。</param>
        <summary>あいまいな日付と時刻を割り当て可能な、日付と時刻に関する情報を返します。</summary>
        <returns>特定の日付と時刻を割り当て可能な、世界協定時刻 \(UTC\) オフセットを表すオブジェクトの配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの正確な動作の間のリレーションシップに依存、 <xref:System.DateTimeOffset.Offset%2A> のプロパティ、 `dateTimeOffset` パラメーターおよび <xref:System.TimeZoneInfo> オブジェクトです。 場合の値、 <xref:System.DateTimeOffset.Offset%2A> プロパティに対応可能なオフセットの現在のタイム ゾーンの世界協定時刻 \(UTC\) からの日付と時刻、メソッドを返す可能なオフセットです。 それ以外の場合、変換 `dateTimeOffset` の現在のタイム ゾーンし、返す可能性のあるをオフセットするのに日付し、時刻にします。  
  
 順序 <xref:System.TimeSpan> このメソッドによって返される配列内のオブジェクトが定義されています。 ただしを指定できますのどの要素では、タイム ゾーンの標準時からのオフセットを表すタイム ゾーンのでは、その値を比較することによって <xref:System.TimeZoneInfo.BaseUtcOffset%2A> プロパティです。 あいまいな時刻をタイム ゾーンの標準時にマップするを参照してください。 [How to: Resolve Ambiguous Times](http://msdn.microsoft.com/ja-jp/2cf5fb25-492c-4875-9245-98cac8348e97)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateTimeOffset" /> はあいまいな時刻ではありません。</exception>
        <block subset="none" type="usage">
          <para>On [!INCLUDE[winxp](~/includes/winxp-md.md)] systems, this method applies only the current adjustment rule when determining whether <paramref name="dateTimeOffset" /> is ambiguous if the current instance is <see cref="P:System.TimeZoneInfo.Local" />. As a result, the method may not accurately report ambiguous time offsets for periods before the current adjustment rule came into effect. For more information, see the Notes for Callers section in the <see cref="P:System.TimeZoneInfo.Local" /> property.</para>
        </block>
        <altmember cref="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ハッシュ関数として機能し、ハッシュ アルゴリズムや、ハッシュ テーブルのようなデータ構造に使用されます。</summary>
        <returns>この <see cref="T:System.TimeZoneInfo" /> オブジェクトのハッシュ コードとして機能する 32 ビット符号付き整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 詳細については、 <xref:System.TimeZoneInfo.GetHashCode%2A> メソッドを参照してください <xref:System.Object.GetHashCode%2A>します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSystemTimeZones">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt; GetSystemTimeZones ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.TimeZoneInfo&gt; GetSystemTimeZones() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetSystemTimeZones" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.TimeZoneInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ローカル システムで情報を使用できるすべてのタイム ゾーンのコレクションを、並べ替えられた状態で返します。</summary>
        <returns>
          <see cref="T:System.TimeZoneInfo" /> オブジェクトの読み取り専用のコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.TimeZoneInfo.GetSystemTimeZones%2A>メソッドは、レジストリの hkey\_local\_machine NT\\CurrentVersion\\Time ゾーンのキーのサブキーからすべての利用可能なタイム ゾーン情報を取得します。 正常に取得し、個人の特定の文字列プロパティの値を解析できない場合<xref:System.TimeZoneInfo>オブジェクトをこのメソッドでは、その値を設定に空の文字列 \(""\) です。  
  
> [!IMPORTANT]
>  <xref:System.TimeZoneInfo.GetSystemTimeZones%2A>メソッドのコレクションを返します<xref:System.TimeZoneInfo>のみ、レジストリで定義されているタイム ゾーン オブジェクト。 オーバー ロードを使用して作成されたタイム ゾーンを含まない、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>メソッドです。 これらは、タイム ゾーンの作成方法によって返されたオブジェクト参照を通じてのみアクセスできます。  
  
 このメソッドによって返されるコレクションに並べ替えて UTC オフセットを同じの UTC オフセットを使用するタイム ゾーンの現在のカルチャを使用して、表示名。 表示名については、次を参照してください。<xref:System.TimeZoneInfo.DisplayName%2A>です。  
  
 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>このメソッドによって返されるオブジェクトをサポートしている、<xref:System.Collections.Generic.IEnumerable%601>ことができます反復処理を使用することを意味するインターフェイス、 `foreach` \(C\# の場合\) または`For Each…Next`\(Visual Basic\) のステートメント。 ループの各反復処理は、次へ<xref:System.TimeZoneInfo>コレクション内のオブジェクト。  
  
 コレクション<xref:System.TimeZoneInfo>オブジェクトは、ローカル コンピューターで定義されているタイム ゾーンを表す以外のすべての期間中にすべてのタイム ゾーンの完全なについてを必ずしも説明しません。 オーバー ロードを使用してカスタムのタイム ゾーンを作成する場合は、アプリケーションには、ローカル コンピューターで見つからなかったのタイム ゾーンが必要とすることができます、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>メソッドです。 詳細については、[How to: Create Time Zones Without Adjustment Rules](http://msdn.microsoft.com/ja-jp/a6af8647-7893-4f29-95a9-d94c65a6e8dd) および [How to: Create Time Zones with Adjustment Rules](http://msdn.microsoft.com/ja-jp/c52ef192-13a9-435f-8015-3b12eae8c47c) を参照してください。  
  
 呼び出すことによって、ローカル コンピューター上に個別のタイム ゾーンが定義されているかどうかを確認することも、<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>メソッドとパラメーターとして取得するタイム ゾーンの id を提供します。  
  
   
  
## 例  
 次の例では、コンピューターで定義されているタイム ゾーンを表すタイム ゾーン オブジェクトのコレクションを取得し、それらについての情報をテキスト ファイルに書き込みます。  
  
 [!code-csharp[System.TimeZone2.Class\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/getsystemtimezones1.cs#6)]
 [!code-vb[System.TimeZone2.Class\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/getsystemtimezones1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">すべてのタイム ゾーン情報を格納するにはメモリが不足しています。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、タイム ゾーン情報が含まれているレジストリ キーから読み取る権限がありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">オフセットの計算対象となる日付と時刻。</param>
        <summary>特定の日付と時刻について、このタイム ゾーンでの時刻と世界協定時刻 \(UTC\) とのオフセットまたは差を計算します。</summary>
        <returns>2 つのタイム ゾーンの時差を示すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 返される期間には、現在のタイム ゾーン調整規則の適用により、相違点が含まれています。 異なり、<xref:System.TimeZoneInfo.BaseUtcOffset%2A>プロパティでは、世界協定時刻 \(UTC\) とタイム ゾーンの標準時刻の差を返し、そのため、受け取らない調整規則を考慮します。  
  
 場合、`dateTime`パラメーターの<xref:System.DateTime.Kind%2A>プロパティは、タイム ゾーン オブジェクトに対応していない、このメソッドは、結果を返す前に、必要な変換を実行します。 たとえば、このことができる場合に発生する、<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind.Local?displayProperty=fullName>がタイム ゾーン オブジェクトは、ローカル タイム ゾーンではありません。 場合`dateTime`があいまい、または変換後の時刻があいまいな場合は、このメソッドは、標準時とあいまいな時刻を解釈します。 場合`dateTime`が無効、このメソッドが戻る、 <xref:System.TimeSpan> UTC とタイム ゾーンの標準時刻の違いを反映するオブジェクト。  
  
 <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29?displayProperty=fullName>メソッドは操作に似ています、<xref:System.TimeZone.GetUtcOffset%2A>のメソッド、<xref:System.TimeZone>クラスです。  
  
   
  
## 例  
 次の例では、使用、<xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29>メソッドが異なる日付値や異なるタイム ゾーンと<xref:System.DateTime.Kind%2A>プロパティの値。  
  
 [!code-csharp[System.TimeZone2.GetUtcOffset\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/cs/System.TimeZone2.GetUtcOffset.cs#1)]
 [!code-vb[System.TimeZone2.GetUtcOffset\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/vb/System.TimeZone2.GetUtcOffset.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>On [!INCLUDE[winxp](~/includes/winxp-md.md)] systems, this method applies only the current adjustment rule when calculating the offset from UTC if the current instance is <see cref="P:System.TimeZoneInfo.Local" />. As a result, the method may not accurately calculate the difference between the local time and UTC on <paramref name="dateTime" />. For more information, see the Notes for Callers section in the <see cref="P:System.TimeZoneInfo.Local" /> property.</para>
        </block>
        <altmember cref="P:System.TimeZoneInfo.BaseUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">オフセットの計算対象となる日付と時刻。</param>
        <summary>特定の日付と時刻について、このタイム ゾーンでの時刻と世界協定時刻 \(UTC\) とのオフセットまたは差を計算します。</summary>
        <returns>世界協定時刻 \(UTC\) と現在のタイム ゾーンとの時差を示すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 返される期間には、現在のタイム ゾーン調整規則の適用により、相違点が含まれています。 異なり、<xref:System.TimeZoneInfo.BaseUtcOffset%2A>プロパティでは、世界協定時刻 \(UTC\) とタイム ゾーンの標準時刻の差を返し、そのため、受け取らない調整規則を考慮します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>On [!INCLUDE[winxp](~/includes/winxp-md.md)] systems, this method applies only the current adjustment rule when calculating the offset from UTC if the current instance is <see cref="P:System.TimeZoneInfo.Local" />. As a result, the method may not accurately calculate the difference between the local time and UTC on <paramref name="dateTimeOffset" />. For more information, see the Notes for Callers section in the <see cref="P:System.TimeZoneInfo.Local" /> property.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="HasSameRules">
      <MemberSignature Language="C#" Value="public bool HasSameRules (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasSameRules(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.HasSameRules(System.TimeZoneInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="other">現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトと比較するもう 1 つのオブジェクト。</param>
        <summary>現在のオブジェクトと別の <see cref="T:System.TimeZoneInfo" /> オブジェクトが同じ調整規則を持っているかどうかを判断します。</summary>
        <returns>2 つのタイム ゾーンが同じ調整規則と同じベース オフセットを持っている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 同様に、 <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=fullName> 、メソッド、<xref:System.TimeZoneInfo.HasSameRules%2A>メソッドでは、次の 2 つのタイム ゾーンが同じベース オフセットを持っているかどうかを示します \(で定義されている、<xref:System.TimeZoneInfo.BaseUtcOffset%2A>プロパティ\) と同じ調整規則です。 異なり、<xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=fullName>メソッド、<xref:System.TimeZoneInfo.HasSameRules%2A>タイム ゾーン id は比較されません \(で定義されている、<xref:System.TimeZoneInfo.Id%2A>プロパティ\)。  
  
   
  
## 例  
 通常、レジストリで定義されているタイム ゾーンの数は、世界協定時刻 \(UTC\) と同じ調整規則から同じオフセットを持ってます。 次の例では、コンソールにこのタイム ゾーンの一覧を表示します。  
  
 [!code-csharp[System.TimeZone2.HasSameRules\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/cs/HasSameRules.cs#1)]
 [!code-vb[System.TimeZone2.HasSameRules\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/vb/HasSameRules.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="other" /> パラメーターが <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>タイム ゾーン ID を取得します。</summary>
        <value>タイム ゾーン ID。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 タイム ゾーン id は、特定のタイム ゾーンを一意に識別するキーの文字列です。 Windows XP および Windows Vista では、レジストリの hkey\_local\_machine NT\\CurrentVersion\\Time ゾーンのブランチのサブキーに対応しています。 パラメーターとして渡すことによって、<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>レジストリから特定のタイム ゾーンを取得します。  
  
> [!IMPORTANT]
>  Windows レジストリのキー名できますが、255 文字の最大 32 文字以内に、カスタム タイム ゾーンに割り当てられる識別子があることをお勧めします。 識別子が長いほど、不適切なキー名となる可能性が高く、取得するときに指定します。  
  
 値、<xref:System.TimeZoneInfo.Id%2A>プロパティは、通常、常にではなくのものと同じ、<xref:System.TimeZoneInfo.StandardName%2A>プロパティです。 協定のタイム ゾーンの id は、UTC です。  
  
   
  
## 例  
 次の例では、ローカル コンピューターで定義されているタイム ゾーンのそれぞれの識別子が表示されます。  
  
 [!code-csharp[System.TimeZone2.Class\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#5)]
 [!code-vb[System.TimeZone2.Class\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">日付と時刻の値。</param>
        <summary>特定のタイム ゾーンの特定の日付と時刻があいまいかどうか、および複数の世界協定時刻 \(UTC\) に割り当て可能かどうかを判断します。</summary>
        <returns>
          <see langword="true" /> パラメーターがあいまいな場合は <paramref name="dateTime" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 あいまいな時刻は、現在のタイム ゾーンの時間の範囲内にあります。 つまり、標準時または調整規則の適用に起因する時間のいずれかであることができます。 通常、あいまいな時刻は、クロックが夏時間から標準時へ戻るに設定されているときに発生します。 図の例のセクションを参照してください。  
  
 世界協定時刻 \(UTC\) には、あいまいな時刻がありません。ゾーンが夏時間をサポートしていない時間をどちらもしないでください。 そのため、このタイム ゾーンがあるない調整規則と呼び出しを<xref:System.TimeZoneInfo.IsAmbiguousTime%2A>メソッドの戻り値を常に`false`です。  
  
 夏時間タイム ゾーンの場合は、このメソッドの動作の詳細関係に応じて決まります間、<xref:System.DateTime.Kind%2A>プロパティおよび<xref:System.TimeZoneInfo>オブジェクトは、次の表に示すようです。  
  
|TimeZoneInfo オブジェクトの種類|Kind プロパティ値|動作|  
|----------------------------|-----------------|--------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName>|<xref:System.DateTimeKind.Local?displayProperty=fullName> または <xref:System.DateTimeKind.Unspecified?displayProperty=fullName>|指定するかどうか、`dateTime`パラメーターがあいまいです。|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName>|<xref:System.DateTimeKind.Utc?displayProperty=fullName>|変換`dateTime`のローカル時刻に、その時刻があいまいかどうかを判断します。|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=fullName>|<xref:System.DateTimeKind.Utc?displayProperty=fullName> または <xref:System.DateTimeKind.Unspecified?displayProperty=fullName>|`false` を返します。|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=fullName>|<xref:System.DateTimeKind.Local?displayProperty=fullName>|場合`dateTime`があいまいなを標準時に、UTC に変換し、返します`false`です。|  
|その他のタイム ゾーンの場合です。|<xref:System.DateTimeKind.Local?displayProperty=fullName> または <xref:System.DateTimeKind.Utc?displayProperty=fullName>|変換`dateTime`指定されたタイム ゾーンの時刻に、その時刻があいまいかどうかを判断します。|  
|その他のタイム ゾーンの場合です。|<xref:System.DateTimeKind.Unspecified?displayProperty=fullName>|指定するかどうか`dateTime`があいまいです。|  
  
   
  
## 例  
 太平洋標準時ゾーンの夏時間の期間は、2007 年 11 月 4 日午前 2 時に終了します。 次の例は、2007 年 11 月 4 日の午前 2時 01分を 2007 年 11 月 4 日の午前 12時 59分を 1 分間隔に、<xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29>のメソッド、<xref:System.TimeZoneInfo>太平洋標準時ゾーンを表すオブジェクト。 コンソール出力は、2007 年 11 月 4 日午前 1 時から 2007 年 11 月 4 日午前 1時 59分までのすべての時刻があいまいであることを示します。  
  
 [!code-csharp[System.TimeZone2.Class\#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#8)]
 [!code-vb[System.TimeZone2.Class\#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateTime" /> 値の <see cref="P:System.DateTime.Kind" /> プロパティは <see cref="F:System.DateTimeKind.Local" /> で、<paramref name="dateTime" /> は無効な時刻です。</exception>
        <block subset="none" type="usage">
          <para>On [!INCLUDE[winxp](~/includes/winxp-md.md)] systems, this method applies only the current adjustment rule if the current instance is <see cref="P:System.TimeZoneInfo.Local" />. As a result, the method may not accurately report whether <paramref name="dateTime" /> is an ambiguous time for periods before the current adjustment rule came into effect. For more information, see the Notes for Callers section in the <see cref="P:System.TimeZoneInfo.Local" /> property.</para>
        </block>
        <altmember cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">日付と時刻。</param>
        <summary>特定のタイム ゾーンの特定の日付と時刻があいまいかどうか、および複数の世界協定時刻 \(UTC\) に割り当て可能かどうかを判断します。</summary>
        <returns>
          <paramref name="dateTimeOffset" /> パラメーターが現在のタイム ゾーンであいまいな場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 あいまいな時刻は、現在のタイム ゾーンの時間範囲内であります。 これは、標準時または調整規則の適用に起因する時間のいずれかのどちらをできることを意味します。 通常は、クロックが夏時間から標準時に戻るに設定されている場合に、あいまいな時刻があります。 世界協定時刻 \(UTC\) には、あいまいな時刻がありません。ゾーンが夏時間をサポートしていない時間をどちらも操作を行います。  
  
 メソッドの正確な動作の間のリレーションシップに依存、 <xref:System.DateTimeOffset.Offset%2A> のプロパティ、 `dateTimeOffset` パラメーターと現在のタイム ゾーン。 場合の値、 <xref:System.DateTimeOffset.Offset%2A> プロパティが現在のタイム ゾーンの UTC からのオフセット可能の場合、メソッドを決定するかどうかは、日付し、時刻があいまいです。 それ以外の場合、変換 `dateTimeOffset` を現在のタイム ゾーンの時刻を判断するかどうかは、日付し、時刻があいまいです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>On [!INCLUDE[winxp](~/includes/winxp-md.md)] systems, this method applies only the current adjustment rule if the current instance is <see cref="P:System.TimeZoneInfo.Local" />. As a result, the method may not accurately report whether <paramref name="dateTimeOffset" /> is an ambiguous time for periods before the current adjustment rule came into effect. For more information, see the Notes for Callers section in the <see cref="P:System.TimeZoneInfo.Local" /> property.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">日付と時刻の値。</param>
        <summary>指定された日付と時刻が、現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトのタイム ゾーンの夏時間範囲内かどうかを示します。</summary>
        <returns>
          <paramref name="dateTime" /> パラメーターが夏時間の範囲内の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 戻り値<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=fullName>によって表されるタイム ゾーンの間のリレーションシップの影響を受けるの<xref:System.TimeZoneInfo>オブジェクトおよび<xref:System.DateTime.Kind%2A>のプロパティの`dateTime`パラメーターは、次の表に示すようです。  
  
|TimeZoneInfo オブジェクト|DateTime.Kind プロパティ|結果|  
|-------------------------|-------------------------|--------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName>|`DateTimeKind.Local`|決定かどうか`dateTime`夏時間がします。|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName>|`DateTimeKind.Utc`|変換します`dateTime`世界協定時刻 \(UTC\) から現地時刻にし、夏時間であるかどうかを決定します。|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName>|`DateTimeKind.Unspecified`|いるものと`dateTime`ローカル時刻を表し、夏時間であるかどうかを決定します。|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=fullName>|`DateTimeKind.Local`、`DateTimeKind.Unspecified`、または `DateTimeKind.Utc`|返します`false`\(UTC は夏時間をサポートしていません\)。|  
|その他の<xref:System.TimeZoneInfo>オブジェクト。|`DateTimeKind.Local`|ローカル時刻の同等の時刻に変換、<xref:System.TimeZoneInfo>オブジェクトおよび後者が夏時間をするかどうかを決定します。|  
|その他の<xref:System.TimeZoneInfo>オブジェクト。|`DateTimeKind.Utc`|同等の時刻を UTC に変換します、<xref:System.TimeZoneInfo>オブジェクトおよび後者が夏時間をするかどうかを決定します。|  
|その他の<xref:System.TimeZoneInfo>オブジェクト。|`DateTimeKind.Unspecified`|決定かどうか`dateTime`夏時間がします。|  
  
 タイム ゾーンがによって表される場合、<xref:System.TimeZoneInfo>オブジェクトが夏時間をサポートしていない常に返します`false`です。 さまざまなタイム ゾーンを含む<xref:System.TimeZoneInfo.Utc%2A>夏時間は発生しません。  タイム ゾーンが夏時間をサポートするかどうかを決定するには、値の取得、<xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>プロパティです。  
  
 場合の`dateTime`パラメーターは、現在のオブジェクトのタイム ゾーンであいまいな時刻を指定します<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=fullName>メソッドでは、解釈`dateTime`標準時として返す`false`場合その<xref:System.DateTime.Kind%2A>プロパティは、<xref:System.DateTimeKind.Local?displayProperty=fullName>または<xref:System.DateTimeKind.Unspecified?displayProperty=fullName>です。 場合、<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind.Utc?displayProperty=fullName>、このメソッドは正しいあいまいな時刻を選択し、夏時間であるかどうかを示します。  
  
 <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29?displayProperty=fullName>メソッドが返すことができます`false`の日付と時刻があいまいになっている \(つまり、日付と時刻標準時または特定のタイム ゾーンの夏時間のいずれかを表すことができる\)、<xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29?displayProperty=fullName>とメソッドのペアを設定できる、<xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29>時刻が夏時間をする可能性があるかどうかを調べます。 あいまいな時刻は夏時間と標準時の両方であるため、<xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29>日付と時刻が夏時間にすることがあるかどうかを決定するメソッドを最初に呼び出すことができます。 メソッドを返す場合`false`、<xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29>を決定するメソッドを呼び出すことができるかどうか、<xref:System.DateTime>値は、夏時間です。 次の例では、この方法を示します。  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#2)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#2)]  
  
 場合、`dateTime`パラメーターが無効な時刻を指定します、メソッドの呼び出しをスロー、<xref:System.ArgumentException>場合の値、`dateTime`パラメーターの<xref:System.DateTime.Kind%2A>プロパティが<xref:System.DateTimeKind.Local?displayProperty=fullName>です。 それ以外の場合、メソッドを返します`false`です。  
  
 呼び出しの<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=fullName>タイム ゾーンを使用するかどうかを調べます<xref:System.TimeZoneInfo.StandardName%2A>値またはその<xref:System.TimeZoneInfo.DaylightName%2A>値のタイム ゾーンの名前を表示するときにします。 図の例のセクションを参照してください。  
  
   
  
## 例  
 次の例は、という名前のメソッドを定義`DisplayDateWithTimeZoneName`を使用して、<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=fullName>タイム ゾーンの標準時名や夏時間名を表示するかどうかを調べます。  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateTime" /> 値の <see cref="P:System.DateTime.Kind" /> プロパティは <see cref="F:System.DateTimeKind.Local" /> で、<paramref name="dateTime" /> は無効な時刻です。</exception>
        <block subset="none" type="usage">
          <para>On [!INCLUDE[winxp](~/includes/winxp-md.md)] systems, this method applies only the current adjustment rule if the current instance is <see cref="P:System.TimeZoneInfo.Local" />. As a result, the method may not accurately report whether <paramref name="dateTime" /> is a daylight saving time for periods before the current adjustment rule came into effect. For more information, see the Notes for Callers section in the <see cref="P:System.TimeZoneInfo.Local" /> property.</para>
        </block>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">日付と時刻の値。</param>
        <summary>指定された日付と時刻が、現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトのタイム ゾーンの夏時間範囲内かどうかを示します。</summary>
        <returns>
          <paramref name="dateTimeOffset" /> パラメーターが夏時間の範囲内の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 戻り値<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=fullName>によって表されるタイム ゾーンの間のリレーションシップの影響を受ける、<xref:System.TimeZoneInfo>オブジェクトおよび<xref:System.DateTimeOffset.Offset%2A>のプロパティ、`dateTimeOffset`パラメーター。 場合`dateTimeOffset`に対応していない現在のタイム ゾーンのオフセット世界協定時刻 \(UTC\) から現在のタイム ゾーンの時刻を時刻のメソッドに変換します。 日付し、時刻をかどうかが夏時間を確認します。  
  
 タイム ゾーンがによって表される場合、<xref:System.TimeZoneInfo>オブジェクトでは、夏時間をサポートしていない、常に返します`false`です。 タイム ゾーンが夏時間をサポートするかどうかを決定するには、値の取得、<xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>プロパティです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>On [!INCLUDE[winxp](~/includes/winxp-md.md)] systems, this method applies only the current adjustment rule if the current instance is <see cref="P:System.TimeZoneInfo.Local" />. As a result, the method may not accurately report whether <paramref name="dateTimeOffset" /> is a daylight saving time for periods before the current adjustment rule came into effect. For more information, see the Notes for Callers section in the <see cref="P:System.TimeZoneInfo.Local" /> property.</para>
        </block>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsInvalidTime">
      <MemberSignature Language="C#" Value="public bool IsInvalidTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsInvalidTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">日付と時刻の値。</param>
        <summary>指定された日付と時刻が無効かどうかを示します。</summary>
        <returns>
          <paramref name="dateTime" /> が無効の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 無効な時間は、現在のタイム ゾーン調整規則の適用によりを世界協定時刻 \(UTC\) をマップできない時間の範囲内にあります。 通常、時刻は夏時間の前方に移動したときに、無効な時刻が発生します。 図の例のセクションを参照してください。  
  
 値、<xref:System.DateTime.Kind%2A>のプロパティ、`dateTime`パラメーターに影響するかどうか`dateTime`として次の表は、無効な時刻を表します。  
  
|DateTime.Kind プロパティ|TimeZoneInfo オブジェクト \(該当する場合\)|動作|  
|-------------------------|------------------------------------|--------|  
|<xref:System.DateTimeKind.Local?displayProperty=fullName>|<xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName>|時間が無効かどうかを判断します。|  
|<xref:System.DateTimeKind.Local?displayProperty=fullName>|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=fullName>または、ローカル以外のタイム ゾーン。|変換`dateTime`の時刻、<xref:System.TimeZoneInfo>オブジェクトを返す`false`です。|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=fullName>|該当なし。|前提としています`dateTime`の時間、<xref:System.TimeZoneInfo>オブジェクトし、が正しくないかどうかを決定します。|  
|<xref:System.DateTimeKind.Utc?displayProperty=fullName>|該当なし。|`false` を返します。|  
  
   
  
## 例  
 太平洋標準時ゾーンの夏時間の期間は、2006 年 4 月 2 日午前 2 時に開始します。 次のコードは、2006 年 4 月 2 日午前 3 時 01 2006 年 4 月 2 日午前 1時 59分から 1 分間隔に、<xref:System.TimeZoneInfo.IsInvalidTime%2A>のメソッド、<xref:System.TimeZoneInfo>太平洋標準時ゾーンを表すオブジェクト。 コンソール出力は、2006 年 4 月 2 日午前 2 時から 2006 年 4 月 2 日午前 2時 59分までのすべての時刻が無効であることを示します。  
  
 [!code-csharp[System.TimeZone2.Class\#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#9)]
 [!code-vb[System.TimeZone2.Class\#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#9)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>On [!INCLUDE[winxp](~/includes/winxp-md.md)] systems, this method applies only the adjustment rule if the current instance is <see cref="P:System.TimeZoneInfo.Local" />. As a result, the method may not accurately report whether <paramref name="dateTime" /> is an invalid time for periods before the current adjustment rule came into effect. For more information, see the Notes for Callers section in the <see cref="P:System.TimeZoneInfo.Local" /> property.</para>
        </block>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
      </Docs>
    </Member>
    <Member MemberName="Local">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Local { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Local" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Local" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ローカル タイム ゾーンを表す <see cref="T:System.TimeZoneInfo" /> オブジェクトを取得します。</summary>
        <value>ローカル タイム ゾーンを表すオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ローカル タイム ゾーンは、コードを実行しているコンピューターのタイム ゾーンです。  
  
> [!IMPORTANT]
>  を介して、ローカル タイム ゾーンを常にアクセスする必要があります、<xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName>にゾーンのローカル時刻を割り当てではなく、プロパティ、<xref:System.TimeZoneInfo>オブジェクト変数です。 これにより、<xref:System.TimeZoneInfo>オブジェクト変数への呼び出しによって無効にされてから、<xref:System.TimeZoneInfo.ClearCachedData%2A>メソッドです。  
  
 <xref:System.TimeZoneInfo>によって返されるオブジェクト、<xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName>プロパティの設定に反映されます、**夏時間用の時計を自動的に調整** チェック ボックスまたは**夏時間の時計を自動的に調整**コントロール パネル のチェック ボックスを**日付と時刻**アプリケーションを Windows XP および Windows Vista では、それぞれします。 チェック ボックスがオフになって、ローカル タイム ゾーンのキャッシュされたコピーが含まれていない夏時間情報には。 これによって、次のことが起こります。  
  
-   ローカル タイム ゾーンの<xref:System.TimeZoneInfo.GetAdjustmentRules%2A>メソッドの長さが 0 の配列を返します。  
  
-   ローカル タイム ゾーンの<xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>プロパティから返される`false`です。  
  
-   ローカル タイム ゾーンがあいまいであるか無効な時間を持たない \(すべての呼び出しを<xref:System.TimeZoneInfo.IsAmbiguousTime%2A>または<xref:System.TimeZoneInfo.IsInvalidTime%2A>返す`false`\)。  
  
-   すべての呼び出しを<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A>の個々 のローカル時刻に false を返します。  
  
 これは該当しません、ただしを使用して、ローカル タイム ゾーンへの参照が取得される場合、<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>メソッドです。  
  
 <xref:System.TimeZoneInfo.Local%2A>プロパティに対応して、<xref:System.TimeZone.CurrentTimeZone%2A>のプロパティ、<xref:System.TimeZone>クラスです。  
  
   
  
## 例  
 次の例では取得、<xref:System.TimeZoneInfo>ローカル タイム ゾーンを表し、その表示名、標準時名、および夏時間名を出力するオブジェクト。  
  
 [!code-csharp[System.TimeZone2.Class\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>In converting dates and times, [!INCLUDE[winxp](~/includes/winxp-md.md)] recognizes only the current adjustment rule, which it applies to all dates, including down-level dates (that is, dates that are earlier than the starting date of the current adjustment rule). On [!INCLUDE[winxp](~/includes/winxp-md.md)], to prevent local date and time information provided by the <see cref="P:System.TimeZoneInfo.Local" /> object from diverging from the date and time information displayed in the system tray, the <see cref="T:System.TimeZoneInfo" /> object returned by the <see cref="P:System.TimeZoneInfo.Local" /> property also applies the current adjustment rule to down-level dates. Applications running on [!INCLUDE[winxp](~/includes/winxp-md.md)] that require historically accurate local date and time calculations must work around this behavior by using the <see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" /> method to retrieve a <see cref="T:System.TimeZoneInfo" /> object that corresponds to the local time zone.  
  
 The following example provides an illustration for a [!INCLUDE[winxp](~/includes/winxp-md.md)] system in the U.S. Pacific Time zone. Because the first three method calls all use the local time zone returned by the <see cref="P:System.TimeZoneInfo.Local" /> property, they apply the current time zone adjustment rule (which went into effect in 2007) to a date in 2006. The current adjustment rule provides for the transition to daylight saving time to occur on the second Sunday of March; the previous rule, which was in effect in 2006, provided for the transition to daylight saving time to occur on the first Sunday of April. Only the fourth method call, which uses the <see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" /> method to retrieve the local time zone, accurately performs this historical date and time conversion.  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTimeToUtc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttimetoutc/cs/converttimetoutc.cs#1)]
 [!code-vb[System.TimeZoneInfo.ConvertTimeToUtc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttimetoutc/vb/converttimetoutc.vb#1)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="StandardName">
      <MemberSignature Language="C#" Value="public string StandardName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StandardName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.StandardName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>タイム ゾーンの標準時の表示名を取得します。</summary>
        <value>タイム ゾーンの標準時間の表示名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 表示名は、Windows オペレーティング システムと共にインストールされたカルチャに基づくローカライズされます。  
  
 <xref:System.TimeZoneInfo.StandardName%2A>プロパティと同じ、<xref:System.TimeZone.StandardName%2A>のプロパティ、<xref:System.TimeZone>クラスです。  
  
 オペレーティング システムの言語が英語での値は<xref:System.TimeZoneInfo.StandardName%2A>プロパティは、通常、常にではなくのものと同じ、<xref:System.TimeZoneInfo.Id%2A>プロパティです。  
  
   
  
## 例  
 次の例は、という名前のメソッドを定義`DisplayDateWithTimeZoneName`を使用して、<xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29>タイム ゾーンの標準時名や夏時間名を表示するかどうかを調べます。  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool SupportsDaylightSavingTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsDaylightSavingTime" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>タイム ゾーンに夏時間規則があるかどうかを示す値を取得します。</summary>
        <value>タイム ゾーンが夏時間をサポートする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値、<xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>プロパティによって返されるローカル タイム ゾーンを<xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName>プロパティは、コントロール パネルの設定を反映**日付と時刻**システムが自動的に夏時間の調整するかどうかを定義するアプリケーションのチェック ボックスです。 かどうかは、オフ、またはこのプロパティの値は、チェック ボックスが表示されない場合のタイム ゾーンの`false`です。  
  
   
  
## 例  
 次の例では、ローカル システムで使用可能なすべてのタイム ゾーンのコレクションを取得し、夏時間をサポートしないものの名前を表示します。  
  
 [!code-csharp[System.TimeZone2.Class\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#4)]
 [!code-vb[System.TimeZone2.Class\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">コールバックを開始したオブジェクト。 このパラメーターの機能は、現在実装されていません。</param>
        <summary>オブジェクトの逆シリアル化の完了後に実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.Runtime.Serialization.SerializationException">
          <see cref="T:System.TimeZoneInfo" /> オブジェクトには、無効なデータまたは破損したデータが含まれています。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">データを読み込む先の <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
        <param name="context">このシリアル化のシリアル化先 \(<see cref="T:System.Runtime.Serialization.StreamingContext" /> を参照\)。</param>
        <summary>
          <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトに、現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトをシリアル化するために必要なすべてのデータを格納します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="info" /> パラメーターが <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="ToSerializedString">
      <MemberSignature Language="C#" Value="public string ToSerializedString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToSerializedString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToSerializedString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトをシリアル化された文字列に変換します。</summary>
        <returns>現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトを表す文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 通常、Windows システムのレジストリで定義されていないタイム ゾーンに依存するアプリケーションを使用できます、<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>として必要なタイム ゾーンをインスタンス化するメソッド<xref:System.TimeZoneInfo>オブジェクト。 アプリケーションが呼び出すことができますし、<xref:System.TimeZoneInfo.ToSerializedString%2A>タイム ゾーン オブジェクトを文字列に変換します。  
  
 <xref:System.TimeZoneInfo>オブジェクトは、ここで、アプリケーションが取得できるために必要なときに、場所にも格納する必要があります。 可能な場所は次のとおりです。  
  
-   レジストリです。  
  
-   アプリケーション リソース ファイル。  
  
-   外部ファイル、テキスト ファイルなどです。  
  
   
  
## 例  
 次の例が、\/南極を取得しようとしています。 ローカル システムからのタイム ゾーン。 失敗した場合、コードは、アプリケーション ディレクトリ内のテキスト ファイルからタイム ゾーンに関する情報を取得しようとします。 この試行が失敗した場合、コードはタイム ゾーンを作成し、それに関する情報をテキスト ファイルに書き込みます。  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトの表示名を返します。</summary>
        <returns>現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトの <see cref="P:System.TimeZoneInfo.DisplayName" /> プロパティの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コレクションの割り当てが含まれる場合 <xref:System.TimeZoneInfo> などのリスト コントロールにオブジェクト、 <xref:System.Windows.Forms.ListBox> コントロール、コントロールに自動的には、 <xref:System.TimeZoneInfo.ToString%2A> 一覧に表示される各オブジェクトを表す文字列を抽出するメソッドです。 その結果を文字列として、オブジェクトのわかりやすい説明を格納する必要はありませんし、ユーザーはその文字列を使用してコレクションからオブジェクトを抽出する必要はありません。 参照してください [How to: Enumerate Time Zones Present on a Computer](http://msdn.microsoft.com/ja-jp/bb7a42ab-6bd9-4c5c-b734-5546d51f8669) 詳細です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Utc">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Utc { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Utc" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Utc" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>世界協定時刻 \(UTC\) ゾーンを表す <see cref="T:System.TimeZoneInfo" /> オブジェクトを取得します。</summary>
        <value>世界協定時刻 \(UTC\) ゾーンを表すオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、組み込みオブジェクトです。このについて <xref:System.TimeZoneInfo> オブジェクトは、レジストリから取得されません。  
  
> [!IMPORTANT]
>  使用して、世界協定時刻 \(UTC\) ゾーンにアクセスする、 <xref:System.TimeZoneInfo.Utc%2A?displayProperty=fullName> に UTC タイム ゾーンを割り当てるのではなく、プロパティ、 <xref:System.TimeZoneInfo> オブジェクト変数です。 これにより、 <xref:System.TimeZoneInfo> オブジェクト変数への呼び出しで、 <xref:System.TimeZoneInfo.ClearCachedData%2A> メソッドです。  
  
 世界協定時刻については、以前のグリニッジ標準時 \(GMT\) と呼ばれていました。  
  
   
  
## 例  
 次の例では取得、 <xref:System.TimeZoneInfo> 世界協定時刻 \(UTC\) を表し、その表示名、標準時名、および夏時間名を出力するオブジェクト。  
  
 [!code-csharp[System.TimeZone2.Class\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#3)]
 [!code-vb[System.TimeZone2.Class\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>2 つの <see cref="T:System.TimeZoneInfo" /> オブジェクトが等しいかどうかを判断します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetAmbiguousTimeOffsets">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>あいまいな日付と時刻を割り当て可能な、日付と時刻に関する情報を返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="CreateCustomTimeZone">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ローカル コンピューターにないタイム ゾーンを定義します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ConvertTimeBySystemTimeZoneId">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ある時刻をタイム ゾーン ID に基づいて別のタイム ゾーンの時刻に変換します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="IsAmbiguousTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>特定のタイム ゾーンの特定の日付と時刻があいまいかどうか、および複数の世界協定時刻 \(UTC\) に割り当て可能かどうかを判断します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="IsDaylightSavingTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された日付と時刻が、現在の <see cref="T:System.TimeZoneInfo" /> オブジェクトのタイム ゾーンの夏時間の範囲内かどうかを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ConvertTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>時刻を特定のタイム ゾーンの時刻に変換します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetUtcOffset">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>特定の日付と時刻について、このタイム ゾーンでの時刻と世界協定時刻 \(UTC\) とのオフセットまたは差を計算します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ConvertTimeToUtc">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>日付と時刻を世界協定時刻 \(UTC\) に変換します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>