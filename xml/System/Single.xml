<Type Name="Single" FullName="System.Single">
  <TypeSignature Language="C#" Value="public struct Single : IComparable, IComparable&lt;float&gt;, IConvertible, IEquatable&lt;float&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit float32 extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;float32&gt;, class System.IConvertible, class System.IEquatable`1&lt;float32&gt;, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Single" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.Single&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Single&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>単精度浮動小数点数を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Single> 値型は、正または負のゼロと同様に正の 3.402823 e 38 ~\-3.402823e38 から範囲の値を単精度 32 ビット数を表します <xref:System.Single.PositiveInfinity>, 、<xref:System.Single.NegativeInfinity>, 、および非数 \(<xref:System.Single.NaN>\)。 値 \(惑星または銀河系間の距離\) などの大きい、または \(に物質の分子質量\) などの非常に小さなと多くの場合ではない \(地球から別の太陽系までの距離\) などの正確な値を表すものでは。<xref:System.Single> 型が、IEC 60559: 1989 \(IEEE 754\) バイナリ浮動小数点演算の標準に準拠しています。  
  
 このトピックは、次のセクションで構成されています。  
  
-   [浮動小数点表現と有効桁数](#Precision)  
  
-   [等価性テスト](#Equality)  
  
-   [浮動小数点値と例外](#Exceptions)  
  
-   [型変換と 1 つの構造](#Conversion)  
  
-   [浮動小数点の機能](#Functionality)  
  
 <xref:System.Single?displayProperty=fullName> インスタンスの値をその文字列形式に変換して、数値の文字列形式をこの型のインスタンスに変換するこの型のインスタンスを比較するメソッドを提供します。 書式指定コードが値型の文字列形式を制御する方法については、次を参照してください。 [Formatting Types in the .NET Framework](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f), 、[Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467), 、および [Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4)です。  
  
<a name="Precision"></a>   
## 浮動小数点表現と有効桁数  
 <xref:System.Single> データ型は、次の表に示すように 32 ビットのバイナリ形式で単精度浮動小数点値を格納します。  
  
|パーツ|ビット|  
|---------|---------|  
|有効桁または仮数部|0\-22|  
|指数|23\-30|  
|記号 \(0 \= 1、正の数値 \= 負の値\)|31|  
  
 小数値は、いくつかの小数部の値を正確に表すことができないのと同様 \(1\/3 などまたは <xref:System.Math.PI?displayProperty=fullName>\)、バイナリの分数はいくつかの小数部の値を表すことができません。 たとえば、2\/10、10 進数の比率として.2 によって正確に表されるは無限にパターン「1100」繰り返しの進小数として.0011111001001100 によって表されます。 この場合、浮動小数点の値は、それが表す番号の不正確な表現を提供します。 多くの場合、元の浮動小数点値で追加の数学演算を実行すると、その有効桁数が不足しているが増加します。 たとえば、.3 で 10 を乗算した結果を比較すると、.3 に.3 を 9 回追加すると、追加したが表示されます結果を生成する精度の低い、乗算よりもより多くの 8 つの操作が含まれているためです。 このような違いが明らかなは、2 つを表示する場合にのみことに注意してください <xref:System.Single> "R"を使用して値 [標準数値書式指定文字列](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467), 、これは、必要に応じてがすべて 9 桁でサポートされている有効桁数を表示するかどうか、 <xref:System.Single> 型です。  
  
 [!code-csharp[System.Single.Structure\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/representation1.cs#3)]
 [!code-vb[System.Single.Structure\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/representation1.vb#3)]  
  
 いくつかの数字は、小数部のバイナリ値として正確に表すことができない、ため浮動小数点数には実際の数値およそことができます。  
  
 すべての浮動小数点数も浮動小数点値が実数を概算する方法を決定する限られた数の有効桁数があります。 A <xref:System.Single> 最大 9 桁が内部的に保持されて、値が最大 7 桁の有効桁数、します。 これは、浮動小数点演算の精度浮動小数点値を変更することがありますがないことを意味します。 次の例は、大規模な単精度浮動小数点値を定義しの製品を追加 <xref:System.Single.Epsilon?displayProperty=fullName> と 1,000兆にします。 ただし、製品は、元の浮動小数点値を変更するには小さすぎます。 最下位の桁は 1\/10、1\/100、1\/1000、製品内の最上位の添字は 1<sup>-312</sup>します。  
  
 [!code-csharp[System.Single.Structure\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/representation2.cs#4)]
 [!code-vb[System.Single.Structure\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/representation2.vb#4)]  
  
 浮動小数点数の制限された有効桁数には、いくつかのような影響があります。  
  
-   特定の有効桁数で等しく見える 2 つの浮動小数点数は有効桁数が異なると同じにする場合があります比較されません。 次の例では、一連の数字を加算し、その合計がその期待される合計と比較します。 2 つの値は同じであるへの呼び出しに見えますが、 `Equals` メソッドであることを示します。  
  
     [!code-csharp[System.Single.Structure\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/precisionlist3.cs#6)]
     [!code-vb[System.Single.Structure\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/precisionlist3.vb#6)]  
  
     書式項目を変更する場合、 <xref:System.Console.WriteLine%28System.String%2CSystem.Object%2CSystem.Object%29?displayProperty=fullName> ステートメントから `{0}` と `{1}` に `{0:R}` と `{1:R}` 、2 つのすべての有効桁数を表示する <xref:System.Single> 値、2 つの値が等しくないことの有効桁数が失われたのため、追加の操作では明らかです。 呼び出してこの場合、この問題を解決できます、 <xref:System.Math.Round%28System.Double%2CSystem.Int32%29?displayProperty=fullName> 丸めるメソッド、 <xref:System.Single> 値を比較を実行する前に必要な桁数です。  
  
-   浮動小数点数を使用する数学的演算または比較操作が生成されない結果は同じ 10 進数が使用されている場合バイナリ浮動小数点数が 10 進数と等しくないためです。 前の例では、.3 で 10 を乗算することと、.3 に.3 9 回の追加の結果を表示することによってこれを示します。  
  
     小数部の値を持つ数値演算の精度が重要なを使用して、 <xref:System.Decimal> 型の代わりに、 <xref:System.Single> 型です。 時の範囲外の整数の値を持つ数値演算の精度、 <xref:System.Int64> または <xref:System.UInt64> 使用の種類は重要では、 <xref:System.Numerics.BigInteger> 型です。  
  
-   値には、浮動小数点数が含まれている場合リップに失敗の可能性があります。 値は、操作を元の浮動小数点数を別の形式に変換すると逆の操作が浮動小数点数に変換されたフォームを変換し、最終的な浮動小数点数が元の浮動小数点数と等しい場合に、ラウンドト リップさせると言われます。 ラウンド トリップは、1 つまたは複数の最下位の桁が失われたか、変換で変更されたために失敗する可能性があります。 次の例では、次の 3 つ <xref:System.Single> 値が文字列に変換され、ファイルに保存します。 出力を値と同一であるように見えますが、復元された値は元の値と同じではありません。  
  
     [!code-csharp[System.Single.Structure\#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/precisionlist4a.cs#17)]
     [!code-vb[System.Single.Structure\#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/PrecisionList4a.vb#17)]  
  
     この場合、値を指定できますが正常に往復"R"を使用して、 [標準数値書式指定文字列](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467) の最大精度を保持するために <xref:System.Single> 値は、次の例のようにです。  
  
     [!code-csharp[System.Single.Structure\#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/PrecisionList5a.cs#18)]
     [!code-vb[System.Single.Structure\#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/PrecisionList5a.vb#18)]  
  
-   <xref:System.Single> 値があるよりも精度が低い <xref:System.Double> 値。 A <xref:System.Single> 一見同等に変換される値 <xref:System.Double> 多くの場合と等しくない、 <xref:System.Double> 値の精度が異なるのためです。 次の例では、同一の除算演算の結果が割り当てられている、 <xref:System.Double> 値と <xref:System.Single> 値。 後に、 <xref:System.Single> にキャストされた値、 <xref:System.Double>, 、2 つの値の比較は、それらが等しくないことを示しています。  
  
     [!code-csharp[System.Double.Structure\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/precisionlist1.cs#5)]
     [!code-vb[System.Double.Structure\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/precisionlist1.vb#5)]  
  
     この問題を避けるためには、使用するか、 <xref:System.Double> データの型の代わりに、 <xref:System.Single> データ型、または使用する、 <xref:System.Math.Round%2A> メソッドの両方の値が同一の有効桁数を含めるようにします。  
  
<a name="Equality"></a>   
## 等価性テスト  
 同等と見なされるに 2 つ <xref:System.Single> 値が同一の値を表す必要があります。 ただし、有効桁数に値の間の違いにより、または 1 つまたは両方の値によって精度が失われるのためには、多くの場合と同じであると想定される浮動小数点値に有効桁数の違いによりに等しくない場合します。 その結果、するために呼び出す、 <xref:System.Single.Equals%2A> 呼び出しまたは 2 つの値が等しいかどうかを決定する方法、 <xref:System.Single.CompareTo%2A> 2 つの間の関係を決定する方法 <xref:System.Single> の値が多くの場合、予期しない結果を生成します。 明らかに等しい 2 つ、これは次の例で示した <xref:System.Single> 値が等しくない場合、最初の値が 2 番目の値は 9、7 桁の精度を持つために手数です。  
  
 [!code-csharp[System.Single.Structure\#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/comparison1.cs#9)]
 [!code-vb[System.Single.Structure\#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/comparison1.vb#9)]  
  
 等しくない場合に異なるコード パスをたどることと、多くの場合、さまざまな方法で処理される、計算値を証明します。 次の例では、1 つ <xref:System.Single> 値を 2 乗し、元の値を復元する平方根を計算し、します。 1 秒あたり <xref:System.Single> は 3.51 が乗算され、前に、結果の平方根が元の値を復元する 3.51 で割った値を二乗します。 同じように見えますが 2 つの値への呼び出し、 <xref:System.Single.Equals%28System.Single%29> メソッドでは、それらが等しくないことを示します。 "R"標準書式指定文字列を使用して、それぞれの有効桁数がすべて表示される結果の文字列を取得する <xref:System.Single> 値は 2 番目の値があること.0000000000001 最初よりも小さいです。  
  
 [!code-csharp[System.Single.Structure\#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/comparison2.cs#10)]
 [!code-vb[System.Single.Structure\#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/comparison2.vb#10)]  
  
 精度の損失が比較の結果に影響する可能性が高い場合は、呼び出す代わりに、次の手法を使用できる、 <xref:System.Single.Equals%2A> または <xref:System.Single.CompareTo%2A> メソッド。  
  
-   呼び出す、 <xref:System.Math.Round%2A?displayProperty=fullName> 両方の値が同一の有効桁数を含めることを確認します。 次の例では、2 つの小数部の値が等しいように、このアプローチを使用する前の例を変更します。  
  
     [!code-csharp[System.Single.Structure\#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/comparison3.cs#11)]
     [!code-vb[System.Single.Structure\#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/comparison3.vb#11)]  
  
     精度の問題が中間値の丸め処理に適用されることに注意してください。 詳細については、<xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29?displayProperty=fullName> メソッドを参照してください。  
  
-   等値ではなく概数に等しいかどうかをテストします。 この手法では、どちらか絶対パスを定義することが必要です量の 2 つの値は異なるが、それでもする、指定した、または、小さい方の値が大きい方の値から分岐できます相対的な時間を定義します。  
  
    > [!WARNING]
    >  <xref:System.Single.Epsilon?displayProperty=fullName> 2 つの間の距離の絶対的な測定値として使用される場合があります <xref:System.Single> 値は等しいかどうかをテストする場合。  ただし、 <xref:System.Single.Epsilon?displayProperty=fullName> または、追加、削除、最小有効値を測定、 <xref:System.Single> 値が 0 です。 ほとんどの正の数および負 <xref:System.Single> 値、値の <xref:System.Single.Epsilon?displayProperty=fullName> が小さすぎてを検出します。 そのため、ゼロ値を除くしないでの等価テストで使用します。  
  
     次の例では、後者のアプローチを使用して、定義、 `IsApproximatelyEqual` 2 つの値の間の相対的な差異をテストするメソッドです。 呼び出しの結果も対比させて、 `IsApproximatelyEqual` メソッドおよび <xref:System.Single.Equals%28System.Single%29> メソッドです。  
  
     [!code-csharp[System.Single.Structure\#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/comparison4.cs#12)]
     [!code-vb[System.Single.Structure\#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/comparison4.vb#12)]  
  
<a name="Exceptions"></a>   
## 浮動小数点値と例外  
 浮動小数点値を持つ操作は、オーバーフロー 0 による除算などの無効な操作の場合に例外をスローする場合が整数型の演算とは異なり、例外をスローしません。  代わりに、このような場合は、浮動小数点演算の結果は 0、正の無限大、負の無限大、または非数 \(NaN\)。  
  
-   浮動小数点演算の結果が小さすぎるため、変換先の形式の場合は、結果は 0 です。 これは、次の例のように、2 つの非常に小さい浮動小数点数値を乗算するときに発生します。  
  
     [!code-csharp[System.Single.Structure\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/exceptional1.cs#1)]
     [!code-vb[System.Single.Structure\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/exceptional1.vb#1)]  
  
-   浮動小数点演算の結果の大きさが変換先の形式の範囲を超えている場合、操作の結果は <xref:System.Single.PositiveInfinity> または <xref:System.Single.NegativeInfinity>, \] の結果の符号をクリックします。 オーバーフローが発生する操作の結果 <xref:System.Single.MaxValue?displayProperty=fullName> は <xref:System.Single.PositiveInfinity>, 、およびオーバーフローが発生する操作の結果 <xref:System.Single.MinValue?displayProperty=fullName> は <xref:System.Single.NegativeInfinity>, 次の例を示します。  
  
     [!code-csharp[System.Single.Structure\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/exceptional2.cs#2)]
     [!code-vb[System.Single.Structure\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/exceptional2.vb#2)]  
  
     <xref:System.Single.PositiveInfinity> 正の被除数と 0 による除算によっても発生し、 <xref:System.Single.NegativeInfinity> 被除数を負の値に 0 による除算の結果します。  
  
-   浮動小数点演算が有効でない場合、操作の結果は <xref:System.Single.NaN>です。 たとえば、 <xref:System.Single.NaN> 、次の操作に起因します。  
  
    -   0 の被除数とゼロによる除算。 いずれかで結果がゼロで除算の他のケースに注意してください <xref:System.Single.PositiveInfinity> または <xref:System.Single.NegativeInfinity>です。  
  
    -   無効な入力で浮動小数点演算には。 たとえば、検索、負の値の平方根を返しますしよう <xref:System.Single.NaN>します。  
  
    -   値が引数を操作 <xref:System.Single.NaN?displayProperty=fullName>します。  
  
<a name="Conversion"></a>   
## 型変換と 1 つの構造  
 <xref:System.Single> 構造体は、明示的または暗黙的な変換演算子を定義していません。 代わりに、変換は、コンパイラによって実装されます。  
  
 次の表は、他のプリミティブ数値型の値の発生しうる変換、 <xref:System.Single> 値も表示するかどうかと、変換を拡大または縮小するかどうか、その結果 <xref:System.Single> 元の値よりも精度が低い場合があります。  
  
|変換 \(|拡大縮小|有効桁数が失われる可能性|  
|-----------|----------|------------------|  
|<xref:System.Byte>|Widening|いいえ|  
|<xref:System.Decimal>|Widening<br /><br /> C\# が必要であるキャスト演算子に注意してください。|はい。<xref:System.Decimal> 29 桁の小数点精度; をサポートしています <xref:System.Single> 9 をサポートしています。|  
|<xref:System.Double>|縮小変換です。範囲外の値に変換する <xref:System.Double.NegativeInfinity?displayProperty=fullName> または <xref:System.Double.PositiveInfinity?displayProperty=fullName>です。|はい。<xref:System.Double> 17 桁の小数点精度; をサポートしています <xref:System.Single> 9 をサポートしています。|  
|<xref:System.Int16>|Widening|いいえ|  
|<xref:System.Int32>|Widening|はい。<xref:System.Int32> 10 桁の小数点精度; をサポートしています <xref:System.Single> 9 をサポートしています。|  
|<xref:System.Int64>|Widening|はい。<xref:System.Int64> 19 桁の小数点精度; をサポートしています <xref:System.Single> 9 をサポートしています。|  
|<xref:System.SByte>|Widening|いいえ|  
|<xref:System.UInt16>|Widening|いいえ|  
|<xref:System.UInt32>|Widening|はい。<xref:System.UInt32> 10 桁の小数点精度; をサポートしています <xref:System.Single> 9 をサポートしています。|  
|<xref:System.UInt64>|Widening|はい。<xref:System.Int64> 20 桁の有効桁数、小数点をサポートしています <xref:System.Single> 9 をサポートしています。|  
  
 次の例を他のプリミティブ数値型の最小値または最大値の変換、 <xref:System.Single> 値。  
  
 [!code-csharp[System.Single.Structure\#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/convert1.cs#20)]
 [!code-vb[System.Single.Structure\#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/convert1.vb#20)]  
  
 さらに、 <xref:System.Double> 値 <xref:System.Double.NaN?displayProperty=fullName>, 、<xref:System.Double.PositiveInfinity?displayProperty=fullName>, 、および <xref:System.Double.NegativeInfinity?displayProperty=fullName> に変換 <xref:System.Single.NaN?displayProperty=fullName>, 、<xref:System.Single.PositiveInfinity?displayProperty=fullName>, 、および <xref:System.Single.NegativeInfinity?displayProperty=fullName>, 、それぞれします。  
  
 注意するいくつかの数値型の値の変換、 <xref:System.Single> 値は、有効桁数の損失を伴うことができます。 精度の損失を変換する場合は可能な例に示すように <xref:System.Decimal>, 、<xref:System.Double>, 、<xref:System.Int32>, 、<xref:System.Int64>, 、<xref:System.UInt32>, 、および <xref:System.UInt64> 値 <xref:System.Single> 値。  
  
 変換、 <xref:System.Single> 値を <xref:System.Double> 拡大変換されます。 変換で精度が失われる場合可能性、 <xref:System.Double> 型のため正確に表現していない、 <xref:System.Single> 値。  
  
 変換、 <xref:System.Single> 以外の任意のプリミティブ数値データ型の値に値を <xref:System.Double> 縮小変換は、キャスト演算子 \(C\# の場合\) または \(Visual Basic\) で変換メソッドが必要です。 対象の種類が定義されている値が対象のデータ型の範囲を超える `MinValue` と `MaxValue` プロパティの動作は次の表に示すようにします。  
  
|ターゲットの種類|結果|  
|--------------|--------|  
|任意の整数型|<xref:System.OverflowException> Checked コンテキストで変換が行われる場合に例外です。<br /><br /> Unchecked コンテキスト \(c\# では既定値\) に変換する場合は、変換操作が成功したが、値がオーバーフローが発生します。|  
|<xref:System.Decimal>|<xref:System.OverflowException> 例外|  
  
 さらに、 <xref:System.Single.NaN?displayProperty=fullName>, 、<xref:System.Single.PositiveInfinity?displayProperty=fullName>, 、および <xref:System.Single.NegativeInfinity?displayProperty=fullName> スロー、 <xref:System.OverflowException> が checked コンテキストの場合、これらの値のオーバーフロー unchecked コンテキストでは整数に変換されるときの整数に変換します。 変換 <xref:System.Decimal>, 、常にスローされる、 <xref:System.OverflowException>です。 変換 <xref:System.Double>, に変換する <xref:System.Double.NaN?displayProperty=fullName>, 、<xref:System.Double.PositiveInfinity?displayProperty=fullName>, 、および <xref:System.Double.NegativeInfinity?displayProperty=fullName>, 、それぞれします。  
  
 変換が精度の損失が考えられますことに注意してください、 <xref:System.Single> 値を別の数値型にします。 整数以外の変換の場合 <xref:System.Double> 値、例の出力に示すように、小数が失われるときに、 <xref:System.Single> 値が \(Visual Basic の場合\) のように丸められますか \(と同様に C\# の場合\) に切り捨てられます。 変換 <xref:System.Decimal> と <xref:System.Single> 値、 <xref:System.Double> 値では、対象のデータ型、正確に表現できません。  
  
 次の例の数の変換 <xref:System.Single> 値をその他のいくつかの数値型にします。 Visual Basic \(既定値\) と c\# では、checked コンテキストで、変換が発生する \(のため、 [チェック](http://msdn.microsoft.com/ja-jp/718a1194-988d-48a3-b089-d6ee8bd1608d) キーワード\) です。 この例の出力は、両方チェックで変換の結果を示しています。 unchecked コンテキスト。 コンパイルして Visual Basic で unchecked コンテキストでの変換を行うことができます、 `/removeintchecks+` コンパイラ スイッチと c\# コメント アウトすることによって、 `checked` ステートメントです。  
  
 [!code-csharp[System.Single.Structure\#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/convert2.cs#21)]
 [!code-vb[System.Single.Structure\#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/convert2.vb#21)]  
  
 数値型の変換の詳細については、次を参照してください。 [Type Conversion in the .NET Framework](http://msdn.microsoft.com/ja-jp/ba36154f-064c-47d3-9f05-72f93a7ca96d) と [Type Conversion Tables in the .NET Framework](http://msdn.microsoft.com/ja-jp/0ea65c59-85eb-4a52-94ca-c36d3bd13058)です。  
  
<a name="Functionality"></a>   
## 浮動小数点の機能  
 <xref:System.Single> 構造および関連する型は、次のカテゴリの操作を実行するメソッドを提供します。  
  
-   **の値の比較**します。 呼び出すことができます、 <xref:System.Single.Equals%2A> 2 つあるかどうかを決定する方法 <xref:System.Single> 値が等しいか、または <xref:System.Single.CompareTo%2A> メソッドを 2 つの値の間の関係を決定します。  
  
     <xref:System.Single> 構造体には、比較演算子の完全なセットもサポートしています。 たとえば、等しいか、テストしたり、1 つの値が別の値以上かどうかを確認できます。 オペランドのいずれかの場合、 <xref:System.Double>, 、 <xref:System.Single> に変換される値、 <xref:System.Double> 比較を実行する前にします。 一方のオペランドが整数型の場合に変換されますが、 <xref:System.Single> 比較を実行する前にします。 これらは、拡大変換で精度の損失が含まれます。  
  
    > [!WARNING]
    >  有効桁数、相違のため 2 つ <xref:System.Single> と等しくなるはずの値に手数に等しくない場合、比較の結果に影響を与えます。 参照してください、 [等価性テスト](#Equality) 2 つの比較についての詳細については <xref:System.Single> 値。  
  
     呼び出すことも、 <xref:System.Single.IsNaN%2A>, 、<xref:System.Single.IsInfinity%2A>, 、<xref:System.Single.IsPositiveInfinity%2A>, 、および <xref:System.Single.IsNegativeInfinity%2A> これらの特殊な値をテストするメソッドです。  
  
-   **数学的演算**します。 加算、減算、乗算、および除算などの一般的な算術演算が実装ではなく言語コンパイラと共通中間言語 \(CIL\) の手順で <xref:System.Single> メソッドです。 数学的演算のもう一方のオペランドがある場合、 <xref:System.Double>, 、 <xref:System.Single> に変換されますが、 <xref:System.Double> も、操作と操作の結果を実行する前に、 <xref:System.Double> 値。 変換されますが、もう一方のオペランドが整数型の場合、 <xref:System.Single> も、操作と操作の結果を実行する前に、 <xref:System.Single> 値。  
  
     呼び出してその他の算術演算を実行することができます `static` \(`Shared` Visual Basic で\) 内のメソッド、 <xref:System.Math?displayProperty=fullName> クラスです。 演算に一般的に使用される追加のメソッドが含まれます \(など <xref:System.Math.Abs%2A?displayProperty=fullName>, 、<xref:System.Math.Sign%2A?displayProperty=fullName>, 、および <xref:System.Math.Sqrt%2A?displayProperty=fullName>\)、geometry \(など <xref:System.Math.Cos%2A?displayProperty=fullName> と <xref:System.Math.Sin%2A?displayProperty=fullName>\)、および微積分 \(など <xref:System.Math.Log%2A?displayProperty=fullName>\)。  いずれの場合も、 <xref:System.Single> に変換される値、 <xref:System.Double>です。  
  
     個別のビットを操作することも、 <xref:System.Single> 値。<xref:System.BitConverter.GetBytes%28System.Single%29?displayProperty=fullName> メソッドは、バイト配列で、ビット パターンを返します。  そのバイト配列を渡すことによって、 <xref:System.BitConverter.ToInt32%2A?displayProperty=fullName> メソッドも保持できます、 <xref:System.Single> 32 ビット整数の値がビット パターンです。  
  
-   **丸め**します。 丸め処理はよく使用手法として浮動小数点表現と精度の問題によって発生する値の相違点の影響を軽減します。 丸めることができます、 <xref:System.Single> を呼び出して値、 <xref:System.Math.Round%2A?displayProperty=fullName> メソッドです。 ただし、 <xref:System.Single> に変換される値、 <xref:System.Double> 前に、メソッドが呼び出され、変換は、有効桁数の損失を伴うことができます。  
  
-   **書式**します。 変換することができます、 <xref:System.Single> を呼び出すことによって、文字列形式の値、 <xref:System.Single.ToString%2A> メソッドを使用して、または、 [複合書式指定](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49) 機能します。 書式指定文字列で浮動小数点値の文字列形式を制御する方法については、次を参照してください。、 [Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467) と [Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4) トピックです。  
  
-   **文字列の解析**します。 浮動小数点値の文字列形式に変換することができます、 <xref:System.Single> を呼び出して値、 <xref:System.Single.Parse%2A> または <xref:System.Single.TryParse%2A> メソッドです。 解析操作に失敗した場合、 <xref:System.Single.Parse%2A> メソッドにより、例外がスローされるため、一方、 <xref:System.Single.TryParse%2A> メソッドを返します。 `false`します。  
  
-   **変換の入力**します。<xref:System.Single> 構造体の明示的なインターフェイス実装を提供する、 <xref:System.IConvertible> インターフェイスで、2 つの標準的な .NET Framework データ型間の変換をサポートしています。 言語コンパイラは、すべての他の標準の数値型の変換以外の値の暗黙的な変換をサポートするも <xref:System.Double> に <xref:System.Single> 値。 以外の任意の標準の数値型の値への変換、 <xref:System.Double> に、 <xref:System.Single> 拡大変換は、キャスト演算子または変換メソッドの使用は不要です。  
  
     ただし、32 ビットおよび 64 ビットの整数値の変換では、精度が失われるをすることができます。 次の表に、32 ビット、64 ビットの有効桁数の違いと <xref:System.Double> の種類。  
  
    |型|最大有効桁数 \(10 進数字\) に|\(10 進数字\) に内部の有効桁数|  
    |-------|-------------------------|-------------------------|  
    |<xref:System.Double>|15|17|  
    |<xref:System.Int32> および <xref:System.UInt32>|10|10|  
    |<xref:System.Int64> および <xref:System.UInt64>|19|19|  
    |<xref:System.Single>|7|9|  
  
     精度の問題に最も頻繁に影響を与えます <xref:System.Single> 値に変換される <xref:System.Double> 値。 次の例では、同一の除算演算によって生成される 2 つの値が等しくない、値のいずれかに変換する単精度浮動小数点値であるため、 <xref:System.Double>です。  
  
     [!code-csharp[System.Single.Structure\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/precisionlist1.cs#5)]
     [!code-vb[System.Single.Structure\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/precisionlist1.vb#5)]  
  
 ]]></format>
    </remarks>
    <threadsafe>この種類のすべてのメンバーでは、スレッド セーフです。 インスタンスの状態を変更する表示されるメンバーは、実際に新しい値で初期化された新しいインスタンスを返します。 として、他の種類と読み取りと書き込みをこの型のインスタンスを含む共有変数を保護する必要があるスレッド セーフを確保するロックによってです。</threadsafe>
    <altmember cref="T:System.Decimal" />
    <altmember cref="T:System.Double" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.CompareTo(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">比較対象のオブジェクト、または <see langword="null" />。</param>
        <summary>このインスタンスと指定したオブジェクトを比較し、このインスタンスの値が指定したオブジェクトの値よりも小さいか、同じか、または大きいかを示す整数を返します。</summary>
        <returns>このインスタンスと <paramref name="value" /> の相対値を示す符号付き数値。  
  
 <list type="table">  
<listheader>  
<term> 戻り値  
  
 </term>  
<description> 説明  
  
 </description>  
</listheader>  
<item>  
<term> 0 より小さい値  
  
 </term>  
<description> このインスタンスは、<paramref name="value" /> よりも小さくなっています。  
  
 または  
  
 このインスタンスが数値ではありません \(<see cref="F:System.Single.NaN" />\) および<paramref name="value" />番号です。  
  
 </description>  
</item>  
<item>  
<term> 0  
  
 </term>  
<description> このインスタンスは <paramref name="value" /> と等価です。  
  
 または  
  
 このインスタンスと値の両方が非数 \(<see cref="F:System.Single.NaN" />\)、 <see cref="F:System.Single.PositiveInfinity" />、または<see cref="F:System.Single.NegativeInfinity" />です。  
  
 </description>  
</item>  
<item>  
<term> 0 より大きい値  
  
 </term>  
<description> このインスタンスは <paramref name="value" /> よりも大きくなっています。  
  
 または  
  
 このインスタンスは数値と<paramref name="value" />数値ではありません \(<see cref="F:System.Single.NaN" />\)。  
  
 または  
  
 <paramref name="value" /> は <see langword="null" /> です。  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `value`パラメーターでなければなりません`null`またはのインスタンス<xref:System.Single>です。 それ以外の場合、例外がスローされます。 任意のインスタンスの<xref:System.Single>、その値に関係なくが大きいと見なされますより`null`です。  
  
 値を等価と見なされると同じにする必要があります。 浮動小数点値は、複数の数値演算に依存しているときに特にの有効桁数が失われると、それらの値、最小有効数字を除くとほぼ同じにするには共通です。 このため、戻り値の<xref:System.Single.CompareTo%2A>メソッドかもしれませんことにより意外時点です。 たとえば、同じ値で除算の後に特定の値での乗算では、元の値を生成が次の例で計算値は元の値より大きくなければなりません。 "R"を使用して、2 つの値のすべての有効桁数を示す[標準数値書式指定文字列](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467)計算値が、その有効桁数の元の値と異なることを示します。 このような比較の処理については、の「解説」セクションを参照してください、<xref:System.Single.Equals%28System.Single%29>メソッドです。  
  
 [!code-csharp[System.Single.CompareTo\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.compareto/cs/compareto3.cs#2)]
 [!code-vb[System.Single.CompareTo\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.compareto/vb/compareto3.vb#2)]  
  
 このメソッドがサポートするために実装されている、<xref:System.IComparable>インターフェイスです。 なおが、<xref:System.Single.NaN>別に等しいと見なされない<xref:System.Single.NaN>\(場合によってはそれ自体\)、<xref:System.IComparable>インターフェイスでは、する必要があります`A.CompareTo(A)`は 0 を返します。  
  
## 比較では有効桁数  
 文書化されている有効桁数を超える浮動小数点数の有効桁数は、実装と .NET Framework のバージョンに固有です。 その結果、数値の内部表現の有効桁数が変わる可能性があるため、.NET Framework のバージョン間で 2 つの数値の比較が変化します。  
  
   
  
## 例  
 次のコード例を示しています、<xref:System.Single.CompareTo%2A>メソッドです。  
  
 [!code-cpp[System.Single\#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#16)]
 [!code-csharp[System.Single\#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#16)]
 [!code-vb[System.Single\#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> が <see cref="T:System.Single" /> ではありません。</exception>
        <altmember cref="M:System.Single.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.CompareTo(System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">比較対象の単精度浮動小数点数。</param>
        <summary>このインスタンスと指定した単精度浮動小数点数を比較し、このインスタンスの値が指定した単精度浮動小数点数の値よりも小さいか、同じか、それとも大きいかを示す整数を返します。</summary>
        <returns>このインスタンスと <paramref name="value" /> の相対値を示す符号付き数値。  
  
 <list type="table">  
<listheader>  
<term> 戻り値  
  
 </term>  
<description> 説明  
  
 </description>  
</listheader>  
<item>  
<term> 0 より小さい値  
  
 </term>  
<description> このインスタンスは、<paramref name="value" /> よりも小さくなっています。  
  
 または  
  
 このインスタンスが数値ではありません \(<see cref="F:System.Single.NaN" />\) および<paramref name="value" />番号です。  
  
 </description>  
</item>  
<item>  
<term> 0  
  
 </term>  
<description> このインスタンスは <paramref name="value" /> と等価です。  
  
 または  
  
 この両方のインスタンスと<paramref name="value" />数値ではありません \(<see cref="F:System.Single.NaN" />\)、 <see cref="F:System.Single.PositiveInfinity" />、または<see cref="F:System.Single.NegativeInfinity" />です。  
  
 </description>  
</item>  
<item>  
<term> 0 より大きい値  
  
 </term>  
<description> このインスタンスは <paramref name="value" /> よりも大きくなっています。  
  
 または  
  
 このインスタンスは数値と<paramref name="value" />数値ではありません \(<see cref="F:System.Single.NaN" />\)。  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値を等価と見なされるのと同じにする必要があります。 浮動小数点値有効桁数が失われると、複数の数値演算で値が依存している場合に特にその最下位の桁を除くとほぼ同じになる一般的なことです。 このため、戻り値の<xref:System.Single.CompareTo%2A>もメソッドがこのことにより意外見える可能性があります。 で同じ値での任意の値で除算の後の乗算では、元の値を生成する必要があります。 ただし、次の例で計算された値になります、元の値よりも大きくします。 "R"を使用して、2 つの値のすべての有効桁数を示す[標準数値書式指定文字列](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467)計算値が、その有効桁数の元の値と異なることを示します。 このような比較の処理については、の「解説」セクションを参照してください、<xref:System.Single.Equals%28System.Single%29>メソッドです。  
  
 [!code-csharp[System.Single.CompareTo\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.compareto/cs/compareto2.cs#1)]
 [!code-vb[System.Single.CompareTo\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.compareto/vb/compareto2.vb#1)]  
  
 このメソッドを実装する、<xref:System.IComparable%601?displayProperty=fullName>インターフェイスし、実行よりもわずかに向上、<xref:System.Single.CompareTo%2A?displayProperty=fullName>メソッドに変換があるないため、`value`オブジェクトへのパラメーターです。  
  
 なお、値があるオブジェクトが<xref:System.Single.NaN>値がある別のオブジェクトと等しくないと見なされます<xref:System.Single.NaN>\(場合によってはそれ自体\)、<xref:System.IComparable%601>インターフェイスでは、する必要があります`A.CompareTo(A)`は 0 を返します。  
  
## 拡大変換  
 プログラミング言語に応じてコードに考えられる場合があります、<xref:System.Single.CompareTo%2A>メソッドのパラメーターの型のビット数が少ないがここではインスタンスの型よりもします。 これには一部のプログラミング言語は、ビット数のインスタンスと型としてパラメーターを表す暗黙の拡大変換を実行するため。  
  
 たとえば、インスタンスの型が<xref:System.Single>パラメーターの型と<xref:System.Int32>です。 Microsoft c\# コンパイラは、パラメーターの値を表す命令を生成、<xref:System.Single>オブジェクトを生成、<xref:System.Single.CompareTo%28System.Single%29?displayProperty=fullName>拡張パラメーターの形式をおよびインスタンスの値を比較するメソッド。  
  
 コンパイラが数値型の暗黙の拡大変換を実行するプログラミング言語のドキュメントを参照してください。 詳細については、「[Type Conversion Tables in the .NET Framework](http://msdn.microsoft.com/ja-jp/0ea65c59-85eb-4a52-94ca-c36d3bd13058)」を参照してください。  
  
## 比較では有効桁数  
 文書化されている有効桁数を超える浮動小数点数の有効桁数は、実装と .NET Framework のバージョンに固有です。 その結果、数値の内部表現の有効桁数が変わる可能性があるため、.NET Framework のバージョン間で 2 つの数値の比較が変化します。  
  
   
  
## 例  
 次のコード例に示しますジェネリックと非ジェネリック バージョンの<xref:System.Single.CompareTo%2A>いくつかの値と参照型のメソッドです。  
  
 [!code-cpp[T.CompareTo\#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.CompareTo/CPP/cat.cpp#1)]
 [!code-csharp[T.CompareTo\#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.CompareTo/CS/cat.cs#1)]
 [!code-vb[T.CompareTo\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.CompareTo/VB/cat.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Epsilon">
      <MemberSignature Language="C#" Value="public const float Epsilon = 1.401298E-45;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 Epsilon = float32(1.401298E-45)" />
      <MemberSignature Language="DocId" Value="F:System.Single.Epsilon" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>1.401298E-45</MemberValue>
      <Docs>
        <summary>ゼロより大きい最小の <see cref="T:System.Single" /> 値を表します。 このフィールドは定数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The value of the <xref:System.Single.Epsilon> property reflects the smallest positive <xref:System.Single> value that is significant in numeric operations or comparisons when the value of the <xref:System.Single> instance is zero. For example, the following code shows that zero and <xref:System.Single.Epsilon> are considered to be unequal values, whereas zero and half the value of <xref:System.Single.Epsilon> are considered to be equal.  
  
 [!code-csharp[System.Single.Epsilon\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Epsilon/cs/epsilon.cs#5)]
 [!code-vb[System.Single.Epsilon\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Epsilon/vb/epsilon.vb#5)]  
  
 More precisely, the single\-precision floating\-point format consists of a sign, a 23\-bit mantissa or significand, and an 8\-bit exponent. As the following example shows, zero has an exponent of \-126 and a mantissa of 0. <xref:System.Single.Epsilon> has an exponent of \-126 and a mantissa of 1. This means that <xref:System.Single.Epsilon?displayProperty=fullName> is the smallest positive <xref:System.Single> value that is greater than zero and represents the smallest possible value and the smallest possible increment for a <xref:System.Single> whose exponent is \-126.  
  
 [!code-csharp[System.Single.Epsilon\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Epsilon/cs/epsilon1.cs#6)]
 [!code-vb[System.Single.Epsilon\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Epsilon/vb/epsilon1.vb#6)]  
  
 However, the <xref:System.Single.Epsilon> property is not a general measure of precision of the <xref:System.Single> type; it applies only to <xref:System.Single> instances that have a value of zero.  
  
> [!NOTE]
>  The value of the <xref:System.Single.Epsilon> property is not equivalent to machine epsilon, which represents the upper bound of the relative error due to rounding in floating\-point arithmetic.  
  
 The value of this constant is 1.4e\-45.  
  
 Two apparently equivalent floating\-point numbers might not compare equal because of differences in their least significant digits. For example, the C\# expression, `(float)1/3 == (float)0.33333`, does not compare equal because the division operation on the left side has maximum precision while the constant on the right side is precise only to the specified digits. If you create a custom algorithm that determines whether two floating\-point numbers can be considered equal, you must use a value that is greater than the <xref:System.Single.Epsilon> constant to establish the acceptable absolute margin of difference for the two values to be considered equal. \(Typically, that margin of difference is many times greater than <xref:System.Single.Epsilon>.\)  
  
## Platform Notes  
 On ARM systems, the value of the <xref:System.Single.Epsilon> constant is too small to be detected, so it equates to zero. You can define an alternative epsilon value that equals 1.175494351E\-38 instead.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">このインスタンスと比較するオブジェクト。</param>
        <summary>対象のインスタンスが、指定したオブジェクトに等しいかどうかを示す値を返します。</summary>
        <returns>
          <paramref name="obj" /> が <see cref="T:System.Single" /> のインスタンスで、このインスタンスの値に等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The<xref:System.Single.Equals%2A> method should be used with caution, because two apparently equivalent values can be unequal due to the differing precision of the two values. The following example reports that the <xref:System.Single> value .3333 and the <xref:System.Single> returned by dividing 1 by 3 are unequal.  
  
 [!code-csharp[System.Single.Epsilon\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Epsilon/cs/SingleEquals_25051.cs#3)]
 [!code-vb[System.Single.Epsilon\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Epsilon/vb/SingleEquals_25051.vb#3)]  
  
 Rather than comparing for equality, one recommended technique involves defining an acceptable margin of difference between two values \(such as .01% of one of the values\). If the absolute value of the difference between the two values is less than or equal to that margin, the difference is likely to be due to differences in precision and, therefore, the values are likely to be equal. The following example uses this technique to compare .33333 and 1\/3, the two <xref:System.Single> values that the previous code example found to be unequal.  
  
 [!code-csharp[System.Single.Epsilon\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Epsilon/cs/SingleEquals_25051.cs#4)]
 [!code-vb[System.Single.Epsilon\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Epsilon/vb/SingleEquals_25051.vb#4)]  
  
 In this case, the values are equal.  
  
> [!NOTE]
>  Because <xref:System.Single.Epsilon> defines the minimum expression of a positive value whose range is near zero, the margin of difference must be greater than <xref:System.Single.Epsilon>. Typically, it is many times greater than <xref:System.Single.Epsilon>.  
  
 The precision of floating\-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework. Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers' internal representation might change.  
  
   
  
## 例  
 The following code example demonstrates the <xref:System.Single.Equals%2A> method.  
  
 [!code-cpp[System.Single\#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#17)]
 [!code-csharp[System.Single\#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#17)]
 [!code-vb[System.Single\#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#17)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Compiler overload resolution may account for an apparent difference in the behavior of the two <see cref="M:System.Single.Equals(System.Object)" /> method overloads. If an implicit conversion between the <paramref name="obj" /> argument and a <see cref="T:System.Single" /> is defined and the argument is not typed as an <see cref="T:System.Object" />, compilers may perform an implicit conversion and call the <see cref="M:System.Single.Equals(System.Single)" /> method. Otherwise, they call the <see cref="M:System.Single.Equals(System.Object)" /> method, which always returns <see langword="false" /> if its <paramref name="obj" /> argument is not a <see cref="T:System.Single" /> value. The following example illustrates the difference in behavior between the two method overloads. In the case of all primitive numeric types except for <see cref="T:System.Double" /> in Visual Basic and except for <see cref="T:System.Decimal" /> and <see cref="T:System.Double" /> in C#, the first comparison returns <see langword="true" /> because the compiler automatically performs a widening conversion and calls the <see cref="M:System.Single.Equals(System.Single)" /> method, whereas the second comparison returns <see langword="false" /> because the compiler calls the <see cref="M:System.Single.Equals(System.Object)" /> method.  
  
 [!code-csharp[System.Single.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.equals/cs/equalsoverl.cs#2)]
 [!code-vb[System.Single.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.equals/vb/equalsoverl.vb#2)]</para>
        </block>
        <altmember cref="M:System.Single.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (float obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(float32 obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Equals(System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="obj">このインスタンスと比較するオブジェクト。</param>
        <summary>このインスタンスと指定した <see cref="T:System.Single" /> オブジェクトが同じ値を表しているかどうかを示す値を返します。</summary>
        <returns>
          <paramref name="obj" /> がこのインスタンスと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method implements the <xref:System.IEquatable%601?displayProperty=fullName> interface, and performs slightly better than <xref:System.Single.Equals%2A> because it does not have to convert the **parameterReference tag is not supported!!!!**  
 parameter to an object.  
  
## Widening Conversions  
 Depending on your programming language, it might be possible to code an <xref:System.Single.Equals%2A> method where the parameter type has fewer bits \(is narrower\) than the instance type. This is possible because some programming languages perform an implicit widening conversion that represents the parameter as a type with as many bits as the instance.  
  
 For example, suppose the instance type is <xref:System.Single> and the parameter type is <xref:System.Int32>. The Microsoft C\# compiler generates instructions to represent the value of the parameter as a <xref:System.Single> object, and then generates a <xref:System.Single.Equals%28System.Single%29?displayProperty=fullName> method that compares the values of the instance and the widened representation of the parameter.  
  
 Consult your programming language's documentation to determine if its compiler performs implicit widening conversions of numeric types. For more information, see the [Type Conversion Tables in the .NET Framework](http://msdn.microsoft.com/ja-jp/0ea65c59-85eb-4a52-94ca-c36d3bd13058) topic.  
  
## Precision in Comparisons  
 The<xref:System.Single.Equals%2A> method should be used with caution, because two apparently equivalent values can be unequal because of the differing precision of the two values. The following example reports that the <xref:System.Single> value .3333 and the <xref:System.Single> returned by dividing 1 by 3 are unequal.  
  
 [!code-csharp[System.Single.Epsilon\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Epsilon/cs/SingleEquals_25051.cs#1)]
 [!code-vb[System.Single.Epsilon\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Epsilon/vb/SingleEquals_25051.vb#1)]  
  
 One comparison technique that avoids the problems associated with comparing for equality involves defining an acceptable margin of difference between two values \(such as .01% of one of the values\). If the absolute value of the difference between the two values is less than or equal to that margin, the difference is likely to be an outcome of differences in precision and, therefore, the values are likely to be equal. The following example uses this technique to compare .33333 and 1\/3, which are the two <xref:System.Single> values that the previous code example found to be unequal.  
  
 [!code-csharp[System.Single.Epsilon\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Epsilon/cs/SingleEquals_25051.cs#2)]
 [!code-vb[System.Single.Epsilon\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Epsilon/vb/SingleEquals_25051.vb#2)]  
  
 In this case, the values are equal.  
  
> [!NOTE]
>  Because <xref:System.Single.Epsilon> defines the minimum expression of a positive value whose range is near zero, the margin of difference must be greater than <xref:System.Single.Epsilon>. Typically, it is many times greater than <xref:System.Single.Epsilon>. Because of this, we recommend that you do not use <xref:System.Double.Epsilon> when comparing <xref:System.Double> values for equality.  
  
 A second technique that avoids the problems associated with comparing for equality involves comparing the difference between two floating\-point numbers with some absolute value. If the difference is less than or equal to that absolute value, the numbers are equal. If it is greater, the numbers are not equal. One way to do this is to arbitrarily select an absolute value. However, this is problematic, because an acceptable margin of difference depends on the magnitude of the <xref:System.Single> values. A second way takes advantage of a design feature of the floating\-point format: The difference between the mantissa components in the integer representations of two floating\-point values indicates the number of possible floating\-point values that separates the two values. For example, the difference between 0.0 and <xref:System.Single.Epsilon> is 1, because <xref:System.Single.Epsilon> is the smallest representable value when working with a <xref:System.Single> whose value is zero. The following example uses this technique to compare .33333 and 1\/3, which are the two <xref:System.Double> values that the previous code example with the <xref:System.Single.Equals%28System.Single%29> method found to be unequal. Note that the example uses the <xref:System.BitConverter.GetBytes%2A?displayProperty=fullName> and <xref:System.BitConverter.ToInt32%2A?displayProperty=fullName> methods to convert a single\-precision floating\-point value to its integer representation.  
  
 [!code-csharp[System.Single.Equals\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.equals/cs/equalsabs1.cs#1)]
 [!code-vb[System.Single.Equals\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.equals/vb/equalsabs1.vb#1)]  
  
 The precision of floating\-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework. Consequently, a comparison of two numbers might produce different results depending on the version of the .NET Framework, because the precision of the numbers' internal representation might change.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Compiler overload resolution may account for an apparent difference in the behavior of the two <see cref="M:System.Single.Equals(System.Object)" /> method overloads. If an implicit conversion between the <paramref name="obj" /> argument and a <see cref="T:System.Single" /> is defined and the argument is not typed as an <see cref="T:System.Object" />, compilers may perform an implicit conversion and call the <see cref="M:System.Single.Equals(System.Single)" /> method. Otherwise, they call the <see cref="M:System.Single.Equals(System.Object)" /> method, which always returns <see langword="false" /> if its <paramref name="obj" /> argument is not a <see cref="T:System.Single" /> value. The following example illustrates the difference in behavior between the two method overloads. In the case of all primitive numeric types except for <see cref="T:System.Double" /> in Visual Basic and except for <see cref="T:System.Decimal" /> and <see cref="T:System.Double" /> in C#, the first comparison returns <see langword="true" /> because the compiler automatically performs a widening conversion and calls the <see cref="M:System.Single.Equals(System.Single)" /> method, whereas the second comparison returns <see langword="false" /> because the compiler calls the <see cref="M:System.Single.Equals(System.Object)" /> method.  
  
 [!code-csharp[System.Single.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.equals/cs/equalsoverl.cs#2)]
 [!code-vb[System.Single.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.equals/vb/equalsoverl.vb#2)]</para>
        </block>
        <altmember cref="M:System.Single.Equals(System.Object)" />
        <altmember cref="Overload:System.Single.CompareTo" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスのハッシュ コードを返します。</summary>
        <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.GetTypeCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.TypeCode" /> 値型の <see cref="T:System.Single" /> を返します。</summary>
        <returns>列挙型定数 <see cref="F:System.TypeCode.Single" />。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.TypeCode" />
      </Docs>
    </Member>
    <Member MemberName="IsInfinity">
      <MemberSignature Language="C#" Value="public static bool IsInfinity (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsInfinity(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsInfinity(System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">単精度浮動小数点数。</param>
        <summary>指定した数値が負または正の無限大と評価されるかどうかを示す値を返します。</summary>
        <returns>
          <paramref name="f" /> が <see cref="F:System.Single.PositiveInfinity" /> または <see cref="F:System.Single.NegativeInfinity" /> と評価される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 浮動小数点演算 <xref:System.Single.PositiveInfinity> または <xref:System.Single.NegativeInfinity> オーバーフロー状態を通知します。  
  
   
  
## 例  
 次のコード例を示しています、 <xref:System.Single.IsInfinity%2A> メソッドです。  
  
 [!code-cpp[System.Single\#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#11)]
 [!code-csharp[System.Single\#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#11)]
 [!code-vb[System.Single\#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.IsPositiveInfinity(System.Single)" />
        <altmember cref="M:System.Single.IsNegativeInfinity(System.Single)" />
        <altmember cref="F:System.Single.PositiveInfinity" />
        <altmember cref="F:System.Single.NegativeInfinity" />
      </Docs>
    </Member>
    <Member MemberName="IsNaN">
      <MemberSignature Language="C#" Value="public static bool IsNaN (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNaN(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsNaN(System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">単精度浮動小数点数。</param>
        <summary>指定した値が非数値 \(<see cref="F:System.Single.NaN" />\) かどうかを示す値を返します。</summary>
        <returns>
          <paramref name="f" /> が非数 \(<see cref="F:System.Single.NaN" />\) と評価される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 浮動小数点演算<xref:System.Single.NaN>をその操作の結果が定義されていないことを通知します。 たとえば、0.0、0.0 を除算した結果、<xref:System.Single.NaN>です。  
  
> [!NOTE]
>  <xref:System.Single.IsNaN%2A>返します`false`場合、<xref:System.Single>いずれかの値は<xref:System.Single.PositiveInfinity>または<xref:System.Single.NegativeInfinity>です。 これらの値をテストするには、使用、 <xref:System.Single.IsInfinity%2A>、 <xref:System.Single.IsPositiveInfinity%2A>、および<xref:System.Single.IsNegativeInfinity%2A>メソッドです。  
  
   
  
## 例  
 次のコード例を示しています、<xref:System.Single.IsNaN%2A>メソッドです。  
  
 [!code-cpp[System.Single\#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#8)]
 [!code-csharp[System.Single\#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#8)]
 [!code-vb[System.Single\#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Single.NaN" />
      </Docs>
    </Member>
    <Member MemberName="IsNegativeInfinity">
      <MemberSignature Language="C#" Value="public static bool IsNegativeInfinity (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNegativeInfinity(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsNegativeInfinity(System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">単精度浮動小数点数。</param>
        <summary>指定した数値が負の無限大と評価されるかどうかを示す値を返します。</summary>
        <returns>
          <paramref name="f" /> が <see cref="F:System.Single.NegativeInfinity" /> と評価される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 浮動小数点演算 <xref:System.Single.NegativeInfinity> オーバーフロー状態を通知します。  
  
   
  
## 例  
 次のコード例を示しています、 <xref:System.Single.IsNegativeInfinity%2A> メソッドです。  
  
 [!code-cpp[System.Single\#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#13)]
 [!code-csharp[System.Single\#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#13)]
 [!code-vb[System.Single\#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#13)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.IsInfinity(System.Single)" />
        <altmember cref="M:System.Single.IsPositiveInfinity(System.Single)" />
        <altmember cref="F:System.Single.PositiveInfinity" />
        <altmember cref="F:System.Single.NegativeInfinity" />
      </Docs>
    </Member>
    <Member MemberName="IsPositiveInfinity">
      <MemberSignature Language="C#" Value="public static bool IsPositiveInfinity (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPositiveInfinity(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsPositiveInfinity(System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">単精度浮動小数点数。</param>
        <summary>指定した数値が正の無限大と評価されるかどうかを示す値を返します。</summary>
        <returns>
          <paramref name="f" /> が <see cref="F:System.Single.PositiveInfinity" /> と評価される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 浮動小数点演算 <xref:System.Single.PositiveInfinity> オーバーフロー状態を通知します。  
  
   
  
## 例  
 次のコード例を示しています、 <xref:System.Single.IsPositiveInfinity%2A> メソッドです。  
  
 [!code-cpp[System.Single\#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#12)]
 [!code-csharp[System.Single\#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#12)]
 [!code-vb[System.Single\#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.IsInfinity(System.Single)" />
        <altmember cref="M:System.Single.IsNegativeInfinity(System.Single)" />
        <altmember cref="F:System.Single.PositiveInfinity" />
        <altmember cref="F:System.Single.NegativeInfinity" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public const float MaxValue = 3.402823E+38;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 MaxValue = float32(3.402823E+38)" />
      <MemberSignature Language="DocId" Value="F:System.Single.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>3.402823E+38</MemberValue>
      <Docs>
        <summary>
          <see cref="T:System.Single" /> の最大有効値を表します。 このフィールドは定数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この定数の値は、正の 3.40282347 e \+ 38 です。  
  
 超える演算の結果<xref:System.Single.MaxValue?displayProperty=fullName>は<xref:System.Single.PositiveInfinity?displayProperty=fullName>します。 次の例では、<xref:System.Single.PositiveInfinity?displayProperty=fullName>結果を超えたときに結果を加算、乗算、および指数演算操作<xref:System.Single.MaxValue?displayProperty=fullName>です。  
  
 [!code-csharp[System.Single.MaxValue\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.maxvalue/cs/maxvalueex.cs#1)]
 [!code-vb[System.Single.MaxValue\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.maxvalue/vb/maxvalueex.vb#1)]  
  
   
  
## 例  
 次のコード例を示しています、<xref:System.Single.MaxValue>定数。  
  
 [!code-cpp[System.Single\#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#4)]
 [!code-csharp[System.Single\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#4)]
 [!code-vb[System.Single\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Single.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public const float MinValue = -3.402823E+38;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 MinValue = float32(-3.402823E+38)" />
      <MemberSignature Language="DocId" Value="F:System.Single.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>-3.402823E+38</MemberValue>
      <Docs>
        <summary>
          <see cref="T:System.Single" /> の最小有効値を表します。 このフィールドは定数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この定数の値は、負の値 3.402823 e 38 です。  
  
 ある操作の結果より小さい<xref:System.Single.MinValue?displayProperty=fullName>は<xref:System.Single.NegativeInfinity?displayProperty=fullName>します。 次の例では、<xref:System.Single.NegativeInfinity?displayProperty=fullName>結果が、減算、乗算の結果より小さい<xref:System.Single.MinValue?displayProperty=fullName>です。  
  
 [!code-csharp[System.Single.MinValue\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.minvalue/cs/minvalueex.cs#1)]
 [!code-vb[System.Single.MinValue\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.minvalue/vb/minvalueex.vb#1)]  
  
   
  
## 例  
 次のコード例を示しています、<xref:System.Single.MinValue>定数。  
  
 [!code-cpp[System.Single\#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#5)]
 [!code-csharp[System.Single\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#5)]
 [!code-vb[System.Single\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Single.MaxValue" />
      </Docs>
    </Member>
    <Member MemberName="NaN">
      <MemberSignature Language="C#" Value="public const float NaN = NaN;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 NaN = float32(NaN)" />
      <MemberSignature Language="DocId" Value="F:System.Single.NaN" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>NaN</MemberValue>
      <Docs>
        <summary>非数 \(<see langword="NaN" />\) を表します。 このフィールドは定数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 メソッドまたは演算子を返します<xref:System.Single.NaN>操作の結果が定義されている場合。 たとえば、0 を 0 で除算した結果は<xref:System.Single.NaN>次の例に示すようにします。 \(0 0 以外の数値で除算を返すこと、ただし、<xref:System.Single.PositiveInfinity>または<xref:System.Single.NegativeInfinity>除数の符号に応じて、します\)。  
  
 [!code-csharp[System.Single.NaN\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.nan/cs/nan1.cs#1)]
 [!code-vb[System.Single.NaN\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.nan/vb/nan1.vb#1)]  
  
 さらに、メソッドを呼び出すと、<xref:System.Single.NaN>値またはでの操作、<xref:System.Single.NaN>値を返します<xref:System.Single.NaN>次の例を示します。  
  
 [!code-csharp[System.Single.NaN\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.nan/cs/nan1.cs#2)]
 [!code-vb[System.Single.NaN\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.nan/vb/nan1.vb#2)]  
  
 使用して、<xref:System.Single.IsNaN%2A>値が数値ではないかどうかを調べます。 一般に、<xref:System.Single>を比較する演算子を使用することはできません<xref:System.Single.NaN?displayProperty=fullName>他<xref:System.Single>ですが、値比較メソッド \(など<xref:System.Single.Equals%2A>と<xref:System.Single.CompareTo%2A>\) ことができます。 次の例との間の動作の違いを示しています。<xref:System.Single>比較演算子とメソッド。  
  
 [!code-csharp[System.Single.NaN\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.nan/cs/single.nan4.cs#4)]
 [!code-vb[System.Single.NaN\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.nan/vb/single.nan4.vb#4)]  
  
   
  
## 例  
 次の例で、<xref:System.Single.NaN>定数。  
  
 [!code-cpp[System.Single\#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#7)]
 [!code-csharp[System.Single\#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#7)]
 [!code-vb[System.Single\#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.IsNaN(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="NegativeInfinity">
      <MemberSignature Language="C#" Value="public const float NegativeInfinity = -Infinity;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 NegativeInfinity = float32(-Infinity)" />
      <MemberSignature Language="DocId" Value="F:System.Single.NegativeInfinity" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>-Infinity</MemberValue>
      <Docs>
        <summary>負の無限大を表します。 このフィールドは定数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この定数の値は、負の値を 0 で除算した結果です。  
  
 この定数は操作の結果が返されるより小さい <xref:System.Single.MinValue>します。  
  
 使用 <xref:System.Single.IsNegativeInfinity%2A> 値が負の無限大と評価されるかどうかを決定します。  
  
   
  
## 例  
 次のコード例を示しています、 <xref:System.Single.NegativeInfinity> 定数です。  
  
 [!code-cpp[System.Single\#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#9)]
 [!code-csharp[System.Single\#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#9)]
 [!code-vb[System.Single\#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.IsNegativeInfinity(System.Single)" />
        <altmember cref="M:System.Single.IsInfinity(System.Single)" />
        <altmember cref="F:System.Single.PositiveInfinity" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (float left, float right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(float32 left, float32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.op_Equality(System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値です。</param>
        <param name="right">比較する 2 番目の値です。</param>
        <summary>指定した 2 つの <see cref="T:System.Single" /> 値が等しいかどうかを示す値を返します。</summary>
        <returns>
          <see langword="true" /> と <paramref name="left" /> が等しい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Single.op_Equality%2A> method defines the equality operator for <xref:System.Single> values.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool op_GreaterThan (float left, float right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(float32 left, float32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.op_GreaterThan(System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値です。</param>
        <summary>指定した <see cref="T:System.Single" /> 値が、指定したもう 1 つの <see cref="T:System.Single" /> 値より大きいかどうかを示す値を返します。</summary>
        <returns>
          <see langword="true" /> が <paramref name="left" /> より大きい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Single.op_GreaterThan%2A> メソッドは、大きい方の操作を定義での演算子よりも <xref:System.Single> 値。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool op_GreaterThanOrEqual (float left, float right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(float32 left, float32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.op_GreaterThanOrEqual(System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値。</param>
        <summary>指定した <see cref="T:System.Single" /> 値が、指定したもう 1 つの <see cref="T:System.Single" /> 値以上かどうかを示す値を返します。</summary>
        <returns>
          <paramref name="left" /> が <paramref name="right" /> 以上の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Single.op_GreaterThanOrEqual%2A> メソッドの大きいよりも、または等号演算子の動作を定義する <xref:System.Single> 値。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (float left, float right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(float32 left, float32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.op_Inequality(System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値。</param>
        <summary>指定した 2 つの <see cref="T:System.Single" /> 値が等しくないかどうかを示す値を返します。</summary>
        <returns>
          <paramref name="left" /> と <paramref name="right" /> が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Single.op_Inequality%2A> メソッド定義の非等値演算子 <xref:System.Single> 値。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool op_LessThan (float left, float right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(float32 left, float32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.op_LessThan(System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値です。</param>
        <summary>指定した <see cref="T:System.Single" /> 値が、指定したもう 1 つの <see cref="T:System.Single" /> 値より小さいかどうかを示す値を返します。</summary>
        <returns>
          <paramref name="left" /> が <paramref name="right" /> より小さい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Single.op_LessThan%2A> メソッドは、以下の操作を定義での演算子よりも <xref:System.Single> 値。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool op_LessThanOrEqual (float left, float right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(float32 left, float32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.op_LessThanOrEqual(System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値です。</param>
        <summary>指定した <see cref="T:System.Single" /> 値が、指定したもう 1 つの <see cref="T:System.Single" /> 値以下かどうかを示す値を返します。</summary>
        <returns>
          <paramref name="left" /> が <paramref name="right" /> 以下の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Single.op_LessThanOrEqual%2A> メソッドの低いよりも、または等号演算子の動作を定義する <xref:System.Single> 値。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static float Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Parse(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">変換する数値を含んだ文字列。</param>
        <summary>数値の文字列形式を、それと等価な単精度浮動小数点数に変換します。</summary>
        <returns>
          <paramref name="s" /> で指定した数値または記号に等しい単精度浮動小数点数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `s`パラメーターは、現在のカルチャを含めることができます<xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>、 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>、 <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>、または形式の文字列。  
  
 \[*ws*\]\[*sign*\] \[*integral\-digits*\[*,*\]\]*integral\-digits*\[*.*\[*小数部の桁*\] \[e \[*記号*\]*桁の指数*\] \[*ws*\]  
  
 角かっこ \(\[ および \]\) 内の要素は省略可能です。 次の表では、各要素について説明します。  
  
|要素|説明|  
|--------|--------|  
|*ws*|一連の空白文字。|  
|*sign*|負の記号または正の記号。 有効な符号文字がによって決定されます、<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName>と<xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=fullName>現在のカルチャのプロパティです。 先頭の記号のみを使用できます。|  
|*整数の桁*|一連の数字の 0 から 9 数の整数部分を指定するまでです。 実行*整数の桁*グループの区切り記号でパーティション分割することができます。 たとえば、コンマ \(,\) は、一部のカルチャで、何千ものグループを区切ります。*整数の桁*要素を指定できる場合、文字列が含まれています、*小数部の桁*要素。|  
|*,*|カルチャ固有の桁区切り記号。|  
|*」を参照してください。*|カルチャに固有の小数点記号です。|  
|*小数の桁*|一連の数字の 0 から 9 数の小数部を指定するまでです。|  
|E|"E"または"E"文字は、値を指数表記で表されていることを示します。|  
|*指数桁の数字*|一連の数字の 0 から 9 指数部を指定するまでです。|  
  
 `s`パラメーターの組み合わせを使用して解釈されます、<xref:System.Globalization.NumberStyles.Float?displayProperty=fullName>と<xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=fullName>フラグ。 つまり、空白文字と桁区切り記号が許可されているが、通貨記号は表示されません。 要素を明示的に定義 \(などの通貨記号、桁区切り記号、および空白\) 内に存在することができます`s`を使用して、<xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%29>メソッドのオーバー ロードします。  
  
 `s`パラメーターは書式設定情報を使用して解析、<xref:System.Globalization.NumberFormatInfo>現在のシステムのカルチャに初期化されるオブジェクト。 詳細については、「<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>」を参照してください。 特定のカルチャの書式情報を使用して、文字列を解析するを使用して、<xref:System.Single.Parse%28System.String%2CSystem.IFormatProvider%29>または<xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29>メソッドです。  
  
 通常、渡した場合、<xref:System.Single.Parse%2A>メソッドを呼び出すことによって作成される文字列を<xref:System.Single.ToString%2A>メソッドは、元の<xref:System.Single>値が返されます。 ただし、精度の損失、ため値可能性がありますいないなります。  
  
 区切り記号が発生した場合、`s`解析操作では、および適用可能な通貨または 10 進数の間にパラメーターと桁区切り記号が同じには、解析操作では、区切り文字が桁区切り記号ではなく、小数点区切り文字である前提としています。 区切り記号の詳細については、次を参照してください。 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>、 <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>、 <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>、および<xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>です。  
  
   
  
## 例  
 次の例では、<xref:System.Single.Parse%28System.String%29>メソッドに相当する文字列の配列に変換する<xref:System.Single>値。  
  
 [!code-csharp[System.Single.Parse\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Parse/CS/parse1.cs#2)]
 [!code-vb[System.Single.Parse\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Parse/VB/parse1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> は有効な形式で数値を表していません。</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> は、<see cref="F:System.Single.MinValue" /> 未満の数値か、<see cref="F:System.Single.MaxValue" /> より大きい数値を表します。</exception>
        <altmember cref="M:System.Single.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static float Parse (string s, System.Globalization.NumberStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Parse(string s, valuetype System.Globalization.NumberStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Parse(System.String,System.Globalization.NumberStyles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
      </Parameters>
      <Docs>
        <param name="s">変換する数値を含んだ文字列。</param>
        <param name="style">
          <c>s</c> で使用可能なスタイル要素を示す、列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.AllowThousands" /> と組み合わせた <see cref="F:System.Globalization.NumberStyles.Float" /> です。</param>
        <summary>指定したスタイルでの数値の文字列形式を、それと等価な単精度浮動小数点数に変換します。</summary>
        <returns>
          <paramref name="s" /> で指定した数値または記号に等しい単精度浮動小数点数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `style`パラメーター スタイル要素定義 \(空白文字、数千ものなど、区切り記号および通貨記号\) で許容される、`s`解析操作が成功するためのパラメーターです。 ビット フラグの組み合わせを可能にする必要があります、<xref:System.Globalization.NumberStyles>列挙します。 次<xref:System.Globalization.NumberStyles>メンバーがサポートされていません。  
  
-   <xref:System.Globalization.NumberStyles.AllowHexSpecifier>  
  
-   <xref:System.Globalization.NumberStyles.HexNumber>  
  
 `s`パラメーターは、現在のカルチャを含めることができます<xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>、 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>、<xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>です。 値に応じて`style`フォームをかかることができます。  
  
 \[*ws*\]\[*$*\]\[*sign*\]\[*integral\-digits*\[*,*\]\]*integral\-digits*\[*.*\[*小数部の桁*\] \[E \[*記号*\]*桁の指数*\] \[*ws*\]  
  
 角かっこ \(\[ および \]\) 内の要素は省略可能です。 次の表では、各要素について説明します。  
  
 *ws*  
 一連の空白文字。 先頭に空白文字は使用できません`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=fullName>の最後に表示されることができますフラグ、およびその`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=fullName>フラグ。  
  
 $  
 カルチャ固有の通貨記号。 文字列内での位置がによって定義された、<xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=fullName>と<xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=fullName>現在のカルチャのプロパティです。 現在のカルチャの通貨記号に表示される`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=fullName>フラグ。  
  
 *sign*  
 マイナス記号 \(\-\) または、プラス記号 \(\+\) です。 先頭に表示できる符号`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=fullName>フラグ、およびそのがの末尾に置くことができます`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=fullName>フラグ。 かっこを使用できる`s`負の値を指定する場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=fullName>フラグ。  
  
 *整数の桁*  
 一連の数字の 0 から 9 の数の整数部を指定するまでです。*整数の桁*要素を指定できる場合、文字列が含まれています、*小数部の桁*要素。  
  
 ,  
 カルチャ固有のグループの区切り記号。 現在のカルチャの桁区切り記号に表示される`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=fullName>フラグ  
  
 」を参照してください。  
 カルチャに固有の小数点記号です。 現在のカルチャの小数点記号に表示される`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=fullName>フラグ。  
  
 *小数の桁*  
 一連の数字の 0 から 9 数の小数部を指定するまでです。 小数部の桁が表示できる`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=fullName>フラグ。  
  
 E  
 "E"または"E"文字は、値を指数表記で表されていることを示します。`value`場合、パラメーターは指数表記の数値を表すことができる`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=fullName>フラグ。  
  
 *指数桁の数字*  
 一連の数字の 0 から 9 指数部を指定するまでです。  
  
 数字のみを含む文字列 \(に対応する、<xref:System.Globalization.NumberStyles.None?displayProperty=fullName>スタイル\) が正常に解析します。 残りの<xref:System.Globalization.NumberStyles?displayProperty=fullName>メンバーが存在する可能性がありますが、入力文字列内に存在する必要はありません要素を制御します。 次の表に示す個別<xref:System.Globalization.NumberStyles>フラグに存在可能な要素に影響を与える`s`です。  
  
|NumberStyles 値|使用できる要素`s`数字だけでなく|  
|--------------------|-----------------------|  
|<xref:System.Globalization.NumberStyles.None>|*整数の桁*要素のみです。|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|小数点 \(*.*\) および*小数部の桁*要素。|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|"E"または"E"文字は、指数表記法を示します。 それ自体では、このフラグは、形式で値をサポートしている*桁の数字*E*桁*以外の場合は追加のフラグが正常に正または負の符号および小数点記号としては、このような要素を含む文字列を解析する必要です。|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|*Ws*の先頭にある要素`s`です。|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|*Ws*の末尾に要素`s`です。|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|*記号*の先頭にある要素`s`です。|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|*記号*の末尾に要素`s`です。|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|*記号*数値の値を囲むかっこの形式での要素。|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|桁区切り記号 \(,\) 要素です。|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|通貨 \($\) の要素。|  
|<xref:System.Globalization.NumberStyles.Currency>|すべての要素。 ただし、 `s` 16 進数または指数表記の数値を表すことはできません。|  
|<xref:System.Globalization.NumberStyles.Float>|*Ws*先頭または末尾の位置にある要素`s`、*記号*の先頭に`s`、および小数点 \(.\) 記号です。`s`パラメーターは、指数表記も使用できます。|  
|<xref:System.Globalization.NumberStyles.Number>|`ws`、 `sign`、桁区切り記号 \(,\)、小数点 \(.\) 要素です。|  
|<xref:System.Globalization.NumberStyles.Any>|すべての要素。 ただし、 `s` 16 進数を表すことはできません。|  
  
 例をいくつか`s`は「100」、「\-123,456,789」、「123.45 e \+ 6」、「\+500」、"5e2"、「3.1416」、「600。」、"\-。 123" は、と"\-無限大"です。  
  
 `s`で書式設定情報を使用してパラメーターを解析、<xref:System.Globalization.NumberFormatInfo>現在のシステムのカルチャに初期化されるオブジェクト。 書式情報を含むが、解析操作で使用されるカルチャを指定するには、呼び出し、<xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29>オーバー ロードします。  
  
 通常、渡した場合、<xref:System.Single.Parse%2A>メソッドを呼び出すことによって作成される文字列を<xref:System.Single.ToString%2A>、元のメソッド<xref:System.Single>値が返されます。 ただし、精度の損失、ため値可能性がありますいないなります。  
  
 区切り記号が発生した場合、`s`解析操作では、および適用可能な通貨または 10 進数の間にパラメーターと桁区切り記号が同じには、解析操作では、区切り文字が桁区切り記号ではなく、小数点区切り文字である前提としています。 区切り記号の詳細については、次を参照してください。 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>、 <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>、 <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>、および<xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>です。  
  
   
  
## 例  
 次の例では、<xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%29>メソッドの文字列形式を解析する<xref:System.Single>値。 例では、EN\-US カルチャの書式情報を使用できます。  
  
 [!code-csharp[System.Single.Parse\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Parse/CS/parse2.cs#3)]
 [!code-vb[System.Single.Parse\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Parse/VB/parse2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> は正しい形式の数値ではありません。</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> は <see cref="F:System.Single.MinValue" /> 未満の数値か、<see cref="F:System.Single.MaxValue" /> より大きい数値を表します。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> は <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。  
  
 \-または\-  
  
 <paramref name="style" /> には <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値が含まれています。</exception>
        <altmember cref="M:System.Single.ToString" />
        <altmember cref="Overload:System.Single.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static float Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Parse(System.String,System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">変換する数値を含んだ文字列。</param>
        <param name="provider">
          <c>s</c> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>指定したカルチャに固有の書式による数値の文字列形式を、それと等価な単精度浮動小数点数に変換します。</summary>
        <returns>
          <paramref name="s" /> で指定した数値または記号に等しい単精度浮動小数点数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このオーバー ロードでは、さまざまな方法でフォーマットできるテキストに変換するために使用は、通常、<xref:System.Single>値。 たとえば、数値の値を HTML テキスト ボックスに、ユーザーが入力したテキストに変換する、使用できます。  
  
 `s`パラメーターの組み合わせを使用して解釈されます、<xref:System.Globalization.NumberStyles.Float?displayProperty=fullName>と<xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=fullName>フラグ。`s`パラメーターを含めることができます<xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=fullName>、 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=fullName>、または<xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=fullName>で指定されたカルチャの`provider`、または形式の文字列を含めることができます。  
  
 \[*ws*\]\[*sign*\]*integral\-digits*\[*.*\[*小数部の桁*\] \[E \[*記号*\]*桁の指数*\] \[*ws*\]  
  
 省略可能な要素は角かっこで囲まれています \(\[および\]\)。 数字の 0 から 9 までの一連の"digits"という語を含む要素で構成されます。  
  
|要素|説明|  
|--------|--------|  
|*ws*|一連の空白文字。|  
|*sign*|マイナス記号 \(\-\) または、プラス記号 \(\+\) です。|  
|*整数の桁*|一連の数字の 0 から 9 の数の整数部を指定するまでです。 実行*整数の桁*グループの区切り記号でパーティション分割することができます。 たとえば、コンマ \(,\) は、一部のカルチャで、何千ものグループを区切ります。*整数の桁*要素を指定できる場合、文字列が含まれています、*小数部の桁*要素。|  
|」を参照してください。|カルチャに固有の小数点記号です。|  
|*小数の桁*|一連の数字の 0 から 9 数の小数部を指定するまでです。|  
|E|"E"または"E"文字は、値を指数表記で表されていることを示します。|  
|*指数桁の数字*|一連の数字の 0 から 9 指数部を指定するまでです。|  
  
 数値形式の詳細については、次を参照してください。、[Formatting Types in the .NET Framework](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f)トピックです。  
  
 `provider`パラメーターは、<xref:System.IFormatProvider>実装が<xref:System.IFormatProvider.GetFormat%2A>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>カルチャに固有の書式情報を提供するオブジェクト。 ときに、<xref:System.Single.Parse%28System.String%2CSystem.IFormatProvider%29>メソッドが呼び出され、呼び出し、`provider`パラメーターの<xref:System.IFormatProvider.GetFormat%2A>メソッド渡します、<xref:System.Type>を表すオブジェクト、<xref:System.Globalization.NumberFormatInfo>型です。<xref:System.IFormatProvider.GetFormat%2A>メソッドが戻ります、<xref:System.Globalization.NumberFormatInfo>の形式に関する情報を提供するオブジェクト、`s`パラメーター。 3 つの方法を使用する、`provider`パラメーター、解析操作にカスタムの書式情報を提供します。  
  
-   渡すことができます、<xref:System.Globalization.CultureInfo>の書式情報を提供するカルチャを表すオブジェクト。 その<xref:System.Globalization.CultureInfo.GetFormat%2A>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>そのカルチャの数値の書式設定情報を提供するオブジェクト。  
  
-   実際に渡すことができます<xref:System.Globalization.NumberFormatInfo>数値書式設定情報を提供するオブジェクト。 \(その実装の<xref:System.Globalization.NumberFormatInfo.GetFormat%2A>自体を返すだけです\)。  
  
-   実装するカスタム オブジェクトを渡すことができます<xref:System.IFormatProvider>です。 その<xref:System.IFormatProvider.GetFormat%2A>メソッドがインスタンス化し、返します、<xref:System.Globalization.NumberFormatInfo>の書式情報を提供するオブジェクト。  
  
 場合`provider`は`null`または<xref:System.Globalization.NumberFormatInfo>取得できないの書式情報、現在のシステム カルチャが使用されます。  
  
 区切り記号が発生した場合、`s`解析操作では、適用可能な通貨や数値の桁の時にパラメーターと桁区切り記号が同じには、解析操作では、区切り文字が桁区切り記号ではなく、小数点区切り文字である前提としています。 区切り記号の詳細については、次を参照してください。 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>、 <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>、 <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>、および<xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>です。  
  
 例をいくつか`s`は「100」、「\-123,456,789」、「123.45 e \+ 6」、「\+500」、"5e2"、「3.1416」、「600。」、"\-。 123" は、と"\-無限大"です。  
  
   
  
## 例  
 次の例は、ボタンは、Web フォームのイベント ハンドラーをクリックします。 によって返される配列を使用して、<xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=fullName>プロパティをユーザーのロケールを決定します。 インスタンス化し、<xref:System.Globalization.CultureInfo>そのロケールに対応するオブジェクト。<xref:System.Globalization.NumberFormatInfo>に属しているオブジェクト<xref:System.Globalization.CultureInfo>にオブジェクトが渡され、<xref:System.Single.Parse%28System.String%2CSystem.IFormatProvider%29>にユーザーを変換するメソッドの入力、<xref:System.Single>値。  
  
 [!code-csharp[ParseMethod\#1](~/samples/snippets/csharp/VS_Snippets_CLR/ParseMethod/cs/Default.aspx.cs#1)]
 [!code-vb[ParseMethod\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ParseMethod/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> は有効な形式で数値を表していません。</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> は、<see cref="F:System.Single.MinValue" /> 未満の数値か、<see cref="F:System.Single.MaxValue" /> より大きい数値を表します。</exception>
        <altmember cref="M:System.Single.ToString" />
        <altmember cref="Overload:System.Single.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static float Parse (string s, System.Globalization.NumberStyles style, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Parse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">変換する数値を含んだ文字列。</param>
        <param name="style">
          <c>s</c> で使用可能なスタイル要素を示す、列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.AllowThousands" /> と組み合わせた <see cref="F:System.Globalization.NumberStyles.Float" /> です。</param>
        <param name="provider">
          <c>s</c> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>指定したスタイルおよびカルチャに固有の書式による数値の文字列形式を、それと等価な単精度浮動小数点数に変換します。</summary>
        <returns>
          <paramref name="s" /> で指定した数値または記号に等しい単精度浮動小数点数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `style`パラメーター スタイル要素定義 \(空白文字、数千ものなど、区切り記号および通貨記号\) で許容される、`s`解析操作が成功するためのパラメーターです。 ビット フラグの組み合わせを可能にする必要があります、<xref:System.Globalization.NumberStyles>列挙します。 次<xref:System.Globalization.NumberStyles>メンバーがサポートされていません。  
  
-   <xref:System.Globalization.NumberStyles.AllowHexSpecifier>  
  
-   <xref:System.Globalization.NumberStyles.HexNumber>  
  
 `s`パラメーターを含めることができます<xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=fullName>、 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=fullName>、または<xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=fullName>で指定されたカルチャの`provider`します。 値に応じて`style`フォームをかかることができます。  
  
 \[*ws*\] \[*$*\] \[*sign*\]\[*integral\-digits*,\]*integral\-digits*\[.\[*小数部の桁*\]\[E\[*sign*\]*exponential\-digits*\]\[*ws*\]  
  
 要素は角かっこ \(\[および\]\) は省略可能で囲まれています。 次の表では、各要素について説明します。  
  
|要素|説明|  
|--------|--------|  
|*ws*|一連の空白文字。 先頭に空白文字は使用できません`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=fullName>の最後に表示されることができますフラグ、およびその`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=fullName>フラグ。|  
|$|カルチャ固有の通貨記号。 文字列内での位置がによって定義された、<xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=fullName>と<xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=fullName>現在のカルチャのプロパティです。 現在のカルチャの通貨記号に表示される`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=fullName>フラグ。|  
|*sign*|マイナス記号 \(\-\) または、プラス記号 \(\+\) です。 先頭に表示できる符号`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=fullName>フラグ、およびそのがの末尾に置くことができます`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=fullName>フラグ。 かっこを使用できる`s`負の値を指定する場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=fullName>フラグ。|  
|*整数の桁*|一連の数字の 0 から 9 の数の整数部を指定するまでです。*整数の桁*要素を指定できる場合、文字列が含まれています、*小数部の桁*要素。|  
|,|カルチャ固有のグループの区切り記号。 現在のカルチャの桁区切り記号に表示される`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=fullName>フラグ|  
|」を参照してください。|カルチャに固有の小数点記号です。 現在のカルチャの小数点記号に表示される`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=fullName>フラグ。|  
|*小数の桁*|一連の数字の 0 から 9 数の小数部を指定するまでです。 小数部の桁が表示できる`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=fullName>フラグ。|  
|E|"E"または"E"文字は、値を指数表記で表されていることを示します。`s`場合、パラメーターは指数表記の数値を表すことができる`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=fullName>フラグ。|  
|*指数桁の数字*|一連の数字の 0 から 9 指数部を指定するまでです。|  
  
 数字のみを含む文字列 \(に対応する、<xref:System.Globalization.NumberStyles.None?displayProperty=fullName>スタイル\) が正常に解析します。 残りの<xref:System.Globalization.NumberStyles?displayProperty=fullName>メンバーが存在する可能性がありますが、入力文字列内に存在する必要はありません要素を制御します。 次の表に示す個別<xref:System.Globalization.NumberStyles>フラグに存在可能な要素に影響を与える`s`です。  
  
|NumberStyles 値|使用できる要素`s`数字だけでなく|  
|--------------------|-----------------------|  
|<xref:System.Globalization.NumberStyles.None>|*整数の桁*要素のみです。|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|小数点 \(*.*\) および*小数部の桁*要素。|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|"E"または"E"文字は、指数表記法を示します。 それ自体では、このフラグは、形式で値をサポートしている*桁の数字*E*桁*以外の場合は追加のフラグが正常に正または負の符号および小数点記号としては、このような要素を含む文字列を解析する必要です。|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|*Ws*の先頭にある要素`s`です。|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|*Ws*の末尾に要素`s`です。|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|*記号*の先頭にある要素`s`です。|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|*記号*の末尾に要素`s`です。|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|*記号*数値の値を囲むかっこの形式での要素。|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|桁区切り記号 \(,\) 要素です。|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|通貨 \($\) の要素。|  
|<xref:System.Globalization.NumberStyles.Currency>|すべての要素。 ただし、 `s` 16 進数または指数表記の数値を表すことはできません。|  
|<xref:System.Globalization.NumberStyles.Float>|*Ws*先頭または末尾の位置にある要素`s`、*記号*の先頭に`s`、および小数点 \(.\) 記号です。`s`パラメーターは、指数表記も使用できます。|  
|<xref:System.Globalization.NumberStyles.Number>|`ws`、 `sign`、桁区切り記号 \(,\)、小数点 \(.\) 要素です。|  
|<xref:System.Globalization.NumberStyles.Any>|すべての要素。 ただし、 `s` 16 進数を表すことはできません。|  
  
 `provider`パラメーターは、<xref:System.IFormatProvider>実装します。 その<xref:System.IFormatProvider.GetFormat%2A>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>の書式に関するカルチャ固有の情報を提供するオブジェクト`value`です。 通常、`provider`次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>数値書式設定情報を提供するカルチャを表すオブジェクト。 その<xref:System.Globalization.CultureInfo.GetFormat%2A>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>数値書式設定情報を提供するオブジェクト。  
  
-   A<xref:System.Globalization.NumberFormatInfo>書式情報を提供するオブジェクト。 \(その実装の<xref:System.Globalization.NumberFormatInfo.GetFormat%2A>自体を返すだけです\)。  
  
-   実装するカスタム オブジェクト<xref:System.IFormatProvider>を使用して、<xref:System.Globalization.NumberFormatInfo.GetFormat%2A>をインスタンス化して返すメソッド、<xref:System.Globalization.NumberFormatInfo>書式情報を提供するオブジェクト。  
  
 場合`provider`は`null`、<xref:System.Globalization.NumberFormatInfo>オブジェクトの現在のカルチャが使用されます。  
  
 区切り記号が発生した場合、`s`解析操作では、適用可能な通貨や数値の桁の時にパラメーターと桁区切り記号が同じには、解析操作では、区切り文字が桁区切り記号ではなく、小数点区切り文字である前提としています。 区切り記号の詳細については、次を参照してください。 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>、 <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>、 <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>、および<xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>です。  
  
   
  
## 例  
 次のコード例では、<xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29>の文字列形式を解析します<xref:System.Single>値。 配列内の各文字列は、EN\-US、NL\-NL、およびカスタム カルチャの書式指定規則を使用して解析されます。 カスタム カルチャでは、アンダー スコア \(「\_ \_」\) とそのグループのサイズとして 2 つの桁区切り記号を定義します。  
  
 [!code-csharp[System.Single.Parse\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Parse/CS/parse3.cs#4)]
 [!code-vb[System.Single.Parse\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Parse/VB/parse3.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> が数値を表していません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> は <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。  
  
 \-または\-  
  
 <paramref name="style" /> は <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値です。</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> は <see cref="F:System.Single.MinValue" /> 未満の数値か、<see cref="F:System.Single.MaxValue" /> より大きい数値を表します。</exception>
        <altmember cref="M:System.Single.ToString" />
      </Docs>
    </Member>
    <Member MemberName="PositiveInfinity">
      <MemberSignature Language="C#" Value="public const float PositiveInfinity = Infinity;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 PositiveInfinity = float32(Infinity)" />
      <MemberSignature Language="DocId" Value="F:System.Single.PositiveInfinity" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>Infinity</MemberValue>
      <Docs>
        <summary>正の無限大を表します。 このフィールドは定数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この定数の値は、0 では正の数値を除算した結果です。  
  
 この定数は操作の結果がよりも大きい場合に返される<xref:System.Single.MaxValue>です。  
  
 使用して<xref:System.Single.IsPositiveInfinity%2A>値が正の無限大と評価されるかどうかを決定します。  
  
   
  
## 例  
 次のコード例を示しています、<xref:System.Single.PositiveInfinity>定数。  
  
 [!code-cpp[System.Single\#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#10)]
 [!code-csharp[System.Single\#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#10)]
 [!code-vb[System.Single\#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.IsPositiveInfinity(System.Single)" />
        <altmember cref="M:System.Single.IsInfinity(System.Single)" />
        <altmember cref="F:System.Single.NegativeInfinity" />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IComparable#CompareTo(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#GetTypeCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />」を参照してください。</summary>
        <returns>現在のインスタンスの値が 0 でない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToBoolean%28System.Single%29?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />」を参照してください。</summary>
        <returns>
          <see cref="T:System.Byte" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToByte%28System.Single%29?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>この変換はサポートされていません。 値は返されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>この変換はサポートされていません。 値は返されません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />」を参照してください。</summary>
        <returns>
          <see cref="T:System.Decimal" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToDecimal%28System.Single%29?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />」を参照してください。</summary>
        <returns>
          <see cref="T:System.Double" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToDouble%28System.Single%29?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />」を参照してください。</summary>
        <returns>
          <see cref="T:System.Int16" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToInt16%28System.Single%29?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />」をご覧ください。</summary>
        <returns>
          <see cref="T:System.Int32" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToInt32%28System.Single%29?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />」をご覧ください。</summary>
        <returns>
          <see cref="T:System.Int64" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToInt64%28System.Single%29?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />」を参照してください。</summary>
        <returns>
          <see cref="T:System.SByte" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToSByte%28System.Single%29?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />」をご覧ください。</summary>
        <returns>変更されていない、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type">この <see cref="T:System.Single" /> 値の変換後の型。</param>
        <param name="provider">戻り値の書式に関する情報を提供するオブジェクト。</param>
        <summary>このメンバーの説明については、「<see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />」を参照してください。</summary>
        <returns>
          <paramref name="type" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 `static` \(`Shared` Visual Basic で\) <xref:System.Convert.ChangeType%2A?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />」を参照してください。</summary>
        <returns>
          <see cref="T:System.UInt16" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToUInt16%28System.Single%29?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />」をご覧ください。</summary>
        <returns>
          <see cref="T:System.UInt32" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToUInt32%28System.Single%29?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />」をご覧ください。</summary>
        <returns>
          <see cref="T:System.UInt64" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToUInt64%28System.Single%29?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスの数値を、それと等価な文字列形式に変換します。</summary>
        <returns>このインスタンスの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Single.ToString>メソッドの形式、<xref:System.Single>現在のカルチャの形式 \("G"、または \[全般\]\) の既定の値します。 別の形式またはカルチャを指定する場合の他のオーバー ロードを使用して、<xref:System.Single.ToString%2A>メソッドは、次のようにします。  
  
|形式を使用するには|カルチャの|オーバー ロードを使用します。|  
|---------------|-----------|---------------------|  
|既定値 \("G"\) 書式|特定のカルチャ|<xref:System.Single.ToString%28System.IFormatProvider%29>|  
|特定の形式|\(現在\) の既定のカルチャ|<xref:System.Single.ToString%28System.String%29>|  
|特定の形式|特定のカルチャ|<xref:System.Single.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 戻り値は、 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>、 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>、 <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>、または形式の文字列。  
  
 \[サインイン\] 整数の桁 \[です \[。小数部の桁\] \[e \[サインイン\] 指数の桁\]  
  
 省略可能な要素は角かっこで囲まれています \(\[および\]\)。 数字の 0 から 9 までの一連の"digits"という語を含む要素で構成されます。 次の表に、各要素を示します。  
  
|要素|説明|  
|--------|--------|  
|*sign*|負の記号または正の記号。|  
|*整数の桁*|一連の数字の数の整数部分を指定します。 整数の桁がなくてもかまいません桁の小数部がある場合。|  
|'.'|カルチャに固有の小数点記号です。|  
|*小数の桁*|一連の数字の数の小数部を指定します。|  
|' e'|小文字 'e' を示す文字指数表記。|  
|*指数桁の数字*|一連の数字の指数部を指定します。|  
  
 戻り値の例をいくつかは、「100」、「\-123,456,789」、"123.45 e \+ 6"、「500」、「3.1416」、「600」、「\-0.123」と"\-Infinity"です。  
  
 .NET Framework では、次の書式設定のトピックで詳しく説明されている、広範な書式設定サポートを提供します。  
  
-   数値書式指定子の詳細については、次を参照してください。[Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467)と[Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4)です。  
  
-   書式設定に関する詳細については、次を参照してください。[Formatting Types in the .NET Framework](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f)です。  
  
   
  
## 例  
 次の例では、既定値<xref:System.Single.ToString%2A?displayProperty=fullName>の数の文字列形式を表示するメソッドを<xref:System.Single>値。  
  
 [!code-csharp[System.Single.ToString\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.ToString/CS/ToString1.cs#1)]
 [!code-vb[System.Single.ToString\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.ToString/VB/ToString1.vb#1)]  
  
 次のコード例の使用を示しています、<xref:System.Single.Parse%28System.String%29>メソッドと共に、<xref:System.Single.ToString>メソッドです。  
  
 [!code-cpp[System.Single\#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#3)]
 [!code-csharp[System.Single\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#3)]
 [!code-vb[System.Single\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.ToString(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>このインスタンスの数値を、指定したカルチャ固有の書式情報を使用して、それと等価な文字列形式に変換します。</summary>
        <returns>
          <paramref name="provider" /> で指定された、このインスタンスの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Single.ToString%28System.IFormatProvider%29>メソッドの形式、<xref:System.Single>値の既定値 \("G"、または \[全般\]\) で指定されたカルチャの形式です。 別の形式または現在のカルチャを指定する場合は、他のオーバー ロードを使用して、<xref:System.Single.ToString%2A>メソッドは、次のようにします。  
  
|形式を使用するには|カルチャの|オーバー ロードを使用します。|  
|---------------|-----------|---------------------|  
|既定値 \("G"\) 書式|\(現在\) の既定のカルチャ|<xref:System.Single.ToString>|  
|特定の形式|\(現在\) の既定のカルチャ|<xref:System.Single.ToString%28System.String%29>|  
|特定の形式|特定のカルチャ|<xref:System.Single.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 戻り値は、 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>、 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>、 <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>、または形式の文字列。  
  
 \[サインイン\] 整数の桁 \[です \[。小数部の桁\] \[e \[サインイン\] 指数の桁\]  
  
 省略可能な要素は角かっこで囲まれています \(\[および\]\)。 数字の 0 から 9 までの一連の"digits"という語を含む要素で構成されます。 次の表には、各要素が一覧表示します。  
  
|要素|説明|  
|--------|--------|  
|sign|負の記号または正の記号。|  
|整数の桁|一連の数字の数の整数部分を指定します。 整数の桁がなくてもかまいません桁の小数部がある場合。|  
|'.'|カルチャに固有の小数点記号です。|  
|小数の桁|一連の数字の数の小数部を指定します。|  
|' e'|小文字"e"を示す文字指数表記。|  
|指数桁の数字|一連の数字の指数部を指定します。|  
  
 戻り値の例をいくつかは、「100」、「\-123,456,789」、"123.45 e \+ 6"、「500」、「3.1416」、「600」、「\-0.123」と"\-Infinity"です。  
  
 .NET フレームワークでは、広範な書式設定の次のトピックで詳しく説明されている書式設定サポートを提供します。  
  
-   数値書式指定子の詳細については、次を参照してください。[Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467)と[Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4)です。  
  
-   書式設定に関する詳細については、次を参照してください。[Formatting Types in the .NET Framework](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f)です。  
  
 `provider`パラメーターは、<xref:System.IFormatProvider>実装が<xref:System.IFormatProvider.GetFormat%2A>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>オブジェクト。 通常、`provider`は、<xref:System.Globalization.CultureInfo>オブジェクトまたは<xref:System.Globalization.NumberFormatInfo>オブジェクト。`provider`パラメーターの書式設定に使用されるカルチャに固有の情報を提供します。 場合`provider`は`null`を使用して、戻り値が書式設定、<xref:System.Globalization.NumberFormatInfo>データ、現在のカルチャ。  
  
 変換する、<xref:System.Single>値、特定のカルチャおよび特定の形式の文字列では、呼び出しを使用して、文字列形式を<xref:System.Single.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName>メソッドです。  
  
   
  
## 例  
 次の例では、2 つの文字列形式を<xref:System.Single>を使用して値<xref:System.Globalization.CultureInfo>を複数の異なるカルチャを表すオブジェクト。  
  
 [!code-csharp[System.Single.ToString\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.ToString/CS/ToString1.cs#2)]
 [!code-vb[System.Single.ToString\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.ToString/VB/ToString1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.ToString(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">数値書式指定文字列。</param>
        <summary>指定した書式を使用して、このインスタンスの数値を、それと等価な文字列形式に変換します。</summary>
        <returns>
          <paramref name="format" /> で指定された、このインスタンスの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Single.ToString%28System.String%29>メソッドの形式、<xref:System.Single>現在のカルチャの規則を使用して、指定した書式の値。 既定値 \("G"、または \[全般\]\) を使用する場合は、書式を設定または別のカルチャを指定して、他のオーバー ロードを使用して、<xref:System.Single.ToString%2A>次のように、メソッド。  
  
|形式を使用するには|カルチャの|オーバー ロードを使用します。|  
|---------------|-----------|---------------------|  
|既定値 \("G"\) 書式|\(現在\) の既定のカルチャ|<xref:System.Single.ToString>|  
|既定値 \("G"\) 書式|特定のカルチャ|<xref:System.Single.ToString%28System.IFormatProvider%29>|  
|特定の形式|特定のカルチャ|<xref:System.Single.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 戻り値は、 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>、 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>、 <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>、またはで指定したとおり、現在のインスタンスの値の文字列形式を`format`です。  
  
 `format` D と、X を除く任意の有効な標準の数値書式指定子およびカスタム数値書式指定子の任意の組み合わせのパラメーターを指定できます。 形式の場合`null`または戻り値、空の文字列が、一般的な数値書式指定子 \("G"\) でフォーマットされています。  
  
 .NET Framework では、次の書式設定のトピックで詳しく説明されている、広範な書式設定サポートを提供します。  
  
-   数値書式指定子の詳細については、次を参照してください。[Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467)と[Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4)です。  
  
-   書式設定に関する詳細については、次を参照してください。[Formatting Types in the .NET Framework](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f)です。  
  
 既定では、戻り値は 7 桁の有効桁数の最大 9 桁が内部的に保持されてです。 このインスタンスの値は 7 桁の数字より大きい場合<xref:System.Single.ToString%28System.String%29>を返します<xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>または<xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>予想された数ではなくです。 高い精度を必要とする場合は、指定`format`9 桁の有効桁数、または"R"を常に返す"G9"書式指定が返されます 7 桁の数字の数を表現できる場合は最大有効桁数を持つ場合はその有効桁数または桁数が 9 表現できる数場合。  
  
   
  
## 例  
 次の例では、数値の値を定義し、書式を通貨値として"C"標準の数値書式指定文字列を使用して、小数点以下 3 桁の数値として"N"の標準数値書式指定文字列を使用しています。 結果文字列は EN\-US カルチャの規則を使用して書式設定されます。 数値書式指定文字列の詳細については、次を参照してください。[Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467)および[Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4)です。  
  
 [!code-csharp[System.Single.ToString\#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.ToString/CS/ToString7.cs#7)]
 [!code-vb[System.Single.ToString\#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.ToString/VB/ToString7.vb#7)]  
  
 次の例では、いくつかが表示されます<xref:System.Single>を使用して、サポートされている標準数値書式指定子と共に 2 つのカスタム数値書式指定文字列の各値です。 余白を埋めるための方法を示しています、カスタム書式指定文字列の 1 つ、<xref:System.Single>先行ゼロを持つ値です。 数値を文字列に変換するのには、EN\-US カルチャの書式指定規則を使用します。  
  
 [!code-csharp[System.Single.ToString\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.ToString/CS/ToString1.cs#3)]
 [!code-vb[System.Single.ToString\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.ToString/VB/ToString1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> が正しくありません。</exception>
        <altmember cref="M:System.Single.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.ToString(System.String,System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">数値書式指定文字列。</param>
        <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>このインスタンスの数値を、指定した書式およびカルチャ固有の書式情報を使用して、それと等価な文字列形式に変換します。</summary>
        <returns>
          <paramref name="format" /> と <paramref name="provider" /> で指定された、このインスタンスの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Single.ToString%28System.String%2CSystem.IFormatProvider%29>メソッドの形式、<xref:System.Single>特定のカルチャの指定した形式の値。 既定の形式またはカルチャの設定を使用する場合は、他のオーバー ロードを使用して、<xref:System.Single.ToString%2A>メソッドは、次のようにします。  
  
|形式を使用するには|カルチャの|オーバー ロードを使用します。|  
|---------------|-----------|---------------------|  
|既定値 \("G"\) 書式|\(現在\) の既定のカルチャ|<xref:System.Single.ToString>|  
|既定値 \("G"\) 書式|特定のカルチャ|<xref:System.Single.ToString%28System.IFormatProvider%29>|  
|特定の形式|\(現在\) の既定のカルチャ|<xref:System.Single.ToString%28System.String%29>|  
  
 戻り値は、 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>、 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>、 <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>、またはで指定したとおり、現在のインスタンスの値の文字列形式を`format`です。  
  
 `format`パラメーターには、D、X を除く任意の有効な標準の数値書式指定子およびカスタム数値書式指定子の任意の組み合わせを指定できます。 場合`format`は`null`またはこのインスタンスの戻り値、空の文字列が、一般的な数値書式指定子 \("G"\) でフォーマットされています。  
  
 .NET Framework では、次の書式設定のトピックで詳しく説明されている、広範な書式設定サポートを提供します。  
  
-   数値書式指定子の詳細については、次を参照してください。[Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467)と[Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4)です。  
  
-   書式設定に関する詳細については、次を参照してください。[Formatting Types in the .NET Framework](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f)です。  
  
 `provider`パラメーターは、<xref:System.IFormatProvider>実装が<xref:System.IFormatProvider.GetFormat%2A>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>オブジェクト。 通常、`provider`は、<xref:System.Globalization.CultureInfo>オブジェクトまたは<xref:System.Globalization.NumberFormatInfo>オブジェクト。`provider`パラメーターの書式設定に使用されるカルチャに固有の情報を提供します。 場合`provider`は`null`、戻り値の書式で、<xref:System.Globalization.NumberFormatInfo>現在のカルチャ オブジェクト。  
  
 既定では、戻り値にはのみが含まれています 7 桁有効桁数には 9 桁の数字の最大数は内部的に保持されています。 このインスタンスの値は 7 桁の数字より大きい場合<xref:System.Single.ToString%2A>返します<xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>または<xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>予想された数の代わりにします。 高い精度を必要とする場合は、指定`format`が常に返します、9 桁の有効桁数、または"R"、"G9"書式指定する場合を返します 7 桁の数字数は、数を表現できる場合は最大有効桁数を持つ場合は、有効桁数または 9 桁で表すことができます。  
  
   
  
## 例  
 次の例を表示、<xref:System.Single>値のサポートされている標準数値書式指定子のいくつかの異なるカルチャを使用します。  
  
 [!code-csharp[System.Single.ToString\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.ToString/CS/ToString1.cs#4)]
 [!code-vb[System.Single.ToString\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.ToString/VB/ToString1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out float result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, float32 result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.TryParse(System.String,System.Single@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.Single&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">変換する数値を表す文字列。</param>
        <param name="result">変換が成功した場合、このメソッドから制御が戻った時点で、<c>s</c> に格納された数値または記号に等しい単精度浮動小数点数を格納します。変換に失敗した場合は 0 を格納します。<c>s</c> パラメーターが <see langword="null" /> または <see cref="F:System.String.Empty" /> であるか、有効な書式の数値ではない、または <see cref="F:System.Single.MinValue" /> より小さいか <see cref="F:System.Single.MaxValue" /> より大きい数値を表している場合、変換は失敗します。 このパラメーターは初期化されていない状態で渡されています。<c>result</c> で最初に指定された任意の値が上書きされます。</param>
        <summary>数値の文字列形式を、それと等しい単精度浮動小数点数に変換します。 戻り値は、変換が成功したか失敗したかを示します。</summary>
        <returns>
          <see langword="true" /> が正常に変換された場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このオーバー ロードとは異なります、<xref:System.Single.Parse%28System.String%29?displayProperty=fullName>による解析の数値の値を返す代わりに、解析操作が成功したかどうかを示すブール値を返すメソッド。 テストするため、例外処理を使用する必要がある、<xref:System.FormatException>イベントで`s`無効なため、正常に解析することはできません。  
  
 `s`パラメーターを含めることができます<xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>、 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>、<xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>文字列比較では、大文字小文字を区別\)、または形式の文字列。  
  
 \[ws\]\[記号\]\[整数の桁\]、整数の桁 \[です \[。小数部の桁\] \[e \[サインイン\] 指数の桁\] \[ws\]  
  
 角かっこ内の要素は省略できます。 次の表では、各要素について説明します。  
  
|要素|説明|  
|--------|--------|  
|*ws*|一連の空白文字。|  
|*sign*|負の記号または正の記号。|  
|*整数の桁*|一連の数字の 0 から 9 の数の整数部を指定するまでです。 整数の桁がなくてもかまいません桁の小数部がある場合。|  
|*,*|カルチャ固有のグループの区切り記号です。|  
|*」を参照してください。*|カルチャに固有の小数点記号です。|  
|*小数の桁*|一連の数字の 0 から 9 数の小数部を指定するまでです。|  
|*E*|大文字または小文字の文字 'e' を指数表記を示すです。|  
|*指数桁の数字*|一連の数字の 0 から 9 指数部を指定するまでです。|  
  
 `s`パラメーターの組み合わせを使用して解釈されます、<xref:System.Globalization.NumberStyles.Float?displayProperty=fullName>と<xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=fullName>フラグ。 つまり、空白文字と桁区切り記号が許可されているが、通貨記号は表示されません。 要素を明示的に定義 \(などの通貨記号、桁区切り記号、および空白\) 内に存在することができます`s`を使用して、<xref:System.Single.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Single%40%29>メソッドのオーバー ロードします。  
  
 `s`で書式設定情報を使用してパラメーターを解析、<xref:System.Globalization.NumberFormatInfo>現在のシステムのカルチャに初期化されるオブジェクト。 詳細については、「<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=fullName>」を参照してください。 文字列を解析するその他の書式情報を使用して指定されたカルチャを使用して、<xref:System.Single.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Single%40%29>メソッドのオーバー ロードします。  
  
 通常、渡した場合、<xref:System.Single.TryParse%2A?displayProperty=fullName>メソッドを呼び出すことによって作成される文字列を<xref:System.Single.ToString%2A?displayProperty=fullName>、元のメソッド<xref:System.Single>値が返されます。 ただし、精度の損失、ため値可能性がありますいないなります。  
  
 区切り記号が発生した場合、`s`解析操作では、および適用可能な通貨または 10 進数の間にパラメーターと桁区切り記号が同じには、解析操作では、区切り文字が桁区切り記号ではなく、小数点区切り文字である前提としています。 区切り記号の詳細については、次を参照してください。 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>、 <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>、 <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>、および<xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>です。  
  
   
  
## 例  
 次の例では、<xref:System.Single.TryParse%28System.String%2CSystem.Single%40%29>数値の文字列形式を変換する方法の<xref:System.Single>値。 その EN\-US では、現在のカルチャと見なします。  
  
 [!code-csharp[System.Single.TryParse\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.tryparse/cs/tryparse1.cs#1)]
 [!code-vb[System.Single.TryParse\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.tryparse/vb/tryparse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.Parse(System.String)" />
        <altmember cref="M:System.Single.ToString" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider provider, out float result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, float32 result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.Single&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">変換する数値を表す文字列。</param>
        <param name="style">
          <c>s</c> で使用可能な書式を示す、列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.AllowThousands" /> と組み合わせた <see cref="F:System.Globalization.NumberStyles.Float" /> です。</param>
        <param name="provider">
          <c>s</c> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="result">変換が成功した場合、このメソッドから制御が戻った時点で、<c>s</c> に格納された数値または記号に等しい単精度浮動小数点数を格納します。変換に失敗した場合は 0 を格納します。<c>s</c> パラメーターが <see langword="null" /> または <see cref="F:System.String.Empty" /> である、<c>style</c> に準拠した形式ではない、<see cref="F:System.Single.MinValue" /> より小さいか <see cref="F:System.Single.MaxValue" /> より大きい数値を表す、または <c>style</c> が <see cref="T:System.Globalization.NumberStyles" /> 列挙定数の有効な組み合わせではない場合、変換は失敗します。 このパラメーターは初期化されていない状態で渡されています。<c>result</c> で最初に指定された任意の値が上書きされます。</param>
        <summary>指定したスタイルおよびカルチャに固有の書式による数値の文字列形式を、それと等価な単精度浮動小数点数に変換します。 戻り値は、変換が成功したか失敗したかを示します。</summary>
        <returns>
          <see langword="true" /> が正常に変換された場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このオーバー ロードとは異なります、<xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29>解析の数値の値を返す代わりに、解析操作が成功したかどうかを示すブール値を返すメソッド。 例外処理をテストするために使用する必要がある、<xref:System.FormatException>イベントで`s`無効なため、正常に解析することはできません。  
  
 `style`パラメーターの使用可能な形式を定義する、`s`解析操作が成功するためのパラメーターです。 ビット フラグの組み合わせを可能にする必要があります、<xref:System.Globalization.NumberStyles>列挙します。 次<xref:System.Globalization.NumberStyles>メンバーがサポートされていません。  
  
-   <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=fullName>  
  
-   <xref:System.Globalization.NumberStyles.HexNumber?displayProperty=fullName>  
  
 `s`パラメーターを含めることができます<xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>、 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>、<xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>によって示されるカルチャ`provider`です。 値に応じてさらに、 `style`、`s`パラメーターは、次の要素を含めることがあります。  
  
 \[ws\]\[$\]\[記号\]\[整数の桁\]、整数の桁 \[.fractional 桁\] \[e \[サインイン\] 指数の桁\] \[ws\]  
  
 角かっこ \(\[ および \]\) 内の要素は省略可能です。 次の表では、各要素について説明します。  
  
|要素|説明|  
|--------|--------|  
|*ws*|省略可能なホワイト スペースです。 先頭に空白文字は使用できません`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=fullName>フラグ。 末尾に表示できる`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=fullName>フラグ。|  
|*$*|カルチャ固有の通貨記号。 文字列内での位置がによって定義された、<xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=fullName>または<xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=fullName>のプロパティ、<xref:System.Globalization.NumberFormatInfo>によって返されるオブジェクト、<xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName>のメソッド、`provider`パラメーター。 通貨記号に表示される`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=fullName>フラグ。|  
|*sign*|省略可能な符号の場合。 先頭に表示できる符号`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=fullName>フラグ、およびそのがの末尾に置くことができます`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=fullName>フラグ。 かっこを使用できる`s`負の値を指定する場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=fullName>フラグ。|  
|*整数の桁*|一連の数字の 0 から 9 の数の整数部を指定するまでです。 整数の桁がなくてもかまいません桁の小数部がある場合。|  
|*,*|カルチャ固有の桁区切り記号。 現在のカルチャの数千に区切り記号が表示できる`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=fullName>フラグ。|  
|*」を参照してください。*|カルチャに固有の小数点記号です。 現在のカルチャの小数点記号に表示される`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=fullName>フラグ。|  
|*小数の桁*|一連の数字の 0 から 9 数の小数部を指定するまでです。 小数部の桁が表示できる`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=fullName>フラグ。|  
|*e*|E または E の文字は、ことを示します`s`指数表記を使用して数値を表すことができます。`s`スタイルが含まれている場合、パラメーターは指数表記の数値を表すことができます、<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=fullName>フラグ。|  
|*指数桁の数字*|一連の数字の 0 から 9 指数部を指定するまでです。|  
  
 数字のみを含む文字列 \(に対応する、<xref:System.Globalization.NumberStyles.None?displayProperty=fullName>スタイル\) が正常に解析します。 残りの<xref:System.Globalization.NumberStyles?displayProperty=fullName>メンバーを制御する可能性がありますが、入力文字列内に存在する必要はありません要素。 次の表に示す個別<xref:System.Globalization.NumberStyles>フラグに存在可能な要素に影響を与える`s`です。  
  
|NumberStyles 値|数字だけでなく s で許可されている要素|  
|--------------------|--------------------------|  
|<xref:System.Globalization.NumberStyles.None>|*整数の桁*要素のみです。|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|*.*と*小数部の桁*要素。|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|`s`パラメーターは、指数表記も使用できます。 それ自体では、このフラグは、形式で値をサポートしている*整数の桁*E*指数の桁*以外の場合は追加のフラグが正常に正または負の符号および小数点記号などの要素を含む指数表記で文字列を解析する必要です。|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|*Ws*の先頭にある要素`s`です。|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|*Ws*の末尾に要素`s`です。|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|*記号*の先頭にある要素`s`です。|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|*記号*の末尾に要素`s`です。|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|*記号*数値の値を囲むかっこの形式での要素。|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|*、*要素。|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|*$*要素。|  
|<xref:System.Globalization.NumberStyles.Currency>|すべて。`s`パラメーターには、16 進数または指数表記の数値を表すことはできません。|  
|<xref:System.Globalization.NumberStyles.Float>|*Ws*先頭または末尾の位置にある要素`s`、*記号*の先頭に`s`、および*.*シンボル。`s`パラメーターは、指数表記も使用できます。|  
|<xref:System.Globalization.NumberStyles.Number>|`ws`、 `sign`、何千もの区切り記号 \(*、\)、*と小数点 \(*.*\) 要素です。|  
|<xref:System.Globalization.NumberStyles.Any>|すべてのスタイルを除く`s`16 進数を表すことはできません。|  
  
 `provider`パラメーターは、<xref:System.IFormatProvider>実装が<xref:System.IFormatProvider.GetFormat%2A>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>カルチャに固有の書式情報を提供するオブジェクト。 ときに、<xref:System.Single.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Single%40%29>メソッドが呼び出され、呼び出し、`provider`パラメーターの<xref:System.IFormatProvider.GetFormat%2A>メソッド渡します、<xref:System.Type>を表すオブジェクト、<xref:System.Globalization.NumberFormatInfo>型です。<xref:System.IFormatProvider.GetFormat%2A>メソッドが戻ります、<xref:System.Globalization.NumberFormatInfo>の形式に関する情報を提供するオブジェクト、`s`パラメーター。 3 つの方法を使用する、`provider`パラメーター、解析操作にカスタムの書式情報を提供します。  
  
-   渡すことができます、<xref:System.Globalization.CultureInfo>の書式情報を提供するカルチャを表すオブジェクト。 その<xref:System.Globalization.CultureInfo.GetFormat%2A>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>そのカルチャの数値の書式設定情報を提供するオブジェクト。  
  
-   実際に渡すことができます<xref:System.Globalization.NumberFormatInfo>数値書式設定情報を提供するオブジェクト。 \(その実装の<xref:System.Globalization.NumberFormatInfo.GetFormat%2A>自体を返すだけです\)。  
  
-   実装するカスタム オブジェクトを渡すことができます<xref:System.IFormatProvider>です。 その<xref:System.IFormatProvider.GetFormat%2A>メソッドがインスタンス化し、返します、<xref:System.Globalization.NumberFormatInfo>書式情報を提供するオブジェクト。  
  
 場合`provider`は`null`の書式設定`s`に基づいて解釈されます、<xref:System.Globalization.NumberFormatInfo>現在のカルチャ オブジェクト。  
  
 区切り記号が発生した場合、`s`解析操作では、および適用可能な通貨または 10 進数の間にパラメーターと桁区切り記号が同じには、解析操作では、区切り文字が桁区切り記号ではなく、小数点区切り文字である前提としています。 区切り記号の詳細については、次を参照してください。 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>、 <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>、 <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>、および<xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>です。  
  
   
  
## 例  
 次の例での使用、<xref:System.Single.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Single%40%29?displayProperty=fullName>を特定のスタイルがあり、特定のカルチャの規則を使用してフォーマットされている数値の文字列表現を解析します。  
  
 [!code-csharp[System.Single.TryParse\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.tryparse/cs/tryparse1.cs#2)]
 [!code-vb[System.Single.TryParse\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.tryparse/vb/tryparse1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。  
  
 \-または\-  
  
 <paramref name="style" /> は <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値です。</exception>
        <altmember cref="M:System.Single.Parse(System.String)" />
        <altmember cref="M:System.Single.ToString" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>数値の文字列形式を、それと等しい単精度浮動小数点数に変換します。</summary>
        <altmember cref="Overload:System.Single.TryParse" />
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Single" /> の 2 つのインスタンスが同じ値を表しているかどうかを示す値を返します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このインスタンスの数値を、それと等価な文字列形式に変換します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このインスタンスと指定したオブジェクトまたは別の <see cref="T:System.Single" /> インスタンスを比較し、このインスタンスの値が指定したオブジェクトの値またはもう一方の <see cref="T:System.Single" /> インスタンスの値よりも小さいか、同じか、それとも大きいかを示す整数を返します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>数値の文字列形式を、それと等しい単精度浮動小数点数に変換します。 戻り値は、変換が成功したか失敗したかを示します。</summary>
        <altmember cref="Overload:System.Single.Parse" />
      </Docs>
    </MemberGroup>
  </Members>
</Type>