<Type Name="Action&lt;T&gt;" FullName="System.Action&lt;T&gt;">
  <TypeSignature Language="C#" Value="public delegate void Action&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`1" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">このデリゲートによってカプセル化されるメソッドのパラメーターの型。</typeparam>
    <param name="obj">このデリゲートによってカプセル化されるメソッドのパラメーター。</param>
    <summary>単一のパラメーターを受け取り、戻り値を持たないメソッドをカプセル化します。  
  
 この型の .NET Framework ソース コードを参照するを参照してください。、 [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/action.cs#486d58da4553e12d)です。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  この型の .NET Framework ソース コードを表示するを参照してください。、 [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/action.cs#486d58da4553e12d)です。 ソース コードをオンラインで参照、オフラインで表示、リファレンスをダウンロードおよび; デバッグ中にソース \(パッチや更新を含む\) をステップsee [instructions](http://referencesource.microsoft.com/).  
  
 使用することができます、<xref:System.Action%601>をパラメーターとして明示的にカスタム デリゲートを宣言しなくても、メソッドに渡すデリゲート。 カプセル化されるメソッドは、このデリゲートによって定義されているメソッドのシグネチャに対応する必要があります。 これは、カプセル化されるメソッドは、値によって渡された 1 つのパラメーターが必要し、値を返す必要がないことを意味します。 \(C\# の場合、メソッドが返す必要があります`void`です。 Visual Basic で定義する必要があります、`Sub`しています.`End Sub`構築します。 できますが無視される値を返すメソッド。\) 通常、このようなメソッドは、操作の実行に使用されます。  
  
> [!NOTE]
>  メソッドを参照する、1 つのパラメーターを持ち、値を返します、ジェネリックを使用して<xref:System.Func%602>代わりに委任します。  
  
 使用すると、<xref:System.Action%601>デリゲートがありませんを明示的に 1 つのパラメーターを持つメソッドをカプセル化するデリゲートを定義します。 たとえば、次のコードを明示的に宣言という名前のデリゲート`DisplayMessage`への参照を割り当てると、<xref:System.Console.WriteLine%2A>メソッドまたは`ShowWindowsMessage`メソッドのデリゲートのインスタンスにします。  
  
 [!code-cpp[System.Action~1\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/delegate.cpp#1)]
 [!code-csharp[System.Action~1\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Delegate.cs#1)]
 [!code-vb[System.Action~1\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Delegate.vb#1)]  
  
 次の例では、インスタンス化でこのコードが簡素化し、<xref:System.Action%601>明示的に新しいデリゲートを定義して、名前付きメソッドをそこに割り当てるのではなくデリゲート。  
  
 [!code-cpp[System.Action~1\#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/action`1.cpp#2)]
 [!code-csharp[System.Action~1\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Action1.cs#2)]
 [!code-vb[System.Action~1\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Action1.vb#2)]  
  
 使用することも、<xref:System.Action%601>次の例に示すように、C\# の場合は、匿名メソッドを持つデリゲートします。 \(匿名メソッドの概要については、次を参照してください[Anonymous Methods \(C\# Programming Guide\)](http://msdn.microsoft.com/ja-jp/a62441fa-f0a3-4acb-9aa6-93762a635275)。\)。  
  
 [!code-csharp[System.Action~1\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Anon.cs#3)]  
  
 ラムダ式を割り当てることができます、<xref:System.Action%601>次の例に示すように、インスタンスを委任します。 \(ラムダ式の概要については、次を参照してください[Lambda Expressions \(C\# Programming Guide\)](http://msdn.microsoft.com/ja-jp/57e3ba27-9a82-4067-aca7-5ca446b7bf93)。\)。  
  
 [!code-csharp[System.Action~1\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Lambda.cs#4)]
 [!code-vb[System.Action~1\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/lambda.vb#4)]  
  
 <xref:System.Collections.Generic.List%601.ForEach%2A>と<xref:System.Array.ForEach%2A>の各メソッドの実行、<xref:System.Action%601>をパラメーターとしてデリゲートします。 デリゲートによってカプセル化されるメソッドでは、配列またはリスト内の各要素に対してアクションを実行することができます。 この例では、<xref:System.Collections.Generic.List%601.ForEach%2A>具体的なを指定するメソッド。  
  
   
  
## 例  
 次の例での使用、<xref:System.Action%601>の内容を印刷するデリゲート、<xref:System.Collections.Generic.List%601>オブジェクト。 この例では、`Print`一覧の内容をコンソールに表示するメソッドを使用します。 さらに、c\# の例では、内容をコンソールに表示する匿名メソッドの使用も示します。 この例で明示的に宣言されていないことに注意してください、<xref:System.Action%601>変数。 代わりに、1 つのパラメーターを受け取るし、値を返さないメソッドへの参照を渡す、<xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=fullName>単一パラメーターを持つが、メソッド、<xref:System.Action%601>委任します。 同様に、例では、C\# の場合、<xref:System.Action%601>デリゲート明示的にインスタンス化されないため、匿名メソッドのシグネチャのシグネチャの一致、<xref:System.Action%601>で想定されるデリゲート、<xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=fullName>メソッドです。  
  
 [!code-csharp[System.Action\_PrintExample\#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action_PrintExample/cs/action.cs#01)]
 [!code-vb[System.Action\_PrintExample\#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action_PrintExample/vb/action.vb#01)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`2" />
  </Docs>
</Type>