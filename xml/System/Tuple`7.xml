<Type Name="Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;" FullName="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;">
  <TypeSignature Language="C#" Value="public class Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt; : IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Tuple`7&lt;T1, T2, T3, T4, T5, T6, T7&gt; extends System.Object implements class System.Collections.IStructuralComparable, class System.Collections.IStructuralEquatable, class System.IComparable" />
  <TypeSignature Language="DocId" Value="T:System.Tuple`7" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1" />
    <TypeParameter Name="T2" />
    <TypeParameter Name="T3" />
    <TypeParameter Name="T4" />
    <TypeParameter Name="T5" />
    <TypeParameter Name="T6" />
    <TypeParameter Name="T7" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IStructuralComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IStructuralEquatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T1">組の最初のコンポーネントの型。</typeparam>
    <typeparam name="T2">タプルの 2 番目のコンポーネントの型。</typeparam>
    <typeparam name="T3">タプルの 3 番目のコンポーネントの型。</typeparam>
    <typeparam name="T4">タプルの 4 番目のコンポーネントの型。</typeparam>
    <typeparam name="T5">組の 5 番目のコンポーネントの型。</typeparam>
    <typeparam name="T6">組の 6 番目のコンポーネントの型。</typeparam>
    <typeparam name="T7">タプルの 7 番目のコンポーネントの型。</typeparam>
    <summary>7 つ組、すなわちセプチュプルを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 組は、特定の数と一連の値を持つデータ構造です。<xref:System.Tuple%607>クラスを表します。 7 タプル、または 7 組、7 つのコンポーネントが含まれる組です。  
  
 インスタンス化することができます、<xref:System.Tuple%607>を呼び出して、オブジェクト、<xref:System.Tuple%607.%23ctor%2A>または静的な<xref:System.Tuple.Create%60%607%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%2C%60%606%29?displayProperty=fullName>メソッドです。 組のコンポーネントの値を取得するには、読み取り専用を使用して<xref:System.Tuple%607.Item1%2A>、 <xref:System.Tuple%607.Item2%2A>、 <xref:System.Tuple%607.Item3%2A>、 <xref:System.Tuple%607.Item4%2A>、 <xref:System.Tuple%607.Item5%2A>、 <xref:System.Tuple%607.Item6%2A>、および<xref:System.Tuple%607.Item7%2A>インスタンス プロパティです。  
  
 組は、4 つの方法でよく使用されます。  
  
-   単一のデータ セットを表します。 たとえば、組は、データベースのレコードを表すことができ、そのコンポーネントは、レコードの個別のフィールドを表すことができます。  
  
-   簡単にアクセスしたり、操作、データ セットを提供します。 次の例では定義、<xref:System.Tuple%607>から 2000年まで 1950年から各年の国勢調査をニューヨークの母集団のデータを含むオブジェクト。 セプタプルに渡される、 `ComputePopulationChange` censuses、だけでなく年間変化率の 60 一年期間の間の変更の年間の率を計算するメソッド。  
  
     [!code-csharp[System.Tuple\`7.Class\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`7.class/cs/example1.cs#1)]
     [!code-vb[System.Tuple\`7.Class\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`7.class/vb/example1.vb#1)]  
  
-   使用せず、メソッドから複数の値を返す`out`パラメーター \(c\#\) または`ByRef`パラメーター \(Visual Basic の場合\)。 たとえば、前の例を返します、計算された統計情報を市区町村名と共に、<xref:System.Tuple%607>オブジェクト。  
  
-   メソッドに渡される複数の値、1 つのパラメーターを使用します。 たとえば、<xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName>メソッドには、スレッドが起動時に実行するメソッドを 1 つの値を提供できる 1 つのパラメーターです。 指定した場合、<xref:System.Tuple%607>オブジェクト、メソッド引数として、データの 7 つの項目を含む、スレッドのスタートアップ ルーチンを指定することができます。  
  
   
  
## 例  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Tuple" />
    <altmember cref="T:System.Tuple`1" />
    <altmember cref="T:System.Tuple`2" />
    <altmember cref="T:System.Tuple`3" />
    <altmember cref="T:System.Tuple`4" />
    <altmember cref="T:System.Tuple`5" />
    <altmember cref="T:System.Tuple`6" />
    <altmember cref="T:System.Tuple`8" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Tuple (T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T1 item1, !T2 item2, !T3 item3, !T4 item4, !T5 item5, !T6 item6, !T7 item7) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
        <Parameter Name="item3" Type="T3" />
        <Parameter Name="item4" Type="T4" />
        <Parameter Name="item5" Type="T5" />
        <Parameter Name="item6" Type="T6" />
        <Parameter Name="item7" Type="T7" />
      </Parameters>
      <Docs>
        <param name="item1">組の最初のコンポーネントの値。</param>
        <param name="item2">組の 2 番目のコンポーネントの値。</param>
        <param name="item3">組の 3 番目のコンポーネントの値。</param>
        <param name="item4">組の 4 番目のコンポーネントの値</param>
        <param name="item5">組の 5 番目のコンポーネントの値。</param>
        <param name="item6">組の 6 番目のコンポーネントの値。</param>
        <param name="item7">組の 7 番目のコンポーネントの値。</param>
        <summary>
          <see cref="T:System.Tuple`7" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 静的なを使用する <xref:System.Tuple.Create%60%607%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%2C%60%606%29?displayProperty=fullName> メソッドを明示的にそのコンポーネントの種類を指定しなくても 7 組オブジェクトをインスタンス化します。 次の例では、 <xref:System.Tuple.Create%60%607%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%2C%60%606%29?displayProperty=fullName> 7 組の最初のコンポーネントは、型のインスタンスを作成するメソッド <xref:System.String> が残りのコンポーネントが次の種類と <xref:System.Int32>です。  
  
 [!code-csharp[System.Tuple.Create\#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs#13)]
 [!code-vb[System.Tuple.Create\#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb#13)]  
  
 これは、次の呼び出しに、 <xref:System.Tuple%607.%23ctor%2A> クラスのコンス トラクターです。  
  
 [!code-csharp[System.Tuple.Create\#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs#14)]
 [!code-vb[System.Tuple.Create\#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb#14)]  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`7.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">このインスタンスと比較するオブジェクト。</param>
        <summary>示す値を返すかどうか、現在 <see cref="T:System.Tuple`7" /> オブジェクトが、指定されたオブジェクトと等しい。</summary>
        <returns>
          <see langword="true" /> 現在のインスタンスが指定したオブジェクトに等しい場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `obj` パラメーターは次の条件下で、現在のインスタンスと等しいと見なされます。  
  
-   <xref:System.Tuple%607> オブジェクトです。  
  
-   その 7 つのコンポーネントは、現在のインスタンスと同じ型であります。  
  
-   その 7 つのコンポーネントは、現在のインスタンスのと同じです。 等しいかどうかは、各コンポーネントの既定のオブジェクトの等値比較子によって判断されます。  
  
   
  
## 例  
 次の例では、人口データを格納、ロサンゼルス、ニューヨーク 1950年から 2000年に 6 組の配列を定義します。 各 7 組の最初の部分では、市区町村を識別します。 最初の 3 番目、および 4 番目に septuples ニューヨークのデータを格納します。 最初の 7 組の 7 組の 4 番目の複製であります。 7 組の 3 つ目は、"New York"ではなく"New York City"として市区町村を識別します。 第 7 組は、最初と同じだけで、例に示す 7 組。  
  
 [!code-csharp[System.Tuple\`7.Equals\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`7.equals/cs/equals1.cs#1)]
 [!code-vb[System.Tuple\`7.Equals\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`7.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`7.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のハッシュ コードを返す <see cref="T:System.Tuple`7" /> オブジェクトです。</summary>
        <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item1">
      <MemberSignature Language="C#" Value="public T1 Item1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T1 Item1" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`7.Item1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T1</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の値を取得 <see cref="T:System.Tuple`7" /> オブジェクトの最初のコンポーネントです。</summary>
        <value>現在の値 <see cref="T:System.Tuple`7" /> オブジェクトの最初のコンポーネントです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 型は、動的に決定する、 <xref:System.Tuple%607.Item1%2A> で 2 つの方法のいずれかのコンポーネント。  
  
-   呼び出して、 `GetType` メソッドによって返される値を <xref:System.Tuple%607.Item1%2A> プロパティです。  
  
-   取得することによって、 <xref:System.Type> を表すオブジェクト、 <xref:System.Tuple%607> オブジェクト、およびによって返される配列から最初の要素を取得するには、 <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> メソッドです。  
  
   
  
## 例  
 次の例の配列を定義する <xref:System.Tuple%607> コンポーネントが含まれる 2000 1950年から 3 つの米国の都市 \(ニューヨーク、シカゴ、およびロサンゼルス\) の人口データを含むオブジェクト。 データを一覧表示するテーブルが表示されます。 表示するには、都市名の値を取得、 <xref:System.Tuple%607.Item1%2A> プロパティごとに <xref:System.Tuple%607> オブジェクトです。  
  
 [!code-csharp[System.Tuple\`7.Item1\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`7.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`7.Item1\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`7.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item2">
      <MemberSignature Language="C#" Value="public T2 Item2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T2 Item2" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`7.Item2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の値を取得 <see cref="T:System.Tuple`7" /> オブジェクトの 2 番目のコンポーネントです。</summary>
        <value>現在の値 <see cref="T:System.Tuple`7" /> オブジェクトの 2 番目のコンポーネントです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 型は、動的に決定する、 <xref:System.Tuple%607.Item2%2A> で 2 つの方法のいずれかのコンポーネント。  
  
-   呼び出して、 `GetType` メソッドによって返される値を <xref:System.Tuple%607.Item2%2A> プロパティです。  
  
-   取得することによって、 <xref:System.Type> を表すオブジェクト、 <xref:System.Tuple%607> オブジェクト、およびによって返される配列から 2 番目の要素を取得するその <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> メソッドです。  
  
   
  
## 例  
 次の例の配列を定義する <xref:System.Tuple%607> コンポーネントが含まれる 2000 1950年から 3 つの米国の都市 \(ニューヨーク、シカゴ、およびロサンゼルス\) の人口データを含むオブジェクト。 データを一覧表示するテーブルが表示されます。 表示するには 1950 年の人口の値を取得、 <xref:System.Tuple%607.Item2%2A> プロパティごとに <xref:System.Tuple%607> オブジェクトです。  
  
 [!code-csharp[System.Tuple\`7.Item1\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`7.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`7.Item1\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`7.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item3">
      <MemberSignature Language="C#" Value="public T3 Item3 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T3 Item3" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`7.Item3" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T3</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の値を取得 <see cref="T:System.Tuple`7" /> オブジェクトの 3 番目のコンポーネントです。</summary>
        <value>現在の値 <see cref="T:System.Tuple`7" /> オブジェクトの 3 番目のコンポーネントです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 型は、動的に決定する、 <xref:System.Tuple%607.Item3%2A> で 2 つの方法のいずれかのコンポーネント。  
  
-   呼び出して、 `GetType` メソッドによって返される値を <xref:System.Tuple%607.Item3%2A> プロパティです。  
  
-   取得することによって、 <xref:System.Type> を表すオブジェクト、 <xref:System.Tuple%607> オブジェクト、およびによって返される配列から 3 番目の要素を取得するその <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> メソッドです。  
  
   
  
## 例  
 次の例の配列を定義する <xref:System.Tuple%607> コンポーネントが含まれる 2000 1950年から 3 つの米国の都市 \(ニューヨーク、シカゴ、およびロサンゼルス\) の人口データを含むオブジェクト。 データを一覧表示するテーブルが表示されます。 表示するには 1960 年の人口の値を取得、 <xref:System.Tuple%607.Item3%2A> プロパティごとに <xref:System.Tuple%607> オブジェクトです。  
  
 [!code-csharp[System.Tuple\`7.Item1\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`7.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`7.Item1\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`7.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item4">
      <MemberSignature Language="C#" Value="public T4 Item4 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T4 Item4" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`7.Item4" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T4</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の値を取得 <see cref="T:System.Tuple`7" /> オブジェクトの 4 番目のコンポーネントです。</summary>
        <value>現在の値 <see cref="T:System.Tuple`7" /> オブジェクトの 4 番目のコンポーネントです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 型は、動的に決定する、 <xref:System.Tuple%607.Item4%2A> で 2 つの方法のいずれかのコンポーネント。  
  
-   呼び出して、 `GetType` メソッドによって返される値を <xref:System.Tuple%607.Item4%2A> プロパティです。  
  
-   取得することによって、 <xref:System.Type> を表すオブジェクト、 <xref:System.Tuple%607> オブジェクト、およびによって返される配列から 4 番目の要素を取得するその <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> メソッドです。  
  
   
  
## 例  
 次の例の配列を定義する <xref:System.Tuple%607> コンポーネントが含まれる 2000 1950年から 3 つの米国の都市 \(ニューヨーク、シカゴ、およびロサンゼルス\) の人口データを含むオブジェクト。 データを一覧表示するテーブルが表示されます。 表示するには 1970 年の人口の値を取得、 <xref:System.Tuple%607.Item4%2A> プロパティごとに <xref:System.Tuple%607> オブジェクトです。  
  
 [!code-csharp[System.Tuple\`7.Item1\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`7.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`7.Item1\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`7.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item5">
      <MemberSignature Language="C#" Value="public T5 Item5 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T5 Item5" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`7.Item5" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T5</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の値を取得 <see cref="T:System.Tuple`7" /> オブジェクトの 5 番目のコンポーネントです。</summary>
        <value>現在の値 <see cref="T:System.Tuple`7" /> オブジェクトの 5 番目のコンポーネントです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 型は、動的に決定する、 <xref:System.Tuple%607.Item5%2A> で 2 つの方法のいずれかのコンポーネント。  
  
-   呼び出して、 `GetType` メソッドによって返される値を <xref:System.Tuple%607.Item5%2A> プロパティです。  
  
-   取得することによって、 <xref:System.Type> を表すオブジェクト、 <xref:System.Tuple%607> オブジェクト、およびによって返される配列から 5 番目の要素を取得するには、 <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> メソッドです。  
  
   
  
## 例  
 次の例の配列を定義する <xref:System.Tuple%607> コンポーネントが含まれる 2000 1950年から 3 つの米国の都市 \(ニューヨーク、シカゴ、およびロサンゼルス\) の人口データを含むオブジェクト。 データを一覧表示するテーブルが表示されます。 表示するには 1980 年に人口の値を取得、 <xref:System.Tuple%607.Item5%2A> プロパティごとに <xref:System.Tuple%607> オブジェクトです。  
  
 [!code-csharp[System.Tuple\`7.Item1\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`7.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`7.Item1\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`7.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item6">
      <MemberSignature Language="C#" Value="public T6 Item6 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T6 Item6" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`7.Item6" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T6</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の値を取得 <see cref="T:System.Tuple`7" /> オブジェクトの 6 番目のコンポーネントです。</summary>
        <value>現在の値 <see cref="T:System.Tuple`7" /> オブジェクトの 6 番目のコンポーネントです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 型は、動的に決定する、 <xref:System.Tuple%607.Item6%2A> で 2 つの方法のいずれかのコンポーネント。  
  
-   呼び出して、 `GetType` メソッドによって返される値を <xref:System.Tuple%607.Item6%2A> プロパティです。  
  
-   取得することによって、 <xref:System.Type> を表すオブジェクト、 <xref:System.Tuple%607> オブジェクト、およびによって返される配列から 6 番目の要素を取得するには、 <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> メソッドです。  
  
   
  
## 例  
 次の例の配列を定義する <xref:System.Tuple%607> コンポーネントが含まれる 2000 1950年から 3 つの米国の都市 \(ニューヨーク、シカゴ、およびロサンゼルス\) の人口データを含むオブジェクト。 データを一覧表示するテーブルが表示されます。 表示するには 1990 年の人口の値を取得、 <xref:System.Tuple%607.Item6%2A> プロパティごとに <xref:System.Tuple%607> オブジェクトです。  
  
 [!code-csharp[System.Tuple\`7.Item1\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`7.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`7.Item1\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`7.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item7">
      <MemberSignature Language="C#" Value="public T7 Item7 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T7 Item7" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`7.Item7" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T7</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の値を取得 <see cref="T:System.Tuple`7" /> オブジェクトの 7 番目のコンポーネントです。</summary>
        <value>現在の値 <see cref="T:System.Tuple`7" /> オブジェクトの 7 番目のコンポーネントです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 型は、動的に決定する、 <xref:System.Tuple%607.Item7%2A> で 2 つの方法のいずれかのコンポーネント。  
  
-   呼び出して、 `GetType` メソッドによって返される値を <xref:System.Tuple%607.Item7%2A> プロパティです。  
  
-   取得することによって、 <xref:System.Type> を表すオブジェクト、 <xref:System.Tuple%607> オブジェクト、およびによって返される配列から 7 番目の要素を取得するには、 <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> メソッドです。  
  
   
  
## 例  
 次の例の配列を定義する <xref:System.Tuple%607> コンポーネントが含まれる 2000 1950年から 3 つの米国の都市 \(ニューヨーク、シカゴ、およびロサンゼルス\) の人口データを含むオブジェクト。 データを一覧表示するテーブルが表示されます。 表示するには 2000 年の人口の値を取得、 <xref:System.Tuple%607.Item7%2A> プロパティごとに <xref:System.Tuple%607> オブジェクトです。  
  
 [!code-csharp[System.Tuple\`7.Item1\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`7.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`7.Item1\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`7.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralComparable.CompareTo(object other, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="other">現在のインスタンスと比較するオブジェクト。</param>
        <param name="comparer">比較のためのカスタム ルールを提供するオブジェクト。</param>
        <summary>現在の比較 <see cref="T:System.Tuple`7" /> オブジェクトが指定された比較子を使用して、指定したオブジェクトと現在のオブジェクトが前に、後で、または並べ替え順序において、指定したオブジェクトと同じ位置にあるかどうかを示す整数を返します。</summary>
        <returns>このインスタンスの相対位置を示す符号付き整数と <paramref name="other" /> 並べ替え順、次の表に示すようにします。  
  
 <list type="table">  
<listheader>  
<term> 値  
  
 </term>  
<description> 説明  
  
 </description>  
</listheader>  
<item>  
<term> 負の整数  
  
 </term>  
<description> このインスタンスの位置が <paramref name="other" /> よりも前です。  
  
 </description>  
</item>  
<item>  
<term> 0  
  
 </term>  
<description> このインスタンスと <paramref name="other" /> 、並べ替え順序における位置が同じです。  
  
 </description>  
</item>  
<item>  
<term> 正の整数  
  
 </term>  
<description> このインスタンスの位置が <paramref name="other" /> よりも後ろです。  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス実装です。 これは、<xref:System.Tuple%607> のインスタンスが <xref:System.Collections.IStructuralComparable> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 このメソッドでは、カスタマイズした比較を定義できます。 <xref:System.Tuple%607> オブジェクトです。 たとえば、注文には、このメソッドを使用することができます <xref:System.Tuple%607> オブジェクトが特定のコンポーネントの値に基づいています。  
  
 コレクションを並べ替えることで、最もよく呼び出されますが、このメソッドは、直接呼び出すことができるを含むメソッド <xref:System.Collections.IComparer> パラメーター コレクションのメンバーの順序付けをします。 たとえば、メソッドによって呼び出されます、 <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=fullName> メソッドおよび <xref:System.Collections.SortedList.Add%2A> のメソッド、 <xref:System.Collections.SortedList> を使用してインスタンス化されたオブジェクト、 <xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=fullName> コンス トラクターです。  
  
> [!CAUTION]
>  <xref:System.Tuple%607.System%23Collections%23IStructuralComparable%23CompareTo%2A> 並べ替え操作で使用するためのメソッドです。 比較の主な目的は、2 つのオブジェクトが等しいかどうかを判断するときに、いない使用してください。 2 つのオブジェクトが等しいかどうかを確認するのには、呼び出し、 <xref:System.Tuple%607.System%23Collections%23IStructuralEquatable%23Equals%2A> メソッドです。  
  
   
  
## 例  
 次の例の配列を作成する <xref:System.Tuple%607> 1950年から 2000年への 3 つの米国都市の人口データが含まれているオブジェクト。 7 組の最初のコンポーネントは、市区町村名です。 残りの 5 つのコンポーネントでは、1950年から 2000年までの 10 年間の間隔で人口を表します。  
  
 `PopulationComparer` クラスには、 <xref:System.Collections.IComparer> 実装の配列ですが、コンポーネントのいずれかでソートする septuples です。 次の 2 つの値が提供、 `PopulationComparer` コンス トラクター内のクラス: 並べ替え順序を定義するコンポーネントの位置と <xref:System.Boolean> 組オブジェクトを昇順または降順で並べ替える必要があるかどうかを示す値。  
  
 例では、し、並べ替えられていない順序で配列要素を表示、3 番目のコンポーネント \(1960 年のカタログ作成\) で並べ替えてとに表示されますし 6 番目のコンポーネント \(1990 年にカタログ作成\) で並べ替えて、表示にします。  
  
 [!code-csharp[System.Tuple\`7.CompareTo\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`7.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`7.CompareTo\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`7.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="other" /> は <see cref="T:System.Tuple`7" /> オブジェクトではありません。</exception>
        <altmember cref="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.Equals">
      <MemberSignature Language="C#" Value="bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IStructuralEquatable.Equals(object other, class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="other">このインスタンスと比較するオブジェクト。</param>
        <param name="comparer">2 つのオブジェクトが等しいかどうかを評価に使用するメソッドを定義するオブジェクト。</param>
        <summary>示す値を返すかどうか、現在 <see cref="T:System.Tuple`7" /> オブジェクトが指定した比較方法に基づいて、指定されたオブジェクトと等しい。</summary>
        <returns>
          <see langword="true" /> 現在のインスタンスが指定したオブジェクトに等しい場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Tuple%607> のインスタンスが <xref:System.Collections.IStructuralEquatable> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=fullName> がない場合にのみ実装が呼び出される `null`, 、正常に指定できるかどうかにキャスト \(c\#\) またはに \(Visual Basic\) で変換、 <xref:System.Tuple%607> コンポーネントが含まれるの現在のインスタンスと同じ型であるオブジェクト。<xref:System.Tuple%607.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29> メソッドの最初のパス、 <xref:System.Tuple%607.Item1%2A> の値、 <xref:System.Tuple%607> と比較するオブジェクト、 <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=fullName> 実装します。 このメソッドの呼び出しが返された場合 `true`, 、メソッドが再度呼び出され、渡された、 <xref:System.Tuple%607.Item2%2A> 、2 つの値 <xref:System.Tuple%607> オブジェクトです。 メソッド呼び出しが復帰するまで繰り返さ `false` の特定のペアを比較するときに `Item` 値、または 2 つ <xref:System.Tuple%607.Item7%2A> 値、メソッドに渡されます。  
  
   
  
## 例  
 次の例、 `RateComparer` 等しいかどうか、カスタムのテストを実行するクラス。 場合に渡される値の <xref:System.Collections.IStructuralEquatable.Equals%2A?displayProperty=fullName> メソッドが型 <xref:System.Single> または <xref:System.Double>, 、メソッドが、3 つまでの小数部の桁を使用して、等しいかどうか確認します。 それ以外の場合、単純に呼び出して、 `x` パラメーターの `Equals` メソッドです。 この例では、ノードによって使用 <xref:System.Collections.IEqualityComparer> 4 つあるかどうかを判断する実装 <xref:System.Tuple%607> 1950年 ~ 2000年の人口変化率のデータを格納しているオブジェクトが等しい。  
  
 [!code-csharp[System.Tuple\`7.Equals\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`7.equals/cs/equals2.cs#2)]
 [!code-vb[System.Tuple\`7.Equals\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`7.equals/vb/equals2.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.GetHashCode">
      <MemberSignature Language="C#" Value="int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralEquatable.GetHashCode(class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="comparer">オブジェクトが <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> メソッドは、現在のハッシュ コードを計算 <see cref="T:System.Tuple`7" /> オブジェクトです。</param>
        <summary>現在のハッシュ コードを計算 <see cref="T:System.Tuple`7" /> オブジェクトの指定された計算方法を使用しています。</summary>
        <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Tuple%607> のインスタンスが <xref:System.Collections.IStructuralEquatable> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 メソッドは、単に、比較子オブジェクトの呼び出しをラップ <xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=fullName> 実装します。  
  
 ハッシュ コードの計算に使用されるアルゴリズムは、2 つの同じハッシュ コードを返す必要があります <xref:System.Tuple%607> 同等であると見なされるオブジェクト。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">現在のインスタンスと比較するオブジェクト。</param>
        <summary>現在の比較 <see cref="T:System.Tuple`7" /> オブジェクトを指定したオブジェクトに現在のオブジェクトが前に、後で、または並べ替え順序において、指定したオブジェクトと同じ位置にあるかどうかを示す整数を返します。</summary>
        <returns>このインスタンスの相対位置を示す符号付き整数と <paramref name="obj" /> 並べ替え順、次の表に示すようにします。  
  
 <list type="table">  
<listheader>  
<term> 値  
  
 </term>  
<description> 説明  
  
 </description>  
</listheader>  
<item>  
<term> 負の整数  
  
 </term>  
<description> このインスタンスの位置が <paramref name="obj" /> よりも前です。  
  
 </description>  
</item>  
<item>  
<term> 0  
  
 </term>  
<description> このインスタンスと <paramref name="obj" /> 、並べ替え順序における位置が同じです。  
  
 </description>  
</item>  
<item>  
<term> 正の整数  
  
 </term>  
<description> このインスタンスの位置が <paramref name="obj" /> よりも後ろです。  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Tuple%607> のインスタンスが <xref:System.IComparable> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 この方法では、 <xref:System.IComparable.CompareTo%2A?displayProperty=fullName> の実装、 <xref:System.Tuple%607> クラスです。 コレクションの並べ替えの既定のオーバー ロードによって呼び出される最も一般的ですが、メソッドを直接呼び出すことができる、メソッドなど <xref:System.Array.Sort%28System.Array%29?displayProperty=fullName> と <xref:System.Collections.SortedList.Add%2A?displayProperty=fullName>, 、コレクションのメンバーの順序付けをします。  
  
> [!CAUTION]
>  <xref:System.Tuple%607.System%23IComparable%23CompareTo%2A> 並べ替え操作で使用するためのメソッドです。 比較の主な目的は、2 つのオブジェクトが等しいかどうかを判断するときに、いない使用してください。 2 つのオブジェクトが等しいかどうかを確認するのには、呼び出し、 <xref:System.Tuple%607.Equals%28System.Object%29?displayProperty=fullName> メソッドです。  
  
 このメソッドでは、既定のオブジェクトの比較子を使用して、各コンポーネントを比較します。  
  
   
  
## 例  
 次の例の配列を作成する <xref:System.Tuple%607> 2000 1950年から米国の 3 つの都市の人口データを格納するオブジェクト。 7 つのコンポーネントは、2000年 ~ 1950年市区町村の人口を 10 年間の間隔で続く市区町村名で構成されます。 例では、並べ替えられていない配列の各タプルの要素を表示、配列を並べ替えを呼び出して、 <xref:System.Tuple%607.ToString%2A> 内の各組を表示するメソッドを並べ替えた順です。 配列が、最初のコンポーネントは、名前で並べ替えられている出力を示しています。 例では、直接呼び出しませんなお、 <xref:System.Tuple%607.System%23IComparable%23CompareTo%28System.Object%29> メソッドです。 このメソッドはによって暗黙的に、 <xref:System.Array.Sort%28System.Array%29> 配列の各要素に対してメソッドです。  
  
 [!code-csharp[System.Tuple\`7.CompareTo\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`7.compareto/cs/compareto1.cs#1)]
 [!code-vb[System.Tuple\`7.CompareTo\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`7.compareto/vb/compareto1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="obj" /> は <see cref="T:System.Tuple`7" /> オブジェクトではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Item">
      <MemberSignature Language="C#" Value="object System.Runtime.CompilerServices.ITuple.Item[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Runtime.CompilerServices.ITuple.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Item(System.Int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Length">
      <MemberSignature Language="C#" Value="int System.Runtime.CompilerServices.ITuple.Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Runtime.CompilerServices.ITuple.Length" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`7.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この値を表す文字列を返す <see cref="T:System.Tuple`7" /> インスタンス。</summary>
        <returns>この文字列表現 <see cref="T:System.Tuple`7" /> オブジェクトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドによって返される文字列の形式は \(*Item1*, 、*Item2*, 、*Item3*, 、*Item4*, 、`Item5, Item6, Item7`\) ここで、 *Item1*, 、*Item2*, 、*Item3*, 、*Item4*, 、*Item5*, 、*Item6*, 、および *Item7* の値を表す、 <xref:System.Tuple%607.Item1%2A>, 、<xref:System.Tuple%607.Item2%2A>, 、<xref:System.Tuple%607.Item3%2A>, 、<xref:System.Tuple%607.Item4%2A>, 、<xref:System.Tuple%607.Item5%2A>, 、<xref:System.Tuple%607.Item6%2A>, 、および <xref:System.Tuple%607.Item7%2A> プロパティそれぞれします。 プロパティ値のいずれかが場合 `null`, 、として表される <xref:System.String.Empty?displayProperty=fullName>です。  
  
   
  
## 例  
 次の例、 <xref:System.Tuple%607> 2000年から 1950年から人口調査に基づくニューヨーク市の人口データを格納しているオブジェクト。 呼び出しでは、6 組のコンポーネントが表示されます、 <xref:System.Tuple%607.ToString%2A> メソッドです。  
  
 [!code-csharp[System.Tuple\`7.ToString\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`7.tostring/cs/tostring1.cs#1)]
 [!code-vb[System.Tuple\`7.ToString\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`7.tostring/vb/tostring1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>