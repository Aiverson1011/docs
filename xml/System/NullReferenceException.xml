<Type Name="NullReferenceException" FullName="System.NullReferenceException">
  <TypeSignature Language="C#" Value="public class NullReferenceException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit NullReferenceException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.NullReferenceException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>null オブジェクト参照を逆参照しようとした場合にスローされる例外。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 A<xref:System.NullReferenceException>を値型のメンバーにアクセスしようとすると、例外がスローされます`null`です。 A<xref:System.NullReferenceException>例外は、通常開発者のエラーを反映し、次のシナリオでがスローされます。  
  
-   忘れた場合、参照型のインスタンスを作成します。 次の例では、`names`が宣言されていますが、インスタンス化されることはありません。  
  
     [!code-csharp[System.NullReferenceException.Class\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.nullreferenceexception.class/cs/example1.cs#1)]
     [!code-vb[System.NullReferenceException.Class\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.nullreferenceexception.class/vb/example1.vb#1)]  
  
     このコードをコンパイルするときに、一部のコンパイラは警告を発行します。 他のユーザーが、エラーを発行し、コンパイルは失敗します。 この問題を解決するには、オブジェクトのインスタンス、その値が不要になったように`null`です。 次の例ではこの型のクラスのコンス トラクターを呼び出すことによって行われます。  
  
     [!code-csharp[System.NullReferenceException.Class\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.nullreferenceexception.class/cs/example1a.cs#2)]
     [!code-vb[System.NullReferenceException.Class\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.nullreferenceexception.class/vb/example1a.vb#2)]  
  
-   これを初期化する前に配列の次元を忘れた場合。 次の例では、`values`整数の配列として宣言されたが、それに含まれる要素の数が指定されていません。 スローされたため、その値を初期化しないように、<xref:System.NullReferenceException>例外。  
  
     [!code-csharp[System.NullReferenceException.Class\#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.nullreferenceexception.class/cs/Array3.cs#10)]
     [!code-vb[System.NullReferenceException.Class\#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.nullreferenceexception.class/vb/Array3.vb#10)]  
  
     例外は、次の例のように、初期化する前に、配列内の要素の数を宣言することで回避できます。  
  
     [!code-csharp[System.NullReferenceException.Class\#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.nullreferenceexception.class/cs/Array4.cs#11)]
     [!code-vb[System.NullReferenceException.Class\#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.nullreferenceexception.class/vb/Array4.vb#11)]  
  
     宣言して、配列の初期化の詳細については、次を参照してください。[Arrays \(C\# Programming Guide\)](http://msdn.microsoft.com/ja-jp/bb79bdde-e570-4c30-adb0-1dd5759ae041)と[Arrays in Visual Basic](http://msdn.microsoft.com/ja-jp/dbf29737-b589-4443-bee6-a27588d9c67e)です。  
  
-   取得する、 **null** 、メソッドから値を返し、返される型のメソッドを呼び出します。 ドキュメント エラー; の結果は場合があります。メソッドの呼び出しが戻ることに注意してくださいにドキュメントが失敗した`null`です。 それ以外の場合に、コード誤って前提としています、メソッドが常に返される以外**null**値。  
  
     次の例のコードではの<xref:System.Array.Find%2A?displayProperty=fullName>メソッドは常に返します`Person`オブジェクト`FirstName`フィールドに一致する検索文字列。 一致が存在しないのでランタイムをスローします、<xref:System.NullReferenceException>例外。  
  
     [!code-csharp[System.NullReferenceException.Class\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.nullreferenceexception.class/cs/nullreturn2.cs#4)]
     [!code-vb[System.NullReferenceException.Class\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.nullreferenceexception.class/vb/nullreturn2.vb#4)]  
  
     この問題を解決するには、されていないことを確認するメソッドの戻り値をテスト`null`ように次の例では、そのメンバーを呼び出す前にします。  
  
     [!code-csharp[System.NullReferenceException.Class\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.nullreferenceexception.class/cs/nullreturn2a.cs#5)]
     [!code-vb[System.NullReferenceException.Class\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.nullreferenceexception.class/vb/nullreturn2a.vb#5)]  
  
-   式を使用している \(たとえばをチェーンしてメソッドまたはプロパティの一覧まとめて\) 値を取得するされ、値は、かどうかをチェックする場合、 `null`、ランタイムはまだ、スロー、<xref:System.NullReferenceException>例外。 これは、式の中間の値のいずれかを返します`null`です。 その結果、用、残りの部分`null`は評価されません。  
  
     次の例では定義、`Pages`によって提示される web ページに関する情報をキャッシュするオブジェクト`Page`オブジェクト。`Example.Main`メソッド セルの現在の web ページに null 以外のタイトルが付いて場合は、タイトルが表示されます。 この確認に関係なく、メソッドをスロー、<xref:System.NullReferenceException>例外。  
  
     [!code-csharp[System.NullReferenceException.Class\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.nullreferenceexception.class/cs/Chain1.cs#6)]
     [!code-vb[System.NullReferenceException.Class\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.nullreferenceexception.class/vb/Chain1.vb#6)]  
  
     例外がスローされます`pages.CurrentPage`返します`null`キャッシュにページの情報が格納されていない場合。 値をテストすることによってこの例外を修正することができます、`CurrentPage`現在を取得する前にプロパティ`Page`オブジェクトの`Title`プロパティ、次の例としては。  
  
     [!code-csharp[System.NullReferenceException.Class\#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.nullreferenceexception.class/cs/Chain2.cs#7)]
     [!code-vb[System.NullReferenceException.Class\#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.nullreferenceexception.class/vb/Chain2.vb#7)]  
  
-   参照型、およびプロセスの要素の 1 つをスローしようとして、格納する配列の要素を列挙している、<xref:System.NullReferenceException>例外。  
  
     次の例では、文字列の配列を定義します。 A`for`ステートメントは、配列内の要素を列挙し、呼び出す各文字列の<xref:System.String.Trim%2A>文字列を表示する前にメソッドです。  
  
     [!code-csharp[System.NullReferenceException.Class\#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.nullreferenceexception.class/cs/Array1.cs#8)]
     [!code-vb[System.NullReferenceException.Class\#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.nullreferenceexception.class/vb/Array1.vb#8)]  
  
     配列の各要素が null 以外の値を含める必要があります、配列要素の値が実際と仮定した場合、この例外が発生した`null`です。 要素があるかどうかをテストして、例外を排除できる`null`その要素に任意の操作を実行する前に次の例として示します。  
  
     [!code-csharp[System.NullReferenceException.Class\#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.nullreferenceexception.class/cs/Array2.cs#9)]
     [!code-vb[System.NullReferenceException.Class\#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.nullreferenceexception.class/vb/Array2.vb#9)]  
  
-   A<xref:System.NullReferenceException>に渡されるメソッドが例外をスロー`null`です。 一部のメソッドに渡される引数を検証します。 ように設定すると、引数の 1 つは`null`がスローされます、<xref:System.ArgumentNullException?displayProperty=fullName>例外。 それ以外の場合、スロー、<xref:System.NullReferenceException>例外。 次の例では、このシナリオを示します。  
  
     [!code-csharp[System.NullReferenceException.Class\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.nullreferenceexception.class/cs/example2.cs#3)]
     [!code-vb[System.NullReferenceException.Class\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.nullreferenceexception.class/vb/example2.vb#3)]  
  
     この問題に対処する必ずメソッドに渡される引数がない`null`でスローされた例外を処理または、`try…catch…finally`ブロックします。 詳細については、「[Handling and Throwing Exceptions](http://msdn.microsoft.com/ja-jp/f99a1d29-a2a8-47af-9707-9909f9010735)」を参照してください。  
  
 The following Microsoft intermediate language \(MSIL\) instructions throw <xref:System.NullReferenceException>: `callvirt`, `cpblk`, `cpobj`, `initblk`, `ldelem.<type>`, `ldelema`, `ldfld`, `ldflda`, `ldind.<type>`, `ldlen`, `stelem.<type>`, `stfld`, `stind.<type>`, `throw`, and `unbox`.  
  
 <xref:System.NullReferenceException>値は 0x80004003 HRESULT COR\_E\_NULLREFERENCE を使用します。  
  
 インスタンスの初期プロパティ値の一覧については<xref:System.NullReferenceException>を参照してください、<xref:System.NullReferenceException.%23ctor%2A>コンス トラクターです。  
  
 **リリース コードにおける NullReferenceException の処理**  
  
 通常発生後に処理するよりも、NullReferenceException を回避することをお勧めします。 例外の処理によって、コードは管理や理解が難しくなることがあるうえ、他のバグが生じることも考えられます。 NullReferenceException は多くの場合、回復不能なエラーです。 こうした場合、例外によってアプリを停止させることが最良の代替策である可能性があります。  
  
 ただし、次のように、エラーの処理が有用である状況は多く存在します。  
  
-   アプリは null であるオブジェクトを無視できます。 たとえば、アプリがデータベース内のレコードを取得して処理する場合、結果として null オブジェクトである、いくつかの不良レコードを無視できる可能性があります。 必要な処理は、ログ ファイルまたはアプリケーションの UI に不良データを記録することだけであることが考えられます。  
  
-   例外から回復することができます。 たとえば、参照型を返す Web サービスの呼び出しは、接続が失われた場合や接続がタイムアウトした場合には、null を返す可能性があります。 接続を再確立し、呼び出しを再度試すことができます。  
  
-   アプリの状態を有効な状態に復元できます。 たとえば、NullReferenceException をスローするメソッドを呼び出す前に、情報をデータ ストアに保存する必要がある、複数手順のタスクを実行していることがあります。 初期化されていないオブジェクトがデータ レコードを破損する可能性がある場合、アプリを終了する前に過去のデータを削除できます。  
  
-   例外の報告が推奨されます。 たとえば、エラーがアプリのユーザーによる間違いに起因する場合、メッセージを生成して、ユーザーが正しい情報を入力するのを支援できます。 問題の解決に役立てるために、エラーに関する情報をログに記録することもできます。 ASP.NET などのいくつかのフレームワークには、アプリのクラッシュを防止するために、すべてのエラーをキャプチャする上位レベルの例外ハンドラーが用意されています。このハンドラーを使用した場合、例外をログに記録することが、その例外が発生したことを知る唯一の方法になる可能性があります。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NullReferenceException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.NullReferenceException.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>新しいインスタンスを初期化、<see cref="T:System.NullReferenceException" />クラス、設定、 <see cref="P:System.Exception.Message" /> 「値が 'null' が見つかりましたオブジェクトのインスタンスが必要である」などに、エラーを説明するシステム提供のメッセージの新しいインスタンスのプロパティ。 このメッセージには、現在のシステムのカルチャが考慮されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.NullReferenceException> のインスタンスの初期プロパティ値を次の表に示します。  
  
|プロパティ|値|  
|-----------|-------|  
|<xref:System.Exception.InnerException%2A>|`null`。|  
|<xref:System.Exception.Message%2A>|ローカライズされたエラー メッセージ文字列。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NullReferenceException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.NullReferenceException.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">エラーを説明する <see cref="T:System.String" />。<c>message</c> の内容は、ユーザーが理解できる内容にします。 このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</param>
        <summary>指定したエラー メッセージを使用して、<see cref="T:System.NullReferenceException" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.NullReferenceException> のインスタンスの初期プロパティ値を次の表に示します。  
  
|プロパティ|値|  
|-----------|-------|  
|<xref:System.Exception.InnerException%2A>|`null`。|  
|<xref:System.Exception.Message%2A>|エラー メッセージ文字列。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NullReferenceException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.NullReferenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
        <param name="context">転送元または転送先に関する文脈情報。</param>
        <summary>シリアル化したデータを使用して、<see cref="T:System.NullReferenceException" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンストラクターは、逆シリアル化中に、ストリームで送信された例外オブジェクトを再構築するために呼び出されます。 詳細については、「[XML and SOAP Serialization](http://msdn.microsoft.com/ja-jp/832ac524-21bc-419a-a27b-ca8bfc45840f)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NullReferenceException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.NullReferenceException.#ctor(System.String,System.Exception)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">例外の原因を説明するエラー メッセージ。</param>
        <param name="innerException">現在の例外の原因となった例外。<c>innerException</c> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
        <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.NullReferenceException" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 前の例外の直接の結果としてスローされる例外については、<xref:System.Exception.InnerException%2A> プロパティに、前の例外への参照が格納されます。<xref:System.Exception.InnerException%2A> プロパティは、コンストラクターに渡されたものと同じ値を返します。`null` プロパティによって内部例外値がコンストラクターに渡されなかった場合は、<xref:System.Exception.InnerException%2A> を返します。  
  
 <xref:System.NullReferenceException> のインスタンスの初期プロパティ値を次の表に示します。  
  
|プロパティ|値|  
|-----------|-------|  
|<xref:System.Exception.InnerException%2A>|内部例外の参照。|  
|<xref:System.Exception.Message%2A>|エラー メッセージ文字列。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.NullReferenceException" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>