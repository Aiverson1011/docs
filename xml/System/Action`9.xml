<Type Name="Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9&gt;" FullName="System.Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9&gt;">
  <TypeSignature Language="C#" Value="public delegate void Action&lt;in T1,in T2,in T3,in T4,in T5,in T6,in T7,in T8,in T9&gt;(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`9&lt;- T1, - T2, - T3, - T4, - T5, - T6, - T7, - T8, - T9&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`9" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T4">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T5">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T6">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T7">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T8">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T9">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
    <Parameter Name="arg3" Type="T3" />
    <Parameter Name="arg4" Type="T4" />
    <Parameter Name="arg5" Type="T5" />
    <Parameter Name="arg6" Type="T6" />
    <Parameter Name="arg7" Type="T7" />
    <Parameter Name="arg8" Type="T8" />
    <Parameter Name="arg9" Type="T9" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの最初のパラメーターの型。</typeparam>
    <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの 2 番目のパラメーターの型。</typeparam>
    <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの 3 番目のパラメーターの型。</typeparam>
    <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの 4 番目のパラメーターの型。</typeparam>
    <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの 5 番目のパラメーターの型。</typeparam>
    <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの 6 番目のパラメーターの型。</typeparam>
    <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの 7 番目のパラメーターの型。</typeparam>
    <typeparam name="T8">このデリゲートによってカプセル化されるメソッドの 8 番目のパラメーターの型。</typeparam>
    <typeparam name="T9">このデリゲートによってカプセル化されるメソッドの 9 番目のパラメーターの型。</typeparam>
    <param name="arg1">このデリゲートによってカプセル化されるメソッドの最初のパラメーター。</param>
    <param name="arg2">このデリゲートによってカプセル化されるメソッドの 2 番目のパラメーター。</param>
    <param name="arg3">このデリゲートによってカプセル化されるメソッドの 3 番目のパラメーター。</param>
    <param name="arg4">このデリゲートによってカプセル化されるメソッドの 4 番目のパラメーター。</param>
    <param name="arg5">このデリゲートによってカプセル化されるメソッドの 5 番目のパラメーターです。</param>
    <param name="arg6">このデリゲートによってカプセル化されるメソッドの 6 番目のパラメーターです。</param>
    <param name="arg7">このデリゲートによってカプセル化されるメソッドの 7 番目のパラメーターです。</param>
    <param name="arg8">このデリゲートによってカプセル化されるメソッドの 8 番目のパラメーターです。</param>
    <param name="arg9">このデリゲートによってカプセル化されるメソッドの 9 番目のパラメーターです。</param>
    <summary>9 個のパラメーターを持ち、値を返さないメソッドをカプセル化します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することができます、<xref:System.Action%609>をパラメーターとして明示的にカスタム デリゲートを宣言しなくても、メソッドに渡すデリゲート。 カプセル化されるメソッドは、このデリゲートによって定義されているメソッドのシグネチャに対応する必要があります。 つまり、値を返す必要がありますいないをカプセル化されるメソッドは、値を渡し、9 個のパラメーターを持つ必要があります。 \(C\# の場合、メソッドが返す必要があります`void`です。 Visual basic で変数が定義されますが、`Sub`しています.`End Sub`を構築します。 できますが無視される値を返すメソッド。\) 通常、このようなメソッドは、操作の実行に使用されます。  
  
> [!NOTE]
>  9 個のパラメーターを持ち、値を返すメソッドを参照するには、使用、ジェネリック<xref:System.Func%6010>代わりに委任します。  
  
 使用することも、<xref:System.Action%609>匿名メソッド、ラムダ式を持つデリゲートします。  
  
   
  
## 例  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`10" />
  </Docs>
</Type>