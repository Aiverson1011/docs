<Type Name="Func&lt;TResult&gt;" FullName="System.Func&lt;TResult&gt;">
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;out TResult&gt;();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`1&lt;+ TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`1" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters />
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TResult">このデリゲートによってカプセル化されるメソッドの戻り値の型。</typeparam>
    <summary>パラメーターを持たず、<paramref name="TResult" /> パラメーターで指定された型の値を返すメソッドをカプセル化します。</summary>
    <returns>このデリゲートによってカプセル化されるメソッドの戻り値。</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 このデリゲートを使用して、カスタム デリゲートを明示的に宣言することがなく、パラメーターとして渡すことができるメソッドを表すことができます。 カプセル化されたメソッドは、このデリゲートによって定義されるメソッド シグネチャに一致している必要があります。 つまり、カプセル化されるメソッドはパラメーターが必要ないと、値を返す必要があります。  
  
> [!NOTE]
>  パラメーターを持たないして返すメソッドを参照する `void` \(として宣言されている Visual basic、または、 `Sub` ではなくとして、 `Function`\) を使用して、 <xref:System.Action> 代わりに委任します。  
  
 使用すると、 <xref:System.Func%601> デリゲートがありませんをパラメーターなしのメソッドをカプセル化するデリゲートを明示的に定義します。 たとえば、次のコードを明示的に宣言という名前のデリゲート `WriteMethod` への参照を割り当てると、 `OutputTarget.SendToFile` インスタンス メソッドのデリゲートのインスタンスにします。  
  
 [!code-csharp[System.Func~1\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Delegate.cs#1)]
 [!code-vb[System.Func~1\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Delegate.vb#1)]  
  
 次の例は、インスタンス化してこのコードを簡略化、 <xref:System.Func%601> 明示的に新しいデリゲートを定義して、名前付きメソッドをそこに割り当てる代わりにデリゲートします。  
  
 [!code-csharp[System.Func~1\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Func1.cs#2)]
 [!code-vb[System.Func~1\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Func1.vb#2)]  
  
 使用することができます、 <xref:System.Func%601> 次の例に示すように、C\# の場合は、匿名メソッドを持つデリゲートします。 \(匿名メソッドの概要については、次を参照してください [Anonymous Methods \(C\# Programming Guide\)](http://msdn.microsoft.com/ja-jp/a62441fa-f0a3-4acb-9aa6-93762a635275)。\)。  
  
 [!code-csharp[System.Func~1\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Anon.cs#3)]  
  
 ラムダ式を割り当てることができます、 <xref:System.Func%602> 次の例に示すように委任します。 \(ラムダ式の概要については、次を参照してください [Lambda Expressions](http://msdn.microsoft.com/ja-jp/137064b0-3928-4bfa-ba71-c3f9cbd951e2) と [Lambda Expressions \(C\# Programming Guide\)](http://msdn.microsoft.com/ja-jp/57e3ba27-9a82-4067-aca7-5ca446b7bf93)。\)。  
  
 [!code-csharp[System.Func~1\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Lambda.cs#4)]
 [!code-vb[System.Func~1\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Lambda.vb#4)]  
  
 ラムダ式の基になる型は、ジェネリックの 1 つ `Func` デリゲート。 これによって、デリゲートを明示的に割り当てることがなく、ラムダ式をパラメーターとして渡します。 具体的には、ための型の多くのメソッド、 <xref:System.Linq> 名前空間が `Func` パラメーターを渡すことができますこれらのメソッド、ラムダ式に明示的にインスタンス化しなくても、 `Func` を委任します。  
  
 結果が実際に必要な場合にのみ実行する高負荷な計算がある場合は、高価な関数を割り当てることのできる、 <xref:System.Func%601> を委任します。 値にアクセスされるプロパティが式の中で使用されるまで、関数の実行を遅延し、ことができます。 次のセクションの例では、これを行う方法を示します。  
  
   
  
## 例  
 次の例では、パラメーターをとらないデリゲートを使用する方法を示します。 このコードではという名前のジェネリック クラス `LazyValue` 型のフィールドを持つ <xref:System.Func%601>です。 このデリゲート フィールドの型パラメーターに対応する型の値を返す関数への参照を格納できます、 `LazyValue` オブジェクトです。`LazyValue` 型自体には、 `Value` プロパティです \(これが既に実行されていない\) 場合、関数を実行し、結果の値を返します。  
  
 この例は、2 つのメソッドを作成し、2 つのインスタンスを作成 `LazyValue` をこれらのメソッドを呼び出すラムダ式を持つオブジェクト。 ラムダ式は、メソッドを呼び出すだけなのでパラメーターになりません。 出力を 2 つのメソッドが実行される場合にのみの各値 `LazyValue` オブジェクトを取得します。  
  
 [!code-csharp[System.Func~1\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Example.cs#5)]
 [!code-vb[System.Func~1\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>