<Type Name="Uri" FullName="System.Uri">
  <TypeSignature Language="C#" Value="public class Uri : System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Uri extends System.Object implements class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Uri" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.UriTypeConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>URI \(Uniform Resource Identifier\) のオブジェクト表現を可能にし、URI の一部へ簡単にアクセスできるようにします。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 URI は、インターネットまたはイントラネット上のアプリケーションを使用可能なリソースの簡潔な表現です。<xref:System.Uri> クラスは、プロパティと解析、比較、および結合を含む Uri を処理するためのメソッドを定義します。<xref:System.Uri> クラスのプロパティは読み取り専用です。 変更可能なオブジェクトを作成する、 <xref:System.UriBuilder> クラスです。  
  
 相対 Uri \(たとえば、"\/new\/index.htm"\) は、絶対ようにベース URI に関して拡張する必要があります。<xref:System.Uri.MakeRelative%2A> 絶対 Uri を必要な場合に、相対 Uri に変換するメソッドが用意されています。  
  
 <xref:System.Uri> 文字列がパターンの識別子を含む整形式 URI である場合、コンス トラクターは URI の文字列をエスケープしないしないでください。  
  
 <xref:System.Uri> プロパティは、Unicode 値を対応する 16 進交換 127 より大きいすべての文字のエスケープ エンコーディングで正規データ形式を返します。 正規の形式に URI を格納する、 <xref:System.Uri> コンス トラクターは、次の手順を実行します。  
  
-   URI スキームを小文字に変換します。  
  
-   ホスト名を小文字に変換します。  
  
-   IPv6 アドレスをホスト名には、標準の IPv6 アドレスが使用されます。 \< その他の省略可能な IPv6 データが削除されます。  
  
-   既定値と空のポート番号を削除します。  
  
-   圧縮のシーケンスから階層構造の uri のパスをなど正規化\/.\/、\/.\/、\/\/などのエスケープ表現。 一部のスキームをエスケープ表現がある注意は圧縮されません。  
  
-   階層構造の Uri であるスラッシュ \(\/\)、ホストを終了していない場合は、1 つが追加されます。  
  
-   既定では、URI 内の予約文字は、RFC 2396 に従ってエスケープされます。 この動作の変更、URI のどのケースの予約文字で国際リソース識別子または国際ドメイン名の解析が有効な場合は、RFC 3986 および RFC 3987 エスケープされます。  
  
 一部のスキームのコンス トラクターでの正規化の一部として、エスケープ表現が圧縮されます。 URI がエスケープ シーケンスを圧縮設定には、次が含まれます。: ファイル、http、https、net.pipe、および net.tcp です。 その他のスキームは、エスケープ シーケンスは圧縮されません。 例: 2 つのドットをエンコードするパーセント場合".." "% 2E %2e"し、URI としてコンス トラクターは一部のスキームではこのシーケンスを圧縮します。 たとえば、次のコード サンプルは、http スキームの URI のコンス トラクターを示します。  
  
```  
  
Uri uri = new Uri("http://myUrl/%2E%2E/%2E%2E");  
Console.WriteLine(uri.AbsoluteUri);  
Console.WriteLine(uri.PathAndQuery);  
  
```  
  
 このコードを実行すると、エスケープ シーケンスには、次の出力の圧縮が返されます。  
  
```  
  
http://myUrl/  
/  
  
```  
  
 次のコード例では、ftp スキームの URI のコンス トラクターを示します。  
  
```  
  
Uri uri = new Uri("ftp://myUrl/%2E%2E/%2E%2E");  
Console.WriteLine(uri.AbsoluteUri);  
Console.WriteLine(uri.PathAndQuery);  
  
```  
  
 このコードを実行すると、圧縮されません。 エスケープ シーケンスには、次の出力が返されます。  
  
```  
  
ftp://myUrl/%2E%2E/%2E%2E  
/%2E%2E/%2E%2E  
  
```  
  
 内容を変換する、 <xref:System.Uri> クラスを使用して読み取り可能な URI 参照にエスケープでエンコードされた URI 参照から、 <xref:System.Uri.ToString%2A> メソッドです。 出力でエスケープするいくつかの予約文字の動作が継続なお、 <xref:System.Uri.ToString%2A> メソッドです。 これは、URI によって返された値からの明確な再構築をサポートする <xref:System.Uri.ToString%2A>です。  
  
 一部の Uri には、フラグメント id またはクエリが含まれます。 フラグメント識別子はテキストに続くシャープ記号 \(\#\)、シャープ記号; を含まないフラグメントのテキストに格納されます、 <xref:System.Uri.Fragment%2A> プロパティです。 クエリの情報は、URI に疑問符 \(?\) に続くテキストです。クエリ テキストが格納されている、 <xref:System.Uri.Query%2A> プロパティです。  
  
 .NET Framework ではバージョン 1.1 では、不明なスキームと"c:\\"、Uri クラスのコンス トラクターに指定された文字列が含まれている場合、挿入"\/\/"コロンの後にします。 たとえば、URI `xyz:c:\abc` に変換 `xyz://c:/abc`します。 .NET Framework version 2.0 では、この動作が削除されると、文字列の例に変換されます `xyz:c:/abc`します。  
  
> [!NOTE]
>  URI クラスは、両方 10 進表記の IPv4 プロトコルと IPv6 プロトコルのコロン区切り 16 進で IP アドレスの使用をサポートします。 必ず、IPv6 アドレス http:\/\/\[::1 と同様に、角かっこで囲む\] ください。  
  
## International Resource Identifier のサポート  
 通常は web アドレスは、非常に制限されている一連の文字で構成される uniform resource identifier を使用して表されます。  
  
-   大文字と小文字のみ英語のアルファベット文字の ASCII 文字。  
  
-   0 から 9 の数字。  
  
-   その他の ASCII 記号数が少ない。  
  
 Uri の仕様は、RFC 2396、RFC 2732、RFC 3986 およびインターネット技術標準化委員会 \(IETF\) によって発行された RFC 3987 に記載されています。  
  
 インターネットの増加には、英語以外の言語を使用してリソースを識別するために拡大する必要性です。 このニーズを満たすため、非 ASCII 文字 \(unicode\/iso 10646 文字セットの文字\) 使用される識別子は、International Resource Identifier \(Iri\) と呼ばれます。 RFC 3987 IETF によって公開されるは、あやめの仕様が記載されています。 あやめを使用すると、Unicode 文字への URL ができます。  
  
 既存の <xref:System.Uri> クラスが .NET Framework v3.5、3.0 SP1 で拡張され、RFC 3987 に基づいて、2.0 SP1 には、IRI をサポートします。 IRI を有効にしない限り、.NET Framework 2.0 の動作から変化はバージョン 4.5 より前に .NET Framework のバージョンのユーザーに表示されません。 これにより、アプリケーション、.NET Framework の以前のバージョンとの互換性。  
  
 IRI のサポートを有効にするのには、次の変更が必要です。  
  
-   国際化ドメイン名 \(IDN\) 解析ドメイン名に適用するかどうかと、IRI 解析規則を適用する必要があるかどうかを指定します。 これは、machine.config ファイルまたは app.config ファイルで実行できます。 たとえば、次のように追加します。  
  
    ```  
    <configuration>  
      <uri>  
      <idn enabled="All" />  
      <iriParsing enabled="true" />  
      </uri>  
    </configuration>  
    ```  
  
 .NET Framework 4.5 以降のユーザーは、有効になっている IRI を常にあります。 IRI 解析は変更できません .config ファイルを使用します。  
  
 IDN を有効にすると、ドメイン名のすべての Unicode のラベルが、対応する Punycode に変換されます。 Punycode 名は、ASCII 文字のみを常に xn\-\-プレフィックスで始まります。 この理由は、ほとんどの DNS サーバーのみ \(RFC 3940 を参照してください\) の ASCII 文字をサポートするために、インターネット上に既存の DNS サーバーをサポートするためにです。  
  
 値に影響を与える IRI および IDN を有効にすると、 <xref:System.Uri.DnsSafeHost%2A?displayProperty=fullName> プロパティです。 IRI および IDN を有効にすることができますの動作を変更も、 <xref:System.Uri.Equals%2A>, 、<xref:System.Uri.OriginalString%2A>, 、<xref:System.Uri.GetComponents%2A>, 、および <xref:System.Uri.IsWellFormedOriginalString%2A> メソッドです。  
  
 使用する DNS サーバーによって、IDN 可能な値は次の 3 つがあります。  
  
-   idn を有効になっている \= All  
  
     この値は、任意の Unicode ドメイン名を Punycode 対応 \(IDN 名\) に変換されます。  
  
-   idn を有効になっている AllExceptIntranet \=  
  
     この値は、Punycode 形式 \(IDN 名\) を使用するローカルのイントラネットではなく、すべての Unicode ドメイン名に変換されます。 ここでローカル イントラネットで国際名を処理するためのイントラネットで使用される DNS サーバーは、Unicode 名前解決をサポートする必要があります。  
  
-   idn を有効になっている \= なし  
  
     この値には、Punycode を使用する Unicode ドメイン名は変換されません。 これは、.NET Framework 2.0 の動作と整合する既定値です。  
  
 IRI 解析が有効な場合 \(有効になっている iriParsing \= `true`\) RFC 3986 および RFC 3987 の最新の IRI 規則に従って正規化と文字のチェックが行われます。 IRI 解析を無効にすると、正規化と文字のチェックが \(IPv6 リテラル\) の RFC 2396 および RFC 2732 に従って実行します。  既定値は、バージョン 4.5 より前に .NET Framework のバージョンは、 `false`です。 既定値は、.NET framework 4.5 以降のバージョン、 `true`, 、.config ファイルの設定によって、IRI 解析の有効状態を変更できません。  
  
 IRI および IDN の処理、 <xref:System.Uri> を使用してクラスを制御することも、 <xref:System.Configuration.IriParsingElement?displayProperty=fullName>, 、<xref:System.Configuration.IdnElement?displayProperty=fullName>, 、および <xref:System.Configuration.UriSection?displayProperty=fullName> 構成設定のクラスです。<xref:System.Configuration.IriParsingElement?displayProperty=fullName> 設定を有効または IRI で処理を無効になります、 <xref:System.Uri> クラスです。<xref:System.Configuration.IdnElement?displayProperty=fullName> 設定を有効または IDN の処理を無効化、 <xref:System.Uri> クラスです。<xref:System.Configuration.IriParsingElement?displayProperty=fullName> も直接設定されていない IDN を制御します。 IDN を可能にする処理に IRI 処理を有効にする必要があります。 IRI 処理が無効になっている場合、IDN 処理は既定の設定が .NET Framework 2.0 の動作は、互換性のために使用されており、IDN 名を使用しないに設定されます。  
  
 構成の設定、 <xref:System.Configuration.IriParsingElement?displayProperty=fullName> と <xref:System.Configuration.IdnElement?displayProperty=fullName> 読み込むことが 1 回と最初の <xref:System.Uri?displayProperty=fullName> クラスを構築します。 その後の構成設定の変更は無視されます。  
  
 <xref:System.GenericUriParser?displayProperty=fullName> クラスはまた IRI および IDN をサポートするカスタマイズ可能なパーサーの作成を許可するように拡張されました。 動作、 <xref:System.GenericUriParser?displayProperty=fullName> で使用できる値のビットごとの組み合わせを渡すことによってオブジェクトが指定されている、 <xref:System.GenericUriParserOptions?displayProperty=fullName> 列挙体を <xref:System.GenericUriParser?displayProperty=fullName> コンス トラクターです。<xref:System.GenericUriParserOptions.IriParsing?displayProperty=fullName> 型では、パーサーは、国際リソース識別子 \(IRI\) の RFC 3987 で指定された解析規則をサポートしていることを示します。 IRI を使用するかどうかは、既に説明した構成値によって決まります。  
  
 <xref:System.GenericUriParserOptions.Idn?displayProperty=fullName> 型では、パーサーは、国際化ドメイン名 \(IDN\) ホスト名 \(IDN\) 解析をサポートしていることを示します。 IDN を使用するかどうかは、既に説明した構成値によって決まります。  
  
## パフォーマンスに関する考慮事項  
 アプリケーションを初期化するために Uri を含む Web.config ファイルを使用する場合は、そのスキーム識別子が標準でない場合は、Uri を処理する余分な時間が必要です。 このような場合は、開始時ではなく、Uri が必要なときに、アプリケーションの影響を受ける部分を初期化します。  
  
   
  
## 例  
 次の例のインスタンスを作成する、 <xref:System.Uri> クラス オブジェクトの作成を使用して、 <xref:System.Net.WebRequest> インスタンス。  
  
 [!code-cpp[Classic Uri Example\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Uri Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Uri Example\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Uri Example/CS/source.cs#1)]
 [!code-vb[Classic Uri Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Uri Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="usage">
      <para>Because of security concerns, your application should use caution when accepting <see cref="T:System.Uri" /> instances from untrusted sources and with <paramref name="dontEscape" /> set to <see langword="true" />.You can check a URI string for validity by calling the <see cref="M:System.Uri.IsWellFormedOriginalString" /> method.</para>
    </block>
    <altmember cref="T:System.Configuration.IdnElement" />
    <altmember cref="T:System.Configuration.IriParsingElement" />
    <altmember cref="T:System.Configuration.UriSection" />
    <altmember cref="P:System.Uri.DnsSafeHost" />
    <altmember cref="M:System.Uri.MakeRelative(System.Uri)" />
    <altmember cref="M:System.Uri.IsWellFormedOriginalString" />
    <altmember cref="T:System.UriBuilder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Uri (string uriString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string uriString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="uriString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uriString">URI。</param>
        <summary>指定した URI を使用して、<see cref="T:System.Uri" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターを作成、 <xref:System.Uri> URI 文字列からのインスタンス。 URI の解析、正規の形式で格納および、必要なエスケープ エンコーディングは、します。  
  
 このコンス トラクターがないように、<xref:System.Uri>アクセス可能なリソースを参照します。  
  
 このコンス トラクターでは、`string`パラメーターが絶対 URI を参照して呼び出すことと同じ、<xref:System.Uri.%23ctor%2A>を持つコンス トラクター <xref:System.UriKind> 'éý'<xref:System.UriKind.Absolute>です。 場合、`string`コンス トラクターに渡されたパラメーターが相対 URI の場合、このコンス トラクターがスローされます、<xref:System.UriFormatException>です。  
  
   
  
## 例  
 次の例を作成、 <xref:System.Uri> URI"http:\/\/www.contoso.com\/"を持つインスタンス。  
  
 [!code-cpp[Classic Uri.Uri Example\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Uri.Uri Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Uri.Uri Example\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Uri.Uri Example/CS/source.cs#1)]
 [!code-vb[Classic Uri.Uri Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Uri.Uri Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="uriString" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.UriFormatException">
          <block subset="none" type="note">  
<para>  
 [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912)または[ポータブル クラス ライブラリ](http://msdn.microsoft.com/ja-jp/c31e1663-c164-4e65-b66d-d3aa8750a154)、基本クラスの例外をキャッチ<see cref="T:System.FormatException" />、代わりにします。  
  
</para>  
</block>  
  
 <paramref name="uriString" /> が空です。  
  
 または  
  
 <paramref name="uriString" /> に指定されたスキームの形式が正しくありません。 「<see cref="M:System.Uri.CheckSchemeName(System.String)" />」を参照してください。  
  
 または  
  
 <paramref name="uriString" /> に含まれるスラッシュが多すぎます。  
  
 または  
  
 <paramref name="uriString" /> に指定されたパスワードは正しくありません。  
  
 または  
  
 <paramref name="uriString" /> に指定されたホスト名は正しくありません。  
  
 または  
  
 <paramref name="uriString" /> に指定されたファイル名正しくありません。  
  
 または  
  
 <paramref name="uriString" /> に指定されたユーザー名は正しくありません。  
  
 または  
  
 <paramref name="uriString" /> に指定するホスト名または機関名が円記号で終わっていてはなりません。  
  
 または  
  
 <paramref name="uriString" /> に指定されたポート番号が正しくないか、解析できません。  
  
 または  
  
 <paramref name="uriString" /> の長さが 65519 文字を超えています。  
  
 または  
  
 <paramref name="uriString" /> に指定されたスキームの長さが 1023 文字を超えています。  
  
 または  
  
 正しくない文字シーケンスが <paramref name="uriString" /> に含まれています。  
  
 または  
  
 <paramref name="uriString" /> に指定する MS\-DOS のパスは、c:\\\\ で始める必要があります。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Uri (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo serializationInfo, valuetype System.Runtime.Serialization.StreamingContext streamingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serializationInfo" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="streamingContext" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="serializationInfo">新しい <see cref="T:System.Runtime.Serialization.SerializationInfo" /> インスタンスをシリアル化するために必要な情報を格納する <see cref="T:System.Uri" /> クラスのインスタンス。</param>
        <param name="streamingContext">新しい <see cref="T:System.Runtime.Serialization.StreamingContext" /> インスタンスに関連付けられているシリアル化ストリームのソースを格納する <see cref="T:System.Uri" /> クラスのインスタンス。</param>
        <summary>
          <see cref="T:System.Uri" /> クラスと <see cref="T:System.Runtime.Serialization.SerializationInfo" /> クラスの指定したインスタンスから、<see cref="T:System.Runtime.Serialization.StreamingContext" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターを実装して、<xref:System.Runtime.Serialization.ISerializable>のためのインターフェイス、<xref:System.Uri>クラスです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serializationInfo" /> パラメーターには、<see langword="null" /> URI が格納されます。</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="serializationInfo" /> パラメーターには空の URI が格納されます。  
  
 または  
  
 指定されたスキームの形式が正しくありません。 「<see cref="M:System.Uri.CheckSchemeName(System.String)" />」を参照してください。  
  
 または  
  
 URI に含まれているスラッシュが多すぎます。  
  
 または  
  
 URI で指定されたパスワードが無効です。  
  
 または  
  
 URI に指定されたホスト名が無効です。  
  
 または  
  
 URI に指定されたファイル名が無効です。  
  
 または  
  
 URI で指定されたユーザー名が無効です。  
  
 または  
  
 URI に指定するホスト名または権限名の末尾には、円記号を使用できません。  
  
 または  
  
 URI に指定されたポート番号が無効か、解析できません。  
  
 または  
  
 URI の長さが 65519 文字を超えています。  
  
 または  
  
 URI に指定されたスキームの長さが 1023 文字を超えています。  
  
 または  
  
 URI に無効な文字シーケンスが含まれています。  
  
 または  
  
 URI に指定する MS\-DOS パスは、c:\\\\ で始める必要があります。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Uri (string uriString, bool dontEscape);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string uriString, bool dontEscape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.#ctor(System.String,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The constructor has been deprecated. Please use new Uri(string). The dontEscape parameter is deprecated and is always false. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="uriString" Type="System.String" />
        <Parameter Name="dontEscape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="uriString">URI。</param>
        <param name="dontEscape">
          <see langword="true" /> が完全にエスケープされている場合は <c>uriString</c>。それ以外の場合は <see langword="false" />。 「解説」を参照してください。</param>
        <summary>指定した URI を使用し、明示的な文字エスケープ制御を使用して、<see cref="T:System.Uri" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターを作成、 <xref:System.Uri> URI 文字列からのインスタンス。 URI の解析し、正規の形式で格納します。  
  
 `dontEscape`パラメーター コントロール予約文字は変換するかどうかにエスケープ シーケンスです。 このパラメーターに設定する必要があります`true`URI 内のすべての予約文字をエスケープされていることを確認する場合のみです。 値に設定`true`を完全にエスケープされていない URI は、予期しない動作を引き起こすことができます。 常にこのパラメーターを設定することを強くお勧め`false`です。  
  
 場合`dontEscape`に設定されている`false`、コンス トラクターは、パーセント \(%\) のすべての項目は有効なエスケープ シーケンスを続くことを確認して予約済みの文字をエスケープします。 割合を次の文字シーケンスが有効でない場合は、25%、% が置き換えられます。  
  
 このコンス トラクターがないように、<xref:System.Uri>アクセス可能なリソースを参照します。  
  
   
  
## 例  
 次の例を作成、 <xref:System.Uri> URI http:\/\/www.contoso.com\/Hello%20World.htm のインスタンス。 格納されている URI が完全にエスケープされ、正規の形式では、ため、`dontEscape`にパラメーターを設定することができます`true`です。  
  
 [!code-cpp[Classic Uri.Uri1 Example\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Uri.Uri1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Uri.Uri1 Example\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Uri.Uri1 Example/CS/source.cs#1)]
 [!code-vb[Classic Uri.Uri1 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Uri.Uri1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="uriString" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="uriString" />空か、空白のみが含まれています。  
  
 または  
  
 指定されたスキーム<paramref name="uriString" />が無効です。  
  
 または  
  
 <paramref name="uriString" /> に含まれるスラッシュが多すぎます。  
  
 または  
  
 <paramref name="uriString" /> に指定されたパスワードは正しくありません。  
  
 または  
  
 <paramref name="uriString" /> に指定されたホスト名は正しくありません。  
  
 または  
  
 <paramref name="uriString" /> に指定されたファイル名正しくありません。  
  
 または  
  
 <paramref name="uriString" /> に指定されたユーザー名は正しくありません。  
  
 または  
  
 <paramref name="uriString" /> に指定するホスト名または機関名が円記号で終わっていてはなりません。  
  
 または  
  
 <paramref name="uriString" /> に指定されたポート番号が正しくないか、解析できません。  
  
 または  
  
 <paramref name="uriString" /> の長さが 65519 文字を超えています。  
  
 または  
  
 <paramref name="uriString" /> に指定されたスキームの長さが 1023 文字を超えています。  
  
 または  
  
 正しくない文字シーケンスが <paramref name="uriString" /> に含まれています。  
  
 または  
  
 <paramref name="uriString" /> に指定する MS\-DOS のパスは、c:\\\\ で始める必要があります。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Uri (string uriString, UriKind uriKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string uriString, valuetype System.UriKind uriKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.#ctor(System.String,System.UriKind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="uriString" Type="System.String" />
        <Parameter Name="uriKind" Type="System.UriKind" />
      </Parameters>
      <Docs>
        <param name="uriString">
          <see cref="T:System.Uri" /> インスタンスで表されるリソースを表す文字列。</param>
        <param name="uriKind">URI 文字列が相対 URI、絶対 URI、または不確定のいずれであるかを指定します。</param>
        <summary>指定した URI を使用して、<see cref="T:System.Uri" /> クラスの新しいインスタンスを初期化します。 このコンストラクターでは、URI 文字列を相対 URI、絶対 URI、または不確定のいずれかに指定できます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 相対パスと絶対 Uri では、形式でさまざまな制限があります。 たとえば、相対 URI の場合は、スキームまたは機関には必要ありません。 指定した値`uriKind`で渡された URI の種類に一致する必要があります`uriString`です。 ただし場合、<xref:System.UriKind.RelativeOrAbsolute>指定すると、相対パスまたは絶対 URI 文字列を指定できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="uriKind" /> が無効です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="uriString" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.UriFormatException">
          <block subset="none" type="note">  
<para>  
 [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912)または[ポータブル クラス ライブラリ](http://msdn.microsoft.com/ja-jp/c31e1663-c164-4e65-b66d-d3aa8750a154)、基本クラスの例外をキャッチ<see cref="T:System.FormatException" />、代わりにします。  
  
</para>  
</block>  
  
 <paramref name="uriString" /> は相対 URI を格納し、<paramref name="uriKind" /> は <see cref="F:System.UriKind.Absolute" /> です。  
  
 または  
  
 <paramref name="uriString" /> は絶対 URI を格納し、<paramref name="uriKind" /> は <see cref="F:System.UriKind.Relative" /> です。  
  
 または  
  
 <paramref name="uriString" /> が空です。  
  
 または  
  
 <paramref name="uriString" /> に指定されたスキームの形式が正しくありません。 「<see cref="M:System.Uri.CheckSchemeName(System.String)" />」を参照してください。  
  
 または  
  
 <paramref name="uriString" /> に含まれるスラッシュが多すぎます。  
  
 または  
  
 <paramref name="uriString" /> に指定されたパスワードは正しくありません。  
  
 または  
  
 <paramref name="uriString" /> に指定されたホスト名は正しくありません。  
  
 または  
  
 <paramref name="uriString" /> に指定されたファイル名正しくありません。  
  
 または  
  
 <paramref name="uriString" /> に指定されたユーザー名は正しくありません。  
  
 または  
  
 <paramref name="uriString" /> に指定するホスト名または機関名が円記号で終わっていてはなりません。  
  
 または  
  
 <paramref name="uriString" /> に指定されたポート番号が正しくないか、解析できません。  
  
 または  
  
 <paramref name="uriString" /> の長さが 65519 文字を超えています。  
  
 または  
  
 <paramref name="uriString" /> に指定されたスキームの長さが 1023 文字を超えています。  
  
 または  
  
 正しくない文字シーケンスが <paramref name="uriString" /> に含まれています。  
  
 または  
  
 <paramref name="uriString" /> に指定する MS\-DOS のパスは、c:\\\\ で始める必要があります。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Uri (Uri baseUri, string relativeUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri baseUri, string relativeUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.#ctor(System.Uri,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="relativeUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="baseUri">ベース URI。</param>
        <param name="relativeUri">ベース URI に追加する相対 URI。</param>
        <summary>指定したベース URI と相対 URI 文字列に基づいて、<see cref="T:System.Uri" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターを作成、<xref:System.Uri>インスタンスを組み合わせることで、`baseUri`と`relativeUri`です。 場合`relativeUri`\(スキーム、ホスト名、および必要に応じて、ポート番号を含む\) は絶対 URI には、<xref:System.Uri>のみを使用して、インスタンスが作成される`relativeUri`です。  
  
 このコンス トラクターがないように、<xref:System.Uri>アクセス可能なリソースを参照します。  
  
   
  
## 例  
 次の例は、の新しいインスタンスを作成、<xref:System.Uri>相対 Uri の http:\/\/www.contoso.com および絶対 URI http:\/\/www.contoso.com\/catalog\/shownew.htm を形成する catalog\/showew.htm を組み合わせることによってクラスです。  
  
 [!code-cpp[Classic Uri.Uri3 Example\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Uri.Uri3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Uri.Uri3 Example\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Uri.Uri3 Example/CS/source.cs#1)]
 [!code-vb[Classic Uri.Uri3 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Uri.Uri3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="baseUri" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="baseUri" /> は絶対 <see cref="T:System.Uri" /> インスタンスではありません。</exception>
        <exception cref="T:System.UriFormatException">
          <block subset="none" type="note">  
<para>  
 [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912)または[ポータブル クラス ライブラリ](http://msdn.microsoft.com/ja-jp/c31e1663-c164-4e65-b66d-d3aa8750a154)、基本クラスの例外をキャッチ<see cref="T:System.FormatException" />、代わりにします。  
  
</para>  
</block>  
  
 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を結合して形成された URI が空であるか、スペースのみを含んでいます。  
  
 または  
  
 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を結合して形成された URI で指定されたスキームが無効です。  
  
 または  
  
 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を結合して形成された URI に含まれるスラッシュが多すぎます。  
  
 または  
  
 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を結合して形成された URI で指定されたパスワードが無効です。  
  
 または  
  
 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を結合して形成された URI で指定されたホスト名が無効です。  
  
 または  
  
 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を結合して形成された URI で指定されたファイル名が無効です。  
  
 または  
  
 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を結合して形成された URI で指定されたユーザー名が無効です。  
  
 または  
  
 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を結合して形成された URI で指定されたホスト名または機関名が円記号で終わっていてはなりません。  
  
 または  
  
 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を結合して形成された URI で指定されたポート番号が正しくないか、解析できません。  
  
 または  
  
 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を結合して形成される URI の長さが 65519 文字を超えています。  
  
 または  
  
 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を結合して形成される URI で指定されたスキームの長さが 1023 文字を超えています。  
  
 または  
  
 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を結合して形成された URI に使用できない文字シーケンスがあります。  
  
 または  
  
 <paramref name="uriString" /> に指定する MS\-DOS のパスは、c:\\\\ で始める必要があります。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Uri (Uri baseUri, Uri relativeUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri baseUri, class System.Uri relativeUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.#ctor(System.Uri,System.Uri)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="relativeUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="baseUri">新しい <see cref="T:System.Uri" /> インスタンスのベースとなる絶対 <see cref="T:System.Uri" />。</param>
        <param name="relativeUri">
          <see cref="T:System.Uri" /> と組み合わせる相対 <c>baseUri</c> インスタンス。</param>
        <summary>指定したベース <see cref="T:System.Uri" /> のインスタンスと相対 <see cref="T:System.Uri" /> のインスタンスの組み合わせに基づいて、<see cref="T:System.Uri" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターが新たに作成<xref:System.Uri>絶対を組み合わせることによってインスタンス<xref:System.Uri>インスタンス、 `baseUri`、相対パスで<xref:System.Uri>インスタンス、`relativeUri`です。 場合`relativeUri`は絶対<xref:System.Uri>\(スキーム、ホスト名、および必要に応じて、ポート番号を含む\)、インスタンス、<xref:System.Uri>のみを使用して、インスタンスが作成される`relativeUri`です。  
  
 このコンス トラクターがないように、<xref:System.Uri>アクセス可能なリソースを参照します。  
  
   
  
## 例  
 この例は、絶対<xref:System.Uri>インスタンス、`absoluteUri`と相対<xref:System.Uri>インスタンス、`relativeUri`です。 新しい<xref:System.Uri>インスタンス、 `combinedUri`、これら 2 つのインスタンスが作成されます。  
  
 [!code-cpp[NCLUriEnhancements\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriEnhancements/CPP/nclurienhancements.cpp#2)]
 [!code-csharp[NCLUriEnhancements\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriEnhancements/CS/nclurienhancements.cs#2)]
 [!code-vb[NCLUriEnhancements\#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriEnhancements/VB/nclurienhancements.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="baseUri" /> は絶対 <see cref="T:System.Uri" /> インスタンスではありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="baseUri" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="baseUri" /> は絶対 <see cref="T:System.Uri" /> インスタンスではありません。</exception>
        <exception cref="T:System.UriFormatException">
          <block subset="none" type="note">  
<para>  
 [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912)または[ポータブル クラス ライブラリ](http://msdn.microsoft.com/ja-jp/c31e1663-c164-4e65-b66d-d3aa8750a154)、基本クラスの例外をキャッチ<see cref="T:System.FormatException" />、代わりにします。  
  
</para>  
</block>  
  
 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を結合して形成された URI が空であるか、スペースのみを含んでいます。  
  
 または  
  
 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を結合して形成された URI で指定されたスキームが無効です。  
  
 または  
  
 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を結合して形成された URI に含まれるスラッシュが多すぎます。  
  
 または  
  
 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を結合して形成された URI で指定されたパスワードが無効です。  
  
 または  
  
 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を結合して形成された URI で指定されたホスト名が無効です。  
  
 または  
  
 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を結合して形成された URI で指定されたファイル名が無効です。  
  
 または  
  
 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を結合して形成された URI で指定されたユーザー名が無効です。  
  
 または  
  
 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を結合して形成された URI で指定されたホスト名または機関名が円記号で終わっていてはなりません。  
  
 または  
  
 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を結合して形成された URI で指定されたポート番号が正しくないか、解析できません。  
  
 または  
  
 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を結合して形成される URI の長さが 65519 文字を超えています。  
  
 または  
  
 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を結合して形成される URI で指定されたスキームの長さが 1023 文字を超えています。  
  
 または  
  
 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を結合して形成された URI に使用できない文字シーケンスがあります。  
  
 または  
  
 <paramref name="uriString" /> に指定する MS\-DOS のパスは、c:\\\\ で始める必要があります。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Uri (Uri baseUri, string relativeUri, bool dontEscape);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri baseUri, string relativeUri, bool dontEscape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.#ctor(System.Uri,System.String,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The constructor has been deprecated. Please new Uri(Uri, string). The dontEscape parameter is deprecated and is always false. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="relativeUri" Type="System.String" />
        <Parameter Name="dontEscape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="baseUri">ベース URI。</param>
        <param name="relativeUri">ベース URI に追加する相対 URI。</param>
        <param name="dontEscape">
          <see langword="true" /> が完全にエスケープされている場合は <c>uriString</c>。それ以外の場合は <see langword="false" />。 「解説」を参照してください。</param>
        <summary>明示的な文字エスケープ制御を使用し、指定したベース URI と相対 URI に基づいて、<see cref="T:System.Uri" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターを作成、<xref:System.Uri>組み合わせることによってインスタンス`baseUri`と`relativeUri`です。 URI が渡された場合`relativeUri`\(スキーム、ホスト名、および必要に応じて、ポート番号を含む\) は絶対 URI には、<xref:System.Uri>のみを使用して、インスタンスが作成される`relativeUri`です。  
  
 `dontEscape`パラメーター コントロール予約文字は変換するかどうかにエスケープ シーケンスです。 このパラメーターに設定する必要があります`true`URI 内のすべての予約文字をエスケープされていることを確認する場合のみです。 値に設定`true`を完全にエスケープされていない URI は、予期しない動作を引き起こすことができます。 常にこのパラメーターを設定することを強くお勧め`false`です。 場合`dontEscape`に設定されている`false`、コンス トラクターは、パーセント \(%\) のすべての項目は有効なエスケープ シーケンスを続くことを確認して予約済みの文字をエスケープします。 次のパーセント文字シーケンスが有効でない場合は、25%、% が置き換えられます。  
  
 このコンス トラクターがないように、<xref:System.Uri>アクセス可能なリソースを参照します。  
  
   
  
## 例  
 次の例は、の新しいインスタンスを作成、<xref:System.Uri>絶対 URI を形成する Hello%20World.htm と相対 Uri http:\/\/www.contoso.com を組み合わせることによってクラスです。  
  
 [!code-cpp[Classic Uri.Uri4 Example\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Uri.Uri4 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Uri.Uri4 Example\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Uri.Uri4 Example/CS/source.cs#1)]
 [!code-vb[Classic Uri.Uri4 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Uri.Uri4 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="baseUri" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="baseUri" /> は絶対 <see cref="T:System.Uri" /> インスタンスではありません。</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="baseUri" /> と <paramref name="relativeUri" /> を結合して形成された URI が空であるか、スペースのみを含んでいます。  
  
 または  
  
 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を結合して形成された URI で指定されたスキームが無効です。  
  
 または  
  
 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を結合して形成された URI に含まれるスラッシュが多すぎます。  
  
 または  
  
 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を結合して形成された URI で指定されたパスワードが無効です。  
  
 または  
  
 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を結合して形成された URI で指定されたホスト名が無効です。  
  
 または  
  
 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を結合して形成された URI で指定されたファイル名が無効です。  
  
 または  
  
 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を結合して形成された URI で指定されたユーザー名が無効です。  
  
 または  
  
 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を結合して形成された URI で指定されたホスト名または機関名が円記号で終わっていてはなりません。  
  
 または  
  
 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を結合して形成された URI で指定されたポート番号が正しくないか、解析できません。  
  
 または  
  
 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を結合して形成される URI の長さが 65519 文字を超えています。  
  
 または  
  
 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を結合して形成される URI で指定されたスキームの長さが 1023 文字を超えています。  
  
 または  
  
 <paramref name="baseUri" /> と <paramref name="relativeUri" /> を結合して形成された URI に使用できない文字シーケンスがあります。  
  
 または  
  
 <paramref name="uriString" /> に指定する MS\-DOS のパスは、c:\\\\ で始める必要があります。</exception>
        <block subset="none" type="usage">
          <para>Because of security concerns, your application should not call this constructor with URI strings from untrusted sources and with <paramref name="dontEscape" /> set to <see langword="true" />. Alternately, you can check a URI string for validity by calling the <see cref="M:System.Uri.IsWellFormedOriginalString" /> method prior to calling this constructor.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="AbsolutePath">
      <MemberSignature Language="C#" Value="public string AbsolutePath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AbsolutePath" />
      <MemberSignature Language="DocId" Value="P:System.Uri.AbsolutePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>URI の絶対パスを取得します。</summary>
        <value>リソースの絶対パスを含む <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Uri.AbsolutePath%2A>プロパティ情報の要求を解決するのには、サーバーを使用するパス情報を格納します。 通常これは、サーバーのファイル システムに必要な情報へのパスを示します、アプリケーションまたはスクリプトの情報を提供するサーバーを実行する必要があります。  
  
 パス情報は、スキーム、ホスト名、または URI のクエリ部分には含まれません。  
  
   
  
## 例  
 次の例では、コンソールにパス\/catalog\/shownew.htm が書き込まれます。  
  
 [!code-cpp[Classic Uri.AbsolutePath Example\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Uri.AbsolutePath Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Uri.AbsolutePath Example\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Uri.AbsolutePath Example/CS/source.cs#1)]
 [!code-vb[Classic Uri.AbsolutePath Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Uri.AbsolutePath Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスが、相対 URI を表すし、このプロパティは、絶対 Uri に対してのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="AbsoluteUri">
      <MemberSignature Language="C#" Value="public string AbsoluteUri { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AbsoluteUri" />
      <MemberSignature Language="DocId" Value="P:System.Uri.AbsoluteUri" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>絶対 URI を取得します。</summary>
        <value>URI 全体を含む <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Uri.AbsoluteUri%2A>プロパティに格納されている URI 全体が含まれています、<xref:System.Uri>インスタンス、すべてのフラグメントとクエリ文字列を含むです。  
  
   
  
## 例  
 次の例の完全な内容を書き込みます、<xref:System.Uri>コンソールへのインスタンス。 例では、http:\/\/www.contoso.com\/catalog\/shownew.htm?date\=today は、コンソールに書き込まれます。  
  
 [!code-cpp[Classic Uri.AbsoluteUri Example\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Uri.AbsoluteUri Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Uri.AbsoluteUri Example\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Uri.AbsoluteUri Example/CS/source.cs#1)]
 [!code-vb[Classic Uri.AbsoluteUri Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Uri.AbsoluteUri Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは、相対 URI を表し、このプロパティは、絶対 Uri に対してのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Authority">
      <MemberSignature Language="C#" Value="public string Authority { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Authority" />
      <MemberSignature Language="DocId" Value="P:System.Uri.Authority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サーバーの DNS \(Domain Name System\) ホスト名または IP アドレスと、ポート番号を取得します。</summary>
        <value>このインスタンスで表される URI の権限構成要素を格納している <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Uri.Authority%2A>プロパティは、通常、サーバーの DNS ホスト名または IP アドレス。 このプロパティは、URI の既定のポートと異なる場合、サービスのポート番号にすることがあります。 場合、<xref:System.Uri.Authority%2A>コンポーネントには、予約文字が含まれている、これらは、このプロパティによって返される文字列値にエスケープします。  
  
   
  
## 例  
 次の例は、ホスト名 \(www.contoso.com\) とポート番号を書き込みます \(8080\) をコンソールに、サーバーの。  
  
 [!code-cpp[Classic Uri.Authority Example\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Uri.Authority Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Uri.Authority Example\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Uri.Authority Example/CS/source.cs#1)]
 [!code-vb[Classic Uri.Authority Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Uri.Authority Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスが、相対 URI を表すし、このプロパティは、絶対 Uri に対してのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Canonicalize">
      <MemberSignature Language="C#" Value="protected virtual void Canonicalize ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Canonicalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.Canonicalize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The method has been deprecated. It is not used by the system. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>内部的に格納された URI を正規形式に変換します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 正規の形式の URI を内部的に格納します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは、相対 URI を表し、このメソッドは絶対 Uri に対してのみ有効です。</exception>
        <exception cref="T:System.UriFormatException">URI の形式が正しくありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckHostName">
      <MemberSignature Language="C#" Value="public static UriHostNameType CheckHostName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.UriHostNameType CheckHostName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.CheckHostName(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UriHostNameType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">検証対象のホスト名。 値は、IPv4 アドレス、IPv6 アドレス、またはインターネット ホスト名です。</param>
        <summary>指定したホスト名が有効な DNS 名であるかどうかを判断します。</summary>
        <returns>ホスト名の型を示す <see cref="T:System.UriHostNameType" />。 ホスト名の型を判断できない場合、またはホスト名が <see langword="null" /> か長さ 0 の文字列の場合、このメソッドは <see cref="F:System.UriHostNameType.Unknown" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Uri.CheckHostName%2A>メソッドでは、指定されたホスト名が有効なインターネット ホスト名の要件を満たしていることを確認します。 ありません、ただし、実行、ホストの存在を確認するホスト名を検索します。  
  
   
  
## 例  
 次の例では、ホスト名が有効かどうかを確認します。  
  
 [!code-cpp[Classic Uri.CheckHostName Example\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Uri.CheckHostName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Uri.CheckHostName Example\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Uri.CheckHostName Example/CS/source.cs#1)]
 [!code-vb[Classic Uri.CheckHostName Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Uri.CheckHostName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckSchemeName">
      <MemberSignature Language="C#" Value="public static bool CheckSchemeName (string schemeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CheckSchemeName(string schemeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.CheckSchemeName(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="schemeName">検証対象のスキーム名。</param>
        <summary>指定したスキーム名が有効かどうかを判断します。</summary>
        <returns>スキーム名が有効な場合は <see cref="T:System.Boolean" /> 値が <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、既定では、RFC 2396 に従って有効性のスキーム名を確認します。 International Resource Identifier \(Iri\) または国際化ドメイン名 \(IDN\) の解析が有効になっている場合、このメソッドは、RFC 3986 に従って有効性のスキーム名を確認します。 スキーム名は英字で始まる必要があります、アルファベット、数字、および文字のみを含める必要があります"です。"、"\+"または"\-"です。  
  
 IRI サポートの詳細については、「解説」セクションを参照して、<xref:System.Uri>クラスです。  
  
   
  
## 例  
 次の例を作成、<xref:System.Uri>インスタンスし、スキーム名が有効かどうかを確認します。  
  
 [!code-cpp[NCLUriExamples\#9](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#9)]
 [!code-csharp[NCLUriExamples\#9](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#9)]
 [!code-vb[NCLUriExamples\#9](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckSecurity">
      <MemberSignature Language="C#" Value="protected virtual void CheckSecurity ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void CheckSecurity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.CheckSecurity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The method has been deprecated. It is not used by the system. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このメソッドを呼び出しても、何も効果はありません。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (Uri uri1, Uri uri2, UriComponents partsToCompare, UriFormat compareFormat, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(class System.Uri uri1, class System.Uri uri2, valuetype System.UriComponents partsToCompare, valuetype System.UriFormat compareFormat, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.Compare(System.Uri,System.Uri,System.UriComponents,System.UriFormat,System.StringComparison)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri1" Type="System.Uri" />
        <Parameter Name="uri2" Type="System.Uri" />
        <Parameter Name="partsToCompare" Type="System.UriComponents" />
        <Parameter Name="compareFormat" Type="System.UriFormat" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="uri1">最初の <see cref="T:System.Uri" />。</param>
        <param name="uri2">第 2 の <see cref="T:System.Uri" />。</param>
        <param name="partsToCompare">比較する <see cref="T:System.UriComponents" /> と <c>uri1</c> の部分を指定する <c>uri2</c> 値のビットごとの組み合わせ。</param>
        <param name="compareFormat">URI の構成要素の比較時に使用する文字エスケープを指定する <see cref="T:System.UriFormat" /> 値の 1 つ。</param>
        <param name="comparisonType">
          <see cref="T:System.StringComparison" /> 値のいずれか。</param>
        <summary>指定した比較規則を使用して、2 つの URI の指定部分を比較します。</summary>
        <returns>比較する <see cref="T:System.Int32" /> 構成要素の構文上の関係を示す <see cref="T:System.Uri" /> 値。  
  
 <list type="table">  
<listheader>  
<term> 値  
  
 </term>  
<description> 説明  
  
 </description>  
</listheader>  
<item>  
<term> 0 より小さい値  
  
 </term>  
<description> <paramref name="uri1" /> は <paramref name="uri2" /> より小さい値です。  
  
 </description>  
</item>  
<item>  
<term> 0  
  
 </term>  
<description> <paramref name="uri1" /> と <paramref name="uri2" /> は等しい。  
  
 </description>  
</item>  
<item>  
<term> 0 より大きい値  
  
 </term>  
<description> <paramref name="uri1" /> が <paramref name="uri2" /> より大きくなっています。  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 両方`uri1`と`uri2`は`null`、このメソッドは 0 を返します。 URI の値を比較するときに、相対 URI は常により小さい値は絶対 URI および URI を null 以外は null の URI を超えるは常にします。 場合、両方`uri1`と`uri2`されない`null`がどちらも相対 Uri、絶対 Uri 両方と、<xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=fullName>メソッドは、比較を実行します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="comparisonType" /> は有効な <see cref="T:System.StringComparison" /> 値ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="DnsSafeHost">
      <MemberSignature Language="C#" Value="public string DnsSafeHost { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DnsSafeHost" />
      <MemberSignature Language="DocId" Value="P:System.Uri.DnsSafeHost" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>DNS の解決に安全に使用できるエスケープ解除されたホスト名を取得します。</summary>
        <value>DNS の解決に適した URI のエスケープ解除されたホスト部分を格納している <see cref="T:System.String" />。または、エスケープ解除された元のホスト文字列が解決に適している場合はその文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 IPv6 アドレスの場合は、角かっこ \(\) を削除し、 <xref:System.Net.IPAddress.ScopeId%2A> このインスタンスの構築時に指定されている場合、プロパティが設定されます。  
  
 <xref:System.Uri.DnsSafeHost%2A> プロパティは、このトピックの後半で説明したように構成設定に依存します。 使用する場合は、一貫性のない結果につながることが、Windows ストア アプリケーションの構成設定を変更できません <xref:System.Uri.DnsSafeHost%2A>します。<xref:System.Uri.IdnHost%2A>プロパティは、推奨される代替を使用する手段として提供 <xref:System.Uri.DnsSafeHost%2A>, ので、 <xref:System.Uri.IdnHost%2A> あります app.config の現在の設定に関係なく、安全な DNS を常にあることが保証されます。  
  
 <xref:System.Uri.DnsSafeHost%2A> プロパティが .NET Framework v3.5、3.0 SP1 で拡張され、2.0 SP1 International Resource Identifier \(IRI\) を提供するサポートに基づいて RFC 3987 します。 IRI を有効にしない限り、.NET Framework 2.0 の動作から変化は現在のユーザーに表示されません。 これにより、アプリケーション、.NET Framework の以前のバージョンとの互換性。  
  
 IRI のサポートを有効にするのには、次の 2 つの変更が必要です。  
  
1.  .NET Framework 2.0 ディレクトリの下で、machine.config ファイルに次の行を追加します。  
  
     \< セクション名 \="uri"type\="System.Configuration.UriSection、システム、バージョン 2.0.0.0、カルチャの \= \= neutral, PublicKeyToken \= b77a5c561934e089"\/\>  
  
2.  国際化ドメイン名 \(IDN\) 解析ドメイン名に適用するかどうかと、IRI 解析規則を適用する必要があるかどうかを指定します。 これは、machine.config ファイルまたは app.config ファイルで実行できます。 たとえば、次のように追加します。  
  
    ```  
    <configuration>  
      <uri>  
      <idn enabled="All" />  
      <iriParsing enabled="true" />  
      </uri>  
    </configuration>  
    ```  
  
 IDN を有効にすると、ドメイン名のすべての Unicode のラベルが、対応する Punycode に変換されます。 Punycode 名は、ASCII 文字のみを常に xn\-\-プレフィックスで始まります。 この理由は、ほとんどの DNS サーバーのみ \(RFC 3940 を参照してください\) の ASCII 文字をサポートするために、インターネット上に既存の DNS サーバーをサポートするためにです。  
  
 値にのみ影響 IDN を有効にすると、 <xref:System.Uri.DnsSafeHost%2A> プロパティです。  
  
 使用する DNS サーバーによって、IDN 可能な値は次の 3 つがあります。  
  
-   idn を有効になっている \= All  
  
     この値は、任意の Unicode ドメイン名を Punycode 対応 \(IDN 名\) に変換されます。  
  
-   idn を有効になっている AllExceptIntranet \=  
  
     この値には、すべての外部 Unicode ドメイン名 \(IDN 名\) Punycode 形式を使用するのには変換します。 ここでローカルのイントラネットで国際名を処理するため、イントラネットに使用される DNS サーバーが Unicode 名をサポートする必要があります。  
  
-   idn を有効になっている \= なし  
  
     この値には、Punycode を使用する Unicode ドメイン名は変換されません。 これは、.NET Framework 2.0 の動作と整合する既定値です。  
  
 IRI 解析を有効にする \(iriParsing が有効になっている \= `true`\) 正規化を行うし、RFC 3987 ルール文字の最新の IRI に従ってチェックします。 既定値は `false` とは正規化を実行し、RFC 2396 に従ってチェックおよび RFC 2732 \(IPv6 リテラル\) の文字で文字です。  
  
 IRI サポートの詳細については、の「解説」セクションを参照してください、 <xref:System.Uri> クラスです。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Uri> 文字列からインスタンス。 返される値の違いを示しています <xref:System.Uri.Host%2A>, 、ホスト名または URI で指定されたアドレスを返すおよびから返される値 <xref:System.Uri.DnsSafeHost%2A>, 、安全に DNS の解決で使用されるアドレスを返します。  
  
 [!code-cpp[NCLUriEnhancements\#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriEnhancements/CPP/nclurienhancements.cpp#4)]
 [!code-csharp[NCLUriEnhancements\#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriEnhancements/CS/nclurienhancements.cs#4)]
 [!code-vb[NCLUriEnhancements\#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriEnhancements/VB/nclurienhancements.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表し、このプロパティは、絶対 Uri にのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object comparand);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparand" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="comparand">現在のインスタンスと比較する <see cref="T:System.Uri" /> インスタンスまたは URI 識別子。</param>
        <summary>2 つの <see cref="T:System.Uri" /> インスタンスを比較し、相互に等価かどうかを判断します。</summary>
        <returns>2 つのインスタンスが同じ URI を表す場合は、<see cref="T:System.Boolean" /> 値が <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Uri.Equals%2A> method compares the two instances without regard to user information \(<xref:System.Uri.UserInfo%2A>\) and fragment \(<xref:System.Uri.Fragment%2A>\) parts that they might contain. For example, given the URIs http:\/\/www.contoso.com\/index.htm\#search and http:\/\/user:password@www.contoso.com\/index.htm, the <xref:System.Uri.Equals%2A> method would return **languageKeyword tag is not supported!!!!**  
.  
  
 If one <xref:System.Uri> instance is formed with a Unicode host name and **parameterReference tag is not supported!!!!**  
 parameter contains a <xref:System.Uri> instance or identifier that is formed with a host name that has the equivalent Punycode host name, then <xref:System.Uri.Equals%2A> returns **languageKeyword tag is not supported!!!!**  
 only if International Resource Identifier \(IRI\) and Internationalized Domain Name \(IDN\) support are enabled. Punycode names contain only ASCII characters and always start with the xn\-\- prefix.  
  
 For more information on IRI support, see the Remarks section for the <xref:System.Uri> class.  
  
> [!NOTE]
>  In the .NET Framework versions 1.0 and 1.1, the <xref:System.Uri.Query%2A> is also ignored.  
  
> [!NOTE]
>  The <xref:System.Uri.Equals%2A> method can be overridden in a derived class; use caution as a malicious entity could modify the method. You should not use this method to perform security checks unless you know that this instance came from a trusted source.  
  
   
  
## 例  
 This example creates two <xref:System.Uri> instances from strings and compares them to determine whether they represent the same value. `address1` and `address2` are the same because the <xref:System.Uri.Fragment%2A> portion is ignored for this comparison. The outcome is written to the console.  
  
 [!code-cpp[NCLUriExamples\#8](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#8)]
 [!code-csharp[NCLUriExamples\#8](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#8)]
 [!code-vb[NCLUriExamples\#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#8)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">to prevent partially trusted code from deriving from <see cref="T:System.Uri" />. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="Escape">
      <MemberSignature Language="C#" Value="protected virtual void Escape ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Escape() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.Escape" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The method has been deprecated. It is not used by the system. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>パス構成要素内の安全でない文字または予約文字を 16 進の文字表現に変換します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.UriFormatException">コンス トラクターから渡される URI は無効です。 この例外は、URI が長すぎるか、URI は相対場合に発生することができます。</exception>
      </Docs>
    </Member>
    <Member MemberName="EscapeDataString">
      <MemberSignature Language="C#" Value="public static string EscapeDataString (string stringToEscape);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string EscapeDataString(string stringToEscape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.EscapeDataString(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stringToEscape" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stringToEscape">エスケープする文字列。</param>
        <summary>文字列をエスケープ表現に変換します。</summary>
        <returns>
          <see cref="T:System.String" /> のエスケープ表現を格納する <paramref name="stringToEscape" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、 <xref:System.Uri.EscapeDataString%2A> メソッドが RFC 2396 予約されていない文字を除くすべての文字を 16 進数表記に変換します。 International Resource Identifier \(Iri\) または国際化ドメイン名 \(IDN\) 解析が有効になっている場合、 <xref:System.Uri.EscapeDataString%2A> すべてのメソッドに変換文字、除いて RFC 3986 の予約されていない文字を 16 進数表記です。 すべての Unicode 文字は、エスケープする前に、utf\-8 形式に変換されます。  
  
 このメソッドがあると見なさ `stringToEscape` にエスケープ シーケンスを持ちません。  
  
 既定では、文字列は、RFC 2396 に従ってエスケープします。 International Resource Identifier \(Iri\) または国際化ドメイン名 \(IDN\) 解析が有効になっていると、RFC 3986 および RFC 3987 に従って、文字列がエスケープされます。 予約済みおよび予約されていない文字の定義については、これらの Rfc を参照してください。  
  
 IRI サポートの詳細については、の「解説」セクションを参照してください、 <xref:System.Uri> クラスです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stringToEscape" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.UriFormatException">
          <block subset="none" type="note">  
<para>  
 [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) または [ポータブル クラス ライブラリ](http://msdn.microsoft.com/ja-jp/c31e1663-c164-4e65-b66d-d3aa8750a154), 、基本クラスの例外をキャッチ <see cref="T:System.FormatException" />, 、代わりにします。  
  
</para>  
</block>  
  
 <paramref name="stringToEscape" /> の長さが 32766 文字を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="EscapeString">
      <MemberSignature Language="C#" Value="protected static string EscapeString (string str);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig string EscapeString(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.EscapeString(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The method has been deprecated. Please use GetComponents() or static EscapeUriString() to escape a Uri component or a string. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">エスケープ表現に変換する文字列。</param>
        <summary>文字列をエスケープ表現に変換します。</summary>
        <returns>文字列のエスケープ表現。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Uri.EscapeString%2A> method converts RFC 2396 reserved characters and all characters with a character value greater than 127 to hexadecimal representation. All Unicode characters are converted to UTF\-8 format before being escaped.  
  
 By default, the string is escaped according to RFC 2396. If International Resource Identifiers \(IRIs\) or Internationalized Domain Name \(IDN\) parsing is enabled, the string is escaped according to RFC 3986 and RFC 3987.  
  
 For more information on IRI support, see the Remarks section for the <xref:System.Uri> class.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EscapeUriString">
      <MemberSignature Language="C#" Value="public static string EscapeUriString (string stringToEscape);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string EscapeUriString(string stringToEscape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.EscapeUriString(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stringToEscape" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stringToEscape">エスケープする文字列。</param>
        <summary>URI 文字列をエスケープ表現に変換します。</summary>
        <returns>
          <see cref="T:System.String" /> のエスケープ表現を格納する <paramref name="stringToEscape" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Uri.EscapeUriString%2A> メソッドにパラメーターのエスケープ解除された URI 文字列を準備する、 <xref:System.Uri.%23ctor%2A> コンス トラクターです。  
  
 既定では、 <xref:System.Uri.EscapeUriString%2A> メソッドが RFC 2396 予約されていない文字を除く、すべての文字を 16 進数表記に変換します。 International Resource Identifier \(Iri\) または国際化ドメイン名 \(IDN\) 解析が有効になっている場合、 <xref:System.Uri.EscapeUriString%2A> すべてのメソッドに変換文字、除いて RFC 3986 の予約されていない文字を 16 進数表記です。 すべての Unicode 文字は、エスケープする前に、utf\-8 形式に変換されます。  
  
 このメソッドがあると見なさ `stringToEscape` にエスケープ シーケンスを持ちません。  
  
 既定では、文字列は、RFC 2396 に従ってエスケープします。 International Resource Identifier \(Iri\) または国際化ドメイン名 \(IDN\) 解析が有効になっていると、RFC 3986 および RFC 3987 に従って、文字列がエスケープされます。 予約済みおよび予約されていない文字の定義については、これらの Rfc を参照してください。  
  
 IRI サポートの詳細については、の「解説」セクションを参照してください、 <xref:System.Uri> クラスです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stringToEscape" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.UriFormatException">
          <block subset="none" type="note">  
<para>  
 [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) または [ポータブル クラス ライブラリ](http://msdn.microsoft.com/ja-jp/c31e1663-c164-4e65-b66d-d3aa8750a154), 、基本クラスの例外をキャッチ <see cref="T:System.FormatException" />, 、代わりにします。  
  
</para>  
</block>  
  
 <paramref name="stringToEscape" /> の長さが 32766 文字を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Fragment">
      <MemberSignature Language="C#" Value="public string Fragment { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Fragment" />
      <MemberSignature Language="DocId" Value="P:System.Uri.Fragment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>エスケープ URI フラグメントを取得します。</summary>
        <value>URI フラグメント情報を含む <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Uri.Fragment%2A>プロパティは、フラグメント マーカー自体を含め、URI にフラグメント マーカー \(\#\) が続くすべてのテキストを取得します。 指定された URI http:\/\/www.contoso.com\/index.htm\#main、<xref:System.Uri.Fragment%2A>プロパティは \#main を返します。  
  
 <xref:System.Uri.Fragment%2A>プロパティがいずれかでないと見なされます<xref:System.Uri.Equals%2A>比較します。  
  
   
  
## 例  
 次の例を作成、<xref:System.Uri>インスタンスし、フラグメント情報をコンソールに書き込みます。  
  
 [!code-cpp[NCLUriExamples\#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#4)]
 [!code-csharp[NCLUriExamples\#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#4)]
 [!code-vb[NCLUriExamples\#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは、相対 URI を表し、このプロパティは、絶対 Uri に対してのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FromHex">
      <MemberSignature Language="C#" Value="public static int FromHex (char digit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 FromHex(char digit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.FromHex(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="digit" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="digit">変換する 16 進数の数字 \(0 ～ 9、a ～ f、A ～ F\)。</param>
        <summary>16 進数の数字に対応する 10 進数値を取得します。</summary>
        <returns>指定した 16 進数に対応する 0 ～ 15 の数値を含む <see cref="T:System.Int32" /> 値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Uri.FromHex%2A>メソッドを表す 16 進文字を変換します \(0 ~ 9、a ~ f、A ~ F\) を 10 進値 \(0 ~ 15\) にします。 場合`digit`は有効な 16 進ではありません、<xref:System.ArgumentException>例外がスローされます。  
  
   
  
## 例  
 次の例では、かどうか、文字が 16 進数の文字である場合は、対応する 10 進値をコンソールに出力を決定します。  
  
 [!code-cpp[NCLUriExamples\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#1)]
 [!code-csharp[NCLUriExamples\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#1)]
 [!code-vb[NCLUriExamples\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="digit" />有効な 16 進数字 \(0 ~ 9、a ~ f、A ~ F\)。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetComponents">
      <MemberSignature Language="C#" Value="public string GetComponents (UriComponents components, UriFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetComponents(valuetype System.UriComponents components, valuetype System.UriFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.GetComponents(System.UriComponents,System.UriFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="components" Type="System.UriComponents" />
        <Parameter Name="format" Type="System.UriFormat" />
      </Parameters>
      <Docs>
        <param name="components">現在のインスタンスの中で呼び出し元に返す部分を指定する <see cref="T:System.UriComponents" /> 値のビットごとの組み合わせ。</param>
        <param name="format">特殊文字のエスケープ方法を制御する <see cref="T:System.UriFormat" /> の値の 1 つ。</param>
        <summary>指定した特殊文字エスケープを使用して、現在のインスタンスの指定した構成要素を取得します。</summary>
        <returns>構成要素を格納した <see cref="T:System.String" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.UriComponents.Query>、 <xref:System.UriComponents.Fragment>、 <xref:System.UriComponents.Scheme>、 <xref:System.UriComponents.UserInfo>、 <xref:System.UriComponents.Host>、 <xref:System.UriComponents.Port>、および<xref:System.UriComponents.Path>コンポーネント区切り記号を含めないでください。 組み合わせることができます、<xref:System.UriComponents.KeepDelimiter>区切り記号で値を取得するには、その値のいずれかをフラグ \(ビットごとの OR 演算子を使用\)。 他のすべての<xref:System.UriComponents>値、および、値の組み合わせ、返される値に区切り記号が含まれます。  
  
 コンポーネントは、URI に出現する順序で返されます。 たとえば場合、<xref:System.UriComponents.Scheme>を指定すると、最初に表示します。  
  
 International Resource Identifier \(IRI\) および国際化ドメイン名 \(IDN\) のサポートが有効な場合に返される文字数、<xref:System.String>が増加します。 IRI をサポートするために使用される Punycode 名は、ASCII 文字のみが含まれてし、常に xn\-\-プレフィックスを持つ開始します。 Unicode サロゲート文字が正しくで処理する IRI と IDN が有効になっているときに、<xref:System.Uri.GetComponents%2A>メソッドです。  
  
 IRI サポートの詳細については、「解説」セクションを参照して、<xref:System.Uri>クラスです。  
  
> [!NOTE]
>  場合、<xref:System.Uri.GetComponents%2A>メソッドが呼び出された`format`'éý'<xref:System.UriFormat.Unescaped>への引数として戻り値を使用することはできません、 <xref:System.Uri.%23ctor%2A> 、該当するショートカットを作成するコンス トラクター<xref:System.Uri>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="components" />有効な組み合わせではありません<see cref="T:System.UriComponents" />値。</exception>
        <exception cref="T:System.InvalidOperationException">現在<see cref="T:System.Uri" />は絶対 URI ではありません。 相対 Uri は、このメソッドでは使用できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>URI を処理するためのハッシュ コードを取得します。</summary>
        <returns>この URI に対して生成されたハッシュ値を格納している <see cref="T:System.Int32" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例を作成し、 <xref:System.Uri> をインスタンス化し、ハッシュ コードをコンソールに出力します。  
  
 [!code-cpp[NCLUriExamples\#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#4)]
 [!code-csharp[NCLUriExamples\#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#4)]
 [!code-vb[NCLUriExamples\#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLeftPart">
      <MemberSignature Language="C#" Value="public string GetLeftPart (UriPartial part);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetLeftPart(valuetype System.UriPartial part) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.GetLeftPart(System.UriPartial)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="part" Type="System.UriPartial" />
      </Parameters>
      <Docs>
        <param name="part">
          <see cref="T:System.UriPartial" /> 値のうち、返される URI 部分の末尾を指定する値。</param>
        <summary>
          <see cref="T:System.Uri" /> インスタンスの指定部分を取得します。</summary>
        <returns>
          <see cref="T:System.String" /> インスタンスの指定部分を含む <see cref="T:System.Uri" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Uri.GetLeftPart%2A>メソッドで指定された部分で終わる、URI 文字列の左端の部分を含む文字列を返します`part`です。  
  
 <xref:System.Uri.GetLeftPart%2A>次の場合は、区切り記号が含まれています。  
  
-   <xref:System.UriPartial.Scheme>スキームの区切り記号が含まれます。  
  
-   <xref:System.UriPartial.Authority>パス区切り記号は含まれません。  
  
-   <xref:System.UriPartial.Path>クエリやフラグメントの区切り記号までの元の URI では、任意の区切り記号が含まれています。  
  
-   <xref:System.UriPartial.Query>含まれています、 <xref:System.UriPartial.Path>、さらに、クエリとその区切り記号。  
  
 次の例では、URI と呼び出しの結果を表示する<xref:System.Uri.GetLeftPart%2A>で<xref:System.UriPartial.Scheme>、 <xref:System.UriPartial.Authority>、 <xref:System.UriPartial.Path>、または<xref:System.UriPartial.Query>です。  
  
|URI|Scheme|機関|パス|クエリ|  
|---------|------------|--------|--------|---------|  
|http:\/\/www.contoso.com\/index.htm?date\=today|http:\/\/|http:\/\/www.contoso.com|http:\/\/www.contoso.com\/index.htm|http:\/\/www.contoso.com\/index.htm?date\=today|  
|http:\/\/www.contoso.com\/index.htm\#main|http:\/\/|http:\/\/www.contoso.com|http:\/\/www.contoso.com\/index.htm|http:\/\/www.contoso.com\/index.htm|  
|mailto:user@contoso.com?subject\=uri|mailto:|mailto:user@contoso.com|mailto:user@contoso.com?subject\=uri|\<なし\>|  
|nntp:\/\/news.contoso.com\/123456@contoso.com|nntp:\/\/|nntp:\/\/news.contoso.com|nntp:\/\/news.contoso.com\/123456@contoso.com|nntp:\/\/news.contoso.com\/123456@contoso.com|  
|news:123456@contoso.com|ニュース:|news:123456@contoso.com|news:123456@contoso.com|\<なし\>|  
|file:\/\/server\/filename.ext|file:\/\/|file:\/\/server|file:\/\/server\/filename.ext|file:\/\/server\/filename.ext|  
  
   
  
## 例  
 次の例を作成、<xref:System.Uri>インスタンスし、パス、コンソールに書き込みます。  
  
 [!code-cpp[NCLUriExamples\#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#4)]
 [!code-csharp[NCLUriExamples\#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#4)]
 [!code-vb[NCLUriExamples\#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">現在<see cref="T:System.Uri" />インスタンスが絶対インスタンスではありません。</exception>
        <exception cref="T:System.ArgumentException">指定した<paramref name="part" />が無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="protected void GetObjectData (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo serializationInfo, valuetype System.Runtime.Serialization.StreamingContext streamingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serializationInfo" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="streamingContext" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="serializationInfo">
          <see cref="T:System.Runtime.Serialization.SerializationInfo" /> をシリアル化するために必要な情報を格納している <see cref="T:System.Uri" /> オブジェクト。</param>
        <param name="streamingContext">
          <see cref="T:System.Runtime.Serialization.StreamingContext" /> に関連付けられているシリアル化ストリームのソースおよびデスティネーションを格納している <see cref="T:System.Uri" /> オブジェクト。</param>
        <summary>現在のインスタンスをシリアル化するために必要なデータを返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">to use serialization methods. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="HexEscape">
      <MemberSignature Language="C#" Value="public static string HexEscape (char character);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string HexEscape(char character) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.HexEscape(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="character" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="character">16 進数表現に変換する文字。</param>
        <summary>指定した文字を等価な 16 進数値に変換します。</summary>
        <returns>指定した文字の 16 進数表現。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例では、文字を等価の 16 進数に変換し、コンソールに書き込みます。  
  
 [!code-cpp[NCLUriExamples\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#1)]
 [!code-csharp[NCLUriExamples\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#1)]
 [!code-vb[NCLUriExamples\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="character" />255 を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="HexUnescape">
      <MemberSignature Language="C#" Value="public static char HexUnescape (string pattern, ref int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char HexUnescape(string pattern, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.HexUnescape(System.String,System.Int32@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="index" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="pattern">文字の 16 進数表現。</param>
        <param name="index">
          <c>pattern</c> での文字の 16 進数表現の開始位置。</param>
        <summary>指定した 16 進数文字表現を文字に変換します。</summary>
        <returns>
          <paramref name="index" /> の位置の 16 進数エンコーディングが表現する文字。<paramref name="index" /> の位置の文字が 16 進数エンコーディングでない場合は、<paramref name="index" /> の位置の文字が返されます。<paramref name="index" /> の値が増加し、返された文字の次の文字を指します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 次のコード例は、文字があるかどうか 16 進エンコードされ、コンソールへの書き込みと同等の文字の場合を決定します。  
  
 [!code-cpp[NCLUriExamples\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#2)]
 [!code-csharp[NCLUriExamples\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#2)]
 [!code-vb[NCLUriExamples\#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" />小さい 0 または以上の文字数には、<paramref name="pattern" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Host">
      <MemberSignature Language="C#" Value="public string Host { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Host" />
      <MemberSignature Language="DocId" Value="P:System.Uri.Host" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスのホスト構成要素を取得します。</summary>
        <value>ホスト名を含む <see cref="T:System.String" />。 通常は、サーバーの DNS ホスト名または IP アドレスです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 異なり、<xref:System.Uri.Authority%2A>プロパティ、このプロパティの値では、ポート番号は含まれません。  
  
   
  
## 例  
 次の例では、コンソールに、サーバーのホスト名 \(www.contoso.com\) を書き込みます。  
  
 [!code-cpp[Classic Uri.Host Example\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Uri.Host Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Uri.Host Example\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Uri.Host Example/CS/source.cs#1)]
 [!code-vb[Classic Uri.Host Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Uri.Host Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスが、相対 URI を表すし、このプロパティは、絶対 Uri に対してのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="HostNameType">
      <MemberSignature Language="C#" Value="public UriHostNameType HostNameType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.UriHostNameType HostNameType" />
      <MemberSignature Language="DocId" Value="P:System.Uri.HostNameType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UriHostNameType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>URI に指定したホスト名の型を取得します。</summary>
        <value>
          <see cref="T:System.UriHostNameType" /> 列挙体のメンバー。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例を作成、<xref:System.Uri>インスタンスおよび書き込み、<xref:System.Uri.HostNameType%2A>コンソールにします。  
  
 [!code-cpp[NCLUriExamples\#9](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#9)]
 [!code-csharp[NCLUriExamples\#9](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#9)]
 [!code-vb[NCLUriExamples\#9](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは、相対 URI を表し、このプロパティは、絶対 Uri に対してのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="IdnHost">
      <MemberSignature Language="C#" Value="public string IdnHost { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IdnHost" />
      <MemberSignature Language="DocId" Value="P:System.Uri.IdnHost" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ホストの RFC 3490 準拠国際ドメイン名 \(該当する場合には Punycode を使用する\)。</summary>
        <value>IDN 標準 <see cref="T:System.String" /> に従って Punycode で書式設定されたホスト名を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、Punycode 形式でドメイン名が必要な低レベルのネットワーク プロトコルを使用するために提供します。 コードにその特定の形式が必要としない場合は、使用<xref:System.Uri.Host%2A>ホスト名です。  
  
 非推奨<xref:System.Uri.DnsSafeHost%2A>プロパティは app.config 設定には、Windows ストア アプリケーションでは変更できませんに依存します。 このプロパティは、推奨される代替を使用する手段として提供<xref:System.Uri.DnsSafeHost%2A>ので、<xref:System.Uri.IdnHost%2A>セーフあります app.config の現在の設定に関係なく、DNS を常にあることが保証します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAbsoluteUri">
      <MemberSignature Language="C#" Value="public bool IsAbsoluteUri { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAbsoluteUri" />
      <MemberSignature Language="DocId" Value="P:System.Uri.IsAbsoluteUri" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Uri" /> インスタンスが絶対インスタンスであるかどうかの値を取得します。</summary>
        <value>
          <see cref="T:System.Boolean" /> インスタンスが絶対インスタンスである場合は <see langword="true" /> 値が <see cref="T:System.Uri" />、それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、 `true` 場合は、文字列または <xref:System.Uri> コンス トラクターに渡されたインスタンスが絶対パスとして解析できる <xref:System.Uri> インスタンスで、スキーム、権限、およびパスが含まれています。 それ以外の場合、 <xref:System.Uri> インスタンスの相対パスとして扱われ、スキームまたは他の URI コンポーネントを省略する場合があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBadFileSystemCharacter">
      <MemberSignature Language="C#" Value="protected virtual bool IsBadFileSystemCharacter (char character);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsBadFileSystemCharacter(char character) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.IsBadFileSystemCharacter(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The method has been deprecated. It is not used by the system. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="character" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="character">テスト対象の <see cref="T:System.Char" />。</param>
        <summary>ファイル システム名で文字が無効かどうかの値を取得します。</summary>
        <returns>指定した文字が無効な場合は <see cref="T:System.Boolean" /> 値が <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 文字が、NTFS ファイル システムの規則に従って解析します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBaseOf">
      <MemberSignature Language="C#" Value="public bool IsBaseOf (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsBaseOf(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.IsBaseOf(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">テスト対象に指定する <see cref="T:System.Uri" /> インスタンス。</param>
        <summary>現在の <see cref="T:System.Uri" /> インスタンスが、指定した <see cref="T:System.Uri" /> インスタンスのベースかどうかを判断します。</summary>
        <returns>現在の <see langword="true" /> インスタンスが <see cref="T:System.Uri" /> のベースである場合は <paramref name="uri" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Uri.IsBaseOf%2A>現在の比較に使用<xref:System.Uri>インスタンスを指定した<xref:System.Uri>この URI が、指定されたベースであるかどうかを判別<xref:System.Uri>です。 2 つを比較するときに<xref:System.Uri>基本リレーションシップ、ユーザー情報を決定するオブジェクト \(<xref:System.Uri.UserInfo%2A>\) は評価されません。 2 つの Uri \(uri1 と uri2\) を比較するときに uri1 場合、uri2 のすべての内容を無視して、最後のスラッシュ \(\/\)、2 つの Uri は同一と uri2 のベースであります。 Http:\/\/host\/path\/path\/file?query ベース URI として使用し、次の表は、その他の Uri の基盤となっているかどうかを示します。  
  
|URI|http:\/\/host\/path\/path\/file?query はの基本|  
|---------|------------------------------------------------|  
|http:\/\/host\/path\/path\/file\/|可|  
|http:\/\/host\/path\/path\/\#fragment|可|  
|http:\/\/host\/path\/path\/MoreDir\/"|可|  
|http:\/\/host\/path\/path\/OtherFile?Query|可|  
|http:\/\/host\/path\/path\/|可|  
|http:\/\/host\/path\/path\/file|可|  
|http:\/\/host\/path\/path|no|  
|http:\/\/host\/path\/path?query|no|  
|http:\/\/host\/path\/path\#Fragment|no|  
|http:\/\/host\/path\/path2\/|no|  
|http:\/\/host\/path\/path2\/MoreDir|no|  
|http:\/\/host\/path\/File|no|  
  
   
  
## 例  
 この例で作成、 <xref:System.Uri> 、底を表すインスタンス<xref:System.Uri>インスタンス。 2 つ目を作成し、<xref:System.Uri>文字列からインスタンス。 呼び出す<xref:System.Uri.IsBaseOf%2A>ベースのインスタンスが 2 番目のインスタンスのベースであるかどうかを判別します。 結果は、コンソールに書き込まれます。  
  
 [!code-cpp[NCLUriEnhancements\#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriEnhancements/CPP/nclurienhancements.cpp#6)]
 [!code-csharp[NCLUriEnhancements\#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriEnhancements/CS/nclurienhancements.cs#6)]
 [!code-vb[NCLUriEnhancements\#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriEnhancements/VB/nclurienhancements.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="uri" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsDefaultPort">
      <MemberSignature Language="C#" Value="public bool IsDefaultPort { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDefaultPort" />
      <MemberSignature Language="DocId" Value="P:System.Uri.IsDefaultPort" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>URI のポート値が、このスキームの既定のポート値かどうかを示す値を取得します。</summary>
        <value>
          <see cref="T:System.Boolean" /> プロパティの値がこのスキームの既定ポートの場合は <see langword="true" /> 値が <see cref="P:System.Uri.Port" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例を作成、<xref:System.Uri>インスタンスおよび既定のポートを使用するかどうかを確認します。  
  
 [!code-cpp[NCLUriExamples\#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#4)]
 [!code-csharp[NCLUriExamples\#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#4)]
 [!code-vb[NCLUriExamples\#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは、相対 URI を表し、このプロパティは、絶対 Uri に対してのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsExcludedCharacter">
      <MemberSignature Language="C#" Value="protected static bool IsExcludedCharacter (char character);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig bool IsExcludedCharacter(char character) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.IsExcludedCharacter(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The method has been deprecated. It is not used by the system. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="character" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="character">テスト対象の <see cref="T:System.Char" />。</param>
        <summary>指定した文字をエスケープする必要があるかどうかの値を取得します。</summary>
        <returns>指定した文字をエスケープする必要がある場合は <see cref="T:System.Boolean" /> 値が <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFile">
      <MemberSignature Language="C#" Value="public bool IsFile { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFile" />
      <MemberSignature Language="DocId" Value="P:System.Uri.IsFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定した <see cref="T:System.Uri" /> がファイル URI かどうかを示す値を取得します。</summary>
        <value>
          <see cref="T:System.Boolean" /> がファイル URI の場合は <see langword="true" /> 値が <see cref="T:System.Uri" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Uri.IsFile%2A>プロパティは`true`ときに、<xref:System.Uri.Scheme%2A>プロパティ \=<xref:System.Uri.UriSchemeFile>です。  
  
   
  
## 例  
 次の例を作成、<xref:System.Uri>インスタンス化し、それがファイル URI であるかどうかを決定します。  
  
 [!code-cpp[NCLUriExamples\#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#6)]
 [!code-csharp[NCLUriExamples\#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#6)]
 [!code-vb[NCLUriExamples\#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは、相対 URI を表し、このプロパティは、絶対 Uri に対してのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsHexDigit">
      <MemberSignature Language="C#" Value="public static bool IsHexDigit (char character);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsHexDigit(char character) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.IsHexDigit(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="character" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="character">検証対象の文字。</param>
        <summary>指定した文字が有効な 16 進数の数字かどうかを判断します。</summary>
        <returns>文字が有効な 16 進数の値である場合は <see cref="T:System.Boolean" /> 値が <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 16 進数字とは、0 ~ 9 の数字と A ~ F または a ~ f の文字です。  
  
   
  
## 例  
 次の例では、かどうか、文字が 16 進数の文字である場合は、対応する 10 進値をコンソールに出力を決定します。  
  
 [!code-cpp[NCLUriExamples\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#1)]
 [!code-csharp[NCLUriExamples\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#1)]
 [!code-vb[NCLUriExamples\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHexEncoding">
      <MemberSignature Language="C#" Value="public static bool IsHexEncoding (string pattern, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsHexEncoding(string pattern, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.IsHexEncoding(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pattern">確認する文字列。</param>
        <param name="index">
          <c>pattern</c> 内で 16 進エンコーディングを確認する位置。</param>
        <summary>文字列内の文字が 16 進エンコードかどうかを判断します。</summary>
        <returns>
          <see cref="T:System.Boolean" /> が指定された位置の 16 進エンコードの場合は <see langword="true" /> 値が <paramref name="pattern" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Uri.IsHexEncoding%2A> 0 からまでの数値は、"hex"、"%hexhex"、文字列内のパターンに続く 16 進形式のエンコーディング メソッドをチェックに 9 または A ~ F \(大文字\) から文字を指定します。  
  
   
  
## 例  
 次のコード例は、文字があるかどうか 16 進数エンコードされ、必要な場合は、等価の文字をコンソールに出力を決定します。  
  
 [!code-cpp[NCLUriExamples\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#2)]
 [!code-csharp[NCLUriExamples\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#2)]
 [!code-vb[NCLUriExamples\#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLoopback">
      <MemberSignature Language="C#" Value="public bool IsLoopback { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLoopback" />
      <MemberSignature Language="DocId" Value="P:System.Uri.IsLoopback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定した <see cref="T:System.Uri" /> がローカル ホストを参照するかどうかを示す値を取得します。</summary>
        <value>この <see cref="T:System.Boolean" /> がローカル ホストを参照する場合は <see langword="true" /> 値が <see cref="T:System.Uri" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Uri.IsLoopback%2A>返します`true`場合、このインスタンスの作成時に指定された URI が 127.0.0.1、ループバック、localhost、または URI を指定しなかったかどうかまたはホストの情報 \(たとえば、file:\/\/\/c:Dir\/file.txt\)。 その他のすべての Uri 戻り`false`です。  
  
   
  
## 例  
 次の例を作成、<xref:System.Uri>インスタンス化し、ローカル ホストを参照しているかどうかを決定します。  
  
 [!code-cpp[NCLUriExamples\#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#6)]
 [!code-csharp[NCLUriExamples\#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#6)]
 [!code-vb[NCLUriExamples\#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは、相対 URI を表し、このプロパティは、絶対 Uri に対してのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsReservedCharacter">
      <MemberSignature Language="C#" Value="protected virtual bool IsReservedCharacter (char character);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsReservedCharacter(char character) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.IsReservedCharacter(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The method has been deprecated. It is not used by the system. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="character" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="character">テスト対象の <see cref="T:System.Char" />。</param>
        <summary>指定した文字が予約済みの文字であるかどうかを示す値を取得します。</summary>
        <returns>指定した文字が予約済みの文字である場合は <see cref="T:System.Boolean" /> 値が <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnc">
      <MemberSignature Language="C#" Value="public bool IsUnc { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnc" />
      <MemberSignature Language="DocId" Value="P:System.Uri.IsUnc" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定した <see cref="T:System.Uri" /> が UNC \(Universal Naming Convention\) パスかどうかを示す値を取得します。</summary>
        <value>
          <see cref="T:System.Boolean" /> が UNC パスの場合は <see langword="true" /> 値が <see cref="T:System.Uri" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Uri.IsUnc%2A>プロパティは`true`場合、指定した<xref:System.Uri>インスタンスが \(\\\\server\\folder file:\/\/server\/folder など\) の UNC パスです。 このプロパティは常に返します`true`URI file:\/\/ スキームあり、ホストのコンポーネントを指定します。  
  
   
  
## 例  
 次の例を作成、<xref:System.Uri>インスタンス化し、UNC パスであるかどうかを決定します。  
  
 [!code-cpp[NCLUriExamples\#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#6)]
 [!code-csharp[NCLUriExamples\#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#6)]
 [!code-vb[NCLUriExamples\#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは、相対 URI を表し、このプロパティは、絶対 Uri に対してのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsWellFormedOriginalString">
      <MemberSignature Language="C#" Value="public bool IsWellFormedOriginalString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsWellFormedOriginalString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.IsWellFormedOriginalString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Uri" /> の作成に使用された文字列が正しい形式かどうか、およびこれ以上エスケープする必要がないかどうかを示します。</summary>
        <returns>文字列が整形式である場合は <see cref="T:System.Boolean" />、それ以外の場合は <see langword="true" /> である <see langword="false" /> 値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 文字列は、既定では RFC 2396 および RFC 2732 に従って整形式であると見なされます。 International Resource Identifier \(Iri\) または国際化ドメイン名 \(IDN\) の解析が有効になっている場合、文字列と見なされます RFC 3986 および RFC 3987 に従って適切な形式  
  
 文字列は、不適切に作成された、次の条件のいずれかが発生した場合は false を返すメソッドの原因と考えられます。  
  
|エラー|例|  
|---------|-------|  
|文字列が正しくエスケープされていません。|[http:\/\/www.contoso.com\/path???\/file](http://www.contoso.com/path???/file)名|  
|文字列は、絶対<xref:System.Uri>暗黙的なファイルを表す<xref:System.Uri>です。|c:\\\\directory\\filename|  
|文字列は、絶対 URI には、パスの前にスラッシュがありません。|file:\/\/c:\/directory\/filename|  
|文字列には、スラッシュとして扱われる場合でものエスケープ解除されたバック スラッシュが含まれています。|http:\/\/host\/path\/file|  
|文字列が階層的な絶対パスを表す<xref:System.Uri>「:\/\/」を含んでいません。|www.contoso.com\/path\/file|  
|対応するパーサー、<xref:System.Uri.Scheme%2A?displayProperty=fullName>元の文字列が整形式でないことを示します。|この例は、URI のスキームによって異なります。|  
  
 既定では、文字列を構築するために使用<xref:System.Uri>RFC 2396 および RFC 2732 によって適切な形式で配布されたと見なされます。  
  
 International Resource Identifier \(IRI\) および国際化ドメイン名 \(IDN\) のサポートが有効にすると、構築するために使用される文字列<xref:System.Uri>RFC 3986 および RFC 3987 によって適切な形式で配布されたと見なされます。 IRI をサポートするために使用される Punycode 名は、ASCII 文字のみが含まれてし、常に xn\-\-プレフィックスを持つ開始します。  
  
 IRI サポートの詳細については、「解説」セクションを参照して、<xref:System.Uri>クラスです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWellFormedUriString">
      <MemberSignature Language="C#" Value="public static bool IsWellFormedUriString (string uriString, UriKind uriKind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsWellFormedUriString(string uriString, valuetype System.UriKind uriKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uriString" Type="System.String" />
        <Parameter Name="uriKind" Type="System.UriKind" />
      </Parameters>
      <Docs>
        <param name="uriString">
          <see cref="T:System.Uri" /> の構築に使用される文字列。</param>
        <param name="uriKind">
          <see cref="T:System.Uri" /> 内の <c>uriString</c> の型。</param>
        <summary>文字列を使用して URI を作成する際に、文字列の形式が正しいかどうかを示し、文字列をそれ以上エスケープする必要がないことを確認します。</summary>
        <returns>文字列が整形式である場合は <see cref="T:System.Boolean" />、それ以外の場合は <see langword="true " /> である <see langword="false" /> 値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 バージョンの .NET バージョン 4.5 より前に、既定では、文字列と見なされます RFC 2396 および RFC 2732 によって適切な形式で配布されました。 International Resource Identifier \(Iri\) または国際化ドメイン名 \(IDN\) の解析が有効になっている場合、文字列は、RFC 3986 および RFC 3987 によって適切な形式で配布されたと見なされます。  
  
 .NET 4.5 以降は、文字列は常と見なされる整形式で RFC 3986 および RFC 3987、かどうか IRI または IDN が有効にします。 ただし、これはのみ .NET 4.5 を対象とするアプリの場合は true またはそれ以降に注意してください。 .NET 4.0 を対象とするアプリでは、互換性コードを呼び出すし、古い \(4.5 プレ\) 動作が発生します。  
  
 文字列が整形式と見なさ、原因で、次の条件のいずれかが発生した場合は false を返すメソッド  
  
|エラー|例|  
|---------|-------|  
|文字列が正しくエスケープされていません。|[http:\/\/www.contoso.com\/path???\/file](http://www.contoso.com/path???/file)名|  
|文字列は、絶対<xref:System.Uri>暗黙的なファイルを表す<xref:System.Uri>です。|c:\\\\directory\\filename|  
|文字列は、絶対 URI には、パスの前にスラッシュがありません。|file:\/\/c:\/directory\/filename|  
|スラッシュとして扱う場合でも、文字列がエスケープされていない円記号を含む|http:\/\/host\/path\/file|  
|文字列が階層的な絶対パスを表す<xref:System.Uri>「:\/\/」を含んでいません|www.contoso.com\/path\/file|  
|対応するパーサー、<xref:System.Uri.Scheme%2A>元の文字列が整形式でないことを示します。|この例は、URI のスキームによって異なります。|  
|以降では、.NET 4.5、相対 Uri にコロン \(': '\)、最初のセグメントでは考慮されません整形式です。|2013.05.29\_14:33:41|  
  
 IRI サポートの詳細については、「解説」セクションを参照して、<xref:System.Uri>クラスです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalPath">
      <MemberSignature Language="C#" Value="public string LocalPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalPath" />
      <MemberSignature Language="DocId" Value="P:System.Uri.LocalPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ローカル オペレーティング システムでのファイル名表現を取得します。</summary>
        <value>ローカル オペレーティング システムでのファイル名表現を含む <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティによって返される値はエスケープ解除されます。 パスが Windows ファイル パスとして認識されている場合は、スラッシュ \(\/\) のすべてが旧バージョンとスラッシュ \(\\\) で置き換えられます。  
  
 URI の`file://computer/file.ext`、絶対パスが`/file.ext`のローカル パスは `\\computer\file.ext`します。  
  
   
  
## 例  
 次の例を作成、<xref:System.Uri>インスタンスし、ローカル パスをコンソールに書き込みます。  
  
 [!code-cpp[NCLUriExamples\#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#6)]
 [!code-csharp[NCLUriExamples\#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#6)]
 [!code-vb[NCLUriExamples\#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは、相対 URI を表し、このプロパティは、絶対 Uri に対してのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="MakeRelative">
      <MemberSignature Language="C#" Value="public string MakeRelative (Uri toUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string MakeRelative(class System.Uri toUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.MakeRelative(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The method has been deprecated. Please use MakeRelativeUri(Uri uri). http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="toUri">現在の URI と比較する URI。</param>
        <summary>2 つの <see cref="T:System.Uri" /> インスタンスの相違点を判断します。</summary>
        <returns>この URI インスタンスと <paramref name="toUri" /> のホスト名とスキームが同じ場合、現在の URI インスタンスに追加したときに <see cref="T:System.String" /> パラメーターを作成する相対 URI を表す <paramref name="toUri" /> がこのメソッドから返されます。  
  
 ホスト名またはスキームが異なる場合は、<see cref="T:System.String" /> パラメーターを表す <paramref name="toUri" /> がこのメソッドから返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 次の表は、URI インスタンス`toUri`、通話の結果と<xref:System.Uri.MakeRelative%2A>です。  
  
|現在の URI インスタンス|`toUri`|戻り値|  
|--------------------|-------------|---------|  
|http:\/\/www.contoso.com\/|http:\/\/www.contoso.com\/test\/test.htm|test\/test.htm|  
|http:\/\/www.contoso.com\/test1\/|http:\/\/www.contoso.com\/|..\/|  
|http:\/\/www.contoso.com:8000\/\/|http:\/\/www.contoso.com\/test\/test.htm|http:\/\/www.contoso.com\/test\/test.htm|  
|http:\/\/username@www.contoso.com\/|http:\/\/www.contoso.com\/test1\/test1.txt|test1\/test1.txt|  
  
 ユーザーについては、URI に存在する場合は無視されます。  
  
   
  
## 例  
 次の例では、2<xref:System.Uri>インスタンス。 パス情報の違いは、コンソールに書き込まれます。  
  
 [!code-cpp[NCLUriExamples\#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#3)]
 [!code-csharp[NCLUriExamples\#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#3)]
 [!code-vb[NCLUriExamples\#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="toUri" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">このインスタンスは、相対 URI を表し、このメソッドは絶対 Uri に対してのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="MakeRelativeUri">
      <MemberSignature Language="C#" Value="public Uri MakeRelativeUri (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Uri MakeRelativeUri(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.MakeRelativeUri(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">現在の URI と比較する URI。</param>
        <summary>2 つの <see cref="T:System.Uri" /> インスタンスの相違点を判断します。</summary>
        <returns>この URI インスタンスと <paramref name="uri" /> のホスト名とスキームが同じ場合、現在の URI インスタンスに追加したときに <see cref="T:System.Uri" /> を作成する相対 <paramref name="uri" /> がこのメソッドから返されます。  
  
 ホスト名またはスキームが異なる場合は、<see cref="T:System.Uri" /> パラメーターを表す <paramref name="uri" /> がこのメソッドから返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 次の表は、URI インスタンス`toUri`、通話の結果と<xref:System.Uri.MakeRelativeUri%2A>です。  
  
|現在の URI インスタンス|`toUri`|戻り値|  
|--------------------|-------------|---------|  
|http:\/\/www.contoso.com\/|http:\/\/www.contoso.com\/test\/test.htm|test\/test.htm|  
|http:\/\/www.contoso.com\/test1\/|http:\/\/www.contoso.com\/|..\/|  
|http:\/\/www.contoso.com:8000\/\/|http:\/\/www.contoso.com\/test\/test.htm|http:\/\/www.contoso.com\/test\/test.htm|  
|http:\/\/username@www.contoso.com\/|http:\/\/www.contoso.com\/test1\/test1.txt|test1\/test1.txt|  
  
 ユーザーについては、URI に存在する場合は無視されます。  
  
   
  
## 例  
 次の例では、2<xref:System.Uri>インスタンス。 パス情報の違いは、コンソールに書き込まれます。  
  
 [!code-cpp[NCLUriExamples\#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#3)]
 [!code-csharp[NCLUriExamples\#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#3)]
 [!code-vb[NCLUriExamples\#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="uri" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">このインスタンスが、相対 URI を表すし、このプロパティは、絶対 Uri に対してのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (Uri uri1, Uri uri2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Uri uri1, class System.Uri uri2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.op_Equality(System.Uri,System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri1" Type="System.Uri" />
        <Parameter Name="uri2" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri1">
          <see cref="T:System.Uri" /> と比較する <c>uri2</c> インスタンス。</param>
        <param name="uri2">
          <see cref="T:System.Uri" /> と比較する <c>uri1</c> インスタンス。</param>
        <summary>2 つの <see cref="T:System.Uri" /> インスタンスの値が同一かどうかを判断します。</summary>
        <returns>
          <see cref="T:System.Boolean" /> の各インスタンスが等しい場合は <see langword="true" /> 値が <see cref="T:System.Uri" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This overload uses the <xref:System.Uri.Equals%2A> method to determine whether the two <xref:System.Uri> instances are equivalent. <xref:System.Uri.UserInfo%2A> and <xref:System.Uri.Fragment%2A> content is ignored when making this comparison.  
  
   
  
## 例  
 This example creates three <xref:System.Uri> instances from strings and compares them to determine whether they represent the same value. `Address1` and `Address2` are the same because the <xref:System.Uri.Fragment%2A> portion is ignored for this comparison. The outcome is written to the console.  
  
 [!code-cpp[NCLUriEnhancements\#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriEnhancements/CPP/nclurienhancements.cpp#5)]
 [!code-csharp[NCLUriEnhancements\#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriEnhancements/CS/nclurienhancements.cs#5)]
 [!code-vb[NCLUriEnhancements\#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriEnhancements/VB/nclurienhancements.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (Uri uri1, Uri uri2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Uri uri1, class System.Uri uri2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.op_Inequality(System.Uri,System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri1" Type="System.Uri" />
        <Parameter Name="uri2" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri1">
          <see cref="T:System.Uri" /> と比較する <c>uri2</c> インスタンス。</param>
        <param name="uri2">
          <see cref="T:System.Uri" /> と比較する <c>uri1</c> インスタンス。</param>
        <summary>2 つの <see cref="T:System.Uri" /> インスタンスの値が同一でないかどうかを判断します。</summary>
        <returns>2 つの <see cref="T:System.Boolean" /> インスタンスが等しくない場合は <see langword="true" /> 値が <see cref="T:System.Uri" />。それ以外の場合は <see langword="false" />。 どちらかのパラメーターが <see langword="null" /> の場合、このメソッドは <see langword="true" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このオーバー ロードを使用して、 <xref:System.Uri.Equals%2A> メソッドを呼び出せば確認するかどうか、2 つ <xref:System.Uri> インスタンスが同じではありません。<xref:System.Uri.UserInfo%2A><xref:System.Uri.Fragment%2A> この比較を行うときに、コンテンツは無視されます。  
  
   
  
## 例  
 この例では 3 つの <xref:System.Uri> 文字列からインスタンスし、比較を同じ値を表すかどうかを判断します。`Address2``Address3` が同じでないため `Address3` を含む、 <xref:System.Uri.Query%2A> でもない `Address2`します。 結果は、コンソールに書き込まれます。  
  
 [!code-cpp[NCLUriEnhancements\#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriEnhancements/CPP/nclurienhancements.cpp#5)]
 [!code-csharp[NCLUriEnhancements\#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriEnhancements/CS/nclurienhancements.cs#5)]
 [!code-vb[NCLUriEnhancements\#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriEnhancements/VB/nclurienhancements.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalString">
      <MemberSignature Language="C#" Value="public string OriginalString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OriginalString" />
      <MemberSignature Language="DocId" Value="P:System.Uri.OriginalString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Uri" /> コンストラクターに渡された元の URI 文字列を取得します。</summary>
        <value>このインスタンスの作成時に指定した URI 自体を含む <see cref="T:System.String" />。それ以外の場合は <see cref="F:System.String.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コンス トラクターに指定された URI には、先頭または末尾のスペースが含まれている、これらのスペースは保持されます。  
  
 このプロパティによって返される値と異なる<xref:System.Uri.ToString%2A>と<xref:System.Uri.AbsoluteUri%2A>です。<xref:System.Uri.ToString%2A>URI のエスケープ解除された正規の形式を返します。<xref:System.Uri.AbsoluteUri%2A>URI のおよびを返します。  
  
 International Resource Identifier \(IRI\) および国際化ドメイン名 \(IDN\) のサポートを有効にすると、<xref:System.Uri.OriginalString%2A>文字列を返します、元非正規化されたホスト名を Punycode で 1 つを初期化するために使用した場合、<xref:System.Uri>インスタンス。 Punycode 名は、ASCII 文字のみを含めるし、常に xn\-\-プレフィックスで始まります。  
  
 IRI サポートの詳細については、「解説」セクションを参照して、<xref:System.Uri>クラスです。  
  
 ときに、<xref:System.Uri>オブジェクトをシリアル化、<xref:System.Uri.OriginalString%2A>は保持されません。 シリアル化プロセスでは完全にエスケープされたと正規化<xref:System.Uri.AbsoluteUri%2A>プロパティをシリアル化するときにします。<xref:System.Uri> IPv6 アドレスを格納している、IPv6 アドレスとスコープ ID が含まれますでシリアル化された<xref:System.Uri>オブジェクト。  
  
   
  
## 例  
 次の例は、新しい作成<xref:System.Uri>文字列からインスタンス。 返される値の差が示されている<xref:System.Uri.OriginalString%2A>への呼び出しと、コンス トラクターに渡された文字列が返されます<xref:System.Uri.ToString%2A>文字列の正規の形式が返されます。  
  
 [!code-cpp[NCLUriEnhancements\#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriEnhancements/CPP/nclurienhancements.cpp#3)]
 [!code-csharp[NCLUriEnhancements\#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriEnhancements/CS/nclurienhancements.cs#3)]
 [!code-vb[NCLUriEnhancements\#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriEnhancements/VB/nclurienhancements.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは、相対 URI を表し、このプロパティは、絶対 Uri に対してのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="protected virtual void Parse ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Parse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.Parse" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The method has been deprecated. It is not used by the system. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のインスタンスの URI を解析し、有効な URI で必要とされるすべての部分が含まれていることを確認します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.UriFormatException">コンス トラクターから渡された Uri が正しくありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="PathAndQuery">
      <MemberSignature Language="C#" Value="public string PathAndQuery { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PathAndQuery" />
      <MemberSignature Language="DocId" Value="P:System.Uri.PathAndQuery" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Uri.AbsolutePath" /> プロパティと <see cref="P:System.Uri.Query" /> プロパティを疑問符 \(?\) で区切った形式で取得します。</summary>
        <value>
          <see cref="T:System.String" /> プロパティと <see cref="P:System.Uri.AbsolutePath" /> プロパティが疑問符 \(?\) で区切られた形式で含まれている <see cref="P:System.Uri.Query" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Uri.PathAndQuery%2A>プロパティには、サーバーと、要求と共に送信される情報の照会で絶対パスが含まれています。 連結することと同じである、<xref:System.Uri.AbsolutePath%2A>と<xref:System.Uri.Query%2A>プロパティです。  
  
 <xref:System.Uri.PathAndQuery%2A>プロパティが既定では RFC 2396 に従ってエスケープされます。 International Resource Identifier \(Iri\) または国際化ドメイン名 \(IDN\) の解析が有効になっている場合、<xref:System.Uri.PathAndQuery%2A>プロパティは、RFC 3986 および RFC 3987 に従ってエスケープされます。  
  
 IRI サポートの詳細については、「解説」セクションを参照して、<xref:System.Uri>クラスです。  
  
   
  
## 例  
 次の例では、URI のパス \(\/catalog\/shownew.htm\) とクエリ \(日付 \= 今日\) については、コンソールにします。  
  
 [!code-cpp[Classic Uri.PathAndQuery Example\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Uri.PathAndQuery Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Uri.PathAndQuery Example\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Uri.PathAndQuery Example/CS/source.cs#1)]
 [!code-vb[Classic Uri.PathAndQuery Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Uri.PathAndQuery Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは、相対 URI を表し、このプロパティは、絶対 Uri に対してのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Port">
      <MemberSignature Language="C#" Value="public int Port { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Port" />
      <MemberSignature Language="DocId" Value="P:System.Uri.Port" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この URI のポート番号を取得します。</summary>
        <value>この URI のポート番号を格納している <see cref="T:System.Int32" /> 値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ポート番号は、URI で参照されているサーバーにアクセスするために使用されるプロトコルのポートを定義します。 ポートは、URI の一部として指定されていない場合、<xref:System.Uri.Port%2A>プロトコルの既定値を返します。 既定のポート番号がない場合は、このプロパティは、\-1 を返します。  
  
   
  
## 例  
 次の例は、URI のポート番号をコンソールに書き込みます。 ここでは、値は、HTTP、ポート 80 の既定のポート番号です。  
  
 [!code-cpp[Classic Uri.Port Example\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Uri.Port Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Uri.Port Example\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Uri.Port Example/CS/source.cs#1)]
 [!code-vb[Classic Uri.Port Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Uri.Port Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは、相対 URI を表し、このプロパティは、絶対 Uri に対してのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Query">
      <MemberSignature Language="C#" Value="public string Query { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Query" />
      <MemberSignature Language="DocId" Value="P:System.Uri.Query" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定した URI に含まれているクエリ情報を取得します。</summary>
        <value>指定した URI のクエリ情報を含む <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Uri.Query%2A>プロパティには、URI に含まれているクエリ情報が含まれています。 クエリの情報はパス情報、疑問符 \(?\) で区切られ、URI の末尾まで続きます。 返される情報照会にはには、先頭に疑問符が含まれています。  
  
 クエリの情報は、既定では、RFC 2396 に従ってエスケープされます。 International Resource Identifier \(Iri\) または国際化ドメイン名 \(IDN\) の解析が有効になっている場合、クエリの情報は RFC 3986 および RFC 3987 に従ってエスケープされます。  
  
 IRI サポートの詳細については、「解説」セクションを参照して、<xref:System.Uri>クラスです。  
  
   
  
## 例  
 次の例は、クエリを記述しますか? 日付をコンソールに今日 \= です。  
  
 [!code-cpp[Classic Uri.PathAndQuery Example\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Uri.PathAndQuery Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Uri.PathAndQuery Example\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Uri.PathAndQuery Example/CS/source.cs#2)]
 [!code-vb[Classic Uri.PathAndQuery Example\#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Uri.PathAndQuery Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは、相対 URI を表し、このプロパティは、絶対 Uri に対してのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Scheme">
      <MemberSignature Language="C#" Value="public string Scheme { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Scheme" />
      <MemberSignature Language="DocId" Value="P:System.Uri.Scheme" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この URI のスキーム名を取得します。</summary>
        <value>この URI のスキームを含み、小文字に変換された <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Uri.Scheme%2A>プロパティを初期化するために使用されるスキームを返します、<xref:System.Uri>インスタンス。 このプロパティは、スキームが初期化に使用されることを指定していない、<xref:System.Uri>インスタンスが認識されました。  
  
 次の表に、によって返されるいくつかの可能な値の例については、<xref:System.Uri.Scheme%2A>プロパティです。  
  
|Scheme|説明|  
|------------|--------|  
|ファイル|リソースは、ローカル コンピューターのファイルです。|  
|ftp|FTP 経由でリソースにアクセスします。|  
|Gopher|Gopher プロトコル経由でリソースにアクセスします。|  
|http|HTTP 経由でリソースにアクセスします。|  
|https|SSL で暗号化された HTTP 経由でリソースにアクセスします。|  
|ldap|LDAP プロトコルを使用してリソースにアクセスします。|  
|mailto|リソースが電子メール アドレスであり、SMTP プロトコル経由でアクセスします。|  
|net.pipe|名前付きパイプ経由でリソースにアクセスします。|  
|net.tcp|リソースは、TCP エンドポイントからアクセスされます。|  
|news|NNTP プロトコル経由でリソースにアクセスします。|  
|nntp|NNTP プロトコル経由でリソースにアクセスします。|  
|telnet|TELNET プロトコルを使用してリソースにアクセスします。|  
|uuid|サービスと通信するための一意な UUID エンドポイント名を使用してリソースにアクセスします。|  
  
   
  
## 例  
 次の例は、スキーム名 \(http\) を http:\/\/www.contoso.com\/ URI のコンソールに書き込みます。  
  
 [!code-cpp[Classic Uri.Scheme Example\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Uri.Scheme Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Uri.Scheme Example\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Uri.Scheme Example/CS/source.cs#1)]
 [!code-vb[Classic Uri.Scheme Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Uri.Scheme Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは、相対 URI を表し、このプロパティは、絶対 Uri に対してのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="SchemeDelimiter">
      <MemberSignature Language="C#" Value="public static readonly string SchemeDelimiter;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string SchemeDelimiter" />
      <MemberSignature Language="DocId" Value="F:System.Uri.SchemeDelimiter" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>URI のアドレス部分と通信プロトコル スキームを区切る文字を指定します。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例では、文字列を<xref:System.Uri.UriSchemeHttp>、 <xref:System.Uri.SchemeDelimiter>、およびアドレス。 A<xref:System.Uri>インスタンスは、文字列から作成されます。  
  
 [!code-cpp[NCLUriExamples\#17](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#17)]
 [!code-csharp[NCLUriExamples\#17](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#17)]
 [!code-vb[NCLUriExamples\#17](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Segments">
      <MemberSignature Language="C#" Value="public string[] Segments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] Segments" />
      <MemberSignature Language="DocId" Value="P:System.Uri.Segments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定した URI を構成するパス セグメントを格納している配列を取得します。</summary>
        <value>指定した URI を構成するパス セグメントを格納している <see cref="T:System.String" /> 配列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Uri.Segments%2A>プロパティは、「セグメント」\(部分文字列\) を含む URI の絶対パスを形成する文字列の配列を返します。 最初のセグメントは、スラッシュ \(\/\) や、パスの末尾に到達するまで、その最初の文字からの絶対パスを解析して取得されます。 各セグメントは、前のセグメントにした後に、最初の文字で開始し、\[次へ\] スラッシュまたはパスの末尾で終了します。 \(URI の絶対パスが含まれますすべてホストとポートの後、クエリおよびフラグメント前に、。\)  
  
 次の例では、2 つの Uri のセグメントと絶対パスを示します。 クエリ、フラグメント、絶対パスの一部ではないと、セグメントがないため、2 番目の例を示しています。  
  
 絶対 URI  
 http:\/\/www.contoso.com\/Chapters\/Chapter1\/Sections\/Section1.htm  
  
 絶対パス  
 \/Chapters\/Chapter1\/Sections\/Section1.htm  
  
 セグメント  
 \/Chapters\/Chapter1\/Sections\/Section1.htm  
  
 絶対 URI  
 http:\/\/www.contoso.com\/Chapters\/Chapter1\/Sections\/Section1.htm\#page1?answer\=NO  
  
 絶対パス  
 \/Chapters\/Chapter1\/Sections\/Section1.htm  
  
 セグメント  
 \/Chapters\/Chapter1\/Sections\/Section1.htm  
  
 絶対パスが、'\/' で始まる、ため、最初のセグメントが含まれているし、それ以外のものに注意してください。  
  
   
  
## 例  
 次の例を作成、 <xref:System.Uri> 3 でインスタンスのセグメントを画面上のセグメントを表示します。  
  
 [!code-cpp[NCLUriExamples\#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#5)]
 [!code-csharp[NCLUriExamples\#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#5)]
 [!code-vb[NCLUriExamples\#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは、相対 URI を表し、このプロパティは、絶対 Uri に対してのみ有効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo serializationInfo, valuetype System.Runtime.Serialization.StreamingContext streamingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serializationInfo" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="streamingContext" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="serializationInfo">
          <see cref="T:System.Runtime.Serialization.SerializationInfo" /> をシリアル化するために必要な情報を格納している <see cref="T:System.Uri" /> オブジェクト。</param>
        <param name="streamingContext">
          <see cref="T:System.Runtime.Serialization.StreamingContext" /> に関連付けられているシリアル化ストリームのソースおよびデスティネーションを格納している <see cref="T:System.Uri" /> オブジェクト。</param>
        <summary>現在のインスタンスをシリアル化するために必要なデータを返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">to use serialization methods. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>指定した <see cref="T:System.Uri" /> インスタンスの正規文字列表現を取得します。</summary>
        <returns>エスケープ解除された正規形式の <see cref="T:System.String" /> インスタンスを格納している <see cref="T:System.Uri" /> インスタンス。 \#、?、および % 以外のすべての文字は、エスケープ解除されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドによって返される文字列は、ポート情報を含まない、ポートは、スキームの既定のポートとします。  
  
> [!NOTE]
>  によって返される文字列、<xref:System.Uri.ToString%2A>メソッドが制御文字は、コンソール アプリケーションの状態が破損することができますを含めることがあります。 使用することができます、<xref:System.Uri.GetComponents%2A>メソッドを<xref:System.UriFormat.SafeUnescaped?displayProperty=fullName>形式返された文字列からコントロール文字を削除します。  
  
   
  
## 例  
 次の例は、新しい作成<xref:System.Uri>文字列からインスタンス。 返される値の差が示されている<xref:System.Uri.OriginalString%2A>への呼び出しと、コンス トラクターに渡された文字列が返されます<xref:System.Uri.ToString%2A>文字列の正規の形式が返されます。  
  
 [!code-cpp[NCLUriExamples\#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#7)]
 [!code-csharp[NCLUriExamples\#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#7)]
 [!code-vb[NCLUriExamples\#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#7)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">to prevent partially trusted code from deriving from <see cref="T:System.Uri" />. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="TryCreate">
      <MemberSignature Language="C#" Value="public static bool TryCreate (string uriString, UriKind uriKind, out Uri result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryCreate(string uriString, valuetype System.UriKind uriKind, class System.Uri result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.TryCreate(System.String,System.UriKind,System.Uri@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uriString" Type="System.String" />
        <Parameter Name="uriKind" Type="System.UriKind" />
        <Parameter Name="result" Type="System.Uri&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="uriString">
          <see cref="T:System.String" /> を表す <see cref="T:System.Uri" />。</param>
        <param name="uriKind">URI の種類。</param>
        <param name="result">このメソッドから制御が戻るときに、作成された <see cref="T:System.Uri" /> を格納します。</param>
        <summary>指定した <see cref="T:System.Uri" /> インスタンスと <see cref="T:System.String" /> を使用して、新しい <see cref="T:System.UriKind" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Boolean" /> が正常に作成された場合は <see langword="true" /> 値が <see cref="T:System.Uri" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドが戻る場合`true`、新しい<xref:System.Uri>に`result`です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreate">
      <MemberSignature Language="C#" Value="public static bool TryCreate (Uri baseUri, string relativeUri, out Uri result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryCreate(class System.Uri baseUri, string relativeUri, class System.Uri result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.TryCreate(System.Uri,System.String,System.Uri@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="relativeUri" Type="System.String" />
        <Parameter Name="result" Type="System.Uri&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="baseUri">ベース <see cref="T:System.Uri" />。</param>
        <param name="relativeUri">ベース <see cref="T:System.Uri" /> に追加する <see cref="T:System.String" /> として表される相対 <see cref="T:System.Uri" />。</param>
        <param name="result">このメソッドから制御が戻るときに、<see cref="T:System.Uri" /> および <c>baseUri</c> から作成される <c>relativeUri</c> を格納します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定したベースおよび相対 <see cref="T:System.Uri" /> のインスタンスを使用して、新しい <see cref="T:System.String" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Boolean" /> が正常に作成された場合は <see langword="true" /> 値が <see cref="T:System.Uri" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドが戻る場合`true`、新しい<xref:System.Uri>に`result`です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreate">
      <MemberSignature Language="C#" Value="public static bool TryCreate (Uri baseUri, Uri relativeUri, out Uri result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryCreate(class System.Uri baseUri, class System.Uri relativeUri, class System.Uri result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.TryCreate(System.Uri,System.Uri,System.Uri@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="relativeUri" Type="System.Uri" />
        <Parameter Name="result" Type="System.Uri&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="baseUri">ベース <see cref="T:System.Uri" />。</param>
        <param name="relativeUri">ベース <see cref="T:System.Uri" /> に追加する相対 <see cref="T:System.Uri" />。</param>
        <param name="result">このメソッドから制御が戻るときに、<see cref="T:System.Uri" /> および <c>baseUri</c> から作成される <c>relativeUri</c> を格納します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定したベースおよび相対 <see cref="T:System.Uri" /> のインスタンスを使用して、新しい <see cref="T:System.Uri" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Boolean" /> が正常に作成された場合は <see langword="true" /> 値が <see cref="T:System.Uri" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドが戻る場合`true`、新しい<xref:System.Uri>に`result`です。  
  
 このメソッドは、URI の構築、正規の形式で格納およびそれを検証します。 ハンドルされない例外が発生する場合、このメソッドはそれをキャッチします。 作成する場合、 <xref:System.Uri> get 例外は、のいずれかを使用して、<xref:System.Uri.%23ctor%2A>コンス トラクターです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="baseUri" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Unescape">
      <MemberSignature Language="C#" Value="protected virtual string Unescape (string path);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string Unescape(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.Unescape(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The method has been deprecated. Please use GetComponents() or static UnescapeDataString() to unescape a Uri component or a string. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">変換対象の <see cref="T:System.String" />。</param>
        <summary>エスケープ シーケンスをエスケープ解除された形式に置換することによって、指定した文字列を変換します。</summary>
        <returns>
          <see cref="T:System.String" /> パラメーターのエスケープ解除された値を格納している <paramref name="path" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnescapeDataString">
      <MemberSignature Language="C#" Value="public static string UnescapeDataString (string stringToUnescape);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UnescapeDataString(string stringToUnescape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Uri.UnescapeDataString(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stringToUnescape" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stringToUnescape">エスケープ解除する文字列。</param>
        <summary>文字列をエスケープ解除された表現に変換します。</summary>
        <returns>
          <see cref="T:System.String" /> のエスケープ解除された表現を格納する <paramref name="stringToUnescape" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して、注意してください。 以前にエスケープされた文字列をエスケープ解除は、あいまいさとエラー可能性があります。  
  
 多くの Web ブラウザーでは、プラスに Uri 内の空白文字をエスケープ文字は \(「\+」\);ただし、UnescapeDataString メソッドは変換されませんプラス記号をスペースにこの動作は、すべての URI スキームでは標準ではないため。  
  
   
  
## 例  
 次のコード例は、URI のエスケープ解除し、そのいずれかのプラス記号 \(「\+」\) には、スペースに変換します。  
  
 [!code-csharp[NCLUriExamples\#19](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stringToUnescape" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Uri.EscapeDataString(System.String)" />
        <altmember cref="M:System.Uri.EscapeUriString(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="UriSchemeFile">
      <MemberSignature Language="C#" Value="public static readonly string UriSchemeFile;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string UriSchemeFile" />
      <MemberSignature Language="DocId" Value="F:System.Uri.UriSchemeFile" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>URI がファイルを指すポインターであることを指定します。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 .NET Framework version 1.1 で、"`file:///path`「に変換された URI」`file:/path`"です。 バージョン 2.0 は修正されています。  
  
   
  
## 例  
 次の例を作成、<xref:System.Uri>インスタンスし、スキームがあるかどうかを判断<xref:System.Uri.UriSchemeFile>です。  
  
 [!code-cpp[NCLUriExamples\#10](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#10)]
 [!code-csharp[NCLUriExamples\#10](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#10)]
 [!code-vb[NCLUriExamples\#10](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UriSchemeFtp">
      <MemberSignature Language="C#" Value="public static readonly string UriSchemeFtp;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string UriSchemeFtp" />
      <MemberSignature Language="DocId" Value="F:System.Uri.UriSchemeFtp" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ファイル転送プロトコル \(FTP: File Transfer Protocol\) 経由で URI にアクセスすることを指定します。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例を作成、<xref:System.Uri>インスタンスし、スキームがかどうかを判断<xref:System.Uri.UriSchemeFtp>です。  
  
 [!code-cpp[NCLUriExamples\#15](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#15)]
 [!code-csharp[NCLUriExamples\#15](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#15)]
 [!code-vb[NCLUriExamples\#15](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UriSchemeGopher">
      <MemberSignature Language="C#" Value="public static readonly string UriSchemeGopher;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string UriSchemeGopher" />
      <MemberSignature Language="DocId" Value="F:System.Uri.UriSchemeGopher" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gopher プロトコル経由で URI にアクセスすることを指定します。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例を作成し、 <xref:System.Uri> インスタンス化し、スキームがあるかどうかを判断 <xref:System.Uri.UriSchemeGopher>します。  
  
 [!code-cpp[NCLUriExamples\#14](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#14)]
 [!code-csharp[NCLUriExamples\#14](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#14)]
 [!code-vb[NCLUriExamples\#14](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UriSchemeHttp">
      <MemberSignature Language="C#" Value="public static readonly string UriSchemeHttp;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string UriSchemeHttp" />
      <MemberSignature Language="DocId" Value="F:System.Uri.UriSchemeHttp" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>HTTP \(Hypertext Transfer Protocol\) 経由で URI にアクセスすることを指定します。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例を作成、<xref:System.Uri>インスタンスし、スキームがかどうかを判断<xref:System.Uri.UriSchemeHttp>です。  
  
 [!code-cpp[NCLUriExamples\#9](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#9)]
 [!code-csharp[NCLUriExamples\#9](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#9)]
 [!code-vb[NCLUriExamples\#9](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UriSchemeHttps">
      <MemberSignature Language="C#" Value="public static readonly string UriSchemeHttps;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string UriSchemeHttps" />
      <MemberSignature Language="DocId" Value="F:System.Uri.UriSchemeHttps" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>HTTPS \(Secure Hypertext Transfer Protocol\) 経由で URI にアクセスすることを指定します。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例を作成、<xref:System.Uri>インスタンスし、スキームがあるかどうかを判断<xref:System.Uri.UriSchemeHttps>です。  
  
 [!code-cpp[NCLUriExamples\#16](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#16)]
 [!code-csharp[NCLUriExamples\#16](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#16)]
 [!code-vb[NCLUriExamples\#16](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UriSchemeMailto">
      <MemberSignature Language="C#" Value="public static readonly string UriSchemeMailto;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string UriSchemeMailto" />
      <MemberSignature Language="DocId" Value="F:System.Uri.UriSchemeMailto" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>URI が電子メール アドレスであり、SMTP \(Simple Mail Transport Protocol\) 経由でこの URI にアクセスすることを指定します。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例を作成、<xref:System.Uri>インスタンスし、スキームがあるかどうかを判断<xref:System.Uri.UriSchemeMailto>です。  
  
 [!code-cpp[NCLUriExamples\#11](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#11)]
 [!code-csharp[NCLUriExamples\#11](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#11)]
 [!code-vb[NCLUriExamples\#11](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UriSchemeNetPipe">
      <MemberSignature Language="C#" Value="public static readonly string UriSchemeNetPipe;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string UriSchemeNetPipe" />
      <MemberSignature Language="DocId" Value="F:System.Uri.UriSchemeNetPipe" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Windows Communication Foundation \(WCF\) によって使用される NetPipe スキームを通じて URI にアクセスすることを指定します。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UriSchemeNetTcp">
      <MemberSignature Language="C#" Value="public static readonly string UriSchemeNetTcp;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string UriSchemeNetTcp" />
      <MemberSignature Language="DocId" Value="F:System.Uri.UriSchemeNetTcp" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Windows Communication Foundation \(WCF\) によって使用される NetTcp スキームを通じて URI にアクセスすることを指定します。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UriSchemeNews">
      <MemberSignature Language="C#" Value="public static readonly string UriSchemeNews;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string UriSchemeNews" />
      <MemberSignature Language="DocId" Value="F:System.Uri.UriSchemeNews" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>URI がインターネット ニュース グループであり、この URI へ NNTP \(Network News Transport Protocol\) 経由でアクセスすることを指定します。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例を作成し、 <xref:System.Uri> インスタンス化し、スキームがあるかどうかを判断 <xref:System.Uri.UriSchemeNews>します。  
  
 [!code-cpp[NCLUriExamples\#12](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#12)]
 [!code-csharp[NCLUriExamples\#12](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#12)]
 [!code-vb[NCLUriExamples\#12](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UriSchemeNntp">
      <MemberSignature Language="C#" Value="public static readonly string UriSchemeNntp;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string UriSchemeNntp" />
      <MemberSignature Language="DocId" Value="F:System.Uri.UriSchemeNntp" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>URI がインターネット ニュース グループであり、この URI へ NNTP \(Network News Transport Protocol\) 経由でアクセスすることを指定します。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 NNTP <xref:System.Uri> 解析エラーでは、.NET Framework バージョン 1.1 が修正されています。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Uri> インスタンス化し、スキームがあるかどうかを判断 <xref:System.Uri.UriSchemeNntp>します。  
  
 [!code-cpp[NCLUriExamples\#13](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#13)]
 [!code-csharp[NCLUriExamples\#13](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#13)]
 [!code-vb[NCLUriExamples\#13](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UserEscaped">
      <MemberSignature Language="C#" Value="public bool UserEscaped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UserEscaped" />
      <MemberSignature Language="DocId" Value="P:System.Uri.UserEscaped" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Uri" /> インスタンスの作成前に、URI 文字列が完全にエスケープされたことを示します。</summary>
        <value>
          <see cref="T:System.Boolean" /> インスタンスの作成時に <see langword="true" /> パラメーターが <paramref name="dontEscape" /> に設定されている場合は <see langword="true" /> 値が <see cref="T:System.Uri" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Uri.UserEscaped%2A>プロパティに設定されている`true`を作成する、文字列が使用することを示すために、<xref:System.Uri>前に、コンス トラクターに渡されたインスタンスが完全にエスケープです。 つまり、`dontEscape`コンス トラクターの呼び出しのパラメーターがに設定された`true`です。  
  
   
  
## 例  
 次の例を作成、<xref:System.Uri>インスタンス化し、かどうかが完全にエスケープが作成されたときを判断します。  
  
 [!code-cpp[NCLUriExamples\#18](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#18)]
 [!code-csharp[NCLUriExamples\#18](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#18)]
 [!code-vb[NCLUriExamples\#18](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UserInfo">
      <MemberSignature Language="C#" Value="public string UserInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UserInfo" />
      <MemberSignature Language="DocId" Value="P:System.Uri.UserInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定した URI に関連付けられているユーザー名、パスワードなどのユーザー固有の情報を取得します。</summary>
        <value>URI に関連付けられたユーザー情報を格納する <see cref="T:System.String" />。 戻り値には、URI のユーザー情報部分の区切り記号として予約されている '@' 文字が含まれません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティによって返される値は、「ユーザー名: パスワード」の形式では通常です。  
  
   
  
## 例  
 次の例を作成、<xref:System.Uri>インスタンスし、ユーザー情報をコンソールに書き込みます。  
  
 [!code-cpp[NCLUriExamples\#18](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLUriExamples/CPP/uriexamples.cpp#18)]
 [!code-csharp[NCLUriExamples\#18](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLUriExamples/CS/uriexamples.cs#18)]
 [!code-vb[NCLUriExamples\#18](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLUriExamples/VB/uriexamples.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このインスタンスは、相対 URI を表し、このプロパティは、絶対 Uri に対してのみ有効です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Uri" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="TryCreate">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>新しい <see cref="T:System.Uri" /> を作成します。<see cref="T:System.Uri" /> を作成できない場合に、例外がスローされません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>