<Type Name="ICustomFormatter" FullName="System.ICustomFormatter">
  <TypeSignature Language="C#" Value="public interface ICustomFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomFormatter" />
  <TypeSignature Language="DocId" Value="T:System.ICustomFormatter" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>オブジェクトの値のカスタム書式設定をサポートするメソッドを定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ICustomFormatter>インターフェイスには、1 つのメソッドが含まれています。<xref:System.ICustomFormatter.Format%2A?displayProperty=fullName>です。 このインターフェイスが参照または値の型によって実装された場合、<xref:System.ICustomFormatter.Format%2A>メソッドがオブジェクトの値のカスタム形式の文字列形式を返します。  
  
 通常、<xref:System.ICustomFormatter>でインターフェイスが実装されて、<xref:System.IFormatProvider>インターフェイスが含まれている .NET Framework の複合文字列書式指定メソッドが 2 つの動作をカスタマイズする、<xref:System.IFormatProvider>パラメーター。 具体的には、<xref:System.ICustomFormatter>インターフェイスに渡されるオブジェクトの値のカスタム書式を提供することができます、<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName>と<xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName>メソッドです。  
  
 オブジェクトの値のカスタム形式を提供するには、ことを次の操作が必要です。  
  
1.  実装するクラスを定義、<xref:System.ICustomFormatter>インターフェイスとその 1 つのメンバー、<xref:System.ICustomFormatter.Format%2A>メソッドです。  
  
2.  実装するクラスを定義、<xref:System.IFormatProvider>インターフェイスとその 1 つのメンバー、<xref:System.IFormatProvider.GetFormat%2A>メソッドです。<xref:System.IFormatProvider.GetFormat%2A>メソッドのインスタンスを返します、<xref:System.ICustomFormatter>実装します。 多くの場合、1 つのクラスを実装しています<xref:System.ICustomFormatter>と<xref:System.IFormatProvider>です。 その場合、クラスの`GetFormat`実装では、それ自体のインスタンスだけを返します。  
  
3.  渡す、<xref:System.IFormatProvider>実装として、`provider`の引数、<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName>メソッドまたは同等のメソッドです。  
  
 .NET Framework のメソッドではなく、独自のカスタム書式設定が使用されます。  
  
   
  
## 例  
 次の例では実装<xref:System.ICustomFormatter>バイナリ、8 進数、および 16 進数の整数値の書式設定が可能にします。 この例では、1 つのクラスで`IBinaryFormatter`、両方を実装する<xref:System.ICustomFormatter>と<xref:System.IFormatProvider>です。 その<xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName>メソッドを判断するかどうか、`formatType`パラメーターを表します、<xref:System.ICustomFormatter>型です。 その場合、`BinaryFormatter`のインスタンスを返します。 それ以外を返します`null`です。 その<xref:System.ICustomFormatter.Format%2A?displayProperty=fullName>実装では、format パラメーターは、次の 3 つのサポートされている書式指定文字列の 1 つかどうかを決定 \("B"の"O"のバイナリに 8 進数、および 16 進数の"H"\) および書式設定、`arg`パラメーター適切にします。 それ以外の場合`arg`は`null`、呼び出し、`arg`パラメーターの<xref:System.IFormattable.ToString%2A?displayProperty=fullName>実装では、1 つ存在する場合、またはそのパラメーターのない`ToString`メソッドを 1 つでない場合。`arg` が `null` の場合、メソッドは <xref:System.String.Empty?displayProperty=fullName> を返します。  
  
 [!code-csharp[System.ICustomFormatter.Class\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter`渡すことによってカスタム書式を提供するために使用する、`BinaryFormatter`オブジェクトとして、`provider`パラメーターの<xref:System.String.Format%2A>メソッドを次の例を示します。  
  
 [!code-csharp[System.ICustomFormatter.Class\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>The common language runtime attempts to use your <see cref="T:System.ICustomFormatter" /> implementation for every format item in a composite format string. As a result, you should expect that your <see cref="T:System.ICustomFormatter" /> implementation will be called to provide formatting services to objects or values that it is not designed to handle. In these cases, your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method must call the appropriate formatting method for that object or value.  
  
 There are two kinds of <see cref="T:System.ICustomFormatter" /> implementations: intrinsic and extension.  
  
 Intrinsic implementations are implementations that provide custom formatting for an application-defined object. In this case, your implementation should include the following:  
  
-   A definition of format strings that define the formatting of the object. Format strings are optional. Typically, a "G" or "g" format string defines the general (or most commonly used) format. However, you are free to define any format strings that you choose. You are also free to decide whether they are case-sensitive or case-insensitive.  
  
-   A test to ensure that the type of the object passed to your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method is your application-defined type. If it is not, you should call the object's <see cref="T:System.IFormattable" /> implementation, if one exists, or its <see cref="M:System.Object.ToString" /> method, if it does not. You should be prepared to handle any exceptions these method calls might throw.  
  
-   Code to handle a null format string, if your implementation supports format strings. The most common approach is to replace a null format string with the general format specifier.  
  
-   Code to handle any format strings that your implementation supports.  
  
-   Code to handle format strings that you do not support. The most common approach is to throw a <see cref="T:System.FormatException" />, although you can provide default formatting.  
  
 Extension implementations are implementations that provide custom formatting for a type that already has formatting support. For example, you could define a <c>CustomerNumberFormatter</c> that formats an integral type with hyphens between specific digits. In this case, your implementation should include the following:  
  
-   A definition of format strings that extend the formatting of the object. These format strings are required, but they must not conflict with the type's existing format strings. For example, if you are extending formatting for the <see cref="T:System.Int32" /> type, you should not implement the "C", "D", "E", "F", and "G" format specifiers, among others.  
  
-   A test that the type of the object passed to your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method is a type whose formatting your extension supports. If it is not, call the object's <see cref="T:System.IFormattable" /> implementation, if one exists, or the object's parameterless <see cref="M:System.Object.ToString" /> method, if it does not. You should be prepared to handle any exceptions these method calls might throw.  
  
-   Code to handle any format strings that your extension supports.  
  
-   Code to handle any format strings that your extension does not support. These should be passed on to the type's <see cref="T:System.IFormattable" /> implementation. You should be prepared to handle any exceptions these method calls might throw.</para>
    </block>
    <altmember cref="T:System.IFormatProvider" />
  </Docs>
  <Members>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format (string format, object arg, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Format(string format, object arg, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">書式設定の仕様を含む書式文字列。</param>
        <param name="arg">書式指定するオブジェクト。</param>
        <param name="formatProvider">現在のインスタンスに関する書式情報を提供するオブジェクト。</param>
        <summary>指定した形式およびカルチャ固有の書式設定情報を使用して、指定したオブジェクトの値をそれと等価の文字列形式に変換します。</summary>
        <returns>
          <paramref name="format" /> と <paramref name="formatProvider" /> の指定のとおりに書式設定された、<paramref name="arg" /> の値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ICustomFormatter.Format%2A?displayProperty=fullName> はコールバック メソッドです。 など、カスタム書式指定をサポートするメソッドによって呼び出されます<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName>または<xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName>です。 各書式項目の実装を 1 回呼び出されます、[複合書式指定文字列](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49)です。 たとえば、次のステートメントで、<xref:System.ICustomFormatter.Format%2A?displayProperty=fullName>メソッドには 3 回は呼び出されます。  
  
 [!code-csharp[System.ICustomFormatter.Class\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]
 [!code-vb[System.ICustomFormatter.Class\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]  
  
 `arg`パラメーターが 0 で始まる位置が、特定の書式指定項目のインデックスに対応するオブジェクトの一覧内のオブジェクト。  
  
 `format`パラメーターは書式指定文字列に含まれる、`formatString`書式指定項目のコンポーネントです。 書式項目を持たない場合`formatString`コンポーネント、値の`format`は`null`します。 場合`format`は`null`の種類に応じて、`arg`任意の既定の書式指定を使用することができます。  
  
 `formatProvider`パラメーターは、<xref:System.IFormatProvider>書式を提供する実装`arg`です。 インスタンスでは、通常、<xref:System.ICustomFormatter>実装します。 場合`formatProvider`は`null`、そのパラメーターを無視します。  
  
 実装、<xref:System.ICustomFormatter.Format%2A>メソッドは、次の機能を含める必要がありますので、.NET Framework がサポートしていない書式設定を指定することができます。 形式の方法が、形式をサポートしていない場合は、対象のオブジェクトの形式を実装するかどうかを判断、<xref:System.IFormattable>インターフェイスです。 呼び出しは、その場合、<xref:System.IFormattable.ToString%2A?displayProperty=fullName>そのインターフェイスのメソッドです。 それ以外の場合、既定値を呼び出す<xref:System.Object.ToString%2A?displayProperty=fullName>基になるオブジェクトのメソッドです。 次のコードでは、このパターンを示します。  
  
 [!code-csharp[System.ICustomFormatter.Class\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]
 [!code-vb[System.ICustomFormatter.Class\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]  
  
   
  
## 例  
 次の例では実装<xref:System.ICustomFormatter>バイナリ、8 進数、および 16 進数の整数値の書式設定が可能にします。 その<xref:System.ICustomFormatter.Format%2A?displayProperty=fullName>実装では、format パラメーターは、次の 3 つのサポートされている書式指定文字列の 1 つかどうかを決定 \("B"の"O"のバイナリに 8 進数、および 16 進数の"H"\) および書式設定、`arg`パラメーター適切にします。 それ以外の場合`arg`は`null`、呼び出し、`arg`パラメーターの<xref:System.IFormattable.ToString%2A?displayProperty=fullName>実装では、1 つ存在する場合、またはそのパラメーターのない`ToString`メソッドを 1 つでない場合。`arg` が `null` の場合、メソッドは <xref:System.String.Empty?displayProperty=fullName> を返します。  
  
 [!code-csharp[System.ICustomFormatter.Class\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter`渡すことによってカスタム書式を提供するために使用する、`BinaryFormatter`オブジェクトとして、`provider`のパラメーター、<xref:System.String.Format%2A>メソッドを次の例のようにします。  
  
 [!code-csharp[System.ICustomFormatter.Class\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormattable" />
      </Docs>
    </Member>
  </Members>
</Type>