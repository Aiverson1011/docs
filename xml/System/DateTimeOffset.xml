<Type Name="DateTimeOffset" FullName="System.DateTimeOffset">
  <TypeSignature Language="C#" Value="public struct DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTimeOffset extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IEquatable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IFormattable, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.DateTimeOffset" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.DateTimeOffset&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.DateTimeOffset&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>特定の時点を表します。通常、世界協定時刻 \(UTC\) を基準とする相対的な日時として表されます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.DateTimeOffset> structure includes a <xref:System.DateTime> value, together with an <xref:System.DateTimeOffset.Offset%2A> property that defines the difference between the current <xref:System.DateTimeOffset> instance's date and time and Coordinated Universal Time \(UTC\). Because it exactly defines a date and time relative to UTC, the <xref:System.DateTimeOffset> structure does not include a **languageKeyword tag is not supported!!!!**  
 member, as the <xref:System.DateTime> structure does. It represents dates and times with values whose UTC ranges from 12:00:00 midnight, January 1, 0001 Anno Domini \(Common Era\), to 11:59:59 P.M., December 31, 9999 A.D. \(C.E.\).  
  
 The time component of a <xref:System.DateTimeOffset> value is measured in 100\-nanosecond units called ticks, and a particular date is the number of ticks since 12:00 midnight, January 1, 0001 A.D. \(C.E.\) in the <xref:System.Globalization.GregorianCalendar> calendar. A <xref:System.DateTimeOffset> value is always expressed in the context of an explicit or default calendar. Ticks that are attributable to leap seconds are not included in the total number of ticks.  
  
> [!NOTE]
>  If you are working with a ticks value that you want to convert to some other time interval, such as minutes or seconds, you should use the <xref:System.TimeSpan.TicksPerDay?displayProperty=fullName>, <xref:System.TimeSpan.TicksPerHour?displayProperty=fullName>, <xref:System.TimeSpan.TicksPerMinute?displayProperty=fullName>, <xref:System.TimeSpan.TicksPerSecond?displayProperty=fullName>, or <xref:System.TimeSpan.TicksPerMillisecond?displayProperty=fullName> constant to perform the conversion. For example, to add the number of seconds represented by a specified number of ticks to the <xref:System.DateTimeOffset.Second%2A> component of a <xref:System.DateTimeOffset> value, you can use the expression `dateValue.Second + nTicks/Timespan.TicksPerSecond`.  
  
 Although a <xref:System.DateTimeOffset> value includes an offset, it is not a fully time zone\-aware data structure. While an offset from UTC is one characteristic of a time zone, it does not unambiguously identify a time zone. Not only do multiple time zones share the same offset from UTC, but the offset of a single time zone changes if it observes daylight saving time. This means that, as soon as a <xref:System.DateTimeOffset> value is disassociated from its time zone, it can no longer be unambiguously linked back to its original time zone.  
  
 Because <xref:System.DateTimeOffset> is a structure, a <xref:System.DateTimeOffset> object that has been declared but not otherwise initialized contains the default values for each of its member fields. This means that its <xref:System.DateTimeOffset.DateTime%2A> property is set to <xref:System.DateTimeOffset.MinValue?displayProperty=fullName> and its <xref:System.DateTimeOffset.Offset%2A> property is set to <xref:System.TimeSpan.Zero?displayProperty=fullName>.  
  
 You can create a new <xref:System.DateTimeOffset> value by calling any of the overloads of its constructor, which are similar to the overloaded constructors for the <xref:System.DateTime> structure. You can also create a new <xref:System.DateTimeOffset> value by assigning it a <xref:System.DateTime> value. This is an implicit conversion; it does not require a casting operator \(in C\#\) or call to a conversion method \(in Visual Basic\). You can also initialize a <xref:System.DateTimeOffset> value from the string representation of a date and time by calling a number of static string parsing methods, which include <xref:System.DateTimeOffset.Parse%2A>, <xref:System.DateTimeOffset.ParseExact%2A>, <xref:System.DateTimeOffset.TryParse%2A>, and <xref:System.DateTimeOffset.TryParseExact%2A>.  
  
 The members of the <xref:System.DateTimeOffset> structure provide functionality in the following areas:  
  
-   Date and time arithmetic.  
  
     You can add or subtract either dates or time intervals from a particular <xref:System.DateTimeOffset> value. Arithmetic operations with <xref:System.DateTimeOffset> values, unlike those with <xref:System.DateTime> values, adjust for differences in time offsets when returning a result. For example, the following code uses <xref:System.DateTime> variables to subtract the current local time from the current UTC time. The code then uses <xref:System.DateTimeOffset> variables to perform the same operation. The subtraction with <xref:System.DateTime> values returns the local time zone's difference from UTC, while the subtraction with <xref:System.DateTimeOffset> values returns <xref:System.TimeSpan.Zero?displayProperty=fullName>.  
  
     [!code-csharp[System.DateTimeOffset.Type\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Type/cs/Type.cs#1)]
     [!code-vb[System.DateTimeOffset.Type\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Type/vb/Type.vb#1)]  
  
-   Type conversion operations.  
  
     You can convert <xref:System.DateTimeOffset> values to <xref:System.DateTimeOffset.DateTime%2A> values and vice versa.  
  
-   Time manipulation and extraction operations.  
  
     You can extract either the date or the time of a <xref:System.DateTimeOffset> value. You can also retrieve the value of a particular <xref:System.DateTimeOffset> component, such as its year or its month.  
  
-   Date and time conversion.  
  
     You can convert any <xref:System.DateTimeOffset> value to another <xref:System.DateTimeOffset> value that represents the same point in time in another time zone. However, a time zone's adjustment rules are applied only in the case of the <xref:System.DateTimeOffset.ToLocalTime%2A> method, which converts a <xref:System.DateTimeOffset> value to the date and time in the local system zone.  
  
-   Date and time comparison.  
  
     You can determine whether any particular <xref:System.DateTimeOffset> value is earlier than, the same as, or later than another <xref:System.DateTimeOffset> value. Before the comparison is performed, all values are converted to UTC.  
  
   
  
## 例  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.DateTime)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">日付と時刻。</param>
        <summary>
          <see cref="T:System.DateTime" /> 値を指定して、<see cref="T:System.DateTimeOffset" /> 構造体の新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This constructor's behavior depends on the value of the <xref:System.DateTime.Kind%2A?displayProperty=fullName> property of the **parameterReference tag is not supported!!!!**  
 parameter:  
  
-   If the value of <xref:System.DateTime.Kind%2A?displayProperty=fullName> is <xref:System.DateTimeKind.Utc?displayProperty=fullName>, the <xref:System.DateTimeOffset.DateTime%2A> property of the new instance is set equal to **parameterReference tag is not supported!!!!**  
    , and the <xref:System.DateTimeOffset.Offset%2A> property is set equal to <xref:System.TimeSpan.Zero>.  
  
-   If the value of <xref:System.DateTime.Kind%2A?displayProperty=fullName> is <xref:System.DateTimeKind.Local?displayProperty=fullName> or <xref:System.DateTimeKind.Unspecified?displayProperty=fullName>, the <xref:System.DateTimeOffset.DateTime%2A> property of the new instance is set equal to **parameterReference tag is not supported!!!!**  
    , and the <xref:System.DateTimeOffset.Offset%2A> property is set equal to the offset of the local system's current time zone.  
  
   
  
## 例  
 The following example illustrates how the value of the <xref:System.DateTime.Kind%2A?displayProperty=fullName> property of the **parameterReference tag is not supported!!!!**  
 parameter affects the date and time value that is returned by this constructor.  
  
 [!code-csharp[System.DateTimeOffset.Constructors\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#1)]
 [!code-vb[System.DateTimeOffset.Constructors\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">オフセットを適用した結果の世界協定時刻 \(UTC\) の日時が <see cref="F:System.DateTimeOffset.MinValue" /> 未満です。  
  
 または  
  
 オフセットを適用した結果の UTC 日時が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (DateTime dateTime, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.DateTime dateTime, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.DateTime,System.TimeSpan)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dateTime">日付と時刻。</param>
        <param name="offset">世界協定時刻 \(UTC\) からの時刻のオフセット。</param>
        <summary>指定された <see cref="T:System.DateTime" /> 値およびオフセットを使用して、<see cref="T:System.DateTimeOffset" /> 構造体の新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This constructor's behavior depends in part on the value of the <xref:System.DateTime.Kind%2A> property of the **parameterReference tag is not supported!!!!**  
 parameter:  
  
-   If the value of <xref:System.DateTime.Kind%2A> is <xref:System.DateTimeKind.Utc?displayProperty=fullName>, the value of the **parameterReference tag is not supported!!!!**  
     parameter must be 0 or an <xref:System.ArgumentException> is thrown.  
  
-   If the value of <xref:System.DateTime.Kind%2A> is <xref:System.DateTimeKind.Local?displayProperty=fullName>, the value of the **parameterReference tag is not supported!!!!**  
     parameter must be equal to the local time zone's offset from Coordinated Universal Time \(UTC\) for that particular date or an <xref:System.ArgumentException> is thrown.  
  
-   If the value of <xref:System.DateTime.Kind%2A> is <xref:System.DateTimeKind.Unspecified?displayProperty=fullName>, the **parameterReference tag is not supported!!!!**  
     parameter can have any valid value.  
  
   
  
## 例  
 The following example shows how to initialize a <xref:System.DateTimeOffset> object with a date and time and the offset of the local time zone when that time zone is not known in advance.  
  
 [!code-csharp[System.DateTimeOffset.Constructors\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#3)]
 [!code-vb[System.DateTimeOffset.Constructors\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateTime.Kind" /> は <see cref="F:System.DateTimeKind.Utc" /> と等しく、<paramref name="offset" /> は 0 と等しくありません。  
  
 または  
  
 <paramref name="dateTime.Kind" /> は <see cref="F:System.DateTimeKind.Local" /> と等しく、<paramref name="offset" /> はシステムのローカル タイム ゾーンのオフセットと等しくありません。  
  
 または  
  
 <paramref name="offset" /> が端数なしの分数で指定されていません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> が \-14 時間より小さいか、14 時間を超えています。  
  
 または  
  
 <see cref="P:System.DateTimeOffset.UtcDateTime" /> が <see cref="F:System.DateTimeOffset.MinValue" /> より小さいか <see cref="F:System.DateTimeOffset.MaxValue" /> より大きいです。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (long ticks, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int64,System.TimeSpan)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="ticks">日時を 0001 年 1 月 1 日午前 00:00:00 以降の経過時間 \(100 ナノ秒単位\) で表した値。</param>
        <param name="offset">世界協定時刻 \(UTC\) からの時刻のオフセット。</param>
        <summary>指定されたタイマー刻みの数とオフセットで、<see cref="T:System.DateTimeOffset" /> 構造体の新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Ordinarily, trying to call the <xref:System.DateTimeOffset.%23ctor%2A> constructor to instantiate a <xref:System.DateTimeOffset> value with a local time and an offset other than that of the local time zone throws an <xref:System.ArgumentException>. You can use this overload of the <xref:System.DateTimeOffset> constructor to work around this limitation. The following example uses the local time's number of ticks to instantiate a <xref:System.DateTimeOffset> value whose offset does not necessarily represent that of the local time:  
  
 [!code-csharp[System.DateTimeOffset.Constructors\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#4)]
 [!code-vb[System.DateTimeOffset.Constructors\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#4)]  
  
   
  
## 例  
 The following example initializes a <xref:System.DateTimeOffset> object by using the number of ticks in an arbitrary date \(in this case, July 16, 2007, at 1:32 PM\) with an offset of \-5.  
  
 [!code-csharp[System.DateTimeOffset.Constructors\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#2)]
 [!code-vb[System.DateTimeOffset.Constructors\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> が端数なしの分数で指定されていません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.DateTimeOffset.UtcDateTime" /> プロパティが <see cref="F:System.DateTimeOffset.MinValue" /> 未満か、<see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。  
  
 または  
  
 <paramref name="ticks" /> が <see langword="DateTimeOffset.MinValue.Ticks" /> より小さいか、または <see langword="DateTimeOffset.MaxValue.Ticks" /> を超えています。  
  
 または  
  
 <paramref name="Offset" /> が \-14 時間未満か、または 14 時間を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">年 \(1 ～ 9999\)。</param>
        <param name="month">月 \(1 ～ 12\)。</param>
        <param name="day">日付 \(1 から <c>month</c> の日数\)。</param>
        <param name="hour">時間 \(0 から 23\)。</param>
        <param name="minute">分 \(0 から 59\)。</param>
        <param name="second">秒 \(0 から 59\)。</param>
        <param name="offset">世界協定時刻 \(UTC\) からの時刻のオフセット。</param>
        <summary>指定した年、月、日、時、分、秒、およびオフセットを使用して、<see cref="T:System.DateTimeOffset" /> 構造体の新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This constructor interprets **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, and **parameterReference tag is not supported!!!!**  
 as a year, month, and day in the Gregorian calendar. To instantiate a <xref:System.DateTimeOffset> value by using the year, month, and day in another calendar, call the <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.TimeSpan%29> constructor.  
  
   
  
## 例  
 The following example instantiates a <xref:System.DateTimeOffset> object by using the <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.TimeSpan%29?displayProperty=fullName> constructor overload.  
  
 [!code-csharp[System.DateTimeOffset.Constructors\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#5)]
 [!code-vb[System.DateTimeOffset.Constructors\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> は整数の分を表しません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> が 1 未満であるか、または 9999 を超えています。  
  
 または  
  
 <paramref name="month" /> が 1 未満であるか、または 12 を超えています。  
  
 または  
  
 <paramref name="day" /> が 1 未満であるか、<paramref name="month" /> の月の日数を超えています。  
  
 または  
  
 <paramref name="hour" /> が 0 未満であるか、23 を超えています。  
  
 または  
  
 <paramref name="minute" /> が 0 未満であるか、または 59 を超えています。  
  
 または  
  
 <paramref name="second" /> が 0 未満であるか、または 59 を超えています。  
  
 または  
  
 <paramref name="offset" /> が \-14 時間より小さいか、14 時間を超えています。  
  
 または  
  
 <see cref="P:System.DateTimeOffset.UtcDateTime" /> プロパティが <see cref="F:System.DateTimeOffset.MinValue" /> よりも前か、または <see cref="F:System.DateTimeOffset.MaxValue" /> よりも後です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, int millisecond, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">年 \(1 ～ 9999\)。</param>
        <param name="month">月 \(1 ～ 12\)。</param>
        <param name="day">日付 \(1 から <c>month</c> の日数\)。</param>
        <param name="hour">時間 \(0 から 23\)。</param>
        <param name="minute">分 \(0 から 59\)。</param>
        <param name="second">秒 \(0 から 59\)。</param>
        <param name="millisecond">ミリ秒 \(0 から 999\)。</param>
        <param name="offset">世界協定時刻 \(UTC\) からの時刻のオフセット。</param>
        <summary>指定した年、月、日、時、分、秒、ミリ秒、およびオフセットを使用して、<see cref="T:System.DateTimeOffset" /> 構造体の新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This constructor interprets **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, and **parameterReference tag is not supported!!!!**  
 as a year, month, and day in the Gregorian calendar. To instantiate a <xref:System.DateTimeOffset> value by using the year, month, and day in another calendar, call the <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.TimeSpan%29> constructor.  
  
   
  
## 例  
 The following example instantiates a <xref:System.DateTimeOffset> object by using the <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.TimeSpan%29?displayProperty=fullName> constructor overload.  
  
 [!code-csharp[System.DateTimeOffset.Constructors\#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#7)]
 [!code-vb[System.DateTimeOffset.Constructors\#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> は整数の分を表しません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> が 1 未満であるか、または 9999 を超えています。  
  
 または  
  
 <paramref name="month" /> が 1 未満であるか、または 12 を超えています。  
  
 または  
  
 <paramref name="day" /> が 1 未満であるか、<paramref name="month" /> の月の日数を超えています。  
  
 または  
  
 <paramref name="hour" /> が 0 未満であるか、23 を超えています。  
  
 または  
  
 <paramref name="minute" /> が 0 未満であるか、または 59 を超えています。  
  
 または  
  
 <paramref name="second" /> が 0 未満であるか、または 59 を超えています。  
  
 または  
  
 <paramref name="millisecond" /> が 0 未満であるか、または 999 を超えています。  
  
 または  
  
 <paramref name="offset" /> が \-14 未満か、14 を超えています。  
  
 または  
  
 <see cref="P:System.DateTimeOffset.UtcDateTime" /> プロパティが <see cref="F:System.DateTimeOffset.MinValue" /> よりも前か、または <see cref="F:System.DateTimeOffset.MaxValue" /> よりも後です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.TimeSpan)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">年。</param>
        <param name="month">月 \(1 ～ 12\)。</param>
        <param name="day">日付 \(1 から <c>month</c> の日数\)。</param>
        <param name="hour">時間 \(0 から 23\)。</param>
        <param name="minute">分 \(0 から 59\)。</param>
        <param name="second">秒 \(0 から 59\)。</param>
        <param name="millisecond">ミリ秒 \(0 から 999\)。</param>
        <param name="calendar">
          <c>year</c>、<c>month</c>、および <c>day</c> を解釈するために使用される暦。</param>
        <param name="offset">世界協定時刻 \(UTC\) からの時刻のオフセット。</param>
        <summary>指定した暦の指定した年、月、日、時、分、秒、ミリ秒、およびオフセットを使用して、<see cref="T:System.DateTimeOffset" /> 構造体の新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, and **parameterReference tag is not supported!!!!**  
 parameters all reflect values expressed in the calendar specified by the **parameterReference tag is not supported!!!!**  
 parameter. An exception is thrown if these values form a date and time that cannot be expressed by using this calendar.  
  
   
  
## 例  
 The following example uses instances of both the <xref:System.Globalization.HebrewCalendar> class and the <xref:System.Globalization.HijriCalendar> class to instantiate a <xref:System.DateTimeOffset> value. That date is then displayed to the console using the respective calendars and the Gregorian calendar.  
  
 [!code-csharp[System.DateTimeOffset.Constructors\#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#8)]
 [!code-vb[System.DateTimeOffset.Constructors\#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> が端数なしの分数を表していません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> として <see langword="null" /> を使用することはできません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> が <paramref name="calendar" /> パラメーターの <see langword="MinSupportedDateTime.Year" /> に満たないか、<see langword="MaxSupportedDateTime.Year" /> を超えています。  
  
 または  
  
 <paramref name="month" /> が、<paramref name="calendar" /> の <paramref name="year" /> の月数に満たないか、月数を超えています。  
  
 または  
  
 <paramref name="day" /> が 1 未満であるか、<paramref name="month" /> の月の日数を超えています。  
  
 または  
  
 <paramref name="hour" /> が 0 未満であるか、23 を超えています。  
  
 または  
  
 <paramref name="minute" /> が 0 未満であるか、または 59 を超えています。  
  
 または  
  
 <paramref name="second" /> が 0 未満であるか、または 59 を超えています。  
  
 または  
  
 <paramref name="millisecond" /> が 0 未満であるか、または 999 を超えています。  
  
 または  
  
 <paramref name="offset" /> が \-14 時間より小さいか、14 時間を超えています。  
  
 または  
  
 <paramref name="year" />、<paramref name="month" />、および <paramref name="day" /> の各パラメーターを日時の値として表すことができません。  
  
 または  
  
 <see cref="P:System.DateTimeOffset.UtcDateTime" /> プロパティが <see cref="F:System.DateTimeOffset.MinValue" /> よりも前か、<see cref="F:System.DateTimeOffset.MaxValue" /> よりも後です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public DateTimeOffset Add (TimeSpan timeSpan);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset Add(valuetype System.TimeSpan timeSpan) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Add(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeSpan">正や負の時間間隔を表す <see cref="T:System.TimeSpan" /> オブジェクト。</param>
        <summary>このインスタンスの値に、指定された時間間隔を加算した新しい <see cref="T:System.DateTimeOffset" /> オブジェクトを返します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトで表された日時に <paramref name="timeSpan" /> で表された時間間隔を加算した値を示すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することができます、<xref:System.DateTimeOffset.Add%2A>を単一の操作で時間間隔 \(日、時、分、秒またはミリ秒\) の複数の種類を追加するメソッド。 このメソッドの動作は、加算演算子と同じです。<xref:System.DateTimeOffset>構造体には、特殊な追加のメソッドもサポートしています \(など<xref:System.DateTimeOffset.AddDays%2A>、 <xref:System.DateTimeOffset.AddHours%2A>、および<xref:System.DateTimeOffset.AddMinutes%2A>\) 時間間隔。  
  
> [!NOTE]
>  このメソッドは、新しい返します<xref:System.DateTimeOffset>オブジェクト。 追加することで、現在のオブジェクトの値は変更されません`timeSpan`その日付と時刻にします。  
  
 <xref:System.DateTimeOffset.Add%2A>メソッドでは、現在の値には影響しません<xref:System.DateTimeOffset>オブジェクトの<xref:System.DateTimeOffset.Offset%2A>プロパティです。  
  
 <xref:System.DateTimeOffset>オブジェクトでは、特定のタイム ゾーンで日時を表していません、<xref:System.DateTimeOffset.Add%2A>メソッドでは、特定のタイム ゾーンの調整ルールの日付と時刻の演算を実行するときは考慮されません。  
  
 場合、`timeSpan`パラメーターは`null`、このメソッドは、元の値を返します<xref:System.DateTimeOffset>オブジェクトは変更されません。  
  
   
  
## 例  
 次の例の配列を作成する<xref:System.TimeSpan>宛先までの飛行時間を表すオブジェクト。<xref:System.DateTimeOffset.Add%2A>メソッドにはこれらの時刻に追加し、<xref:System.DateTimeOffset>フライトの次の時間を表すオブジェクト。 結果には、各転送先にスケジュールされた到着時刻が反映されます。  
  
 [!code-csharp[System.DateTimeOffset.Methods\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#1)]
 [!code-vb[System.DateTimeOffset.Methods\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値は <see cref="F:System.DateTimeOffset.MinValue" /> より小さい値です。  
  
 または  
  
 結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
        <altmember cref="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddDays (double days);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddDays(float64 days) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddDays(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="days" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="days">整数部と小数部から成る日数。 正数または負数を指定できます。</param>
        <summary>新しいを返します<see cref="T:System.DateTimeOffset" />のこのインスタンスの値に指定された数の整数部と小数部の日数を追加するオブジェクト。</summary>
        <returns>値が日付と現在によって表される時間の合計オブジェクト<see cref="T:System.DateTimeOffset" />オブジェクトとによって表される日数<paramref name="days" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 小数部、`days`パラメーターは、1 日の小数部の一部です。 たとえば、4.5 は 4 日、12 時間、0 分 0 秒を 0 ミリ秒に相当します。`days`パラメーターはミリ秒単位に丸められます。  
  
> [!NOTE]
>  このメソッドは、新しい返します<xref:System.DateTimeOffset>オブジェクト。 追加することで、現在のオブジェクトの値は変更されません`days`その日付と時刻にします。  
  
 <xref:System.DateTimeOffset>オブジェクトでは、特定のタイム ゾーンで日時を表していません、<xref:System.DateTimeOffset.AddDays%2A>メソッドでは、特定のタイム ゾーンの調整ルールの日付と時刻の演算を実行するときは考慮されません。  
  
 1 日未満の時間間隔を小数に変換すると、精度の損失を実行できます。 問題がある場合を使えば、<xref:System.DateTimeOffset.Add%2A>メソッドは、1 つのメソッドの呼び出しに時間間隔の 1 つ以上の種類を指定することができますの時間間隔を 1 日の端数に変換する必要があります。  
  
   
  
## 例  
 次の例では、<xref:System.DateTimeOffset.AddDays%2A>月曜日、2008 年 3 月で稼働日の先頭にある日付を表示する方法です。  
  
 [!code-csharp[System.DateTimeOffset.Methods\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#2)]
 [!code-vb[System.DateTimeOffset.Methods\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値は、<see cref="F:System.DateTimeOffset.MinValue" /> より小さくなります。  
  
 または  
  
 結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddHours (double hours);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddHours(float64 hours) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddHours(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hours" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="hours">整数部と小数部から成る時間数。 正数または負数を指定できます。</param>
        <summary>このインスタンスの値に、指定された整数部と小数部から成る時間数を加算した新しい <see cref="T:System.DateTimeOffset" /> オブジェクトを返します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトで表された日時に <paramref name="hours" /> で表された時間数を加算した値を保持するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 小数部、`hours`パラメーターは、1 時間の小数部の一部です。 たとえば、4.5 は 4 時間、30 分 0 秒を 0 ミリ秒に相当します。`hours`パラメーターはミリ秒単位に丸められます。  
  
> [!NOTE]
>  このメソッドは、新しい返します<xref:System.DateTimeOffset>オブジェクト。 追加することで、現在のオブジェクトの値は変更されません`hours`その日付と時刻にします。  
  
 <xref:System.DateTimeOffset>オブジェクトでは、特定のタイム ゾーンで日時を表していません、<xref:System.DateTimeOffset.AddHours%2A>メソッドでは、特定のタイム ゾーンの調整ルールの日付と時刻の演算を実行するときは考慮されません。  
  
 1 時間未満の時間間隔を小数に変換すると、有効桁数の損失が生じることができます。 \(たとえば、1 分間は 0.01666 時間\) です。 問題がある場合を使えば、<xref:System.DateTimeOffset.Add%2A>メソッドは、1 つのメソッドの呼び出しで複数の時間間隔の種類を指定することができます時間間隔を 1 時間の小数部に変換する必要があります。  
  
   
  
## 例  
 次の例では、<xref:System.DateTimeOffset.AddHours%2A>作業の開始時刻を一覧表示するメソッドが 1 日あたり 2 つの 8 時間のシフトのあるオフィスにある特定の週のシフトします。  
  
 [!code-csharp[System.DateTimeOffset.Methods\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#3)]
 [!code-vb[System.DateTimeOffset.Methods\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MinValue" /> より小さい。  
  
 または  
  
 結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMilliseconds (double milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMilliseconds(float64 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMilliseconds(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="milliseconds">整数部と小数部から成るミリ秒数。 正数または負数を指定できます。</param>
        <summary>指定されたミリ秒数をこのインスタンスの値に加算した新しい <see cref="T:System.DateTimeOffset" /> オブジェクトを返します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトで表される日時に <paramref name="milliseconds" /> で表される整数のミリ秒数を加算した値をもつオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 小数部、`milliseconds`パラメーターは、ミリ秒の小数部の一部です。 たとえば、4.5 は 4 ミリ秒を 1 ミリ秒 \= 10,000 タイマー刻み 5000 のタイマー刻みに相当します。 ただし、 `milliseconds` ; ミリ秒単位に丸められます.5 の以降のすべての値に切り上げられます。  
  
> [!NOTE]
>  このメソッドは、新しい返します<xref:System.DateTimeOffset>オブジェクト。 追加することで、現在のオブジェクトの値は変更されません`milliseconds`その日付と時刻にします。  
  
 <xref:System.DateTimeOffset>オブジェクトでは、特定のタイム ゾーンで日時を表していません、<xref:System.DateTimeOffset.AddMilliseconds%2A>メソッドでは、特定のタイム ゾーンの調整ルールの日付と時刻の演算を実行するときは考慮されません。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値は、<see cref="F:System.DateTimeOffset.MinValue" /> より小さくなります。  
  
 または  
  
 結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMinutes (double minutes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMinutes(float64 minutes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMinutes(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="minutes" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="minutes">整数部と小数部から成る分数。 正数または負数を指定できます。</param>
        <summary>このインスタンスの値に、指定された整数部と小数部から成る分数を加算した新しい <see cref="T:System.DateTimeOffset" /> オブジェクトを返します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトで表された日時に <paramref name="minutes" /> で表された分数を加算した値を示すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 小数部、`minutes`パラメーターが 1 分間の小数部。 たとえば、4.5 は 4 分、30 秒を 0 ミリ秒に相当します。`minutes`パラメーターはミリ秒単位に丸められます。  
  
> [!NOTE]
>  このメソッドは、新しい返します<xref:System.DateTimeOffset>オブジェクト。 追加して、現在のオブジェクトの値は変更されません`minutes`その日付と時刻にします。  
  
 <xref:System.DateTimeOffset>オブジェクトでは、特定のタイム ゾーンで日時を表していません、<xref:System.DateTimeOffset.AddMinutes%2A>メソッドでは、特定のタイム ゾーンの調整ルールの日付と時刻の演算を実行するときは考慮されません。  
  
 1 分未満の時間間隔を小数に変換すると、有効桁数の損失が生じることができます。 \(たとえば、1 秒間は 0.01666 分\) です。 問題がある場合を使えば、<xref:System.DateTimeOffset.Add%2A>メソッドは、1 つのメソッドの呼び出しで複数の時間間隔の種類を指定することができますの時間間隔を 1 分間の小数部に変換する必要があります。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MinValue" /> より小さい。  
  
 または  
  
 結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMonths(int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMonths(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="months">整数の月数。 正数または負数を指定できます。</param>
        <summary>新しいを返します<see cref="T:System.DateTimeOffset" />のこのインスタンスの値に指定された月数を追加するオブジェクト。</summary>
        <returns>値が日付と現在によって表される時間の合計オブジェクト<see cref="T:System.DateTimeOffset" />オブジェクトとによって表される月の番号<paramref name="months" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ほとんどの日付と時刻の値に、1 つの時間間隔の単位 \(分単位、日など\) を追加するその他のメソッドとは異なり<xref:System.DateTimeOffset.AddMonths%2A>使用すると、1 か月の小数部分を追加できません。 か月間だけでなく他の時間単位で構成される時刻を追加する、<xref:System.DateTimeOffset>オブジェクトを使用して、<xref:System.DateTimeOffset.Add%2A>メソッドです。  
  
> [!NOTE]
>  このメソッドは、新しい返します<xref:System.DateTimeOffset>オブジェクト。 追加することで、現在のオブジェクトの値は変更されません`months`をその日付と時刻。  
  
   
  
## 例  
 次の例では、 <xref:System.DateTimeOffset.AddMonths%2A> 2007 年の各四半期の開始日を表示するメソッド。  
  
 [!code-csharp[System.DateTimeOffset.Methods\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#4)]
 [!code-vb[System.DateTimeOffset.Methods\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値は、<see cref="F:System.DateTimeOffset.MinValue" /> より小さくなります。  
  
 または  
  
 結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddSeconds (double seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddSeconds(float64 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddSeconds(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="seconds">整数部と小数部から成る秒数。 正数または負数を指定できます。</param>
        <summary>このインスタンスの値に、指定された整数部と小数部から成る秒数を加算した新しい <see cref="T:System.DateTimeOffset" /> オブジェクトを返します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトで表された日時に <paramref name="seconds" /> で表された秒数を加算した値を示すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 小数部、`seconds`パラメーターは、秒の小数部。 秒の小数部の値は、次の表に示します。  
  
|2 番目の値|同等の表記|  
|------------|-----------|  
|.1 秒|100 ミリ秒|  
|.01 秒|10 ミリ秒|  
|.001 秒|1 ミリ秒|  
  
 `seconds`パラメーターはミリ秒単位に丸められます。  
  
> [!NOTE]
>  このメソッドは、新しい返します<xref:System.DateTimeOffset>オブジェクト。 追加することで、現在のオブジェクトの値は変更されません`minutes`をその日付と時刻。  
  
 <xref:System.DateTimeOffset>オブジェクトでは、特定のタイム ゾーンで日時を表していません、<xref:System.DateTimeOffset.AddSeconds%2A>メソッドでは、特定のタイム ゾーンの調整ルールの日付と時刻の演算を実行するときは考慮されません。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MinValue" /> より小さい。  
  
 または  
  
 結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddTicks (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddTicks(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddTicks(System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">100 ナノ秒タイマー刻み数。 正数または負数を指定できます。</param>
        <summary>このインスタンスの値に、指定されたタイマー刻みの数を加算した新しい <see cref="T:System.DateTimeOffset" /> オブジェクトを返します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトで表された日時に <paramref name="ticks" /> で表されたタイマー刻みの数を加算した値を示すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 チェック マークは、100 ナノ秒単位または 1 秒あたりの 1 つ 1000万を表します。 チェック マークは、非常に小さく、正確な時間間隔であるため、時間単位は大きいが、有効桁数を失うことがなくタイマー刻み数として表現できます。  
  
> [!NOTE]
>  このメソッドは、新しい返します<xref:System.DateTimeOffset>オブジェクト。 追加することで、現在のオブジェクトの値は変更されません`minutes`その日付と時刻にします。  
  
 次の表では、特定の時間間隔でタイマー刻みの数が一覧表示します。  
  
|時間間隔|タイマー刻みの数|  
|----------|--------------|  
|Second|10,000,000|  
|Minute|600,000,000|  
|Hour|36,000,000,000|  
|Day|864,000,000,000|  
|週|6,048,000,000,000|  
|月|月の日数の数によって異なります。|  
|非うるう年|315,360,000,000,000|  
|うるう年|316,224,000,000,000|  
  
 <xref:System.DateTimeOffset>オブジェクトでは、特定のタイム ゾーンで日時を表していません、<xref:System.DateTimeOffset.AddTicks%2A>メソッドでは、特定のタイム ゾーンの調整ルールの日付と時刻の演算を実行するときは考慮されません。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MinValue" /> より小さい。  
  
 または  
  
 結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddYears (int years);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddYears(int32 years) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddYears(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="years" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="years">年数。 正数または負数を指定できます。</param>
        <summary>新しいを返します<see cref="T:System.DateTimeOffset" />をこのインスタンスの値に指定年数を加算するオブジェクト。</summary>
        <returns>値が日付と現在によって表される時間の合計オブジェクト<see cref="T:System.DateTimeOffset" />オブジェクトおよびによって表された年数<paramref name="years" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ほとんどの日付と時刻の値を 1 つの時間間隔の単位 \(分単位、日など\) を追加するその他のメソッドとは異なり<xref:System.DateTimeOffset.AddYears%2A>使用すると、年の小数部分を追加できません。 長期にわたりだけでなく他の時間単位で構成される時刻を追加する、<xref:System.DateTimeOffset>オブジェクトを使用して、<xref:System.DateTimeOffset.Add%2A>メソッドです。  
  
> [!NOTE]
>  このメソッドは、新しい返します<xref:System.DateTimeOffset>オブジェクト。 追加することで、現在のオブジェクトの値は変更されません`months`その日付と時刻にします。  
  
   
  
## 例  
 米国の州、運転免許証を発行できません担当者に 16 歳未満の有効期間の。 次の例では、するには、運転免許証法的に発行するために個人を生まれた最新可能な日付を表示します。  
  
 [!code-csharp[System.DateTimeOffset.Methods\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#6)]
 [!code-vb[System.DateTimeOffset.Methods\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値は、<see cref="F:System.DateTimeOffset.MinValue" /> より小さくなります。  
  
 または  
  
 結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTimeOffset first, valuetype System.DateTimeOffset second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.DateTimeOffset" />
        <Parameter Name="second" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="first">比較する最初のオブジェクト。</param>
        <param name="second">比較する 2 番目のオブジェクト。</param>
        <summary>比較する 2 つの<see cref="T:System.DateTimeOffset" />オブジェクトし、1 つは、2 番目、2、またはそれ以降、1 秒よりよりも前かどうかを示します。</summary>
        <returns>示す符号付き整数かどうかの値、<paramref name="first" />パラメーターよりも前かより後またはの値と同時に、<paramref name="second" />パラメーターは、次の表に示すようです。  
  
 <list type="table">  
<listheader>  
<term> 戻り値  
  
 </term>  
<description> 説明  
  
 </description>  
</listheader>  
<item>  
<term> 0 より小さい値  
  
 </term>  
<description> <paramref name="first" /> が <paramref name="second" /> よりも前の日時です。  
  
 </description>  
</item>  
<item>  
<term> 0  
  
 </term>  
<description> <paramref name="first" /> と <paramref name="second" /> が等価です。  
  
 </description>  
</item>  
<item>  
<term> 0 より大きい値  
  
 </term>  
<description> <paramref name="first" /> が <paramref name="second" /> より後の日時です。  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 比較を実行することで、メソッドは変換両方、`first`と`second`パラメーターを世界協定時刻 \(UTC\)、比較を実行する前にします。 メソッドは、次のと同じです。  
  
 [!code-csharp[System.DateTimeOffset.Syntax\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#1)]
 [!code-vb[System.DateTimeOffset.Syntax\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#1)]  
  
 言い換えると、<xref:System.DateTimeOffset.Compare%2A>メソッドは、次の 2 つあるかどうかを判断<xref:System.DateTimeOffset>オブジェクトでは、時間の 1 つの時点を表しています。 日付と時刻もオフセットが直接比較されます。  
  
   
  
## 例  
 次の例への呼び出し、<xref:System.DateTimeOffset.Compare%2A>メソッドを比較する<xref:System.DateTimeOffset>オブジェクト。  
  
 [!code-csharp[System.DateTimeOffset.Methods\#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods2.cs#7)]
 [!code-vb[System.DateTimeOffset.Methods\#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods2.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.CompareTo(System.DateTimeOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">現在の <see cref="T:System.DateTimeOffset" /> オブジェクトと比較するオブジェクト。</param>
        <summary>現在の比較<see cref="T:System.DateTimeOffset" />を指定したオブジェクト<see cref="T:System.DateTimeOffset" />オブジェクトを示し、現在のオブジェクトよりも前か、同じじか、または 2 番目より後<see cref="T:System.DateTimeOffset" />オブジェクト。</summary>
        <returns>現在の間のリレーションシップを示す符号付き整数<see cref="T:System.DateTimeOffset" />オブジェクトおよび<paramref name="other" />次の表に示すようにします。  
  
 <list type="table">  
<listheader>  
<term> 戻り値  
  
 </term>  
<description> 説明  
  
 </description>  
</listheader>  
<item>  
<term> 0 より小さい値  
  
 </term>  
<description> 現在<see cref="T:System.DateTimeOffset" />オブジェクトよりも前か<paramref name="other" />です。  
  
 </description>  
</item>  
<item>  
<term> 0  
  
 </term>  
<description> 現在<see cref="T:System.DateTimeOffset" />オブジェクトが同じ<paramref name="other" />です。  
  
 </description>  
</item>  
<item>  
<term> 0 より大きい値  
  
 </term>  
<description> 現在<see cref="T:System.DateTimeOffset" />オブジェクトがそれより遅い<paramref name="other" />です。  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは比較<xref:System.DateTimeOffset>オブジェクトと比較してその<xref:System.DateTimeOffset.UtcDateTime%2A>; の値は、かどうが決定 2 つのオブジェクトに単一時点を表しているかどうか、現在のオブジェクトがよりも前かよりも、後かと同じことを示します、`other`パラメーター。  
  
   
  
## 例  
 次の例への呼び出し、<xref:System.DateTimeOffset.CompareTo%2A>を比較するメソッド<xref:System.DateTimeOffset>オブジェクト。  
  
 [!code-csharp[System.DateTimeOffset.Methods\#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods3.cs#8)]
 [!code-vb[System.DateTimeOffset.Methods\#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods3.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.DateTime" /> を現在の日付の部分を表す値 <see cref="T:System.DateTimeOffset" /> オブジェクトです。</summary>
        <value>A <see cref="T:System.DateTime" /> を現在の日付の部分を表す値 <see cref="T:System.DateTimeOffset" /> オブジェクトです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティから、時刻部分の重要な一部の削除、 <xref:System.DateTimeOffset> オブジェクトし、その重要な日付部分だけを返します。 たとえば場合、 <xref:System.DateTimeOffset> オブジェクトの日付と時刻の値には"1\/12\/07 4時 01分 pm \+ 7:30"、プロパティの戻り値を <xref:System.DateTime> の値"1\/12\/07 12時 00分: 00"です。<xref:System.DateTime> 値は、日付のみを表示する標準またはカスタムの書式指定子のいずれかで表示されます。 \(説明については、例」のセクションを参照してください\)。  
  
 値、 <xref:System.DateTime.Kind%2A?displayProperty=fullName> 、返されたプロパティ <xref:System.DateTime> オブジェクトは常に <xref:System.DateTimeKind.Unspecified?displayProperty=fullName>します。 値でない影響を受ける、 <xref:System.DateTimeOffset.Offset%2A> プロパティです。  
  
 表示するには、日付、時刻部分なし、"D"を使用することも、または"d"書式指定子です。具体的な例を参照してください。  
  
   
  
## 例  
 次の例の値を取得、 <xref:System.DateTimeOffset.Date%2A> 特定の日付のプロパティです。 次に、その値をいくつかの標準とカスタムの日付のみの書式指定子を使用して、コンソールに表示します。  
  
 [!code-csharp[System.DateTimeOffset.Properties\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#1)]
 [!code-vb[System.DateTimeOffset.Properties\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DateTime">
      <MemberSignature Language="C#" Value="public DateTime DateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime DateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの日時を表す <see cref="T:System.DateTime" /> 値を取得します。</summary>
        <value>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの日時。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.DateTimeOffset.DateTime%2A> の値によってプロパティが影響を受けません、 <xref:System.DateTimeOffset.Offset%2A> プロパティです。  
  
 このプロパティは、日付との時間コンポーネントの両方を返します、 <xref:System.DateTimeOffset> を実行するのに便利ですが、オブジェクト <xref:System.DateTimeOffset> に <xref:System.DateTime> 変換します。 たとえば場合、 <xref:System.DateTimeOffset> オブジェクトの日付と時刻の値には"1\/12\/07 4時 01分 pm \+ 7時 30分"の日付を返します"1\/12\/07 午後 4時 01分"。  
  
 値、 <xref:System.DateTime.Kind%2A?displayProperty=fullName> 、返されたプロパティ <xref:System.DateTime> オブジェクトが <xref:System.DateTimeKind.Unspecified?displayProperty=fullName>です。  
  
   
  
## 例  
 次の例では、使用する、 <xref:System.DateTimeOffset.DateTime%2A> プロパティによって返される時刻に変換する、 <xref:System.DateTimeOffset.Now%2A> と <xref:System.DateTimeOffset.UtcNow%2A> プロパティ <xref:System.DateTime> 値。  
  
 [!code-csharp[System.DateTimeOffset.Properties\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#2)]
 [!code-vb[System.DateTimeOffset.Properties\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.LocalDateTime" />
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Day" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の月の日付を取得 <see cref="T:System.DateTimeOffset" /> オブジェクトです。</summary>
        <value>現在の日付部分 <see cref="T:System.DateTimeOffset" /> 1 ~ 31 の間の値として表されるオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.DateTimeOffset.Day%2A> の値によってプロパティが影響を受けません、 <xref:System.DateTimeOffset.Offset%2A> プロパティです。  
  
 文字列表現を作成することも、 <xref:System.DateTimeOffset> オブジェクトの日付部分を呼び出して、 <xref:System.DateTimeOffset.ToString%2A> 、"d"または"dd"カスタム書式指定子を持つメソッドです。  
  
   
  
## 例  
 次の例の日の部分を表示する、 <xref:System.DateTimeOffset> 3 つの異なる方法でオブジェクト。  
  
-   値を取得することによって、 <xref:System.DateTimeOffset.Day%2A> プロパティです。  
  
-   呼び出して、 <xref:System.DateTimeOffset.ToString%28System.String%29> "d"書式指定子を持つメソッドです。  
  
-   呼び出して、 <xref:System.DateTimeOffset.ToString%28System.String%29> "dd"書式指定子を持つメソッドです。  
  
 [!code-csharp[System.DateTimeOffset.Properties\#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#10)]
 [!code-vb[System.DateTimeOffset.Properties\#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の週の曜日を取得 <see cref="T:System.DateTimeOffset" /> オブジェクトです。</summary>
        <value>現在の週の曜日を示す列挙値のいずれかの <see cref="T:System.DateTimeOffset" /> オブジェクトです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 内の定数の値、 <xref:System.DayOfWeek> 列挙型の範囲から <xref:System.DayOfWeek.Sunday?displayProperty=fullName> に <xref:System.DayOfWeek.Saturday?displayProperty=fullName>します。 かどうか整数にキャストすると、その値の範囲は 0 から \(示します <xref:System.DayOfWeek.Sunday?displayProperty=fullName>\) 6 \(を示す <xref:System.DayOfWeek.Saturday?displayProperty=fullName>\)。  
  
 "D"書式指定子または"dddd"カスタム書式指定子を使用して、特定の日付の曜日名を表示することもできます。 例:  
  
 [!code-csharp[System.DateTimeOffset.Properties\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#4)]
 [!code-vb[System.DateTimeOffset.Properties\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#4)]  
  
 呼び出して、文字列が返されることに注意してください、 `ToString` のメソッド、 <xref:System.DayOfWeek> このプロパティによって返される列挙型のメンバーがローカライズされていません。 現在のカルチャまたは特定のカルチャの曜日名を表す文字列を抽出するを呼び出して、 <xref:System.DateTimeOffset.ToString%2A> "dddd"カスタム書式指定子を持つメソッドです。 次のコードが使用して、日付の曜日名を表示するなど、 `fr-fr` カルチャ。  
  
 [!code-csharp[System.DateTimeOffset.Properties\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#5)]
 [!code-vb[System.DateTimeOffset.Properties\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#5)]  
  
   
  
## 例  
 次の例では、2008 年の各月の最初の日の曜日名を表示します。  
  
 [!code-csharp[System.DateTimeOffset.Properties\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#3)]
 [!code-vb[System.DateTimeOffset.Properties\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DayOfYear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の年の日付を取得 <see cref="T:System.DateTimeOffset" /> オブジェクトです。</summary>
        <value>現在の年の日付 <see cref="T:System.DateTimeOffset" /> 1 から 366 までの間で値として表されるオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.DateTimeOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">現在と比較するオブジェクト <see cref="T:System.DateTimeOffset" /> オブジェクトです。</param>
        <summary>決定するかどうか、現在 <see cref="T:System.DateTimeOffset" /> オブジェクトでは、同じ地点を表す、指定されている時点で <see cref="T:System.DateTimeOffset" /> オブジェクトです。</summary>
        <returns>
          <see langword="true" /> 両方 <see cref="T:System.DateTimeOffset" /> オブジェクトが同じである <see cref="P:System.DateTimeOffset.UtcDateTime" /> 値。 それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 比較を実行する前に、このメソッドは両方の値を変換 <xref:System.DateTimeOffset> オブジェクトを世界協定時刻 \(UTC\)。 このメソッドは、次のと同じです。  
  
 [!code-csharp[System.DateTimeOffset.Syntax\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#2)]
 [!code-vb[System.DateTimeOffset.Syntax\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#2)]  
  
 つまり、 <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29> メソッドは、2 つあるかどうかを判断 <xref:System.DateTimeOffset> オブジェクトでは、時間の 1 つの時点を表しています。 日付と時刻もオフセットを直接比較します。 2 つあるかどうかを判断する <xref:System.DateTimeOffset> オブジェクトが同じ時刻を表すし、使用して、同じオフセット値を持つ、 <xref:System.DateTimeOffset.EqualsExact%2A> メソッドです。  
  
 A <xref:System.DateTimeOffset> されないオブジェクトが `null` 後 \(またはそれ以上\) あると見なされますが複数 `null`します。  
  
 このオーバー ロード、 <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29> メソッドを実装して、 <xref:System.IEquatable%601.Equals%2A?displayProperty=fullName> メソッドです。 も多少優れたパフォーマンスを提供、 <xref:System.DateTimeOffset.Equals%28System.Object%29?displayProperty=fullName> ために、オーバー ロード、 `other` パラメーターは、オブジェクトから変換する必要はありません。  
  
   
  
## 例  
 呼び出しの例を次の <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29> メソッドをテストする <xref:System.DateTimeOffset> オブジェクトが等しいかどうか、現在の <xref:System.DateTimeOffset> オブジェクトです。  
  
 [!code-csharp[System.DateTimeOffset.Methods\#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#9)]
 [!code-vb[System.DateTimeOffset.Methods\#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">現在と比較するオブジェクト <see cref="T:System.DateTimeOffset" /> オブジェクトです。</param>
        <summary>決定するかどうか、 <see cref="T:System.DateTimeOffset" /> オブジェクトには、指定したオブジェクトとしての同じ時点を表しています。</summary>
        <returns>
          <see langword="true" /> 場合、 <paramref name="obj" /> パラメーターは、 <see cref="T:System.DateTimeOffset" /> オブジェクトし、現在の同じ時点を表して <see cref="T:System.DateTimeOffset" /> オブジェクト。 それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 比較を実行する前に、このメソッドは、現在の値を変換 <xref:System.DateTimeOffset> オブジェクトおよび `obj` パラメーターを世界協定時刻 \(UTC\)。 このメソッドは、次のと同じです。  
  
 [!code-csharp[System.DateTimeOffset.Syntax\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#3)]
 [!code-vb[System.DateTimeOffset.Syntax\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#3)]  
  
 つまり、 <xref:System.DateTimeOffset.Equals%28System.Object%29?displayProperty=fullName> メソッドを決定するかどうか、現在 <xref:System.DateTimeOffset> オブジェクトと指定したオブジェクトに単一時点を表しています。 日付と時刻もオフセットを直接比較します。 2 つあるかどうかを判断する <xref:System.DateTimeOffset> オブジェクトが同じ時刻を表すし、使用して、同じオフセット値を持つ、 <xref:System.DateTimeOffset.EqualsExact%2A> メソッドです。  
  
 場合 `obj` は `null`, 、実行時の型の場合、または `obj` は <xref:System.DateTimeOffset>, 、メソッドが戻る `false`。  
  
   
  
## 例  
 次の例を示すかどうか、現在 <xref:System.DateTimeOffset> オブジェクトが他のいくつかと等しい <xref:System.DateTimeOffset> 、null 参照にもオブジェクト <xref:System.DateTime> オブジェクトです。  
  
 [!code-csharp[System.DateTimeOffset.Methods\#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#10)]
 [!code-vb[System.DateTimeOffset.Methods\#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTimeOffset first, valuetype System.DateTimeOffset second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.DateTimeOffset" />
        <Parameter Name="second" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="first">比較する最初のオブジェクト。</param>
        <param name="second">比較する 2 番目のオブジェクト。</param>
        <summary>指定した 2 つあるかどうかを判断 <see cref="T:System.DateTimeOffset" /> オブジェクトでは、時間の同じ時点を表しています。</summary>
        <returns>
          <see langword="true" /> 場合は、2 つ <see cref="T:System.DateTimeOffset" /> オブジェクトが同じである <see cref="P:System.DateTimeOffset.UtcDateTime" /> 値。 それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドはどちらも、変換、比較を実行する前に <xref:System.DateTimeOffset> オブジェクトを世界協定時刻 \(UTC\)。 このメソッドは、次のと同じです。  
  
 [!code-csharp[System.DateTimeOffset.Syntax\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 つまり、 <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29> を判断するメソッドかどうか、2 つ <xref:System.DateTimeOffset> オブジェクトでは、時間の 1 つの時点を表しています。 日付と時刻もオフセットを直接比較します。 2 つあるかどうかを判断する <xref:System.DateTimeOffset> オブジェクトが同じ時刻を表すし、使用して、同じオフセット値を持つ、 <xref:System.DateTimeOffset.EqualsExact%2A> メソッドです。  
  
   
  
## 例  
 呼び出しの例を次の <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29> のさまざまな組み合わせをテストするメソッド <xref:System.DateTimeOffset> オブジェクトの等価性。  
  
 [!code-csharp[System.DateTimeOffset.Methods\#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#11)]
 [!code-vb[System.DateTimeOffset.Methods\#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="EqualsExact">
      <MemberSignature Language="C#" Value="public bool EqualsExact (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EqualsExact(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">現在と比較するオブジェクト <see cref="T:System.DateTimeOffset" /> オブジェクトです。</param>
        <summary>決定するかどうか、現在 <see cref="T:System.DateTimeOffset" /> オブジェクトが同時を表し、指定したオフセットは同じ <see cref="T:System.DateTimeOffset" /> オブジェクトです。</summary>
        <returns>
          <see langword="true" /> 場合は、現在 <see cref="T:System.DateTimeOffset" /> オブジェクトおよび <paramref name="other" /> 同じ日付と時刻の値と同じである <see cref="P:System.DateTimeOffset.Offset" /> 値。 それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 複数のタイム ゾーンは、単一のオフセットの戻り値を共有するため `true` とは限りませんが、現在、 `other` 同じのタイム ゾーン内のオブジェクトは時刻です。  
  
 異なり、 <xref:System.DateTimeOffset.EqualsExact%2A> メソッドは、のオーバー ロード、 <xref:System.DateTimeOffset.Equals%2A> メソッドのみかどうか判別 2 つ <xref:System.DateTimeOffset> 値では、時間の 1 つの時点を表しています。 2 つの値が同時日付けと時刻だけでなく、同じオフセットがあることが示されていません。  
  
   
  
## 例  
 次の例では、使用する、 <xref:System.DateTimeOffset.EqualsExact%2A> メソッドのような比較を <xref:System.DateTimeOffset> オブジェクトです。  
  
 [!code-csharp[System.DateTimeOffset.Methods\#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#12)]
 [!code-vb[System.DateTimeOffset.Methods\#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Equals" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromFileTime(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromFileTime(System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">タイマー刻み単位で表した Windows ファイルの時刻。</param>
        <summary>指定された Windows ファイル時刻を同等の現地時刻に変換します。</summary>
        <returns>日付と時刻を表すオブジェクト<paramref name="fileTime" />オフセットのローカル時刻のオフセットに設定します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Windows ファイル時刻は、西暦 1601 年 1 月 1 日深夜 12時 00分以降の経過時間を 100 ナノ秒間隔の数を表す 64 ビット値\(西暦\)世界協定時刻 \(UTC\)。 Windows では、アプリケーションの作成、アクセスすると、またはファイルに書き込むときを記録するファイルの時刻を使用します。  
  
 Windows ファイル時刻は呼び出すことによって、Windows API を通じて直接アクセスできる、`GetFileTime`を返す関数、`FILETIME`構造体。 1 つの関数のパラメーターは、あるファイルの時刻情報を取得するファイルのハンドルです。 呼び出してファイル ハンドルを取得、`CreateFile`関数。`FILETIME`構造体の`dwHighDateTime`メンバーには、ファイルの時刻の 4 の上位バイトが含まれています。 およびその`dwLowDateTime`メンバーには、次の 4 つの下位バイトが含まれています。 次の例は、Windows ファイル時間値を取得し、それらを変換する方法を示しています。<xref:System.DateTimeOffset>値。  
  
 Windows ファイル時刻の値を作成することも<xref:System.DateTime>呼び出すことによって値、<xref:System.DateTime.ToFileTime%2A?displayProperty=fullName>と<xref:System.DateTime.ToFileTimeUtc%2A?displayProperty=fullName>メソッド、およびから<xref:System.DateTimeOffset>呼び出すことによって値、<xref:System.DateTimeOffset.ToFileTime%2A?displayProperty=fullName>メソッドです。  
  
   
  
## 例  
 次の例では、Windows API を使用して、ワードパッド実行可能ファイルの Windows ファイル時刻を取得します。  
  
 [!code-csharp[System.DateTimeOffset.FromFileTime\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.FromFileTime/cs/FileTime.cs#1)]
 [!code-vb[System.DateTimeOffset.FromFileTime\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.FromFileTime/vb/FileTime.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="filetime" /> が 0 未満です。  
  
 または  
  
 <paramref name="filetime" /> が <see langword="DateTimeOffset.MaxValue.Ticks" /> より大きくなっています。</exception>
      </Docs>
    </Member>
    <Member MemberName="FromUnixTimeMilliseconds">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromUnixTimeMilliseconds (long milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromUnixTimeMilliseconds(int64 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="milliseconds">1970\-01\-01T00:00:00Z \(1970 年 1 月 1 日、12:00 AM UTC\) からの経過時間をミリ秒で示す Unix 時間。 これ以前の場合、Unix 時間は負の値になります。</param>
        <summary>1970 年から経過したミリ秒数で表された Unix 時刻に変換します\-01\-に 01T00:00:00Z、<see cref="T:System.DateTimeOffset" />値。</summary>
        <returns>Unix 時間としての同じ時点を表す日付と時刻の値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.DateTimeOffset.Offset%2A> 、返されたプロパティ値<xref:System.DateTimeOffset>インスタンスが<xref:System.TimeSpan.Zero?displayProperty=fullName>、世界協定時刻を表します。 呼び出して、特定のタイム ゾーンの時刻に変換できます、<xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=fullName>メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="milliseconds" />小さい\-62,135,596,800,000 がします。  
  
 または  
  
 <paramref name="milliseconds" />253,402,300,799,999 を超えています。</exception>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      </Docs>
    </Member>
    <Member MemberName="FromUnixTimeSeconds">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromUnixTimeSeconds (long seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromUnixTimeSeconds(int64 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="seconds">1970\-01\-01T00:00:00Z \(1970 年 1 月 1 日、12:00 AM UTC\) からの経過時間を秒で示す Unix 時間。 これ以前の場合、Unix 時間は負の値になります。</param>
        <summary>1970 年から経過した秒数で表された Unix 時刻に変換します\-01\-に 01T00:00:00Z、<see cref="T:System.DateTimeOffset" />値。</summary>
        <returns>Unix 時間としての同じ時点を表す日付と時刻の値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.DateTimeOffset.Offset%2A> 、返されたプロパティ値<xref:System.DateTimeOffset>インスタンスが<xref:System.TimeSpan.Zero?displayProperty=fullName>、世界協定時刻を表します。 呼び出して、特定のタイム ゾーンの時刻に変換できます、<xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=fullName>メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="seconds" />小さい\-62,135,596,800 がします。  
  
 または  
  
 <paramref name="seconds" />253,402,300,799 を超えています。</exception>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeSeconds" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のハッシュ コードを返す <see cref="T:System.DateTimeOffset" /> オブジェクトです。</summary>
        <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Hour" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在によって表される時刻の時間部分を取得<see cref="T:System.DateTimeOffset" />オブジェクト。</summary>
        <value>現在の時間部分<see cref="T:System.DateTimeOffset" />オブジェクト。 このプロパティには、0 ～ 23 の値の範囲をとる 24 時間制が使用されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.DateTimeOffset.Hour%2A>プロパティがの値によって影響を受けません、<xref:System.DateTimeOffset.Offset%2A>プロパティです。  
  
 文字列表現を作成することも、<xref:System.DateTimeOffset>オブジェクトの時間部分を呼び出して、<xref:System.DateTimeOffset.ToString%2A>で"H"を持つメソッドまたは"HH"カスタム書式指定子。  
  
   
  
## 例  
 次の例の時間部分を表示する、 <xref:System.DateTimeOffset> 3 つの方法でオブジェクト。  
  
-   値を取得することによって、<xref:System.DateTimeOffset.Hour%2A>プロパティです。  
  
-   呼び出して、 <xref:System.DateTimeOffset.ToString%28System.String%29> "H"書式指定子を持つメソッドです。  
  
-   呼び出して、<xref:System.DateTimeOffset.ToString%28System.String%29>メソッド"HH"を書式指定子。  
  
 [!code-csharp[System.DateTimeOffset.Properties\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#6)]
 [!code-vb[System.DateTimeOffset.Properties\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalDateTime">
      <MemberSignature Language="C#" Value="public DateTime LocalDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime LocalDateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.LocalDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.DateTime" /> 、現在の現地日時を表す値<see cref="T:System.DateTimeOffset" />オブジェクト。</summary>
        <value>現在の現地日時<see cref="T:System.DateTimeOffset" />オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 必要に応じて、<xref:System.DateTimeOffset.LocalDateTime%2A>プロパティ変換現在<xref:System.DateTimeOffset>オブジェクトの日付と時刻をローカル システムの日付と時刻。 変換では、2 段階の操作を示します。  
  
1.  プロパティの現在の変換<xref:System.DateTimeOffset>オブジェクトの時刻を世界協定時刻 \(UTC\)。  
  
2.  次に、プロパティはローカル時刻に UTC を変換します。  
  
 無効な時刻がないと、あいまいな時刻が、ローカルのゾーンの標準時にマップされます。 \(ただし、変換は、異常を作成できます場合、<xref:System.DateTimeOffset>あいまいな日付と時刻値が UTC に変換することができます、元の時刻とは異なるローカル時刻に戻ると、ローカル コンピューターから派生する値が反映されます。\)。  プロパティでは、この変換を実行するときに、ローカル タイム ゾーンの調整規則が適用されます。  
  
 このプロパティは、日付との時間コンポーネントの両方を返します、<xref:System.DateTimeOffset>オブジェクトは、役立ちます<xref:System.DateTimeOffset>に<xref:System.DateTime>変換します。 どの変換でも必要な時間に加え、このプロパティとは異なります、<xref:System.DateTimeOffset.DateTime%2A>プロパティの値を設定して、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>オブジェクトを<xref:System.DateTimeKind.Local?displayProperty=fullName>です。  
  
   
  
## 例  
 次の例では、複数の変換の<xref:System.DateTimeOffset>米国内のローカル時刻に値太平洋標準時ゾーンでの実行例を次に示します。 最後に 3 回はすべてあいまいです。プロパティは、それらのすべてが太平洋標準時ゾーンの 1 つの日時にマップします。  
  
 [!code-csharp[System.DateTimeOffset.Properties\#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#7)]
 [!code-vb[System.DateTimeOffset.Properties\#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>最大有効値を表す<see cref="T:System.DateTimeOffset" />です。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この定数の値は、12\/31\/9999 11時 59分: 59 PM \+ 00時 00分です。  
  
 <xref:System.DateTimeOffset.MaxValue>プロパティの使用を確認するかどうかの新しい値<xref:System.DateTimeOffset>オブジェクトまたは<xref:System.DateTimeOffset>算術演算によって返される値は、同じ、またはこの範囲の最大値よりも前です。 そうでない場合、メソッドをスローする<xref:System.ArgumentOutOfRangeException>です。 どの<xref:System.DateTimeOffset>は変換後の値を世界協定時刻 \(UTC\)、メソッドで比較する前に<xref:System.DateTimeOffset.MaxValue>です。  つまり、<xref:System.DateTimeOffset>値が日付と時刻が、最大範囲に近づいているが、オフセットは負の場合、例外をスローする可能性があります。 たとえば、9999 年 12 月 31 日までの値 11時 00分 PM \-02:00 は 1 時間になっているために、範囲外よりも後<xref:System.DateTimeOffset.MaxValue>UTC に変換されます。  
  
 などのいくつかのカレンダー、<xref:System.Globalization.UmAlQuraCalendar>より前である日付範囲をサポートして<xref:System.DateTime.MaxValue>です。 このような場合は、アクセスしようと<xref:System.DateTime.MaxValue>変数の代入または書式設定および解析操作でスローできます、<xref:System.ArgumentOutOfRangeException>です。 値を取得する代わりに<xref:System.DateTime.MaxValue?displayProperty=fullName>、特定のカルチャの最新の有効な日付値からの値を取得することができます、<xref:System.Globalization.Calendar.MaxSupportedDateTime%2A?displayProperty=fullName>プロパティです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="F:System.DateTime.MaxValue" />現在または指定されたカルチャの既定の暦の範囲外です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Millisecond" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在によって表される時刻のミリ秒部分を取得<see cref="T:System.DateTimeOffset" />オブジェクト。</summary>
        <value>現在のミリ秒部分<see cref="T:System.DateTimeOffset" />オブジェクト、0 ~ 999 の整数として表されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 文字列表現を作成することも、<xref:System.DateTimeOffset>オブジェクトのミリ秒部分を呼び出して、 <xref:System.DateTimeOffset.ToString%2A> "fff"カスタム書式指定子を持つメソッドです。  
  
 などのプロパティに依存する場合<xref:System.DateTimeOffset.Now%2A>または<xref:System.DateTimeOffset.UtcNow%2A>経過したミリ秒数を正確に追跡するには、時刻のミリ秒部分の精度は、システム クロックの分解能に依存します。 Windows NT 3.5 以降および Windows Vista オペレーティング システムでは、時計の解像力は約 10 ~ 15 ミリ秒です。  
  
   
  
## 例  
 次の例のミリ秒数を表示する、<xref:System.DateTimeOffset>オブジェクトに直接アクセスする、カスタム書式指定子を使用して、<xref:System.DateTimeOffset.Millisecond%2A>プロパティです。  
  
 [!code-csharp[System.DateTimeOffset.Properties\#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#12)]
 [!code-vb[System.DateTimeOffset.Properties\#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Minute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の時刻の分の部分を取得 <see cref="T:System.DateTimeOffset" /> オブジェクトです。</summary>
        <value>現在の分の部分 <see cref="T:System.DateTimeOffset" /> オブジェクトの 0 から 59 までの整数で表されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.DateTimeOffset.Minute%2A> の値によってプロパティが影響を受けません、 <xref:System.DateTimeOffset.Offset%2A> プロパティです。  
  
 文字列表現を作成することも、 <xref:System.DateTimeOffset> オブジェクトの分の部分を呼び出して、 <xref:System.DateTimeOffset.ToString%2A> "m"または"mm"カスタム書式指定子を持つメソッドです。  
  
   
  
## 例  
 次の例の分の部分を表示する、 <xref:System.DateTimeOffset> 3 つの異なる方法でオブジェクト。  
  
-   値を取得することによって、 <xref:System.DateTimeOffset.Minute%2A> プロパティです。  
  
-   呼び出して、 <xref:System.DateTimeOffset.ToString%28System.String%29> "m"書式指定子を持つメソッドです。  
  
-   呼び出して、 <xref:System.DateTimeOffset.ToString%28System.String%29> "mm"書式指定子を持つメソッドです。  
  
 [!code-csharp[System.DateTimeOffset.Properties\#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#8)]
 [!code-vb[System.DateTimeOffset.Properties\#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset MinValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>できるだけ早いを表す<see cref="T:System.DateTimeOffset" />値。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この定数の値は 1\/1\/0001 12時 00分: 00 \+ 00時 00分です。  
  
 <xref:System.DateTimeOffset.MinValue>プロパティの使用を確認するかどうかの新しい値<xref:System.DateTimeOffset>オブジェクトまたは<xref:System.DateTimeOffset>算術演算によって返される値は、同じか、この範囲の最小値よりもそれ以降。 そうでない場合、メソッドをスロー、<xref:System.ArgumentOutOfRangeException>です。 どの<xref:System.DateTimeOffset>は変換後の値を世界協定時刻 \(UTC\)、メソッドで比較を実行する前に<xref:System.DateTimeOffset.MinValue>です。  つまり、<xref:System.DateTimeOffset>値が日付と時刻が最小の範囲に近づいているが、オフセットが正の値、例外をスローする可能性があります。 たとえば、値 1\/1\/0001 1時 00分: 00 AM \+02: 00 が範囲外 1 時間になっているためよりも前<xref:System.DateTimeOffset.MinValue>UTC に変換されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Month" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在で表される日付の月の部分を取得<see cref="T:System.DateTimeOffset" />オブジェクト。</summary>
        <value>現在の月コンポーネント<see cref="T:System.DateTimeOffset" />オブジェクト、1 ~ 12 の整数として表されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.DateTimeOffset.Month%2A>プロパティがの値によって影響を受けません、<xref:System.DateTimeOffset.Offset%2A>プロパティです。  
  
 文字列表現を作成することも、<xref:System.DateTimeOffset>オブジェクトの月コンポーネントを呼び出して、 <xref:System.DateTimeOffset.ToString%2A> "M"または"MM"カスタム書式指定子を持つメソッドです。  
  
   
  
## 例  
 次の例の月の部分を表示する、 <xref:System.DateTimeOffset> 3 つの方法で値。  
  
-   値を取得することによって、<xref:System.DateTimeOffset.Month%2A>プロパティです。  
  
-   呼び出して、 <xref:System.DateTimeOffset.ToString%28System.String%29> "M"書式指定子を持つメソッドです。  
  
-   呼び出して、 <xref:System.DateTimeOffset.ToString%28System.String%29> "MM"書式指定子を持つメソッドです。  
  
 [!code-csharp[System.DateTimeOffset.Properties\#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#9)]
 [!code-vb[System.DateTimeOffset.Properties\#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTimeOffset Now" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現地時刻と世界協定時刻 \(UTC\) の差をオフセットとして持つ、現在のコンピューターの現在日時に設定された <see cref="T:System.DateTimeOffset" /> オブジェクトを取得します。</summary>
        <value>ローカル タイム ゾーンと世界協定時刻 \(UTC\) の差をオフセットとして持つ、現在の現地時刻に設定された <see cref="T:System.DateTimeOffset" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 現在のローカル時刻のミリ秒部分の有効桁数は、システム クロックの分解能に依存します。 Windows NT 3.5 以降および Windows Vista オペレーティング システムでは、時計の解像力は約 10 ~ 15 ミリ秒です。  
  
   
  
## 例  
 次の例で、<xref:System.DateTimeOffset.Now%2A>現在の日付と時刻を取得するプロパティの各を使用して表示し、[標準の日付と時刻の書式指定文字列](http://msdn.microsoft.com/ja-jp/bb79761a-ca08-44ee-b142-b06b3e2fc22b)でサポートされている、<xref:System.DateTimeOffset>型です。  
  
 [!code-csharp[System.DateTimeOffset.Now\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.now/cs/now1.cs#1)]
 [!code-vb[System.DateTimeOffset.Now\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.now/vb/now1.vb#1)]  
  
 次の例では、<xref:System.DateTimeOffset.Now%2A>と<xref:System.DateTimeOffset.Millisecond%2A>プロパティをシステム クロックの解像度を確認します。 時刻を表示、ミリ秒の部分の値が変更された場合のみです。  
  
 [!code-csharp[System.DateTimeOffset.Properties\#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#11)]
 [!code-vb[System.DateTimeOffset.Properties\#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcNow" />
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public TimeSpan Offset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Offset" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Offset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>世界協定時刻 \(UTC\) から時刻のオフセットを取得します。</summary>
        <value>現在の違い<see cref="T:System.DateTimeOffset" />オブジェクトの値の時刻と世界協定時刻 \(UTC\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値、 <xref:System.TimeSpan.Hours%2A> 、返されたプロパティ<xref:System.TimeSpan>オブジェクト範囲は\-14 時間を ~ 14 時間。  
  
 値、<xref:System.DateTimeOffset.Offset%2A>プロパティは、1 分間に正確です。  
  
   
  
## 例  
 次の例では、<xref:System.DateTimeOffset.Offset%2A>世界協定時刻 \(UTC\) からのローカル時間の差を表示するプロパティです。  
  
 [!code-csharp[System.DateTimeOffset.Properties\#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#13)]
 [!code-vb[System.DateTimeOffset.Properties\#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static DateTimeOffset op_Addition (DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Addition(valuetype System.DateTimeOffset dateTimeOffset, valuetype System.TimeSpan timeSpan) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">時間間隔を加算するオブジェクト。</param>
        <param name="timeSpan">加算する時間間隔。</param>
        <summary>特定の日時を持つ <see cref="T:System.DateTimeOffset" /> オブジェクトに指定された時間間隔を加算し、新しい日時を持った <see cref="T:System.DateTimeOffset" /> オブジェクトを作成します。</summary>
        <returns>
          <paramref name="dateTimeTz" /> と <paramref name="timeSpan" /> の値の合計を値とするオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.DateTimeOffset.op_Addition%2A>メソッド定義の加算演算<xref:System.DateTimeOffset>値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.DateTimeOffset.Operators\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#1)]
 [!code-vb[System.DateTimeOffset.Operators\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#1)]  
  
 カスタム演算子と演算子のオーバー ロードをサポートしない言語を呼び出すことができます、<xref:System.DateTimeOffset.Add%2A>メソッド代わりにします。  
  
 The equivalent method for this operator is <xref:System.DateTimeOffset.Add%28System.DateTimeOffset%2CSystem.TimeSpan%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MinValue" /> 未満です。  
  
 または  
  
 結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
        <altmember cref="M:System.DateTimeOffset.Add(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Equality(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初のオブジェクト。</param>
        <param name="right">比較する 2 番目のオブジェクト。</param>
        <summary>指定した 2 つあるかどうかを決定 <see cref="T:System.DateTimeOffset" /> オブジェクトでは、時間の同じ時点を表しています。</summary>
        <returns>
          <see langword="true" /> 両方 <see cref="T:System.DateTimeOffset" /> オブジェクトが同じである <see cref="P:System.DateTimeOffset.UtcDateTime" /> 値。 それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.DateTimeOffset.op_Equality%2A> メソッドに対して等値演算子の動作を定義する <xref:System.DateTimeOffset> オブジェクトです。 次のようなコードが有効にします。  
  
 [!code-csharp[System.DateTimeOffset.Operators\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#2)]
 [!code-vb[System.DateTimeOffset.Operators\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#2)]  
  
 評価する前に、 `left` と `right` 等しいかどうか、演算子のオペランドが両方の値を世界協定時刻 \(UTC\) に変換します。 操作は、次のと同じです。  
  
 [!code-csharp[System.DateTimeOffset.Syntax\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 つまり、 <xref:System.DateTimeOffset.op_Equality%2A> を判断するメソッドかどうか、2 つ <xref:System.DateTimeOffset> オブジェクトでは、時間の 1 つの時点を表しています。 日付と時刻もオフセットを直接比較します。 2 つあるかどうかを判断する <xref:System.DateTimeOffset> オブジェクトが同じ時刻を表すし、使用して、同じオフセット値を持つ、 <xref:System.DateTimeOffset.EqualsExact%2A> メソッドです。  
  
 The equivalent method for this operator is <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Equals" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool op_GreaterThan (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初のオブジェクト。</param>
        <param name="right">比較する 2 番目のオブジェクト。</param>
        <summary>いずれかを指定するかどうかを判断<see cref="T:System.DateTimeOffset" />オブジェクトより大きい \(またはそれより遅い\)、2 番目に指定された<see cref="T:System.DateTimeOffset" />オブジェクト。</summary>
        <returns>
          <see langword="true" />場合、<see cref="P:System.DateTimeOffset.UtcDateTime" />値の<paramref name="left" />がよりも後、<see cref="P:System.DateTimeOffset.UtcDateTime" />値の<paramref name="right" />、それ以外の<see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.DateTimeOffset.op_GreaterThan%2A>メソッド、演算子のより大きいの操作を定義する<xref:System.DateTimeOffset>オブジェクト。 次のようなコードが有効にします。  
  
 [!code-csharp[System.DateTimeOffset.Operators\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#3)]
 [!code-vb[System.DateTimeOffset.Operators\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#3)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.DateTimeOffset.Compare%2A>メソッド代わりにします。 これらを呼び出すことも、<xref:System.DateTimeOffset.op_GreaterThan%2A>メソッドを直接として次の例を示しています。  
  
 [!code-vb[System.DateTimeOffset.Operators\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#4)]  
  
 評価する前に、`left`と`right`演算子のオペランドが両方の値を世界協定時刻 \(UTC\) に変換します。 操作は、次のと同じです。  
  
 [!code-csharp[System.DateTimeOffset.Syntax\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#5)]
 [!code-vb[System.DateTimeOffset.Syntax\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#5)]  
  
 The equivalent method for this operator is <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool op_GreaterThanOrEqual (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_GreaterThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初のオブジェクト。</param>
        <param name="right">比較する 2 番目のオブジェクト。</param>
        <summary>いずれかを指定するかどうかを判断 <see cref="T:System.DateTimeOffset" /> オブジェクトがもう 1 つ以上指定 <see cref="T:System.DateTimeOffset" /> オブジェクトです。</summary>
        <returns>
          <see langword="true" /> 場合、 <see cref="P:System.DateTimeOffset.UtcDateTime" /> の値 <paramref name="left" /> が同じか、またはよりも後の <see cref="P:System.DateTimeOffset.UtcDateTime" /> の値 <paramref name="right" />。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.DateTimeOffset.op_GreaterThan%2A> メソッドは、以上の演算子の動作を定義 <xref:System.DateTimeOffset> オブジェクトです。 次のようなコードが有効にします。  
  
 [!code-csharp[System.DateTimeOffset.Operators\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#5)]
 [!code-vb[System.DateTimeOffset.Operators\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#5)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、 <xref:System.DateTimeOffset.Compare%2A> メソッド代わりにします。 一部の言語を呼び出すことも、 <xref:System.DateTimeOffset.op_GreaterThanOrEqual%2A> メソッドを直接として次の例を示しています。  
  
 [!code-vb[System.DateTimeOffset.Operators\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#6)]  
  
 評価する前に、 `left` と `right` 、演算子のオペランドが両方の値を世界協定時刻 \(UTC\) に変換します。 操作は、次のと同じです。  
  
 [!code-csharp[System.DateTimeOffset.Syntax\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#6)]
 [!code-vb[System.DateTimeOffset.Syntax\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#6)]  
  
 The equivalent method for this operator is <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static DateTimeOffset op_Implicit (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Implicit(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Implicit(System.DateTime)~System.DateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">変換対象のオブジェクト。</param>
        <summary>暗黙的な変換を定義、<see cref="T:System.DateTime" />オブジェクトを<see cref="T:System.DateTimeOffset" />オブジェクト。</summary>
        <returns>変換後のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.DateTimeOffset.op_Implicit%2A>メソッドにより、コンパイラが自動的に変換する、<xref:System.DateTime>オブジェクトを<xref:System.DateTimeOffset>せずに明示的なキャスト演算子 \(c\#\) または \(Visual Basic\) の変換関数の呼び出しオブジェクト。 データの損失を伴わない、スローしませんを拡大変換を定義、<xref:System.OverflowException>です。<xref:System.DateTimeOffset.op_Implicit%2A>メソッドは、次の考えられるようなコード。  
  
 [!code-csharp[System.DateTimeOffset.Operators\#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#7)]
 [!code-vb[System.DateTimeOffset.Operators\#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#7)]  
  
 このメソッドは、<xref:System.DateTimeOffset.%23ctor%2A>コンス トラクターです。 結果のオフセット<xref:System.DateTimeOffset>オブジェクトの値に依存、<xref:System.DateTime.Kind%2A?displayProperty=fullName>のプロパティ、`dateTime`パラメーター。  
  
-   場合の値、<xref:System.DateTime.Kind%2A?displayProperty=fullName>プロパティは<xref:System.DateTimeKind.Utc?displayProperty=fullName>、日付と時刻の<xref:System.DateTimeOffset>オブジェクトと等しい設定`dateTime`とその<xref:System.DateTimeOffset.Offset%2A>プロパティが 0 に設定します。  
  
-   場合の値、<xref:System.DateTime.Kind%2A?displayProperty=fullName>プロパティは<xref:System.DateTimeKind.Local?displayProperty=fullName>または<xref:System.DateTimeKind.Unspecified?displayProperty=fullName>、日付と時刻の<xref:System.DateTimeOffset>オブジェクトと等しい設定`dateTime`、およびその<xref:System.DateTimeOffset.Offset%2A>プロパティを設定して、ローカル システムの現在のタイム ゾーンのオフセットにします。  
  
 The equivalent method for this operator is <xref:System.DateTimeOffset.%23ctor%28System.DateTime%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">オフセットを適用した結果の世界協定時刻 \(UTC\) の日時が <see cref="F:System.DateTimeOffset.MinValue" /> 未満です。  
  
 または  
  
 オフセットを適用した結果の UTC 日時が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初のオブジェクト。</param>
        <param name="right">比較する 2 番目のオブジェクト。</param>
        <summary>指定した 2 つあるかどうかを判断 <see cref="T:System.DateTimeOffset" /> にさまざまなポイントにオブジェクトを参照してください。</summary>
        <returns>
          <see langword="true" /> 場合 <paramref name="left" /> と <paramref name="right" /> が同じでない <see cref="P:System.DateTimeOffset.UtcDateTime" /> 値。 それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.DateTimeOffset.op_Inequality%2A> メソッドの非等値演算子の動作を定義する <xref:System.DateTimeOffset> オブジェクトです。 常に結果が返される、反対側から <xref:System.DateTimeOffset.op_Equality%2A>します。<xref:System.DateTimeOffset.op_Inequality%2A> メソッドは、次のようなコードを使用します。  
  
 [!code-csharp[System.DateTimeOffset.Operators\#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#8)]
 [!code-vb[System.DateTimeOffset.Operators\#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#8)]  
  
 評価する前に、 `left` と `right` 等しいかどうか、演算子のオペランドが両方の値を世界協定時刻 \(UTC\) に変換します。 操作は、次のと同じです。  
  
 [!code-csharp[System.DateTimeOffset.Syntax\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 つまり、 <xref:System.DateTimeOffset.op_Inequality%2A> メソッドを決定するかどうか、2 つ <xref:System.DateTimeOffset> オブジェクトでは、時間のさまざまなポイントです。 日付と時刻もオフセットを直接比較します。  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、 <xref:System.DateTimeOffset.Compare%2A> メソッド代わりにします。 さらに、一部の言語を呼び出すことも、 <xref:System.DateTimeOffset.op_Inequality%2A> メソッドを直接として次の例を示しています。  
  
 [!code-vb[System.DateTimeOffset.Operators\#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#9)]  
  
 The equivalent method for this operator is <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool op_LessThan (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_LessThan(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初のオブジェクト。</param>
        <param name="right">比較する 2 番目のオブジェクト。</param>
        <summary>いずれかを指定するかどうかを判断 <see cref="T:System.DateTimeOffset" /> オブジェクトの 1 秒未満が指定されている <see cref="T:System.DateTimeOffset" /> オブジェクトです。</summary>
        <returns>
          <see langword="true" /> 場合、 <see cref="P:System.DateTimeOffset.UtcDateTime" /> の値 <paramref name="left" /> よりも前か、 <see cref="P:System.DateTimeOffset.UtcDateTime" /> の値 <paramref name="right" />。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.DateTimeOffset.op_LessThan%2A> メソッド定義の演算子よりも低いの操作 <xref:System.DateTimeOffset> オブジェクトです。 次のようなコードが有効にします。  
  
 [!code-csharp[System.DateTimeOffset.Operators\#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#10)]
 [!code-vb[System.DateTimeOffset.Operators\#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#10)]  
  
 評価する前に、 `left` と `right` 、演算子のオペランドが両方のオペランドを世界協定時刻 \(UTC\) に変換します。 操作は、次のと同じです。  
  
 [!code-csharp[System.DateTimeOffset.Syntax\#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#8)]
 [!code-vb[System.DateTimeOffset.Syntax\#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#8)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、 <xref:System.DateTimeOffset.Compare%2A> メソッド代わりにします。 さらに、一部の言語を呼び出すことも、 <xref:System.DateTimeOffset.op_LessThan%2A> メソッドを直接として次の例を示しています。  
  
 [!code-vb[System.DateTimeOffset.Operators\#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#11)]  
  
 The equivalent method for this operator is <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool op_LessThanOrEqual (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_LessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初のオブジェクト。</param>
        <param name="right">比較する 2 番目のオブジェクト。</param>
        <summary>いずれかを指定するかどうかを判断 <see cref="T:System.DateTimeOffset" /> オブジェクトの 1 秒未満が指定されている <see cref="T:System.DateTimeOffset" /> オブジェクトです。</summary>
        <returns>
          <see langword="true" /> 場合、 <see cref="P:System.DateTimeOffset.UtcDateTime" /> の値 <paramref name="left" /> よりも前か、 <see cref="P:System.DateTimeOffset.UtcDateTime" /> の値 <paramref name="right" />。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.DateTimeOffset.op_LessThanOrEqual%2A> メソッドの動作を定義する、以下のオペレーターに <xref:System.DateTimeOffset> オブジェクトです。 次のようなコードが有効にします。  
  
 [!code-csharp[System.DateTimeOffset.Operators\#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#12)]
 [!code-vb[System.DateTimeOffset.Operators\#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#12)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、 <xref:System.DateTimeOffset.Compare%2A> メソッド代わりにします。 一部の言語を呼び出すことも、 <xref:System.DateTimeOffset.op_LessThanOrEqual%2A> メソッドを直接として次の例を示しています。  
  
 [!code-vb[System.DateTimeOffset.Operators\#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#13)]  
  
 評価する前に、 `left` と `right` 、演算子のオペランドが両方の値を世界協定時刻 \(UTC\) に変換します。 操作は、次のと同じです。  
  
 [!code-csharp[System.DateTimeOffset.Syntax\#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#9)]
 [!code-vb[System.DateTimeOffset.Syntax\#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#9)]  
  
 The equivalent method for this operator is <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan op_Subtraction (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">被減数。</param>
        <param name="right">減数。</param>
        <summary>一方の <see cref="T:System.DateTimeOffset" /> オブジェクトをもう一方のオブジェクトから減算し、時間間隔を生成します。</summary>
        <returns>
          <paramref name="left" /> と <paramref name="right" /> の差を表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.DateTimeOffset.op_Subtraction%2A>メソッド定義の減算演算<xref:System.DateTimeOffset>オブジェクト。 次のようなコードが有効にします。  
  
 [!code-csharp[System.DateTimeOffset.Operators\#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#14)]
 [!code-vb[System.DateTimeOffset.Operators\#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#14)]  
  
 カスタム演算子と演算子のオーバー ロードをサポートしない言語を呼び出すことができます、<xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29?displayProperty=fullName>メソッド代わりにします。  
  
 The equivalent method for this operator is <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static DateTimeOffset op_Subtraction (DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Subtraction(valuetype System.DateTimeOffset dateTimeOffset, valuetype System.TimeSpan timeSpan) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">減算される日時オブジェクト。</param>
        <param name="timeSpan">減算する時間間隔。</param>
        <summary>指定した日付と時刻から指定した時間間隔を減算して、新しい日付と時刻を作成します。</summary>
        <returns>
          <paramref name="dateTimeOffset" /> から <paramref name="timeSpan" /> を減算した値と等しいオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.DateTimeOffset.op_Subtraction%2A>メソッド定義の減算演算<xref:System.DateTimeOffset>オブジェクト。 次のようなコードが有効にします。  
  
 [!code-csharp[System.DateTimeOffset.Operators\#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#15)]
 [!code-vb[System.DateTimeOffset.Operators\#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#15)]  
  
 カスタム演算子と演算子のオーバー ロードをサポートしない言語を呼び出すことができます、<xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=fullName>メソッド代わりにします。  
  
 The equivalent method for this operator is <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%2CSystem.TimeSpan%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として返された <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MinValue" /> 未満であるか、<see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
        <altmember cref="M:System.DateTimeOffset.Subtract(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">変換する日時を含む文字列。</param>
        <summary>指定した文字列形式の日付、時刻、およびオフセットを等価の <see cref="T:System.DateTimeOffset" /> の値に変換します。</summary>
        <returns>
          <paramref name="input" /> に含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.DateTimeOffset.Parse%28System.String%29>任意の順序で表示されることができ、空白で区切られた 3 つの要素を含む文字列を解析します。 これら 3 つの要素は、次の表に示すとおりです。  
  
|要素|例|  
|--------|-------|  
|\<Date\>\<\/Date\>|"2\/10\/2007"|  
|\<Time\>\<\/Time\>|"1時 02分: 03 PM"|  
|\<Offset\>\<\/Offset\>|"\-7:30"|  
  
 これらの各要素は任意ですが、\<Offset\>単独で表示されることはできません\<\/Offset\>。 いずれか\<Date\>または\<Time\>。\<\/Time\>\<\/Date\>と共に指定する必要があります。 場合\<Date\>が見つからないか、その既定値は、現在の日付\<\/Date\>。 場合\<Time\>が見つからないか、その既定値は 12時 00分: 00 AM\<\/Time\> 場合\<Date\>があり、コンポーネントでは 2 桁のみが、年、年の値に基づいて、現在のカルチャの現在の暦に変換されます、<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=fullName>プロパティ\<\/Date\>。 場合\<Offset\>が見つからないか、その既定値はローカル タイム ゾーンのオフセット\<\/Offset\>。 \<Offset\>表すことができます、負または正のオフセットのいずれかから世界協定時刻 \(UTC\)。\<\/Offset\> どちらの場合、\<Offset\>の記号を含める必要があります\<\/Offset\>。  
  
 `input`で書式設定情報を使用して文字列を解析する<xref:System.Globalization.DateTimeFormatInfo>初期化されることが、現在のカルチャ オブジェクト。 必ずしも対応しません、現在のカルチャの書式設定することを指定した書式設定を含む文字列を解析するを使用して、<xref:System.DateTimeOffset.ParseExact%2A>メソッドと書式指定子を提供します。  
  
   
  
## 例  
 次の例では、<xref:System.DateTimeOffset.Parse%28System.String%29>をいくつかの日付と時刻の文字列を解析します。 例では、2007 年 3 月 22 日からの出力を含むカルチャがある en システム上のことです。  
  
 [!code-csharp[System.DateTimeOffset.Parse\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#1)]
 [!code-vb[System.DateTimeOffset.Parse\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">オフセットが 14 時間を上回っているか、\-14 時間を下回っています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> に日付と時刻の有効な文字列形式が含まれていません。  
  
 または  
  
 <paramref name="input" /> に日付または時刻のないオフセット値の文字列形式が含まれています。</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">変換する日時を含む文字列。</param>
        <param name="formatProvider">
          <c>input</c> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>指定したカルチャ固有の書式情報を使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTimeOffset" /> の値に変換します。</summary>
        <returns>
          <paramref name="formatProvider" /> で指定された書式に従って表記された、<paramref name="input" /> に含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、任意の順序で表示されることができ、空白で区切られた 3 つの要素を含む文字列を解析します。 これら 3 つの要素は、次の表に示します。  
  
|要素|例|  
|--------|-------|  
|\<Date\>\<\/Date\>|"2\/10\/2007"|  
|\<Time\>\<\/Time\>|"1時 02分: 03 PM"|  
|\<Offset\>\<\/Offset\>|"\-7:30"|  
  
 これらの各要素は任意ですが、\<Offset\>を単独で表示されることはできません\<\/Offset\>。 いずれか\<Date\>または\<Time\>。\<\/Time\>\<\/Date\>と共に指定する必要があります。 場合\<Date\>が見つからないか、その既定値は、現在の日付\<\/Date\>。 場合\<Date\>があり、コンポーネントでは 2 桁のみが、年で年に変換されます、`provider`パラメーターの現在のカレンダーの値、<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=fullName>プロパティ\<\/Date\>。 場合\<Time\>が見つからないか、その既定値は 12時 00分: 00 AM\<\/Time\> 場合\<Offset\>が見つからないか、その既定値はローカル タイム ゾーンのオフセット\<\/Offset\>。 \<Offset\>表すことができます、負または正のオフセットのいずれかから世界協定時刻 \(UTC\)。\<\/Offset\> どちらの場合、\<Offset\>の記号を含める必要があります\<\/Offset\>。  
  
 これら 3 つの要素の形式がによって定義された、`formatProvider`パラメーターで、次のいずれかになります。  
  
-   A<xref:System.Globalization.CultureInfo>の書式を使用するカルチャを表すオブジェクト、`input`パラメーター。<xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>プロパティ定義で使用される書式`input`です。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
 場合`formatprovider`は`null`、<xref:System.Globalization.CultureInfo>現在のカルチャに対応するオブジェクトを使用します。  
  
 使用される正または負の符号\<Offset\>いずれかである必要があります \+ または \-.\<\/Offset\> 定義されていない、<xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>または<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>のプロパティ、<xref:System.Globalization.NumberFormatInfo>のオブジェクト、`formatProvider`パラメーター。  
  
   
  
## 例  
 次の例は、日付を解析し、時刻の文字列を fr\-fr カルチャの書式設定し、ローカル システムを使用してそれらを表示する既定の en のカルチャします。  
  
 [!code-csharp[System.DateTimeOffset.Parse\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#2)]
 [!code-vb[System.DateTimeOffset.Parse\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">オフセットが 14 時間を上回っているか、\-14 時間を下回っています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> に日付と時刻の有効な文字列形式が含まれていません。  
  
 または  
  
 <paramref name="input" /> に日付または時刻のないオフセット値の文字列形式が含まれています。</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">変換する日時を含む文字列。</param>
        <param name="formatProvider">
          <c>input</c> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="styles">
          <c>input</c> で使用可能な書式を示す、列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.DateTimeStyles.None" /> です。</param>
        <summary>指定したカルチャ固有の書式情報と書式スタイルを使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTimeOffset" /> の値に変換します。</summary>
        <returns>
          <paramref name="formatProvider" /> と <paramref name="styles" /> で指定された書式に従って表記された、<paramref name="input" /> に含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、任意の順序で表示されることができ、空白で区切られた 3 つの要素を含む文字列を解析します。 これら 3 つの要素は、次の表に示します。  
  
|要素|例|  
|--------|-------|  
|\<Date\>\<\/Date\>|"2\/10\/2007"|  
|\<Time\>\<\/Time\>|"1時 02分: 03 PM"|  
|\<Offset\>\<\/Offset\>|"\-7:30"|  
  
 これらの各要素は任意ですが、\<Offset\>単独で表示されることはできません\<\/Offset\>。 いずれか\<Date\>または\<Time\>。\<\/Time\>\<\/Date\>と共に指定する必要があります。 場合\<Date\>が見つからないか、その既定値は、現在の日付\<\/Date\>。 場合\<Date\>があり、その年のコンポーネントでは 2 桁のみが、変換で年に、`provider`パラメーターの現在の暦がの値に基づいて、<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=fullName>プロパティ\<\/Date\>。 場合\<Time\>が見つからないか、その既定値は 12時 00分: 00 AM\<\/Time\> 場合\<Offset\>が見つからないか、その既定値はローカル タイム ゾーンのオフセットまたは<xref:System.TimeSpan.Zero?displayProperty=fullName>いずれか、<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=fullName>または<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=fullName>値は、`styles`パラメーター\<\/Offset\> 。 場合\<Offset\>が含まれているを表すことが負または正のオフセットのいずれかから世界協定時刻 \(UTC\).\<\/Offset\> どちらの場合、\<Offset\>の記号を含める必要があります\<\/Offset\>。  
  
 これら 3 つの要素の形式がによって定義された、`formatProvider`パラメーターで、次のいずれかになります。  
  
-   A<xref:System.Globalization.CultureInfo>の書式を使用するカルチャを表すオブジェクト、`input`パラメーター。<xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>プロパティ定義で使用される書式`input`です。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
 各要素は、先頭または末尾の空白文字で囲むこともでき、\<Date\>と\<Time\>要素は 6時 00分: 00\) などの内部の空白文字を含めることができます\<\/Time\>\<\/Date\>。 のみ、\<Offset\>コンポーネントは、内部の空白文字を含めることはできません\<\/Offset\>。  
  
 場合`formatprovider`は`null`、<xref:System.Globalization.CultureInfo>現在のカルチャに対応するオブジェクトを使用します。  
  
 使用される正または負の符号\<Offset\>いずれかである必要があります \+ または \-.\<\/Offset\> 定義されていない、<xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>または<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>プロパティの<xref:System.Globalization.NumberFormatInfo>によって返されるオブジェクト、`formatProvider`パラメーター。  
  
 次の表のメンバー、<xref:System.Globalization.DateTimeStyles?displayProperty=fullName>サポートされている列挙します。  
  
|DateTimeStyles メンバー|説明|  
|-------------------------|--------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|によって表される文字列を解析して`input`と、必要に応じて、UTC に変換します。 これは文字列を解析し、呼び出すことに相当、<xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=fullName>メソッドの返された<xref:System.DateTimeOffset>オブジェクト。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|有効な場合は、この値が無視されます。 空白が許可されている、\<Date\>と\<Time\>要素\<\/Time\>\<\/Date\>。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|有効な場合は、この値が無視されます。 解析された文字列内の各コンポーネントの前に、先頭の空白は許可されています。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|有効な場合は、この値が無視されます。 末尾の空白文字は、解析された文字列内の各コンポーネントの前に許可されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|これが既定の動作です。 より制限の厳しい指定することによって、オーバーライドできません<xref:System.Globalization.DateTimeStyles>などの列挙値<xref:System.Globalization.DateTimeStyles.None?displayProperty=fullName>です。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|場合は、ことを示します、`input`パラメーターがない、\<Offset\>要素、ローカル タイム ゾーンのオフセットを指定する必要があります\<\/Offset\>。 これは、既定の動作、<xref:System.DateTimeOffset.Parse%2A>メソッドです。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|場合は、ことを示します、`input`パラメーターがない、\<Offset\>要素、UTC のオフセット \(00:00\) を使用する必要があります\<\/Offset\>。|  
|<xref:System.Globalization.DateTimeStyles.None>|有効な場合は、この値は無視され、影響を与えません。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|<xref:System.DateTimeOffset>構造体には含まれません、`Kind`プロパティ、この値は影響を与えません。|  
  
 のみ、<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=fullName>値がサポートされていません。<xref:System.ArgumentException>でこの値が含まれている場合にスローされますが、`styles`パラメーター。  
  
   
  
## 例  
 次の例では、渡すことの影響、 <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=fullName>、 <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=fullName>、および<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=fullName>値を`styles`のパラメーター、<xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>メソッドです。  
  
 [!code-csharp[System.DateTimeOffset.Parse\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#3)]
 [!code-vb[System.DateTimeOffset.Parse\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">オフセットが 14 時間を上回っているか、\-14 時間を下回っています。  
  
 または  
  
 <paramref name="styles" /> は有効な <see cref="T:System.Globalization.DateTimeStyles" /> 値ではありません。  
  
 または  
  
 サポートされていない <see cref="T:System.Globalization.DateTimeStyles" /> 値が <paramref name="styles" /> に含まれています。  
  
 または  
  
 同時に使用できない <see cref="T:System.Globalization.DateTimeStyles" /> 値が <paramref name="styles" /> に含まれています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> に日付と時刻の有効な文字列形式が含まれていません。  
  
 または  
  
 <paramref name="input" /> に日付または時刻のないオフセット値の文字列形式が含まれています。</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">変換する日時を含む文字列。</param>
        <param name="format">
          <c>input</c> の有効な書式を定義する書式指定子。</param>
        <param name="formatProvider">
          <c>input</c> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>指定した書式とカルチャ固有の書式情報を使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTimeOffset" /> の値に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。</summary>
        <returns>
          <paramref name="format" /> と <paramref name="formatProvider" /> で指定された <paramref name="input" /> に格納される日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29>メソッドで定義された形式である必要があります日付の文字列形式を解析して、`format`パラメーター。 必要、 \<Date\>、 \<Time\>、および\<Offset\>で指定された順序で、日付と時刻の文字列形式の要素が表示される`format`\<\/Offset\>\<\/Time\>\<\/Date\>。 場合、`input`文字列と一致しませんこの`format`パラメーター、メソッドをスロー、<xref:System.FormatException>です。  これに対し、<xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName>メソッドは、書式プロバイダーのによって認識される形式のいずれかの日付の文字列表現を解析<xref:System.Globalization.DateTimeFormatInfo>オブジェクト。<xref:System.DateTimeOffset.Parse%2A>できます、 \<Date\>、 \<Time\>、および\<Offset\>任意の順序で表示するには、日付と時刻の文字列形式の要素\<\/Offset\>\<\/Time\>\<\/Date\>。  
  
 `format`パラメーターは、1 つの標準書式指定子または要求の形式を定義する 1 つまたは複数のカスタム書式指定子を含む文字列、`input`パラメーター。 有効な書式指定コードに関する詳細については、「[Standard Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/bb79761a-ca08-44ee-b142-b06b3e2fc22b)と[Custom Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/98b374e3-0cc2-4c78-ab44-efb671d71984)です。 場合`format`が含まれています、 `z`、 `zz`、または`zzz`オフセットする必要があります内に存在することを示すカスタム書式指定子`input`、そのオフセットは、正または負符号を含める必要があります。 符号がない場合がスローされます、<xref:System.FormatException>です。  
  
 場合`format`いる必要があります`input`日付時刻ではなく、その結果を含む<xref:System.DateTimeOffset>オブジェクトには、午前 0 時の時間が割り当てられます \(0: 00:00\)。 場合`format`いる必要があります`input`含める時刻がいない日付の場合、その結果、<xref:System.DateTimeOffset>オブジェクトには、ローカル システムの現在の日付が割り当てられます。 場合`format`いる必要はありません`input`、その結果、オフセットを含む<xref:System.DateTimeOffset>オブジェクトには、ローカル システムのタイム ゾーン オフセットが割り当てられます。  
  
 特定の日付と時刻のシンボルとで使用される文字列`input`によって定義された、`formatProvider`パラメーターの正確な形式が格納される`input`場合`format`標準書式指定子の文字列です。`formatProvider`パラメーターは、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>カルチャを表すオブジェクトの基になる`input`は解釈されます。<xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>プロパティ定義シンボルでと書式設定`input`です。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
 場合`formatprovider`は`null`、<xref:System.Globalization.CultureInfo>現在のカルチャに対応するオブジェクトを使用します。  
  
   
  
## 例  
 次の例では、<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29?displayProperty=fullName>いくつかの日付と時刻の文字列を解析するには、標準およびカスタムの書式指定子と、インバリアント カルチャを持つメソッドです。  
  
 [!code-csharp[System.DateTimeOffset.ParseExact\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#1)]
 [!code-vb[System.DateTimeOffset.ParseExact\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">オフセットが \-14 時間より小さいか、14 時間を超えています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="format" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> が空の文字列 \(""\) です。  
  
 または  
  
 <paramref name="input" /> に日付と時刻の有効な文字列形式が含まれていません。  
  
 または  
  
 <paramref name="format" /> が空の文字列です。  
  
 または  
  
 <paramref name="input" /> の時間の部分と AM\/PM 指定子が一致していません。</exception>
        <block subset="none" type="usage">
          <para>In the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the <see cref="Overload:System.DateTimeOffset.ParseExact" /> method throws a <see cref="T:System.FormatException" /> if the string to be parsed contains an hour component and an AM/PM designator that are not in agreement. In the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions, the AM/PM designator is ignored.</para>
        </block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">変換する日時を含む文字列。</param>
        <param name="format">
          <c>input</c> の有効な書式を定義する書式指定子。</param>
        <param name="formatProvider">
          <c>input</c> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="styles">
          <c>input</c> で使用可能な書式を示す、列挙値のビットごとの組み合わせ。</param>
        <summary>指定した書式、カルチャ固有の書式情報、およびスタイルを使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTimeOffset" /> に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。</summary>
        <returns>
          <paramref name="format" />、<paramref name="formatProvider" />、および <paramref name="styles" /> の各パラメーターで指定された書式に従って表記された、<paramref name="input" /> パラメーターに含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=fullName>メソッドで定義された形式である必要があります日付の文字列形式を解析して、`format`パラメーター。 必要、\<Date\>を\<Time\>と\<Offset\>に指定された順序で日付と時刻の文字列形式の要素が表示されます`format`\<\/Offset\>\<\/Time\>\<\/Date\>。 場合、`input`文字列のパターンに一致しない、`format`によって定義されたすべてのバリエーションをパラメーター、`styles`パラメーター、メソッドをスロー、<xref:System.FormatException>です。  これに対し、<xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=fullName>メソッドは、書式プロバイダーのによって認識される形式のいずれかの日付の文字列表現を解析<xref:System.Globalization.DateTimeFormatInfo>オブジェクト。<xref:System.DateTimeOffset.Parse%2A>できます、 \<Date\>、 \<Time\>、および\<Offset\>任意の順序で表示するには、日付と時刻の文字列形式の要素\<\/Offset\>\<\/Time\>\<\/Date\>。  
  
 `format`パラメーターは、1 つの標準書式指定子またはの必要なパターンを定義する 1 つまたは複数のカスタム書式指定子を含む文字列、`input`パラメーター。 有効な書式指定コードに関する詳細については、「[Standard Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/bb79761a-ca08-44ee-b142-b06b3e2fc22b)と[Custom Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/98b374e3-0cc2-4c78-ab44-efb671d71984)です。 場合`format`が含まれています、 `z`、 `zz`、または`zzz`オフセットする必要があります内に存在することを示すカスタム書式指定子`input`、そのオフセットは、正または負符号を含める必要があります。 符号がない場合がスローされます、<xref:System.FormatException>です。  
  
 場合`format`いる必要があります`input`日付時刻ではなく、その結果を含む<xref:System.DateTimeOffset>オブジェクトには、午前 0 時の時間が割り当てられます \(0: 00:00\)。 場合`format`いる必要があります`input`、時間がない日付の場合、結果を含む<xref:System.DateTimeOffset>オブジェクトには、ローカル システムの現在の日付が割り当てられます。 場合`format`いる必要はありません`input`オフセット、結果のオフセットを含む<xref:System.DateTimeOffset>オブジェクトの値に依存、`styles`パラメーター。 場合`styles`が含まれています<xref:System.Globalization.DateTimeStyles.AssumeLocal>に割り当てられているローカルのタイム ゾーンのオフセット、<xref:System.DateTimeOffset>オブジェクト。 場合`styles`が含まれています<xref:System.Globalization.DateTimeStyles.AssumeUniversal>を世界協定時刻 \(UTC\) オフセットまたはに割り当てられている 00:00、\+、<xref:System.DateTimeOffset>オブジェクト。 どちらの値を指定すると、ローカル タイム ゾーンのオフセットが使用されます。  
  
 特定の日付と時刻のシンボルとで使用される文字列`input`によって定義された、`formatProvider`パラメーター。 正確な書式の場合も同様です`input`場合は、`format`標準書式指定子の文字列です。`formatProvider`パラメーターは、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>カルチャを表すオブジェクトの基になる`input`は解釈されます。<xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>プロパティ定義シンボルでと書式設定`input`です。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
 場合`formatprovider`は`null`、<xref:System.Globalization.CultureInfo>現在のカルチャに対応するオブジェクトを使用します。  
  
 `styles`パラメーターは、空白文字が許可されているかどうかを定義、入力文字列内を示し、明示的なオフセット コンポーネントなしの文字列の解析方法、解析操作の一部として \(utc\) 変換をサポートします。 すべてのメンバー、<xref:System.Globalization.DateTimeStyles>列挙型は除くサポート<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>です。 次の表は、サポートされる各メンバーの影響を示します。  
  
|`DateTimeStyles` のメンバー|動作|  
|----------------------------|--------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|解析`input`と、必要に応じて、UTC に変換します。 これは、文字列を解析し、呼び出すことに相当、<xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=fullName>メソッドの返された<xref:System.DateTimeOffset>オブジェクト。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|場合`format`いる必要はありません`input`、オフセットの値を含む、返された<xref:System.DateTimeOffset>オブジェクトがローカル タイム ゾーンのオフセットを指定します。 これが既定値です。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|場合`format`いる必要はありません`input`、オフセットの値を含む、返された<xref:System.DateTimeOffset>オブジェクトは、UTC のオフセット \(\+ 00時 00分\) を付与します。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|により、`input`で指定されていない内部の空白文字を含める`format`です。 余分な空白文字は、日付と時刻のコンポーネント間や、個々 のコンポーネント内に含めることができ、文字列の解析時に無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|により、`input`で指定されていない先頭のスペースを含める`format`です。 これらは、文字列の解析時に無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|により、`input`に末尾のスペースで指定されていない含める`format`です。 これらは、文字列の解析時に無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|により、`input`して指定されていない先頭、末尾、および内部の空白文字を含める`format`です。 指定されていないすべての余分な空白文字`format`は、文字列の解析時に無視されます。|  
|<xref:System.Globalization.DateTimeStyles.None>|追加の空白文字は使用できませんを示す`input`です。 空白の指定に従って`format`です。 これが既定の動作です。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|影響を与えません、<xref:System.DateTimeOffset>構造体には含まれません、`Kind`プロパティです。|  
  
   
  
## 例  
 次の例では、<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=fullName>標準およびカスタムの書式指定子、インバリアント カルチャ、およびさまざまなメソッド<xref:System.Globalization.DateTimeStyles>いくつかの日付と時刻の文字列を解析する値。  
  
 [!code-csharp[System.DateTimeOffset.ParseExact\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#2)]
 [!code-vb[System.DateTimeOffset.ParseExact\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">オフセットが 14 時間を上回っているか、\-14 時間を下回っています。  
  
 または  
  
 サポートされていない値が <paramref name="styles" /> パラメーターに含まれています。  
  
 または  
  
 同時に使用できない <see cref="T:System.Globalization.DateTimeStyles" /> 値が <paramref name="styles" /> パラメーターに含まれています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="format" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> が空の文字列 \(""\) です。  
  
 または  
  
 <paramref name="input" /> に日付と時刻の有効な文字列形式が含まれていません。  
  
 または  
  
 <paramref name="format" /> が空の文字列です。  
  
 または  
  
 <paramref name="input" /> の時間の部分と AM\/PM 指定子が一致していません。</exception>
        <block subset="none" type="usage">
          <para>In the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the <see cref="Overload:System.DateTimeOffset.ParseExact" /> method throws a <see cref="T:System.FormatException" /> if the string to be parsed contains an hour component and an AM/PM designator that are not in agreement. In the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions, the AM/PM designator is ignored.</para>
        </block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">変換する日時を含む文字列。</param>
        <param name="formats">
          <c>input</c> の有効な書式を定義する書式指定子の配列。</param>
        <param name="formatProvider">
          <c>input</c> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="styles">
          <c>input</c> で使用可能な書式を示す、列挙値のビットごとの組み合わせ。</param>
        <summary>指定した書式、カルチャ固有の書式情報、およびスタイルを使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTimeOffset" /> に変換します。 文字列形式の書式は、指定されたいずれかの書式と完全に一致する必要があります。</summary>
        <returns>
          <paramref name="formats" />、<paramref name="formatProvider" />、および <paramref name="styles" /> の各パラメーターで指定された書式に従って表記された、<paramref name="input" /> パラメーターに含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [ParseExact メソッド \(String, String\<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=fullName>メソッドに割り当てられているパターンのいずれかに一致する日付の文字列表現を解析して、`formats`パラメーター。 場合、`input`文字列によって定義される種類のいずれかでこれらのパターンのいずれか一致しません、`styles`パラメーター、メソッドをスロー、[ParseExact メソッド \(String, String\<xref:System.FormatException>です。 比較する場合を除いて`input`に複数の書式パターンでは、このオーバー ロードの動作は、[ParseExact メソッド \(String, String\<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=fullName>メソッドです。  
  
 `formats`パラメーターが 1 つの標準書式指定子またはの可能なパターンを定義する 1 つまたは複数のカスタム書式指定子のいずれかの要素を格納した文字列の配列、`input`パラメーター。 メソッドが呼び出されると、`input`これらのパターンのいずれかに一致する必要があります。 有効な書式指定コードに関する詳細については、「[Standard Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/bb79761a-ca08-44ee-b142-b06b3e2fc22b)と[Custom Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/98b374e3-0cc2-4c78-ab44-efb671d71984)です。 場合に一致した要素`formats`が含まれています、 `z`、 `zz`、または`zzz`オフセットする必要があります内に存在することを示すカスタム書式指定子`input`、そのオフセットは、正または負符号を含める必要があります。 符号がない場合がスローされます、[ParseExact メソッド \(String, String\<xref:System.FormatException>です。  
  
> [!IMPORTANT]
>  使用して、`formats`このオーバー ロードを複数の形式を指定のパラメーターは日付と時刻を入力するときに発生する多くのユーザーの不満を削減できます。 具体的には、複数の入力パターンを定義する機能により、アプリケーションを含めるか、月、日、時間、分、および秒に先行ゼロが不足している日付と時刻の表現を処理します。 この例では、この具体的なを提供します。  
  
 場合に一致した要素`formats`いる必要があります`input`日付時刻ではなく、その結果を含む[ParseExact メソッド \(String, String\<xref:System.DateTimeOffset>オブジェクトには、午前 0 時の時間が割り当てられます \(0: 00:00\)。 場合に一致した要素`formats`いる必要があります`input`、時間がない日付の場合、結果を含む[ParseExact メソッド \(String, String\<xref:System.DateTimeOffset>オブジェクトには、ローカル システムの現在の日付が割り当てられます。 場合に一致した要素`formats`いる必要はありません`input`オフセット、結果のオフセットを含む[ParseExact メソッド \(String, String\<xref:System.DateTimeOffset>オブジェクトの値に依存、`styles`パラメーター。 場合`styles`が含まれています[ParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeStyles.AssumeLocal>に割り当てられているローカルのタイム ゾーンのオフセット、[ParseExact メソッド \(String, String\<xref:System.DateTimeOffset>オブジェクト。 場合`styles`が含まれています[ParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeStyles.AssumeUniversal>、世界協定時刻 \(UTC\) オフセット、またはに割り当てられている 00:00、\+、[ParseExact メソッド \(String, String\<xref:System.DateTimeOffset>オブジェクト。 どちらの値を指定すると、ローカル タイム ゾーンのオフセットが使用されます。  
  
 特定の日付と時刻のシンボルとで使用される文字列`input`によって定義された、`formatProvider`パラメーター。 正確な形式の場合も同様です`input`場合は、一致する要素の`formats`標準書式指定子の文字列です。`formatProvider`パラメーターは、次のいずれかを指定できます。  
  
-   A[ParseExact メソッド \(String, String\<xref:System.Globalization.CultureInfo>カルチャを表すオブジェクトの基になる`input`は解釈されます。[ParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、[ParseExact メソッド \(String, String\<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>プロパティ定義シンボルでと書式設定`input`です。  
  
-   A[ParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
 場合`formatprovider`は`null`、[ParseExact メソッド \(String, String\<xref:System.Globalization.CultureInfo>現在のカルチャに対応するオブジェクトを使用します。  
  
 `styles`パラメーターは、空白文字が許可されているかどうかを定義、入力文字列内を示し、明示的なオフセット コンポーネントなしの文字列の解析方法、解析操作の一部として \(utc\) 変換をサポートします。 すべてのメンバー、[ParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeStyles>列挙型がサポート対象外除く[ParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>です。 次の表は、サポートされる各メンバーの影響を示します。  
  
|`DateTimeStyles` のメンバー|動作|  
|----------------------------|--------|  
|[ParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|解析`input`と、必要に応じて、UTC に変換します。 これは、文字列を解析し、呼び出すことに相当、[ParseExact メソッド \(String, String\<xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=fullName>メソッドの返された[ParseExact メソッド \(String, String\<xref:System.DateTimeOffset>オブジェクト。|  
|[ParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeStyles.AssumeLocal>|場合に一致した要素`formats`いる必要はありません`input`、オフセットの値を含む、返された[ParseExact メソッド \(String, String\<xref:System.DateTimeOffset>オブジェクトがローカル タイム ゾーンのオフセットを指定します。 これが既定値です。|  
|[ParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|場合に一致した要素`formats`いる必要はありません`input`、オフセットの値を含む、返された[ParseExact メソッド \(String, String\<xref:System.DateTimeOffset>オブジェクトは、UTC のオフセット \(\+ 00時 00分\) を付与します。|  
|[ParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|により、`input`で指定されていない内部の空白文字を含める`format`です。 余分な空白文字は、日付と時刻のコンポーネント間および \(オフセットを除く\)、個々 のコンポーネント内に表示されることができ、文字列の解析時に無視されます。|  
|[ParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|により、`input`で指定されていない先頭のスペースを含める`formats`です。 これらは、文字列の解析時に無視されます。|  
|[ParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|により、`input`に末尾のスペースで指定されていない含める`formats`です。 これらは、文字列の解析時に無視されます。|  
|[ParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|により、`input`で指定されていない先頭、末尾、および内部の空白文字を含める`formats`です。 すべての余分な空白文字に一致した要素で指定されていない`formats`は、文字列の解析時に無視されます。|  
|[ParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeStyles.None>|追加の空白文字は使用できませんを示す`input`です。 空白の特定の要素で指定された正確`formats`一致するのです。 これが既定の動作です。|  
|[ParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeStyles.RoundtripKind>|影響を与えません、[ParseExact メソッド \(String, String\<xref:System.DateTimeOffset>構造体には含まれません、`Kind`プロパティです。|  
  
   
  
## 例  
 次の例は、複数の入力形式の日付と時刻、およびオフセットの値の文字列形式を定義し、ユーザーが入力した文字列、[ParseExact メソッド \(String, String\<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=fullName>メソッドです。  
  
 [!code-csharp[System.DateTimeOffset.ParseExact\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#3)]
 [!code-vb[System.DateTimeOffset.ParseExact\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">オフセットが 14 時間を上回っているか、\-14 時間を下回っています。  
  
 または  
  
 サポートされていない値が <paramref name="styles" /> に含まれています。  
  
 または  
  
 同時に使用できない <see cref="T:System.Globalization.DateTimeStyles" /> 値が <paramref name="styles" /> パラメーターに含まれています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> が空の文字列 \(""\) です。  
  
 または  
  
 <paramref name="input" /> に日付と時刻の有効な文字列形式が含まれていません。  
  
 または  
  
 <paramref name="formats" /> の要素に有効な書式指定子が含まれていません。  
  
 または  
  
 <paramref name="input" /> の時間の部分と AM\/PM 指定子が一致していません。</exception>
        <block subset="none" type="usage">
          <para>In the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the <see cref="Overload:System.DateTimeOffset.ParseExact" /> method throws a <see cref="T:System.FormatException" /> if the string to be parsed contains an hour component and an AM/PM designator that are not in agreement. In the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions, the AM/PM designator is ignored.</para>
        </block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Second" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の時刻の 2 番目の部分を取得 <see cref="T:System.DateTimeOffset" /> オブジェクトです。</summary>
        <value>2 番目のコンポーネント、 <see cref="T:System.DateTimeOffset" /> オブジェクトの 0 から 59 までの整数値として表されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.DateTimeOffset.Second%2A> の値によってプロパティが影響を受けません、 <xref:System.DateTimeOffset.Offset%2A> プロパティです。  
  
 文字列表現を作成することも、 <xref:System.DateTimeOffset> オブジェクトの 2 番目のコンポーネントを呼び出して、 <xref:System.DateTimeOffset.ToString%2A> "s"または"ss"カスタム書式指定子を持つメソッドです。  
  
   
  
## 例  
 次の例の 2 番目のコンポーネントの表示、 <xref:System.DateTimeOffset> 3 つの異なる方法でオブジェクト。  
  
-   値を取得することによって、 <xref:System.DateTimeOffset.Second%2A> プロパティです。  
  
-   呼び出して、 <xref:System.DateTimeOffset.ToString%28System.String%29> "s"書式指定子を持つメソッドです。  
  
-   呼び出して、 <xref:System.DateTimeOffset.ToString%28System.String%29> "ss"を持つメソッドの書式指定子。  
  
 [!code-csharp[System.DateTimeOffset.Properties\#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#14)]
 [!code-vb[System.DateTimeOffset.Properties\#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value">減算する値を表すオブジェクト。</param>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトから、特定の日時を表す <see cref="T:System.DateTimeOffset" /> 値を減算します。</summary>
        <returns>2 つの <see cref="T:System.DateTimeOffset" /> オブジェクト間の間隔を指定するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method converts both <xref:System.DateTimeOffset> objects to Coordinated Universal Time \(UTC\) before calculating the time interval that separates them. This removes any effect that different offsets from UTC may have on the comparison.  
  
> [!NOTE]
>  For languages that support custom operators, you can also perform date and time subtraction by using the subtraction operator. For details, see the <xref:System.DateTimeOffset.op_Subtraction%2A> method.  
  
 Because neither the current <xref:System.DateTimeOffset> object nor the **parameterReference tag is not supported!!!!**  
 parameter represent the date and time in a specific time zone, the <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29> method does not consider a particular time zone's adjustment rules when it subtracts dates and times.  
  
   
  
## 例  
 The following example illustrates subtraction that uses the <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29> method.  
  
 [!code-csharp[System.DateTimeOffset.Methods\#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#13)]
 [!code-vb[System.DateTimeOffset.Methods\#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public DateTimeOffset Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Subtract(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">減算する時間間隔。</param>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトから、指定された時間間隔を減算します。</summary>
        <returns>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトが表す日時から、<paramref name="value" /> が表す時間間隔を減算した値と等価なオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 You can use the <xref:System.DateTimeOffset.Subtract%2A> method to subtract more than one kind of time interval \(days, hours, minutes, seconds, or milliseconds\) in a single operation. Its behavior is identical to the <xref:System.DateTimeOffset.op_Subtraction%28System.DateTimeOffset%2CSystem.TimeSpan%29> method, which defines the subtraction operator. The <xref:System.DateTimeOffset> structure also supports specialized addition methods \(such as <xref:System.DateTimeOffset.AddDays%2A>, <xref:System.DateTimeOffset.AddHours%2A>, and <xref:System.DateTimeOffset.AddMinutes%2A>\) that allow you to perform subtraction by assigning a negative value to the method parameter.  
  
> [!NOTE]
>  This method returns a new <xref:System.DateTimeOffset> object. It does not modify the value of the current object by adding **parameterReference tag is not supported!!!!**  
>  to its date and time.  
  
 The <xref:System.DateTimeOffset.Subtract%2A> method does not affect the value of the <xref:System.DateTimeOffset> object's <xref:System.DateTimeOffset.Offset%2A> property. The returned <xref:System.DateTimeOffset> object has the same offset as the original object.  
  
 Because the current <xref:System.DateTimeOffset> object does not represent the date and time in a specific time zone, the <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29> method does not consider a particular time zone's adjustment rules when it performs the subtraction.  
  
   
  
## 例  
 The following example illustrates subtraction that uses the <xref:System.DateTimeOffset.Subtract%2A> method.  
  
 [!code-csharp[System.DateTimeOffset.Methods\#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#14)]
 [!code-vb[System.DateTimeOffset.Methods\#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として得られる <see cref="T:System.DateTimeOffset" /> 値は、<see cref="F:System.DateTimeOffset.MinValue" /> より小さくなります。  
  
 または  
  
 結果として得られる <see cref="T:System.DateTimeOffset" /> 値が <see cref="F:System.DateTimeOffset.MaxValue" /> を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#IComparable#CompareTo(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">現在と比較するオブジェクト <see cref="T:System.DateTimeOffset" /> オブジェクトです。</param>
        <summary>現在の値と比較する <see cref="T:System.DateTimeOffset" /> オブジェクトと同じ型の別のオブジェクト。</summary>
        <returns>32 ビットの符号付き整数を示すかどうか、現在 <see cref="T:System.DateTimeOffset" /> オブジェクトよりも小さいか、同じか、またはより大きい <paramref name="obj" />します。 メソッドの戻り値の意味を次に示します。  
  
 <list type="table">  
<listheader>  
<term> 戻り値  
  
 </term>  
<description> 説明  
  
 </description>  
</listheader>  
<item>  
<term> 0 より小さい値  
  
 </term>  
<description> 現在 <see cref="T:System.DateTimeOffset" /> オブジェクトは \(より前\) より小さく <paramref name="obj" />します。  
  
 </description>  
</item>  
<item>  
<term> 0  
  
 </term>  
<description> 現在 <see cref="T:System.DateTimeOffset" /> オブジェクトが \(同じ時点として\) と等しい <paramref name="obj" />します。  
  
 </description>  
</item>  
<item>  
<term> 0 より大きい値  
  
 </term>  
<description> 現在 <see cref="T:System.DateTimeOffset" /> オブジェクトが \(以降\) より大きい <paramref name="obj" />します。  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">コールバックを開始したオブジェクト。 このパラメーターの機能は、現在実装されていません。</param>
        <summary>オブジェクトの逆シリアル化の完了後に実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">データを読み込む先のオブジェクト。</param>
        <param name="context">このシリアル化のシリアル化先 \(<see cref="T:System.Runtime.Serialization.StreamingContext" /> を参照\)。</param>
        <summary>設定、 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトに現在のシリアル化に必要なデータ <see cref="T:System.DateTimeOffset" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="info" /> パラメーターが <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>日付を表すタイマー刻みの数と、現在の時刻を取得<see cref="T:System.DateTimeOffset" />クロック時間内のオブジェクト。</summary>
        <value>タイマー刻みの数、<see cref="T:System.DateTimeOffset" />オブジェクトのクロック時間。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.DateTimeOffset.Ticks%2A>プロパティがの値によって影響を受けません、<xref:System.DateTimeOffset.Offset%2A>プロパティです。  
  
 値、<xref:System.DateTimeOffset.Ticks%2A>プロパティは、0001 年 1 月 1 日 12時 00分: 00 深夜 0 時からの経過時間を 100 ナノ秒間隔の数を表します \(の値<xref:System.DateTimeOffset.MinValue>\)。 これは、タイマー刻みはうるう秒で追加するには含まれません。 ナノ秒は、10億分の 1 秒です。1 秒あたりに 10億のタイマー刻みがあります。 値、<xref:System.DateTimeOffset.Ticks%2A>プロパティの範囲`DateTimeOffset.MinValue.Ticks`に`DateTimeOffset.MaxValue.Ticks`です。  
  
 タイマー刻みの数を割り当てることができます、<xref:System.DateTimeOffset>オブジェクトを使用して、<xref:System.DateTimeOffset.%23ctor%28System.Int64%2CSystem.TimeSpan%29>コンス トラクター オーバー ロードします。  
  
   
  
## 例  
 次の例の初期化、<xref:System.DateTimeOffset>日 2008 年 7 月 1 日のおおよそのタイマー刻みの数によりオブジェクト 1時 23分: 07 です。 日時をコンソールにその日付で表されたタイマー刻みの数が表示されます。  
  
 [!code-csharp[System.DateTimeOffset.Properties\#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#15)]
 [!code-vb[System.DateTimeOffset.Properties\#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcDateTime" />
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の日の時刻を取得<see cref="T:System.DateTimeOffset" />オブジェクト。</summary>
        <value>現在の日付の午前 0 時からの経過時間。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.DateTimeOffset.TimeOfDay%2A>プロパティがの値によって影響を受けません、<xref:System.DateTimeOffset.Offset%2A>プロパティです。  
  
 <xref:System.DateTimeOffset.TimeOfDay%2A>プロパティ、時間の部分を返します、<xref:System.DateTimeOffset>のフォーム内のオブジェクト、<xref:System.TimeSpan>オブジェクト。 等価である、<xref:System.DateTime.TimeOfDay%2A?displayProperty=fullName>プロパティです。  
  
   
  
## 例  
 次の例では、<xref:System.DateTimeOffset.TimeOfDay%2A>時を抽出し、それをコンソールに表示するプロパティです。  
  
 [!code-csharp[System.DateTimeOffset.Properties\#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#16)]
 [!code-vb[System.DateTimeOffset.Properties\#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToFileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値を Windows ファイル時刻に変換します。</summary>
        <returns>現在の値 <see cref="T:System.DateTimeOffset" /> Windows ファイル時刻で表したオブジェクトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Windows ファイル時刻は、西暦 1601 年 1 月 1 日深夜 12時 00分以降の経過時間を 100 ナノ秒間隔の数を表す 64 ビット値\(西暦\)世界協定時刻 \(UTC\)。 Windows では、ファイル時刻を使用して、アプリケーションを作成、アクセスすると、またはファイルに書き込むときに記録します。  
  
 <xref:System.DateTimeOffset.ToFileTime%2A> メソッドは現在、変換 <xref:System.DateTimeOffset> オブジェクトの日付と時刻の変換を実行する前に、UTC をします。 つまり、呼び出し、 <xref:System.DateTimeOffset.ToFileTime%2A> メソッドは、次のメソッド呼び出しに相当します。  
  
 \[C\#\]  
  
```  
this.ToUtcDateTime().ToFileTime();  
```  
  
 \[Visual Basic\]  
  
```  
Me.ToUtcDateTime().ToFileTime()  
```  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">日付と時刻の西暦 1601 年 1 月 1 日午前 0 時前に結果のファイル時刻を表します世界協定時刻 \(UTC\)。</exception>
        <altmember cref="M:System.DateTimeOffset.FromFileTime(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToLocalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToLocalTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の変換<see cref="T:System.DateTimeOffset" />オブジェクトを<see cref="T:System.DateTimeOffset" />をローカル時刻を表すオブジェクト。</summary>
        <returns>現在の日時を表すオブジェクト<see cref="T:System.DateTimeOffset" />オブジェクトが現地時刻に変換します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 現地時間への変換を実行するには、メソッド、最初に変換します現在<xref:System.DateTimeOffset>オブジェクトの日付と時刻を世界協定時刻 \(UTC\) 時刻からのオフセットを減算しています。 UTC の日付と時刻現地時刻に変換、ローカル タイム ゾーン オフセットを追加することによりします。 これを行うことで、ローカル タイム ゾーンの調整規則を任意のアカウントがかかります。  
  
 現在の値を両方<xref:System.DateTimeOffset>オブジェクトとの値、<xref:System.DateTimeOffset>メソッドの呼び出しによって返されるオブジェクトでは、時間の同じ時点を表してです。 つまり、両方に渡された場合、<xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=fullName>メソッドは、メソッドを返します`true`です。  
  
 変換実行すると、時間を時間の範囲外、<xref:System.DateTimeOffset>型、<xref:System.DateTimeOffset.ToLocalTime%2A>メソッドを返します、<xref:System.DateTimeOffset>いずれかに日付と時刻を持つオブジェクトが設定<xref:System.DateTimeOffset.MaxValue>または<xref:System.DateTimeOffset.MinValue>とオフセットのローカル タイム ゾーン オフセットを設定します。  
  
   
  
## 例  
 次の例では、<xref:System.DateTimeOffset.ToLocalTime%2A>に変換する方法、<xref:System.DateTimeOffset>太平洋標準時ゾーンのローカル時刻の値。 ローカル タイム ゾーンの調整規則のメソッドのサポートも示しています。  
  
 [!code-csharp[System.DateTimeOffset.Methods\#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#15)]
 [!code-vb[System.DateTimeOffset.Methods\#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToUniversalTime" />
      </Docs>
    </Member>
    <Member MemberName="ToOffset">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToOffset (TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToOffset(valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToOffset(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="offset">変換するオフセット、<see cref="T:System.DateTimeOffset" />値します。</param>
        <summary>現在の値を変換<see cref="T:System.DateTimeOffset" />日付と時刻のオフセット値が指定するオブジェクト。</summary>
        <returns>元と同じであるオブジェクト<see cref="T:System.DateTimeOffset" />オブジェクト \(つまり、<see cref="M:System.DateTimeOffset.ToUniversalTime" />メソッドは、時間で同一のポイントを返します\) がある<see cref="P:System.DateTimeOffset.Offset" />プロパティに設定されている<paramref name="offset" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.DateTimeOffset.ToOffset%2A>メソッドは、呼び出す代わりに使用、<xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=fullName>メソッドです。 世界協定時刻 \(UTC\) からのタイム ゾーン オフセットがわかっている場合に、1 つのタイム ゾーンから別の単純な変換を実行するために便利ですがあります。 ただし、ため、元のどちらも<xref:System.DateTimeOffset>オブジェクトも、新しい<xref:System.DateTimeOffset>メソッドの呼び出しによって返されるオブジェクトは、明確に関連する特定のタイム ゾーンでは、メソッドは変換のタイム ゾーン調整規則が適用されません。  
  
   
  
## 例  
 次の例を使用する方法を示しています、<xref:System.DateTimeOffset.ToOffset%2A>に変換する方法、<xref:System.DateTimeOffset>オブジェクトを<xref:System.DateTimeOffset>オフセットが異なるを持つオブジェクト。  
  
 [!code-csharp[System.DateTimeOffset.ToOffset\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToOffset/cs/ToOffset.cs#1)]
 [!code-vb[System.DateTimeOffset.ToOffset\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToOffset/vb/ToOffset.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">その結果<see cref="T:System.DateTimeOffset" />オブジェクトには、<see cref="P:System.DateTimeOffset.DateTime" />値よりも前<see cref="F:System.DateTimeOffset.MinValue" />です。  
  
 または  
  
 結果として得られる<see cref="T:System.DateTimeOffset" />オブジェクトには、<see cref="P:System.DateTimeOffset.DateTime" />値よりも後<see cref="F:System.DateTimeOffset.MaxValue" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" />\-14 時間未満です。  
  
 または  
  
 <paramref name="offset" />14 時間を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値を等価の文字列形式に変換します。</summary>
        <returns>文字列表現を<see cref="T:System.DateTimeOffset" />文字列の末尾オフセットを含むオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの戻り値はのものと同じ、<xref:System.DateTime.ToString?displayProperty=fullName>ことには、スペースが含まれています。 ただし、メソッドで区切ってオフセット、文字列の末尾に追加されます。 つまり、形式の長い形式の時刻パターンの短い日付パターンを使用して、出力、および`zzz`から直前の要素をスペースで区切られた各要素のカスタム書式指定文字列。 たとえば場合、 <xref:System.DateTime.ToString?displayProperty=fullName> 1\/12\/2008 の値を返します 6時 15分: 50 PM、 <xref:System.DateTimeOffset.ToString> 1\/12\/2008 の値を返します 6時 15分: 50 PM \-08:00 の時間は 8 時間の世界協定時刻 \(UTC\) の背後にあります。  
  
 このメソッドは、基に、現在のカルチャの書式情報を使用します。 詳細については、「<xref:System.Globalization.CultureInfo.CurrentCulture%2A>」を参照してください。 他のオーバー ロード、<xref:System.DateTimeOffset.ToString%2A>メソッドを有効にする、カルチャを指定する書式の出力のパターンを定義して使用するには、<xref:System.DateTimeOffset>値。  
  
   
  
## 例  
 呼び出しの例を次、<xref:System.DateTimeOffset.ToString>メソッドを現在のカルチャが en システムでその出力を表示および \-us です。  
  
 [!code-csharp[System.DateTimeOffset.ToString\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#1)]
 [!code-vb[System.DateTimeOffset.ToString\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">日時が、現在のカルチャで使用されるカレンダーでサポートされている日付の範囲外です。</exception>
        <block subset="none" type="usage">
          <para>The <see cref="M:System.DateTimeOffset.ToString" /> method returns the string representation of the date and time in the calendar used by the current culture. If the value of the current <see cref="T:System.DateTimeOffset" /> instance is earlier than <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> or later than <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, the method throws an <see cref="T:System.ArgumentOutOfRangeException" />. The following example provides an illustration. It attempts to format a date that is outside the range of the <see cref="T:System.Globalization.HijriCalendar" /> class when the current culture is Arabic (Syria).  
  
 [!code-csharp[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception2.cs#2)]
 [!code-vb[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception2.vb#2)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="formatProvider">カルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>現在の値を変換<see cref="T:System.DateTimeOffset" />オブジェクトを指定したカルチャに固有の書式情報を使用して、等価の文字列形式にします。</summary>
        <returns>現在の値の文字列表現<see cref="T:System.DateTimeOffset" />で指定されたオブジェクト、<paramref name="formatProvider" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの戻り値はの同等のオーバー ロードの場合と同じ、<xref:System.DateTime.ToString%2A?displayProperty=fullName>ことには、スペースが含まれています。 ただし、メソッドで区切ってオフセット、文字列の末尾に追加されます。 つまり、形式の長い形式の時刻パターンの短い日付パターンを使用して、出力、および`zzz`から直前の要素をスペースで区切られた各要素のカスタム書式指定文字列。  
  
 これら 3 つの要素の形式がによって定義された、`formatProvider`パラメーター。`formatProvider`パラメーターは、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>が書式指定規則が返される文字列に適用されるカルチャを表すオブジェクト。<xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>プロパティが返される文字列の書式を定義します。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
 場合`formatProvider`は`null`、 <xref:System.Globalization.DateTimeFormatInfo> 、現在のカルチャに関連付けられているオブジェクトを使用して \(を参照してください<xref:System.Globalization.CultureInfo.CurrentCulture%2A>\)。  
  
   
  
## 例  
 次の例を表示、<xref:System.DateTimeOffset>オブジェクトを使用して<xref:System.Globalization.CultureInfo>を他の 4 つのカルチャと同様に、インバリアント カルチャを表すオブジェクト。  
  
 [!code-csharp[System.DateTimeOffset.ToString\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#2)]
 [!code-vb[System.DateTimeOffset.ToString\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">日時が、<paramref name="formatProvider" /> で使用されるカレンダーでサポートされている日付の範囲外です。</exception>
        <block subset="none" type="usage">
          <para>The <see cref="M:System.DateTimeOffset.ToString(System.IFormatProvider)" /> method returns the string representation of the date and time in the calendar used by the culture represented by the <paramref name="formatProvider" /> parameter. Its calendar is defined by the <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> property. If the value of the current <see cref="T:System.DateTimeOffset" /> instance is earlier than <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> or later than <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, the method throws an <see cref="T:System.ArgumentOutOfRangeException" />. The following example provides an illustration. It attempts to format a date that is outside the range of the <see cref="T:System.Globalization.JapaneseCalendar" /> class.  
  
 [!code-csharp[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception1.cs#1)]
 [!code-vb[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception1.vb#1)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">書式指定文字列。</param>
        <summary>指定した書式を使用して、現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値をそれと等価な文字列形式に変換します。</summary>
        <returns>
          <paramref name="format" /> により指定された、現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `format`パラメーターは、単一の書式指定子の文字を含める必要があります \(を参照してください[Standard Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/bb79761a-ca08-44ee-b142-b06b3e2fc22b)\) またはカスタムの書式パターン \(を参照してください[Custom Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/98b374e3-0cc2-4c78-ab44-efb671d71984)\) 返される文字列の形式を定義します。 場合`format`null または空の文字列 \(""\) では、<xref:System.DateTimeOffset>既定の形式を使用して値を出力します。  
  
 次の表に、特定の書式指定子で使用する場合の正確な操作<xref:System.DateTimeOffset>で使用する場合は、その動作は異なります<xref:System.DateTime>です。  
  
|既存の書式指定子|新しい動作|  
|--------------|-----------|  
|"K"|ラウンドト リップする日付と時刻。<xref:System.DateTimeOffset>、"Zzz"\(オフセットは、時間と分で常に表示されます\) にマップします。 "K"は、カスタム書式指定子です。内の 1 文字として表示できません`format`です。|  
|"U"|サポートされていません。|  
|"r"|変換、<xref:System.DateTimeOffset>オブジェクトを世界協定時刻 \(UTC\) し、カスタム書式指定文字列を使用して出力`ddd, dd MMM yyyy HH:mm:ss GMT`です。|  
|"u"|変換、<xref:System.DateTimeOffset>オブジェクトを UTC にし、出力形式を使用して`yyyy-MM-dd HH:mm:ssZ`です。|  
  
 残りの標準的な日付と時刻の書式指定子と同様に動作、<xref:System.DateTimeOffset.ToString%28System.String%29>メソッドが使用された場合、<xref:System.DateTime.ToString%2A>メソッドです。  
  
 このメソッドは、基に、現在のカルチャの書式情報を使用します。 詳細については、「<xref:System.Globalization.CultureInfo.CurrentCulture%2A>」を参照してください。  
  
   
  
## 例  
 次の例を表示、<xref:System.DateTimeOffset>コンソールの標準日時形式指定子を使用するオブジェクト。 出力は、en を使用して、書式設定のカルチャします。  
  
 [!code-csharp[System.DateTimeOffset.ToString\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#3)]
 [!code-vb[System.DateTimeOffset.ToString\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> の長さは 1 であり、<see cref="T:System.Globalization.DateTimeFormatInfo" /> で定義されている標準書式指定子の 1 つではありません。  
  
 または  
  
 <paramref name="format" /> には有効なカスタム書式パターンが含まれません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">日時が、現在のカルチャで使用されるカレンダーでサポートされている日付の範囲外です。</exception>
        <block subset="none" type="usage">
          <para>The <see cref="M:System.DateTimeOffset.ToString(System.String)" /> method returns the string representation of the date and time in the calendar used by the current culture. If the value of the current <see cref="T:System.DateTimeOffset" /> instance is earlier than <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> or later than <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, the method throws an <see cref="T:System.ArgumentOutOfRangeException" />. The following example provides an illustration. It attempts to format a date that is outside the range of the <see cref="T:System.Globalization.HebrewCalendar" /> class when the current culture is Hebrew (Israel).  
  
 [!code-csharp[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception3.cs#3)]
 [!code-vb[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception3.vb#3)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">書式指定文字列。</param>
        <param name="formatProvider">カルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>指定した書式およびカルチャ固有の書式情報を使用して、現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値をそれと等価の文字列形式に変換します。</summary>
        <returns>
          <paramref name="format" /> および <paramref name="provider" /> により指定された、現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `format`パラメーターは、単一の書式指定子の文字を含める必要があります \(を参照してください[Standard Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/bb79761a-ca08-44ee-b142-b06b3e2fc22b)\) またはカスタム書式パターン \(を参照してください[Custom Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/98b374e3-0cc2-4c78-ab44-efb671d71984)\)。 場合`format`null または空の文字列 \(""\) では、<xref:System.DateTimeOffset>既定の形式を使用してオブジェクトを出力します。  
  
 次の表に、特定の書式指定子で使用する場合の正確な操作<xref:System.DateTimeOffset>で使用する場合は、その動作が異なる<xref:System.DateTime>です。  
  
|既存の書式指定子|新しい動作|  
|--------------|-----------|  
|"K"|ラウンドト リップする日付と時刻。<xref:System.DateTimeOffset>、"Zzz"\(オフセットは、時間と分で常に表示されます\) にマップします。 "K"は、カスタム書式指定子です。内の 1 文字として表示できません`format`です。|  
|"U"|サポートされていません。|  
|"r"|変換、<xref:System.DateTimeOffset>オブジェクトを世界協定時刻 \(UTC\) し、カスタム書式指定文字列を使用して出力`ddd, dd MMM yyyy HH:mm:ss GMT`です。|  
|"u"|変換、<xref:System.DateTimeOffset>値を UTC にし、出力形式を使用して`yyyy-MM-dd HH:mm:ssZ`です。|  
  
 残りの標準的な日付と時刻の書式指定子と同様に動作、<xref:System.DateTimeOffset.ToString%28System.String%29>メソッドが使用された場合、<xref:System.DateTime.ToString%2A>メソッドです。  
  
 標準書式指定子、およびシンボルと日付と時刻のコンポーネントの名前に対応するパターンがによって定義された、`formatProvider`パラメーター。`formatProvider`パラメーターは、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>書式で使用するカルチャを表すオブジェクト`input`です。<xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>プロパティ定義で使用される書式`input`です。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
 場合`formatProvider`は`null`、 <xref:System.Globalization.DateTimeFormatInfo> 、現在のカルチャに関連付けられているオブジェクトを使用して \(を参照してください<xref:System.Globalization.CultureInfo.CurrentCulture%2A>\)。  
  
   
  
## 例  
 次の例では、<xref:System.DateTimeOffset.ToString%28System.String%2CSystem.IFormatProvider%29>メソッドを表示する、<xref:System.DateTimeOffset>オブジェクトの複数の異なるカルチャのカスタム書式指定文字列を使用します。  
  
 [!code-csharp[System.DateTimeOffset.ToString\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#4)]
 [!code-vb[System.DateTimeOffset.ToString\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> の長さは 1 であり、<see cref="T:System.Globalization.DateTimeFormatInfo" /> で定義されている標準書式指定子文字の 1 つではありません。  
  
 または  
  
 <paramref name="format" /> には有効なカスタム書式パターンがありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">日時が、<paramref name="formatProvider" /> で使用されるカレンダーでサポートされている日付の範囲外です。</exception>
        <block subset="none" type="usage">
          <para>The <see cref="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)" /> method returns the string representation of the date and time in the calendar used by the <paramref name="formatProvider" /> parameter. Its calendar is defined by the <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> property. If the value of the current <see cref="T:System.DateTimeOffset" /> instance is earlier than <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> or later than <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, the method throws an <see cref="T:System.ArgumentOutOfRangeException" />. The following example provides an illustration. It attempts to format a date that is outside the range of the <see cref="T:System.Globalization.UmAlQuraCalendar" /> class.  
  
 [!code-csharp[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception4.cs#4)]
 [!code-vb[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception4.vb#4)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToUniversalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUniversalTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の変換<see cref="T:System.DateTimeOffset" />オブジェクトを<see cref="T:System.DateTimeOffset" />世界協定時刻 \(UTC\) を表す値です。</summary>
        <returns>現在の日時を表すオブジェクト<see cref="T:System.DateTimeOffset" />オブジェクトは、世界協定時刻 \(UTC\) に変換します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドが戻る、<xref:System.DateTimeOffset>オブジェクト<xref:System.DateTimeOffset.Offset%2A>プロパティが 0 に設定します。  
  
 現在の値を両方<xref:System.DateTimeOffset>オブジェクトとの値、<xref:System.DateTimeOffset>メソッドの呼び出しによって返されるオブジェクトでは、時間の同じ時点を表してです。 つまり、両方に渡された場合、<xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=fullName>メソッドは、メソッドを返します`true`です。  
  
   
  
## 例  
 次の例では、<xref:System.DateTimeOffset.ToUniversalTime%2A>現地時間と他のいくつかの時刻を世界協定時刻 \(UTC\) に変換します。  
  
 [!code-csharp[System.DateTimeOffset.Methods\#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#16)]
 [!code-vb[System.DateTimeOffset.Methods\#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToLocalTime" />
        <altmember cref="M:System.DateTimeOffset.ToOffset(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="ToUnixTimeMilliseconds">
      <MemberSignature Language="C#" Value="public long ToUnixTimeMilliseconds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToUnixTimeMilliseconds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>1970 年から経過したミリ秒数を返します\-01\-01T00:00:00.000Z です。</summary>
        <returns>1970 年から経過したミリ秒数\-01\-01T00:00:00.000Z です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Unix 時間は、1970 年から経過した秒数を表す\-01\-01T00:00:00Z \(1、1970 年 1 月 12時 00分 AM utc\)。 これは考慮されませんうるう秒です。 このメソッドは、Unix 時間のミリ秒数を返します。  
  
 このメソッドは最初、その Unix 時間のミリ秒数を返す前に、UTC に現在のインスタンスを変換します。 1970 年以前の日付と時刻の値に対して\-01\-01T00:00:00Z、このメソッドは、負の値を返します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeSeconds" />
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="ToUnixTimeSeconds">
      <MemberSignature Language="C#" Value="public long ToUnixTimeSeconds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToUnixTimeSeconds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUnixTimeSeconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>1970 年から経過した秒数を返します\-01\-01T00:00:00Z です。</summary>
        <returns>1970 年から経過した秒数\-01\-01T00:00:00Z です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Unix 時間は、1970 年から経過した秒数を表す\-01\-01T00:00:00Z \(1、1970 年 1 月 12時 00分 AM utc\)。 これは考慮されませんうるう秒です。  
  
 このメソッドは最初、その Unix 時間を返す前に、UTC に現在のインスタンスを変換します。 1970 年以前の日付と時刻の値に対して\-01\-01T00:00:00Z、このメソッドは、負の値を返します。  
  
   
  
## 例  
 次の例では、 <xref:System.DateTimeOffset.ToUnixTimeSeconds%2A> Unix 時間は、同じか、直前に 1970年のすぐ後に値を返すメソッドを\-01\-01T00:00:00Z です。  
  
 [!code-csharp[System.DateTimeOffset.ToUnixTimeSeconds\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tounixtimeseconds/cs/tounixtimeseconds1.cs#1)]
 [!code-vb[System.DateTimeOffset.ToUnixTimeSeconds\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tounixtimeseconds/vb/tounixtimeseconds1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, valuetype System.DateTimeOffset result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="result" Type="System.DateTimeOffset&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">変換する日時を含む文字列。</param>
        <param name="result">このメソッドが戻るときに、変換に成功した場合は <c>input</c> の日時と等しい <see cref="T:System.DateTimeOffset" /> が格納されます。変換に失敗した場合は <see cref="F:System.DateTimeOffset.MinValue" /> が格納されます。<c>input</c> パラメーターが <see langword="null" /> の場合、または日付と時刻を表す有効な文字列形式が指定されていない場合、変換は失敗します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定した文字列表現の日時を対応する <see cref="T:System.DateTimeOffset" /> 表現に変換できるかどうかを試行し、変換に成功したかどうかを示す値を返します。</summary>
        <returns>
          <paramref name="input" /> パラメーターが正常に変換された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このオーバー ロード、<xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.DateTimeOffset%40%29>ような方法は、<xref:System.DateTimeOffset.Parse%28System.String%29?displayProperty=fullName>メソッド、点を除いて、変換が失敗した場合に、it が例外をスローしません。 任意の順序で表示されることができ、空白で区切られた 3 つの要素を含む文字列を解析します。 これら 3 つの要素は、次の表に示します。  
  
|要素|例|  
|--------|-------|  
|\<Date\>\<\/Date\>|"2\/10\/2007"|  
|\<Time\>\<\/Time\>|"1時 02分: 03 PM"|  
|\<Offset\>\<\/Offset\>|"\-7:30"|  
  
 これらの各要素は任意ですが、\<Offset\>を単独で表示されることはできません\<\/Offset\>。 いずれか\<Date\>または\<Time\>。\<\/Time\>\<\/Date\>と共に指定する必要があります。 場合\<Date\>が見つからないか、その既定値は、現在の日付\<\/Date\>。 場合\<Date\>があり、コンポーネントでは 2 桁のみが、年、年の値に基づいて、現在のカルチャの現在の暦に変換されます、<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=fullName>プロパティ\<\/Date\>。 場合\<Time\>が見つからないか、その既定値は 12時 00分: 00 AM\<\/Time\> 場合\<Offset\>が見つからないか、その既定値はローカル タイム ゾーンのオフセット\<\/Offset\>。 場合\<Offset\>が含まれているを表すことが負または正のオフセットのいずれかから世界協定時刻 \(UTC\).\<\/Offset\> どちらの場合、 \<Offset\>、記号やメソッドを返しますに含める必要があります`false`\<\/Offset\>。  
  
 `input`で書式設定情報を使用して文字列を解析、<xref:System.Globalization.DateTimeFormatInfo>オブジェクトの現在のカルチャ用に初期化します。 必ずしも対応しません、現在のカルチャの指定された書式を含んでいる文字列を解析するを使用して、<xref:System.DateTimeOffset.TryParseExact%2A>メソッドと書式指定子を提供します。  
  
   
  
## 例  
 次の例では、<xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.DateTimeOffset%40%29>さまざまな日付と時刻の形式といくつかの文字列を解析します。  
  
 [!code-csharp[System.DateTimeOffset.TryParse\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/cs/TryParse.cs#1)]
 [!code-vb[System.DateTimeOffset.TryParse\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/vb/TryParse.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Parse" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, valuetype System.DateTimeOffset result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">変換する日時を含む文字列。</param>
        <param name="formatProvider">
          <c>input</c> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="styles">
          <c>input</c> で使用可能な書式を示す、列挙値のビットごとの組み合わせ。</param>
        <param name="result">このメソッドが戻る時に、変換に成功した場合は、<see cref="T:System.DateTimeOffset" /> の日時と等しい <c>input</c> が格納されます。変換に失敗した場合は <see cref="F:System.DateTimeOffset.MinValue" /> が格納されます。<c>input</c> パラメーターが <see langword="null" /> の場合、または、日付と時刻を表す有効な文字列形式が指定されていない場合、変換に失敗します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定した文字列形式の日時を対応する <see cref="T:System.DateTimeOffset" /> 表現に変換できるかどうかを試行し、変換に成功したかどうかを示す値を返します。</summary>
        <returns>
          <paramref name="input" /> パラメーターが正常に変換された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このオーバー ロード、<xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>などのメソッドは、<xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=fullName>メソッド、点を除いて、変換が失敗した場合に、it が例外をスローしません。 メソッドは、任意の順序で表示されることができ、空白で区切られた 3 つの要素を含む文字列を解析します。 これら 3 つの要素は、次の表に示します。  
  
|要素|例|  
|--------|-------|  
|\<Date\>\<\/Date\>|"2\/10\/2007"|  
|\<Time\>\<\/Time\>|"1時 02分: 03 PM"|  
|\<Offset\>\<\/Offset\>|"\-7:30"|  
  
 これらの各要素は任意ですが、\<Offset\>単独で表示されることはできません\<\/Offset\>。 いずれか\<Date\>または\<Time\>。\<\/Time\>\<\/Date\>と共に指定する必要があります。 場合\<Date\>が見つからないか、その既定値は、現在の日付\<\/Date\>。 場合\<Date\>があり、コンポーネントでは 2 桁のみが、年で年に変換されます、`provider`パラメーターの現在のカレンダーの値、<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=fullName>プロパティ\<\/Date\>。 場合\<Time\>が見つからないか、その既定値は 12時 00分: 00 AM\<\/Time\> 場合\<Offset\>が見つからないか、その既定値はローカル タイム ゾーンのオフセットまたは<xref:System.TimeSpan.Zero>いずれか、<xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=fullName>または<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=fullName>で値が指定された`styles`\<\/Offset\>。 場合\<Offset\>が含まれているを表すことが負または正のオフセットのいずれかから世界協定時刻 \(UTC\).\<\/Offset\> どちらの場合、 \<Offset\>、記号やメソッドを返しますに含める必要があります`false`\<\/Offset\>。  
  
 `input`でカルチャに固有の書式情報を使用して文字列を解析する<xref:System.Globalization.DateTimeFormatInfo>で指定されたオブジェクト、`formatProvider`パラメーター。`formatProvider`パラメーターは、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>オブジェクトの書式を使用するカルチャを表す`input`です。<xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>プロパティで使用されている形式を定義する`input`です。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
 さらに、各要素が先頭または末尾の空白文字で区切ることができます、\<Date\>と\<Time\>コンポーネント \(6時 00分: 00\) などの空白を含めることができます\<\/Time\>\<\/Date\>。 のみ、\<Offset\>コンポーネントは、内部の空白文字を含めることはできません\<\/Offset\>。  
  
 場合`provider`は`null`、<xref:System.Globalization.CultureInfo>現在のカルチャに対応するオブジェクトを使用します。  
  
 使用される正または負の符号\<Offset\>いずれかである必要があります \+ または \-.\<\/Offset\> 定義されていない、<xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>または<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>のプロパティ、<xref:System.Globalization.NumberFormatInfo>によって返されるオブジェクト、`formatprovider`パラメーターの<xref:System.Globalization.CultureInfo.NumberFormat%2A>プロパティです。  
  
 次のメンバー、<xref:System.Globalization.DateTimeStyles>列挙をサポートします。  
  
|DateTimeStyles メンバー|コメント|  
|-------------------------|----------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|によって表される文字列を解析して`input`と、必要に応じて、UTC に変換します。 これは、文字列を解析し、返されたオブジェクトを呼び出すに相当<xref:System.DateTimeOffset.ToUniversalTime>メソッドです。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|有効な場合は、この値が無視されます。 空白が許可されている、\<Date\>と\<Time\>コンポーネント\<\/Time\>\<\/Date\>。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|有効な場合は、この値が無視されます。 先頭の空白文字は、解析された文字列内の各コンポーネントの前に使用できます。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|有効な場合は、この値が無視されます。 末尾の空白文字は、解析された文字列内の各コンポーネントの前に使用できます。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|これが既定の動作です。 より制限の厳しい指定することによって、オーバーライドできません<xref:System.Globalization.DateTimeStyles>などの列挙値<xref:System.Globalization.DateTimeStyles.None?displayProperty=fullName>です。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|場合は、ことを示します、`input`パラメーターがない、\<Offset\>要素のローカル タイム ゾーン オフセットを指定する必要があります\<\/Offset\>。 これは、既定の動作、<xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>メソッドです。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|場合は、ことを示します、`input`パラメーターがない、\<Offset\>要素、UTC のオフセット \(00:00\) を使用する必要があります\<\/Offset\>。|  
|<xref:System.Globalization.DateTimeStyles.None>|有効な場合は、この値は無視され、影響を与えません。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|<xref:System.DateTimeOffset>構造体には含まれません、`Kind`プロパティ、この値は影響を与えません。|  
  
 のみ、<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=fullName>値がサポートされていません。<xref:System.ArgumentException>でこの値が含まれている場合にスローされますが、`styles`パラメーター。  
  
   
  
## 例  
 次の例では、<xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>メソッドでのさまざまな<xref:System.Globalization.DateTimeStyles>さまざまな日付と時刻の形式といくつかの文字列を解析する値。  
  
 [!code-csharp[System.DateTimeOffset.TryParse\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/cs/TryParse.cs#2)]
 [!code-vb[System.DateTimeOffset.TryParse\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/vb/TryParse.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> に未定義の <see cref="T:System.Globalization.DateTimeStyles" /> 値が含まれています。  
  
 または  
  
 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> がサポートされていません。  
  
 または  
  
 <paramref name="styles" /> に相互に排他的な <see cref="T:System.Globalization.DateTimeStyles" /> 値が含まれています。</exception>
        <altmember cref="Overload:System.DateTimeOffset.Parse" />
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, valuetype System.DateTimeOffset result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">変換する日時を含む文字列。</param>
        <param name="format">
          <c>input</c> の必要な形式を定義する形式指定子。</param>
        <param name="formatProvider">
          <c>input</c> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="styles">input に許可されている書式を示す列挙値のビットごとの組み合わせ。 通常指定する値は、<see langword="None" /> です。</param>
        <param name="result">このメソッドが戻るときに、変換に成功した場合は <c>input</c> の日時と等しい <see cref="T:System.DateTimeOffset" /> が格納されます。変換に失敗した場合は <see cref="F:System.DateTimeOffset.MinValue" /> が格納されます。<c>input</c> パラメーターが <see langword="null" /> の場合、または、日時の文字列形式が <c>format</c> と <c>provider</c> で定義された所定の書式に従う正しいものではない場合、変換に失敗します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定した書式、カルチャ固有の書式情報、およびスタイルを使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTimeOffset" /> に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。</summary>
        <returns>
          <paramref name="input" /> パラメーターが正常に変換された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このオーバー ロード、<xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>などのメソッドは、<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=fullName>メソッド、ことを除き、このメソッドは、変換が失敗した場合に例外をスローしません。 日付と時刻で指定されたパターンを完全に一致する必要がありますの文字列形式を解析して、`format`パラメーター。 場合、`input`文字列がによって定義された空白のいくつか使用可能なバリエーションと、このパターンに一致しない、`styles`パラメーター、解析操作は失敗し、メソッドを返します`false`です。  
  
 `format`パラメーターは、1 つの標準書式指定子またはの必要なパターンを定義する 1 つまたは複数のカスタム書式指定子を含む文字列`input`です。 有効な書式指定コードに関する詳細については、「[Standard Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/bb79761a-ca08-44ee-b142-b06b3e2fc22b)と[Custom Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/98b374e3-0cc2-4c78-ab44-efb671d71984)です。 場合`format`が含まれています、 `z`、 `zz`、または`zzz`オフセットする必要があります内に存在することを示すカスタム書式指定子`input`、そのオフセットは、正または負符号を含める必要があります。 場合は、符号が存在しない、解析操作は失敗し、返します`false`です。  
  
 場合`format`いる必要があります`input`日付時刻ではなく、その結果を含む<xref:System.DateTimeOffset>オブジェクトには、午前 0 時の時間が割り当てられます \(0: 00:00\)。 場合`format`いる必要があります`input`含める時刻がいない日付の場合、その結果、<xref:System.DateTimeOffset>オブジェクトには、ローカル システムの現在の日付が割り当てられます。 場合`format`いる必要はありません`input`オフセット、結果のオフセットを含む<xref:System.DateTimeOffset>オブジェクトの値に依存、`styles`パラメーター。 場合`styles`が含まれています<xref:System.Globalization.DateTimeStyles.AssumeLocal>に割り当てられているローカルのタイム ゾーンのオフセット、<xref:System.DateTimeOffset>オブジェクト。 場合`styles`が含まれています<xref:System.Globalization.DateTimeStyles.AssumeUniversal>、世界協定時刻 \(UTC\) オフセット、またはに割り当てられている 00:00、\+、<xref:System.DateTimeOffset>オブジェクト。 どちらの値を指定すると、ローカル タイム ゾーンのオフセットが使用されます。  
  
 特定の日付と時刻のシンボルとで使用される文字列`input`によって定義された、`formatProvider`パラメーター。 正確なパターンの場合も同様です`input`場合`format`標準書式指定子の文字列です。`formatProvider`パラメーターは、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>カルチャを表すオブジェクトの基になる`input`は解釈されます。<xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>プロパティは、シンボルを定義し、標準の形式では許可`input`です。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
 場合`formatprovider`は`null`、<xref:System.Globalization.CultureInfo>現在のカルチャに対応するオブジェクトを使用します。  
  
 `styles`パラメーターは、空白文字が許可されているかどうかを定義、入力文字列内を示し、明示的なオフセット コンポーネントなしの文字列の解析方法、解析操作の一部として \(utc\) 変換をサポートします。 すべてのメンバー、<xref:System.Globalization.DateTimeStyles>列挙型がサポート対象外除く<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>です。 次の表は、サポートされる各メンバーの影響を示します。  
  
|`DateTimeStyles` のメンバー|動作|  
|----------------------------|--------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|解析`input`と、必要に応じて、UTC に変換します。 これは、文字列を解析し、呼び出すことに相当、<xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=fullName>メソッドの返された<xref:System.DateTimeOffset>オブジェクト。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|場合`format`いる必要はありません`input`、オフセットの値を含む、返された<xref:System.DateTimeOffset>オブジェクトがローカル タイム ゾーンのオフセットを指定します。 これが既定の動作です。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|場合`format`いる必要はありません`input`、オフセットの値を含む、返された<xref:System.DateTimeOffset>オブジェクトは、UTC のオフセット \(\+ 00時 00分\) を付与します。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|により、`input`形式で指定されていない内部の空白文字を含める。 余分な空白文字は、日付と時刻のコンポーネント間、およびオフセット、以外の個々 のコンポーネント内に表示されることができ、文字列の解析時に無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|により、`input`で指定されていない先頭のスペースを含める`format`です。 これらは、文字列の解析時に無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|により、`input`に末尾のスペースで指定されていない含める`format`です。 これらは、文字列の解析時に無視されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|により、`input`で指定されていない先頭、末尾、および内部の空白文字を含める`format`です。 指定されていないすべての余分な空白文字`format`は、文字列の解析時に無視されます。|  
|<xref:System.Globalization.DateTimeStyles.None>|追加の空白文字は使用できませんを示す`input`です。 空白の指定に従って`format`です。 これが既定の動作です。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|影響を与えません、<xref:System.DateTimeOffset>構造体には含まれません、`Kind`プロパティです。|  
  
   
  
## 例  
 次の例では、<xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>標準およびカスタムの書式指定子、インバリアント カルチャ、およびさまざまなメソッド<xref:System.Globalization.DateTimeStyles>いくつかの日付と時刻の文字列を解析する値。  
  
 [!code-csharp[System.DateTimeOffset.TryParseExact\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/cs/TryParseExact.cs#1)]
 [!code-vb[System.DateTimeOffset.TryParseExact\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/vb/TryParseExact.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> に未定義の <see cref="T:System.Globalization.DateTimeStyles" /> 値が含まれています。  
  
 または  
  
 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> がサポートされていません。  
  
 または  
  
 <paramref name="styles" /> に相互に排他的な <see cref="T:System.Globalization.DateTimeStyles" /> 値が含まれています。</exception>
        <block subset="none" type="usage">
          <para>In the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the <see cref="Overload:System.DateTimeOffset.TryParseExact" /> returns <see langword="false" /> if the string to be parsed contains an hour component and an AM/PM designator that are not in agreement. In the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions, the AM/PM designator is ignored.</para>
        </block>
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, valuetype System.DateTimeOffset result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">変換する日時を含む文字列。</param>
        <param name="formats">
          <c>input</c> の有効な書式を定義する配列。</param>
        <param name="formatProvider">
          <c>input</c> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="styles">input に許可されている書式を示す列挙値のビットごとの組み合わせ。 通常指定する値は、<see langword="None" /> です。</param>
        <param name="result">このメソッドが戻るときに、変換に成功した場合は <c>input</c> の日時と等しい <see cref="T:System.DateTimeOffset" /> が格納されます。変換に失敗した場合は <see cref="F:System.DateTimeOffset.MinValue" /> が格納されます。<c>input</c> が正しい文字列形式の日時を含んでいない場合、<c>format</c> で定義された書式に従う日時が含まれていない場合、または、<c>formats</c> が <see langword="null" /> の場合、変換に失敗します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定した書式の配列、カルチャ固有の書式情報、およびスタイルを使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTimeOffset" /> に変換します。 文字列形式の書式は、指定されたいずれかの書式と完全に一致する必要があります。</summary>
        <returns>
          <paramref name="input" /> パラメーターが正常に変換された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [TryParseExact メソッド \(String, String\<xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>メソッドに割り当てられているパターンのいずれかに一致する日付の文字列表現を解析して、`formats`配列。 場合、`input`文字列がによって定義されたすべてのバリエーションでこれらのパターンのいずれかと一致しません、`styles`パラメーター、解析操作は失敗し、メソッドを返します`false`です。 比較する場合を除いて`input`、書式指定子を含む複数の文字列にこのオーバー ロードの動作は、[TryParseExact メソッド \(String, String\<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=fullName>メソッドです。  
  
 `formats`パラメーターが 1 つの標準書式指定子またはの可能なパターンを定義する 1 つまたは複数のカスタム書式指定子のいずれかの要素を格納する文字列配列`input`です。 有効な書式指定コードに関する詳細については、「[Standard Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/bb79761a-ca08-44ee-b142-b06b3e2fc22b)と[Custom Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/98b374e3-0cc2-4c78-ab44-efb671d71984)です。 場合に一致した要素`formats`が含まれています、 `z`、 `zz`、または`zzz`オフセットする必要があります内に存在することを示すカスタム書式指定子`input`、そのオフセットは、正または負符号を含める必要があります。 場合は、符号が存在しない、解析操作は失敗し、メソッドを返します`false`です。  
  
> [!IMPORTANT]
>  使用して、`formats`このオーバー ロードを複数の形式を指定のパラメーターは、日付と時刻を入力するときに発生する多くのユーザーの不満を削減できます。 具体的には、複数の入力パターンを定義する機能により、アプリケーションを含めるか、月、日、時間、分、および秒に先行ゼロが不足している日付と時刻の表現を処理します。 この例では、この具体的なを提供します。  
  
 場合に一致した要素`formats`いる必要があります`input`日付時刻ではなく、その結果を含む[TryParseExact メソッド \(String, String\<xref:System.DateTimeOffset>オブジェクトには、午前 0 時の時間が割り当てられます \(0: 00:00\)。 場合に一致した要素`formats`入力には、時間がない日付の場合、結果が含まれている必要があります[TryParseExact メソッド \(String, String\<xref:System.DateTimeOffset>オブジェクトには、ローカル システムの現在の日付が割り当てられます。 場合に一致した要素`formats`いる必要はありません`input`オフセット、結果のオフセットを含む[TryParseExact メソッド \(String, String\<xref:System.DateTimeOffset>オブジェクトの値に依存、`styles`パラメーター。 場合`styles`が含まれています[TryParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeStyles.AssumeLocal>に割り当てられているローカルのタイム ゾーンのオフセット、[TryParseExact メソッド \(String, String\<xref:System.DateTimeOffset>オブジェクト。 場合`styles`が含まれています[TryParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeStyles.AssumeUniversal>、世界協定時刻 \(UTC\) オフセット、またはに割り当てられている 00:00、\+、[TryParseExact メソッド \(String, String\<xref:System.DateTimeOffset>オブジェクト。 どちらの値を指定すると、ローカル タイム ゾーンのオフセットが使用されます。  
  
 特定の日付と時刻のシンボルとで使用される文字列`input`によって定義された、`formatProvider`パラメーター。 正確なパターンの場合も同様です`input`場合、一致する要素の`formats`標準書式指定子の文字列です。`formatProvider`パラメーターは、次のいずれかを指定できます。  
  
-   A[TryParseExact メソッド \(String, String\<xref:System.Globalization.CultureInfo>カルチャを表すオブジェクトの基になる`input`は解釈されます。[TryParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、[TryParseExact メソッド \(String, String\<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>プロパティ定義シンボルでと書式設定`input`です。  
  
-   A[TryParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
 場合`formatprovider`は`null`、[TryParseExact メソッド \(String, String\<xref:System.Globalization.CultureInfo>現在のカルチャに対応するオブジェクトを使用します。  
  
 `styles`パラメーターは、空白文字が許可されているかどうかを定義、入力文字列内を示し、明示的なオフセット コンポーネントなしの文字列の解析方法、解析操作の一部として \(utc\) 変換をサポートします。 すべてのメンバー、[TryParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeStyles>列挙型がサポート対象外除く[TryParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>です。 次の表は、サポートされている各メンバーの効果を示します。  
  
|`DateTimeStyles` のメンバー|動作|  
|----------------------------|--------|  
|[TryParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|解析`input`と、必要に応じて、UTC に変換します。 これは、文字列を解析し、呼び出すことに相当、[TryParseExact メソッド \(String, String\<xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=fullName>メソッドの返された[TryParseExact メソッド \(String, String\<xref:System.DateTimeOffset>オブジェクト。|  
|[TryParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeStyles.AssumeLocal>|場合に一致した要素`formats`いる必要はありません`input`、オフセットの値を含む、返された[TryParseExact メソッド \(String, String\<xref:System.DateTimeOffset>オブジェクトがローカル タイム ゾーンのオフセットを指定します。 これが既定値です。|  
|[TryParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|場合に一致した要素`formats`いる必要はありません`input`、オフセットの値を含む、返された[TryParseExact メソッド \(String, String\<xref:System.DateTimeOffset>オブジェクトは、UTC のオフセット \(\+ 00時 00分\) を付与します。|  
|[TryParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|により、`input`内の要素で指定されていない内部の空白文字を含める`formats`です。 余分な空白文字は、日付と時刻のコンポーネント間、および個々 のコンポーネント \(オフセット\) を除く内に表示されることができ、文字列の解析時に無視されます。|  
|[TryParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|により、`input`内の要素で指定されていないスペースを含める`formats`です。 これらは、文字列の解析時に無視されます。|  
|[TryParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|により、`input`に末尾の内の要素で指定されていない空白を含める`formats`です。 これらは、文字列の解析時に無視されます。|  
|[TryParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|により、`input`内の要素で指定されていない先頭、末尾、および内部の空白文字を含める`formats`です。 すべての余分な空白文字に一致した要素で指定されていない`formats`は、文字列の解析時に無視されます。|  
|[TryParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeStyles.None>|追加の空白文字は使用できませんを示す`input`です。 空白の特定の要素で指定された正確`formats`が発生する、一致します。 これが既定の動作です。|  
|[TryParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeStyles.RoundtripKind>|影響を与えません、[TryParseExact メソッド \(String, String\<xref:System.DateTimeOffset>構造体には含まれません、`Kind`プロパティです。|  
  
   
  
## 例  
 次の例は、複数の入力形式の日付と時刻、およびオフセットの値の文字列形式を定義し、ユーザーが入力した文字列、[TryParseExact メソッド \(String, String\<xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>メソッドです。  
  
 [!code-csharp[System.DateTimeOffset.TryParseExact\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/cs/TryParseExact.cs#2)]
 [!code-vb[System.DateTimeOffset.TryParseExact\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/vb/TryParseExact.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> に未定義の <see cref="T:System.Globalization.DateTimeStyles" /> 値が含まれています。  
  
 または  
  
 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> がサポートされていません。  
  
 または  
  
 <paramref name="styles" /> に相互に排他的な <see cref="T:System.Globalization.DateTimeStyles" /> 値が含まれています。</exception>
        <block subset="none" type="usage">
          <para>In the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the <see cref="Overload:System.DateTimeOffset.TryParseExact" /> returns <see langword="false" /> if the string to be parsed contains an hour component and an AM/PM designator that are not in agreement. In the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions, the AM/PM designator is ignored.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="UtcDateTime">
      <MemberSignature Language="C#" Value="public DateTime UtcDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime UtcDateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、<see cref="T:System.DateTime" />を世界協定時刻 \(UTC\) 日付と現在の時刻を表す値<see cref="T:System.DateTimeOffset" />オブジェクト。</summary>
        <value>世界協定時刻 \(UTC\) 日付と現在の時刻<see cref="T:System.DateTimeOffset" />オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.DateTimeOffset.UtcDateTime%2A>プロパティには、デュアルの変換が実行されます。  
  
-   現在の日時に変換<xref:System.DateTimeOffset>オブジェクトを世界協定時刻 \(UTC\)。 値を減算して、変換を実行、<xref:System.DateTimeOffset.Offset%2A>プロパティを現在の日時から<xref:System.DateTimeOffset>オブジェクト。  
  
-   変換、<xref:System.DateTimeOffset>値を<xref:System.DateTime>値。  
  
 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTimeOffset.DateTime%2A>に値が設定されている<xref:System.DateTimeKind.Utc?displayProperty=fullName>です。  
  
 値を取得、<xref:System.DateTimeOffset.UtcDateTime%2A>プロパティは、現在の呼び出しに相当<xref:System.DateTimeOffset>オブジェクトの`ToUniversalTime.DateTime`点を除いて、プロパティ、<xref:System.DateTime.Kind%2A>後者のプロパティ<xref:System.DateTime>値は<xref:System.DateTimeKind.Unspecified?displayProperty=fullName>します。  
  
   
  
## 例  
 次の例の使用方法を示しています、<xref:System.DateTimeOffset.UtcDateTime%2A>プロパティを表示、<xref:System.DateTimeOffset>値とその対応する UTC 時刻。  
  
 [!code-csharp[System.DateTimeOffset.Properties\#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#17)]
 [!code-vb[System.DateTimeOffset.Properties\#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="C#" Value="public static DateTimeOffset UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTimeOffset UtcNow" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcNow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、<see cref="T:System.DateTimeOffset" />が日付と時刻が現在の世界協定時刻 \(UTC\) 日付と時刻に設定し、オフセットを持つオブジェクト<see cref="F:System.TimeSpan.Zero" />です。</summary>
        <value>日付し、時刻のオブジェクトが現在世界協定時刻 \(UTC\) とオフセットを持つ<see cref="F:System.TimeSpan.Zero" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.DateTimeOffset.UtcNow%2A>プロパティは、システムのローカル クロック時間に基づく現在世界協定時刻 \(UTC\) とローカル システムのタイム ゾーンで定義されたオフセットを計算します。  
  
 現在の UTC 時刻のミリ秒部分の有効桁数は、システム クロックの分解能に依存します。 Windows NT 3.5 以降および Windows Vista オペレーティング システムでは、時計の解像力は約 10 ~ 15 ミリ秒です。  
  
   
  
## 例  
 次の例では、世界協定時刻 \(UTC\) とローカル時間の関係を示します。  
  
 [!code-csharp[System.DateTimeOffset.Properties\#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#18)]
 [!code-vb[System.DateTimeOffset.Properties\#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#18)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.Now" />
      </Docs>
    </Member>
    <Member MemberName="UtcTicks">
      <MemberSignature Language="C#" Value="public long UtcTicks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 UtcTicks" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcTicks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>日付を表すタイマー刻みの数と、現在の時刻を取得<see cref="T:System.DateTimeOffset" />世界協定時刻 \(UTC\) でのオブジェクト。</summary>
        <value>タイマー刻みの数、<see cref="T:System.DateTimeOffset" />オブジェクトの世界協定時刻 \(UTC\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値、<xref:System.DateTimeOffset.UtcTicks%2A>プロパティは、0001 年 1 月 1 日 12時 00分: 00 深夜 0 時からの経過時間を 100 ナノ秒間隔の数を表します \(の値<xref:System.DateTimeOffset.MinValue>\)。 これは、タイマー刻みはうるう秒で追加するには含まれません。 ナノ秒は、10億分の 1 秒です。1 秒あたりに 10億のタイマー刻みがあります。 値、<xref:System.DateTimeOffset.UtcTicks%2A>プロパティの範囲`DateTimeOffset.MinValue.Ticks`に`DateTimeOffset.MaxValue.Ticks`です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Year" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の日付の年の部分を取得 <see cref="T:System.DateTimeOffset" /> オブジェクトです。</summary>
        <value>現在の年コンポーネント <see cref="T:System.DateTimeOffset" /> オブジェクトの 0 ~ 9999 の整数値として表されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.DateTimeOffset.Year%2A> の値によってプロパティが影響を受けません、 <xref:System.DateTimeOffset.Offset%2A> プロパティです。  
  
 文字列表現を作成することも、 <xref:System.DateTimeOffset> オブジェクトの年の部分を呼び出して、 <xref:System.DateTimeOffset.ToString%2A> 、"y"、"yy"または"yyyy"カスタム書式指定子を持つメソッドです。  
  
   
  
## 例  
 次の例の年の部分を表示する、 <xref:System.DateTimeOffset> 4 つの方法で値。  
  
-   値を取得することによって、 <xref:System.DateTimeOffset.Year%2A> プロパティです。  
  
-   呼び出して、 <xref:System.DateTimeOffset.ToString%28System.String%29> "y"書式指定子を持つメソッドです。  
  
-   呼び出して、 <xref:System.DateTimeOffset.ToString%28System.String%29> "yy"書式指定子を持つメソッドです。  
  
-   呼び出して、 <xref:System.DateTimeOffset.ToString%28System.String%29> "yyyy"書式指定子を持つメソッドです。  
  
 [!code-csharp[System.DateTimeOffset.Properties\#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#19)]
 [!code-vb[System.DateTimeOffset.Properties\#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>日付と時刻を指定した文字列形式に変換、 <see cref="T:System.DateTimeOffset" /> と同じです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した文字列形式の日付と時刻を等価の <see cref="T:System.DateTimeOffset" /> の値に変換します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>2 つあるかどうかを決定 <see cref="T:System.DateTimeOffset" /> オブジェクトが等しいか、または <see cref="T:System.DateTimeOffset" /> オブジェクトが、指定されたオブジェクトと等しい。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した文字列形式の日付と時刻を等価の <see cref="T:System.DateTimeOffset" /> の値に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した減算 <see cref="T:System.DateTimeOffset" /> または <see cref="T:System.TimeSpan" /> オブジェクトから、 <see cref="T:System.DateTimeOffset" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>現在の <see cref="T:System.DateTimeOffset" /> オブジェクトの値を等価の文字列形式に変換します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した文字列形式の日付と時刻を等価の <see cref="T:System.DateTimeOffset" /> の値に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した時刻または現在の期間を減算 <see cref="T:System.DateTimeOffset" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.DateTimeOffset" /> 構造体の新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>