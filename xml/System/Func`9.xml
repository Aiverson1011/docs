<Type Name="Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,TResult&gt;" FullName="System.Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,TResult&gt;">
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T1,in T2,in T3,in T4,in T5,in T6,in T7,in T8,out TResult&gt;(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`9&lt;- T1, - T2, - T3, - T4, - T5, - T6, - T7, - T8, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`9" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T4">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T5">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T6">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T7">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T8">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
    <Parameter Name="arg3" Type="T3" />
    <Parameter Name="arg4" Type="T4" />
    <Parameter Name="arg5" Type="T5" />
    <Parameter Name="arg6" Type="T6" />
    <Parameter Name="arg7" Type="T7" />
    <Parameter Name="arg8" Type="T8" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの最初のパラメーターの型。</typeparam>
    <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの 2 番目のパラメーターの型。</typeparam>
    <typeparam name="T3">このデリゲートによってカプセル化されるメソッドの 3 番目のパラメーターの型。</typeparam>
    <typeparam name="T4">このデリゲートによってカプセル化されるメソッドの 4 番目のパラメーターの型。</typeparam>
    <typeparam name="T5">このデリゲートによってカプセル化されるメソッドの 5 番目のパラメーターの型。</typeparam>
    <typeparam name="T6">このデリゲートによってカプセル化されるメソッドの 6 番目のパラメーターの型。</typeparam>
    <typeparam name="T7">このデリゲートによってカプセル化されるメソッドの 7 番目のパラメーターの型。</typeparam>
    <typeparam name="T8">このデリゲートによってカプセル化されるメソッドの 8 番目のパラメーターの型。</typeparam>
    <typeparam name="TResult">このデリゲートによってカプセル化されるメソッドの戻り値の型。</typeparam>
    <param name="arg1">このデリゲートによってカプセル化されるメソッドの最初のパラメーター。</param>
    <param name="arg2">このデリゲートによってカプセル化されるメソッドの 2 番目のパラメーター。</param>
    <param name="arg3">このデリゲートによってカプセル化されるメソッドの 3 番目のパラメーター。</param>
    <param name="arg4">このデリゲートによってカプセル化されるメソッドの 4 番目のパラメーター。</param>
    <param name="arg5">このデリゲートによってカプセル化されるメソッドの 5 番目のパラメーターです。</param>
    <param name="arg6">このデリゲートによってカプセル化されるメソッドの 6 番目のパラメーターです。</param>
    <param name="arg7">このデリゲートによってカプセル化されるメソッドの 7 番目のパラメーターです。</param>
    <param name="arg8">このデリゲートによってカプセル化されるメソッドの 8 番目のパラメーターです。</param>
    <summary>8 個のパラメーターを持ちで指定された型の値を返すメソッドをカプセル化、<paramref name="TResult" />パラメーター。</summary>
    <returns>このデリゲートによってカプセル化されるメソッドの戻り値。</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 このデリゲートを使用して、明示的にカスタム デリゲートを宣言しなくても、パラメーターとして渡すことができるメソッドを表すことができます。 カプセル化されるメソッドは、このデリゲートによって定義されているメソッドのシグネチャに対応する必要があります。 つまり、カプセル化されるメソッドはそれぞれに値渡し、8 個のパラメーターである必要があります、値を返す必要があります。  
  
> [!NOTE]
>  8 個のパラメーターを返すメソッドを参照する`void`\(として宣言されている Visual basic、または、`Sub`ではなく同様、 `Function`\)、ジェネリックを使用して<xref:System.Action%608>委任する代わりにします。  
  
 使用することも、<xref:System.Func%609>匿名メソッド、ラムダ式を持つデリゲートします。  
  
 ラムダ式の基になる型がジェネリックのいずれかの`Func`デリゲート。 これによって、パラメーターとしてラムダ式を割り当てずに明示的に、デリゲートに渡します。  
  
   
  
## 例  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Action`8" />
  </Docs>
</Type>