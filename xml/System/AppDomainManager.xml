<Type Name="AppDomainManager" FullName="System.AppDomainManager">
  <TypeSignature Language="C#" Value="public class AppDomainManager : MarshalByRefObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AppDomainManager extends System.MarshalByRefObject" />
  <TypeSignature Language="DocId" Value="T:System.AppDomainManager" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>アンマネージ ホストに対応するマネージ ホストを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!IMPORTANT]
>  使用しないでください<xref:System.AppDomainManager>を ASP.NET では、アプリケーション ドメインを構成します。 ASP.NET では、構成は、ホストで処理する必要があります。  
  
 実装する、<xref:System.AppDomainManager>クラスには、新しいアプリケーション ドメインの作成に参加するホスト アプリケーションができるようにします。 既定値を置換する<xref:System.AppDomainManager>、アセンブリと種類、置換の特定<xref:System.AppDomainManager>APPDOMAIN\_MANAGER\_ASM および APPDOMAIN\_MANAGER\_TYPE の環境変数、またはを使用して、 [\<appDomainManagerAssembly\>](http://msdn.microsoft.com/ja-jp/c7c56e39-a700-44f5-b94e-411bfce339d9)と[\<appDomainManagerType\>](http://msdn.microsoft.com/ja-jp/ae8d5a7e-e7f7-47f7-98d9-455cc243a322)構成ファイル内の要素\<\/appDomainManagerType\>\<\/appDomainManagerAssembly\>。 アセンブリは完全に信頼される必要があり、グローバル アセンブリ キャッシュまたは開始のアプリケーションのディレクトリに含まれています。 型とアセンブリ名は、環境変数で完全修飾する必要があります。 例:  
  
 `set APPDOMAIN_MANAGER_TYPE=MyNamespace.TestAppDomainManager`  
  
 `set APPDOMAIN_MANAGER_ASM=customappDomainmanager, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f1368f7b12a08d72`  
  
> [!IMPORTANT]
>  アセンブリを含む、サブクラスの<xref:System.AppDomainManager>、条件付きでマークされたアセンブリに依存して<xref:System.Security.AllowPartiallyTrustedCallersAttribute>\(APTCA\) 属性が、渡されたリストでそれらのアセンブリを含める必要があります、<xref:System.AppDomainSetup.PartialTrustVisibleAssemblies%2A>プロパティの<xref:System.AppDomainSetup>を使用するアプリケーション ドメインを作成します。 それ以外の場合、条件付きの APTCA 属性でマークされたアセンブリが無効になります。  
  
 <xref:System.AppDomainManager>アンマネージ ホストの管理されていることと同じです。<xref:System.AppDomainManager>オブジェクトがプロセスの新しいアプリケーション ドメインの作成に参加して、新しいをカスタマイズできます<xref:System.AppDomain>他のマネージ コードが実行される前にします。<xref:System.AppDomainManager>共通言語ランタイムの実行の他の側面に参加しているホストの管理者を指定することもできます。 たとえば、<xref:System.AppDomainManager>識別できる、<xref:System.Security.HostSecurityManager>アプリケーション ドメインのセキュリティ上の決定に参加しているオブジェクト。  
  
> [!NOTE]
>  付与するアセンブリだけ`FullTrust`、グローバル アセンブリ キャッシュにアセンブリなどかとして識別されて`fullTrustAssemblies`で、<xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=fullName>でメソッドを読み込むことができます、<xref:System.AppDomainManager.%23ctor%2A>コンス トラクターと<xref:System.AppDomainManager.InitializeNewDomain%2A>メソッドです。  
  
> [!NOTE]
>  このクラスには、リンク確認要求し、クラス レベルの継承確認要求が含まれています。 A<xref:System.Security.SecurityException>直前の呼び出し元または派生クラスのいずれかに、インフラストラクチャのアクセス許可があるない場合にスローされます。 セキュリティ要求の詳細については、「[Link Demands](http://msdn.microsoft.com/ja-jp/a33fd5f9-2de9-4653-a4f0-d9df25082c4d)と[継承確認要求](http://msdn.microsoft.com/ja-jp/28b9adbb-8f08-4f10-b856-dbf59eb932d9)です。  
  
   
  
## 例  
 次の例は、の非常に単純な実装を示しています。<xref:System.AppDomainManager>です。  
  
 [!code-csharp[System.AppDomainManager\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.AppDomainManager/CS/customAppDomainManager.cs#1)]
 [!code-vb[System.AppDomainManager\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.AppDomainManager/VB/customAppDomainManager.vb#1)]  
  
 ]]></format>
    </remarks>
    <exception cref="T:System.Security.SecurityException">呼び出し元に、正しいアクセス許可がありません。 「必要条件」のセクションを参照してください。</exception>
    <permission cref="T:System.Security.SecurityCriticalAttribute">Requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">for derived classes to plug executable code into the common language runtime hosting infrastructure. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure" />.</permission>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AppDomainManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomainManager.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.AppDomainManager" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  付与するアセンブリだけ`FullTrust`、グローバル アセンブリ キャッシュにアセンブリなどかとして識別されて`fullTrustAssemblies`で、<xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=fullName>でメソッドを読み込むことができます、<xref:System.AppDomainManager.%23ctor%2A>コンス トラクターと<xref:System.AppDomainManager.InitializeNewDomain%2A>メソッドです。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="ApplicationActivator">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.Hosting.ApplicationActivator ApplicationActivator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.Hosting.ApplicationActivator ApplicationActivator" />
      <MemberSignature Language="DocId" Value="P:System.AppDomainManager.ApplicationActivator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Hosting.ApplicationActivator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アドインと、ドメインのマニフェストに基づくアプリケーションのアクティブ化を処理するアプリケーション アクティベーターを取得します。</summary>
        <value>アプリケーション アクティベーター。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 1 つの指定されたインスタンスがある、<xref:System.Runtime.Hosting.ApplicationActivator>クラスにそれぞれ<xref:System.AppDomain>するすべてのアドインと、マニフェストに基づくアプリケーションをアクティブ化の呼び出しがルーティングされます。<xref:System.AppDomainManager>現在の<xref:System.AppDomain>独自のカスタムを提供できます<xref:System.Runtime.Hosting.ApplicationActivator>、または既定のインスタンス<xref:System.Runtime.Hosting.ApplicationActivator>を作成します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckSecuritySettings">
      <MemberSignature Language="C#" Value="public virtual bool CheckSecuritySettings (System.Security.SecurityState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckSecuritySettings(class System.Security.SecurityState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomainManager.CheckSecuritySettings(System.Security.SecurityState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Security.SecurityState" />
      </Parameters>
      <Docs>
        <param name="state">サブクラス<see cref="T:System.Security.SecurityState" />セキュリティ状態が要求された操作を識別します。</param>
        <summary>アプリケーション ドメインで、指定された操作が許可されているかどうかを示します。</summary>
        <returns>
          <see langword="true" />ホストがで指定された操作を許可する場合<paramref name="state" />、それ以外のアプリケーション ドメインで実行する<see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの既定の実装を返します`false`です。  
  
 このメソッドが呼び出されます、<xref:System.IO.IsolatedStorage.IsolatedStorageFile.IncreaseQuotaTo%2A?displayProperty=fullName>分離ストレージ クォータを増やすメソッドが呼び出されました。 共通言語ランタイム \(CLR\) をホストするアプリケーションを上書きできます、<xref:System.AppDomainManager.CheckSecuritySettings%2A>に基づいてポリシーを決定を実行する方法、<xref:System.IO.IsolatedStorage.IsolatedStorageSecurityState>オブジェクト \(継承される<xref:System.Security.SecurityState>\)、およびできますし、許可または禁止、増加します。 たとえば、ホスト促すことが終了承認するか、クォータを増やすに要求を拒否します。 ホストの実装<xref:System.AppDomainManager.CheckSecuritySettings%2A>サービス拒否攻撃の可能性を考慮する必要があります。 たとえば、ユーザーに求めますがボタンのクリックしてなど、ユーザーが開始したイベントからメソッドを呼び出した場合にのみ必要があります。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDomain">
      <MemberSignature Language="C#" Value="public virtual AppDomain CreateDomain (string friendlyName, System.Security.Policy.Evidence securityInfo, AppDomainSetup appDomainInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.AppDomain CreateDomain(string friendlyName, class System.Security.Policy.Evidence securityInfo, class System.AppDomainSetup appDomainInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomainManager.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="friendlyName" Type="System.String" />
        <Parameter Name="securityInfo" Type="System.Security.Policy.Evidence" />
        <Parameter Name="appDomainInfo" Type="System.AppDomainSetup" />
      </Parameters>
      <Docs>
        <param name="friendlyName">ドメインの表示名。</param>
        <param name="securityInfo">スタックの最上位の権限を確立するためにセキュリティ ポリシーによってマップされている証拠を含むオブジェクトを設定します。</param>
        <param name="appDomainInfo">アプリケーション ドメインの初期化情報を格納しているオブジェクト。</param>
        <summary>新規または既存のアプリケーション ドメインを返します。</summary>
        <returns>新規または既存のアプリケーション ドメイン。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定された名前、`friendlyName`パラメーターは、ドメインを識別するユーザー インターフェイスに表示できます。 詳細については、<xref:System.AppDomain.FriendlyName%2A> プロパティを参照してください。  
  
 既定の<xref:System.AppDomainManager.CreateDomain%2A>メソッドは、保護された<xref:System.AppDomainManager.CreateDomainHelper%2A>メソッドを作成、<xref:System.AppDomain>です。 このメソッドのオーバーライドを呼び出す必要はありません、<xref:System.AppDomainManager.CreateDomainHelper%2A>メソッドが、既存のドメインを返すことができます。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When you inherit from the <see cref="T:System.AppDomainManager" /> class and override the <see cref="M:System.AppDomainManager.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)" /> method, you can perform custom application domain initialization activities before calling the <see cref="M:System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)" /> method, or not call the helper method at all.  For example, you could modify the evidence passed in as <paramref name="securityInfo" />, update the fields of the associated <see cref="T:System.AppDomainSetup" />, or reuse an exiting domain.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateDomainHelper">
      <MemberSignature Language="C#" Value="protected static AppDomain CreateDomainHelper (string friendlyName, System.Security.Policy.Evidence securityInfo, AppDomainSetup appDomainInfo);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.AppDomain CreateDomainHelper(string friendlyName, class System.Security.Policy.Evidence securityInfo, class System.AppDomainSetup appDomainInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="friendlyName" Type="System.String" />
        <Parameter Name="securityInfo" Type="System.Security.Policy.Evidence" />
        <Parameter Name="appDomainInfo" Type="System.AppDomainSetup" />
      </Parameters>
      <Docs>
        <param name="friendlyName">ドメインの表示名。</param>
        <param name="securityInfo">スタックの最上位の権限を確立するためにセキュリティ ポリシーによってマップされている証拠を含むオブジェクトを設定します。</param>
        <param name="appDomainInfo">アプリケーション ドメインの初期化情報を格納しているオブジェクト。</param>
        <summary>アプリケーション ドメインを作成するヘルパー メソッドを提供します。</summary>
        <returns>新しく作成されたアプリケーション ドメイン。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この保護されたヘルパー メソッドは、新しいアプリケーション ドメインの作成を処理します。  
  
 指定されたこのフレンドリ名、`friendlyName`パラメーターは、ドメインを識別するユーザー インターフェイスに表示できます。 詳細については、<xref:System.AppDomain.FriendlyName%2A> プロパティを参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="friendlyName" /> は <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for controlling evidence. Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></permission>
      </Docs>
    </Member>
    <Member MemberName="EntryAssembly">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.Assembly EntryAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly EntryAssembly" />
      <MemberSignature Language="DocId" Value="P:System.AppDomainManager.EntryAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アプリケーションのエントリのアセンブリを取得します。</summary>
        <value>アプリケーションのエントリのアセンブリ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アプリケーションがマニフェストでアクティブ化されるアプリケーションの場合は、入力アセンブリがアプリケーション マニフェストから決定されます。 アプリケーションがマニフェスト アクティブでない場合、入力アセンブリは既定のアプリケーション ドメインで実行可能プロセスです。 他のアプリケーション ドメインで、入力アセンブリは、実行された最初の実行可能ファイル、 <xref:System.AppDomain.ExecuteAssembly%2A?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HostExecutionContextManager">
      <MemberSignature Language="C#" Value="public virtual System.Threading.HostExecutionContextManager HostExecutionContextManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.HostExecutionContextManager HostExecutionContextManager" />
      <MemberSignature Language="DocId" Value="P:System.AppDomainManager.HostExecutionContextManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.HostExecutionContextManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>実行コンテキストのマネージャーの実行コンテキストのフローを管理するホストを取得します。</summary>
        <value>ホストの実行コンテキスト マネージャー。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティにより、ホスト、<xref:System.Threading.HostExecutionContextManager>非同期呼び出し間での実行コンテキストのフローに参加することができます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HostSecurityManager">
      <MemberSignature Language="C#" Value="public virtual System.Security.HostSecurityManager HostSecurityManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.HostSecurityManager HostSecurityManager" />
      <MemberSignature Language="DocId" Value="P:System.AppDomainManager.HostSecurityManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.HostSecurityManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セキュリティに参加しているホスト セキュリティ マネージャーがアプリケーション ドメインの決定を取得します。</summary>
        <value>ホストのセキュリティ マネージャー。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティにより、ホスト、<xref:System.Security.HostSecurityManager>のアプリケーション ドメインに対するセキュリティ上の決定に参加します。  
  
   
  
## 例  
 次の例のオーバーライドを示しています、<xref:System.AppDomainManager.HostSecurityManager%2A>カスタム アプリケーション ドメイン マネージャーのプロパティです。 このコード例に示されている例の一部である、<xref:System.AppDomainManager>クラスです。  
  
 [!code-csharp[System.AppDomainManager\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.AppDomainManager/CS/customAppDomainManager.cs#3)]
 [!code-vb[System.AppDomainManager\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.AppDomainManager/VB/customAppDomainManager.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializationFlags">
      <MemberSignature Language="C#" Value="public AppDomainManagerInitializationOptions InitializationFlags { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.AppDomainManagerInitializationOptions InitializationFlags" />
      <MemberSignature Language="DocId" Value="P:System.AppDomainManager.InitializationFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomainManagerInitializationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カスタムのアプリケーション ドメイン マネージャーの初期化フラグを取得します。</summary>
        <value>実行する初期化操作を記述する列挙値のビットごとの組み合わせ。 既定値は、<see cref="F:System.AppDomainManagerInitializationOptions.None" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeNewDomain">
      <MemberSignature Language="C#" Value="public virtual void InitializeNewDomain (AppDomainSetup appDomainInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InitializeNewDomain(class System.AppDomainSetup appDomainInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appDomainInfo" Type="System.AppDomainSetup" />
      </Parameters>
      <Docs>
        <param name="appDomainInfo">アプリケーション ドメインの初期化情報を格納しているオブジェクト。</param>
        <summary>新しいアプリケーション ドメインを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!IMPORTANT]
>  ASP.NET では、アプリケーション ドメインを初期化するためにこのメソッドを使用しないでください。 ASP.NET では、構成は、ホストで処理する必要があります。 アプリケーション ドメインを初期化するためにこのメソッドを使用する場合、ホストをスロー <xref:System.InvalidOperationException> しようとするアプリケーション ドメインを初期化します。 例外メッセージは、初期化が既に行われたことを示します。  
  
 このメソッドは、コンス トラクターの直後に呼び出されます。 既定値 <xref:System.AppDomainManager.InitializeNewDomain%2A> 実装では、何も行われません。  カスタム実装は、内部クラスとデリゲートを設定する、アンマネージ ホスト インターフェイスを持つインターフェイスの設定、または、新しいイベント ハンドラーを設定 <xref:System.AppDomain>します。  
  
 また、アドインをアクティブ化のカスタム実装識別でした現在 <xref:System.AppDomain> 対象のアプリケーション ドメインとします。  
  
 以降で、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], 、アプリケーションの起動時に、または新しいアプリケーション ドメインのサンド ボックスを変更するため、既定のアプリケーション ドメインのサンド ボックス化するには、このメソッドを使用することができます。 これを行うには、次のように調整します。、 <xref:System.Security.Policy.ApplicationTrust.DefaultGrantSet%2A> と <xref:System.Security.Policy.ApplicationTrust.FullTrustAssemblies%2A> プロパティを、 <xref:System.Security.Policy.ApplicationTrust> オブジェクトに割り当てられている、 <xref:System.AppDomainSetup.ApplicationTrust%2A?displayProperty=fullName> プロパティの `appDomainInfo`, は、アプリケーション ドメインを初期化する前にします。  
  
> [!NOTE]
>  付与アセンブリだけ `FullTrust`, 、グローバル アセンブリ キャッシュにアセンブリなどとして識別されたまたは `fullTrustAssemblies` で、 <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=fullName> でメソッドを読み込むことが、  <xref:System.AppDomainManager.%23ctor%2A> コンス トラクターと <xref:System.AppDomainManager.InitializeNewDomain%2A> メソッドです。  
  
   
  
## 例  
 オーバーライドを次の例に示します、 <xref:System.AppDomainManager.InitializeNewDomain%2A> カスタムのアプリケーション ドメイン マネージャーのメソッドです。 このコード例が示されている例の一部は、 <xref:System.AppDomainManager> クラスです。  
  
 [!code-csharp[System.AppDomainManager\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.AppDomainManager/CS/customAppDomainManager.cs#2)]
 [!code-vb[System.AppDomainManager\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.AppDomainManager/VB/customAppDomainManager.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>