<Type Name="UInt64" FullName="System.UInt64">
  <TypeSignature Language="C#" Value="public struct UInt64 : IComparable, IComparable&lt;ulong&gt;, IConvertible, IEquatable&lt;ulong&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit unsigned int64 extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;unsigned int64&gt;, class System.IConvertible, class System.IEquatable`1&lt;unsigned int64&gt;, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.UInt64" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.UInt64&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.UInt64&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.CLSCompliant(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>64 ビット符号なし整数を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.UInt64> 値型は、0 から 18,446,744,073,709,551,615 までの値を符号なし整数を表します。  
  
> [!IMPORTANT]
>  <xref:System.UInt64> 型は CLS に準拠していません。 CLS に準拠の代替の型は <xref:System.Decimal>です。<xref:System.Int64> 置き換える代わりに使用できる、 <xref:System.UInt64> 範囲は 0 ~ 値 <xref:System.Int64.MaxValue>です。 CLS 準拠の詳細については、次を参照してください。 [Language Independence and Language\-Independent Components](http://msdn.microsoft.com/ja-jp/4f0b77d0-4844-464f-af73-6e06bedeafc6)します。  
  
 <xref:System.UInt64> この型のインスタンスを比較し、インスタンスの値の文字列形式に変換し、数値の文字列形式をこの型のインスタンスに変換するメソッドを提供します。  
  
 ]]></format>
    </remarks>
    <threadsafe>この種類のすべてのメンバーでは、スレッド セーフです。 インスタンスの状態を変更する表示されるメンバーは、実際に新しい値で初期化された新しいインスタンスを返します。 として、他の種類と読み取りと書き込みをこの型のインスタンスを含む共有変数を保護する必要があるスレッド セーフを確保するロックによってです。</threadsafe>
    <altmember cref="T:System.Int64" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt64.CompareTo(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">比較対象のオブジェクト、または <see langword="null" />。</param>
        <summary>指定したオブジェクトとこのインスタンスを比較し、これらの相対値を示す値を返します。</summary>
        <returns>このインスタンスと <paramref name="value" /> の相対値を示す符号付き数値。  
  
 <list type="table">  
<listheader>  
<term> 戻り値  
  
 </term>  
<description> 説明  
  
 </description>  
</listheader>  
<item>  
<term> 0 より小さい値  
  
 </term>  
<description> このインスタンスは、<paramref name="value" /> よりも小さくなっています。  
  
 </description>  
</item>  
<item>  
<term> 0  
  
 </term>  
<description> このインスタンスは <paramref name="value" /> と等価です。  
  
 </description>  
</item>  
<item>  
<term> 0 より大きい値  
  
 </term>  
<description> このインスタンスは <paramref name="value" /> よりも大きくなっています。  
  
 または  
  
 <paramref name="value" /> は <see langword="null" /> です。  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 任意のインスタンス<xref:System.UInt64>、その値に関係なくが大きいと見なされますより`null`です。  
  
 `value`必要があります`null`またはのインスタンス<xref:System.UInt64>です。 それ以外の場合、例外がスローされます。  
  
   
  
## 例  
 次のコード例を示しています、<xref:System.UInt64.CompareTo%2A>メソッドです。  
  
 [!code-cpp[UInt64 Example\#3](~/samples/snippets/cpp/VS_Snippets_CLR/UInt64 Example/CPP/source.cpp#3)]
 [!code-csharp[UInt64 Example\#3](~/samples/snippets/csharp/VS_Snippets_CLR/UInt64 Example/CS/source.cs#3)]
 [!code-vb[UInt64 Example\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/UInt64 Example/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> が <see cref="T:System.UInt64" /> ではありません。</exception>
        <altmember cref="M:System.UInt64.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt64.CompareTo(System.UInt64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">比較対象の符号なし整数。</param>
        <summary>指定した 64 ビット符号なし整数とこのインスタンスを比較し、これらの相対値を示す値を返します。</summary>
        <returns>このインスタンスと <paramref name="value" /> の相対値を示す符号付き数値。  
  
 <list type="table">  
<listheader>  
<term> 戻り値  
  
 </term>  
<description> 説明  
  
 </description>  
</listheader>  
<item>  
<term> 0 より小さい値  
  
 </term>  
<description> このインスタンスは、<paramref name="value" /> よりも小さくなっています。  
  
 </description>  
</item>  
<item>  
<term> 0  
  
 </term>  
<description> このインスタンスは <paramref name="value" /> と等価です。  
  
 </description>  
</item>  
<item>  
<term> 0 より大きい値  
  
 </term>  
<description> このインスタンスは <paramref name="value" /> よりも大きくなっています。  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを実装する、<xref:System.IComparable%601?displayProperty=fullName>インターフェイスし、実行よりもわずかに向上、<xref:System.UInt64.CompareTo%2A?displayProperty=fullName>メソッドに変換があるないため、`value`オブジェクトへのパラメーターです。  
  
 プログラミング言語に応じてコードに考えられる場合があります、<xref:System.UInt64.CompareTo%2A>メソッドのパラメーターの型のビット数が少ないがここではインスタンスの型よりもします。 これには一部のプログラミング言語は、ビット数のインスタンスと型としてパラメーターを表す暗黙の拡大変換を実行するため。  
  
 たとえば、インスタンスの型が<xref:System.Int32>パラメーターの型と<xref:System.Byte>です。 Microsoft c\# コンパイラは、パラメーターの値を表す命令を生成、<xref:System.Int32>オブジェクトを生成、<xref:System.Int32.CompareTo%2A?displayProperty=fullName>の値を比較するメソッド、<xref:System.Int32>インスタンスおよび<xref:System.Int32>パラメーター形式です。  
  
 コンパイラが数値型に暗黙の拡大変換を実行するかどうかを決定する、プログラミング言語のドキュメントを参照してください。  
  
   
  
## 例  
 次のコード例に示しますジェネリックと非ジェネリック バージョンの<xref:System.UInt64.CompareTo%2A>いくつかの値と参照型のメソッドです。  
  
 [!code-cpp[T.CompareTo\#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.CompareTo/CPP/cat.cpp#1)]
 [!code-csharp[T.CompareTo\#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.CompareTo/CS/cat.cs#1)]
 [!code-vb[T.CompareTo\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.CompareTo/VB/cat.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.UInt64.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt64.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">このインスタンスと比較するオブジェクト。</param>
        <summary>対象のインスタンスが、指定したオブジェクトに等しいかどうかを示す値を返します。</summary>
        <returns>
          <see langword="true" /> が <paramref name="obj" /> のインスタンスで、このインスタンスの値に等しい場合は <see cref="T:System.UInt64" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 The following example demonstrates the <xref:System.UInt64.Equals%2A> method.  
  
 [!code-csharp[System.UInt64.Equals\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.uint64.equals/cs/equals1.cs#1)]
 [!code-vb[System.UInt64.Equals\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.uint64.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Compiler overload resolution may account for an apparent difference in the behavior of the two <see cref="M:System.UInt64.Equals(System.UInt64)" /> method overloads. If an implicit conversion between the <paramref name="obj" /> argument and a <see cref="T:System.UInt64" /> is defined and the argument is not typed as an <see cref="T:System.Object" />, compilers perform an implicit conversion and call the <see cref="M:System.UInt64.Equals(System.UInt64)" /> method. Otherwise, they call the <see cref="M:System.UInt64.Equals(System.Object)" /> method, which always returns <see langword="false" /> if its <paramref name="obj" /> argument is not a <see cref="T:System.UInt64" /> value. The following example illustrates the difference in behavior between the two method overloads. In the case of the <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, and <see cref="T:System.UInt32" /> values, the first comparison returns <see langword="true" /> because the compiler automatically performs a widening conversion and calls the <see cref="M:System.UInt64.Equals(System.UInt64)" /> method, whereas the second comparison returns <see langword="false" /> because the compiler calls the <see cref="M:System.UInt64.Equals(System.Object)" /> method.  
  
 [!code-csharp[System.UInt64.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.uint64.equals/cs/equalsoverl.cs#2)]
 [!code-vb[System.UInt64.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.uint64.equals/vb/equalsoverl.vb#2)]</para>
        </block>
        <altmember cref="M:System.UInt64.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (ulong obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(unsigned int64 obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt64.Equals(System.UInt64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="obj">このインスタンスと比較する <see cref="T:System.UInt64" /> 値。</param>
        <summary>このインスタンスが指定した <see cref="T:System.UInt64" /> 値に等しいかどうかを示す値を返します。</summary>
        <returns>
          <paramref name="obj" /> がこのインスタンスと同じ値を保持している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method implements the <xref:System.IEquatable%601?displayProperty=fullName> interface, and performs slightly better than <xref:System.UInt64.Equals%2A> because it does not have to convert the **parameterReference tag is not supported!!!!**  
 parameter to an object.  
  
   
  
## 例  
 The following example demonstrates the <xref:System.UInt64.Equals%2A> method.  
  
 [!code-cpp[UInt64\_Equals\#1](~/samples/snippets/cpp/VS_Snippets_CLR/UInt64_Equals/CPP/uint64_equals.cpp#1)]
 [!code-csharp[UInt64\_Equals\#1](~/samples/snippets/csharp/VS_Snippets_CLR/UInt64_Equals/CS/uint64_equals.cs#1)]
 [!code-vb[UInt64\_Equals\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/UInt64_Equals/VB/uint64_equals.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Compiler overload resolution may account for an apparent difference in the behavior of the two <see cref="M:System.UInt64.Equals(System.UInt64)" /> method overloads. If an implicit conversion between the <paramref name="obj" /> argument and a <see cref="T:System.UInt64" /> is defined and the argument is not typed as an <see cref="T:System.Object" />, compilers perform an implicit conversion and call the <see cref="M:System.UInt64.Equals(System.UInt64)" /> method. Otherwise, they call the <see cref="M:System.UInt64.Equals(System.Object)" /> method, which always returns <see langword="false" /> if its <paramref name="obj" /> argument is not a <see cref="T:System.UInt64" /> value. The following example illustrates the difference in behavior between the two method overloads. In the case of the <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, and <see cref="T:System.UInt32" /> values, the first comparison returns <see langword="true" /> because the compiler automatically performs a widening conversion and calls the <see cref="M:System.UInt64.Equals(System.UInt64)" /> method, whereas the second comparison returns <see langword="false" /> because the compiler calls the <see cref="M:System.UInt64.Equals(System.Object)" /> method.  
  
 [!code-csharp[System.UInt64.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.uint64.equals/cs/equalsoverl.cs#2)]
 [!code-vb[System.UInt64.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.uint64.equals/vb/equalsoverl.vb#2)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt64.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスのハッシュ コードを返します。</summary>
        <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt64.GetTypeCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.TypeCode" /> 値型の <see cref="T:System.UInt64" /> を返します。</summary>
        <returns>列挙型定数 <see cref="F:System.TypeCode.UInt64" />。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.TypeCode" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public const ulong MaxValue = 18446744073709551615;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal unsigned int64 MaxValue = unsigned int64(18446744073709551615)" />
      <MemberSignature Language="DocId" Value="F:System.UInt64.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <MemberValue>18446744073709551615</MemberValue>
      <Docs>
        <summary>
          <see cref="T:System.UInt64" /> の最大有効値を表します。 このフィールドは定数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この定数の値が 18,446,744,073,709,551,615 です。つまり、16 進数 0 xffffffffffffffff します。  
  
   
  
## 例  
 次の例では、<xref:System.UInt64.MinValue>と<xref:System.UInt64.MaxValue>ことを確認するフィールド、<xref:System.Double>値の範囲内では、<xref:System.UInt64>型変換を実行する前に入力します。 これにより、<xref:System.OverflowException>実行時にします。  
  
 [!code-csharp[System.UInt64.MaxValue\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.UInt64.MaxValue/cs/MaxValue1.cs#1)]
 [!code-vb[System.UInt64.MaxValue\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.UInt64.MaxValue/vb/MaxValue1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.UInt64.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public const ulong MinValue = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal unsigned int64 MinValue = unsigned int64(0)" />
      <MemberSignature Language="DocId" Value="F:System.UInt64.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
          <see cref="T:System.UInt64" /> の最小有効値を表します。 このフィールドは定数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この定数の値は 0 です。  
  
   
  
## 例  
 次の例では、<xref:System.UInt64.MinValue>と<xref:System.UInt64.MaxValue>ことを確認するフィールド、<xref:System.Double>値の範囲内では、<xref:System.UInt64>型変換を実行する前に入力します。 これにより、<xref:System.OverflowException>実行時にします。  
  
 [!code-csharp[System.UInt64.MaxValue\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.UInt64.MaxValue/cs/MaxValue1.cs#1)]
 [!code-vb[System.UInt64.MaxValue\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.UInt64.MaxValue/vb/MaxValue1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.UInt64.MaxValue" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static ulong Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt64.Parse(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">変換する数値を表す文字列。</param>
        <summary>数値の文字列形式を、それと等価な 64 ビット符号なし整数に変換します。</summary>
        <returns>
          <paramref name="s" /> に格納されている数値と等しい 64 ビット符号なし整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `s`パラメーターが、次の形式の数値の文字列形式にする必要があります。  
  
 \[*ws*\]\[*sign*\]*digits*\[*ws*\]  
  
 角かっこ \(\[ および \]\) 内の要素は省略可能です。 次の表では、各要素について説明します。  
  
|要素|説明|  
|--------|--------|  
|*ws*|省略可能なホワイト スペースです。|  
|*sign*|省略可能な符号の場合。 有効な符号文字がによって決定されます、<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName>と<xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=fullName>現在のカルチャのプロパティです。 ただし、負の記号のみで使える 0;それ以外の場合がスローされます、<xref:System.OverflowException>です。|  
|*数字*|0 から 9 までの数字のシーケンス。 先頭の 0 は無視されます。|  
  
> [!NOTE]
>  指定された文字列、`s`パラメーターを使用して解釈されます、<xref:System.Globalization.NumberStyles.Integer?displayProperty=fullName>スタイル。 任意の桁区切り記号または 10 進区切り記号を含めることはできませんとに小数部を持つことはできません。  
  
 `s`パラメーターは書式設定情報を使用して解析、<xref:System.Globalization.NumberFormatInfo?displayProperty=fullName>現在のシステムのカルチャに初期化されるオブジェクト。 詳細については、「<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=fullName>」を参照してください。 特定のカルチャの書式情報を使用して、文字列を解析するを使用して、<xref:System.UInt64.Parse%28System.String%2CSystem.IFormatProvider%29>メソッドです。  
  
   
  
## 例  
 次の例では、<xref:System.UInt64.Parse%2A>文字列値の配列を解析します。  
  
 [!code-csharp[System.UInt64.Parse\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.uint64.parse/cs/parse1.cs#1)]
 [!code-vb[System.UInt64.Parse\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.uint64.parse/vb/parse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> パラメーターの形式が正しくありません。</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> パラメーターが、<see cref="F:System.UInt64.MinValue" /> 未満の数値か、<see cref="F:System.UInt64.MaxValue" /> より大きい数値を表しています。</exception>
        <altCompliant cref="M:System.Decimal.Parse(System.String)" />
        <altmember cref="Overload:System.UInt64.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static ulong Parse (string s, System.Globalization.NumberStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 Parse(string s, valuetype System.Globalization.NumberStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt64.Parse(System.String,System.Globalization.NumberStyles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
      </Parameters>
      <Docs>
        <param name="s">変換する数値を表す文字列。 文字列は、<c>style</c> パラメーターで指定されたスタイルを使用して解釈されます。</param>
        <param name="style">
          <c>s</c> に許可されている書式を指定する列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Integer" /> です。</param>
        <summary>指定したスタイルの数値の文字列形式を、それと等価な 64 ビット符号なし整数に変換します。</summary>
        <returns>
          <paramref name="s" /> で指定した数値と等しい 64 ビット符号なし整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `style` パラメーター \(空白文字、正または負記号、桁区切り記号、小数点記号など\) で使用できるスタイル要素を定義する、 `s` 解析操作が成功するためのパラメーターです。`style` ビット フラグの組み合わせにする必要があります、 <xref:System.Globalization.NumberStyles> 列挙します。`style` パラメーターにより、このメソッドのオーバー ロードの便利な場合に `s` によって表される数システム \(10 進または 16 進数\) と 16 進数値の文字列形式を含む `s` 、実行時にのみ、または空白を許可しない場合し、で記号がわかっている `s`します。  
  
 値に応じて `style`, 、 `s` パラメーターは、次の要素を含めることがあります。  
  
 \[*ws*\]\[*$*\]\[*sign*\]\[*digits*,\]*digits*\[.*fractional\_digits*\] \[E \[*記号*\]*exponential\_digits*\] \[*ws*\]  
  
 角かっこ \(\[ および \]\) 内の要素は省略可能です。 場合 `style` を含む <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=fullName>, 、 `s` パラメーターは、次の要素を含めることがあります。  
  
 \[*ws*\]*hexdigits*\[*ws*\]  
  
 次の表では、各要素について説明します。  
  
|要素|説明|  
|--------|--------|  
|*ws*|省略可能な空白です。 空白文字の開始時に表示されます `s` 場合 `style` が含まれています、 <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=fullName> の最後に、フラグ、およびそれが表示される `s` 場合 `style` が含まれています、 <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=fullName> フラグ。|  
|*$*|カルチャに固有の通貨記号です。 文字列内での位置が定義されている、 <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=fullName> と <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=fullName> 、現在のカルチャのプロパティです。 現在のカルチャの通貨記号が表示されるよう `s` 場合 `style` を含む、 <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=fullName> フラグ。|  
|*サインイン*|オプションの符号です。 先頭に符号があることができます `s` 場合 `style` が含まれています、 <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=fullName> の最後に、フラグ、およびそれが表示される `s` 場合 `style` が含まれています、 <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=fullName> フラグ。 かっこを使用できます `s` 負の値を指定する場合 `style` を含む、 <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=fullName> フラグ。 ただし、負の記号と併用してのみ 0 です。それ以外の場合、メソッドをスローする <xref:System.OverflowException>です。|  
|*数字*<br /><br /> *fractional\_digits*<br /><br /> *exponential\_digits*|0 ~ 9 桁の数字のシーケンス。*Fractional\_digits*, 、数字の 0 は有効なだけです。|  
|*、*|カルチャに固有のグループの区切り記号です。 現在のカルチャの桁区切り記号に表示される `s` 場合 `style` が含まれています、 <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=fullName> フラグ。|  
|*」を参照してください。*|カルチャに固有の小数点の記号。 現在のカルチャの小数点の記号が表示されるよう `s` 場合 `style` を含む、 <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=fullName> フラグ。 数字の 0 は、解析操作を成功させるため桁の小数部として表示されます。場合 *fractional\_digits* 他の任意の数字を含む、 <xref:System.FormatException> がスローされます。|  
|E|"E"または"E"文字は、値が指数表記で表されることを示します。`s` 場合、パラメーターは指数表記の数値を表すことができます `style` を含む、 <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=fullName> フラグ。|  
|*hexdigits*|16 進数 0 ~ f、または 0 F. ~ からのシーケンス|  
  
 数字のみの文字列 \(に対応する、 <xref:System.Globalization.NumberStyles.None?displayProperty=fullName> スタイル\) 常に正常に解析します。 残りのほとんど <xref:System.Globalization.NumberStyles> メンバーが存在する可能性がありますが、入力文字列内に存在する必要はありませんが要素を制御します。 次の表に示す個別 <xref:System.Globalization.NumberStyles> メンバー内に存在可能な要素に影響を与える `s`します。  
  
|`NumberStyles` の値|使用できる要素 `s` 数字だけでなく|  
|-----------------------|-------------------------|  
|<xref:System.Globalization.NumberStyles.None>|*桁* 要素のみです。|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|小数点 \(.\)*桁の小数部* 要素。|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|"E"または"E"文字は、指数表記を示すと共に *exponential\_digits*します。|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|*Ws* 先頭の要素 `s`します。|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|*Ws* の末尾から要素 `s`します。|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|*記号* 先頭の要素 `s`します。|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|*記号* の末尾から要素 `s`します。|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|*記号* 形式の数値を囲むかっこ内の要素。|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|グループ区切り記号 \(,\) 要素です。|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|通貨 \($\) の要素。|  
|<xref:System.Globalization.NumberStyles.Currency>|すべての要素。 ただし、 `s` 16 進数または指数表記の数値を表すことはできません。|  
|<xref:System.Globalization.NumberStyles.Float>|*Ws* 先頭または末尾の位置にある要素 `s`, 、*記号* の開始時 `s`, 、および小数点 \(*.*\) シンボルです。`s` パラメーターは、指数表記も使用できます。|  
|<xref:System.Globalization.NumberStyles.Number>|`ws`, 、`sign`, 、桁区切り記号 \(*,、*\)、および小数点 \(*.*\) 要素です。|  
|<xref:System.Globalization.NumberStyles.Any>|すべての要素。 ただし、 `s` 16 進数を表すことはできません。|  
  
 異なり、その他の <xref:System.Globalization.NumberStyles> 値を使用するが、必要としない、特定のスタイルの要素のプレゼンス `s`, 、 <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=fullName> スタイル値つまりの個々 の数値文字 `s` 常に 16 進数の文字として解釈されます。 有効な 16 進数の文字は 0 ~ 9、A ~ F、a ~ f です。 "0 x"などのプレフィックスはサポートされていませんし、解析操作が失敗します。 のみ他のフラグと組み合わせて使用できますが、 `style` パラメーターは <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=fullName> と <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=fullName>です。 \(、 <xref:System.Globalization.NumberStyles> 列挙体には、複合数値のスタイルが含まれています <xref:System.Globalization.NumberStyles.HexNumber?displayProperty=fullName>, 、両方の空白文字フラグが含まれます。\)。  
  
> [!NOTE]
>  場合 `s` 文字列の形式は、その、16 進数の接頭辞前ことはできません \(など `0x` または `&h`\)、16 進数として区別します。 これにより、変換に失敗します。  
  
 `s` で書式設定情報を使用してパラメーターを解析、 <xref:System.Globalization.NumberFormatInfo> オブジェクトを現在のシステム カルチャが初期化されます。 書式情報を含むが、解析操作で使用されるカルチャを指定するには、呼び出し、 <xref:System.UInt64.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> オーバー ロードします。  
  
   
  
## 例  
 次の例の番号を使用して文字列の配列内の各要素を解析しようとする <xref:System.Globalization.NumberStyles> 値。  
  
 [!code-csharp[System.UInt64.Parse\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.uint64.parse/cs/parseex2.cs#2)]
 [!code-vb[System.UInt64.Parse\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.uint64.parse/vb/parseex2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。  
  
 \-または\-  
  
 <paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値と <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 値の組み合わせではありません。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> パラメーターの形式が <paramref name="style" /> に準拠していません。</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> パラメーターが、<see cref="F:System.UInt64.MinValue" /> 未満の数値か、<see cref="F:System.UInt64.MaxValue" /> より大きい数値を表しています。  
  
 または  
  
 <paramref name="s" /> に 0 以外の小数部の桁が含まれています。</exception>
        <altCompliant cref="M:System.Decimal.Parse(System.String)" />
        <altmember cref="Overload:System.UInt64.ToString" />
        <altmember cref="Overload:System.UInt64.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static ulong Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt64.Parse(System.String,System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">変換する数値を表す文字列。</param>
        <param name="provider">
          <c>s</c> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>指定したカルチャ固有の書式による数値の文字列形式を、それと等価な 64 ビット符号なし整数に変換します。</summary>
        <returns>
          <paramref name="s" /> で指定した数値と等しい 64 ビット符号なし整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このオーバー ロード、 <xref:System.UInt64.Parse%28System.String%2CSystem.IFormatProvider%29> メソッドでは、さまざまな方法でフォーマットできるテキストに変換するために使用は、通常、 <xref:System.UInt64> 値。 たとえば、値を数値には、HTML テキスト ボックスに、ユーザーが入力したテキストに変換を使用できます。  
  
 `s` パラメーターには、フォームの番号が含まれています。  
  
 \[ws\]\[サインイン\] の数字 \[ws\]  
  
 角かっこ \(\[と\]\) は省略可能の項目です。 次の表では、各要素について説明します。  
  
|要素|説明|  
|--------|--------|  
|*ws*|省略可能な空白です。|  
|*サインイン*|必要に応じての正符号または負の符号場合 `s` 値 0 を表します。|  
|*数字*|数字の 0 から 9 までのシーケンス。|  
  
 使用して、s パラメーターを解釈、 <xref:System.Globalization.NumberStyles.Integer?displayProperty=fullName> スタイル。 符号なし整数値の 10 進数字以外には、先頭と末尾の先頭の符号とスペースのみを使用できます。 \(マイナス記号が存在する場合 `s` の値は 0、またはメソッドでのスローを表す必要があります、 <xref:System.OverflowException>.\) 使用可能なカルチャ固有の書式情報とスタイル要素を明示的に定義する `s`, を使用して、 <xref:System.UInt64.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> メソッドです。  
  
 `provider` パラメーターは、 <xref:System.IFormatProvider> 実装が <xref:System.IFormatProvider.GetFormat%2A> メソッドが返される、 <xref:System.Globalization.NumberFormatInfo> の書式に関するカルチャ固有の情報を提供するオブジェクト `s`します。 3 つの方法を使用する、 `provider` パラメーターを解析操作にカスタムの書式情報を指定します。  
  
-   実際に渡すことができます <xref:System.Globalization.NumberFormatInfo> の書式情報を提供するオブジェクト。 \(その実装の <xref:System.IFormatProvider.GetFormat%2A> 単にそれ自体を返します\)。  
  
-   渡すことができます、 <xref:System.Globalization.CultureInfo> 書式を使用するカルチャを指定するオブジェクト。 その <xref:System.Globalization.CultureInfo.NumberFormat%2A> プロパティは、書式設定情報を提供します。  
  
-   カスタムを渡すことができます <xref:System.IFormatProvider> 実装します。 その <xref:System.IFormatProvider.GetFormat%2A> メソッドはインスタンス化を返す必要があります、 <xref:System.Globalization.NumberFormatInfo> の書式情報を提供するオブジェクト。  
  
 場合 `provider` は `null`, 、 <xref:System.Globalization.NumberFormatInfo> 、現在のカルチャが使用されます。  
  
   
  
## 例  
 次の例は、ボタンは、Web フォームのイベント ハンドラーをクリックします。 によって返される配列を使用して、 <xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=fullName> プロパティをユーザーのロケールを決定します。 インスタンス化し、 <xref:System.Globalization.CultureInfo> そのロケールに対応するオブジェクト。<xref:System.Globalization.NumberFormatInfo> オブジェクトに属する <xref:System.Globalization.CultureInfo> オブジェクトに渡されます、 <xref:System.UInt64.Parse%28System.String%2CSystem.IFormatProvider%29> をユーザーに変換するメソッドの入力、 <xref:System.UInt64> 値。  
  
 [!code-csharp[ParseMethod\#1](~/samples/snippets/csharp/VS_Snippets_CLR/ParseMethod/cs/Default.aspx.cs#1)]
 [!code-vb[ParseMethod\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ParseMethod/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> パラメーターが正しいスタイルではありません。</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> パラメーターが、<see cref="F:System.UInt64.MinValue" /> 未満の数値か、<see cref="F:System.UInt64.MaxValue" /> より大きい数値を表しています。</exception>
        <altCompliant cref="M:System.Decimal.Parse(System.String)" />
        <altmember cref="M:System.UInt64.ToString" />
        <altmember cref="Overload:System.UInt64.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static ulong Parse (string s, System.Globalization.NumberStyles style, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 Parse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt64.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">変換する数値を表す文字列。 文字列は、<c>style</c> パラメーターで指定されたスタイルを使用して解釈されます。</param>
        <param name="style">
          <c>s</c> で存在する可能性を持つスタイル要素を示す、列挙値のビットごとの組み合わせ。 通常指定する値は <see cref="F:System.Globalization.NumberStyles.Integer" /> です。</param>
        <param name="provider">
          <c>s</c> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>指定したスタイルおよびカルチャ固有の書式による数値の文字列形式を、それと等価な 64 ビット符号なし整数に変換します。</summary>
        <returns>
          <paramref name="s" /> で指定した数値と等しい 64 ビット符号なし整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `style` パラメーター \(空白や正または負符号\) で使用できるスタイル要素を定義する、 `s` 解析操作が成功するためのパラメーターです。 ビット フラグの組み合わせを可能にする必要があります、 <xref:System.Globalization.NumberStyles> 列挙します。  
  
 値に応じて `style`, 、 `s` パラメーターは、次の要素を含めることがあります。  
  
 \[*ws*\]\[*$*\]\[*sign*\]*digits*\[.*fractional\_digits*\] \[E \[*記号*\]*exponential\_digits*\] \[*ws*\]  
  
 角かっこ \(\[ および \]\) 内の要素は省略可能です。 場合 `style` を含む <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=fullName>, 、 `s` パラメーターは、次の要素を含めることがあります。  
  
 \[*ws*\]*hexdigits*\[*ws*\]  
  
 次の表では、各要素について説明します。  
  
|要素|説明|  
|--------|--------|  
|*ws*|省略可能な空白です。 空白文字がの先頭に置くことができます `s` 場合 `style` が含まれています、 <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=fullName> の最後に、フラグ、およびそれが表示される `s` 場合 `style` が含まれています、 <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=fullName> フラグ。|  
|*$*|カルチャに固有の通貨記号です。 文字列内での位置が定義されている、 <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A> のプロパティ、 <xref:System.Globalization.NumberFormatInfo> によって返されるオブジェクト、 <xref:System.IFormatProvider.GetFormat%2A> のメソッド、 `provider` パラメーター。 通貨記号に表示される `s` 場合 `style` が含まれています、 <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=fullName> フラグ。|  
|*サインイン*|オプションの符号です。 \(メソッドをスロー、 <xref:System.OverflowException> 場合 `s` 負の符号をインクルードし、0 以外の数値を表している\)。 符号の先頭に置くことができます `s` 場合 `style` が含まれています、 <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=fullName> フラグは、表示されるの末尾 `s` 場合 `style` が含まれています、 <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=fullName> フラグ。 かっこを使用できます `s` 負の値を指定する場合 `style` を含む、 <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=fullName> フラグ。|  
|*数字*|0 ~ 9 桁の数字のシーケンス。|  
|*」を参照してください。*|カルチャに固有の小数点の記号。 現在のカルチャの小数点の記号が表示されるよう `s` 場合 `style` を含む、 <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=fullName> フラグ。|  
|*fractional\_digits*|数字 0 ~ 9 の 1 つ以上の出現回数場合 `style` を含む、 <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=fullName> フラグ、またはそうでない場合は 0 の数字の 1 つ以上の出現回数。 桁の小数部に表示される `s` 場合にのみ、 `style` を含む、 <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=fullName> フラグ。|  
|E|"E"または"E"文字は、値が指数表記で表されることを示します。`s` 場合、パラメーターは指数表記の数値を表すことができます `style` を含む、 <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=fullName> フラグ。|  
|*exponential\_digits*|0 ~ 9 桁の数字のシーケンス。`s` 場合、パラメーターは指数表記の数値を表すことができます `style` を含む、 <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=fullName> フラグ。|  
|*hexdigits*|16 進数 0 ~ f、または 0 F. ~ からのシーケンス|  
  
 桁のみの文字列 \(に対応する、 <xref:System.Globalization.NumberStyles.None?displayProperty=fullName> スタイル\) 常に正常に解析します。 残りのほとんど <xref:System.Globalization.NumberStyles> メンバーが存在する可能性がありますが、この入力文字列内に存在する必要はありませんが要素を制御します。 次の表に示す個別 <xref:System.Globalization.NumberStyles> メンバー内に存在可能な要素に影響を与える `s`します。  
  
|非複合 `NumberStyles` 値|使用できる要素 `s` 数字だけでなく|  
|--------------------------|-------------------------|  
|<xref:System.Globalization.NumberStyles.None?displayProperty=fullName>|10 進数字のみです。|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=fullName>|整数部の桁数 \(*.*\) と *fractional\_digits* 要素。 ただし、スタイルが含まれていない場合、 <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=fullName> フラグ、 *fractional\_digits* だけ 1 つまたは複数の 0 の数字で構成される必要があります。 そうしないと、、 <xref:System.OverflowException> がスローされます。|  
|<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=fullName>|"E"または"E"文字は、指数表記を示すと共に *exponential\_digits*します。|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=fullName>|*Ws* の先頭にある要素 `s`します。|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=fullName>|*Ws* の末尾から要素 `s`します。|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=fullName>|前に符号 *桁*します。|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=fullName>|後の符号 *桁*します。|  
|<xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=fullName>|前に、と後のかっこ *桁* 、負の値を示します。|  
|<xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=fullName>|桁区切り記号 \(*,、*\) 要素です。|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=fullName>|通貨 \(*$*\) 要素です。|  
  
 場合、 <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=fullName> フラグを使用すると、 `s` 16 進数値にする必要があります。 有効な 16 進数の文字は 0 ~ 9、A ~ F、a ~ f です。 "0 x"などのプレフィックスはサポートされていませんし、解析操作が失敗します。 のみ他のフラグと組み合わせられるは <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=fullName> と <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=fullName>です。 \(、 <xref:System.Globalization.NumberStyles> 列挙体には、複合数値のスタイルが含まれています <xref:System.Globalization.NumberStyles.HexNumber?displayProperty=fullName>, 、両方の空白文字フラグが含まれます。\)。  
  
> [!NOTE]
>  場合、 `s` パラメーターは、16 進数の文字列表現、接頭辞が付けることはできません \(よう `0x` または `&h`\)、16 進数として区別します。 これにより、解析操作が例外をスローします。  
  
 `provider` パラメーターは、 <xref:System.IFormatProvider> 実装が <xref:System.IFormatProvider.GetFormat%2A> メソッドが返される、 <xref:System.Globalization.NumberFormatInfo> の書式に関するカルチャ固有の情報を提供するオブジェクト `s`します。 3 つの方法を使用する、 `provider` パラメーターを解析操作にカスタムの書式情報を指定します。  
  
-   実際に渡すことができます <xref:System.Globalization.NumberFormatInfo> の書式情報を提供するオブジェクト。 \(その実装の <xref:System.IFormatProvider.GetFormat%2A> 単にそれ自体を返します\)。  
  
-   渡すことができます、 <xref:System.Globalization.CultureInfo> 書式を使用するカルチャを指定するオブジェクト。 その <xref:System.Globalization.CultureInfo.NumberFormat%2A> プロパティは、書式設定情報を提供します。  
  
-   カスタムを渡すことができます <xref:System.IFormatProvider> 実装します。 その <xref:System.IFormatProvider.GetFormat%2A> メソッドはインスタンス化を返す必要があります、 <xref:System.Globalization.NumberFormatInfo> の書式情報を提供するオブジェクト。  
  
 場合 `provider` は `null`, 、 <xref:System.Globalization.NumberFormatInfo> オブジェクトの現在のカルチャが使用されます。  
  
   
  
## 例  
 次の例では、 <xref:System.UInt64.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> 数値の文字列形式をさまざまなを 64 ビット符号なし整数値に変換します。  
  
 [!code-csharp[System.UInt64.Parse\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.uint64.parse/cs/parseex4.cs#4)]
 [!code-vb[System.UInt64.Parse\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.uint64.parse/vb/parseex4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。  
  
 \-または\-  
  
 <paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値と <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 値の組み合わせではありません。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> パラメーターの形式が <paramref name="style" /> に準拠していません。</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> パラメーターが、<see cref="F:System.UInt64.MinValue" /> 未満の数値か、<see cref="F:System.UInt64.MaxValue" /> より大きい数値を表しています。  
  
 または  
  
 <paramref name="s" /> に 0 以外の小数部の桁が含まれています。</exception>
        <altCompliant cref="M:System.Decimal.Parse(System.String)" />
        <altmember cref="Overload:System.UInt64.ToString" />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt64.System#IComparable#CompareTo(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt64.System#IConvertible#GetTypeCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt64.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />」をご覧ください。</summary>
        <returns>現在のインスタンスの値が 0 でない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.UInt64> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToBoolean%28System.UInt64%29?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt64.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />」をご覧ください。</summary>
        <returns>
          <see cref="T:System.Byte" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.UInt64> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToByte%28System.UInt64%29?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt64.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />」をご覧ください。</summary>
        <returns>
          <see cref="T:System.Char" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.UInt64> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToChar%28System.UInt64%29?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt64.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>この変換はサポートされていません。 値は返されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt64.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />」を参照してください。</summary>
        <returns>
          <see cref="T:System.Decimal" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.UInt64> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToDecimal%28System.UInt64%29?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt64.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの説明については、<see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" /> を参照してください。</summary>
        <returns>
          <see cref="T:System.Double" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.UInt64> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToDouble%28System.UInt64%29?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt64.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />」を参照してください。</summary>
        <returns>
          <see cref="T:System.Int16" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.UInt64> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToInt16%28System.UInt64%29?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt64.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />」を参照してください。</summary>
        <returns>
          <see cref="T:System.Int32" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.UInt64> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToInt32%28System.UInt64%29?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt64.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />」を参照してください。</summary>
        <returns>
          <see cref="T:System.Int64" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.UInt64> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToInt64%28System.UInt64%29?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt64.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />」をご覧ください。</summary>
        <returns>
          <see cref="T:System.SByte" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.UInt64> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToSByte%28System.UInt64%29?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt64.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />」をご覧ください。</summary>
        <returns>
          <see cref="T:System.Single" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.UInt64> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToSingle%28System.UInt64%29?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt64.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type">この <see cref="T:System.UInt64" /> 値の変換後の型。</param>
        <param name="provider">戻り値の書式に関する情報を提供する <see cref="T:System.IFormatProvider" /> の実装。</param>
        <summary>このメンバーの説明については、「<see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />」を参照してください。</summary>
        <returns>
          <paramref name="type" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.UInt64> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 `static` \(`Shared` Visual Basic で\) <xref:System.Convert.ChangeType%2A?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt64.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />」をご覧ください。</summary>
        <returns>
          <see cref="T:System.UInt16" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.UInt64> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToUInt16%28System.UInt64%29?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt64.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />」を参照してください。</summary>
        <returns>
          <see cref="T:System.UInt32" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.UInt64> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToUInt32%28System.UInt64%29?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt64.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />」を参照してください。</summary>
        <returns>変更されていない、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.UInt64> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt64.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスの数値を、それと等価な文字列形式に変換します。</summary>
        <returns>0 から 9 までの一連の数字から構成され、符号または先行ゼロを含まない、このインスタンスの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.UInt64.ToString> メソッド形式、 <xref:System.UInt64> \("G"、または一般\) の既定の値の形式を使用して、 <xref:System.Globalization.NumberFormatInfo> の現在のカルチャ オブジェクト。 別の形式またはカルチャを指定する場合の他のオーバー ロードを使用して、 <xref:System.UInt64.ToString%2A> メソッドを次のとおりです。  
  
|形式を使用するには|カルチャの|オーバー ロードを使用します。|  
|---------------|-----------|---------------------|  
|既定値 \("G"\) 書式|特定のカルチャ|<xref:System.UInt64.ToString%28System.IFormatProvider%29>|  
|特定の形式|\(現在\) の既定のカルチャ|<xref:System.UInt64.ToString%28System.String%29>|  
|特定の形式|特定のカルチャ|<xref:System.UInt64.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
   
  
## 例  
 次の例を表示、 <xref:System.UInt64> 既定値を使用して、値 <xref:System.UInt64.ToString> メソッドです。 文字列形式も表示されます、 <xref:System.UInt64> をいくつかの標準書式指定子を使用して生成する値。 例では、EN\-US カルチャの書式指定規則を使用して表示されます。  
  
 [!code-csharp[System.UInt64.ToString\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.uint64.tostring/cs/tostring1.cs#1)]
 [!code-vb[System.UInt64.ToString\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.uint64.tostring/vb/tostring1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.UInt64.Parse(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt64.ToString(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>このインスタンスの数値を、指定したカルチャ固有の書式情報を使用して、それと等価な文字列形式に変換します。</summary>
        <returns>0 から 9 までの一連の数字から構成され、符号または先行ゼロを含まない、このインスタンスの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.UInt64.ToString%28System.IFormatProvider%29> メソッド形式、 <xref:System.UInt64> \("G"、または一般\) の既定の値の形式を使用して、 <xref:System.Globalization.NumberFormatInfo> 、特定のカルチャ オブジェクト。 別の形式または現在のカルチャを指定する場合の他のオーバー ロードを使用して、 <xref:System.UInt64.ToString%2A> メソッドを次のとおりです。  
  
|形式を使用するには|カルチャの|オーバー ロードを使用します。|  
|---------------|-----------|---------------------|  
|既定値 \("G"\) 書式|\(現在\) の既定のカルチャ|<xref:System.UInt64.ToString>|  
|特定の形式|\(現在\) の既定のカルチャ|<xref:System.UInt64.ToString%28System.String%29>|  
|特定の形式|特定のカルチャ|<xref:System.UInt64.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 `provider` パラメーターは、 <xref:System.IFormatProvider> 実装します。 その <xref:System.IFormatProvider.GetFormat%2A> メソッドが返される、 <xref:System.Globalization.NumberFormatInfo> カルチャ固有の書式情報を提供するオブジェクト。 ただしのプロパティのいずれも、 <xref:System.Globalization.NumberFormatInfo> 一般数値書式指定子 \("G"\) で書式設定時に使用されます。  
  
   
  
## 例  
 次の例では、インバリアント カルチャのいずれかを含むいくつかの書式プロバイダーを使用して、64 ビット符号付き整数値を書式します。 この例の出力によって書式設定された文字列が返されることを示しています、 <xref:System.UInt64.ToString%28System.IFormatProvider%29> メソッドは、書式プロバイダーに関係なく同じです。  
  
 [!code-csharp[System.UInt64.ToString\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.uint64.tostring/cs/tostring2.cs#2)]
 [!code-vb[System.UInt64.ToString\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.uint64.tostring/vb/tostring2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.UInt64.Parse(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt64.ToString(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">数値書式指定文字列。</param>
        <summary>このインスタンスの数値を、指定した書式を使用して、それと等価な文字列形式に変換します。</summary>
        <returns>
          <paramref name="format" /> で指定された、このインスタンスの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.UInt64.ToString%28System.String%29>メソッドの形式、<xref:System.UInt64>値を使用して、指定された形式で、<xref:System.Globalization.NumberFormatInfo>を現在のカルチャの規則を表すオブジェクト。 既定値 \("G"、または \[全般\]\) を使用する場合は、書式を設定または別のカルチャを指定して、他のオーバー ロードを使用して、<xref:System.UInt64.ToString%2A>メソッドは、次のように。  
  
|形式を使用するには|カルチャの|オーバー ロードを使用します。|  
|---------------|-----------|---------------------|  
|既定値 \("G"\) 書式|\(現在\) の既定のカルチャ|<xref:System.UInt64.ToString>|  
|既定値 \("G"\) 書式|特定のカルチャ|<xref:System.UInt64.ToString%28System.IFormatProvider%29>|  
|特定の形式|特定のカルチャ|<xref:System.UInt64.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 `format`パラメーターに任意の有効なできます[standard numeric format specifier](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467)、または任意の組み合わせ[custom numeric format specifiers](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4)です。 場合`format`と等しい<xref:System.String.Empty?displayProperty=fullName>または`null`、現在の戻り値<xref:System.UInt64>オブジェクトは、一般書式指定子 \("G"\) でフォーマットします。 場合`format`その他の値、メソッドがスローされますが、<xref:System.FormatException>です。  
  
 .NET Framework では、次の書式設定のトピックで詳しく説明されている、広範な書式設定サポートを提供します。  
  
-   数値書式指定子の詳細については、次を参照してください。[Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467)と[Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4)です。  
  
-   .NET Framework における書式設定のサポートに関する詳細については、次を参照してください。[Formatting Types in the .NET Framework](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f)です。  
  
 によって返される文字列の形式が決定されます、<xref:System.Globalization.NumberFormatInfo>現在のカルチャ オブジェクト。 によって、`format`パラメーター、このオブジェクトは、桁区切り記号などのシンボルと、出力文字列に小数点記号を制御します。 現在のカルチャ以外のカルチャの書式情報を提供するには、呼び出し、<xref:System.UInt64.ToString%28System.String%2CSystem.IFormatProvider%29>オーバー ロードします。  
  
   
  
## 例  
 次の例では、各標準書式指定文字列と一部のカスタム書式指定文字列を使用して、64 ビット符号なし整数値を表示します。  
  
 [!code-csharp[System.UInt64.ToString\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.uint64.tostring/cs/tostring3.cs#3)]
 [!code-vb[System.UInt64.ToString\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.uint64.tostring/vb/tostring3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> パラメーターが正しくありません。</exception>
        <altmember cref="M:System.UInt64.Parse(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt64.ToString(System.String,System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">数値書式指定文字列。</param>
        <param name="provider">このインスタンスに関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>このインスタンスの数値を、指定した書式およびカルチャ固有の書式情報を使用して、それと等価な文字列形式に変換します。</summary>
        <returns>
          <paramref name="format" /> と <paramref name="provider" /> で指定された、このインスタンスの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.UInt64.ToString%28System.String%2CSystem.IFormatProvider%29>メソッドの形式、<xref:System.UInt64>値を使用して指定された形式で、<xref:System.Globalization.NumberFormatInfo>特定のカルチャ オブジェクト。 既定の形式またはカルチャの設定を使用する場合は、他のオーバー ロードを使用して、<xref:System.UInt64.ToString%2A>メソッドは、次のようにします。  
  
|形式を使用するには|カルチャの|オーバー ロードを使用します。|  
|---------------|-----------|---------------------|  
|既定値 \("G"\) 書式|\(現在\) の既定のカルチャ|<xref:System.UInt64.ToString>|  
|既定値 \("G"\) 書式|特定のカルチャ|<xref:System.UInt64.ToString%28System.IFormatProvider%29>|  
|特定の形式|\(現在\) の既定のカルチャ|<xref:System.UInt64.ToString%28System.String%29>|  
  
 `format`パラメーターに任意の有効なできます[standard numeric format specifier](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467)、または任意の組み合わせ[custom numeric format specifiers](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4)です。 場合`format`と等しい<xref:System.String.Empty?displayProperty=fullName>または`null`、現在の戻り値<xref:System.UInt64>オブジェクトは、一般書式指定子 \("G"\) でフォーマットします。 場合`format`その他の値、メソッドがスローされますが、<xref:System.FormatException>です。  
  
 .NET Framework では、次の書式設定のトピックで詳しく説明されている、広範な書式設定サポートを提供します。  
  
-   数値書式指定子の詳細については、次を参照してください。[Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467)と[Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4)です。  
  
-   書式設定に関する詳細については、次を参照してください。[Formatting Types in the .NET Framework](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f)です。  
  
 `provider`パラメーターは、<xref:System.IFormatProvider>実装します。 その<xref:System.IFormatProvider.GetFormat%2A>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>このメソッドによって返される文字列の書式に関するカルチャ固有の情報を提供するオブジェクト。 ときに、<xref:System.UInt64.ToString%28System.String%2CSystem.IFormatProvider%29>メソッドが呼び出され、呼び出し、`provider`パラメーターの<xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName>メソッド渡します、<xref:System.Type>を表すオブジェクト、<xref:System.Globalization.NumberFormatInfo>型です。<xref:System.IFormatProvider.GetFormat%2A>メソッドが戻ります、<xref:System.Globalization.NumberFormatInfo>オブジェクトの現在の書式設定情報を提供する<xref:System.UInt64>桁区切り記号や小数点記号などの値。 3 つの方法を使用する、`provider`書式設定情報を指定するパラメーター、<xref:System.UInt64.ToString%28System.String%2CSystem.IFormatProvider%29>メソッド。  
  
-   渡すことができます、<xref:System.Globalization.CultureInfo>の書式情報を提供するカルチャを表すオブジェクト。 その<xref:System.Globalization.CultureInfo.GetFormat%2A>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>そのカルチャの数値の書式設定情報を提供するオブジェクト。  
  
-   実際に渡すことができます<xref:System.Globalization.NumberFormatInfo>数値書式設定情報を提供するオブジェクト。 \(その実装の<xref:System.Globalization.NumberFormatInfo.GetFormat%2A>自体を返すだけです\)。  
  
-   実装するカスタム オブジェクトを渡すことができます<xref:System.IFormatProvider>です。 その<xref:System.IFormatProvider.GetFormat%2A>メソッドがインスタンス化し、返します、<xref:System.Globalization.NumberFormatInfo>の書式情報を提供するオブジェクト。  
  
 場合`provider`は`null`、に基づいて返される文字列の書式設定、<xref:System.Globalization.NumberFormatInfo>現在のカルチャ オブジェクト。  
  
   
  
## 例  
 次の例は、標準の数値書式指定子と特定の番号を使用して、32 ビット符号なし整数値を表示<xref:System.Globalization.CultureInfo>オブジェクト。  
  
 [!code-csharp[System.UInt64.ToString\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.uint64.tostring/cs/tostring4.cs#4)]
 [!code-vb[System.UInt64.ToString\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.uint64.tostring/vb/tostring4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> パラメーターが正しくありません。</exception>
        <altmember cref="M:System.UInt64.Parse(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out ulong result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, unsigned int64 result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt64.TryParse(System.String,System.UInt64@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.UInt64&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">変換する数値を表す文字列。</param>
        <param name="result">このメソッドから制御が返されたとき、変換に成功した場合は、<c>s</c> に格納された数値と等価な 64 ビット符号なし整数値が格納されます。変換に失敗した場合は 0 が格納されます。<c>s</c> パラメーターが <see langword="null" /> または <see cref="F:System.String.Empty" /> であるか、正しい形式ではない、または <see cref="F:System.UInt64.MinValue" /> より小さいか <see cref="F:System.UInt64.MaxValue" /> より大きい数値を表している場合、変換は失敗します。 このパラメーターは初期化されていない状態で渡されています。<c>result</c> で最初に指定された任意の値が上書きされます。</param>
        <summary>数値の文字列形式を、それと等価の 64 ビット符号なし整数に変換します。 戻り値は、変換が成功したか失敗したかを示します。</summary>
        <returns>
          <see langword="true" /> が正常に変換された場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.UInt64.TryParse%28System.String%2CSystem.UInt64%40%29>などのメソッドは、<xref:System.UInt64.Parse%28System.String%29>メソッド、点を除いて、変換が失敗した場合に、it が例外をスローしません。 このメソッドをテストする例外処理を使用する必要がある、<xref:System.FormatException>場合`s`無効なため、正常に解析することはできません。  
  
 `s`パラメーターが、次の形式の 10 進数の文字列形式にする必要があります。  
  
 \[*ws*\]\[*sign*\]*digits*\[*ws*\]  
  
 角かっこ \(\[ および \]\) 内の要素は省略可能です。 次の表では、各要素について説明します。  
  
|要素|説明|  
|--------|--------|  
|*ws*|省略可能なホワイト スペースです。|  
|*sign*|省略可能な符号の場合。 有効な符号文字がによって決定されます、<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName>と<xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=fullName>現在のカルチャのプロパティです。|  
|*数字*|10 進数字の 0 から 9 までのシーケンス。|  
  
 `s`パラメーターを使用して解釈されます、<xref:System.Globalization.NumberStyles.Integer?displayProperty=fullName>スタイル。 10 進数字以外には、先頭と末尾のスペースが先頭の符号と共にのみを使用できます。 使用できるカルチャに固有の書式情報を持つスタイル要素を明示的に定義する`s`を呼び出し、<xref:System.UInt64.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.UInt64%40%29>メソッドです。  
  
> [!NOTE]
>  指定された文字列、`s`パラメーターは、任意の桁区切り記号または 10 進区切り記号を含めることはできず、小数部を持つことはできません。  
  
 `s`で書式設定情報を使用してパラメーターを解析、<xref:System.Globalization.NumberFormatInfo>オブジェクトの現在のシステムのカルチャ用に初期化します。 詳細については、「<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=fullName>」を参照してください。  
  
 このオーバー ロード内のすべての桁を解釈し、`s`として小数点以下桁数のパラメーターです。 16 進数の文字列表現を解析するには、呼び出し、<xref:System.UInt64.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.UInt64%40%29>オーバー ロードを代用します。  
  
   
  
## 例  
 次の例では、<xref:System.UInt64.TryParse%28System.String%2CSystem.UInt64%40%29>文字列配列の各要素に対して 1 回のメソッドです。  
  
 [!code-csharp[System.UInt64.TryParse\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.uint64.tryparse/cs/tryparse1.cs#1)]
 [!code-vb[System.UInt64.TryParse\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.uint64.tryparse/vb/tryparse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Decimal.Parse(System.String)" />
        <altmember cref="Overload:System.UInt64.Parse" />
        <altmember cref="Overload:System.UInt64.ToString" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider provider, out ulong result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, unsigned int64 result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UInt64.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt64@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.UInt64&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">変換する数値を表す文字列。 文字列は、<c>style</c> パラメーターで指定されたスタイルを使用して解釈されます。</param>
        <param name="style">
          <c>s</c> で使用可能な書式を示す、列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Integer" /> です。</param>
        <param name="provider">
          <c>s</c> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="result">変換が成功した場合、このメソッドが返されるときに、<c>s</c> に格納された数値と等しい 64 ビット符号なし整数値を格納します。変換に失敗した場合は 0 を格納します。<c>s</c> パラメーターが <see langword="null" /> または <see cref="F:System.String.Empty" /> であるか、<c>style</c> に準拠した形式ではない、または <see cref="F:System.UInt64.MinValue" /> より小さいか <see cref="F:System.UInt64.MaxValue" /> より大きい数値を表している場合、変換は失敗します。 このパラメーターは初期化されていない状態で渡されています。<c>result</c> で最初に指定された任意の値が上書きされます。</param>
        <summary>指定したスタイルおよびカルチャ固有の書式による数値の文字列形式を、それと等価な 64 ビット符号なし整数に変換します。 戻り値は、変換が成功したか失敗したかを示します。</summary>
        <returns>
          <see langword="true" /> が正常に変換された場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.UInt64.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.UInt64%40%29>などのメソッドは、<xref:System.UInt64.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29>メソッド、点を除いて、変換が失敗した場合に、it が例外をスローしません。 このメソッドをテストする例外処理を使用する必要がある、<xref:System.FormatException>場合`s`無効なため、正常に解析されたことはできません。  
  
 `style`パラメーター スタイル要素を定義します \(空白や正または負符号\) では許可されて、`s`解析操作が成功するためのパラメーターです。 ビット フラグの組み合わせを可能にする必要があります、<xref:System.Globalization.NumberStyles>列挙します。 値に応じて`style`、`s`パラメーターは、次の要素を含めることがあります。  
  
 \[*ws*\]\[*$*\]\[*sign*\]\[*digits*,\]*digits*\[.*fractional\_digits*\] \[E \[*記号*\]*exponential\_digits*\] \[*ws*\]  
  
 角かっこ \(\[および\]\) は省略可能の項目です。 またはの場合、`style`パラメーターが含まれています<xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=fullName>、`s`パラメーターは、次の要素を含めることがあります。  
  
 \[*ws*\]*hexdigits*\[*ws*\]  
  
 次の表では、各要素について説明します。  
  
|要素|説明|  
|--------|--------|  
|*ws*|省略可能なホワイト スペースです。 先頭の空白文字が表示できる`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=fullName>フラグ、またはの末尾`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=fullName>フラグ。|  
|*$*|カルチャ固有の通貨記号。 文字列内での位置がによって定義された、<xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A>のプロパティ、<xref:System.Globalization.NumberFormatInfo>によって返されるオブジェクト、<xref:System.IFormatProvider.GetFormat%2A>のメソッド、`provider`パラメーター。 通貨記号に表示される`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=fullName>フラグ。|  
|*sign*|省略可能な符号の場合。 先頭の符号が表示できる`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=fullName>の最後に表示されることができますフラグ、およびその`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=fullName>フラグ。 かっこを使用できる`s`負の値を指定する場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=fullName>フラグ。 ただし、負の符号が存在する場合、`s`解析操作が成功するためのゼロの値を表すことができますのみです。|  
|*数字*|0 ~ 9 桁の数字のシーケンス。|  
|*,*|カルチャ固有のグループの区切り記号。 指定されたカルチャの桁区切り記号`provider`に表示できる`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=fullName>フラグ。|  
|*」を参照してください。*|カルチャに固有の小数点記号です。 指定されたカルチャの小数点記号`provider`に表示できる`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=fullName>フラグ。|  
|*fractional\_digits*|数字の 0 の 1 つ以上の出現します。 小数部の桁が表示できる`s`場合にのみ、`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=fullName>フラグ。|  
|E|"E"または"E"文字は、値を指数表記で表されていることを示します。`s`場合、パラメーターは指数表記の数値を表すことができる`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=fullName>フラグ。|  
|*exponential\_digits*|0 ~ 9 桁の数字のシーケンス。`s`場合、パラメーターは指数表記の数値を表すことができる`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=fullName>フラグ。|  
|*hexdigits*|0 f からまたは f 0 から 16 進数のシーケンス|  
  
 10 進数字のみを含む文字列 \(に対応する、<xref:System.Globalization.NumberStyles.None?displayProperty=fullName>フラグ\) が正常に解析します。 ほとんど残りの<xref:System.Globalization.NumberStyles>メンバーが存在する可能性がありますが、この入力文字列内に存在する必要はありません要素を制御します。 次の表に示す個別<xref:System.Globalization.NumberStyles>メンバー内に存在可能な要素に影響を与える`s`です。  
  
|非複合`NumberStyles`値|数字以外の値で使用できる要素|  
|------------------------|--------------------|  
|<xref:System.Globalization.NumberStyles.None>|10 進数字のみです。|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|小数点 \(*.*\) および*fractional\_digits*要素。 ただし、 *fractional\_digits*のみ 1 つ以上の数字 0、またはメソッドを返しますので構成されている必要があります`false`です。|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|"E"または"E"文字は、と共に、指数表記法を示す*exponential\_digits*です。 場合`s`の数値を表す、0 以外の小数部のコンポーネント、指数表記で持つことができません。|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|*Ws*の先頭の要素`s`です。|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|*Ws*の末尾に要素`s`です。|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|*記号*の前に要素*桁*です。|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|*記号*要素の後に*桁*です。|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|*記号*ゼロの数値を囲むかっこの形式での要素。|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|桁区切り記号 \(*、*\) 要素です。|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|通貨 \(*$*\) 要素です。|  
|<xref:System.Globalization.NumberStyles.Currency>|すべての要素。 ただし、 `s` 16 進数または指数表記の数値を表すことはできません。|  
|<xref:System.Globalization.NumberStyles.Float>|*Ws*開始または終了の位置にある要素`s`、*記号*先頭の`s`、および小数点 \(*.*\) シンボル。`s`パラメーターは、指数表記も使用できます。|  
|<xref:System.Globalization.NumberStyles.Number>|*Ws*、*記号*、桁区切り記号 \(*、*\)、および小数点 \(*.*\) 要素です。|  
|<xref:System.Globalization.NumberStyles.Any>|すべての要素。 ただし、 `s` 16 進数を表すことはできません。|  
  
 場合、<xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=fullName>フラグを使用すると、 `s` 16 進値でなければなりません。 有効な 16 進数の文字は 0 ~ 9、A ~ F、a ~ f です。 "0 x"などプレフィックスはサポートされていませんし、解析操作が失敗します。 その他のフラグのみで使用可能な`style`は<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=fullName>と<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=fullName>です。 \(、<xref:System.Globalization.NumberStyles>列挙体には、複合スタイル<xref:System.Globalization.NumberStyles.HexNumber>、両方の空白のフラグが含まれている\)。  
  
> [!NOTE]
>  場合`s`文字列表現は、16 進数は、そのことはできません前に、装飾 \(など`0x`または`&h`\) の 16 進数として区別します。 これにより、変換に失敗します。  
  
 `provider`パラメーターは、<xref:System.IFormatProvider>実装します。 その<xref:System.IFormatProvider.GetFormat%2A>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>の書式に関するカルチャ固有の情報を提供するオブジェクト`s`です。`provider`パラメーターは、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>の書式情報を提供するカルチャを表すオブジェクト。 その<xref:System.Globalization.CultureInfo.GetFormat%2A>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>そのカルチャの数値の書式設定情報を提供するオブジェクト。  
  
-   A<xref:System.Globalization.NumberFormatInfo>数値書式設定情報を提供するオブジェクト。 \(その実装の<xref:System.Globalization.NumberFormatInfo.GetFormat%2A>自体を返すだけです\)。  
  
-   実装するカスタム オブジェクト<xref:System.IFormatProvider>です。 その<xref:System.IFormatProvider.GetFormat%2A>メソッドがインスタンス化し、返します、<xref:System.Globalization.NumberFormatInfo>書式情報を提供するオブジェクト。  
  
 場合`provider`は`null`、<xref:System.Globalization.NumberFormatInfo>オブジェクトの現在のカルチャが使用されます。  
  
   
  
## 例  
 次の例では、<xref:System.UInt64.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.UInt64%40%29>さまざまな文字列の数を持つメソッドと<xref:System.Globalization.NumberStyles>値。  
  
 [!code-csharp[System.UInt64.TryParse\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.uint64.tryparse/cs/tryparse2.cs#2)]
 [!code-vb[System.UInt64.TryParse\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.uint64.tryparse/vb/tryparse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。  
  
 \-または\-  
  
 <paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値と <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 値の組み合わせではありません。</exception>
        <altCompliant cref="M:System.Decimal.Parse(System.String)" />
        <altmember cref="M:System.UInt64.Parse(System.String)" />
        <altmember cref="Overload:System.UInt64.Parse" />
        <altmember cref="Overload:System.UInt64.ToString" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したオブジェクトまたは <see cref="T:System.UInt64" /> とこのインスタンスを比較し、これらの相対値を示す値を返します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このインスタンスの数値を、それと等価な文字列形式に変換します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>対象のインスタンスが、指定したオブジェクトまたは <see cref="T:System.UInt64" /> に等しいかどうかを示す値を返します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>数値の文字列形式を、それと等価の 64 ビット符号なし整数に変換します。 戻り値は、変換が成功したか失敗したかを示します。</summary>
        <altmember cref="Overload:System.UInt64.Parse" />
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>数値の文字列形式を、それと等価な 64 ビット符号なし整数に変換します。</summary>
        <altmember cref="Overload:System.UInt64.TryParse" />
      </Docs>
    </MemberGroup>
  </Members>
</Type>