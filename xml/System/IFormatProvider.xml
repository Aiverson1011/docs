<Type Name="IFormatProvider" FullName="System.IFormatProvider">
  <TypeSignature Language="C#" Value="public interface IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.IFormatProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>書式設定を制御するオブジェクトを取得するためのメカニズムを定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IFormatProvider> インターフェイスは、書式設定および解析操作の書式設定情報を提供するオブジェクトを指定します。 書式設定操作は、型の値をその値の文字列形式に変換します。 一般的な書式指定メソッドは、 `ToString` 、型のメソッドだけでなく <xref:System.String.Format%2A>です。 解析操作では、その値を持つ型に、値の文字列形式を変換します。 標準的な解析メソッドは、 `Parse` と `TryParse`です。  
  
 <xref:System.IFormatProvider> インターフェイスにメソッドを 1 つは <xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName>です。<xref:System.IFormatProvider.GetFormat%2A> コールバック メソッドは、: 文字列の解析または書式指定メソッドは呼び出しを渡します、 <xref:System.Type> 、書式設定またはメソッドの解析が要求するオブジェクトの型を表すオブジェクトには、書式設定情報を指定します。<xref:System.IFormatProvider.GetFormat%2A> メソッドは、その型のオブジェクトを返すために行います。  
  
 <xref:System.IFormatProvider> 実装は、書式設定および解析メソッドで暗黙的に使用されます。 たとえば、 <xref:System.DateTime.ToString%28System.String%29?displayProperty=fullName> メソッドを使用して暗黙的に、 <xref:System.IFormatProvider> システムの現在のカルチャを表す実装します。<xref:System.IFormatProvider> 実装も明示的に指定できますを型のパラメーターを持つメソッドによって <xref:System.IFormatProvider>, など <xref:System.Int32.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> と <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName>です。  
  
 .NET Framework には、定義済みの次の 3 つが含まれています。 <xref:System.IFormatProvider> の実装を書式設定操作または解析数値と日付と時刻の値で使用されるカルチャ固有の情報を提供します。  
  
-   <xref:System.Globalization.NumberFormatInfo> 通貨、数千などの数値の書式設定に使用される情報を提供するクラスは、区切り記号、および特定のカルチャの 10 進数の区切り記号。 によって認識される定義済み書式指定文字列について、 <xref:System.Globalization.NumberFormatInfo> オブジェクトおよび数値の書式設定操作で使用されるを参照してください [Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467) と [Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4)です。  
  
-   <xref:System.Globalization.DateTimeFormatInfo> クラスで、日付と時刻、特定のカルチャまたは順序と日付の年、月、日のコンポーネントの形式の日付と時刻の区切り記号などの書式に使用される情報を提供します。 によって認識される定義済み書式指定文字列について、 <xref:System.Globalization.DateTimeFormatInfo> オブジェクトおよび数値の書式設定操作で使用されるを参照してください [Standard Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/bb79761a-ca08-44ee-b142-b06b3e2fc22b) と [Custom Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/98b374e3-0cc2-4c78-ab44-efb671d71984)です。  
  
-   <xref:System.Globalization.CultureInfo> を特定のカルチャを表すクラス。 その <xref:System.IFormatProvider.GetFormat%2A> メソッドが戻るカルチャに固有 <xref:System.Globalization.NumberFormatInfo> または <xref:System.Globalization.DateTimeFormatInfo> かどうかによって、オブジェクト、 <xref:System.Globalization.CultureInfo> オブジェクトは、書式設定操作または解析操作では、数値または日付と時刻を使用します。  
  
 .NET Framework では、カスタム書式設定もサポートしています。 通常の両方を実装している書式指定クラスを作成、 <xref:System.IFormatProvider> と <xref:System.ICustomFormatter>です。 など、カスタムの書式設定操作を実行するメソッドにパラメーターとしてこのクラスのインスタンスが、渡される <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> の例は、12 桁のアカウント番号として数値の書式をこのようなカスタム実装を示しています。  
  
   
  
## 例  
 次の例に示す方法、 <xref:System.IFormatProvider> 実装は、日付と時刻の値の形式を変更できます。 使用して 1 つの日付を表示する場合は、 <xref:System.Globalization.CultureInfo> を 4 つの異なるカルチャを表すオブジェクト。  
  
 [!code-csharp[System.IFormatProvider.Class\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/provider2.cs#3)]
 [!code-vb[System.IFormatProvider.Class\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/provider2.vb#3)]  
  
 次の例を実装するクラスの使用、 <xref:System.IFormatProvider> インターフェイスおよび <xref:System.IFormatProvider.GetFormat%2A> メソッドです。`AcctNumberFormat` クラスの変換、 <xref:System.Int64> 12 桁の書式設定されたアカウント番号のアカウント番号を表す値。 その `GetFormat` メソッドは、現在の参照を返します `AcctNumberFormat` インスタンスの場合、 `formatType` パラメーターを実装するクラスを指します <xref:System.ICustomFormatter>。 そうしないと、 `GetFormat` を返します `null`します。  
  
 [!code-csharp[System.IFormatProvider.Class\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#2)]
 [!code-vb[System.IFormatProvider.Class\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#2)]  
  
 実装するクラス <xref:System.IFormatProvider> への呼び出し、書式設定して、解析操作で、使用できます。 たとえば、次のコードの呼び出し、 <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> 12 桁の書式設定されたアカウント番号を含む文字列を生成します。  
  
 [!code-csharp[System.IFormatProvider.Class\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#1)]
 [!code-vb[System.IFormatProvider.Class\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ICustomFormatter" />
    <altmember cref="T:System.IFormattable" />
  </Docs>
  <Members>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFormatProvider.GetFormat(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">返されるオブジェクトの書式設定の種類を指定するオブジェクト。</param>
        <summary>指定した型の書式指定サービスを提供するオブジェクトを返します。</summary>
        <returns>指定されたオブジェクトのインスタンス<paramref name="formatType" />場合は、<see cref="T:System.IFormatProvider" />実装は、そのオブジェクトの種類を指定できます。 それ以外の場合、<see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IFormatProvider.GetFormat%2A>書式設定および解析メソッドを呼び出す解析操作または書式設定操作で、出力文字列の形式で入力文字列の書式設定に関する情報を取得するコールバック メソッドです。`formatType`パラメーターで、書式設定または解析メソッドはその操作の実行に必要なオブジェクトの型を渡します。 場合、<xref:System.IFormatProvider>実装を指定できますこの書式設定またはオブジェクトを解析するには、そのオブジェクトを返します。 Not、返された場合`null`です。  
  
 呼び出しでなど、<xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=fullName>メソッド、メソッドの引数は、<xref:System.IFormatProvider>整数の現在のインスタンスの文字列形式や書式の設定方法に関する情報を提供するオブジェクト。 呼び出し、ランタイムは、メソッドを実行するとき、<xref:System.IFormatProvider>オブジェクトの<xref:System.IFormatProvider.GetFormat%2A>メソッド渡します、<xref:System.Type>オブジェクトを表す、<xref:System.Globalization.NumberFormatInfo>型です。 場合、<xref:System.IFormatProvider>オブジェクトを指定できます、<xref:System.Globalization.NumberFormatInfo>オブジェクト、そのオブジェクトが返されます。 返すかどうかは、その型のオブジェクトを提供できない、`null`です。  
  
 実装することができます、<xref:System.IFormatProvider>インターフェイスおよび<xref:System.IFormatProvider.GetFormat%2A>カスタムの書式設定操作またはサービスの解析を提供するクラスのメソッドです。<xref:System.IFormatProvider>実装は、引数として、解析または書式指定される型のパラメーターを持つメソッドのオーバー ロードを<xref:System.IFormatProvider>など<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName>、 <xref:System.Int32.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName>、または<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName>です。  
  
   
  
## 例  
 次の例を実装するクラスの使用、<xref:System.IFormatProvider>インターフェイスおよび<xref:System.IFormatProvider.GetFormat%2A>メソッドです。`AcctNumberFormat`クラスの変換、 <xref:System.Int64> 12 桁の数字の書式設定されたアカウント数のアカウント番号を表す値です。 その`GetFormat`場合、メソッドはそれ自体への参照を返します、`formatType`パラメーターを実装するクラスを指します<xref:System.ICustomFormatter>、それ以外の`GetFormat`返します`null`です。  
  
 [!code-csharp[System.IFormatProvider.Class\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#2)]
 [!code-vb[System.IFormatProvider.Class\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#2)]  
  
 インスタンス、`AcctNumberFormat`を書式設定操作または解析サービスを提供するメソッドをクラスが引数として渡されるしことができます。 たとえば、次のコード パス、`AcctNumberFormat`クラスを<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName>12 桁の数字の書式設定されたアカウント番号を生成する方法です。  
  
 [!code-csharp[System.IFormatProvider.Class\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#1)]
 [!code-vb[System.IFormatProvider.Class\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>