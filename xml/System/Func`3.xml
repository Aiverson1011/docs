<Type Name="Func&lt;T1,T2,TResult&gt;" FullName="System.Func&lt;T1,T2,TResult&gt;">
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T1,in T2,out TResult&gt;(T1 arg1, T2 arg2);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`3&lt;- T1, - T2, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`3" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1">このデリゲートによってカプセル化されるメソッドの最初のパラメーターの型。</typeparam>
    <typeparam name="T2">このデリゲートによってカプセル化されるメソッドの 2 番目のパラメーターの型。</typeparam>
    <typeparam name="TResult">このデリゲートによってカプセル化されるメソッドの戻り値の型。</typeparam>
    <param name="arg1">このデリゲートによってカプセル化されるメソッドの最初のパラメーター。</param>
    <param name="arg2">このデリゲートによってカプセル化されるメソッドの 2 番目のパラメーター。</param>
    <summary>2 個のパラメーターを持ち、<paramref name="TResult" /> パラメーターで指定された型の値を返すメソッドをカプセル化します。</summary>
    <returns>このデリゲートによってカプセル化されるメソッドの戻り値。</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 このデリゲートを使用して、カスタム デリゲートを明示的に宣言することがなく、パラメーターとして渡すことができるメソッドを表すことができます。 カプセル化されたメソッドは、このデリゲートによって定義されるメソッド シグネチャに一致している必要があります。 これは、カプセル化されるメソッドはそれぞれに値渡し、2 つのパラメーターである必要があり、値を返す必要があることを意味します。  
  
> [!NOTE]
>  2 つのパラメーターを返すメソッドを参照する `void` \(として宣言されている Visual basic、または、 `Sub` ではなくとして、 `Function`\)、ジェネリックを使用して <xref:System.Action%602> 代わりに委任します。  
  
 使用すると、 <xref:System.Func%603> デリゲートの 2 つのパラメーターを持つメソッドをカプセル化するデリゲートを明示的に定義する必要はありません。 たとえば、次のコードを明示的に宣言という名前のデリゲート `ExtractMethod` への参照を割り当てると、 `ExtractWords` メソッドのデリゲートのインスタンスにします。  
  
 [!code-csharp[System.Func~3\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Delegate.cs#1)]
 [!code-vb[System.Func~3\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/Delegate.vb#1)]  
  
 次の例は、インスタンス化してこのコードを簡略化、 <xref:System.Func%603> 明示的に新しいデリゲートを定義して、名前付きメソッドをそこに割り当てる代わりにデリゲートします。  
  
 [!code-csharp[System.Func~3\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Func3.cs#2)]
 [!code-vb[System.Func~3\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/Func3.vb#2)]  
  
 使用することができます、 <xref:System.Func%603> 次の例に示すように、C\# の場合は、匿名メソッドを持つデリゲートします。 \(匿名メソッドの概要については、次を参照してください [Anonymous Methods \(C\# Programming Guide\)](http://msdn.microsoft.com/ja-jp/a62441fa-f0a3-4acb-9aa6-93762a635275)。\)。  
  
 [!code-csharp[System.Func~3\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Anon.cs#3)]  
  
 ラムダ式を割り当てることができます、 <xref:System.Func%603> 次の例に示すように委任します。 \(ラムダ式の概要については、次を参照してください [Lambda Expressions](http://msdn.microsoft.com/ja-jp/137064b0-3928-4bfa-ba71-c3f9cbd951e2) と [Lambda Expressions \(C\# Programming Guide\)](http://msdn.microsoft.com/ja-jp/57e3ba27-9a82-4067-aca7-5ca446b7bf93)。\)。  
  
 [!code-csharp[System.Func~3\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Lambda.cs#4)]
 [!code-vb[System.Func~3\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/lambda.vb#4)]  
  
 ラムダ式の基になる型は、ジェネリックの 1 つ `Func` デリゲート。 これによって、デリゲートを明示的に割り当てることがなく、ラムダ式をパラメーターとして渡します。 具体的には、ための型の多くのメソッド、 <xref:System.Linq> 名前空間が <xref:System.Func%603> パラメーターを渡すことができますこれらのメソッド、ラムダ式に明示的にインスタンス化しなくても、 <xref:System.Func%603> を委任します。  
  
   
  
## 例  
 次の例では、宣言および使用する方法、 <xref:System.Func%603> を委任します。 この例で宣言、 <xref:System.Func%603> 変数を受け取るラムダ式を割り当てると、 <xref:System.String> 値と <xref:System.Int32> パラメーターとして値。 ラムダ式から返される `true` 場合の長さ、 <xref:System.String> パラメーターがの値に等しい、 <xref:System.Int32> パラメーター。 このメソッドをカプセル化するデリゲートは、クエリ文字列の配列内のフィルター文字列を後で使用されます。  
  
 [!code-csharp[System.Func~3\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Example.cs#5)]
 [!code-vb[System.Func~3\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>