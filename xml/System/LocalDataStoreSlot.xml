<Type Name="LocalDataStoreSlot" FullName="System.LocalDataStoreSlot">
  <TypeSignature Language="C#" Value="public sealed class LocalDataStoreSlot" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LocalDataStoreSlot extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.LocalDataStoreSlot" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>ローカル データを格納するメモリ スロットをカプセル化します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 .NET Framework には、スレッド ローカル ストレージ \(TLS\) を使用するための 2 つのメカニズムが用意されています: スレッド相対静的フィールド、およびデータ スロット。  
  
-   スレッド相対静的フィールドは `static` フィールド \(`Shared` Visual Basic でのフィールド\) でマークされる、 <xref:System.ThreadStaticAttribute> 属性です。 データ スロットよりも優れたパフォーマンスを利用できます。 またコンパイル時の型チェックを有効にします。  
  
-   データ スロットは、時間がかかり、スレッド相対静的フィールドよりも使いにくくします。 また、データが型として格納された <xref:System.Object>, ので、使用する前に、正しい型にキャストする必要があります。 ただし、静的フィールドを割り当てるには、コンパイル時の十分な情報がある場合は、データ スロットを使用できます。  
  
 詳細については、TLS を使用して、次を参照してください。 [Thread Local Storage: Thread\-Relative Static Fields and Data Slots](http://msdn.microsoft.com/ja-jp/c633a4dc-a790-4ed1-96b5-f72bd968b284)します。  
  
 同様に、.NET Framework は、コンテキストのローカル ストレージを使用するための 2 つのメカニズムを提供します。 コンテキスト相対静的フィールドとデータ スロット。 コンテキスト相対静的フィールドは静的フィールドでマークされている、 <xref:System.ContextStaticAttribute> 属性です。 これら 2 つのメカニズムを使用するうえでのトレードオフは、スレッド相対静的フィールドとデータ スロット間のトレードオフに似ています。  
  
 <xref:System.LocalDataStoreSlot> 構造として、ローカルがスレッドのメモリのメカニズムを格納し、コンテキストを使用してそれぞれのスレッドおよびコンテキストに固有のデータを格納できます。 共通言語ランタイムは、作成時に、各プロセスにマルチ スロットのデータ ストア配列を割り当てます。 スレッドまたはコンテキストの呼び出しをスレッドまたはコンテキスト オブジェクトの期限が切れると、さまざまな関数と、データ ストア内のデータ スロットを割り当てることを格納およびスロットにデータ値を取得、データ スロットの空きが再利用します。  
  
 データ スロットはスレッドまたはコンテキストごとに一意その値は、スレッドまたはコンテキストのオブジェクト間で共有されません。 インデックス番号または名前で、データ スロットを割り当てることができます。  
  
 ローカル データを格納する方法の詳細については、次を参照してください。 <xref:System.Threading.Thread> または <xref:System.Runtime.Remoting.Contexts.Context>です。<xref:System.LocalDataStoreSlot> クラスがなどのメソッドと組み合わせて、 <xref:System.Threading.Thread.AllocateNamedDataSlot%2A?displayProperty=fullName>, 、<xref:System.Runtime.Remoting.Contexts.Context.AllocateNamedDataSlot%2A?displayProperty=fullName>, 、<xref:System.Threading.Thread.GetData%2A?displayProperty=fullName>, 、および <xref:System.Runtime.Remoting.Contexts.Context.GetData%2A?displayProperty=fullName>; いずれかの必要はありませんを独自のメソッドを使用する必要があります。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="T:System.Runtime.Remoting.Contexts.Context" />
  </Docs>
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~LocalDataStoreSlot ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.LocalDataStoreSlot.Finalize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ガベージ コレクターが <see cref="T:System.LocalDataStoreSlot" /> を再利用しているときに、リソースが解放され、他のクリーンアップ操作が確実に実行されるようにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ガベージ コレクター <xref:System.LocalDataStoreSlot.Finalize%2A> と現在のオブジェクトが完了する準備ができています。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
  </Members>
</Type>