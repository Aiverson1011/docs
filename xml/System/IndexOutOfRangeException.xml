<Type Name="IndexOutOfRangeException" FullName="System.IndexOutOfRangeException">
  <TypeSignature Language="C#" Value="public sealed class IndexOutOfRangeException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit IndexOutOfRangeException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.IndexOutOfRangeException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>境界外のインデックスを使用して配列またはコレクションの要素にアクセスしようとしたときにスローされる例外。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IndexOutOfRangeException> 、配列またはコレクションのメンバーにアクセスするか、バッファー内の特定の場所から読み取りまたは書き込みを無効なインデックスを使用しているときに例外がスローされます。 この例外の継承、 <xref:System.Exception> クラスがない一意のメンバーを追加ができます。  
  
 通常、 <xref:System.IndexOutOfRangeException> 開発者のエラーの結果として例外がスローされます。 例外を処理する代わりに、エラーの原因を診断し、コードを修正ください。 エラーの最も一般的な原因は次のとおりです。  
  
-   0 から始まる配列またはコレクションの上限値が 1 つを忘れてしまった数よりも少ない、メンバーまたは要素を次の例として示します。  
  
     [!code-csharp[System.IndexOutOfRangeException\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/length1.cs#3)]
     [!code-vb[System.IndexOutOfRangeException\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/length1.vb#3)]  
  
     エラーを解決するには、次のようにコードを使用できます。  
  
     [!code-csharp[System.IndexOutOfRangeException\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/length2.cs#4)]
     [!code-vb[System.IndexOutOfRangeException\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/length2.vb#4)]  
  
     代わりに、代わりに、インデックスでは、配列内のすべての要素を反復処理するを使用する、\(C\# の場合\) または \(Visual Basic で\)。  
  
-   適切に次元されていないと、元の配列よりも少ない要素を持つ別の配列に配列の要素を割り当てようとしました。 次の例は、最後の要素を代入しようとしています、 `value1` 配列内の同じ要素を `value2` 配列。 ただし、 `value2` 配列がされて正しく多次元化されていない 7 つの要素ではなく 6 個にします。 割り当ての結果としてスロー、 <xref:System.IndexOutOfRangeException> 例外です。  
  
     [!code-csharp[System.IndexOutOfRangeException\#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/Uninit1.cs#10)]
     [!code-vb[System.IndexOutOfRangeException\#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/Uninit1.vb#10)]  
  
-   値を使用して、配列またはコレクションの特定のインデックス位置からの一部を反復処理するメソッドを検索によって返されます。 ランタイムは、スロー検索操作に一致するものが見つかったかどうかを確認するを忘れた場合、 <xref:System.IndexOutOfRangeException> 例外、この例で示すようにします。  
  
     [!code-csharp[System.IndexOutOfRangeException\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/negative1.cs#5)]
     [!code-vb[System.IndexOutOfRangeException\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/negative1.vb#5)]  
  
     ここで、 <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=fullName> メソッドは、検索に失敗した場合、無効なインデックス値は、\-1 を返します。 このエラーを解決するには、この例で示すように、配列を反復処理する前に検索メソッドの戻り値を確認します。  
  
     [!code-csharp[System.IndexOutOfRangeException\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/negative2.cs#6)]
     [!code-vb[System.IndexOutOfRangeException\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/negative2.vb#6)]  
  
-   使用したり、結果セット、コレクション、または、返されたオブジェクトに有効なデータがあるかどうかをテストせず、クエリによって返される配列を列挙したりしようとしています。  
  
-   計算値を使用して、開始インデックス、終了インデックスまたは反復処理する項目の数を定義します。 計算の結果が予想される場合は、ことになります、 <xref:System.IndexOutOfRangeException> 例外です。 インデックス値を計算する際に、プログラムのロジックを調べて、配列またはコレクションを反復処理する前に値を検証してください。 次の条件すべてを満たさなければなりません。それ以外の場合、 <xref:System.IndexOutOfRangeException> 例外がスローされます。  
  
    -   開始インデックスが以上にする必要があります <xref:System.Array.GetLowerBound%2A?displayProperty=fullName> の次元の配列を反復処理するか、コレクションの場合は 0 以上です。  
  
    -   終了インデックスを超えることはできません <xref:System.Array.GetUpperBound%2A?displayProperty=fullName> の次元の配列を反復処理する、またはことはできませんよりも大きい値を指定する、 `Count` コレクションのプロパティです。  
  
    -   次の式は、反復処理する配列の次元の場合は true である必要があります。  
  
        ```  
        start_index >= lower_bound And start_index + items_to_iterate – 1 <= upper_bound  
        ```  
  
         コレクションの場合は、次の式が true 必要があります。  
  
        ```  
        start_index >= 0 And start_index + items_to_iterate <= Count  
        ```  
  
        > [!TIP]
        >  配列またはコレクションの開始インデックスでは、負の数値をすることはできません。  
  
-   0 から始まる配列である必要があると仮定します。 0 から始まるれない配列を作成する、 <xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=fullName> メソッドおよびそれらに CLS に準拠していないが、COM 相互運用機能によって返されることができます。 次の例を示しています、 <xref:System.IndexOutOfRangeException> によって作成された非ゼロ ベースの配列を反復処理しようとするときにスローされる、 <xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=fullName> メソッドです。  
  
     [!code-csharp[System.IndexOutOfRangeException\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/nonzero1.cs#1)]
     [!code-vb[System.IndexOutOfRangeException\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/nonzero1.vb#1)]  
  
     次の例のように、エラーを修正するを呼び出すことができます、 <xref:System.Array.GetLowerBound%2A> メソッドの配列の開始インデックスについて推測する代わりにします。  
  
     [!code-csharp[System.IndexOutOfRangeException\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/nonzero2.cs#2)]
     [!code-vb[System.IndexOutOfRangeException\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/nonzero2.vb#2)]  
  
     呼び出したときに注意してください、 <xref:System.Array.GetLowerBound%2A> 、配列の開始インデックスを取得するメソッドも呼び出す必要があります、 <xref:System.Array.GetUpperBound%28System.Int32%29?displayProperty=fullName> 終了インデックスを取得します。  
  
-   インデックスおよび数値の配列またはコレクション内のインデックス位置にある値を区別できません。 使用する場合に通常この問題が発生した、 `foreach` ステートメント \(c\#\) または `For Each` ステートメント \(Visual Basic の場合\)。 この問題を説明する例を次に示します。  
  
     [!code-csharp[System.IndexOutOfRangeException\#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/foreach1.cs#7)]
     [!code-vb[System.IndexOutOfRangeException\#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/foreach1.vb#7)]  
  
     イテレーションの構成要素には、配列またはコレクションは、インデックスなしの各値を返します。 例外を回避するのには、このコードを使用します。  
  
     [!code-csharp[System.IndexOutOfRangeException\#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/foreach2.cs#8)]
     [!code-vb[System.IndexOutOfRangeException\#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/foreach2.vb#8)]  
  
-   無効な列名を指定する、 <xref:System.Data.DataView.Sort%2A?displayProperty=fullName> プロパティです。  
  
-   スレッド セーフに違反しています。 同じからの読み取りなどの操作 <xref:System.IO.StreamReader> オブジェクト、同じへの書き込み <xref:System.IO.StreamWriter> または内のオブジェクトを列挙するオブジェクトの複数のスレッドから、 <xref:System.Collections.Hashtable> 異なるスレッドからスロー、 <xref:System.IndexOutOfRangeException> オブジェクトはスレッド セーフな方法でアクセスされていない場合。 競合状態に依存しているために、この例外は通常断続的に発生します。  
  
 インデックスをハード コーディングされた値を使用して配列を操作するは、インデックス値が正しくないか、無効な場合、または操作されている配列のサイズは予期しない例外をスローする可能性があります。 スローすることから、操作を防ぐために、  <xref:System.IndexOutOfRangeException> 例外では、次を行うことができます。  
  
-   使用して配列の要素を反復処理する、 [foreach](https://msdn.microsoft.com/library/ttw7t8t6.aspx) ステートメント \(c\#\) または [For Each...Next](https://msdn.microsoft.com/library/5ebk1751.aspx) インデックスで要素を反復処理ではなく \(Visual Basic\) で構築します。  
  
-   によって返されるインデックスから始まるインデックスで要素を反復処理する、 <xref:System.Array.GetLowerBound%2A?displayProperty=fullName> メソッドおよびによって返されるインデックスで終了するまで、 <xref:System.Array.GetUpperBound%2A?displayProperty=fullName> メソッドです。  
  
-   別の 1 つの配列内の要素を割り当てる場合はいることを確認対象となる配列要素の数は、少なくともソース配列と比較することによって、 <xref:System.Array.Length%2A?displayProperty=fullName> プロパティです。  
  
 インスタンスの初期プロパティ値の一覧については <xref:System.IndexOutOfRangeException>, を参照してください、 <xref:System.IndexOutOfRangeException> コンス トラクターです。  
  
 中間言語 \(IL\) の次の手順をスロー <xref:System.IndexOutOfRangeException>:  
  
-   ldelem。 \< 型 \>  
  
-   ldelema  
  
-   stelem。 \< 型 \>  
  
 <xref:System.IndexOutOfRangeException> 値は 0x80131508 HRESULT COR\_E\_INDEXOUTOFRANGE を使用します。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexOutOfRangeException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IndexOutOfRangeException.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.IndexOutOfRangeException" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクター、 <xref:System.Exception.Message%2A> 「配列のインデックスが範囲外です」などに、エラーを説明するシステム提供のメッセージの新しいインスタンスのプロパティ。 このメッセージには、現在のシステムのカルチャが考慮されます。  
  
 <xref:System.IndexOutOfRangeException> のインスタンスの初期プロパティ値を次の表に示します。  
  
|プロパティ|値|  
|-----------|-------|  
|<xref:System.Exception.InnerException%2A>|null 参照 \(Visual Basic の場合は `Nothing`\)。|  
|<xref:System.Exception.Message%2A>|ローカライズされたエラー メッセージ文字列。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexOutOfRangeException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IndexOutOfRangeException.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">エラーを説明するメッセージ。</param>
        <summary>指定したエラー メッセージを使用して、<see cref="T:System.IndexOutOfRangeException" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクター、<xref:System.Exception.Message%2A?displayProperty=fullName>を使用して新しい例外のプロパティ、`message`パラメーター。`message` の内容は、ユーザーが理解できる内容にします。 このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。  
  
 <xref:System.IndexOutOfRangeException> のインスタンスの初期プロパティ値を次の表に示します。  
  
|プロパティ|値|  
|-----------|-------|  
|<xref:System.Exception.InnerException%2A>|null 参照 \(Visual Basic の場合は `Nothing`\)。|  
|<xref:System.Exception.Message%2A>|エラー メッセージ文字列。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexOutOfRangeException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">例外の原因を説明するエラー メッセージ。</param>
        <param name="innerException">現在の例外の原因となった例外。<c>innerException</c> パラメーターが null 参照 \(Visual Basic の場合は <see langword="Nothing" />\) でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
        <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.IndexOutOfRangeException" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 前の例外の直接の結果としてスローされる例外については、<xref:System.Exception.InnerException%2A> プロパティに、前の例外への参照が格納されます。`InnerException` プロパティは、コンストラクターに渡されたものと同じ値を返します。`Nothing` プロパティによって内部例外値がコンストラクターに渡されなかった場合は、null 参照 \(Visual Basic の場合は `InnerException`\) を返します。  
  
 <xref:System.IndexOutOfRangeException> のインスタンスの初期プロパティ値を次の表に示します。  
  
|プロパティ|値|  
|-----------|-------|  
|<xref:System.Exception.InnerException%2A>|内部例外の参照。|  
|<xref:System.Exception.Message%2A>|エラー メッセージ文字列。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.IndexOutOfRangeException" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>