<Type Name="Console" FullName="System.Console">
  <TypeSignature Language="C#" Value="public static class Console" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed Console extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Console" />
  <AssemblyInfo>
    <AssemblyName>System.Console</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>コンソール アプリケーションの標準入力ストリーム、標準出力ストリーム、および標準エラー ストリームを表します。 このクラスは継承できません。  
  
 この型の .NET Framework ソース コードを参照するを参照してください。、 [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/console.cs#f907d79481da6ba4)です。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  この型の .NET Framework ソース コードを表示するを参照してください。、 [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/console.cs#f907d79481da6ba4)です。 ソース コードをオンラインで参照、オフラインで表示、リファレンスをダウンロードおよび; デバッグ中にソース \(パッチや更新を含む\) をステップsee [instructions](http://referencesource.microsoft.com/).  
  
 コンソールは、インターフェイスを提供する、テキスト ベースのコンソール アプリケーションやオペレーティング システムで、コンピューターのキーボードから入力されたテキストを入力して、コンピューターの端末からのテキストの出力を読み取ることで、オペレーティング システムのウィンドウです。 たとえば、Windows オペレーティング システムで、コンソール、コマンド プロンプト ウィンドウと呼びます MS\-DOS のコマンドを受け付けます。<xref:System.Console>クラスから文字を読み取るし、コンソールに文字を書き込むアプリケーションの基本的なサポートを提供します。  
  
 開発については、<xref:System.Console>クラスの次のセクションを参照してください。  
  
-   [コンソール I\/O ストリーム](#Streams)  
  
-   [画面バッファーのサイズとコンソール ウィンドウ](#Buffer)  
  
-   [コンソールの Unicode のサポート](#Unicode)  
  
-   [一般的な操作](#Operations)  
  
-   [.NET core の注意事項](#Core)  
  
<a name="Streams"></a>   
## コンソール I\/O ストリーム  
 コンソール アプリケーションの起動時、オペレーティング システムに自動的に関連付けます 3 つの I\/O ストリーム コンソール: 標準入力ストリーム、標準出力ストリームと標準エラー出力ストリーム。 アプリケーションがユーザー入力を標準入力ストリームから読み取ることができます。通常のデータの標準出力ストリームに書き込むです。エラー データを標準エラー出力ストリームに書き込みます。 これらのストリームがの値として、アプリケーションに提示、 <xref:System.Console.In%2A?displayProperty=fullName>、 <xref:System.Console.Out%2A?displayProperty=fullName>、および<xref:System.Console.Error%2A?displayProperty=fullName>プロパティです。  
  
 既定では、値、<xref:System.Console.In%2A>プロパティは、 <xref:System.IO.TextReader?displayProperty=fullName> 、キーボード、およびの値を表すオブジェクト、<xref:System.Console.Out%2A>と<xref:System.Console.Error%2A>プロパティは、<xref:System.IO.TextWriter?displayProperty=fullName>をコンソール ウィンドウを表すオブジェクト。 ただし、コンソール ウィンドウまたはキーボードを表さないストリームにこれらのプロパティを設定できます。たとえば、ファイルを表すストリームにこれらのプロパティを設定できます。 標準入力、標準出力、または標準エラー ストリームをリダイレクトするには、呼び出し、 <xref:System.Console.SetIn%2A?displayProperty=fullName>、 <xref:System.Console.SetOut%2A?displayProperty=fullName>、または<xref:System.Console.SetError%2A?displayProperty=fullName>メソッド、それぞれします。 これらのストリームを使用する I\/O 操作が同期されますが、つまり、複数のスレッドがデータの読み取りまたはストリームに書き込むことができます。 つまり、このなど、通常は非同期なメソッドを<xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName>オブジェクトがコンソール ストリームを表す場合、同期的に実行します。  
  
> [!NOTE]
>  使用しないで、<xref:System.Console>サーバー アプリケーションなど、自動アプリケーションで出力を表示するクラス。 などのメソッドを呼び出し<xref:System.Console.Write%2A?displayProperty=fullName>と<xref:System.Console.WriteLine%2A?displayProperty=fullName>GUI アプリケーションに影響を与えるありません。  
  
 <xref:System.Console>ストリームがリダイレクトされる場合、たとえば、ファイルに、基になるストリームがコンソールに送られるときに正常に動作するクラスのメンバーは例外をスロー可能性があります。 アプリケーションをキャッチする<xref:System.IO.IOException?displayProperty=fullName>標準ストリームをリダイレクトする場合は例外です。 使用することも、 <xref:System.Console.IsOutputRedirected%2A>、 <xref:System.Console.IsInputRedirected%2A>、および<xref:System.Console.IsErrorRedirected%2A>をスローする操作を実行する前に、標準的なストリームをリダイレクトするかどうかを判断するプロパティ、<xref:System.IO.IOException?displayProperty=fullName>例外。  
  
 によって表されるストリーム オブジェクトのメンバーを明示的に呼び出しが便利な場合があります、 <xref:System.Console.In%2A>、 <xref:System.Console.Out%2A>、および<xref:System.Console.Error%2A>プロパティです。 たとえば、既定では、<xref:System.Console.ReadLine%2A?displayProperty=fullName>メソッド入力、標準入力ストリームから読み取ります。 同様に、<xref:System.Console.WriteLine%2A?displayProperty=fullName>メソッドは、標準出力ストリームにデータを書き込みますとデータの既定の行終端文字列は、キャリッジ リターンが続くし、ライン フィード \("\\r\\n"\) です。 ただし、<xref:System.Console>クラスは、標準エラー出力ストリーム、またはそのストリームに書き込まれたデータの行終端文字列を変更するプロパティにデータを書き込むに対応するメソッドを提供しません。  
  
 この問題を解決するには、設定、<xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName>のプロパティ、<xref:System.Console.Out%2A>または<xref:System.Console.Error%2A>プロパティを別の行終端文字列。 たとえば、次の c\# ステートメントでは、次の 2 つのキャリッジ リターンとライン フィードのシーケンスに標準エラー出力ストリームの行終端文字列を設定します。  
  
 `Console.Error.NewLine = "\r\n\r\n";`  
  
 明示的に呼び出すことができますし、<xref:System.IO.TextWriter.WriteLine%2A>次の c\# ステートメントと同様に、エラー出力ストリーム オブジェクトのメソッド。  
  
 `Console.Error.WriteLine();`  
  
<a name="Buffer"></a>   
## 画面バッファーのサイズとコンソール ウィンドウ  
 コンソールの 2 つの密接に関連する機能は、画面バッファーとコンソール ウィンドウを示します。 テキストが実際にから読み取られたか、コンソールが所有するストリームに書き込まれますからの読み取りまたは書き込み画面バッファーと呼ばれるコンソールによって所有されている領域に表示されます。 画面バッファーは、コンソールの属性でありは、四角形グリッドの行と列の各グリッドの積集合、または文字セルが文字を使用する場所として構成されています。 各文字には、独自の前景の色と、各文字セルが、独自の背景色。  
  
 画面バッファーは、コンソール ウィンドウと呼ばれる四角形の領域で表示されます。 コンソール ウィンドウがコンソールの別の属性コンソール自体はオペレーティング システムのウィンドウではありません。 コンソール ウィンドウは、行と列に配置されているより小さいか、画面バッファーのサイズに等しいと、基になる画面バッファーのさまざまな領域の表示に移動することができます。 画面バッファーがコンソール ウィンドウよりも大きい場合は、コンソールで、コンソール ウィンドウは画面バッファー領域の上位置を変更できるように、スクロール バーが自動的に表示されます。  
  
 カーソルでは、画面バッファーの位置でテキストが現在の読み取りまたは書き込まれることを示します。 カーソル非表示にしたり、表示され、高さを変更することができます。 カーソルが表示されている場合は、コンソール ウィンドウの位置は自動的に移動ため、カーソルがビューでは常にします。  
  
 画面バッファー内の文字セル座標の原点は左上隅およびその原点に対する、カーソルや、コンソール ウィンドウの位置は測定されます。 0 から始まるインデックスを使用して、位置です。つまり、0、行と列 0 として左端の列として、最上位の行を指定します。 行と列のインデックスの最大値は<xref:System.Int16.MaxValue?displayProperty=fullName>します。  
  
<a name="Unicode"></a>   
## コンソールの Unicode のサポート  
 一般に、コンソールは、入力を読み取るし、既定では、システムのロケールを定義する、現在のコンソールのコード ページを使用して、出力を書き込みます。 しようとする場合、コンソール、特定のコード ページにマップされていない文字を表示できませんのすべての文字を表示またはそれらを正確に表すために、コード ページは、使用可能な Unicode 文字のサブセットのみを処理できます。 この問題を説明する例を次に示します。 U \+0 044F にキリル文字 U \+ 0410 からの文字をコンソールに表示しようとします。 コンソールのコード ページ 437 を使用するシステムで例を実行する場合は、キリル文字はコード ページ 437 の文字にマップされていないため、疑問符 \(?\) での各文字が置き換えられます。  
  
 [!code-csharp[System.Console.Class\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class/cs/unicode1.cs#1)]
 [!code-vb[System.Console.Class\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class/vb/unicode1.vb#1)]  
  
 コード ページをサポートするだけでなく、<xref:System.Console>クラスは、utf\-8 でエンコードをサポートしている、<xref:System.Text.UTF8Encoding>クラスです。 .NET Framework 4.5 以降では、<xref:System.Console>クラスには、utf\-16 エンコードでもサポートしています、<xref:System.Text.UnicodeEncoding>クラスです。 コンソールに Unicode 文字を表示します。 設定する、<xref:System.Console.OutputEncoding%2A>プロパティを<xref:System.Text.UTF8Encoding>または<xref:System.Text.UnicodeEncoding>です。  
  
 Unicode 文字のサポート、特定の Unicode 文字を認識するように、エンコーダーとも はその文字を表示するために必要なグリフ含まれているフォントが必要です。 正常に Unicode 文字をコンソールに表示するには、コンソールのフォントをラスター以外または Consolas など Lucida Console TrueType フォントを設定しなければなりません。 次の例では、プログラムを変更する方法、フォント ラスター フォントから Lucida Console を示します。  
  
 [!code-csharp[System.Console.Class.Unsafe\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class.unsafe/cs/setfont1.cs#3)]
 [!code-vb[System.Console.Class.Unsafe\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class.unsafe/vb/setfont1.vb#3)]  
  
 ただし、TrueType フォントは、グリフのサブセットのみを表示できます。 たとえば、Lucida Console フォントには、約 64,000 使用可能な文字 U \+ 0021 から U \+ FB02 の 643 のみが表示されます。 サポートする特定のフォントの文字を表示する、開く、**フォント**コントロール パネルのアプレットを選択して、**文字を検索**オンにしてを選択して、フォントの文字セットを調べる、**フォント**の一覧、**文字コード表**ウィンドウです。  
  
 Windows は、フォント リンクを使用して、特定のフォントでは使用できないグリフを表示します。 フォントの追加の文字セットを表示するリンクについては、次を参照してください。 [Globalization Step\-by\-Step: Fonts](http://go.microsoft.com/fwlink/?LinkId=229111)です。 リンクのフォントは、レジストリの hkey\_local\_machine NT\\CurrentVersion\\FontLink\\SystemLink サブキーで定義されます。 このサブキーに関連付けられている各エントリは、基本のフォントの名前に対応し、その値はフォント ファイルを定義する文字列配列であり、基本のフォントにリンクされているフォント。 配列の各メンバーがリンクされているフォントを定義し、形式の*フォント ファイル名*、*フォント名*です。 次の例では、という名前を簡略化のハングル文字を表示する simsun.ttc という名前のフォント ファイルで見つかった SimSun リンクのフォントをプログラムで定義する方法を示しています。  
  
 [!code-csharp[System.Console.Class\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class/cs/fontlink1.cs#2)]
 [!code-vb[System.Console.Class\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class/vb/fontlink1.vb#2)]  
  
 コンソールの Unicode のサポートには、次の制限があります。  
  
-   Utf\-32 エンコーディングはサポートされていません。 サポートされる唯一のエンコーディングは utf\-8 および utf\-16 は、によって表される Unicode、<xref:System.Text.UTF8Encoding>と<xref:System.Text.UnicodeEncoding>クラス、それぞれします。  
  
-   双方向の出力はサポートされていません。  
  
-   基本多言語面以外の文字の表示 \(つまり、サロゲート ペアの\) はサポートされていません、リンクのフォント ファイルで定義されている場合でもです。  
  
-   複雑なスクリプト内の文字の表示がサポートされていません。  
  
-   別の文字としては、組み合わせ文字シーケンス \(つまり、基本文字と 1 つまたは複数の結合文字で構成される文字\) が表示されます。 この制限を回避するには、呼び出すことによって表示される文字列を正規化することができます、<xref:System.String.Normalize%2A?displayProperty=fullName>コンソールに出力を送信する前にメソッドです。 次の例では、組み合わせ文字を表す文字列は U \+0 0061 をシーケンスの後に 1 つの文字と、出力文字列を正規化すると、前に、2 つの文字として、u\+0308 がコンソールに表示される、<xref:System.String.Normalize%2A?displayProperty=fullName>メソッドが呼び出されます。  
  
     [!code-csharp[System.Console.Class\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class/cs/normalize1.cs#5)]
     [!code-vb[System.Console.Class\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class/vb/normalize1.vb#5)]  
  
     正規化は、の文字には、combining 特定に対応する事前構成済みのフォームが含まれています。 標準の Unicode 文字のシーケンス場合にのみ実用的なソリューションを注意してください。  
  
-   フォントは、秘密の使用領域のコード ポイントのグリフを提供する場合は、その記号が表示されます。 ただし、プライベートの使用領域内の文字はアプリケーション固有であるため、このされません、予期されたグリフします。  
  
 次の例では、コンソールに、Unicode 文字の範囲を表示します。 例は次の 3 つのコマンド ライン パラメーターを受け取ります: 表示するには、および表示する現在のコンソールのエンコーディングを使用するかどうかの範囲の末尾の範囲の開始 \(`false`\) または utf\-16 エンコード \(`true`\)。 これは、コンソールが TrueType フォントを使用するいると仮定します。  
  
 [!code-csharp[System.Console.Class\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class/cs/example3.cs#4)]
 [!code-vb[System.Console.Class\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class/vb/example3.vb#4)]  
  
<a name="Operations"></a>   
## 一般的な操作  
 <xref:System.Console>コンソールが入力の読み取りやコンソール出力の書き込みは、次のメソッドがクラスに含まれています。  
  
-   オーバー ロード、<xref:System.Console.ReadKey%2A>メソッドは、個々 の文字を読み取る。  
  
-   <xref:System.Console.ReadLine%2A>メソッドは入力の行全体を読み取ります。  
  
-   <xref:System.Console.Write%2A>メソッドのオーバー ロードが値型、文字の配列またはオブジェクトのセットのインスタンスを文字列に変換、またはフォーマットしていない、およびコンソールにその文字列を書き込みます。  
  
-   並列一連の<xref:System.Console.WriteLine%2A>メソッドとして同じ文字列出力はオーバー ロード、<xref:System.Console.Write%2A>オーバー ロードがも行終端文字列を追加します。  
  
 <xref:System.Console>クラスは、次の操作を実行するメソッドとプロパティにも含まれます。  
  
-   取得または画面バッファーのサイズを設定します。<xref:System.Console.BufferHeight%2A>と<xref:System.Console.BufferWidth%2A>プロパティを使用するバッファーの高さと幅がそれぞれ、設定を取得またはと<xref:System.Console.SetBufferSize%2A>メソッドでは、1 つのメソッドの呼び出しで、バッファーのサイズを設定できます。  
  
-   取得またはコンソール ウィンドウのサイズを設定します。<xref:System.Console.WindowHeight%2A>と<xref:System.Console.WindowWidth%2A>プロパティを使用すると、ウィンドウの高さと幅がそれぞれ、設定を取得またはと<xref:System.Console.SetWindowSize%2A>メソッドを使用して、1 つのメソッドの呼び出しで、ウィンドウのサイズを設定できます。  
  
-   取得またはカーソルのサイズを設定します。<xref:System.Console.CursorSize%2A>プロパティは、文字セルで、カーソルの高さを指定します。  
  
-   取得またはコンソール ウィンドウ、画面バッファーに対する相対の位置を設定します。<xref:System.Console.WindowTop%2A>と<xref:System.Console.WindowLeft%2A>プロパティを使用すると、取得または設定の先頭の行と、コンソール ウィンドウに表示される画面バッファーの左端の列と<xref:System.Console.SetWindowPosition%2A>メソッドを使用して、1 つのメソッドの呼び出しでこれらの値を設定できます。  
  
-   によって取得または設定、カーソルの位置を取得または設定、<xref:System.Console.CursorTop%2A>と<xref:System.Console.CursorLeft%2A>プロパティ、またはセットを呼び出して、カーソルの位置、<xref:System.Console.SetCursorPosition%2A>メソッドです。  
  
-   移動または呼び出すことによって、画面バッファー内のデータを消去、<xref:System.Console.MoveBufferArea%2A>または<xref:System.Console.Clear%2A>メソッドです。  
  
-   Get またはを使用して、前景色と背景色を設定、<xref:System.Console.ForegroundColor%2A>と<xref:System.Console.BackgroundColor%2A>プロパティ、または前景色および背景を呼び出すことによって、既定の色にリセット、<xref:System.Console.ResetColor%2A>メソッドです。  
  
-   呼び出すことによってコンソールのスピーカーからビープ音を鳴らす、<xref:System.Console.Beep%2A>メソッドです。  
  
<a name="Core"></a>   
## [!INCLUDE[net_core](~/includes/net-core-md.md)]注意事項  
 デスクトップで、.NET Framework で、<xref:System.Console>エンコーディングによって返されるクラスを使用して`GetConsoleCP`と`GetConsoleOutputCP`、通常は、コード ページ エンコーディングします。 たとえばコードがカルチャが英語 \(米国\) コード ページ 437 システムでは、既定で使用されるエンコーディングします。 ただし、[!INCLUDE[net_core](~/includes/net-core-md.md)]これらのエンコーディングの限定されたサブセットのみを使用できるようにします。 この場合、これが<xref:System.Text.Encoding.UTF8%2A?displayProperty=fullName>コンソールの既定のエンコーディングとして使用されます。  
  
 場合は、アプリは、特定のコード ページ エンコーディングに依存させることができますも使用可能な次の手順を実行して*する前に*を呼び出す<xref:System.Console>メソッド。  
  
1.  System.Text.Encoding.CodePages.dll アセンブリへの参照をプロジェクトに追加します。  
  
2.  取得、<xref:System.Text.EncodingProvider>オブジェクトから、<xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=fullName>プロパティです。  
  
3.  渡す、<xref:System.Text.EncodingProvider>オブジェクトを<xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=fullName>を利用可能なエンコーディング プロバイダーでサポートされている追加のエンコーディングを作成するメソッド。  
  
 <xref:System.Console>クラスがし、自動的に使用する、UTF8 ではなく既定のシステム エンコーディング エンコーディング プロバイダーを呼び出す前に登録されていること<xref:System.Console>メソッドを出力します。  
  
   
  
## 例  
 次の例では、標準入力と出力ストリームからのデータを読み書きする方法を示します。 使用してこれらのストリームをリダイレクトすることができますに注意してください、<xref:System.Console.SetIn%2A>と<xref:System.Console.SetOut%2A>メソッドです。  
  
 [!code-cpp[Classic Console Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Console Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Console Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Console Example/CS/source.cs#1)]
 [!code-vb[Classic Console Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Console Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>この型はスレッド セーフです。</threadsafe>
  </Docs>
  <Members>
    <Member MemberName="BackgroundColor">
      <MemberSignature Language="C#" Value="public static ConsoleColor BackgroundColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.ConsoleColor BackgroundColor" />
      <MemberSignature Language="DocId" Value="P:System.Console.BackgroundColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ConsoleColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンソールの背景色を取得または設定します。</summary>
        <value>コンソールの背景色、つまり、各文字の背後に表示される色を指定する値。 既定値は黒です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 変更、<xref:System.Console.BackgroundColor%2A>プロパティが個々 の文字セルの背景色を変更した後に書き込まれた出力のみに影響します。 全体として、コンソール ウィンドウの背景色を変更するには、設定、<xref:System.Console.BackgroundColor%2A>プロパティと呼び出し、<xref:System.Console.Clear%2A>メソッドです。 具体的な例を次に示します。  
  
 [!code-csharp[System.Console.BackgroundColor\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.backgroundcolor/cs/backgroundcolor1.cs#1)]
 [!code-vb[System.Console.BackgroundColor\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.backgroundcolor/vb/backgroundcolor1.vb#1)]  
  
 これは、コンソールに存在しません、Windows ベース アプリケーションの取得操作を返します<xref:System.ConsoleColor.Black?displayProperty=fullName>です。  
  
   
  
## 例  
 次の例の値を保存する、<xref:System.ConsoleColor>配列を列挙の現在の値を格納し、<xref:System.Console.BackgroundColor%2A>と<xref:System.Console.ForegroundColor%2A>変数のプロパティです。 内の各色を前景の色が変更され、<xref:System.ConsoleColor>列挙体の現在の背景に一致する色になり、内の各色に背景色を変更、<xref:System.ConsoleColor>列挙が現在の前面に一致する色に点が異なります。 \(前景の色、背景色と同じである場合、テキストは表示されません。\) 最後に、呼び出し、<xref:System.Console.ResetColor%2A>を元のコンソールの色を復元します。  
  
 [!code-csharp[System.ConsoleColor\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.consolecolor/cs/foregroundcolor3.cs#1)]
 [!code-vb[System.ConsoleColor\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.consolecolor/vb/foregroundcolor3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">設定操作で指定された色は、<see cref="T:System.ConsoleColor" /> の有効なメンバーではありません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーにこの操作を実行する権限がありません。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Beep">
      <MemberSignature Language="C#" Value="public static void Beep ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Beep() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Beep" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コンソールのスピーカーからビープ音を出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、200 ミリ秒の期間に 800 ヘルツの頻度でビープ音を再生します。  
  
> [!NOTE]
>  <xref:System.Console.Beep%2A>メソッドが Windows Vista および Windows XP の 64 ビット エディションでサポートされていません。  
  
 <xref:System.Console.Beep%2A>Windows への呼び出しをラップ[Beep function](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx)です。 かどうか<xref:System.Console.Beep%2A>Windows 7 が 8254 programmable interval timer チップの存在に依存する前に、バージョンの Windows でサウンドを生成します。 Windows 7 以降では、依存の既定のサウンド デバイス。  
  
   
  
## 例  
 次の例で、<xref:System.Console.Beep%2A>メソッドです。 この例では、コマンドラインの引数として 1 ~ 9 の数を受け付けるし、その回数ビープ音を再生します。  
  
 [!code-cpp[console.beep\#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.beep/CPP/beep.cpp#1)]
 [!code-csharp[console.beep\#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.beep/CS/beep.cs#1)]
 [!code-vb[console.beep\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.beep/VB/beep.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.HostProtectionException">このメソッドは、SQL Server などのユーザー インターフェイスへのアクセスを許可しないサーバーで実行されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Beep">
      <MemberSignature Language="C#" Value="public static void Beep (int frequency, int duration);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Beep(int32 frequency, int32 duration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Beep(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frequency" Type="System.Int32" />
        <Parameter Name="duration" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="frequency">ビープ音の周波数。37 Hz から 32767 Hz の範囲で指定できます。</param>
        <param name="duration">ビープ音の再生時間。ミリ秒単位で指定します。</param>
        <summary>周波数と時間を指定して、コンソールのスピーカーからビープ音を出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Console.Beep%2A>Windows への呼び出しをラップ[Beep function](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx)です。 かどうか<xref:System.Console.Beep%2A>Windows 7 が 8254 programmable interval timer チップの存在に依存する前に、バージョンの Windows でサウンドを生成します。 Windows 7 以降では、依存の既定のサウンド デバイス。  
  
> [!NOTE]
>  <xref:System.Console.Beep%2A>メソッドが Windows Vista および Windows XP の 64 ビット エディションでサポートされていません。  
  
   
  
## 例  
 この例で、<xref:System.Console.Beep%2A>コンソールのスピーカーからの曲の最初のいくつかメモを再生してメソッドです。  
  
 [!code-cpp[console.beep2\#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.beep2/CPP/b2.cpp#1)]
 [!code-csharp[console.beep2\#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.beep2/CS/b2.cs#1)]
 [!code-vb[console.beep2\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.beep2/VB/b2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="frequency" /> は 37 ヘルツ未満または 32767 ヘルツを超えます。  
  
 または  
  
 <paramref name="duration" /> が 0 以下です。</exception>
        <exception cref="T:System.Security.HostProtectionException">このメソッドは、SQL Server などのコンソールへのアクセスを許可しないサーバーで実行されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="BufferHeight">
      <MemberSignature Language="C#" Value="public static int BufferHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 BufferHeight" />
      <MemberSignature Language="DocId" Value="P:System.Console.BufferHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>バッファー領域の高さを取得または設定します。</summary>
        <value>バッファー領域の現在の高さを示す行数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、コンソール モード ウィンドウによってアクセスされるバッファーに格納されている行 \(または行\) の数を定義します。 これに対し、<xref:System.Console.WindowHeight%2A>プロパティが実際には、特定の時点に、コンソール ウィンドウに表示されている行の数を定義します。 バッファーに実際に書き込まれた行の数がによって定義された行の数を超えた場合、<xref:System.Console.WindowHeight%2A>プロパティと等しい行の連続する数値を表示するように、ウィンドウを縦方向にスクロールすることができます、<xref:System.Console.WindowHeight%2A>プロパティでありは、バッファー内の任意の場所にあります。  
  
 設定操作の値が減少した場合、<xref:System.Console.BufferHeight%2A>プロパティ、最上位の行が削除されます。 たとえば、250 に 300 から行の数を減らす場合は、0 ~ 49 の行が削除されると、既存の行を 50 ~ 299 になる線の 0 から 249 を実行します。  
  
   
  
## 例  
 この例で、<xref:System.Console.BufferHeight%2A>と<xref:System.Console.BufferWidth%2A>プロパティです。 例では、300 行と 85 列のバッファー サイズに設定するオペレーティング システムのウィンドウのサイズを報告します。  
  
 [!code-cpp[console.bufferHW\#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.bufferHW/CPP/hw.cpp#1)]
 [!code-csharp[console.bufferHW\#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.bufferHW/CS/hw.cs#1)]
 [!code-vb[console.bufferHW\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.bufferHW/VB/hw.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">セット操作の値が 0 以下です。  
  
 または  
  
 セット操作の値が <see cref="F:System.Int16.MaxValue" /> 以上です。  
  
 または  
  
 セット操作の値が <see cref="P:System.Console.WindowTop" /> \+ <see cref="P:System.Console.WindowHeight" /> 未満です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーにこの操作を実行するアクセス許可がありません。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="BufferWidth">
      <MemberSignature Language="C#" Value="public static int BufferWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 BufferWidth" />
      <MemberSignature Language="DocId" Value="P:System.Console.BufferWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>バッファー領域の幅を取得または設定します。</summary>
        <value>バッファー領域の現在の幅を示す列数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 設定操作の値が減少した場合、<xref:System.Console.BufferWidth%2A>プロパティ、右端の列が削除されます。 たとえば、列の数は 60、80 から縮小した場合、60 ~ 79 各行の列は削除されます。  
  
   
  
## 例  
 この例で、<xref:System.Console.BufferHeight%2A>と<xref:System.Console.BufferWidth%2A>プロパティです。 例では、300 行と 85 列のバッファー サイズに設定するオペレーティング システムのウィンドウのサイズを報告します。  
  
 [!code-cpp[console.bufferHW\#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.bufferHW/CPP/hw.cpp#1)]
 [!code-csharp[console.bufferHW\#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.bufferHW/CS/hw.cs#1)]
 [!code-vb[console.bufferHW\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.bufferHW/VB/hw.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">セット操作の値が 0 以下です。  
  
 または  
  
 セット操作の値が <see cref="F:System.Int16.MaxValue" /> 以上です。  
  
 または  
  
 セット操作の値が <see cref="P:System.Console.WindowLeft" /> \+ <see cref="P:System.Console.WindowWidth" /> 未満です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーにこの操作を実行するアクセス許可がありません。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CancelKeyPress">
      <MemberSignature Language="C#" Value="public static event ConsoleCancelEventHandler CancelKeyPress;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ConsoleCancelEventHandler CancelKeyPress" />
      <MemberSignature Language="DocId" Value="E:System.Console.CancelKeyPress" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ConsoleCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="F:System.ConsoleModifiers.Control" /> の修飾子キー \(Ctrl\) と <see cref="F:System.ConsoleKey.C" /> コンソール キー \(c\) または中断キーが同時にプッシュされた場合 \(Ctrl \+ C または Ctrl \+ Break\) に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントと組み合わせて使用<xref:System.ConsoleCancelEventHandler?displayProperty=fullName>と<xref:System.ConsoleCancelEventArgs?displayProperty=fullName>です。<xref:System.Console.CancelKeyPress>イベント、イベント ハンドラーが実行を続行するか終了するかどうかを決定するために CTRL \+ C シグナルをインターセプトするコンソール アプリケーションを有効にします。 イベント処理の詳細については、次を参照してください。[処理とイベントの発生](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)です。  
  
 CTRL \+ C または Ctrl \+ break のいずれかを押したときに、<xref:System.Console.CancelKeyPress>イベントが発生し、アプリケーションの<xref:System.ConsoleCancelEventHandler>イベント ハンドラーが実行します。 イベント ハンドラーに渡されます、 <xref:System.ConsoleCancelEventArgs> 2 つの便利なプロパティを持つオブジェクトです。  
  
-   <xref:System.ConsoleCancelEventArgs.SpecialKey%2A>、ctrl キーを押しながら C キーを押して、ユーザーの結果として、ハンドラーが呼び出されたかどうかを判断することができます \(プロパティの値が<xref:System.ConsoleSpecialKey.ControlC?displayProperty=fullName>\) または Ctrl \+ Break \(プロパティの値が<xref:System.ConsoleSpecialKey.ControlBreak?displayProperty=fullName>\)。  
  
-   <xref:System.ConsoleCancelEventArgs.Cancel%2A>、どのアプリケーションにする必要がありますをユーザーには、応答を押すと CTRL \+ C または Ctrl \+ break を判断できます。 既定では、<xref:System.ConsoleCancelEventArgs.Cancel%2A>プロパティは`false`、原因プログラムの終了イベント ハンドラーが終了したときに実行します。 そのプロパティを変更する`true`実行するアプリケーションを続行するかを指定します。  
  
> [!TIP]
>  使用することができます、アプリケーションに単純な要件がある場合、<xref:System.Console.TreatControlCAsInput%2A>このイベントではなくプロパティです。 このプロパティを設定して`false`、ctrl キーを押しながら C キーを押した場合に常にアプリケーションを終了することを確認できます。 設定する`true`、こと、ctrl キーを押しながら C キーを押しても、アプリケーションは終了しないことを確認できます。  
  
 このイベントのイベント ハンドラーは、スレッド プールのスレッドで実行されます。  
  
   
  
## 例  
 次の例でどのように<xref:System.Console.CancelKeyPress>イベントは、使用します。 Ctrl キーを押しながら C キーを押したときに、読み取り操作が中断されると、`myHandler`イベント ハンドラーが呼び出されます。 イベント ハンドラーに入ったときに、<xref:System.ConsoleCancelEventArgs.Cancel%2A?displayProperty=fullName>プロパティは`false`、イベント ハンドラーが終了するときに、現在のプロセスは終了ことを意味します。 ただし、イベント ハンドラーを設定、<xref:System.ConsoleCancelEventArgs.Cancel%2A?displayProperty=fullName>プロパティを`true`つまり、プロセスは終了しないと、読み取り操作が再開されます。  
  
 [!code-cpp[console.cancelkeypress\#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cancelkeypress/cpp/ckp.cpp#1)]
 [!code-csharp[console.cancelkeypress\#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cancelkeypress/cs/ckp.cs#1)]
 [!code-vb[console.cancelkeypress\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cancelkeypress/vb/ckp.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="T:System.ConsoleCancelEventArgs" />
        <altmember cref="T:System.ConsoleCancelEventHandler" />
        <altmember cref="P:System.Console.TreatControlCAsInput" />
      </Docs>
    </Member>
    <Member MemberName="CapsLock">
      <MemberSignature Language="C#" Value="public static bool CapsLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CapsLock" />
      <MemberSignature Language="DocId" Value="P:System.Console.CapsLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>CapsLock がオンかオフかを示す値を取得します。</summary>
        <value>CapsLock がオンの場合は <see langword="true" />、CapsLock がオフの場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public static void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Clear" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コンソール バッファーおよび対応するコンソール ウィンドウをクリアします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、<xref:System.Console.Clear%2A>メソッドは、MS\-DOS の呼び出しと同じ`cls`コマンド プロンプト ウィンドウでコマンド。 ときに、<xref:System.Console.Clear%2A>メソッドが呼び出される、ウィンドウの左上隅にカーソルが自動的にスクロールおよび画面バッファーの内容は、現在の前景の背景色を使用した空白に設定されます。  
  
> [!NOTE]
>  呼び出そうとすると、<xref:System.Console.Clear%2A>コンソール アプリケーションの出力がファイルにリダイレクトされたときのメソッドをスロー、<xref:System.IO.IOException>です。 これを回避するには、常にへの呼び出しをラップ、<xref:System.Console.Clear%2A>メソッドで、`try`しています.`catch`ブロックします。  
  
   
  
## 例  
 次の例では、<xref:System.Console.Clear%2A>ループを実行する前に、コンソールを消去するメソッドを求めるメッセージが前景色と背景色を選択して、表示する文字列を入力します。 コンソールの元の前景色と背景色を復元する場合は、ユーザーはいないプログラムを終了しますが、および<xref:System.Console.Clear%2A>メソッドは、ループを再実行する前にもう一度呼び出されます。  
  
 [!code-csharp[System.Console.Clear\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.clear/cs/clear1.cs#1)]
 [!code-vb[System.Console.Clear\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.clear/vb/clear1.vb#1)]  
  
 The example relies on a `GetKeyPress` method to validate the user's selection of a foreground and background color.  
  
 この例で、<xref:System.Console.CursorLeft%2A>と<xref:System.Console.CursorTop%2A>プロパティ、および<xref:System.Console.SetCursorPosition%2A>と<xref:System.Console.Clear%2A>メソッドです。 例では、カーソルの組み合わせを使用して 5 つの文字の四角形で 5 文字を描画し、次の書き込みが行われる場所を決定する「\+」、"&#124;"、および"\-"の文字列。 その他の文字列の組み合わせを使用して、少ない手順で四角形を描画するだったことに注意してください。  
  
 [!code-cpp[console.cursorLTS\#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorLTS/CPP/lts.cpp#1)]
 [!code-csharp[console.cursorLTS\#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorLTS/CS/lts.cs#1)]
 [!code-vb[console.cursorLTS\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorLTS/VB/lts.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="CursorLeft">
      <MemberSignature Language="C#" Value="public static int CursorLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CursorLeft" />
      <MemberSignature Language="DocId" Value="P:System.Console.CursorLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>バッファー領域におけるカーソルの列位置を取得または設定します。</summary>
        <value>カーソルの現在位置 \(列\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 この例で、<xref:System.Console.CursorLeft%2A>と<xref:System.Console.CursorTop%2A>プロパティ、および<xref:System.Console.SetCursorPosition%2A>と<xref:System.Console.Clear%2A>メソッドです。 例では、カーソルが、5 つの文字四角形の組み合わせを使用して 5 文字を描画する、次の書き込みが行われる場所を決定する「\+」、"&#124;"、および"\-"の文字列。 その他の文字列の組み合わせを使用して、少ない手順で四角形を描画する可能性があることに注意してください。  
  
 [!code-cpp[console.cursorLTS\#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorLTS/CPP/lts.cpp#1)]
 [!code-csharp[console.cursorLTS\#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorLTS/CS/lts.cs#1)]
 [!code-vb[console.cursorLTS\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorLTS/VB/lts.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作の値が 0 より小さい値です。  
  
 または  
  
 設定操作の値が <see cref="P:System.Console.BufferWidth" /> 以上です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーにこの操作を実行するアクセス許可がありません。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CursorSize">
      <MemberSignature Language="C#" Value="public static int CursorSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CursorSize" />
      <MemberSignature Language="DocId" Value="P:System.Console.CursorSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>文字セル内のカーソルの高さを取得または設定します。</summary>
        <value>文字セルの高さに対する割合で表されたカーソルのサイズ。 プロパティ値の範囲は、1 ～ 100 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プロパティの値が完全にいっぱいになるセル プロパティ値が 100 である場合に、1 の場合、セルの下部にある水平行からまで、カーソルの外観が異なります。  
  
   
  
## 例  
 この例で、<xref:System.Console.CursorSize%2A>プロパティです。 この例では、たびに、コンソール キーを押すと、し、復元しますカーソル、元のサイズを終了する前に、カーソルのサイズを増やします。  
  
 [!code-cpp[console.cursorsize\#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorsize/CPP/csize.cpp#1)]
 [!code-csharp[console.cursorsize\#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorsize/CS/csize.cs#1)]
 [!code-vb[console.cursorsize\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorsize/VB/csize.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作で指定された値は、1 より小さい値か、100 より大きい値になります。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーにこの操作を実行する権限がありません。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CursorTop">
      <MemberSignature Language="C#" Value="public static int CursorTop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CursorTop" />
      <MemberSignature Language="DocId" Value="P:System.Console.CursorTop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>バッファー領域におけるカーソルの行位置を取得または設定します。</summary>
        <value>カーソルの現在位置 \(行\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 この例で、<xref:System.Console.CursorLeft%2A>と<xref:System.Console.CursorTop%2A>プロパティ、および<xref:System.Console.SetCursorPosition%2A>と<xref:System.Console.Clear%2A>メソッドです。 例では、カーソルが、5 つの文字四角形の組み合わせを使用して 5 文字を描画する、次の書き込みが行われる場所を決定する「\+」、"&#124;"、および"\-"の文字列。 その他の文字列の組み合わせを使用して、少ない手順で四角形を描画する可能性があることに注意してください。  
  
 [!code-cpp[console.cursorLTS\#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorLTS/CPP/lts.cpp#1)]
 [!code-csharp[console.cursorLTS\#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorLTS/CS/lts.cs#1)]
 [!code-vb[console.cursorLTS\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorLTS/VB/lts.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">セット操作の値が 0 より小さい値です。  
  
 または  
  
 設定操作の値が <see cref="P:System.Console.BufferHeight" /> 以上です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーにこの操作を実行するアクセス許可がありません。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CursorVisible">
      <MemberSignature Language="C#" Value="public static bool CursorVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CursorVisible" />
      <MemberSignature Language="DocId" Value="P:System.Console.CursorVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カーソルを表示するかどうかを示す値を取得または設定します。</summary>
        <value>カーソルを表示する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 この例で、<xref:System.Console.CursorVisible%2A>プロパティです。 例は、入力の最初の列が文字の場合、'\+' は、表示または非表示は、入力がの場合に、カーソルは、'\-' 文字です。  
  
 [!code-cpp[console.cursorvis\#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorvis/CPP/vis.cpp#1)]
 [!code-csharp[console.cursorvis\#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorvis/CS/vis.cs#1)]
 [!code-vb[console.cursorvis\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorvis/VB/vis.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">ユーザーにこの操作を実行する権限がありません。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public static System.IO.TextWriter Error { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IO.TextWriter Error" />
      <MemberSignature Language="DocId" Value="P:System.Console.Error" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>標準エラー出力ストリームを取得します。</summary>
        <value>標準エラー出力ストリームを表す <see cref="T:System.IO.TextWriter" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This standard error stream is set to the console by default. It can be set to another stream with the <xref:System.Console.SetError%2A> method. After the standard error stream is redirected, it can be reacquired by calling the <xref:System.Console.OpenStandardError%2A> method.  
  
 In console applications whose informational output is often redirected to a file, the standard error stream available through the <xref:System.Console.Error%2A> property can be used to display information to the console even if output is redirected. The following example displays product tables for 10 numbers at a time starting with 1. After every set of 10 numbers, the <xref:System.Console.Error%2A> property is used to ask the user whether to display the next set. If the standard output is redirected to a file, the user is still asked whether the routine should generate the next set of products.  
  
 [!code-csharp[System.Console.Error\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.error/cs/error1.cs#1)]
 [!code-vb[System.Console.Error\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.error/vb/error1.vb#1)]  
  
   
  
## 例  
 The following example is a command line utility named ExpandTabs that replaces tab characters in a text file with four spaces, the value defined by the `tabSize` variable. It redirects the standard input and output streams to files, but uses the <xref:System.Console.Error%2A> property to write the standard error stream to the console. It can be launched from the command line by supplying the name of the file that contains tab characters and the name of the output file.  
  
 [!code-cpp[Console\-EXPANDTABSEX\#1](~/samples/snippets/cpp/VS_Snippets_CLR/Console-EXPANDTABSEX/CPP/expandtabsex.cpp#1)]
 [!code-csharp[Console\-EXPANDTABSEX\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Console-EXPANDTABSEX/CS/expandtabsex.cs#1)]
 [!code-vb[Console\-EXPANDTABSEX\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Console-EXPANDTABSEX/VB/expandtabsex.vb#1)]  
  
 The following example is a simple text file viewer that displays the contents of one or more text files to the console. If there are no command line arguments, or if any files passed as command line arguments do not exist, the example calls the <xref:System.Console.SetError%2A> method to redirect error information to a file, calls the <xref:System.Console.OpenStandardError%2A> method in the process of reacquiring the standard error stream, and indicates that error information was written to a file.  
  
 [!code-csharp[System.Console.OpenStandardError\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.openstandarderror/cs/viewtextfile.cs#1)]
 [!code-vb[System.Console.OpenStandardError\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.openstandarderror/vb/viewtextfile.vb#1)]  
  
 Note that the <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=fullName> property is set to **languageKeyword tag is not supported!!!!**  
 before reacquiring the error stream. This ensures that output will be sent to the console immediately rather than buffered.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.In" />
        <altmember cref="P:System.Console.Out" />
        <altmember cref="P:System.Console.IsErrorRedirected" />
        <altmember cref="M:System.Console.SetError(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="ForegroundColor">
      <MemberSignature Language="C#" Value="public static ConsoleColor ForegroundColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.ConsoleColor ForegroundColor" />
      <MemberSignature Language="DocId" Value="P:System.Console.ForegroundColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ConsoleColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンソールの前景色を取得または設定します。</summary>
        <value>コンソールの前景色、つまり、表示される各文字の色を指定する <see cref="T:System.ConsoleColor" />。 既定値は灰色です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、コンソールに存在しません、Windows ベース アプリケーションの取得操作を返します<xref:System.ConsoleColor.Gray>です。  
  
   
  
## 例  
 次の例では、コンソールの背景色は黒と、背景色を変更、赤と前景の色を黒にした場合は、かどうかを確認します。  
  
 [!code-csharp[System.ConsoleColor\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.consolecolor/cs/Example2.cs#2)]
 [!code-vb[System.ConsoleColor\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.consolecolor/vb/Example2.vb#2)]  
  
 次の例の値を保存する、<xref:System.ConsoleColor>配列を列挙しの現在の値を格納、<xref:System.Console.BackgroundColor%2A>と<xref:System.Console.ForegroundColor%2A>変数のプロパティです。 内の各色を前景の色が変更され、<xref:System.ConsoleColor>列挙体の現在の背景に一致する色になり、内の各色に背景色を変更、<xref:System.ConsoleColor>列挙体の色が現在の前面に一致する点が異なります。 \(前景の色、背景色と同じである場合、テキストは表示されません。\) 最後に、呼び出し、<xref:System.Console.ResetColor%2A>元コンソール色を復元する方法です。  
  
 [!code-csharp[System.ConsoleColor\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.consolecolor/cs/foregroundcolor3.cs#1)]
 [!code-vb[System.ConsoleColor\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.consolecolor/vb/foregroundcolor3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">設定操作で指定された色は、<see cref="T:System.ConsoleColor" /> の有効なメンバーではありません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーにこの操作を実行する権限がありません。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="In">
      <MemberSignature Language="C#" Value="public static System.IO.TextReader In { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IO.TextReader In" />
      <MemberSignature Language="DocId" Value="P:System.Console.In" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextReader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>標準入力ストリームを取得します。</summary>
        <value>標準入力ストリームを表す <see cref="T:System.IO.TextReader" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティが既定で標準入力ストリームに設定します。 別のストリームにこのプロパティを設定することができます、<xref:System.Console.SetIn%2A>メソッドです。  
  
 標準入力ストリームに対して読み取り操作が同期的に実行します。 つまり、指定された読み取り操作が完了するまで、ブロックします。 でもは true。 これは場合、非同期メソッドなど<xref:System.IO.TextReader.ReadLineAsync%2A>、で呼び出されると、<xref:System.IO.TextReader>によって返されるオブジェクト、<xref:System.Console.In%2A>プロパティです。  
  
   
  
## 例  
 次の例は、の使用方法を示します、`In`プロパティです。  
  
 [!code-cpp[consolein\#1](~/samples/snippets/cpp/VS_Snippets_CLR/consolein/CPP/consolein.cpp#1)]
 [!code-csharp[consolein\#1](~/samples/snippets/csharp/VS_Snippets_CLR/consolein/CS/consolein.cs#1)]
 [!code-vb[consolein\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/consolein/VB/consolein.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Console.OpenStandardInput" />
        <altmember cref="P:System.Console.IsInputRedirected" />
        <altmember cref="P:System.Console.Error" />
        <altmember cref="P:System.Console.Out" />
        <altmember cref="M:System.Console.SetIn(System.IO.TextReader)" />
      </Docs>
    </Member>
    <Member MemberName="InputEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding InputEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding InputEncoding" />
      <MemberSignature Language="DocId" Value="P:System.Console.InputEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンソールが入力内容の読み取り時に使用するエンコーディングを取得または設定します。</summary>
        <value>コンソールが入力内容の読み取りに使用するエンコーディング。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コンソールでは、入力キーボード入力を対応する文字に変換するエンコーディングを使用します。 入力のエンコードには、256 個のキーボード文字コードを個々 の文字にマップされているコード ページが組み込まれています。 異なるコード ページには異なる特殊文字が含まれ、それらは通常は 1 つの言語または言語グループ用にカスタマイズされています。  
  
 以降で、[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]プロパティの get 操作は、コンソールの現在入力エンコーディングの代わりにキャッシュされた値を返す可能性があります。 これは、場合に発生することができますの値、<xref:System.Console.InputEncoding%2A>への代入以外のいくつかの方法でプロパティが変更された、 <xref:System.Console.InputEncoding%2A> 、Windows の呼び出しなどのプロパティ`SetConsoleCP`関数またはを使用して、 `chcp` PowerShell スクリプトからコマンド。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作でのプロパティ値は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.IOException">この操作の実行中にエラーが発生しました。</exception>
        <exception cref="T:System.Security.SecurityException">アプリケーションに、この操作を実行するための権限がありません。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for reading and writing to top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
    <Member MemberName="IsErrorRedirected">
      <MemberSignature Language="C#" Value="public static bool IsErrorRedirected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsErrorRedirected" />
      <MemberSignature Language="DocId" Value="P:System.Console.IsErrorRedirected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>エラー出力ストリームが標準エラー ストリームからリダイレクトされているかどうかを示す値を取得します。</summary>
        <value>エラー出力がリダイレクトされる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.Error" />
        <altmember cref="M:System.Console.SetError(System.IO.TextWriter)" />
        <altmember cref="M:System.Console.OpenStandardError" />
      </Docs>
    </Member>
    <Member MemberName="IsInputRedirected">
      <MemberSignature Language="C#" Value="public static bool IsInputRedirected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsInputRedirected" />
      <MemberSignature Language="DocId" Value="P:System.Console.IsInputRedirected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>入力が標準入力ストリームからリダイレクトされているかどうかを示す値を取得します。</summary>
        <value>入力がリダイレクトされる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.In" />
        <altmember cref="M:System.Console.SetIn(System.IO.TextReader)" />
        <altmember cref="M:System.Console.OpenStandardInput" />
      </Docs>
    </Member>
    <Member MemberName="IsOutputRedirected">
      <MemberSignature Language="C#" Value="public static bool IsOutputRedirected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsOutputRedirected" />
      <MemberSignature Language="DocId" Value="P:System.Console.IsOutputRedirected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>出力が標準出力ストリームからリダイレクトされているかどうかを示す値を取得します。</summary>
        <value>出力がリダイレクトされる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.Out" />
        <altmember cref="M:System.Console.SetOut(System.IO.TextWriter)" />
        <altmember cref="M:System.Console.OpenStandardError" />
      </Docs>
    </Member>
    <Member MemberName="KeyAvailable">
      <MemberSignature Language="C#" Value="public static bool KeyAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool KeyAvailable" />
      <MemberSignature Language="DocId" Value="P:System.Console.KeyAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>キーが押されたかどうか、つまり、押されたキーが入力ストリームに存在するかどうかを示す値を取得します。</summary>
        <value>押されたキーが入力ストリームに存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プロパティの値が直ちに返されますつまり、<xref:System.Console.KeyAvailable%2A>キーを押すが利用可能になるまでに、プロパティで入力がブロックされません。  
  
 使用して、<xref:System.Console.KeyAvailable%2A>プロパティのみと組み合わせて、<xref:System.Console.ReadKey%2A>メソッド、されません、<xref:System.Console.Read%2A>または<xref:System.Console.ReadLine%2A>メソッドです。  
  
   
  
## 例  
 次の例で使用する方法、<xref:System.Console.KeyAvailable%2A>キーが押されるまでに実行されるループを作成するプロパティです。  
  
 [!code-cpp[console.keyavailable\#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.keyavailable/CPP/ka.cpp#1)]
 [!code-csharp[console.keyavailable\#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.keyavailable/CS/ka.cs#1)]
 [!code-vb[console.keyavailable\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.keyavailable/VB/ka.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <exception cref="T:System.InvalidOperationException">標準入力は、キーボードではなくファイルにリダイレクトされています。</exception>
      </Docs>
    </Member>
    <Member MemberName="LargestWindowHeight">
      <MemberSignature Language="C#" Value="public static int LargestWindowHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 LargestWindowHeight" />
      <MemberSignature Language="DocId" Value="P:System.Console.LargestWindowHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のフォントおよび画面解像度に基づいて、コンソール ウィンドウの最大行数を取得します。</summary>
        <value>コンソール ウィンドウの高さの最大値 \(行数\)。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LargestWindowWidth">
      <MemberSignature Language="C#" Value="public static int LargestWindowWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 LargestWindowWidth" />
      <MemberSignature Language="DocId" Value="P:System.Console.LargestWindowWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のフォントおよび画面解像度に基づいて、コンソール ウィンドウの最大列数を取得します。</summary>
        <value>コンソール ウィンドウの幅の最大値 \(列数\)。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveBufferArea">
      <MemberSignature Language="C#" Value="public static void MoveBufferArea (int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MoveBufferArea(int32 sourceLeft, int32 sourceTop, int32 sourceWidth, int32 sourceHeight, int32 targetLeft, int32 targetTop) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceLeft" Type="System.Int32" />
        <Parameter Name="sourceTop" Type="System.Int32" />
        <Parameter Name="sourceWidth" Type="System.Int32" />
        <Parameter Name="sourceHeight" Type="System.Int32" />
        <Parameter Name="targetLeft" Type="System.Int32" />
        <Parameter Name="targetTop" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sourceLeft">コピー元領域の左端の列。</param>
        <param name="sourceTop">コピー元領域の最上行。</param>
        <param name="sourceWidth">コピー元領域内の列数。</param>
        <param name="sourceHeight">コピー元領域内の行数。</param>
        <param name="targetLeft">コピー先領域の左端の列。</param>
        <param name="targetTop">コピー先領域の最上行。</param>
        <summary>画面バッファーの特定の領域を、指定した領域にコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コピー先とソースのパラメーターは、現在の画面バッファーの境界の外にある位置を指定、コピー先領域に適合するコピー元領域の部分だけがコピーされます。 コピー元領域は、現在の画面バッファーに合わせてクリッピングされます。  
  
 <xref:System.Console.MoveBufferArea%2A>メソッドは、コピー先領域にコピー元領域をコピーします。 コピー元領域をコピー先領域から共通部分がない場合、コピー元領域は、現在の前景色と背景色を使用して空白で埋められます。 それ以外の場合、コピー元領域の交差部分が指定されていません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">1 つ以上のパラメーターが 0 未満です。  
  
 または  
  
 <paramref name="sourceLeft" /> または <paramref name="targetLeft" /> が <see cref="P:System.Console.BufferWidth" /> 以上です。  
  
 または  
  
 <paramref name="sourceTop" /> または <paramref name="targetTop" /> が <see cref="P:System.Console.BufferHeight" /> 以上です。  
  
 または  
  
 <paramref name="sourceTop" /> \+ <paramref name="sourceHeight" /> が <see cref="P:System.Console.BufferHeight" /> 以上です。  
  
 または  
  
 <paramref name="sourceLeft" /> \+ <paramref name="sourceWidth" /> が <see cref="P:System.Console.BufferWidth" /> 以上です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーにこの操作を実行する権限がありません。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="MoveBufferArea">
      <MemberSignature Language="C#" Value="public static void MoveBufferArea (int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, char sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MoveBufferArea(int32 sourceLeft, int32 sourceTop, int32 sourceWidth, int32 sourceHeight, int32 targetLeft, int32 targetTop, char sourceChar, valuetype System.ConsoleColor sourceForeColor, valuetype System.ConsoleColor sourceBackColor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceLeft" Type="System.Int32" />
        <Parameter Name="sourceTop" Type="System.Int32" />
        <Parameter Name="sourceWidth" Type="System.Int32" />
        <Parameter Name="sourceHeight" Type="System.Int32" />
        <Parameter Name="targetLeft" Type="System.Int32" />
        <Parameter Name="targetTop" Type="System.Int32" />
        <Parameter Name="sourceChar" Type="System.Char" />
        <Parameter Name="sourceForeColor" Type="System.ConsoleColor" />
        <Parameter Name="sourceBackColor" Type="System.ConsoleColor" />
      </Parameters>
      <Docs>
        <param name="sourceLeft">コピー元領域の左端の列。</param>
        <param name="sourceTop">コピー元領域の最上行。</param>
        <param name="sourceWidth">コピー元領域内の列数。</param>
        <param name="sourceHeight">コピー元領域内の行数。</param>
        <param name="targetLeft">コピー先領域の左端の列。</param>
        <param name="targetTop">コピー先領域の最上行。</param>
        <param name="sourceChar">コピー元領域に挿入する文字。</param>
        <param name="sourceForeColor">コピー元領域を上書きするときに使用する前景色。</param>
        <param name="sourceBackColor">コピー元領域を上書きするときに使用する背景色。</param>
        <summary>画面バッファーの特定の領域を、指定した領域にコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コピー先とソースのパラメーターは、現在の画面バッファーの境界を越える位置を指定する場合は、元領域のコピー先領域内に収まる部分だけがコピーされます。 コピー元領域は、現在の画面バッファーに合わせてクリッピングされます。  
  
 <xref:System.Console.MoveBufferArea%2A>メソッドは、コピー先領域にコピー元領域をコピーします。 コピー元領域をコピー先領域から共通部分がない場合で指定された文字でコピー元領域が塗りつぶされます。 `sourceChar`、で指定された色を使用して`sourceForeColor`と`sourceBackColor`です。 それ以外の場合、コピー元領域の交差部分が指定されていません。  
  
 <xref:System.Console.MoveBufferArea%2A>メソッド操作も行いません場合`sourceWidth`または`sourceHeight`ゼロです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">1 つ以上のパラメーターが 0 未満です。  
  
 または  
  
 <paramref name="sourceLeft" /> または <paramref name="targetLeft" /> が <see cref="P:System.Console.BufferWidth" /> 以上です。  
  
 または  
  
 <paramref name="sourceTop" /> または <paramref name="targetTop" /> が <see cref="P:System.Console.BufferHeight" /> 以上です。  
  
 または  
  
 <paramref name="sourceTop" /> \+ <paramref name="sourceHeight" /> が <see cref="P:System.Console.BufferHeight" /> 以上です。  
  
 または  
  
 <paramref name="sourceLeft" /> \+ <paramref name="sourceWidth" /> が <see cref="P:System.Console.BufferWidth" /> 以上です。</exception>
        <exception cref="T:System.ArgumentException">一方または両方の色パラメーターが <see cref="T:System.ConsoleColor" /> 列挙のメンバーではありません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーにこの操作を実行するアクセス許可がありません。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="NumberLock">
      <MemberSignature Language="C#" Value="public static bool NumberLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool NumberLock" />
      <MemberSignature Language="DocId" Value="P:System.Console.NumberLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>NumLock がオンかオフかを示す値を取得します。</summary>
        <value>NumLock がオンの場合は <see langword="true" />、NumLock がオフの場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenStandardError">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardError ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardError() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardError" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>標準エラー ストリームを取得します。</summary>
        <returns>標準エラー ストリーム。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、によって変更された後に標準エラー ストリームを再取得に使用できます、<xref:System.Console.SetError%2A>メソッドです。  
  
   
  
## 例  
 次の例は、1 つまたは複数のテキスト ファイルの内容をコンソールに表示する単純なテキスト ファイル ビューアーです。 コマンドライン引数がないか、この例ではコマンドライン引数として渡されるすべてのファイルが存在しない場合がある場合、<xref:System.Console.SetError%2A>エラー情報をファイルにリダイレクトするメソッドを呼び出す、<xref:System.Console.OpenStandardError%2A>標準エラー ストリームを再取得する処理を行ってメソッドとエラー情報がファイルに書き込まれたことを示します。  
  
 [!code-csharp[System.Console.OpenStandardError\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.openstandarderror/cs/viewtextfile.cs#1)]
 [!code-vb[System.Console.OpenStandardError\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.openstandarderror/vb/viewtextfile.vb#1)]  
  
 Note that the <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=fullName> property is set to **languageKeyword tag is not supported!!!!**  
 before reacquiring the error stream. This ensures that output will be sent to the console immediately rather than buffered.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.Error" />
        <altmember cref="P:System.Console.IsErrorRedirected" />
        <altmember cref="M:System.Console.SetError(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="OpenStandardError">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardError (int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardError(int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardError(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bufferSize">内部ストリーム バッファー サイズ。</param>
        <summary>指定したバッファー サイズに設定された標準エラー ストリームを取得します。</summary>
        <returns>標準エラー ストリーム。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、標準エラー ストリームを再取得して変更した後に使用できます、 <xref:System.Console.SetError%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="bufferSize" /> が 0 以下です。</exception>
        <altmember cref="P:System.Console.Error" />
        <altmember cref="P:System.Console.IsErrorRedirected" />
        <altmember cref="M:System.Console.SetError(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="OpenStandardInput">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardInput ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardInput() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardInput" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>標準入力ストリームを取得します。</summary>
        <returns>標準入力ストリーム。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、によって変更された後は、標準入力ストリームを再取得するために使用できます、<xref:System.Console.SetIn%2A>メソッドです。  
  
   
  
## 例  
 次の例では、使用、`OpenStandardInput`プロパティです。  
  
 [!code-cpp[System.Console.OpenStandartInput\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.OpenStandartInput/CPP/decode.cpp#1)]
 [!code-csharp[System.Console.OpenStandartInput\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.OpenStandartInput/CS/decode.cs#1)]
 [!code-vb[System.Console.OpenStandartInput\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.OpenStandartInput/VB/decode.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.In" />
        <altmember cref="P:System.Console.IsInputRedirected" />
        <altmember cref="M:System.Console.SetIn(System.IO.TextReader)" />
      </Docs>
    </Member>
    <Member MemberName="OpenStandardInput">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardInput (int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardInput(int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardInput(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bufferSize">内部ストリーム バッファー サイズ。</param>
        <summary>指定したバッファー サイズに設定された標準入力ストリームを取得します。</summary>
        <returns>標準入力ストリーム。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、によって変更された後は、標準出力ストリームを再取得に使用できます、<xref:System.Console.SetIn%2A>メソッドです。  
  
   
  
## 例  
 次の例では、使用、`OpenStandardInput`プロパティです。  
  
 [!code-cpp[System.Console.OpenStandartInput\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.OpenStandartInput/CPP/decode.cpp#1)]
 [!code-csharp[System.Console.OpenStandartInput\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.OpenStandartInput/CS/decode.cs#1)]
 [!code-vb[System.Console.OpenStandartInput\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.OpenStandartInput/VB/decode.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="bufferSize" /> が 0 以下です。</exception>
        <altmember cref="P:System.Console.In" />
        <altmember cref="P:System.Console.IsInputRedirected" />
        <altmember cref="M:System.Console.SetIn(System.IO.TextReader)" />
      </Docs>
    </Member>
    <Member MemberName="OpenStandardOutput">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardOutput ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardOutput() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardOutput" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>標準出力ストリームを取得します。</summary>
        <returns>標準出力ストリーム。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、によって変更された後は、標準出力ストリームを再取得に使用できます、<xref:System.Console.SetOut%2A>メソッドです。  
  
   
  
## 例  
 <xref:System.Console.OpenStandardOutput%2A> メソッドの使用例を次に示します。 これにより、文字列内の 4 個の連続する空白文字がタブ文字に置き換えられます。 これを実行するには、次の 2 つのコマンドライン引数を指定してください。 1 つ目は、標準入力ストリームのリダイレクト先となる既存のテキスト ファイルの名前です。 2 つ目は、標準出力ストリームのリダイレクト先となるファイルの名前です。 このファイルは存在する必要はありません。 ファイルが存在する場合は、その内容が上書きされます。  
  
 [!code-cpp[System.Console\-INSERTTABS\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console\-INSERTTABS\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console\-INSERTTABS\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.Out" />
        <altmember cref="P:System.Console.IsOutputRedirected" />
        <altmember cref="M:System.Console.SetOut(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="OpenStandardOutput">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardOutput (int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardOutput(int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardOutput(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bufferSize">内部ストリーム バッファー サイズ。</param>
        <summary>指定したバッファー サイズに設定された標準出力ストリームを取得します。</summary>
        <returns>標準出力ストリーム。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、標準出力ストリームを再取得して変更した後に使用できます、 <xref:System.Console.SetOut%2A> メソッドです。  
  
   
  
## 例  
 <xref:System.Console.OpenStandardOutput%2A> メソッドの使用例を次に示します。 これにより、文字列内の 4 個の連続する空白文字がタブ文字に置き換えられます。 これを実行するには、2 つのコマンドライン引数を指定してください。 1 つ目は、標準入力ストリームのリダイレクト先となる既存のテキスト ファイルの名前です。 2 つ目は、標準出力ストリームのリダイレクト先となるファイルの名前です。 このファイルは存在する必要はありません。 ファイルが存在する場合は、その内容が上書きされます。  
  
 [!code-cpp[System.Console\-INSERTTABS\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console\-INSERTTABS\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console\-INSERTTABS\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="bufferSize" /> が 0 以下です。</exception>
        <altmember cref="P:System.Console.Out" />
        <altmember cref="P:System.Console.IsOutputRedirected" />
        <altmember cref="M:System.Console.SetOut(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="Out">
      <MemberSignature Language="C#" Value="public static System.IO.TextWriter Out { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IO.TextWriter Out" />
      <MemberSignature Language="DocId" Value="P:System.Console.Out" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>標準出力ストリームを取得します。</summary>
        <value>標準出力ストリームを表す <see cref="T:System.IO.TextWriter" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティが既定では標準出力ストリームに設定します。 別のストリームにこのプロパティを設定することができます、<xref:System.Console.SetOut%2A>メソッドです。  
  
 呼び出す`Console.Out.WriteLine`メソッドは、対応する呼び出しに相当する<xref:System.Console.WriteLine%2A>メソッドです。  
  
   
  
## 例  
 次の例では、<xref:System.Console.Out%2A>プロパティを標準出力デバイスにアプリケーションの現在のディレクトリ内のファイル名を格納する配列を表示します。 Files.txt をという名前のファイルを標準出力に設定し、ファイルに配列の要素を一覧表示します。 最後に、出力を標準出力ストリームに設定し、もう一度を標準出力デバイスに配列の要素が表示されます。  
  
 [!code-csharp[System.Console.Out\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.out/cs/out1.cs#1)]
 [!code-vb[System.Console.Out\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.out/vb/out1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.Error" />
        <altmember cref="P:System.Console.In" />
        <altmember cref="M:System.Console.SetOut(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="OutputEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding OutputEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding OutputEncoding" />
      <MemberSignature Language="DocId" Value="P:System.Console.OutputEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンソールが出力内容の書き込み時に使用するエンコーディングを取得または設定します。</summary>
        <value>コンソールが出力内容の書き込みに使用するエンコーディング。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 出力のエンコードを使用してコンソール表示に対応する文字にアプリケーションによって書き込まれた文字を変換するコンソール。 コンソールを使用する既定のコード ページは、システムのロケールによって決まります。  
  
 以降で、[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]プロパティの get 操作は、現在の出力エンコードをコンソールの代わりにキャッシュされた値を返す可能性があります。 これは、場合に発生することができますの値、<xref:System.Console.OutputEncoding%2A>への代入以外のいくつかの方法でプロパティが変更された、 <xref:System.Console.OutputEncoding%2A> 、Windows の呼び出しなどのプロパティ`SetConsoleOutputCP`関数。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作でのプロパティ値は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.IOException">この操作の実行中にエラーが発生しました。</exception>
        <exception cref="T:System.Security.SecurityException">アプリケーションに、この操作を実行するための権限がありません。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for reading and writing to top\-level windows and subwindows.  Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <block subset="none" type="usage">
          <para>Of the Unicode encodings, the <see cref="T:System.Console" /> class supports UTF-8 encoding with the <see cref="T:System.Text.UTF8Encoding" /> class and, starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], it supports UTF-16 encoding with the <see cref="T:System.Text.UnicodeEncoding" /> class. UTF-32 encoding with the <see cref="T:System.Text.UTF32Encoding" /> class is not supported. Attempting to set the output encoding to UTF-32 throws an <see cref="T:System.IO.IOException" />.  
  
 Note that successfully displaying Unicode characters to the console requires the following:  
  
-   The console must use a TrueType font, such as Lucida Console or Consolas, to display characters.  
  
-   A font used by the console must define the particular glyph or glyphs to be displayed. The console can take advantage of font linking to display glyphs from linked fonts if the base font does not contain a definition for that glyph.  
  
 For more information about support for Unicode encoding by the console, see the "Unicode Support for the Console" section in the <see cref="T:System.Console" /> class.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static int Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Read" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>標準入力ストリームから次の文字を読み取ります。</summary>
        <returns>入力ストリームの次の文字。または次の文字がない場合は \-1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Console.Read%2A>入力文字を入力するときに、メソッドは、戻り値をブロックです。 キーを押すと終了、<xref:System.ConsoleKey.Enter>キー。 プラットフォームに依存する行の終了シーケンスを入力に追加 Enter キーを押して \(たとえば、Windows がキャリッジ リターンとライン フィード シーケンスを追加する\)。 後続の呼び出し、<xref:System.Console.Read%2A>メソッドは、一度に、入力の 1 つの文字を取得します。 最後の文字が取得された後<xref:System.Console.Read%2A>戻り値をブロック再度とサイクルを繰り返します。  
  
> [!IMPORTANT]
>  <xref:System.Console.ReadLine%2A>メソッド、または<xref:System.Console.KeyAvailable%2A>プロパティおよび<xref:System.Console.ReadKey%2A>メソッドが使用することをお勧め、<xref:System.Console.Read%2A>メソッドです。  
  
 エントリの次の操作のいずれかを実行しない限り、メソッドは\-1 が返されませんに注意してください。  
  
-   同時にキーを押して、<xref:System.ConsoleModifiers.Control>修飾子キーと<xref:System.ConsoleKey.Z>コンソール キー \(Ctrl \+ Z\)、ファイル末尾の条件に通知します。  
  
-   Windows で F6 キーなど、ファイル末尾の条件のことを通知すると同じキーを押します。  
  
-   実際のファイルの終端文字が含まれるテキスト ファイルなどのソースには、入力ストリームをリダイレクトします。  
  
   
  
## 例  
 次の例で、<xref:System.Console.Read%2A>メソッドです。  
  
 [!code-cpp[console.read\#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.read/CPP/read.cpp#1)]
 [!code-csharp[console.read\#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.read/CS/read.cs#1)]
 [!code-vb[console.read\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.read/VB/read.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="ReadKey">
      <MemberSignature Language="C#" Value="public static ConsoleKeyInfo ReadKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ConsoleKeyInfo ReadKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.ReadKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ConsoleKeyInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ユーザーによって押された次の文字キーまたはファンクション キーを取得します。 押されたキーは、コンソール ウィンドウに表示されます。</summary>
        <returns>押されたコンソール キーに対応する <see cref="T:System.ConsoleKey" /> 定数と Unicode 文字 \(存在する場合\) を記述するオブジェクト。 また、<see cref="T:System.ConsoleKeyInfo" /> オブジェクトは、1 つ以上の Shift、Alt、Ctrl の各修飾子キーがコンソール キーと同時に押されたかどうかを <see cref="T:System.ConsoleModifiers" /> 値のビットごとの組み合わせで記述します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Console.ReadKey%2A>メソッドは、待機、つまり、発行元のスレッド上のメモリ ブロック、<xref:System.Console.ReadKey%2A>メソッドを文字キーまたはファンクション キーが押下されるまでです。 1 つまたは複数の alt キーを押し、ctrl キーまたは shift キーを押し修飾子キーの組み合わせで、文字キーまたはファンクション キーを押すこともできます。 ただし、それ自体で修飾子キーを押しては発生しません、<xref:System.Console.ReadKey%2A>メソッドを返します。  
  
 アプリケーションによっては、使用する可能性があります、<xref:System.Console.ReadKey%2A>メソッドと組み合わせて、<xref:System.Console.KeyAvailable%2A>プロパティです。  
  
 <xref:System.Console.ReadKey%2A>メソッドを持つファイルに標準の入力がリダイレクトされる場合でも、キーボードから読み取り、<xref:System.Console.SetIn%2A>メソッドです。  
  
   
  
## 例  
 最も一般的なのいずれかを使用して、<xref:System.Console.ReadKey>方法は、ユーザーがキーを押すと、アプリが終了またはのいずれかについての他のウィンドウを表示するまで、プログラムの実行を停止します。 次の例では、<xref:System.Console.ReadKey>メソッドをユーザーにアプリを終了する前に、Enter キーを押すを待機します。  
  
 [!code-csharp[System.Console.ReadKey\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Console.ReadKey/cs/ReadKey1.cs#1)]
 [!code-vb[System.Console.ReadKey\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Console.ReadKey/vb/ReadKey1.vb#1)]  
  
 Note that this overload of the <xref:System.Console.ReadKey%2A> method by default echoes any displayable keys that the user presses to the console. To suppress them, call the  <xref:System.Console.ReadKey%2A> method with an **parameterReference tag is not supported!!!!**  
 argument of **languageKeyword tag is not supported!!!!**  
.  
  
 次の例では、<xref:System.Console.ReadKey>メソッド、ユーザーが押されたキーに関する情報を表示する.  
  
 [!code-cpp[console.readkey1\#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.readkey1/CPP/rk.cpp#1)]
 [!code-csharp[console.readkey1\#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.readkey1/CS/rk.cs#1)]
 [!code-vb[console.readkey1\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.readkey1/VB/rk.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Console.In" /> プロパティは、コンソール以外のストリームからリダイレクトされます。</exception>
        <altmember cref="T:System.ConsoleKey" />
        <altmember cref="P:System.Console.KeyAvailable" />
        <altmember cref="P:System.Console.TreatControlCAsInput" />
        <altmember cref="E:System.Console.CancelKeyPress" />
      </Docs>
    </Member>
    <Member MemberName="ReadKey">
      <MemberSignature Language="C#" Value="public static ConsoleKeyInfo ReadKey (bool intercept);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ConsoleKeyInfo ReadKey(bool intercept) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.ReadKey(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ConsoleKeyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intercept" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="intercept">押されたキーをコンソール ウィンドウに表示するかどうかを決定します。 押されたキーを表示しない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>ユーザーによって押された次の文字キーまたはファンクション キーを取得します。 押されたキーは、オプションでコンソール ウィンドウに表示されます。</summary>
        <returns>押されたコンソール キーに対応する <see cref="T:System.ConsoleKey" /> 定数と Unicode 文字 \(存在する場合\) を記述するオブジェクト。 また、<see cref="T:System.ConsoleKeyInfo" /> オブジェクトは、1 つ以上の Shift、Alt、Ctrl の各修飾子キーがコンソール キーと同時に押されたかどうかを <see cref="T:System.ConsoleModifiers" /> 値のビットごとの組み合わせで記述します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Console.ReadKey%2A>メソッドは、待機、つまり、発行元のスレッド上のメモリ ブロック、<xref:System.Console.ReadKey%2A>メソッドを文字キーまたはファンクション キーが押下されるまでです。 1 つまたは複数の alt キーを押し、ctrl キーまたは shift キーを押し修飾子キーの組み合わせで、文字キーまたはファンクション キーを押すこともできます。 ただし、修飾子キーを押すと、それ自体では発生しません、<xref:System.Console.ReadKey%2A>を返すメソッド。  
  
 場合、`intercept`パラメーターは`true`、押されたキーが傍受および押されたキーが表示されていない、コンソール ウィンドウに表示されている以外の場合はそれ以外の場合、します。  
  
 アプリケーションによっては、使用する可能性があります、<xref:System.Console.ReadKey%2A>メソッドと組み合わせて、<xref:System.Console.KeyAvailable%2A>プロパティです。  
  
 <xref:System.Console.ReadKey%2A>メソッドを持つファイルに標準の入力がリダイレクトされる場合でも、キーボードから読み取り、<xref:System.Console.SetIn%2A>メソッドです。  
  
   
  
## 例  
 最も一般的なのいずれかを使用して、<xref:System.Console.ReadKey%2A>方法は、ユーザーがキーを押すと、アプリが終了またはのいずれかについての他のウィンドウを表示するまで、プログラムの実行を停止します。 次の例では、<xref:System.Console.ReadKey%28System.Boolean%29>アプリを終了する前に、Enter キーを押すようにユーザーに待機するメソッド。 ユーザーは、その他の任意のキーを押すと、ことはできません、コンソールにエコーに注意してください。  
  
 [!code-csharp[System.Console.ReadKey\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Console.ReadKey/cs/ReadKey2.cs#2)]
 [!code-vb[System.Console.ReadKey\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Console.ReadKey/vb/ReadKey2.vb#2)]  
  
 次の例では、<xref:System.Console.ReadKey%28System.Boolean%29>コンソールにそのキーをエコーすることがなく、ユーザーによって押されたキーに関する情報を表示するメソッド。  
  
 [!code-cpp[console.readkey2\#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.readkey2/CPP/rkbool.cpp#1)]
 [!code-csharp[console.readkey2\#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.readkey2/CS/rkbool.cs#1)]
 [!code-vb[console.readkey2\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.readkey2/VB/rkbool.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Console.In" /> プロパティは、コンソール以外のストリームからリダイレクトされます。</exception>
        <altmember cref="T:System.ConsoleKey" />
        <altmember cref="P:System.Console.KeyAvailable" />
        <altmember cref="P:System.Console.TreatControlCAsInput" />
        <altmember cref="E:System.Console.CancelKeyPress" />
      </Docs>
    </Member>
    <Member MemberName="ReadLine">
      <MemberSignature Language="C#" Value="public static string ReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.ReadLine" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>標準入力ストリームから次の 1 行分の文字を読み取ります。</summary>
        <returns>入力ストリームの次の行。または次の行がない場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Console.ReadLine%2A>メソッドは、標準入力ストリームから行を読み取ります。 \(行の定義、次のリストの後に、段落を参照してください\)。 これによって、次のことが起こります。  
  
-   標準入力デバイスが、キーボードの場合、<xref:System.Console.ReadLine%2A>メソッドはユーザーがまで、ブロック、 **Enter**キー。  
  
     最も一般的なのいずれかを使用して、<xref:System.Console.ReadLine%2A>メソッドはオフにすると、コンソールとして、新しい情報を表示する前に、プログラム実行を一時停止するか、またはアプリケーションを終了する前に Enter キーを押すようにユーザーに確認します。 次に例を示します。  
  
     [!code-cpp[System.Console.ReadLine\#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.ReadLine/cpp/ReadLineSimple.cpp#6)]
     [!code-csharp[System.Console.ReadLine\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.ReadLine/cs/ReadLineSimple.cs#6)]
     [!code-vb[System.Console.ReadLine\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.ReadLine/vb/ReadLineSimple.vb#6)]  
  
-   標準入力がファイルにリダイレクトされる場合、<xref:System.Console.ReadLine%2A>メソッドは、行のテキストをファイルから読み取ります。 たとえば、ReadLine1.txt をという名前のテキスト ファイルは、次のように。  
  
    ```  
  
    This is the first line.  
    This is the second line.  
    This is the third line.  
    This is the fourth line.  
  
    ```  
  
     次の例では、<xref:System.Console.ReadLine%2A>ファイルからリダイレクトされている入力を読み取ります。 メソッドが戻るときに、読み取り操作が終了する`null`、読み取られる行が残っていないことを示します。  
  
     [!code-csharp[System.Console.ReadLine\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.ReadLine/cs/ReadLine3.cs#3)]
     [!code-vb[System.Console.ReadLine\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.ReadLine/vb/ReadLine3.vb#3)]  
  
     実行可能ファイルの名前付き ReadLine1.exe する例をコンパイルすた後には、実行できます構文を使用してコマンドラインから  
  
    ```  
    ReadLine1 < ReadLine1.txt  
    ```  
  
     ファイルの内容を読み取るし、それらをコンソールに表示します。  
  
 行が文字の後にキャリッジ リターン \(16 進 0x000d\)、ライン フィード \(16 進 0x000a\)、またはの値のシーケンスとして定義されている、<xref:System.Environment.NewLine%2A?displayProperty=fullName>プロパティです。 返される文字列に終端文字が含まれていません。 既定では、このメソッドは、256 文字の入力バッファーからの入力を読み取ります。 これに含まれているため、<xref:System.Environment.NewLine%2A?displayProperty=fullName>文字、このメソッドは最大 254 文字を含む行を読み取ることができます。 長い行を読み取りを呼び出して、<xref:System.Console.OpenStandardInput%28System.Int32%29>メソッドです。  
  
 <xref:System.Console.ReadLine%2A>メソッドが同期的に実行します。 つまり、行が読み取られるか、ctrl キーを押しながら Z キーの組み合わせが押されるまでブロックします。<xref:System.Console.In%2A>プロパティから返される、<xref:System.IO.TextReader>オブジェクトを表す標準入力ストリームとを両方同期<xref:System.IO.TextReader.ReadLine%2A?displayProperty=fullName>メソッドおよび非同期<xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName>メソッドです。 ただし、コンソールの標準入力ストリームとして使用すると、<xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName>非同期的にではなく同期的に処理を実行し、返します、`Task<String>`読み取り操作が完了した後のみです。  
  
 このメソッドがスローされた場合に<xref:System.OutOfMemoryException>例外、基になるリーダーの位置<xref:System.IO.Stream>の文字を読み取るには、メソッドができましたが、内部に既に読み取られた文字数でオブジェクトが高度な<xref:System.Console.ReadLine%2A>バッファーは破棄されます。 既に読み取られた文字が回復することはできませんし、再初期化してのみアクセスできるストリーム内のリーダーの位置は変更できないため、<xref:System.IO.TextReader>です。 ストリーム内の最初の位置が不明か、ストリームがシークを基になるをサポートしていない場合<xref:System.IO.Stream>も再初期化する必要があります。 このような状況を回避し、堅牢なコードを生成するには、する必要がありますを使用する、<xref:System.Console.KeyAvailable%2A>プロパティおよび<xref:System.Console.ReadKey%2A>読み取りが事前に割り当てられたバッファーの文字メソッドとストアです。  
  
 このメソッドを返しますのかどうか、ctrl キーを押しながら Z キーを押すと、メソッドは、コンソールからの入力を読み取るときに、`null`です。 これにより、さらにキーボードを防ぐためにユーザー入力時に、<xref:System.Console.ReadLine%2A>ループ内でメソッドが呼び出されます。 次の例では、このシナリオを示します。  
  
 [!code-cpp[System.Console.ReadLine\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.ReadLine/cpp/readline2.cpp#1)]
 [!code-csharp[System.Console.ReadLine\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.ReadLine/cs/ReadLine2.cs#1)]
 [!code-vb[System.Console.ReadLine\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.ReadLine/vb/ReadLine2.vb#1)]  
  
   
  
## 例  
 次の例には、次の 2 つのコマンドライン引数が必要です。 既存のテキスト ファイルの名前と、出力を書き込むファイルの名前。 既存のテキスト ファイルを開くし、キーボードからそのファイルへの入力を標準のリダイレクトします。 出力ファイルに標準出力をコンソールからもリダイレクトします。 次を使用して、 <xref:System.Console.ReadLine%2A?displayProperty=fullName> 、ファイルの各行を読み取るメソッドが 4 つのスペースのすべてのシーケンスをタブ文字で置き換えますを使用して、<xref:System.Console.WriteLine%2A?displayProperty=fullName>出力ファイルに結果を書き込みます。  
  
 [!code-cpp[System.Console\-INSERTTABS\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console\-INSERTTABS\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console\-INSERTTABS\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <exception cref="T:System.OutOfMemoryException">返却された文字列にバッファーを割り当てるには、メモリが不足しています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">次の文字行の文字数が <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="ResetColor">
      <MemberSignature Language="C#" Value="public static void ResetColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ResetColor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.ResetColor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コンソールの前景色および背景色を既定値に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 前景色と背景色は、現在のプロセスを開始したときに存在していた色に復元されます。 詳細については、次を参照してください。、<xref:System.Console.ForegroundColor%2A>と<xref:System.Console.BackgroundColor%2A>プロパティです。  
  
   
  
## 例  
 次の例の値を保存する、<xref:System.ConsoleColor>配列を列挙の現在の値を格納し、<xref:System.Console.BackgroundColor%2A>と<xref:System.Console.ForegroundColor%2A>変数のプロパティです。 内の各色を前景の色が変更され、<xref:System.ConsoleColor>列挙体の現在の背景に一致する色になり、内の各色に背景色を変更、<xref:System.ConsoleColor>列挙体の色が現在の前面に一致する点が異なります。 \(前景の色、背景色と同じである場合、テキストは表示されません。\) 最後に、呼び出し、<xref:System.Console.ResetColor%2A>を元のコンソールの色を復元します。  
  
 [!code-csharp[System.ConsoleColor\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.consolecolor/cs/foregroundcolor3.cs#1)]
 [!code-vb[System.ConsoleColor\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.consolecolor/vb/foregroundcolor3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">ユーザーにこの操作を実行する権限がありません。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetBufferSize">
      <MemberSignature Language="C#" Value="public static void SetBufferSize (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetBufferSize(int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetBufferSize(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">列数で指定されたバッファー領域の幅。</param>
        <param name="height">行数で指定されたバッファー領域の高さ。</param>
        <summary>画面バッファー領域の高さと幅を指定された値に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例で、 <xref:System.Console.WindowLeft%2A>、 <xref:System.Console.WindowTop%2A>、 <xref:System.Console.WindowWidth%2A>、 <xref:System.Console.WindowHeight%2A>、 <xref:System.Console.BufferWidth%2A>、 <xref:System.Console.BufferHeight%2A>、および<xref:System.Console.CursorVisible%2A>プロパティおよび<xref:System.Console.SetWindowPosition%2A>、 <xref:System.Console.SetBufferSize%2A>、および<xref:System.Console.ReadKey%2A>メソッドです。 この例では、画面バッファーの幅に基づく画面バッファー内をグリッド パターンを描画します。 下矢印、左矢印または右矢印のコンソール キーが押された上向きの矢印のうち、応答で、コンソール ウィンドウを移動します。 グリッド パターンでは、画面バッファーに対するコンソール ウィンドウの移動を確認できます。  
  
 [!code-cpp[console.windowLT\#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.windowLT/CPP/wlt.cpp#1)]
 [!code-csharp[console.windowLT\#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.windowLT/CS/wlt.cs#1)]
 [!code-vb[console.windowLT\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.windowLT/VB/wlt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="height" /> または <paramref name="width" /> が 0 以下です。  
  
 \-または\-  
  
 <paramref name="height" /> または <paramref name="width" /> が <see cref="F:System.Int16.MaxValue" /> 以上です。  
  
 \-または\-  
  
 <paramref name="width" /> が <see cref="P:System.Console.WindowLeft" /> \+ <see cref="P:System.Console.WindowWidth" /> より小さい値です。  
  
 \-または\-  
  
 <paramref name="height" /> が <see cref="P:System.Console.WindowTop" /> \+ <see cref="P:System.Console.WindowHeight" /> より小さい値です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーにこの操作を実行する権限がありません。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetCursorPosition">
      <MemberSignature Language="C#" Value="public static void SetCursorPosition (int left, int top);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCursorPosition(int32 left, int32 top) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetCursorPosition(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="top" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="left">カーソルを置く列の位置。 列には、左から右に向かって 0 から始まる番号が付けられます。</param>
        <param name="top">カーソルを置く行の位置。 行には、上から下に向かって 0 から始まる番号が付けられます。</param>
        <summary>カーソルの位置を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、<xref:System.Console.SetCursorPosition%2A>コンソール ウィンドウに次の書き込み操作の開始を指定します。 指定したカーソル位置が、コンソール ウィンドウに現在表示されている領域の外側にある場合は、カーソルを表示するウィンドウの原点を自動的に変更します。  
  
 カーソルは自動的に毎回、文字は、コンソール ウィンドウに書き込まれます。 次の文字位置に移動します。 カーソルが、コンソール ウィンドウの下部にある右の文字位置にある場合は、次への書き込み操作時、コンソール ウィンドウをスクロール カーソルが表示されるようにします。 させずにスクロールして、使用するには、コンソール ウィンドウの下部右の文字位置に文字を書き込む場合、<xref:System.Console.MoveBufferArea%2A>文字をその位置に移動するメソッド。  
  
   
  
## 例  
 この例で、<xref:System.Console.CursorLeft%2A>と<xref:System.Console.CursorTop%2A>プロパティ、および<xref:System.Console.SetCursorPosition%2A>と<xref:System.Console.Clear%2A>メソッドです。 例では、カーソルの組み合わせを使用して 5 つの文字の四角形で 5 文字を描画し、次の書き込みが行われる場所を決定する「\+」、"&#124;"、および"\-"の文字列。 その他の文字列の組み合わせを使用して、少ない手順で四角形を描画するだったことに注意してください。  
  
 [!code-cpp[console.cursorLTS\#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorLTS/CPP/lts.cpp#1)]
 [!code-csharp[console.cursorLTS\#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorLTS/CS/lts.cs#1)]
 [!code-vb[console.cursorLTS\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorLTS/VB/lts.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="left" /> または <paramref name="top" /> が 0 未満です。  
  
 または  
  
 <paramref name="left" /> が <see cref="P:System.Console.BufferWidth" /> 以上です。  
  
 または  
  
 <paramref name="top" /> が <see cref="P:System.Console.BufferHeight" /> 以上です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーにこの操作を実行する権限がありません。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetError">
      <MemberSignature Language="C#" Value="public static void SetError (System.IO.TextWriter newError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetError(class System.IO.TextWriter newError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetError(System.IO.TextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newError" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="newError">新しい標準エラー出力であるストリーム。</param>
        <summary>指定された <see cref="T:System.IO.TextWriter" /> オブジェクトに <see cref="P:System.Console.Error" /> プロパティを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、<xref:System.Console.Error%2A>プロパティが標準エラー出力ストリームに設定します。  
  
 A<xref:System.IO.StreamWriter>をカプセル化する、<xref:System.IO.FileStream>ファイルにエラー メッセージを送信するために使用できます。  
  
   
  
## 例  
 次の例では、ファイルに標準エラー ストリームをリダイレクトする方法を示します。  
  
 [!code-cpp[System.Console.SetError\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.SetError/cpp/seterror1.cpp#1)]
 [!code-csharp[System.Console.SetError\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.SetError/cs/SetError1.cs#1)]
 [!code-vb[System.Console.SetError\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.SetError/vb/SetError1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="newError" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="P:System.Console.IsErrorRedirected" />
        <altmember cref="P:System.Console.Error" />
      </Docs>
    </Member>
    <Member MemberName="SetIn">
      <MemberSignature Language="C#" Value="public static void SetIn (System.IO.TextReader newIn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetIn(class System.IO.TextReader newIn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetIn(System.IO.TextReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newIn" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="newIn">新しい標準入力であるストリーム。</param>
        <summary>
          <see cref="P:System.Console.In" /> プロパティを、指定した <see cref="T:System.IO.TextReader" /> オブジェクトに設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、<xref:System.Console.In%2A>プロパティが標準入力ストリームに設定します。  
  
 A<xref:System.IO.StreamReader>をカプセル化する、<xref:System.IO.FileStream>ファイルからの入力を受信するために使用できます。  
  
   
  
## 例  
 <xref:System.Console.SetIn%2A> メソッドの使用例を次に示します。 これにより、文字列内の 4 個の連続する空白文字がタブ文字に置き換えられます。 これを実行するには、2 つのコマンドライン引数を指定してください。 1 つ目は、標準入力ストリームのリダイレクト先となる既存のテキスト ファイルの名前です。 2 つ目は、標準出力ストリームのリダイレクト先となるファイルの名前です。 このファイルは存在する必要はありません。 ファイルが存在する場合は、その内容が上書きされます。  
  
 [!code-cpp[System.Console\-INSERTTABS\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console\-INSERTTABS\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console\-INSERTTABS\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="newIn" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="T:System.IO.TextReader" />
        <altmember cref="P:System.Console.In" />
      </Docs>
    </Member>
    <Member MemberName="SetOut">
      <MemberSignature Language="C#" Value="public static void SetOut (System.IO.TextWriter newOut);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetOut(class System.IO.TextWriter newOut) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetOut(System.IO.TextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newOut" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="newOut">新しい標準出力であるストリーム。</param>
        <summary>
          <see cref="P:System.Console.Out" /> プロパティを、指定した <see cref="T:System.IO.TextWriter" /> オブジェクトに設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、<xref:System.Console.Out%2A>プロパティが標準出力ストリームに設定します。  
  
 A<xref:System.IO.StreamWriter>をカプセル化する、<xref:System.IO.FileStream>をファイルに出力を送信に使用することができます。 例:  
  
 [!code-cpp[System.Console.SetOut\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.console.setout/cpp/source.cpp#1)]
 [!code-csharp[System.Console.SetOut\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.setout/cs/source.cs#1)]
 [!code-vb[System.Console.SetOut\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.setout/vb/source.vb#1)]  
  
   
  
## 例  
 <xref:System.Console.SetOut%2A> メソッドの使用例を次に示します。 これにより、文字列内の 4 個の連続する空白文字がタブ文字に置き換えられます。 これを実行するには、2 つのコマンドライン引数を指定してください。 1 つ目は、標準入力ストリームのリダイレクト先となる既存のテキスト ファイルの名前です。 2 つ目は、標準出力ストリームのリダイレクト先となるファイルの名前です。 このファイルは存在する必要はありません。 ファイルが存在する場合は、その内容が上書きされます。  
  
 [!code-cpp[System.Console\-INSERTTABS\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console\-INSERTTABS\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console\-INSERTTABS\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="newOut" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.Console.Out" />
      </Docs>
    </Member>
    <Member MemberName="SetWindowPosition">
      <MemberSignature Language="C#" Value="public static void SetWindowPosition (int left, int top);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetWindowPosition(int32 left, int32 top) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetWindowPosition(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="top" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="left">コンソール ウィンドウの左上隅の列位置。</param>
        <param name="top">コンソール ウィンドウの左上隅の行位置。</param>
        <summary>画面バッファーに対するコンソール ウィンドウの相対位置を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オペレーティング システム ウィンドウ、コンソール ウィンドウを表示し、コンソール ウィンドウは、画面バッファーの一部を表示します。<xref:System.Console.SetWindowPosition%2A>メソッドは、コンソール ウィンドウ、画面バッファーに対する相対の位置に影響しますが、デスクトップの基準としたオペレーティング システムのウィンドウの位置には影響しません。  
  
 コンソールとオペレーティング システムの windows、通常は互いに影響しません。 ただし、画面バッファーをコンソール ウィンドウの境界の現在表示できない場合、オペレーティング システムに自動的にスクロール バーを追加オペレーティング システムのウィンドウします。 その場合は、コンソール ウィンドウの位置に影響を与えるオペレーティング システムのウィンドウのスクロール バーを移動し、コンソール ウィンドウに移動、<xref:System.Console.SetWindowPosition%2A>メソッドは、オペレーティング システム ウィンドウのスクロール バーの位置に影響します。  
  
   
  
## 例  
 次の例で、 <xref:System.Console.WindowLeft%2A>、 <xref:System.Console.WindowTop%2A>、 <xref:System.Console.WindowWidth%2A>、 <xref:System.Console.WindowHeight%2A>、 <xref:System.Console.BufferWidth%2A>、 <xref:System.Console.BufferHeight%2A>、および<xref:System.Console.CursorVisible%2A>プロパティおよび<xref:System.Console.SetWindowPosition%2A>、 <xref:System.Console.SetBufferSize%2A>、および<xref:System.Console.ReadKey%2A>メソッドです。 この例では、画面バッファーの幅に基づく画面バッファー内をグリッド パターンを描画します。 下矢印、左矢印または右矢印のコンソール キーが押された上向きの矢印のうち、応答で、コンソール ウィンドウを移動します。 グリッド パターンでは、画面バッファーに対するコンソール ウィンドウの移動を確認できます。  
  
 [!code-cpp[console.windowLT\#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.windowLT/CPP/wlt.cpp#1)]
 [!code-csharp[console.windowLT\#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.windowLT/CS/wlt.cs#1)]
 [!code-vb[console.windowLT\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.windowLT/VB/wlt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="left" /> または <paramref name="top" /> が 0 未満です。  
  
 または  
  
 <paramref name="left" /> \+ <see cref="P:System.Console.WindowWidth" /> が <see cref="P:System.Console.BufferWidth" /> より大きくなっています。  
  
 または  
  
 <paramref name="top" /> \+ <see cref="P:System.Console.WindowHeight" /> が <see cref="P:System.Console.BufferHeight" /> より大きくなっています。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーにこの操作を実行するアクセス許可がありません。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetWindowSize">
      <MemberSignature Language="C#" Value="public static void SetWindowSize (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetWindowSize(int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetWindowSize(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">列数で指定されたコンソール ウィンドウの幅。</param>
        <param name="height">行数で指定されたコンソール ウィンドウの高さ。</param>
        <summary>コンソール ウィンドウの高さと幅を指定された値に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 この例で、<xref:System.Console.SetWindowSize%2A>メソッド、および<xref:System.Console.WindowWidth%2A>と<xref:System.Console.WindowHeight%2A>プロパティです。 コンソール ウィンドウのサイズを変更した場合の効果を確認する例を実行する必要があります。  
  
 例では、85 列 43、や行をコンソール ウィンドウのサイズを報告し、キーが押されるを待機します。 任意のキーが押されたときに、コンソール ウィンドウのサイズが半分に、新しいディメンションが報告されると、および、例別のキーを押すを待機します。 最後に、任意のキーが押されたときに、コンソール ウィンドウが元の寸法に復元し、例では、終了します。  
  
 [!code-cpp[console.setwindowsize\#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.setwindowsize/CPP/sws.cpp#1)]
 [!code-csharp[console.setwindowsize\#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.setwindowsize/CS/sws.cs#1)]
 [!code-vb[console.setwindowsize\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.setwindowsize/VB/sws.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="width" /> または <paramref name="height" /> が 0 以下です。  
  
 または  
  
 <paramref name="width" /> に <see cref="P:System.Console.WindowLeft" /> を加算した値、または <paramref name="height" /> に <see cref="P:System.Console.WindowTop" /> を加算した値が <see cref="F:System.Int16.MaxValue" /> 以上です。  
  
 または  
  
 <paramref name="width" /> または <paramref name="height" /> が、現在の画面解像度とコンソールのフォントで利用可能なウィンドウの最大幅または高さを超えています。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーにこの操作を実行する権限がありません。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public static string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string Title" />
      <MemberSignature Language="DocId" Value="P:System.Console.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンソールのタイトル バーに表示するタイトルを取得または設定します。</summary>
        <value>コンソールのタイトル バーに表示される文字列。 タイトル文字列の最大長は 24500 文字です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 この例で、<xref:System.Console.Title%2A>プロパティです。 例では、現在のオペレーティング システム ウィンドウのタイトルを表示するには、キーを押すを待機し、新しいタイトルを表示します。  
  
 [!code-cpp[console.title\#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.title/CPP/mytitle.cpp#1)]
 [!code-csharp[console.title\#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.title/CS/mytitle.cs#1)]
 [!code-vb[console.title\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.title/VB/mytitle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">取得操作において、取得したタイトルが 24500 文字を超えています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作において、指定されたしたタイトルが 24500 文字を超えています。</exception>
        <exception cref="T:System.ArgumentNullException">設定操作で、指定されたタイトルが <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="TreatControlCAsInput">
      <MemberSignature Language="C#" Value="public static bool TreatControlCAsInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool TreatControlCAsInput" />
      <MemberSignature Language="DocId" Value="P:System.Console.TreatControlCAsInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="F:System.ConsoleModifiers.Control" /> 修飾キーと <see cref="F:System.ConsoleKey.C" /> コンソール キーの組み合わせ \(Ctrl \+ C\) を、通常の入力として扱うか、オペレーティング システムにより処理される割り込みとして扱うかを示す値を取得または設定します。</summary>
        <value>Ctrl \+ C を通常の入力として扱う場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合の値、<xref:System.Console.TreatControlCAsInput%2A>プロパティは`false`Ctrl \+ C キーを押すと、押されたキーが入力バッファーに格納されませんし、オペレーティング システムが現在実行中のプロセスを終了します。 これが既定値です。  
  
> [!CAUTION]
>  設定するために、このプロパティを注意深く使用`true`大幅このような影響を与えます。 ほとんどのユーザーには、コンソール アプリケーションを終了するには、Ctrl \+ C が期待されます。 Ctrl \+ C の効果を無効にした場合、ユーザーはあまり知られていないキーの組み合わせであると、アプリケーションを終了する Ctrl \+ Break を使用することを忘れないでください。  
  
   
  
## 例  
 次の例で、<xref:System.Console.TreatControlCAsInput%2A>プロパティです。  
  
 [!code-cpp[console.readkey1\#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.readkey1/CPP/rk.cpp#1)]
 [!code-csharp[console.readkey1\#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.readkey1/CS/rk.cs#1)]
 [!code-vb[console.readkey1\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.readkey1/VB/rk.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">コンソールの入力バッファーの入力モードを取得または設定できません。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="F:System.ConsoleModifiers.Control" />
        <altmember cref="F:System.ConsoleKey.C" />
        <altmember cref="E:System.Console.CancelKeyPress" />
      </Docs>
    </Member>
    <Member MemberName="WindowHeight">
      <MemberSignature Language="C#" Value="public static int WindowHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowHeight" />
      <MemberSignature Language="DocId" Value="P:System.Console.WindowHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンソール ウィンドウ領域の高さを取得または設定します。</summary>
        <value>行数で指定されたコンソール ウィンドウの高さ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値を設定しようとすると、<xref:System.Console.WindowHeight%2A>出力がリダイレクトされたときにプロパティをスローするか、<xref:System.ArgumentOutOfRangeException>または<xref:System.IO.IOException>例外。 例外を防ぐためには、場合にのみ、このプロパティの値を設定することができます、<xref:System.Console.IsOutputRedirected%2A>プロパティから返される`false`です。  
  
   
  
## 例  
 この例で、<xref:System.Console.SetWindowSize%2A>メソッド、および<xref:System.Console.WindowWidth%2A>と<xref:System.Console.WindowHeight%2A>プロパティです。 コンソール ウィンドウのサイズを変更した場合の効果を確認する例を実行する必要があります。  
  
 例では、85 列 43、や行をコンソール ウィンドウのサイズを報告し、キーを押すを待機します。 任意のキーが押されたときにコンソール ウィンドウのサイズが半分に、新しいディメンションが報告されると、および、例別のキーを押すを待機します。 最後に、任意のキーが押されたときに、コンソール ウィンドウが元の寸法に復元し、例では、終了します。  
  
 [!code-cpp[console.setwindowsize\#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.setwindowsize/CPP/sws.cpp#1)]
 [!code-csharp[console.setwindowsize\#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.setwindowsize/CS/sws.cs#1)]
 [!code-vb[console.setwindowsize\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.setwindowsize/VB/sws.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.Console.WindowWidth" /> プロパティの値または <see cref="P:System.Console.WindowHeight" /> プロパティの値が 0 以下です。  
  
 または  
  
 <see cref="P:System.Console.WindowHeight" /> プロパティの値と <see cref="P:System.Console.WindowTop" /> プロパティの値を加算した値が <see cref="F:System.Int16.MaxValue" /> 以上です。  
  
 または  
  
 <see cref="P:System.Console.WindowWidth" /> プロパティの値または <see cref="P:System.Console.WindowHeight" /> プロパティの値が、現在の画面の解像度およびコンソールのフォントで利用可能なウィンドウの最大幅か最大の高さを超えています。</exception>
        <exception cref="T:System.IO.IOException">読み取りまたは書き込み情報エラー。</exception>
      </Docs>
    </Member>
    <Member MemberName="WindowLeft">
      <MemberSignature Language="C#" Value="public static int WindowLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowLeft" />
      <MemberSignature Language="DocId" Value="P:System.Console.WindowLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンソール ウィンドウ領域の左端の位置を、画面バッファーの相対位置として取得または設定します。</summary>
        <value>列で測定されるコンソール ウィンドウの左端の位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コンソールより大きな四角形のバッファー領域に四角形のウィンドウを表します。 行の数、および水平方向に列の番号では、ウィンドウと、バッファーの両方が垂直方向に測定されます。 バッファー領域の大きさがによって定義された、<xref:System.Console.BufferHeight%2A>と<xref:System.Console.BufferWidth%2A>プロパティです。 コンソールの領域の大きさがによって定義された、<xref:System.Console.WindowHeight%2A>と<xref:System.Console.WindowWidth%2A>プロパティです。<xref:System.Console.WindowLeft%2A>プロパティ バッファー領域の列は、コンソール ウィンドウの最初の列の表示を決定します。 値、<xref:System.Console.WindowLeft%2A>プロパティの範囲は 0 ~ <xref:System.Console.BufferWidth%2A> \-<xref:System.Console.WindowWidth%2A>です。 それ以外の値に設定しようとしています。 範囲はがスローされます、<xref:System.ArgumentOutOfRangeException>です。  
  
 ときに、コンソール ウィンドウを初めて開いたの既定値、<xref:System.Console.WindowLeft%2A>プロパティが 0 で、コンソールで表示される最初の列がバッファー領域の最初の列 \(ゼロの位置にある列\) に対応していることを示します。 コンソール ウィンドウとバッファー領域の両方の既定の幅は、80 列です。 つまり、<xref:System.Console.WindowLeft%2A>プロパティは、コンソール ウィンドウの幅の狭いが行われたか、バッファー領域を広く場合にのみ変更できます。  
  
 バッファー領域の幅が、コンソール ウィンドウの値の幅を超える場合、<xref:System.Console.WindowLeft%2A>プロパティは、ユーザーでは、水平スクロール バーを使用して、バッファー領域をウィンドウのリレーションシップを定義するときに自動的に調整します。  
  
 値を設定しようとすると、<xref:System.Console.WindowLeft%2A>プロパティ出力がリダイレクトがスローされます、<xref:System.IO.IOException>例外。 例外を防ぐためには、場合にのみ、このプロパティの値を設定することができます、<xref:System.Console.IsOutputRedirected%2A>プロパティから返される`false`です。  
  
   
  
## 例  
 次の例では、80 列のコンソール ウィンドウを開きます。 し、120 列の幅であるバッファー領域を定義します。 ウィンドウとバッファーのサイズに関する情報を表示し、ユーザーに、左方向キーまたは右方向キーを押すを待機します。 前者の場合、デクリメントの値、<xref:System.Console.WindowLeft%2A>プロパティを 1 の場合は、結果は、有効な値です。 値を増加している後者の場合、<xref:System.Console.WindowLeft%2A>プロパティを 1 の場合は、結果は有効になります。 例を処理する必要はありません、<xref:System.ArgumentOutOfRangeException>をチェックするために割り当てられる値、<xref:System.Console.WindowLeft%2A>プロパティが負の値との合計は行われません、<xref:System.Console.WindowLeft%2A>と<xref:System.Console.WindowWidth%2A>プロパティを超える、<xref:System.Console.BufferWidth%2A>プロパティの値。  
  
 [!code-cpp[System.Console.WindowLeft\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.console.windowleft/cpp/windowleft1.cpp#1)]
 [!code-csharp[System.Console.WindowLeft\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.windowleft/cs/windowleft1.cs#1)]
 [!code-vb[System.Console.WindowLeft\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.windowleft/vb/windowleft1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作で、割り当てられる値が 0 未満です。  
  
 \-または\-  
  
 代入結果として、<see cref="P:System.Console.WindowLeft" /> に <see cref="P:System.Console.WindowWidth" /> を加算すると <see cref="P:System.Console.BufferWidth" /> より大きくなります。</exception>
        <exception cref="T:System.IO.IOException">読み取りまたは書き込み情報エラー。</exception>
      </Docs>
    </Member>
    <Member MemberName="WindowTop">
      <MemberSignature Language="C#" Value="public static int WindowTop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowTop" />
      <MemberSignature Language="DocId" Value="P:System.Console.WindowTop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンソール ウィンドウ領域の上端の位置を、画面バッファーに対する相対位置として取得または設定します。</summary>
        <value>コンソール ウィンドウの上端の位置 \(行\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コンソールより大きな四角形のバッファー領域に四角形のウィンドウを表します。 行の数、および水平方向に列の番号では、ウィンドウと、バッファーの両方が垂直方向に測定されます。 バッファー領域の大きさがによって定義された、<xref:System.Console.BufferHeight%2A>と<xref:System.Console.BufferWidth%2A>プロパティです。 コンソールの領域の大きさがによって定義された、<xref:System.Console.WindowHeight%2A>と<xref:System.Console.WindowWidth%2A>プロパティです。<xref:System.Console.WindowTop%2A>プロパティ バッファー領域の行は、コンソール ウィンドウの最初の列の表示を決定します。 値、<xref:System.Console.WindowTop%2A>プロパティの範囲は 0 を<xref:System.Console.BufferHeight%2A>\-<xref:System.Console.WindowHeight%2A>です。 それ以外の値に設定しようとしています。 範囲はがスローされます、<xref:System.ArgumentOutOfRangeException>です。  
  
 値を設定しようとすると、<xref:System.Console.WindowTop%2A>プロパティ出力がリダイレクトがスローされます、<xref:System.IO.IOException>例外。 例外を防ぐためには、場合にのみ、このプロパティの値を設定することができます、<xref:System.Console.IsOutputRedirected%2A>プロパティから返される`false`です。  
  
   
  
## 例  
 次の例で、 <xref:System.Console.WindowLeft%2A>、 <xref:System.Console.WindowTop%2A>、 <xref:System.Console.WindowWidth%2A>、 <xref:System.Console.WindowHeight%2A>、 <xref:System.Console.BufferWidth%2A>、 <xref:System.Console.BufferHeight%2A>、および<xref:System.Console.CursorVisible%2A>プロパティおよび<xref:System.Console.SetWindowPosition%2A>、 <xref:System.Console.SetBufferSize%2A>、および<xref:System.Console.ReadKey%2A>メソッドです。 この例では、画面バッファーの幅に基づく画面バッファー内をグリッド パターンを描画します。 下矢印、左矢印または右矢印のコンソール キーが押された上向きの矢印のうち、応答で、コンソール ウィンドウを移動します。 グリッド パターンでは、画面バッファーに対するコンソール ウィンドウの移動を確認できます。  
  
 [!code-cpp[console.windowLT\#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.windowLT/CPP/wlt.cpp#1)]
 [!code-csharp[console.windowLT\#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.windowLT/CS/wlt.cs#1)]
 [!code-vb[console.windowLT\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.windowLT/VB/wlt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作で、代入値が 0 より小さくなっています。  
  
 \-または\-  
  
 代入結果として、<see cref="P:System.Console.WindowTop" /> に <see cref="P:System.Console.WindowHeight" /> を加算すると <see cref="P:System.Console.BufferHeight" /> より大きくなります。</exception>
        <exception cref="T:System.IO.IOException">読み取りまたは書き込み情報エラー。</exception>
      </Docs>
    </Member>
    <Member MemberName="WindowWidth">
      <MemberSignature Language="C#" Value="public static int WindowWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowWidth" />
      <MemberSignature Language="DocId" Value="P:System.Console.WindowWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンソール ウィンドウの幅を取得または設定します。</summary>
        <value>列数で指定されたコンソール ウィンドウの幅。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値を設定しようとすると、<xref:System.Console.WindowWidth%2A>出力がリダイレクトされたときにプロパティをスローするか、<xref:System.ArgumentOutOfRangeException>または<xref:System.IO.IOException>例外。 例外を防ぐためには、場合にのみ、このプロパティの値を設定することができます、<xref:System.Console.IsOutputRedirected%2A>プロパティから返される`false`です。  
  
   
  
## 例  
 この例で、<xref:System.Console.SetWindowSize%2A>メソッド、および<xref:System.Console.WindowWidth%2A>と<xref:System.Console.WindowHeight%2A>プロパティです。 コンソール ウィンドウのサイズを変更した場合の効果を確認する例を実行する必要があります。  
  
 例では、85 列 43、や行をコンソール ウィンドウのサイズを報告し、キーを押すを待機します。 任意のキーが押されたときに、コンソール ウィンドウのサイズが半分に、新しいディメンションが報告されると、および、例別のキーを押すを待機します。 最後に、任意のキーが押されたときに、コンソール ウィンドウが元の寸法に復元し、例では、終了します。  
  
 [!code-cpp[console.setwindowsize\#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.setwindowsize/CPP/sws.cpp#1)]
 [!code-csharp[console.setwindowsize\#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.setwindowsize/CS/sws.cs#1)]
 [!code-vb[console.setwindowsize\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.setwindowsize/VB/sws.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.Console.WindowWidth" /> プロパティの値または <see cref="P:System.Console.WindowHeight" /> プロパティの値が 0 以下です。  
  
 または  
  
 <see cref="P:System.Console.WindowHeight" /> プロパティの値と <see cref="P:System.Console.WindowTop" /> プロパティの値を加算した値が <see cref="F:System.Int16.MaxValue" /> 以上です。  
  
 または  
  
 <see cref="P:System.Console.WindowWidth" /> プロパティの値または <see cref="P:System.Console.WindowHeight" /> プロパティの値が、現在の画面の解像度およびコンソールのフォントで利用可能なウィンドウの最大幅か最大の高さを超えています。</exception>
        <exception cref="T:System.IO.IOException">読み取りまたは書き込み情報エラー。</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した Boolean 値のテキスト形式を標準出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 テキスト形式の`value`呼び出しによって生成された<xref:System.Boolean.ToString%2A?displayProperty=fullName>、いずれかが出力される<xref:System.Boolean.TrueString?displayProperty=fullName>または<xref:System.Boolean.FalseString?displayProperty=fullName>です。  
  
   
  
## 例  
 `Write` メソッドの使用例を次に示します。  
  
 [!code-cpp[System.Console\-REFORMAT\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console\-REFORMAT\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console\-REFORMAT\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した Unicode 文字値を標準出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 `Write` メソッドの使用例を次に示します。  
  
 [!code-cpp[System.Console\-REFORMAT\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console\-REFORMAT\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console\-REFORMAT\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Char[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">Unicode 文字配列。</param>
        <summary>指定した Unicode 文字配列を標準出力ストリームに書き込みます。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Decimal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した <see cref="T:System.Decimal" /> 値のテキスト形式を標準出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 テキスト表現`value`呼び出しによって生成された<xref:System.Decimal.ToString%2A?displayProperty=fullName>です。  
  
   
  
## 例  
 `Write` メソッドの使用例を次に示します。  
  
 [!code-cpp[System.Console\-REFORMAT\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console\-REFORMAT\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console\-REFORMAT\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した倍精度浮動小数点値のテキスト形式を標準出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 テキスト表現`value`呼び出しによって生成された、<xref:System.Double.ToString%2A?displayProperty=fullName>メソッドです。  
  
   
  
## 例  
 `Write` メソッドの使用例を次に示します。  
  
 [!code-cpp[System.Console\-REFORMAT\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console\-REFORMAT\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console\-REFORMAT\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した 32 ビット符号付き整数値のテキスト形式を標準出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 テキスト表現`value`呼び出しによって生成された、<xref:System.Int32.ToString%2A?displayProperty=fullName>メソッドです。  
  
   
  
## 例  
 `Write` メソッドの使用例を次に示します。  
  
 [!code-cpp[System.Console\-REFORMAT\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console\-REFORMAT\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console\-REFORMAT\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した 64 ビット符号付き整数値のテキスト形式を標準出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 テキスト表現`value`呼び出しによって生成された、<xref:System.Int64.ToString%2A?displayProperty=fullName>メソッドです。  
  
   
  
## 例  
 `Write` メソッドの使用例を次に示します。  
  
 [!code-cpp[System.Console\-REFORMAT\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console\-REFORMAT\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console\-REFORMAT\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値または <see langword="null" />。</param>
        <summary>指定したオブジェクトのテキスト形式を標準出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合`value`は`null`、何が書き込まれ、例外はスローされません。 それ以外の場合、`ToString`メソッドの`value`は、文字列形式を生成するために呼び出され、結果の文字列が標準出力ストリームに書き込まれます。  
  
   
  
## 例  
 `Write` メソッドの使用例を次に示します。  
  
 [!code-cpp[System.Console\-REFORMAT\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console\-REFORMAT\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console\-REFORMAT\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した単精度浮動小数点値のテキスト形式を標準出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 テキスト表現`value`呼び出しによって生成された、<xref:System.Single.ToString%2A?displayProperty=fullName>メソッドです。  
  
   
  
## 例  
 `Write` メソッドの使用例を次に示します。  
  
 [!code-cpp[System.Console\-REFORMAT\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console\-REFORMAT\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console\-REFORMAT\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した文字列値を標準出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値が場合`null`、標準出力ストリームに何も書き込まれません。  
  
   
  
## 例  
 `Write` メソッドの使用例を次に示します。  
  
 [!code-cpp[System.Console\-REFORMAT\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console\-REFORMAT\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console\-REFORMAT\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.UInt32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した 32 ビット符号なし整数値のテキスト形式を標準出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 テキスト表現`value`呼び出しによって生成された、<xref:System.UInt32.ToString%2A?displayProperty=fullName>メソッドです。  
  
   
  
## 例  
 `Write` メソッドの使用例を次に示します。  
  
 [!code-cpp[System.Console\-REFORMAT\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console\-REFORMAT\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console\-REFORMAT\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.UInt64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した 64 ビット符号なし整数値のテキスト形式を標準出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 テキスト表現`value`呼び出しによって生成された、<xref:System.UInt64.ToString%2A?displayProperty=fullName>メソッドです。  
  
   
  
## 例  
 次の例では、使用、`Write` メソッドです。  
  
 [!code-cpp[System.Console\-REFORMAT\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console\-REFORMAT\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console\-REFORMAT\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">複合書式指定文字列 \(「解説」を参照\)。</param>
        <param name="arg0">
          <c>format</c> を使用して書き込むオブジェクト。</param>
        <summary>指定した書式情報を使用して、指定したオブジェクトのテキスト表現を標準出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method uses the [composite formatting feature](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  
  
 The syntax of a format item is **languageKeyword tag is not supported!!!!**  
**placeholder tag is not supported!!!!**  
\[**languageKeyword tag is not supported!!!!**  
**placeholder tag is not supported!!!!**  
\]\[**languageKeyword tag is not supported!!!!**  
**placeholder tag is not supported!!!!**  
\]**languageKeyword tag is not supported!!!!**  
, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  
  
 The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  
  
-   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49).  
  
-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467) and [Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4).  
  
-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/bb79761a-ca08-44ee-b142-b06b3e2fc22b) and [Custom Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/98b374e3-0cc2-4c78-ab44-efb671d71984).  
  
-   For more information about enumeration format specifiers, see [Enumeration Format Strings](http://msdn.microsoft.com/ja-jp/dd1ff672-1052-42cf-8666-4924fb6cd1a1).  
  
-   For more information about formatting, see [Formatting Types in the .NET Framework](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f).  
  
   
  
## 例  
 The following example uses the **languageKeyword tag is not supported!!!!**  
 method to demonstrate the standard formatting specifiers for numbers, dates, and enumerations.  
  
 [!code-cpp[console.writelineFmt1\#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)]
 [!code-csharp[console.writelineFmt1\#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 The following example illustrates the use of the <xref:System.Console.Write%2A> method.  
  
 [!code-cpp[System.Console\-REFORMAT\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console\-REFORMAT\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console\-REFORMAT\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> の書式指定が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">複合書式指定文字列 \(「解説」を参照\)。</param>
        <param name="arg">
          <c>format</c> を使用して書き込むオブジェクトの配列。</param>
        <summary>指定された書式情報を使用して、指定したオブジェクト配列のテキスト表現を標準出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method uses the  [composite formatting feature](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  
  
 The syntax of a format item is **languageKeyword tag is not supported!!!!**  
**placeholder tag is not supported!!!!**  
\[**languageKeyword tag is not supported!!!!**  
**placeholder tag is not supported!!!!**  
\]\[**languageKeyword tag is not supported!!!!**  
**placeholder tag is not supported!!!!**  
\]**languageKeyword tag is not supported!!!!**  
, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  
  
 The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  
  
-   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49).  
  
-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467) and [Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4).  
  
-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/bb79761a-ca08-44ee-b142-b06b3e2fc22b) and [Custom Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/98b374e3-0cc2-4c78-ab44-efb671d71984).  
  
-   For more information about enumeration format specifiers, see [Enumeration Format Strings](http://msdn.microsoft.com/ja-jp/dd1ff672-1052-42cf-8666-4924fb6cd1a1).  
  
-   For more information about formatting, see [Formatting Types in the .NET Framework](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f).  
  
 The **parameterReference tag is not supported!!!!**  
 parameter is a parameter array. Arguments  can be passed to the method either as an array or as list of five or more items. The examples illustrate both forms of method call.  
  
   
  
## 例  
 The following example defines a `Person` class with a number of properties that provide information about a person. Its `GetDescription` method returns an array that contains all of the property values except one. The example then uses the array returned by the  `GetDescription` method  to display the values of the Person object.  
  
 [!code-csharp[System.Console.Write\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.write/cs/WriteParams1.cs#1)]
 [!code-vb[System.Console.Write\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.write/vb/WriteParams1.vb#1)]  
  
 Note that the example calls the <xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29> method rather than the <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29> method because it attempts to display the value of the `Person.Remarks` property on the same line. To do this, it examines the value of the <xref:System.Console.CursorLeft%2A> and <xref:System.Console.WindowWidth%2A> properties to determine whether there is enough space for the remark to fit.  If there is, it displays the line. If not, it writes a line, indents three spaces, and displays the remark.  
  
 The following example is identical to the first, except that it supplies a five\-item list as the **parameterReference tag is not supported!!!!**  
 argument instead of a parameter array.  
  
 [!code-csharp[System.Console.Write\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.write/cs/WriteParams2.cs#2)]
 [!code-vb[System.Console.Write\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.write/vb/WriteParams2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> または <paramref name="arg" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> の書式指定が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <block subset="none" type="usage">
          <para>This method is not called by C++ code. The C++ compiler resolves calls to <see cref="Overload:System.Console.Write" /> that include a string and a list of four or more object parameters as a call to <see cref="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)" />. It resolves calls to <see cref="Overload:System.Console.Write" /> that include a string and an object array as a call to <see cref="M:System.Console.Write(System.String,System.Object)" />.</para>
        </block>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Char[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Unicode 文字の配列。</param>
        <param name="index">
          <c>buffer</c> 内の開始位置。</param>
        <param name="count">書き込む文字数。</param>
        <summary>指定した Unicode 文字の部分配列を標準出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは書き込みます`count`位置から始まる文字`index`の`buffer`を標準出力ストリームにします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> または <paramref name="count" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> と <paramref name="count" /> の合計が指定する位置は、<paramref name="buffer" /> 内ではありません。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">複合書式指定文字列 \(「解説」を参照\)。</param>
        <param name="arg0">
          <c>format</c> を使用して書き込む最初のオブジェクト。</param>
        <param name="arg1">
          <c>format</c> を使用して書き込む 2 番目のオブジェクト。</param>
        <summary>指定した書式情報を使用して、指定したオブジェクトのテキスト表現を標準出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method uses the [composite formatting feature](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  
  
 The syntax of a format item is **languageKeyword tag is not supported!!!!**  
**placeholder tag is not supported!!!!**  
\[**languageKeyword tag is not supported!!!!**  
**placeholder tag is not supported!!!!**  
\]\[**languageKeyword tag is not supported!!!!**  
**placeholder tag is not supported!!!!**  
\]**languageKeyword tag is not supported!!!!**  
, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  
  
 The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  
  
-   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49).  
  
-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467) and [Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4).  
  
-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/bb79761a-ca08-44ee-b142-b06b3e2fc22b) and [Custom Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/98b374e3-0cc2-4c78-ab44-efb671d71984).  
  
-   For more information about enumeration format specifiers, see [Enumeration Format Strings](http://msdn.microsoft.com/ja-jp/dd1ff672-1052-42cf-8666-4924fb6cd1a1).  
  
-   For more information about formatting, see [Formatting Types in the .NET Framework](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f).  
  
   
  
## 例  
 The following example uses the **languageKeyword tag is not supported!!!!**  
 method to demonstrate the standard formatting specifiers for numbers, dates, and enumerations.  
  
 [!code-cpp[console.writelineFmt1\#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)]
 [!code-csharp[console.writelineFmt1\#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 The following example illustrates the use of the **languageKeyword tag is not supported!!!!**  
 method.  
  
 [!code-cpp[System.Console\-REFORMAT\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console\-REFORMAT\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console\-REFORMAT\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> の書式指定が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">複合書式指定文字列 \(「解説」を参照\)。</param>
        <param name="arg0">
          <c>format</c> を使用して書き込む最初のオブジェクト。</param>
        <param name="arg1">
          <c>format</c> を使用して書き込む 2 番目のオブジェクト。</param>
        <param name="arg2">
          <c>format</c> を使用して書き込む 3 番目のオブジェクト。</param>
        <summary>指定した書式情報を使用して、指定したオブジェクトのテキスト表現を標準出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method uses the [composite formatting feature](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  
  
 The syntax of a format item is **languageKeyword tag is not supported!!!!**  
**placeholder tag is not supported!!!!**  
\[**languageKeyword tag is not supported!!!!**  
**placeholder tag is not supported!!!!**  
\]\[**languageKeyword tag is not supported!!!!**  
**placeholder tag is not supported!!!!**  
\]**languageKeyword tag is not supported!!!!**  
, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  
  
 The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  
  
-   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49).  
  
-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467) and [Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4).  
  
-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/bb79761a-ca08-44ee-b142-b06b3e2fc22b) and [Custom Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/98b374e3-0cc2-4c78-ab44-efb671d71984).  
  
-   For more information about enumeration format specifiers, see [Enumeration Format Strings](http://msdn.microsoft.com/ja-jp/dd1ff672-1052-42cf-8666-4924fb6cd1a1).  
  
-   For more information about formatting, see [Formatting Types in the .NET Framework](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f).  
  
   
  
## 例  
 The following example uses the **languageKeyword tag is not supported!!!!**  
 method to demonstrate the standard formatting specifiers for numbers, dates, and enumerations.  
  
 [!code-cpp[console.writelineFmt1\#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)]
 [!code-csharp[console.writelineFmt1\#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 The following example illustrates the use of the **languageKeyword tag is not supported!!!!**  
 method.  
  
 [!code-cpp[System.Console\-REFORMAT\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console\-REFORMAT\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console\-REFORMAT\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> の書式指定が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0, object arg1, object arg2, object arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0, object arg1, object arg2, object arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
        <Parameter Name="arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">複合書式指定文字列 \(「解説」を参照\)。</param>
        <param name="arg0">
          <c>format</c> を使用して書き込む最初のオブジェクト。</param>
        <param name="arg1">
          <c>format</c> を使用して書き込む 2 番目のオブジェクト。</param>
        <param name="arg2">
          <c>format</c> を使用して書き込む 3 番目のオブジェクト。</param>
        <param name="arg3">
          <c>format</c> を使用して書き込む 4 番目のオブジェクト。</param>
        <summary>指定した書式情報を使用して、指定したオブジェクトのテキスト表現と可変長パラメーター リストを標準出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  この API は、CLS に準拠していません。 CLS 準拠の代わりとして <xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> を使用できます。 C\# および Visual Basic コンパイラに自動的に解決するにはこのメソッドの呼び出しの呼び出しとして<xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29?displayProperty=fullName>です。  
  
 このメソッドを使用して、[複合書式指定機能](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49)をテキスト形式のオブジェクトの値を変換し、その表現を文字列に埋め込むには、.NET Framework のです。 結果の文字列は、出力ストリームに書き込まれます。  
  
 `format`パラメーターは、ゼロまたは 0 個以上のインデックス付きプレース ホルダー、このメソッドのパラメーター リスト内のオブジェクトに対応する書式指定項目と呼ばれる個以上のテキストが混在します。 書式設定のプロセスでは、対応するオブジェクトの値のテキスト形式で各書式項目を置換します。  
  
 書式指定項目の構文が`{`*インデックス*\[`,`*配置*\] \[`:`*formatString*\]`}`、必須のインデックス オプションの長さ、フォーマットされたテキストの配置を指定して、オプションの対応する値のオブジェクトを制御する書式指定子文字の文字列の形式ができます。  
  
 .NET Framework では、広範な書式設定の次のトピックで詳しく説明されている書式設定サポートを提供します。  
  
-   複合書式指定などのメソッドによってサポートされる機能の詳細については<xref:System.String.Format%2A>、 <xref:System.Text.StringBuilder.AppendFormat%2A>、および一部のオーバー ロードの<xref:System.Console.WriteLine%2A>を参照してください[Composite Formatting](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49)です。  
  
-   数値書式指定子の詳細については、次を参照してください。[Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467)と[Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4)です。  
  
-   についての日付と時刻の書式指定子の詳細については、次を参照してください。[Standard Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/bb79761a-ca08-44ee-b142-b06b3e2fc22b)と[Custom Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/98b374e3-0cc2-4c78-ab44-efb671d71984)です。  
  
-   列挙型書式指定子の詳細については、次を参照してください。[Enumeration Format Strings](http://msdn.microsoft.com/ja-jp/dd1ff672-1052-42cf-8666-4924fb6cd1a1)です。  
  
-   書式設定に関する詳細については、次を参照してください。[Formatting Types in the .NET Framework](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f)です。  
  
   
  
## 例  
 次の例では、変数パラメーターの使用、<xref:System.Console.Write%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%2CSystem.Object%29>メソッドです。 メソッドは、複合書式指定文字列と 5 つの書式指定項目で呼び出されます。  
  
 [!code-cpp[System.Console.Write\#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.console.write/cpp/con_write.cpp#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> の書式指定が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <block subset="none" type="usage">
          <para>This method is marked with the <see langword="vararg" /> keyword, which means that it supports a variable number of parameters. The method can be called from Visual C++, but it cannot be called from C# or Visual Basic code. The C# and Visual Basic compilers resolve calls to <see cref="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)" /> as calls to <see cref="M:System.Console.Write(System.String,System.Object[])" />.</para>
        </block>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLine">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したデータを標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の行終端記号がキャリッジ リターンとライン フィードの値の文字列 \("\\r\\n"に C\# の場合、または `vbCrLf` Visual Basic で\)。 行終端記号を変更するには設定して、 <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName> のプロパティ、 <xref:System.Console.Out%2A> プロパティを別の文字列にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の行終端記号を標準出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の行終端記号がキャリッジ リターンとライン フィードの値の文字列 \("\\r\\n"\(C\#\)、または`vbCrLf`Visual Basic で\)。 設定して、行終端記号を変更することができます、<xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName>のプロパティ、<xref:System.Console.Out%2A>を別の文字列プロパティです。 具体的な例を次に示します。  
  
   
  
## 例  
 例では、"\\r\\n"の既定値から、行終端記号を変更または`vbCrLf`"\\r\\n\\r\\n"にまたは`vbCrLf`\+`vbCrLf`です。 呼び出して、<xref:System.Console.WriteLine>と<xref:System.Console.WriteLine%28System.String%29>コンソールに出力を表示する方法です。  
  
 [!code-cpp[System.Console.WriteLine\#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/newline1.cpp#2)]
 [!code-csharp[System.Console.WriteLine\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/newline1.cs#2)]
 [!code-vb[System.Console.WriteLine\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/newline1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <altmember cref="P:System.IO.TextWriter.NewLine" />
        <altmember cref="P:System.Console.Out" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した Boolean 値のテキスト形式を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 テキスト表現`value`呼び出しによって生成された、<xref:System.Boolean.ToString%2A?displayProperty=fullName>メソッドです。  
  
 行終端記号の詳細については、の「解説」セクションを参照してください、<xref:System.Console.WriteLine%2A>パラメーターをとらないメソッドです。  
  
   
  
## 例  
 次の例は、10 個の整数の乱数を生成しを使用して、<xref:System.Console.WriteLine%28System.Boolean%29?displayProperty=fullName>でもはかどうかを示すためのメソッドです。  
  
 [!code-cpp[System.Console.WriteLine\#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/writeline_boolean1.cpp#4)]
 [!code-csharp[System.Console.WriteLine\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/writeline_boolean1.cs#4)]
 [!code-vb[System.Console.WriteLine\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/writeline_boolean1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した Unicode 文字を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 行終端記号の詳細については、の「解説」セクションを参照してください、<xref:System.Console.WriteLine%2A>パラメーターをとらないメソッドです。  
  
   
  
## 例  
 次の例は、ヒントを計算する 18% ヒントを計算しを使用して、<xref:System.Console.WriteLine%2A>元費用の金額、ヒント、量合計金額を表示するメソッド。 この例とは、コマンド ライン パラメーターとして元の請求金額の量を指定するユーザーを必要とするコンソール アプリケーションです。  
  
 [!code-csharp[System.Console.WriteLine\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Char[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">Unicode 文字配列。</param>
        <summary>指定した Unicode 文字配列を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 行終端記号の詳細については、の「解説」セクションを参照してください、<xref:System.Console.WriteLine%2A>パラメーターをとらないメソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Decimal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した <see cref="T:System.Decimal" /> 値のテキスト形式を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 テキスト表現`value`呼び出しによって生成された、<xref:System.Decimal.ToString%2A?displayProperty=fullName>メソッドです。  
  
 行終端記号の詳細については、の「解説」セクションを参照してください、<xref:System.Console.WriteLine%2A>パラメーターをとらないメソッドです。  
  
   
  
## 例  
 次の例は、ヒントを計算する 18% ヒントを計算しを使用して、<xref:System.Console.WriteLine%2A>元費用の金額、ヒント、量合計金額を表示するメソッド。 この例とは、コマンド ライン パラメーターとして元の請求金額の量を指定するユーザーを必要とするコンソール アプリケーションです。  
  
 [!code-csharp[System.Console.WriteLine\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した倍精度浮動小数点値のテキスト形式を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 テキスト表現`value`呼び出しによって生成された、<xref:System.Double.ToString%2A?displayProperty=fullName>メソッドです。  
  
 行終端記号の詳細については、の「解説」セクションを参照してください、<xref:System.Console.WriteLine%2A>パラメーターをとらないメソッドです。  
  
   
  
## 例  
 次の例は、ヒントを計算する 18% ヒントを計算しを使用して、<xref:System.Console.WriteLine%2A>元費用の金額、ヒント、量合計金額を表示するメソッド。 この例とは、コマンド ライン パラメーターとして元の請求金額の量を指定するユーザーを必要とするコンソール アプリケーションです。  
  
 [!code-csharp[System.Console.WriteLine\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した 32 ビット符号付き整数値のテキスト形式を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 テキスト表現`value`呼び出しによって生成された、<xref:System.Int32.ToString%2A?displayProperty=fullName>メソッドです。  
  
 行終端記号の詳細については、の「解説」セクションを参照してください、<xref:System.Console.WriteLine%2A>パラメーターをとらないメソッドです。  
  
   
  
## 例  
 次の例は、18% ヒントの計算を使用してヒント電卓、<xref:System.Console.WriteLine%2A>元費用の金額、ヒント、量および合計金額を表示するメソッド。 この例とは、コマンド ライン パラメーターとして元の請求金額の量を指定するユーザーを必要とするコンソール アプリケーションです。  
  
 [!code-csharp[System.Console.WriteLine\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した 64 ビット符号付き整数値のテキスト形式を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 テキスト表現`value`呼び出しによって生成された、<xref:System.Int64.ToString%2A?displayProperty=fullName>メソッドです。  
  
 行終端記号の詳細については、の「解説」セクションを参照してください、<xref:System.Console.WriteLine%2A>パラメーターをとらないメソッドです。  
  
   
  
## 例  
 次の例は、ヒントを計算する 18% ヒントを計算しを使用して、<xref:System.Console.WriteLine%2A>元費用の金額、ヒント、量合計金額を表示するメソッド。 この例とは、コマンド ライン パラメーターとして元の請求金額の量を指定するユーザーを必要とするコンソール アプリケーションです。  
  
 [!code-csharp[System.Console.WriteLine\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定したオブジェクトのテキスト形式を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `value` が `null` の場合は、行終端記号だけを書き込みます。 それ以外の場合、`ToString`メソッドの`value`は、文字列形式を生成するために呼び出され、結果の文字列が標準出力ストリームに書き込まれます。  
  
 行終端記号の詳細については、の「解説」セクションを参照してください、<xref:System.Console.WriteLine%2A>パラメーターをとらないメソッドです。  
  
   
  
## 例  
 次の例では、<xref:System.Console.WriteLine%28System.Object%29>メソッドをコンソールにオブジェクトの配列の各値を表示します。  
  
 [!code-cpp[System.Console.WriteLine\#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/con_writeline.cpp#3)]
 [!code-cpp[System.Console.WriteLine\#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/writeline_obj1.cpp#3)]
 [!code-csharp[System.Console.WriteLine\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/writeline_obj1.cs#3)]
 [!code-vb[System.Console.WriteLine\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/writeline_obj1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した単精度浮動小数点値のテキスト形式を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 テキスト表現`value`呼び出しによって生成された、<xref:System.Single.ToString%2A?displayProperty=fullName>メソッドです。  
  
 行終端記号の詳細については、の「解説」セクションを参照してください、<xref:System.Console.WriteLine%2A>パラメーターをとらないメソッドです。  
  
   
  
## 例  
 次の例は、18% ヒントの計算を使用してヒント電卓、<xref:System.Console.WriteLine%2A>元費用の金額、ヒント、量および合計金額を表示するメソッド。 この例とは、コマンド ライン パラメーターとして元の請求金額の量を指定するユーザーを必要とするコンソール アプリケーションです。  
  
 [!code-csharp[System.Console.WriteLine\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した文字列値を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値が場合`null`、行終端記号だけが標準出力ストリームに書き込まれます。  
  
 行終端記号の詳細については、の「解説」セクションを参照してください、<xref:System.Console.WriteLine>メソッドです。  
  
   
  
## 例  
 例では、"\\r\\n"の既定値から、行終端記号を変更または`vbCrLf`"\\r\\n\\r\\n"にまたは`vbCrLf`\+`vbCrLf`です。 呼び出して、<xref:System.Console.WriteLine>と<xref:System.Console.WriteLine%28System.String%29>コンソールに出力を表示する方法です。  
  
 [!code-cpp[System.Console.WriteLine\#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/newline1.cpp#2)]
 [!code-csharp[System.Console.WriteLine\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/newline1.cs#2)]
 [!code-vb[System.Console.WriteLine\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/newline1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.UInt32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した 32 ビット符号なし整数値のテキスト形式を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 テキスト表現`value`呼び出しによって生成された、<xref:System.UInt32.ToString%2A?displayProperty=fullName>メソッドです。  
  
 行終端記号の詳細については、の「解説」セクションを参照してください、<xref:System.Console.WriteLine%2A>パラメーターをとらないメソッドです。  
  
   
  
## 例  
 次の例は、ヒントを計算する 18% ヒントを計算しを使用して、<xref:System.Console.WriteLine%2A>元費用の金額、ヒント、量合計金額を表示するメソッド。 この例とは、コマンド ライン パラメーターとして元の請求金額の量を指定するユーザーを必要とするコンソール アプリケーションです。  
  
 [!code-csharp[System.Console.WriteLine\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.UInt64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>指定した 64 ビット符号なし整数値のテキスト形式を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 テキスト表現`value`呼び出しによって生成された、<xref:System.UInt64.ToString%2A?displayProperty=fullName>メソッドです。  
  
 行終端記号の詳細については、の「解説」セクションを参照してください、<xref:System.Console.WriteLine%2A>パラメーターをとらないメソッドです。  
  
   
  
## 例  
 次の例は、ヒントを計算する 18% ヒントを計算しを使用して、<xref:System.Console.WriteLine%2A>元費用の金額、ヒント、量合計金額を表示するメソッド。 この例とは、コマンド ライン パラメーターとして元の請求金額の量を指定するユーザーを必要とするコンソール アプリケーションです。  
  
 [!code-csharp[System.Console.WriteLine\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">複合書式指定文字列 \(「解説」を参照\)。</param>
        <param name="arg0">
          <c>format</c> を使用して書き込むオブジェクト。</param>
        <summary>指定した書式情報を使用して、指定したオブジェクトのテキスト表現を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して、[複合書式指定機能](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49)をテキスト形式のオブジェクトの値を変換し、その表現を文字列に埋め込むには、.NET Framework のです。 結果の文字列は、出力ストリームに書き込まれます。  
  
 `format`パラメーターは、ゼロまたは 0 個以上のインデックス付きプレース ホルダー、このメソッドのパラメーター リスト内のオブジェクトに対応する書式指定項目と呼ばれる個以上のテキストが混在します。 書式設定のプロセスでは、対応するオブジェクトの値のテキスト形式で各書式項目を置き換えます。  
  
 書式指定項目の構文は`{`*インデックス*\[`,`*配置*\] \[`:`*formatString*\]`}`必須インデックス オプションの長さ、フォーマットされたテキストの配置を指定して、オプションの対応する値のオブジェクトを制御する書式指定子文字の文字列の形式が、します。  
  
 .NET Framework では、次の書式設定のトピックで詳しく説明されている、広範な書式設定サポートを提供します。  
  
-   複合書式指定などのメソッドによってサポートされる機能の詳細については<xref:System.String.Format%2A>、 <xref:System.Text.StringBuilder.AppendFormat%2A>、および一部のオーバー ロードの<xref:System.Console.WriteLine%2A>を参照してください[Composite Formatting](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49)です。  
  
-   数値書式指定子の詳細については、次を参照してください。[Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467)と[Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4)です。  
  
-   についての日付と時刻の書式指定子の詳細については、次を参照してください。[Standard Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/bb79761a-ca08-44ee-b142-b06b3e2fc22b)と[Custom Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/98b374e3-0cc2-4c78-ab44-efb671d71984)です。  
  
-   列挙型書式指定子の詳細については、次を参照してください。[Enumeration Format Strings](http://msdn.microsoft.com/ja-jp/dd1ff672-1052-42cf-8666-4924fb6cd1a1)です。  
  
-   書式設定に関する詳細については、次を参照してください。[Formatting Types in the .NET Framework](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f)です。  
  
 行終端記号の詳細については、の「解説」セクションを参照してください、<xref:System.Console.WriteLine%2A>パラメーターをとらないメソッドです。  
  
   
  
## 例  
 次の例では、<xref:System.Console.WriteLine%28System.String%2CSystem.Object%29>ランダムに生成される 5 を表示するメソッドを<xref:System.Boolean>値。  
  
 [!code-csharp[System.Console.WriteLine\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/WriteLine6.cs#6)]
 [!code-vb[System.Console.WriteLine\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/WriteLine6.vb#6)]  
  
 次の例では、<xref:System.Console.WriteLine%28System.String%2CSystem.Object%29>メソッドを現在の日付を表示します。   書式項目を`format`引数は、"D"を使用して[標準の日時書式指定文字列](http://msdn.microsoft.com/ja-jp/bb79761a-ca08-44ee-b142-b06b3e2fc22b)現在のカルチャの長い日付形式で日付を表示します。  
  
 [!code-csharp[System.Console.WriteLine\#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/WriteLine7.cs#7)]
 [!code-vb[System.Console.WriteLine\#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/WriteLine7.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> の書式指定が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">複合書式指定文字列 \(「解説」を参照\)。</param>
        <param name="arg">
          <c>format</c> を使用して書き込むオブジェクトの配列。</param>
        <summary>指定した書式情報を使用して、指定したオブジェクト配列のテキスト表現を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method uses the  [composite formatting feature](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  
  
 The syntax of a format item is **languageKeyword tag is not supported!!!!**  
**placeholder tag is not supported!!!!**  
\[**languageKeyword tag is not supported!!!!**  
**placeholder tag is not supported!!!!**  
\]\[**languageKeyword tag is not supported!!!!**  
**placeholder tag is not supported!!!!**  
\]**languageKeyword tag is not supported!!!!**  
, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  
  
 The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  
  
-   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49).  
  
-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467) and [Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4).  
  
-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/bb79761a-ca08-44ee-b142-b06b3e2fc22b) and [Custom Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/98b374e3-0cc2-4c78-ab44-efb671d71984).  
  
-   For more information about enumeration format specifiers, see [Enumeration Format Strings](http://msdn.microsoft.com/ja-jp/dd1ff672-1052-42cf-8666-4924fb6cd1a1).  
  
-   For more information about formatting, see [Formatting Types in the .NET Framework](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f).  
  
 For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.  
  
   
  
## 例  
 The following example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.  
  
 [!code-cpp[console.writelineFmt1\#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)]
 [!code-csharp[console.writelineFmt1\#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command\-line parameter.  
  
 [!code-csharp[System.Console.WriteLine\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> または <paramref name="arg" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> の書式指定が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <block subset="none" type="usage">
          <para>This method is not called by C++ code. The C++ compiler resolves calls to <see cref="Overload:System.Console.WriteLine" /> that include a string and a list of four or more object parameters as a call to <see cref="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)" />. It resolves calls to <see cref="Overload:System.Console.WriteLine" /> that include a string and an object array as a call to <see cref="M:System.Console.WriteLine(System.String,System.Object)" />.</para>
        </block>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Char[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Unicode 文字の配列。</param>
        <param name="index">
          <c>buffer</c> 内の開始位置。</param>
        <param name="count">書き込む文字数。</param>
        <summary>指定した Unicode 文字の部分配列を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは書き込みます`count`位置から始まる文字`index`の`buffer`を標準出力ストリームにします。  
  
 行終端記号の詳細については、の「解説」セクションを参照してください、[WriteLine メソッド \(Char\<xref:System.Console.WriteLine%2A>パラメーターをとらないメソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> または <paramref name="count" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> と <paramref name="count" /> の合計が指定する位置は、<paramref name="buffer" /> 内ではありません。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">複合書式指定文字列 \(「解説」を参照\)。</param>
        <param name="arg0">
          <c>format</c> を使用して書き込む最初のオブジェクト。</param>
        <param name="arg1">
          <c>format</c> を使用して書き込む 2 番目のオブジェクト。</param>
        <summary>指定した書式情報を使用して、指定したオブジェクトのテキスト表現を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method uses the [composite formatting feature](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  
  
 The syntax of a format item is **languageKeyword tag is not supported!!!!**  
**placeholder tag is not supported!!!!**  
\[**languageKeyword tag is not supported!!!!**  
**placeholder tag is not supported!!!!**  
\]\[**languageKeyword tag is not supported!!!!**  
**placeholder tag is not supported!!!!**  
\]**languageKeyword tag is not supported!!!!**  
, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  
  
 The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  
  
-   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49).  
  
-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467) and [Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4).  
  
-   For more information about date and time format specifiers, see [Standard DateTime Format Strings](http://msdn.microsoft.com/ja-jp/bb79761a-ca08-44ee-b142-b06b3e2fc22b) and [Custom DateTime Format Strings](http://msdn.microsoft.com/ja-jp/98b374e3-0cc2-4c78-ab44-efb671d71984).  
  
-   For more information about enumeration format specifiers, see [Enumeration Format Strings](http://msdn.microsoft.com/ja-jp/dd1ff672-1052-42cf-8666-4924fb6cd1a1).  
  
-   For more information about formatting, see [Formatting Types](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f).  
  
 For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.  
  
   
  
## 例  
 The following example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.  
  
 [!code-cpp[console.writelineFmt1\#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)]
 [!code-csharp[console.writelineFmt1\#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command\-line parameter.  
  
 [!code-csharp[System.Console.WriteLine\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> の書式指定が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">複合書式指定文字列 \(「解説」を参照\)。</param>
        <param name="arg0">
          <c>format</c> を使用して書き込む最初のオブジェクト。</param>
        <param name="arg1">
          <c>format</c> を使用して書き込む 2 番目のオブジェクト。</param>
        <param name="arg2">
          <c>format</c> を使用して書き込む 3 番目のオブジェクト。</param>
        <summary>指定した書式情報を使用して、指定したオブジェクトのテキスト表現を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method uses the [composite formatting feature](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  
  
 The syntax of a format item is **languageKeyword tag is not supported!!!!**  
**placeholder tag is not supported!!!!**  
\[**languageKeyword tag is not supported!!!!**  
**placeholder tag is not supported!!!!**  
\]\[**languageKeyword tag is not supported!!!!**  
**placeholder tag is not supported!!!!**  
\]**languageKeyword tag is not supported!!!!**  
, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  
  
 The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  
  
-   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49).  
  
-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467) and [Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4).  
  
-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/bb79761a-ca08-44ee-b142-b06b3e2fc22b) and [Custom Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/98b374e3-0cc2-4c78-ab44-efb671d71984).  
  
-   For more information about enumeration format specifiers, see [Enumeration Format Strings](http://msdn.microsoft.com/ja-jp/dd1ff672-1052-42cf-8666-4924fb6cd1a1).  
  
-   For more information about formatting, see [Formatting Types in the .NET Framework](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f).  
  
 For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters.  
  
   
  
## 例  
 The following example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.  
  
 [!code-cpp[console.writelineFmt1\#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)]
 [!code-csharp[console.writelineFmt1\#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command\-line parameter.  
  
 [!code-csharp[System.Console.WriteLine\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> の書式指定が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0, object arg1, object arg2, object arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0, object arg1, object arg2, object arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
        <Parameter Name="arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">複合書式指定文字列 \(「解説」を参照\)。</param>
        <param name="arg0">
          <c>format</c> を使用して書き込む最初のオブジェクト。</param>
        <param name="arg1">
          <c>format</c> を使用して書き込む 2 番目のオブジェクト。</param>
        <param name="arg2">
          <c>format</c> を使用して書き込む 3 番目のオブジェクト。</param>
        <param name="arg3">
          <c>format</c> を使用して書き込む 4 番目のオブジェクト。</param>
        <summary>指定した書式情報を使用して、指定したオブジェクトのテキスト表現と可変長パラメーター リストを標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  この API は、CLS に準拠していません。 CLS 準拠の代わりとして <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> を使用できます。 C\# および Visual Basic コンパイラに自動的に解決するにはこのメソッドの呼び出しの呼び出しとして<xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=fullName>です。  
  
 このメソッドを使用して、[複合書式指定機能](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49)をテキスト形式のオブジェクトの値を変換し、その表現を文字列に埋め込むには、.NET Framework のです。 結果の文字列は、出力ストリームに書き込まれます。  
  
 `format`パラメーターは、ゼロまたは 0 個以上のインデックス付きプレース ホルダー、このメソッドのパラメーター リスト内のオブジェクトに対応する書式指定項目と呼ばれる個以上のテキストが混在します。 書式設定のプロセスでは、対応するオブジェクトの値のテキスト形式で各書式項目を置換します。  
  
 書式指定項目の構文が`{`*インデックス*\[`,`*配置*\] \[`:`*formatString*\]`}`、必須のインデックス オプションの長さ、フォーマットされたテキストの配置を指定して、オプションの対応する値のオブジェクトを制御する書式指定子文字の文字列の形式ができます。  
  
 .NET Framework では、広範な書式設定の次のトピックで詳しく説明されている書式設定サポートを提供します。  
  
-   複合書式指定などのメソッドによってサポートされる機能の詳細については<xref:System.String.Format%2A>、 <xref:System.Text.StringBuilder.AppendFormat%2A>、および一部のオーバー ロードの<xref:System.Console.WriteLine%2A>を参照してください[Composite Formatting](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49)です。  
  
-   数値書式指定子の詳細については、次を参照してください。[Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467)と[Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4)です。  
  
-   についての日付と時刻の書式指定子の詳細については、次を参照してください。[Standard Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/bb79761a-ca08-44ee-b142-b06b3e2fc22b)と[Custom Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/98b374e3-0cc2-4c78-ab44-efb671d71984)です。  
  
-   列挙型書式指定子の詳細については、次を参照してください。[Enumeration Format Strings](http://msdn.microsoft.com/ja-jp/dd1ff672-1052-42cf-8666-4924fb6cd1a1)です。  
  
-   書式設定に関する詳細については、次を参照してください。[Formatting Types in the .NET Framework](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f)です。  
  
 行終端記号の詳細については、の「解説」セクションを参照してください、<xref:System.Console.WriteLine%2A>パラメーターをとらないメソッドです。  
  
   
  
## 例  
 次の例では、変数の引数の使用、<xref:System.Console.WriteLine%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%2CSystem.Object%29>メソッドです。 メソッドは、複合書式指定文字列と 5 つの書式指定項目で呼び出されます。  
  
 [!code-cpp[System.Console.WriteLine\#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/writeline_vararg.cpp#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> の書式指定が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for modifying safe top\-level windows and subwindows. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <block subset="none" type="usage">
          <para>This method is marked with the <see langword="vararg" /> keyword, which means that it supports a variable number of parameters. The method can be called from Visual C++, but it cannot be called from C# or Visual Basic code. The C# and Visual Basic compilers resolve calls to <see cref="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)" /> as calls to <see cref="M:System.Console.WriteLine(System.String,System.Object[])" />.</para>
        </block>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した値のテキスト形式を標準出力ストリームに書き込みます。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Beep">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>コンソールのスピーカーからビープ音を出します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="OpenStandardOutput">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>標準出力ストリームを取得します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="OpenStandardError">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>標準エラー ストリームを取得します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="OpenStandardInput">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>標準入力ストリームを取得します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ReadKey">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ユーザーによって押された次の文字キーまたはファンクション キーを取得します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="MoveBufferArea">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>画面バッファーの特定の領域を、指定した領域にコピーします。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>