<Type Name="Int32" FullName="System.Int32">
  <TypeSignature Language="C#" Value="public struct Int32 : IComparable, IComparable&lt;int&gt;, IConvertible, IEquatable&lt;int&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit int32 extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;int32&gt;, class System.IConvertible, class System.IEquatable`1&lt;int32&gt;, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Int32" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.Int32&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Int32&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>32 ビット符号付き整数を表します。  
  
 この型の .NET Framework ソース コードを参照するを参照してください。、 [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/int32.cs#225942ed7b7a3252)します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  この型の .NET Framework ソース コードを参照してください、 [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/int32.cs#225942ed7b7a3252)します。 ソース コードをオンラインで参照、オフライン表示のリファレンスをダウンロードおよびデバッグ中にソース \(パッチや更新を含む\) をステップsee [instructions](http://referencesource.microsoft.com/).  
  
 <xref:System.Int32> 符号付き整数範囲は\-2,147, 483,648 から値を表す不変値型は、\(で表される、 <xref:System.Int32.MinValue?displayProperty=fullName> 定数\) \+2,147, 483,647 \(で表される、 <xref:System.Int32.MaxValue?displayProperty=fullName> 定数です。 .NET Framework は、32 ビット符号なし整数値の型も含まれています。 <xref:System.UInt32>, 、0 から 4,294,967,295 までの値を表します。  
  
## Int32 値をインスタンス化します。  
 インスタンスを作成できる、 <xref:System.Int32> 方法はいくつかの値。  
  
-   宣言することができます、 <xref:System.Int32> 変数の範囲内にあるリテラルの整数値を割り当てると、 <xref:System.Int32> データ型。 次の例で 2 つ <xref:System.Int32> 変数に、この方法で値を代入しています。  
  
     [!code-csharp[System.Int32.Instantiation\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Int32.Instantiation/cs/Instantiate1.cs#1)]
     [!code-vb[System.Int32.Instantiation\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Int32.Instantiation/vb/Instantiate1.vb#1)]  
  
-   範囲がサブセットである整数型の値を割り当てることができますの <xref:System.Int32> 型です。 これは、c\# のキャスト演算子または Visual Basic での変換メソッドを必要としない拡大変換です。  
  
     [!code-csharp[System.Int32.Instantiation\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Int32.Instantiation/cs/Instantiate1.cs#4)]
     [!code-vb[System.Int32.Instantiation\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Int32.Instantiation/vb/Instantiate1.vb#4)]  
  
-   範囲を超えています数値型の値を割り当てることができますの <xref:System.Int32> 型です。 縮小変換は、このため場合 c\# でのキャスト演算子と Visual Basic での変換メソッドが必要に `Option``Strict` にします。 数値の場合、 <xref:System.Single>, 、<xref:System.Double>, 、または <xref:System.Decimal> を小数部が、その小数部分の処理を含む値は、変換を実行して、コンパイラに依存します。 次の例をいくつかの数値を割り当てる縮小変換を実行する <xref:System.Int32> 変数です。  
  
     [!code-csharp[System.Int32.Instantiation\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Int32.Instantiation/cs/Instantiate1.cs#2)]
     [!code-vb[System.Int32.Instantiation\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Int32.Instantiation/vb/Instantiate1.vb#2)]  
  
-   メソッドを呼び出すことができます、 <xref:System.Convert> サポートする型のいずれかに変換するクラス、 <xref:System.Int32> 値。 これは、可能なため <xref:System.Int32> をサポートしています、 <xref:System.IConvertible> インターフェイスです。 次の例は、配列の変換を示しています。 <xref:System.Decimal> 値 <xref:System.Int32> 値。  
  
     [!code-csharp[System.Convert.ToInt32\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#4)]
     [!code-vb[System.Convert.ToInt32\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#4)]  
  
-   呼び出すことができます、 <xref:System.Int32.Parse%2A> または <xref:System.Int32.TryParse%2A> の文字列形式に変換するメソッド、 <xref:System.Int32> 値を <xref:System.Int32>です。 文字列は、10 進数または 16 進数の数字を含めることができます。 次の例では、10 進数と 16 進数文字列の両方を使用して、解析操作を示しています。  
  
     [!code-csharp[System.Int32.Instantiation\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Int32.Instantiation/cs/Instantiate1.cs#3)]
     [!code-vb[System.Int32.Instantiation\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Int32.Instantiation/vb/Instantiate1.vb#3)]  
  
## Int32 値に対して操作を実行します。  
 <xref:System.Int32> 型は、加算、減算、除算、乗算、否定、単項否定演算子などの標準的な数学的な操作をサポートしています。 などの他の整数型、 <xref:System.Int32> 型もサポートしている、ビットごと `AND`, 、`OR`, 、`XOR`, 、shift キー、および右シフト演算子のままです。  
  
 標準の数値演算子を使用するには 2 つを比較する <xref:System.Int32> を呼び出すの値か、 <xref:System.Int32.CompareTo%2A> または <xref:System.Int32.Equals%2A> メソッドです。  
  
 メンバーを呼び出すこともできます、 <xref:System.Math> をさまざまな数値の絶対値を取得する、商と整数の除算の剰余を計算する、2 つの整数の最大値または最小値を決定する、数値の符号の取得、および数値を丸めるなどの数値演算を実行するクラス。  
  
## Int32 型を文字列として表す  
 <xref:System.Int32> 型が標準とカスタムの数値書式指定文字列に完全にサポートを提供します。 \(詳細については、次を参照してください [Formatting Types in the .NET Framework](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f), 、[Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467), 、および [Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4)。\)。  
  
 書式設定、 <xref:System.Int32> 値先行ゼロなしで整数を文字列として、パラメーターなし呼び出せる <xref:System.Int32.ToString> メソッドです。 "D"書式指定子を使用すると、指定された数の文字列形式には先行ゼロも含めることができます。 "N"書式指定子を使用するは、桁区切り記号を含めるし、数値の文字列形式で表示する小数点以下桁数を指定します。 "X"書式指定子を使用すると、表すことができます、 <xref:System.Int32> 16 進数文字列値。 次の例の配列内の要素を書式設定 <xref:System.Int32> これら 4 つの方法の値。  
  
 [!code-csharp[System.Int32.Formatting\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Int32.Formatting/cs/Formatting1.cs#1)]
 [!code-vb[System.Int32.Formatting\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Int32.Formatting/vb/Formatting1.vb#1)]  
  
 フォーマットすることも、 <xref:System.Int32> 8 進数、バイナリ形式で値の 10 進数または 16 進数の文字列を呼び出すことによって、 <xref:System.Convert.ToString%28System.Int32%2CSystem.Int32%29> メソッドとメソッドの 2 番目のパラメーターとして情報を指定することです。 次の例では、このバイナリ、8 進数を表示するメソッドと整数値の配列の 16 進数表記を呼び出します。  
  
 [!code-csharp[System.Int32.Formatting\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Int32.Formatting/cs/Formatting1.cs#2)]
 [!code-vb[System.Int32.Formatting\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Int32.Formatting/vb/Formatting1.vb#2)]  
  
## 10 進数以外の 32 ビット整数値の使用  
 10 進数値として個々 の整数を使用するだけでなく、整数値でビットごとの演算を実行するか、整数値のバイナリまたは 16 進数の形式を使用することができます。<xref:System.Int32> 値は、30 秒ビットを符号ビットとして使用される、31 ビット単位で表されます。 正の値は、符号および絶対値による表現を使用して表されます。 負の値は、2 の補数表現でです。 これは重要でビットごとの演算を実行する場合に留意する <xref:System.Int32> 値または個別のビットを操作する際にします。 数値型、ブール値、または 2 つの非の 10 進値の比較演算を実行するのには、両方の値が同じ形式を使用する必要があります。  
  
 ]]></format>
    </remarks>
    <threadsafe>この種類のすべてのメンバーでは、スレッド セーフです。 インスタンスの状態を変更する表示されるメンバーは、実際に新しい値で初期化された新しいインスタンスを返します。 として、他の種類と読み取りと書き込みをこの型のインスタンスを含む共有変数を保護する必要があるスレッド セーフを確保するロックによってです。</threadsafe>
    <altmember cref="T:System.UInt32" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int32.CompareTo(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">比較対象の整数。</param>
        <summary>指定した 32 ビット符号付き整数とこのインスタンスを比較し、これらの相対値を示す値を返します。</summary>
        <returns>このインスタンスと <paramref name="value" /> の相対値を示す符号付き数値。  
  
 <list type="table">  
<listheader>  
<term> 戻り値  
  
 </term>  
<description> 説明  
  
 </description>  
</listheader>  
<item>  
<term> 0 より小さい値  
  
 </term>  
<description> このインスタンスは、<paramref name="value" /> よりも小さくなっています。  
  
 </description>  
</item>  
<item>  
<term> 0  
  
 </term>  
<description> このインスタンスは <paramref name="value" /> と等価です。  
  
 </description>  
</item>  
<item>  
<term> 0 より大きい値  
  
 </term>  
<description> このインスタンスは <paramref name="value" /> よりも大きくなっています。  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを実装する、<xref:System.IComparable%601?displayProperty=fullName>インターフェイスし、実行よりもわずかに向上、<xref:System.Int32.CompareTo%2A?displayProperty=fullName>メソッドに変換があるないため、`value`オブジェクトへのパラメーターです。  
  
 プログラミング言語に応じてコードに考えられる場合があります、<xref:System.Int32.CompareTo%2A>メソッドのパラメーターの型のビット数が少ないがここではインスタンスの型よりもします。 これには一部のプログラミング言語は、ビット数のインスタンスと型としてパラメーターを表す暗黙の拡大変換を実行するため。  
  
 たとえば、インスタンスの型が<xref:System.Int32>パラメーターの型と<xref:System.Byte>です。 Microsoft c\# コンパイラは、パラメーターの値を表す命令を生成、<xref:System.Int32>が生成されます、<xref:System.Int32.CompareTo%2A?displayProperty=fullName>の値を比較するメソッド、<xref:System.Int32>インスタンスおよび<xref:System.Int32>パラメーター形式です。  
  
 コンパイラが数値型に暗黙の拡大変換を実行するかどうかを決定する、プログラミング言語のドキュメントを参照してください。  
  
   
  
## 例  
 次の例で、<xref:System.Int32.CompareTo%28System.Int32%29?displayProperty=fullName>メソッドです。 に加えて、4 種類の比較のメソッドによって返される値を表示するには、変換、戻り値、カスタムのメンバーを`Comparison`列挙体、その値も表示されます。  
  
 [!code-csharp[System.Int32.CompareTo\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Int32.CompareTo/cs/CompareTo1.cs#1)]
 [!code-vb[System.Int32.CompareTo\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Int32.CompareTo/vb/CompareTo1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.UInt32" />
        <altmember cref="M:System.Int32.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int32.CompareTo(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">比較対象のオブジェクト、または <see langword="null" />。</param>
        <summary>指定したオブジェクトとこのインスタンスを比較し、これらの相対値を示す値を返します。</summary>
        <returns>このインスタンスと <paramref name="value" /> の相対値を示す符号付き数値。  
  
 <list type="table">  
<listheader>  
<term> 戻り値  
  
 </term>  
<description> 説明  
  
 </description>  
</listheader>  
<item>  
<term> 0 より小さい値  
  
 </term>  
<description> このインスタンスは、<paramref name="value" /> よりも小さくなっています。  
  
 </description>  
</item>  
<item>  
<term> 0  
  
 </term>  
<description> このインスタンスは <paramref name="value" /> と等価です。  
  
 </description>  
</item>  
<item>  
<term> 0 より大きい値  
  
 </term>  
<description> このインスタンスは <paramref name="value" /> よりも大きくなっています。  
  
 または  
  
 <paramref name="value" /> は <see langword="null" /> です。  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 任意のインスタンス<xref:System.Int32>、その値に関係なくが大きいと見なされますより`null`です。  
  
 `value`必要があります`null`またはのインスタンス<xref:System.Int32>です。 それ以外の場合、例外がスローされます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> が <see cref="T:System.Int32" /> ではありません。</exception>
        <altmember cref="T:System.UInt32" />
        <altmember cref="M:System.Int32.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (int obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(int32 obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int32.Equals(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj">このインスタンスと比較する <see cref="T:System.Int32" /> 値。</param>
        <summary>対象のインスタンスが、指定した <see cref="T:System.Int32" /> 値に等しいかどうかを示す値を返します。</summary>
        <returns>
          <paramref name="obj" /> の値がこのインスタンスと同じ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method implements the <xref:System.IEquatable%601?displayProperty=fullName> interface, and performs slightly better than <xref:System.Int32.Equals%28System.Object%29?displayProperty=fullName> because it does not have to convert the **parameterReference tag is not supported!!!!**  
 parameter to an object.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Compiler overload resolution may account for an apparent difference in the behavior of the two <see cref="M:System.Int32.Equals(System.Int32)" /> method overloads. If an implicit conversion between the <paramref name="obj" /> argument and an <see cref="T:System.Int32" /> is defined and the argument is not typed as an <see cref="T:System.Object" />, compilers perform an implicit conversion and call the <see cref="M:System.Int32.Equals(System.Int32)" /> method. Otherwise, they call the <see cref="M:System.Int32.Equals(System.Object)" /> method, which always returns <see langword="false" /> if its <paramref name="obj" /> argument is not an <see cref="T:System.Int32" /> value. The following example illustrates the difference in behavior between the two method overloads. In the case of the <see cref="T:System.Byte" />, <see cref="T:System.Int16" />, <see cref="T:System.SByte" />, and <see cref="T:System.UInt16" /> values, the first comparison returns <see langword="true" /> because the compiler automatically performs a widening conversion and calls the <see cref="M:System.Int32.Equals(System.Int32)" /> method, whereas the second comparison returns <see langword="false" /> because the compiler calls the <see cref="M:System.Int32.Equals(System.Object)" /> method.  
  
 [!code-csharp[System.Int32.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.int32.equals/cs/equalsoverloads2.cs#1)]
 [!code-vb[System.Int32.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.int32.equals/vb/equalsoverloads2.vb#1)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int32.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">このインスタンスと比較するオブジェクト。</param>
        <summary>対象のインスタンスが、指定したオブジェクトに等しいかどうかを示す値を返します。</summary>
        <returns>
          <paramref name="obj" /> が <see cref="T:System.Int32" /> のインスタンスで、このインスタンスの値に等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 The following example illustrates the use of **languageKeyword tag is not supported!!!!**  
 in the context of **languageKeyword tag is not supported!!!!**  
, comparing two **languageKeyword tag is not supported!!!!**  
 values and returning **languageKeyword tag is not supported!!!!**  
 if they represent the same number, or **languageKeyword tag is not supported!!!!**  
 if they do not.  
  
 [!code-cpp[Int32\_Equals\#1](~/samples/snippets/cpp/VS_Snippets_CLR/Int32_Equals/CPP/int32_equals.cpp#1)]
 [!code-csharp[Int32\_Equals\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Int32_Equals/CS/int32_equals.cs#1)]
 [!code-vb[Int32\_Equals\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Int32_Equals/VB/int32_equals.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Compiler overload resolution may account for an apparent difference in the behavior of the two <see cref="M:System.Int32.Equals(System.Int32)" /> method overloads. If an implicit conversion between the <paramref name="obj" /> argument and an <see cref="T:System.Int32" /> is defined and the argument is not typed as an <see cref="T:System.Object" />, compilers perform an implicit conversion and call the <see cref="M:System.Int32.Equals(System.Int32)" /> method. Otherwise, they call the <see cref="M:System.Int32.Equals(System.Object)" /> method, which always returns <see langword="false" /> if its <paramref name="obj" /> argument is not an <see cref="T:System.Int32" /> value. The following example illustrates the difference in behavior between the two method overloads. In the case of the <see cref="T:System.Byte" />, <see cref="T:System.Int16" />, <see cref="T:System.SByte" />, and <see cref="T:System.UInt16" /> values, the first comparison returns <see langword="true" /> because the compiler automatically performs a widening conversion and calls the <see cref="M:System.Int32.Equals(System.Int32)" /> method, whereas the second comparison returns <see langword="false" /> because the compiler calls the <see cref="M:System.Int32.Equals(System.Object)" /> method.  
  
 [!code-csharp[System.Int32.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.int32.equals/cs/equalsoverloads2.cs#1)]
 [!code-vb[System.Int32.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.int32.equals/vb/equalsoverloads2.vb#1)]</para>
        </block>
        <altmember cref="M:System.Int32.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int32.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスのハッシュ コードを返します。</summary>
        <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int32.GetTypeCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.TypeCode" /> 値型の <see cref="T:System.Int32" /> を返します。</summary>
        <returns>列挙型定数 <see cref="F:System.TypeCode.Int32" />。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.TypeCode" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public const int MaxValue = 2147483647;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MaxValue = int32(2147483647)" />
      <MemberSignature Language="DocId" Value="F:System.Int32.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>2147483647</MemberValue>
      <Docs>
        <summary>
          <see cref="T:System.Int32" /> の最大有効値を表します。 このフィールドは定数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この定数の値は 2,147, 483,647 です。16 進 0x7fffffff です。  
  
   
  
## 例  
 次の例では、<xref:System.Int32.MaxValue>ようにするプロパティ、<xref:System.OverflowException>に変換する際、<xref:System.Int32>値。  
  
 [!code-cpp[System.Int32.MaxValue\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.int32.maxvalue/cpp/maxvalue1.cpp#1)]
 [!code-csharp[System.Int32.MaxValue\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.int32.maxvalue/cs/maxvalue1.cs#1)]
 [!code-vb[System.Int32.MaxValue\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.int32.maxvalue/vb/maxvalue1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Int32.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public const int MinValue = -2147483648;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MinValue = int32(-2147483648)" />
      <MemberSignature Language="DocId" Value="F:System.Int32.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-2147483648</MemberValue>
      <Docs>
        <summary>
          <see cref="T:System.Int32" /> の最小有効値を表します。 このフィールドは定数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この定数の値が\-2,147,483,648 です。つまり、16 進 0x80000000 です。  
  
   
  
## 例  
 次の例では、<xref:System.Int32.MinValue>ようにするプロパティ、<xref:System.OverflowException>に変換する際、<xref:System.Int32>値。  
  
 [!code-cpp[System.Int32.MaxValue\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.int32.maxvalue/cpp/maxvalue1.cpp#1)]
 [!code-csharp[System.Int32.MaxValue\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.int32.maxvalue/cs/maxvalue1.cs#1)]
 [!code-vb[System.Int32.MaxValue\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.int32.maxvalue/vb/maxvalue1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Int32.MaxValue" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static int Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int32.Parse(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">変換する数値を格納する文字列。</param>
        <summary>数値の文字列形式を、それと等価な 32 ビット符号付き整数に変換します。</summary>
        <returns>
          <paramref name="s" /> に格納されている数値と等しい 32 ビット符号付き整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `s`パラメーターには、フォームの番号が含まれています。  
  
 \[ws\]\[サインイン\] 桁 \[ws\]  
  
 角かっこ \(\[および\]\) は省略可能の項目です。 次の表では、各要素について説明します。  
  
|要素|説明|  
|--------|--------|  
|ws|省略可能なホワイト スペースです。|  
|sign|省略可能な符号の場合。|  
|数字|0 から 9 までの数字のシーケンス。|  
  
 `s`パラメーターを使用して解釈されますが、<xref:System.Globalization.NumberStyles.Integer?displayProperty=fullName>スタイル。 10 進数字以外には、先頭と末尾のスペースが先頭の符号と共にのみを使用できます。 使用できるスタイル要素を明示的に定義する`s`、いずれかを使用して、<xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName>または<xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=fullName>メソッドです。  
  
 `s`で書式設定情報を使用してパラメーターを解析する<xref:System.Globalization.NumberFormatInfo>オブジェクトの現在のシステムのカルチャ用に初期化します。 詳細については、「<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>」を参照してください。 いくつか他のカルチャの書式情報を使用して文字列を解析するを使用して、<xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=fullName>メソッドです。  
  
   
  
## 例  
 次の例では、文字列値を使用して 32 ビット符号付き整数値に変換する方法、<xref:System.Int32.Parse%28System.String%29?displayProperty=fullName>メソッドです。 結果の整数値は、コンソールに表示されます。  
  
 [!code-cpp[System.Int32.Parse\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Int32.Parse/cpp/parse1.cpp#1)]
 [!code-csharp[System.Int32.Parse\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Int32.Parse/cs/Parse1.cs#1)]
 [!code-vb[System.Int32.Parse\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Int32.Parse/vb/Parse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> が正しい形式ではありません。</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> が、<see cref="F:System.Int32.MinValue" /> 未満の数値か、<see cref="F:System.Int32.MaxValue" /> より大きい数値を表しています。</exception>
        <altmember cref="M:System.Int32.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static int Parse (string s, System.Globalization.NumberStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Parse(string s, valuetype System.Globalization.NumberStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
      </Parameters>
      <Docs>
        <param name="s">変換する数値を含む文字列。</param>
        <param name="style">
          <c>s</c> で使用可能なスタイル要素を示す、列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Integer" /> です。</param>
        <summary>指定したスタイルの数値の文字列形式を、それと等しい 32 ビット符号付き整数に変換します。</summary>
        <returns>
          <paramref name="s" /> で指定した数値と等しい 32 ビット符号付き整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `style`パラメーター スタイル要素定義 \(空白、正または負の符号シンボル数千など区切り記号\) で許容される、`s`解析操作が成功するためのパラメーターです。 ビット フラグの組み合わせを可能にする必要があります、<xref:System.Globalization.NumberStyles>列挙します。 値に応じて`style`、`s`パラメーターは、次の要素を含めることがあります。  
  
 \[ws\]\[$\]\[記号\]\[数字\] 桁 \[.fractional\_digits\] \[e \[サインイン\] exponential\_digits\] \[ws\]  
  
 または、`style`が含まれています<xref:System.Globalization.NumberStyles.AllowHexSpecifier>:  
  
 \[ws\] hexdigits \[ws\]  
  
 角かっこ \(\[および\]\) は省略可能の項目です。 次の表では、各要素について説明します。  
  
|要素|説明|  
|--------|--------|  
|*ws*|省略可能なホワイト スペースです。 先頭に空白文字は使用できません`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=fullName>の最後に表示されることができますフラグ、およびその`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=fullName>フラグ。|  
|*$*|カルチャ固有の通貨記号。 文字列内での位置がによって定義された、<xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=fullName>と<xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=fullName>現在のカルチャのプロパティです。 現在のカルチャの通貨記号に表示される`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=fullName>フラグ。|  
|*sign*|省略可能な符号の場合。 先頭に表示できる符号`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=fullName>フラグ、およびそのがの末尾に置くことができます`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=fullName>フラグ。 かっこを使用できる`s`負の値を指定する`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=fullName>フラグ。|  
|*数字*<br /><br /> *fractional\_digits*<br /><br /> *exponential\_digits*|0 ~ 9 桁の数字のシーケンス。*Fractional\_digits*数字の 0 が有効ではのみです。|  
|*,*|カルチャ固有の桁区切り記号。 現在のカルチャの数千に区切り記号が表示できる`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=fullName>フラグ。|  
|*」を参照してください。*|カルチャに固有の小数点記号です。 現在のカルチャの小数点記号に表示される`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=fullName>フラグ。 数字の 0 は、解析操作を成功させるため桁の小数部として使用できます。場合*fractional\_digits*他の任意の数字が含まれています、<xref:System.OverflowException>がスローされます。|  
|*e*|'E' または 'E' 文字は、値を指数表記で表されていることを示します。`s`場合、パラメーターは指数表記の数値を表すことができる`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=fullName>フラグ。|  
|*hexdigits*|0 f からまたは f 0 から 16 進数のシーケンス|  
  
 数字のみを含む文字列 \(に対応する、<xref:System.Globalization.NumberStyles.None?displayProperty=fullName>スタイル\) が正常に解析します。 ほとんど残りの<xref:System.Globalization.NumberStyles>メンバーを制御する可能性がありますが、入力文字列内に存在する必要はありません要素。 次の表に示す個別<xref:System.Globalization.NumberStyles>メンバー内に存在可能な要素に影響を与える`s`です。  
  
|NumberStyles 値|数字だけでなく s で許可されている要素|  
|--------------------|--------------------------|  
|<xref:System.Globalization.NumberStyles.None>|*桁*要素のみです。|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|小数点 \( *.* \) および*小数部の桁*要素。|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|`s`パラメーターは、指数表記も使用できます。|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|*Ws*の先頭にある要素`s`です。|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|*Ws*の末尾に要素`s`です。|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|*記号*の先頭にある要素`s`です。|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|*記号*要素の最後に`s`です。|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|*記号*数値の値を囲むかっこの形式での要素。|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|桁区切り記号 \( *、* \) 要素です。|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|*$*要素。|  
|<xref:System.Globalization.NumberStyles.Currency>|すべて。`s`パラメーターには、16 進数または指数表記の数値を表すことはできません。|  
|<xref:System.Globalization.NumberStyles.Float>|*Ws*先頭または末尾の位置にある要素`s`、*記号*の先頭に`s`、および小数点 \( *.* \) シンボル。`s`パラメーターは、指数表記も使用できます。|  
|<xref:System.Globalization.NumberStyles.Number>|`ws`、 `sign`、何千もの区切り記号 \( *、* \)、および小数点 \( *.* \) 要素です。|  
|<xref:System.Globalization.NumberStyles.Any>|すべてのスタイルを除く`s`16 進数を表すことはできません。|  
  
 場合、<xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=fullName>フラグを使用すると、`s`プレフィックスのない 16 進値でなければなりません。 たとえば、"C9AF3"を正常に解析していて、"0xC9AF3"にはないです。 のみ他のフラグと組み合わせることができます、`s`パラメーターは、<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=fullName>と<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=fullName>です。 \(、<xref:System.Globalization.NumberStyles>列挙には、複合数値スタイルが含まれています<xref:System.Globalization.NumberStyles.HexNumber?displayProperty=fullName>、両方の空白文字のフラグが含まれている。\)。  
  
 `s`で書式設定情報を使用してパラメーターを解析、<xref:System.Globalization.NumberFormatInfo>現在のシステムのカルチャに初期化されるオブジェクト。 書式情報を含むが、解析操作で使用されるカルチャを指定するには、呼び出し、<xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=fullName>オーバー ロードします。  
  
   
  
## 例  
 次の例では、<xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName>をいくつかの文字列表現を解析<xref:System.Int32>値。 たとえば、現在のカルチャは、EN\-US です。  
  
 [!code-cpp[System.Int32.Parse\#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Int32.Parse/cpp/parse2.cpp#2)]
 [!code-csharp[System.Int32.Parse\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Int32.Parse/cs/Parse2.cs#2)]
 [!code-vb[System.Int32.Parse\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Int32.Parse/vb/Parse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。  
  
 \-または\-  
  
 <paramref name="style" /> は <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値と <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 値の組み合わせではありません。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> の形式が <paramref name="style" /> に準拠していません。</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> が、<see cref="F:System.Int32.MinValue" /> 未満の数値か、<see cref="F:System.Int32.MaxValue" /> より大きい数値を表しています。  
  
 \-または\-  
  
 <paramref name="s" /> に 0 以外の小数部の桁が含まれています。</exception>
        <altmember cref="M:System.Int32.ToString" />
        <altmember cref="Overload:System.Int32.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static int Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int32.Parse(System.String,System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">変換する数値を格納する文字列。</param>
        <param name="provider">
          <c>s</c> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>指定したカルチャに固有の書式による数値の文字列形式を、それと等価な 32 ビット符号付き整数に変換します。</summary>
        <returns>
          <paramref name="s" /> で指定した数値と等しい 32 ビット符号付き整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このオーバー ロード、<xref:System.Int32.Parse%28System.String%2CSystem.IFormatProvider%29>メソッドでは、さまざまな方法でフォーマットできるテキストに変換するために使用は、通常、<xref:System.Int32>値。 たとえば、数値の値を HTML テキスト ボックスに、ユーザーが入力したテキストに変換する、使用できます。  
  
 `s`パラメーターには、フォームの番号が含まれています。  
  
 \[ws\]\[サインイン\] 桁 \[ws\]  
  
 角かっこ \(\[および\]\) は省略可能の項目です。 次の表では、各要素について説明します。  
  
|要素|説明|  
|--------|--------|  
|*ws*|省略可能なホワイト スペースです。|  
|*sign*|省略可能な符号の場合。|  
|*数字*|0 から 9 までの数字のシーケンス。|  
  
 `s`パラメーターを使用して解釈されますが、<xref:System.Globalization.NumberStyles.Integer?displayProperty=fullName>スタイル。 10 進数字以外には、先頭と末尾のスペースが先頭の符号と共にのみを使用できます。 使用できるスタイル要素を明示的に定義する`s`を使用して、<xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=fullName>メソッドです。  
  
 `provider`パラメーターは、<xref:System.IFormatProvider>実装など、<xref:System.Globalization.NumberFormatInfo>または<xref:System.Globalization.CultureInfo>オブジェクト。`provider`パラメーターの書式に関するカルチャ固有の情報を提供`s`です。 場合`provider`は`null`、<xref:System.Globalization.NumberFormatInfo>オブジェクトの現在のカルチャが使用されます。  
  
   
  
## 例  
 次の例は、ボタンは、Web フォームのイベント ハンドラーをクリックします。 によって返される配列を使用して、<xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=fullName>プロパティをユーザーのロケールを決定します。 インスタンス化し、<xref:System.Globalization.CultureInfo>そのロケールに対応するオブジェクト。<xref:System.Globalization.NumberFormatInfo>に属しているオブジェクト<xref:System.Globalization.CultureInfo>にオブジェクトが渡され、<xref:System.Int32.Parse%28System.String%2CSystem.IFormatProvider%29>にユーザーを変換するメソッドの入力、<xref:System.Int32>値。  
  
 [!code-csharp[ParseMethod\#4](~/samples/snippets/csharp/VS_Snippets_CLR/ParseMethod/cs/Default.aspx.cs#4)]
 [!code-vb[ParseMethod\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/ParseMethod/vb/Default.aspx.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> が正しい形式ではありません。</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> が、<see cref="F:System.Int32.MinValue" /> 未満の数値か、<see cref="F:System.Int32.MaxValue" /> より大きい数値を表しています。</exception>
        <altmember cref="M:System.Int32.ToString" />
        <altmember cref="Overload:System.Int32.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static int Parse (string s, System.Globalization.NumberStyles style, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Parse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">変換する数値を格納する文字列。</param>
        <param name="style">
          <c>s</c> で使用可能なスタイル要素を示す、列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Integer" /> です。</param>
        <param name="provider">
          <c>s</c> の書式設定に関するカルチャ固有の情報を提供するオブジェクト。</param>
        <summary>指定したスタイルおよびカルチャに固有の書式による数値の文字列形式を、それと等価の 32 ビット符号付き整数に変換します。</summary>
        <returns>
          <paramref name="s" /> で指定した数値と等しい 32 ビット符号付き整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `style`パラメーター スタイル要素を定義します \(空白や正符号\) では許可されて、`s`解析操作が成功するためのパラメーターです。 ビット フラグの組み合わせを可能にする必要があります、<xref:System.Globalization.NumberStyles>列挙します。 値に応じて`style`、`s`パラメーターは、次の要素を含めることがあります。  
  
 \[ws\]\[$\]\[記号\]\[数字\] 桁 \[.fractional\_digist\] \[e \[サインイン\] exponential\_digits\] \[ws\]  
  
 または、`style`が含まれています<xref:System.Globalization.NumberStyles.AllowHexSpecifier>:  
  
 \[ws\] hexdigits \[ws\]  
  
 角かっこ \(\[および\]\) は省略可能の項目です。 次の表では、各要素について説明します。  
  
|要素|説明|  
|--------|--------|  
|*ws*|省略可能なホワイト スペースです。 先頭に空白文字は使用できません`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=fullName>の最後に表示されることができますフラグ、およびその`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=fullName>フラグ。|  
|*$*|カルチャ固有の通貨記号。 文字列内での位置がによって定義された、<xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=fullName>のプロパティ、<xref:System.Globalization.NumberFormatInfo>によって返されるオブジェクト、<xref:System.IFormatProvider.GetFormat%2A>のメソッド、`provider`パラメーター。 通貨記号に表示される`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=fullName>フラグ。|  
|*sign*|省略可能な符号の場合。 先頭に表示できる符号`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=fullName>フラグまたはの末尾`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=fullName>フラグ。 かっこを使用できる`s`負の値を指定する場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=fullName>フラグ。|  
|*数字*<br /><br /> *fractional\_digits*<br /><br /> *exponential\_digits*|0 ~ 9 桁の数字のシーケンス。*Fractional\_digits*数字の 0 が有効ではのみです。|  
|*,*|カルチャ固有の桁区切り記号。 数千で指定されたカルチャの区切り記号`provider`に表示できる`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=fullName>フラグ。|  
|*」を参照してください。*|カルチャに固有の小数点記号です。 指定されたカルチャの小数点記号`provider`に表示できる`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=fullName>フラグ。<br /><br /> 数字の 0 は、解析操作を成功させるため桁の小数部として表示できます。場合*fractional\_digits*他の任意の数字が含まれています、<xref:System.OverflowException>がスローされます。|  
|*e*|'E' または 'E' 文字は、値を指数表記で表されていることを示します。`s`場合、パラメーターは指数表記の数値を表すことができる`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=fullName>フラグ。|  
|*hexdigits*|一連の 0 f からまたは f 0 から 16 進数の数字|  
  
 10 進数字のみを含む文字列 \(に対応する、<xref:System.Globalization.NumberStyles.None?displayProperty=fullName>スタイル\) の範囲内にある場合は、常に正常に解析、<xref:System.Int32>型です。 ほとんど残りの<xref:System.Globalization.NumberStyles>メンバーを制御する可能性がありますが、この入力文字列内に存在する必要はない要素です。 次の表に示す個別<xref:System.Globalization.NumberStyles>メンバー内に存在可能な要素に影響を与える`s`です。  
  
|非複合 NumberStyles 値|数字だけでなく s で許可されている要素|  
|------------------------|--------------------------|  
|<xref:System.Globalization.NumberStyles.None?displayProperty=fullName>|10 進数字のみです。|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=fullName>|小数点 \( *.* \) および*小数部の桁*要素。 ただし、*小数部の桁*のみ 1 つ以上の数字が 0 ので構成されている必要がありますまたは<xref:System.OverflowException>がスローされます。|  
|<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=fullName>|`s`パラメーターは、指数表記も使用できます。 場合`s`指数表記の数値を表すの範囲内の整数を表す必要があります、<xref:System.Int32>ゼロ以外、小数部がないデータ型。|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=fullName>|*Ws*の先頭にある要素`s`です。|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=fullName>|*Ws*の末尾に要素`s`です。|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=fullName>|正の符号は、前に表示できる*桁*です。|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=fullName>|正の符号が後に表示される可能性が*桁*です。|  
|<xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=fullName>|*記号*数値の値を囲むかっこの形式での要素。|  
|<xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=fullName>|桁区切り記号 \( *、* \) 要素です。|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=fullName>|*$*要素。|  
  
 場合、<xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=fullName>フラグを使用すると、`s`プレフィックスのない 16 進値でなければなりません。 たとえば、"C9AF3"を正常に解析していて、"0xC9AF3"にはないです。 その他のフラグのみで使用可能な`style`は<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=fullName>と<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=fullName>です。 \(、<xref:System.Globalization.NumberStyles>列挙体には、複合数値スタイル<xref:System.Globalization.NumberStyles.HexNumber?displayProperty=fullName>、両方の空白文字のフラグが含まれている\)。  
  
 `provider`パラメーターは、<xref:System.IFormatProvider>実装など、<xref:System.Globalization.NumberFormatInfo>または<xref:System.Globalization.CultureInfo>オブジェクト。`provider`パラメーターの解析中に使用されるカルチャに固有の情報を提供します。 場合`provider`は`null`、<xref:System.Globalization.NumberFormatInfo>オブジェクトの現在のカルチャが使用されます。  
  
   
  
## 例  
 次の例は、さまざまな`style`と`provider`パラメーターの文字列形式を解析する<xref:System.Int32>値。 また、解析操作用の書式情報を使用するカルチャに応じて、同じ文字列を解釈できるさまざまな方法のいくつか示しています。  
  
 [!code-cpp[System.Int32.Parse\#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Int32.Parse/cpp/parse3.cpp#3)]
 [!code-csharp[System.Int32.Parse\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Int32.Parse/cs/Parse3.cs#3)]
 [!code-vb[System.Int32.Parse\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Int32.Parse/vb/Parse3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。  
  
 \-または\-  
  
 <paramref name="style" /> は <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値と <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 値の組み合わせではありません。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> の形式が <paramref name="style" /> に準拠していません。</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> が、<see cref="F:System.Int32.MinValue" /> 未満の数値か、<see cref="F:System.Int32.MaxValue" /> より大きい数値を表しています。  
  
 \-または\-  
  
 <paramref name="s" /> に 0 以外の小数部の桁が含まれています。</exception>
        <altmember cref="M:System.Int32.ToString" />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int32.System#IComparable#CompareTo(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int32.System#IConvertible#GetTypeCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int32.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />」を参照してください。</summary>
        <returns>現在のインスタンスの値が 0 でない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Int32> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToBoolean%28System.Int32%29?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int32.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />」を参照してください。</summary>
        <returns>
          <see cref="T:System.Byte" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Int32> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToByte%28System.Int32%29?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int32.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />」をご覧ください。</summary>
        <returns>
          <see cref="T:System.Char" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Int32> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToChar%28System.Int32%29?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int32.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>この変換はサポートされていません。 値は返されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int32.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />」を参照してください。</summary>
        <returns>
          <see cref="T:System.Decimal" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Int32> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToDecimal%2A?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int32.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />」を参照してください。</summary>
        <returns>
          <see cref="T:System.Double" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Int32> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToDouble%28System.Int32%29?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int32.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />」を参照してください。</summary>
        <returns>
          <see cref="T:System.Int16" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Int32> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToInt16%28System.Int32%29?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int32.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />」をご覧ください。</summary>
        <returns>変更されていない、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Int32> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int32.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />」をご覧ください。</summary>
        <returns>
          <see cref="T:System.Int64" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Int32> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToInt64%28System.Int32%29?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int32.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />」を参照してください。</summary>
        <returns>
          <see cref="T:System.SByte" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Int32> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToSByte%28System.Int32%29?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int32.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />」を参照してください。</summary>
        <returns>
          <see cref="T:System.Single" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Int32> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToSingle%28System.Int32%29?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int32.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type">この <see cref="T:System.Int32" /> 値の変換後の型。</param>
        <param name="provider">戻り値の書式に関する情報を提供するオブジェクト。</param>
        <summary>このメンバーの説明については、「<see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />」を参照してください。</summary>
        <returns>
          <paramref name="type" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Int32> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 `static` \(`Shared` Visual Basic で\) <xref:System.Convert.ChangeType%2A?displayProperty=fullName> メソッド代わりにします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int32.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />」をご覧ください。</summary>
        <returns>
          <see cref="T:System.UInt16" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Int32> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 推奨される代替手段が呼び出されて、<xref:System.Convert.ToUInt16%28System.Int32%29?displayProperty=fullName>メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int32.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />」を参照してください。</summary>
        <returns>
          <see cref="T:System.UInt32" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Int32> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToUInt32%28System.Int32%29?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int32.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このパラメーターは無視されます。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />」を参照してください。</summary>
        <returns>
          <see cref="T:System.UInt64" /> に変換後の、現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Int32> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出す、推奨される代替ことです、 <xref:System.Convert.ToUInt64%28System.Int32%29?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int32.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスの数値を、それと等価な文字列形式に変換します。</summary>
        <returns>値が負の場合はマイナス記号を伴い、先行ゼロを含まない 0 から 9 の一連の数字から構成される、このインスタンスの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Int32.ToString>メソッドの形式、 <xref:System.Int32> \("G"、または \[全般\]\) の既定の値の形式を使用して、<xref:System.Globalization.NumberFormatInfo>現在のカルチャ オブジェクト。 別の形式またはカルチャを指定する場合は、他のオーバー ロードを使用して、<xref:System.Int32.ToString%2A>メソッドは、次のようにします。  
  
|形式を使用するには|カルチャの|オーバー ロードを使用します。|  
|---------------|-----------|---------------------|  
|既定値 \("G"\) 書式|特定のカルチャ|<xref:System.Int32.ToString%28System.IFormatProvider%29>|  
|特定の形式|\(現在\) の既定のカルチャ|<xref:System.Int32.ToString%28System.String%29>|  
|特定の形式|特定のカルチャ|<xref:System.Int32.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 .NET Framework では、次の書式設定のトピックで詳しく説明されている、広範な書式設定サポートを提供します。  
  
-   数値書式指定子の詳細については、次を参照してください。[Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467)と[Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4)です。  
  
-   書式設定に関する詳細については、次を参照してください。[Formatting Types in the .NET Framework](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f)です。  
  
   
  
## 例  
 次の例を表示、<xref:System.Int32>値の既定値を使用して<xref:System.Int32.ToString>メソッドです。 文字列形式も表示されます、<xref:System.Int32>からさまざまな標準書式指定子を使用して結果の値。 例は、EN\-US カルチャの書式指定規則を使用して表示されます。  
  
 [!code-cpp[System.Int32.ToString\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Int32.ToString/cpp/ToString1.cpp#1)]
 [!code-csharp[System.Int32.ToString\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Int32.ToString/cs/ToString.cs#1)]
 [!code-vb[System.Int32.ToString\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Int32.ToString/vb/ToString.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Int32.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int32.ToString(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>このインスタンスの数値を、指定したカルチャ固有の書式情報を使用して、それと等価な文字列形式に変換します。</summary>
        <returns>
          <paramref name="provider" /> で指定された、このインスタンスの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Int32.ToString%28System.IFormatProvider%29>メソッドの形式、 <xref:System.Int32> \("G"、または \[全般\]\) の既定の値の形式を使用して、<xref:System.Globalization.NumberFormatInfo>特定のカルチャ オブジェクト。 別の形式または現在のカルチャを指定する場合は、他のオーバー ロードを使用して、<xref:System.Int32.ToString%2A>メソッドは、次のようにします。  
  
|形式を使用するには|カルチャの|オーバー ロードを使用します。|  
|---------------|-----------|---------------------|  
|既定値 \("G"\) 書式|\(現在\) の既定のカルチャ|<xref:System.Int32.ToString>|  
|特定の形式|\(現在\) の既定のカルチャ|<xref:System.Int32.ToString%28System.String%29>|  
|特定の形式|特定のカルチャ|<xref:System.Int32.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 `provider`パラメーターを実装するオブジェクト、<xref:System.IFormatProvider>インターフェイスです。 その<xref:System.IFormatProvider.GetFormat%2A>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>このメソッドによって返される文字列の書式に関するカルチャ固有の情報を提供するオブジェクト。 実装するオブジェクト<xref:System.IFormatProvider>次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>が書式指定規則が使用されるカルチャを表すオブジェクト。  
  
-   A<xref:System.Globalization.NumberFormatInfo>この値の特定の数値書式設定情報を含むオブジェクトです。  
  
-   実装するカスタム オブジェクト<xref:System.IFormatProvider>と持つ<xref:System.IFormatProvider.GetFormat%2A>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>の書式情報を提供するオブジェクト。  
  
 場合`provider`は`null` または<xref:System.Globalization.NumberFormatInfo>からオブジェクトを取得できません`provider`を使用して、戻り値が書式設定、<xref:System.Globalization.NumberFormatInfo>の現在のスレッド カルチャ オブジェクト。 現在のスレッド カルチャのについては、次を参照してください。<xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=fullName>です。  
  
 .NET Framework では、次の書式設定のトピックで詳しく説明されている、広範な書式設定サポートを提供します。  
  
-   数値書式指定子の詳細については、次を参照してください。[Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467)と[Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4)です。  
  
-   書式設定に関する詳細については、次を参照してください。[Formatting Types in the .NET Framework](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f)です。  
  
   
  
## 例  
 次の例の文字列形式を表示する、<xref:System.Int32>値を使用して<xref:System.Globalization.CultureInfo>を複数の異なるカルチャを表すオブジェクト。  
  
 [!code-cpp[System.Int32.ToString\#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Int32.ToString/cpp/ToString2.cpp#2)]
 [!code-csharp[System.Int32.ToString\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Int32.ToString/cs/ToString.cs#2)]
 [!code-vb[System.Int32.ToString\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Int32.ToString/vb/ToString.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Int32.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int32.ToString(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">標準またはカスタムの数値書式指定文字列。</param>
        <summary>指定した書式を使用して、このインスタンスの数値を、それと等価な文字列形式に変換します。</summary>
        <returns>
          <paramref name="format" /> で指定された、このインスタンスの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Int32.ToString%28System.String%29>メソッドの形式、<xref:System.Int32>値を使用して指定された形式で、<xref:System.Globalization.NumberFormatInfo>を現在のカルチャの規則を表すオブジェクト。 既定値 \("G"、または \[全般\]\) を使用する場合は、書式を設定または別のカルチャを指定して、他のオーバー ロードを使用して、<xref:System.Int32.ToString%2A>メソッドは、次のように。  
  
|形式を使用するには|カルチャの|オーバー ロードを使用します。|  
|---------------|-----------|---------------------|  
|既定値 \("G"\) 書式|\(現在\) の既定のカルチャ|<xref:System.Int32.ToString>|  
|既定値 \("G"\) 書式|特定のカルチャ|<xref:System.Int32.ToString%28System.IFormatProvider%29>|  
|特定の形式|特定のカルチャ|<xref:System.Int32.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 `format`パラメーターには、"R"を除く任意の有効な標準の数値書式指定子およびカスタム数値書式指定子の任意の組み合わせを指定できます。 場合`format`は`null`または空の文字列 \(""\)、このインスタンスの戻り値が、一般的な数値書式指定子 \("G"\) でフォーマットされています。  
  
 .NET Framework では、次の書式設定のトピックで詳しく説明されている、広範な書式設定サポートを提供します。  
  
-   数値書式指定子の詳細については、次を参照してください。[Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467)と[Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4)です。  
  
-   書式設定に関する詳細については、次を参照してください。[Formatting Types in the .NET Framework](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f)です。  
  
 このインスタンスの戻り値でフォーマットされた、<xref:System.Globalization.NumberFormatInfo>現在のカルチャ。  
  
   
  
## 例  
 次の例を表示、<xref:System.Int32>値のサポートされている標準数値書式指定子、および 2 つのカスタム数値書式指定文字列を使用します。 数値を文字列に変換するのには、EN\-US カルチャの書式指定規則を使用します。  
  
 [!code-cpp[System.Int32.ToString\#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Int32.ToString/cpp/ToString3.cpp#3)]
 [!code-csharp[System.Int32.ToString\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Int32.ToString/cs/ToString.cs#3)]
 [!code-vb[System.Int32.ToString\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Int32.ToString/vb/ToString.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> は使用できないか、またはサポートされていません。</exception>
        <altmember cref="M:System.Int32.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int32.ToString(System.String,System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">標準またはカスタムの数値書式指定文字列。</param>
        <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>このインスタンスの数値を、指定した書式およびカルチャ固有の書式情報を使用して、それと等価な文字列形式に変換します。</summary>
        <returns>
          <paramref name="format" /> と <paramref name="provider" /> で指定された、このインスタンスの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Int32.ToString%28System.String%2CSystem.IFormatProvider%29>メソッドの形式、<xref:System.Int32>値を使用して指定された形式で、<xref:System.Globalization.NumberFormatInfo>特定のカルチャ オブジェクト。 既定の形式またはカルチャの設定を使用する場合は、他のオーバー ロードを使用して、<xref:System.Int32.ToString%2A>メソッドは、次のようにします。  
  
|形式を使用するには|カルチャの|オーバー ロードを使用します。|  
|---------------|-----------|---------------------|  
|既定値 \("G"\) 書式|\(現在\) の既定のカルチャ|<xref:System.Int32.ToString>|  
|既定値 \("G"\) 書式|特定のカルチャ|<xref:System.Int32.ToString%28System.IFormatProvider%29>|  
|特定の形式|\(現在\) の既定のカルチャ|<xref:System.Int32.ToString%28System.String%29>|  
  
 `format`パラメーターには、標準またはカスタム数値書式指定文字列のいずれかを指定できます。 すべてのカスタム数値書式指定文字として、"R"\(または"r"\) 以外のすべての標準数値書式指定文字列はサポートされます。 場合`format`は`null`または空の文字列 \(""\)、このインスタンスの戻り値が、一般的な数値書式指定子 \("G"\) でフォーマットされています。  
  
 `provider`パラメーターを実装するオブジェクト、<xref:System.IFormatProvider>インターフェイスです。 その<xref:System.IFormatProvider.GetFormat%2A>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>このメソッドによって返される文字列の書式に関するカルチャ固有の書式情報を提供するオブジェクト。 実装するオブジェクト<xref:System.IFormatProvider>次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>が書式指定規則が使用されるカルチャを表すオブジェクト。  
  
-   A<xref:System.Globalization.NumberFormatInfo>この値の特定の数値書式設定情報を含むオブジェクトです。  
  
-   実装するカスタム オブジェクト<xref:System.IFormatProvider>と持つ<xref:System.IFormatProvider.GetFormat%2A>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>の書式情報を提供するオブジェクト。  
  
 場合`provider`は`null`または<xref:System.Globalization.NumberFormatInfo>からオブジェクトを取得できません`provider`、このインスタンスの戻り値でフォーマットされた、<xref:System.Globalization.NumberFormatInfo>現在のカルチャ。  
  
 .NET Framework では、次の書式設定のトピックで詳しく説明されている、広範な書式設定サポートを提供します。  
  
-   数値書式指定子の詳細については、次を参照してください。[Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467)と[Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4)です。  
  
-   書式設定に関する詳細については、次を参照してください。[Formatting Types in the .NET Framework](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f)です。  
  
   
  
## 例  
 次の例では、正と負の値が 3 つの異なるカルチャを使用して、サポートされている標準数値書式指定子の各が表示されます。  
  
 [!code-cpp[System.Int32.ToString\#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Int32.ToString/cpp/ToString4.cpp#4)]
 [!code-csharp[System.Int32.ToString\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Int32.ToString/cs/ToString.cs#4)]
 [!code-vb[System.Int32.ToString\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Int32.ToString/vb/ToString.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> は使用できないか、またはサポートされていません。</exception>
        <altmember cref="M:System.Int32.Parse(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out int result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, int32 result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int32.TryParse(System.String,System.Int32@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">変換する数値を格納する文字列。</param>
        <param name="result">変換が成功した場合、このメソッドが返されるときに、<c>s</c> に格納された数値と等価の 32 ビット符号付き整数値を格納します。変換に失敗した場合は 0 を格納します。<c>s</c> パラメーターが <see langword="null" /> または <see cref="F:System.String.Empty" /> であるか、正しい形式ではない、または <see cref="F:System.Int32.MinValue" /> より小さいか <see cref="F:System.Int32.MaxValue" /> より大きい数値を表している場合、変換は失敗します。 このパラメーターは初期化されていない状態で渡されています。<c>result</c> で最初に指定された任意の値が上書きされます。</param>
        <summary>数値の文字列形式を、それと等価な 32 ビット符号付き整数に変換します。 戻り値は、変換が成功したかどうかを示します。</summary>
        <returns>
          <see langword="true" /> が正常に変換された場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Int32.TryParse%2A>などのメソッドは、<xref:System.Int32.Parse%2A>メソッドを除く、<xref:System.Int32.TryParse%2A>変換が失敗した場合、メソッドが例外をスローしません。 テストするため、例外処理を使用する必要がある、<xref:System.FormatException>イベントで`s`無効なため、正常に解析することはできません。  
  
 `s`パラメーターには、フォームの番号が含まれています。  
  
 \[ws\]\[サインイン\] 桁 \[ws\]  
  
 角かっこ \(\[および\]\) は省略可能の項目です。 次の表では、各要素について説明します。  
  
|要素|説明|  
|--------|--------|  
|*ws*|省略可能なホワイト スペースです。|  
|*sign*|省略可能な符号の場合。|  
|*数字*|0 から 9 までの数字のシーケンス。|  
  
 `s`パラメーターを使用して解釈されますが、<xref:System.Globalization.NumberStyles.Integer?displayProperty=fullName>スタイル。 10 進数字以外には、先頭と末尾のスペースが先頭の符号と共にのみを使用できます。 使用できるカルチャに固有の書式情報とスタイル要素を明示的に定義する`s`を使用して、<xref:System.Int32.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Int32%40%29?displayProperty=fullName>メソッドです。  
  
 `s`で書式設定情報を使用してパラメーターを解析、<xref:System.Globalization.NumberFormatInfo>オブジェクトの現在のシステムのカルチャ用に初期化します。 詳細については、「<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>」を参照してください。  
  
 このオーバー ロード、<xref:System.Int32.TryParse%2A>メソッド内のすべての桁を解釈し、`s`として小数点以下桁数のパラメーターです。 16 進数の文字列表現を解析するには、呼び出し、<xref:System.Int32.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Int32%40%29?displayProperty=fullName>オーバー ロードします。  
  
   
  
## 例  
 次の例では、<xref:System.Int32.TryParse%28System.String%2CSystem.Int32%40%29?displayProperty=fullName>別の文字列値の数を持つメソッドです。  
  
 [!code-cpp[System.Int32.TryParse\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Int32.TryParse/cpp/int32.tryparse1.cpp#1)]
 [!code-csharp[System.Int32.TryParse\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Int32.TryParse/cs/TryParse1.cs#1)]
 [!code-vb[System.Int32.TryParse\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Int32.TryParse/vb/TryParse1.vb#1)]  
  
 文字列の一部を<xref:System.Int32.TryParse%28System.String%2CSystem.Int32%40%29>メソッドはこの例では変換することはありませんが。  
  
-   "9432.0". 小数点の記号を含めることはできませんので、変換に失敗します。整数部の桁のみでなければなりません。  
  
-   "16,667". 文字列は、グループの区切り記号を含めることはできませんので、変換に失敗します。整数部の桁のみでなければなりません。  
  
-   "\(100\)". 文字列は、現在のカルチャによって定義されたもの以外の負の符号を含めることはできませんので、変換が失敗した<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName>と<xref:System.Globalization.NumberFormatInfo.NumberNegativePattern%2A?displayProperty=fullName>プロパティです。  
  
-   "01FA"です。 文字列は 16 進数の数字を含めることはできませんので、変換に失敗します。10 進数字のみでなければなりません。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Int32.Parse(System.String)" />
        <altmember cref="M:System.Int32.ToString" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider provider, out int result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, int32 result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">変換する数値を格納する文字列。 文字列は、<c>style</c> で指定されたスタイルを使用して解釈されます。</param>
        <param name="style">
          <c>s</c> で使用可能なスタイル要素を示す、列挙値のビットごとの組み合わせ。 通常指定する値は <see cref="F:System.Globalization.NumberStyles.Integer" /> です。</param>
        <param name="provider">
          <c>s</c> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="result">変換が成功した場合、このメソッドが返されるときに、<c>s</c> に格納された数値と等価の 32 ビット符号付き整数値を格納します。変換に失敗した場合は 0 を格納します。<c>s</c> パラメーターが <see langword="null" /> または <see cref="F:System.String.Empty" /> であるか、<c>style</c> に準拠した形式ではない、または <see cref="F:System.Int32.MinValue" /> より小さいか <see cref="F:System.Int32.MaxValue" /> より大きい数値を表している場合、変換は失敗します。 このパラメーターは初期化されていない状態で渡されています。<c>result</c> で最初に指定された任意の値が上書きされます。</param>
        <summary>指定したスタイルおよびカルチャに固有の書式による数値の文字列形式を、それと等価の 32 ビット符号付き整数に変換します。 戻り値は、変換が成功したかどうかを示します。</summary>
        <returns>
          <see langword="true" /> が正常に変換された場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Int32.TryParse%2A>などのメソッドは、<xref:System.Int32.Parse%2A>メソッド、を除き、<xref:System.Int32.TryParse%2A>変換が失敗した場合、メソッドが例外をスローしません。 テストするため、例外処理を使用する必要がある、<xref:System.FormatException>イベントで`s`無効なため、正常に解析されたことはできません。  
  
 `style`パラメーター スタイル要素を定義します \(空白や正または負符号\) では許可されて、`s`解析操作が成功するためのパラメーターです。 ビット フラグの組み合わせを可能にする必要があります、<xref:System.Globalization.NumberStyles>列挙します。 値に応じて`style`、`s`パラメーターは、次の要素を含めることがあります。  
  
 \[ws\]\[$\]\[記号\]\[数字\] 桁 \[.fractional\_digits\] \[e \[サインイン\] 桁\] \[ws\]  
  
 またはの場合、`style`パラメーターが含まれています<xref:System.Globalization.NumberStyles.AllowHexSpecifier>:  
  
 \[ws\] hexdigits \[ws\]  
  
 角かっこ \(\[および\]\) は省略可能の項目です。 次の表では、各要素について説明します。  
  
|要素|説明|  
|--------|--------|  
|*ws*|省略可能なホワイト スペースです。 先頭に空白文字は使用できません`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=fullName>フラグ、またはの末尾`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=fullName>フラグ。|  
|*$*|カルチャ固有の通貨記号。 文字列内での位置がによって定義された、<xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A>のプロパティ、<xref:System.Globalization.NumberFormatInfo>によって返されるオブジェクト、<xref:System.IFormatProvider.GetFormat%2A>のメソッド、`provider`のパラメーターです。 通貨記号に表示される`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=fullName>フラグ。|  
|*sign*|省略可能な符号の場合。 記号に表示される `s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=fullName>または<xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=fullName>フラグ。|  
|*数字*|0 ~ 9 桁の数字のシーケンス。|  
|*,*|カルチャ固有の桁区切り記号。 数千で指定されたカルチャの区切り記号`provider`に表示できる`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=fullName>フラグ。|  
|*」を参照してください。*|カルチャに固有の小数点記号です。 指定されたカルチャの小数点記号`provider`に表示できる`s`場合`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=fullName>フラグ。|  
|*fractional\_digits*|数字の 0 の 1 つ以上の出現します。 小数部の桁が表示できる`s`場合にのみ、`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=fullName>フラグ。|  
|*e*|'E' または 'E' 文字は、値を指数表記で表されていることを示します。`s`場合、パラメーターは指数表記の数値を表すことができる`style`が含まれています、<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=fullName>フラグ。|  
|*hexdigits*|一連の 0 f からまたは f 0 から 16 進数の数字|  
  
 10 進数字のみを含む文字列 \(に対応する、<xref:System.Globalization.NumberStyles.None?displayProperty=fullName>フラグ\) が正常に解析します。 ほとんど残りの<xref:System.Globalization.NumberStyles>メンバーを制御する可能性がありますが、この入力文字列内に存在する必要はない要素です。 次の表に示す個別<xref:System.Globalization.NumberStyles>メンバー内に存在可能な要素に影響を与える`s`です。  
  
|非複合 NumberStyles 値|数字だけでなく s で許可されている要素|  
|------------------------|--------------------------|  
|<xref:System.Globalization.NumberStyles.None?displayProperty=fullName>|10 進数字のみです。|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=fullName>|小数点 \(*.*\) および*fractional\_digits*要素。 ただし、 *fractional\_digits*のみ 1 つ以上の数字が 0 のメソッドを返しますで構成されている必要があります`false`です。|  
|<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=fullName>|`s`パラメーターは、指数表記も使用できます。 場合`s`指数表記の数値を表すの範囲内の整数を表す必要があります、<xref:System.Int32>ゼロ以外、小数部がないデータ型。|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=fullName>|*Ws*の先頭にある要素`s`です。|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=fullName>|*Ws*の末尾に要素`s`です。|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=fullName>|前に、記号を表示できる*桁*です。|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=fullName>|後に記号が表示される可能性が*桁*です。|  
|<xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=fullName>|*記号*数値の値を囲むかっこの形式での要素。|  
|<xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=fullName>|桁区切り記号 \(*、*\) 要素です。|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=fullName>|*$*要素。|  
|<xref:System.Globalization.NumberStyles.Currency?displayProperty=fullName>|すべての要素。`s`パラメーターには、16 進数または指数表記の数値を表すことはできません。|  
|<xref:System.Globalization.NumberStyles.Float?displayProperty=fullName>|*Ws*先頭または末尾の位置にある要素`s`、*記号*の先頭に`s`、および小数点 \(*.*\) シンボル。`s`パラメーターは、指数表記も使用できます。|  
|<xref:System.Globalization.NumberStyles.Number?displayProperty=fullName>|*Ws*、*記号*、何千もの区切り記号 \(*、*\)、および小数点 \(*.*\) 要素です。|  
|<xref:System.Globalization.NumberStyles.Any?displayProperty=fullName>|すべてのスタイルを除く`s`16 進数を表すことはできません。|  
  
 場合、<xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=fullName>フラグを使用すると、`s`プレフィックスのない 16 進値でなければなりません。 たとえば、"C9AF3"を正常に解析していて、"0xC9AF3"にはないです。 その他のフラグのみで使用可能な`style`は<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=fullName>と<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=fullName>です。 \(、<xref:System.Globalization.NumberStyles>列挙体には、複合スタイル<xref:System.Globalization.NumberStyles.HexNumber?displayProperty=fullName>、両方の空白文字のフラグが含まれている\)。  
  
 `provider`パラメーターは、<xref:System.IFormatProvider>実装など、<xref:System.Globalization.CultureInfo>オブジェクトまたは<xref:System.Globalization.NumberFormatInfo>オブジェクト、<xref:System.IFormatProvider.GetFormat%2A>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>オブジェクト。<xref:System.Globalization.NumberFormatInfo>オブジェクトの書式に関するカルチャ固有の情報を提供`s`です。 場合`provider`は`null`、<xref:System.Globalization.NumberFormatInfo>オブジェクトの現在のカルチャが使用されます。  
  
   
  
## 例  
 次の例では、<xref:System.Int32.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Int32%40%29?displayProperty=fullName>別の文字列の数を持つメソッドと<xref:System.Globalization.NumberStyles>値。  
  
 [!code-cpp[System.Int32.TryParse\#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Int32.TryParse/cpp/int32.tryparse2.cpp#2)]
 [!code-csharp[System.Int32.TryParse\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Int32.TryParse/cs/TryParse2.cs#2)]
 [!code-vb[System.Int32.TryParse\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Int32.TryParse/vb/TryParse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。  
  
 \-または\-  
  
 <paramref name="style" /> が <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値と <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 値の組み合わせではありません。</exception>
        <altmember cref="M:System.Int32.Parse(System.String)" />
        <altmember cref="T:System.Globalization.NumberStyles" />
        <altmember cref="M:System.Int32.ToString" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このインスタンスの数値を、それと等価な文字列形式に変換します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>数値の文字列形式を、それと等価な 32 ビット符号付き整数に変換します。 戻り値は、演算が成功したかどうかを示します。</summary>
        <altmember cref="Overload:System.Int32.Parse" />
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>数値の文字列形式を、それと等価な 32 ビット符号付き整数に変換します。</summary>
        <altmember cref="Overload:System.Int32.TryParse" />
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>対象のインスタンスが、指定したオブジェクトまたは <see cref="T:System.Int32" /> に等しいかどうかを示す値を返します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したオブジェクトまたは <see cref="T:System.Int32" /> とこのインスタンスを比較し、これらの相対値を示す値を返します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>