<Type Name="TimeSpan" FullName="System.TimeSpan">
  <TypeSignature Language="C#" Value="public struct TimeSpan : IComparable, IComparable&lt;TimeSpan&gt;, IEquatable&lt;TimeSpan&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit TimeSpan extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.TimeSpan&gt;, class System.IEquatable`1&lt;valuetype System.TimeSpan&gt;, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.TimeSpan" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.TimeSpan&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.TimeSpan&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>時間間隔を表します。  
  
 この型の .NET Framework ソース コードを参照するを参照してください。、 [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/timespan.cs#865ef7b89f41b632)します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  この型の .NET Framework ソース コードを参照してください、 [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/timespan.cs#865ef7b89f41b632)します。 ソース コードをオンラインで参照、オフライン表示のリファレンスをダウンロードおよびデバッグ中にソース \(パッチや更新を含む\) をステップsee [instructions](http://referencesource.microsoft.com/).  
  
 A <xref:System.TimeSpan> オブジェクトは、日、時、分、秒、および秒の小数部の正または負の数として測定される時間間隔 \(時間の経過時間の期間\) を表します。<xref:System.TimeSpan> 時間が、特定の日付に関連する場合にのみ、1 日の時刻を表したりする構造体を使用することもできます。 それ以外の場合、 <xref:System.DateTime> または <xref:System.DateTimeOffset> 構造体を代わりに使用する必要があります。 \(使用の詳細については、 <xref:System.TimeSpan> 構造体を参照してください、1 日の時刻が反映 [Choosing Between DateTime, DateTimeOffset, and TimeZoneInfo](http://msdn.microsoft.com/ja-jp/07f17aad-3571-4014-9ef3-b695a86f3800).\)  
  
> [!NOTE]
>  A <xref:System.TimeSpan> 値は、時間間隔を表し、日、時間、分、秒、ミリ秒などの特定の数として表現できます。 特定の始点または終点を参照せずに全般的な間隔を表しているので、年と月、日の変数の数があるの観点から表現できません。 異なり、 <xref:System.DateTime> を特定のタイム ゾーンへの参照なしの日時を表す値または <xref:System.DateTimeOffset> の特定の時点を表す値。  
  
 れたときに、最大の単位、 <xref:System.TimeSpan> 期間の測定に使用する構造体は、1 日です。 時間間隔より大きな年、月などの時間単位の日数が異なるために、一貫性を確保する日数で表されます。  
  
 値、 <xref:System.TimeSpan> オブジェクトが表される時間間隔に相当するタイマー刻みの数。 1 ティックは 100 ナノ秒または 1 つ 1,000万分の 1 秒間に一致します。 値、 <xref:System.TimeSpan> オブジェクトの範囲は <xref:System.TimeSpan.MinValue?displayProperty=fullName> に <xref:System.TimeSpan.MaxValue?displayProperty=fullName>します。  
  
## TimeSpan 値をインスタンス化します。  
 インスタンスを作成できる、 <xref:System.TimeSpan> さまざまな方法で値。  
  
-   暗黙的な既定のコンス トラクターを呼び出します。 値がオブジェクトを作成するこの <xref:System.TimeSpan.Zero?displayProperty=fullName>, 次の例を示します。  
  
     [!code-csharp[System.TimeSpan.Class\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.class/cs/instantiate1.cs#2)]
     [!code-vb[System.TimeSpan.Class\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class/vb/instantiate1.vb#2)]  
  
-   明示的なコンス トラクターのいずれかを呼び出します。 次の例では初期化、 <xref:System.TimeSpan> を指定した時間、分、および秒の値。  
  
     [!code-csharp[System.TimeSpan.Class\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.class/cs/instantiate1.cs#3)]
     [!code-vb[System.TimeSpan.Class\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class/vb/instantiate1.vb#3)]  
  
-   メソッドを呼び出すかを返す操作を実行して、 <xref:System.TimeSpan> 値。 たとえば、インスタンス化できる、 <xref:System.TimeSpan> を次の例のように、2 つの日付と時刻値の間隔を表す値。  
  
     [!code-csharp[System.TimeSpan.Class\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.class/cs/instantiate1.cs#4)]
     [!code-vb[System.TimeSpan.Class\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class/vb/instantiate1.vb#4)]  
  
     初期化することもできますが、 <xref:System.TimeSpan> オブジェクトは次の例のように、この方法で時刻値がゼロにします。  
  
     [!code-csharp[System.TimeSpan.Class\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.class/cs/zero1.cs#6)]
     [!code-vb[System.TimeSpan.Class\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class/vb/zero1.vb#6)]  
  
     <xref:System.TimeSpan> 値は、算術演算子およびのメソッドによって返される、 <xref:System.DateTime>, 、<xref:System.DateTimeOffset>, 、および <xref:System.TimeSpan> 構造体。  
  
-   文字列形式を解析することによって、 <xref:System.TimeSpan> 値。 使用することができます、 <xref:System.TimeSpan.Parse%2A> と <xref:System.TimeSpan.TryParse%2A> を時間の経過を含む文字列を変換するメソッド <xref:System.TimeSpan> 値。 次の例では、 <xref:System.TimeSpan.Parse%2A> する文字列の配列を変換する方法の <xref:System.TimeSpan> 値。  
  
     [!code-csharp[System.TimeSpan.Class\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.class/cs/instantiate1.cs#5)]
     [!code-vb[System.TimeSpan.Class\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class/vb/instantiate1.vb#5)]  
  
     さらに、解析されに変換する入力文字列の正確な形式を定義できる、 <xref:System.TimeSpan> を呼び出して値、 <xref:System.TimeSpan.ParseExact%2A> または <xref:System.TimeSpan.TryParseExact%2A> メソッドです。  
  
## TimeSpan 値に対して操作を実行します。  
 リストにログインを追加したり、時間を減算を使用するか、 <xref:System.TimeSpan.op_Addition%2A> と <xref:System.TimeSpan.op_Subtraction%2A> 演算子、またはを呼び出して、 <xref:System.TimeSpan.Add%2A> と <xref:System.TimeSpan.Subtract%2A> メソッドです。 呼び出して、2 つの期間を比較することも、 <xref:System.TimeSpan.Compare%2A>, 、<xref:System.TimeSpan.CompareTo%2A>, 、および <xref:System.TimeSpan.Equals%2A> メソッドです。<xref:System.TimeSpan> 構造も含まれています、 <xref:System.TimeSpan.Duration%2A> と <xref:System.TimeSpan.Negate%2A> メソッドで、時間間隔を正と負の値に変換  
  
 範囲 <xref:System.TimeSpan> 値は <xref:System.TimeSpan.MinValue> に <xref:System.TimeSpan.MaxValue>します。  
  
## TimeSpan 値を書式設定  
 A <xref:System.TimeSpan> として値を表すことが \[*\-*\]*d*.*hh*:*mm*:*ss*.*ff*, 、省略可能なマイナス記号が負の時間間隔を示す、 *d* コンポーネントは、日数、 *hh* は 24 時間制では、上で測定される時間 *mm* 分です。 *ss* \(秒単位\) は、と *ff* 秒の小数部は、です。 つまり、時間間隔は、1 日の時刻のない日間の正または負の数または 1 日の時間または日の時刻のみを日数で構成されます。  
  
 以降で、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], 、 <xref:System.TimeSpan> 構造体のオーバー ロードを通じてカルチャ依存の書式指定をサポートしているその <xref:System.TimeSpan.ToString%2A> に変換するメソッド、 <xref:System.TimeSpan> 値の文字列形式にします。 既定値 <xref:System.TimeSpan.ToString?displayProperty=fullName> メソッドは、.NET Framework の以前のバージョンでその戻り値と同じであるロケールに依存しない形式を使用して時間間隔を返します。<xref:System.TimeSpan.ToString%28System.String%29?displayProperty=fullName> オーバー ロードを使用して、時間間隔の文字列形式を定義する書式指定文字列を指定できます。<xref:System.TimeSpan.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> オーバー ロードでは、書式指定文字列との書式指定規則が時間間隔の文字列形式の作成に使用するカルチャを指定することができます。 <xref:System.TimeSpan> 両方の標準とカスタムの書式指定文字列をサポートしています。 \(詳細については、「[Standard TimeSpan Format Strings](http://msdn.microsoft.com/ja-jp/9f6c95eb-63ae-4dcc-9c32-f81985c75794)」および「[Custom TimeSpan Format Strings](http://msdn.microsoft.com/ja-jp/a63ebf55-7269-416b-b4f5-286f6c03bf0e)」を参照してください。\) ただし、のみ標準書式指定文字列は、カルチャ依存です。  
  
## レガシの TimeSpan 書式設定を復元します。  
 コードでは、場合によっては、正常にその形式 <xref:System.TimeSpan> 値 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] で動作しない以前のバージョンと [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]です。 これを呼び出すコードで最も一般的な [\< TimeSpan\_LegacyFormatMode \> 要素](http://msdn.microsoft.com/ja-jp/865e7207-d050-4442-b574-57ea29d5e2d6) 書式指定するメソッド、 <xref:System.TimeSpan> に書式指定文字列の値。 次の例が正しく書式設定、 <xref:System.TimeSpan> 値 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] と以前のバージョン例外がスローされますが、 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 以降のバージョン。 書式を設定しようとしている、 <xref:System.TimeSpan> 、サポートされていない書式指定子では無視されますを使用して、値 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] と以前のバージョン。  
  
 [!code-csharp[System.TimeSpan.Class.Legacy\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.class.legacy/cs/legacycode1.cs#1)]
 [!code-vb[System.TimeSpan.Class.Legacy\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class.legacy/vb/legacycode1.vb#1)]  
  
 従来の書式設定を復元するには、コードを変更できない場合 <xref:System.TimeSpan> 、次の方法のいずれかの値。  
  
-   構成ファイルを作成することで、次が含まれています。、 [\< TimeSpan\_LegacyFormatMode \> 要素](http://msdn.microsoft.com/ja-jp/865e7207-d050-4442-b574-57ea29d5e2d6)します。 この要素を設定する `enabled` 属性を `true` 復元レガシ <xref:System.TimeSpan> アプリケーションごとに書式設定します。  
  
-   "NetFx40\_TimeSpanLegacyFormatMode"との互換性を設定して、アプリケーション ドメインを作成するときを切り替えます。 これにより、レガシ <xref:System.TimeSpan> アプリケーション ドメインごとに書式設定します。 次の例では、従来の使用しているアプリケーション ドメインが作成 <xref:System.TimeSpan> 書式設定します。  
  
     [!code-csharp[System.TimeSpan.Class.AppDomain\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.class.appdomain/cs/perappdomain1.cs#1)]
     [!code-vb[System.TimeSpan.Class.AppDomain\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class.appdomain/vb/perappdomain1.vb#1)]  
  
     次のコードは、新しいアプリケーション ドメインで実行する場合、レガシに戻ります <xref:System.TimeSpan> 書式指定動作します。  
  
     [!code-csharp[System.TimeSpan.Class.AppDomain\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.class.appdomain/cs/showtimespan.cs#2)]
     [!code-vb[System.TimeSpan.Class.AppDomain\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class.appdomain/vb/showtimespan.vb#2)]  
  
   
  
## 例  
 次の例のインスタンスを作成、 <xref:System.TimeSpan> を 2 つの日付の差を表すオブジェクト。 これは、後、表示、 <xref:System.TimeSpan> オブジェクトのプロパティです。  
  
 [!code-csharp[System.TimeSpan.Class\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.class/cs/structure1.cs#1)]
 [!code-vb[System.TimeSpan.Class\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class/vb/structure1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.DateTime" />
    <altmember cref="T:System.DateTimeOffset" />
    <altmember cref="T:System.Globalization.Calendar" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TimeSpan (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.#ctor(System.Int64)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">100 ナノ秒単位で表される期間。</param>
        <summary>
          <see cref="T:System.TimeSpan" /> 構造体の新しいインスタンスを、指定したタイマー刻み数に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 単一のティックは、100 ナノ秒または 1 つ 1,000万分の 1 秒を表します。 ミリ秒単位で 10,000 タイマー刻みがあります。  
  
   
  
## 例  
 次の例をいくつか作成<xref:System.TimeSpan>オブジェクトを初期化するコンス トラクター オーバー ロードを使用して、<xref:System.TimeSpan>タイマー刻み数を指定します。  
  
 [!code-cpp[System.TimeSpan.Ctor\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Ctor/CPP/ctorl.cpp#1)]
 [!code-csharp[System.TimeSpan.Ctor\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Ctor/CS/ctorl.cs#1)]
 [!code-vb[System.TimeSpan.Ctor\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Ctor/VB/ctorl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.Ticks" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TimeSpan (int hours, int minutes, int seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 hours, int32 minutes, int32 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="hours" Type="System.Int32" />
        <Parameter Name="minutes" Type="System.Int32" />
        <Parameter Name="seconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="hours">時間数。</param>
        <param name="minutes">分数。</param>
        <param name="seconds">秒数。</param>
        <summary>
          <see cref="T:System.TimeSpan" /> 構造体の新しいインスタンスを、指定した時間数、分数、秒数に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定した`hours`、`minutes`と`seconds`チックでに変換され、値がこのインスタンスを初期化します。  
  
   
  
## 例  
 次の例をいくつか作成<xref:System.TimeSpan>オブジェクトを初期化するコンス トラクター オーバー ロードを使用して、<xref:System.TimeSpan>指定した数時間、分、および秒にします。  
  
 [!code-cpp[System.TimeSpan.Ctor\#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Ctor/CPP/ctoriii.cpp#2)]
 [!code-csharp[System.TimeSpan.Ctor\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Ctor/CS/ctoriii.cs#2)]
 [!code-vb[System.TimeSpan.Ctor\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Ctor/VB/ctoriii.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">パラメーターが <see cref="T:System.TimeSpan" /> の値を <see cref="F:System.TimeSpan.MinValue" /> 未満か、<see cref="F:System.TimeSpan.MaxValue" /> より大きい値に指定しています。</exception>
        <altmember cref="T:System.Int64" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TimeSpan (int days, int hours, int minutes, int seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 days, int32 hours, int32 minutes, int32 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="days" Type="System.Int32" />
        <Parameter Name="hours" Type="System.Int32" />
        <Parameter Name="minutes" Type="System.Int32" />
        <Parameter Name="seconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="days">日数。</param>
        <param name="hours">時間数。</param>
        <param name="minutes">分数。</param>
        <param name="seconds">秒数。</param>
        <summary>
          <see cref="T:System.TimeSpan" /> 構造体の新しいインスタンスを指定された日数、時間数、分数、秒数に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定した`days`、 `hours`、`minutes`と`seconds`チックでに変換され、値がこのインスタンスを初期化します。  
  
   
  
## 例  
 次の例をいくつか作成<xref:System.TimeSpan>オブジェクトを初期化するコンス トラクター オーバー ロードを使用して、<xref:System.TimeSpan>日数、時間、分、および秒の指定した数にします。  
  
 [!code-cpp[System.TimeSpan.Ctor\#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Ctor/CPP/ctoriiii.cpp#3)]
 [!code-csharp[System.TimeSpan.Ctor\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Ctor/CS/ctoriiii.cs#3)]
 [!code-vb[System.TimeSpan.Ctor\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Ctor/VB/ctoriiii.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">パラメーターが <see cref="T:System.TimeSpan" /> の値を <see cref="F:System.TimeSpan.MinValue" /> 未満か、<see cref="F:System.TimeSpan.MaxValue" /> より大きい値に指定しています。</exception>
        <altmember cref="T:System.Int64" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TimeSpan (int days, int hours, int minutes, int seconds, int milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 days, int32 hours, int32 minutes, int32 seconds, int32 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="days" Type="System.Int32" />
        <Parameter Name="hours" Type="System.Int32" />
        <Parameter Name="minutes" Type="System.Int32" />
        <Parameter Name="seconds" Type="System.Int32" />
        <Parameter Name="milliseconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="days">日数。</param>
        <param name="hours">時間数。</param>
        <param name="minutes">分数。</param>
        <param name="seconds">秒数。</param>
        <param name="milliseconds">ミリ秒数。</param>
        <summary>
          <see cref="T:System.TimeSpan" /> 構造体の新しいインスタンスを、指定された日数、時間数、分数、秒数、ミリ秒数に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定した`days`、 `hours`、 `minutes`、 `seconds`、および`milliseconds`チックでに変換されます値がこのインスタンスを初期化するとします。  
  
   
  
## 例  
 次の例をいくつか作成<xref:System.TimeSpan>オブジェクトを初期化するコンス トラクター オーバー ロードを使用して、<xref:System.TimeSpan>日数、時間、分、秒、およびミリ秒の指定した数にします。  
  
 [!code-cpp[System.TimeSpan.Ctor\#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Ctor/CPP/ctoriiiii.cpp#4)]
 [!code-csharp[System.TimeSpan.Ctor\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Ctor/CS/ctoriiiii.cs#4)]
 [!code-vb[System.TimeSpan.Ctor\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Ctor/VB/ctoriiiii.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">パラメーターが <see cref="T:System.TimeSpan" /> の値を <see cref="F:System.TimeSpan.MinValue" /> 未満か、<see cref="F:System.TimeSpan.MaxValue" /> より大きい値に指定しています。</exception>
        <altmember cref="T:System.Int64" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public TimeSpan Add (TimeSpan ts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Add(valuetype System.TimeSpan ts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Add(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ts" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="ts">加算する時間間隔。</param>
        <summary>指定した <see cref="T:System.TimeSpan" /> オブジェクトとこのインスタンスを合計した値を持つ新しい <see cref="T:System.TimeSpan" /> オブジェクトを返します。</summary>
        <returns>このインスタンスの値と <paramref name="ts" /> の値の合計を表す新しいオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 戻り値でなければなりません<xref:System.TimeSpan.MinValue?displayProperty=fullName>と<xref:System.TimeSpan.MaxValue?displayProperty=fullName>です。 それ以外の場合、例外がスローされます。  
  
 戻り値は、新しい<xref:System.TimeSpan>; 元<xref:System.TimeSpan>は変更されません。  
  
   
  
## 例  
 次の例では、<xref:System.TimeSpan.Add%2A>ベース時間間隔の配列の各要素を追加するメソッドを<xref:System.TimeSpan>値。  
  
 [!code-csharp[System.TimeSpan.Add\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.add/cs/add1.cs#1)]
 [!code-vb[System.TimeSpan.Add\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.add/vb/add1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">結果として返された <see cref="T:System.TimeSpan" /> が <see cref="F:System.TimeSpan.MinValue" /> より小さいか、<see cref="F:System.TimeSpan.MaxValue" /> より大きいです。</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">比較する最初の時間間隔。</param>
        <param name="t2">比較する 2 番目の時間間隔。</param>
        <summary>2 つの <see cref="T:System.TimeSpan" /> 値を比較し、第 1 の値が第 2 の値よりも短いか、同じか、または長いかを示す整数を返します。</summary>
        <returns>次のいずれかの値です。  
  
 <list type="table">  
<listheader>  
<term> 値  
  
 </term>  
<description> 説明  
  
 </description>  
</listheader>  
<item>  
<term> \-1  
  
 </term>  
<description> <paramref name="t1" />も短い<paramref name="t2" />です。  
  
 </description>  
</item>  
<item>  
<term> 0  
  
 </term>  
<description> <paramref name="t1" /> と <paramref name="t2" /> が等価です。  
  
 </description>  
</item>  
<item>  
<term> 1  
  
 </term>  
<description> <paramref name="t1" />も長い<paramref name="t2" />です。  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例では、<xref:System.TimeSpan.Compare%2A>いくつかを比較するメソッド<xref:System.TimeSpan>オブジェクトと、<xref:System.TimeSpan>が 2 時間の時間間隔の値を持つオブジェクト。  
  
 [!code-csharp[System.TimeSpan.Compare\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.compare/cs/compare1.cs#1)]
 [!code-vb[System.TimeSpan.Compare\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.compare/vb/compare1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeSpan.CompareTo(System.Object)" />
        <altmember cref="M:System.TimeSpan.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このインスタンスと指定したオブジェクトまたは <see cref="T:System.TimeSpan" /> オブジェクトを比較し、このインスタンスが指定したオブジェクトまたは <see cref="T:System.TimeSpan" /> オブジェクトよりも短いか、同じか、または長いかを示す整数を返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 2 つのオーバー ロード、<xref:System.TimeSpan.CompareTo%2A>メソッドは、このインスタンスの相対値を示す符号付き数値を返すと、`value`引数は、次の表に示すようにします。  
  
|値|説明|  
|-------|--------|  
|0 より小さい値|このインスタンスがよりも短い`value`です。|  
|0|このインスタンスは `value` と同じです。|  
|0 より大きい値|このインスタンスがより長い`value`です。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.CompareTo(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">比較対象のオブジェクト、または <see langword="null" />。</param>
        <summary>このインスタンスと指定したオブジェクトを比較し、このインスタンスが指定したオブジェクトよりも短いか、同じか、または長いかを示す整数を返します。</summary>
        <returns>次のいずれかの値です。  
  
 <list type="table">  
<listheader>  
<term> 値  
  
 </term>  
<description> 説明  
  
 </description>  
</listheader>  
<item>  
<term> \-1  
  
 </term>  
<description> このインスタンスがよりも短い<paramref name="value" />です。  
  
 </description>  
</item>  
<item>  
<term> 0  
  
 </term>  
<description> このインスタンスは <paramref name="value" /> と等価です。  
  
 </description>  
</item>  
<item>  
<term> 1  
  
 </term>  
<description> このインスタンスがより長い<paramref name="value" />です。  
  
 または  
  
 <paramref name="value" /> は <see langword="null" /> です。  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 任意のインスタンス<xref:System.TimeSpan>、その値に関係なくが大きいと見なされますより`null`です。  
  
 `value`パラメーターがのインスタンスを指定する必要があります<xref:System.TimeSpan>または`null`です。 それ以外の場合、例外がスローされます。  
  
   
  
## 例  
 次の例では、いくつかを比較して<xref:System.TimeSpan>構造体および他のオブジェクトの参照を<xref:System.TimeSpan>構造体を使用して、<xref:System.TimeSpan.CompareTo%2A>メソッドです。  
  
 [!code-cpp[System.TimeSpan.Compare\_Equals\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/CPP/cto_eq_obj.cpp#1)]
 [!code-csharp[System.TimeSpan.Compare\_Equals\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/CS/cto_eq_obj.cs#1)]
 [!code-vb[System.TimeSpan.Compare\_Equals\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/VB/cto_eq_obj.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> が <see cref="T:System.TimeSpan" /> ではありません。</exception>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.TimeSpan.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.CompareTo(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">このインスタンスと比較するオブジェクト。</param>
        <summary>このインスタンスと指定した <see cref="T:System.TimeSpan" /> オブジェクトを比較し、このインスタンスが指定した <see cref="T:System.TimeSpan" /> オブジェクトよりも短いか、同じか、または長いかを示す整数を返します。</summary>
        <returns>このインスタンスと <paramref name="value" /> の相対値を示す符号付き数値。  
  
 <list type="table">  
<listheader>  
<term> 値  
  
 </term>  
<description> 説明  
  
 </description>  
</listheader>  
<item>  
<term> 負の整数  
  
 </term>  
<description> このインスタンスがよりも短い<paramref name="value" />です。  
  
 </description>  
</item>  
<item>  
<term> 0  
  
 </term>  
<description> このインスタンスは <paramref name="value" /> と等価です。  
  
 </description>  
</item>  
<item>  
<term> 正の整数  
  
 </term>  
<description> このインスタンスがより長い<paramref name="value" />です。  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを実装する、<xref:System.IComparable%601?displayProperty=fullName>インターフェイスし、実行よりもわずかに向上、<xref:System.TimeSpan.CompareTo%2A?displayProperty=fullName>メソッドに変換があるないため、`value`オブジェクトへのパラメーターです。  
  
   
  
## 例  
 次の例では、ジェネリックと非ジェネリック バージョンの<xref:System.TimeSpan.CompareTo%2A>いくつかの値と参照型のメソッドです。  
  
 [!code-cpp[T.CompareTo\#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.CompareTo/CPP/cat.cpp#1)]
 [!code-csharp[T.CompareTo\#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.CompareTo/CS/cat.cs#1)]
 [!code-vb[T.CompareTo\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.CompareTo/VB/cat.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Days">
      <MemberSignature Language="C#" Value="public int Days { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Days" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.Days" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.TimeSpan" /> 構造体によって表される時間間隔の日要素を取得します。</summary>
        <value>このインスタンスの日の部分。 戻り値は、正の場合もあれば負の場合もあります。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.TimeSpan> value can be represented as \[**placeholder tag is not supported!!!!**  
\]**placeholder tag is not supported!!!!**  
.**placeholder tag is not supported!!!!**  
:**placeholder tag is not supported!!!!**  
:**placeholder tag is not supported!!!!**  
.**placeholder tag is not supported!!!!**  
, where the optional minus sign indicates a negative time interval, the **placeholder tag is not supported!!!!**  
 component is days, **placeholder tag is not supported!!!!**  
 is hours as measured on a 24\-hour clock, **placeholder tag is not supported!!!!**  
 is minutes, **placeholder tag is not supported!!!!**  
 is seconds, and **placeholder tag is not supported!!!!**  
 is fractions of a second. The value of the <xref:System.TimeSpan.Days%2A> property is the day component, **placeholder tag is not supported!!!!**  
.  
  
 The <xref:System.TimeSpan.Days%2A> property represents whole days, whereas the <xref:System.TimeSpan.TotalDays%2A> property represents whole and fractional days.  
  
   
  
## 例  
 The following example creates several <xref:System.TimeSpan> objects and displays the <xref:System.TimeSpan.Days%2A> property of each.  
  
 [!code-cpp[System.TimeSpan.Properties\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.TimeSpan.Properties\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CS/properties.cs#1)]
 [!code-vb[System.TimeSpan.Properties\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.TotalDays" />
        <altmember cref="P:System.TimeSpan.Ticks" />
        <altmember cref="P:System.TimeSpan.Milliseconds" />
        <altmember cref="P:System.TimeSpan.Seconds" />
        <altmember cref="P:System.TimeSpan.Minutes" />
        <altmember cref="P:System.TimeSpan.Hours" />
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public TimeSpan Divide (double divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Divide(float64 divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Divide(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="divisor" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="divisor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public double Divide (TimeSpan ts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 Divide(valuetype System.TimeSpan ts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Divide(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ts" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="ts">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Duration">
      <MemberSignature Language="C#" Value="public TimeSpan Duration ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Duration() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Duration" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>値が現在の <see cref="T:System.TimeSpan" /> オブジェクトの絶対値である、新しい <see cref="T:System.TimeSpan" /> オブジェクトを返します。</summary>
        <returns>値が現在の <see cref="T:System.TimeSpan" /> オブジェクトの絶対値である新しいオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 The following example applies the <xref:System.TimeSpan.Duration%2A> method to several <xref:System.TimeSpan> objects.  
  
 [!code-cpp[System.TimeSpan.Dura\_Nega\_Unary\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/CPP/dura_nega_una.cpp#1)]
 [!code-csharp[System.TimeSpan.Dura\_Nega\_Unary\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/CS/dura_nega_una.cs#1)]
 [!code-vb[System.TimeSpan.Dura\_Nega\_Unary\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/VB/dura_nega_una.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">このインスタンスの値は <see cref="F:System.TimeSpan.MinValue" /> です。</exception>
        <altmember cref="P:System.TimeSpan.Ticks" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">このインスタンスと比較するオブジェクト。</param>
        <summary>対象のインスタンスが、指定したオブジェクトに等しいかどうかを示す値を返します。</summary>
        <returns>
          <paramref name="value" /> が現在の <see cref="T:System.TimeSpan" /> 構造体と同じ時間間隔を表す <see cref="T:System.TimeSpan" /> オブジェクトの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 The following example compares several <xref:System.TimeSpan> and other objects to a reference <xref:System.TimeSpan> using the <xref:System.TimeSpan.Equals%2A> method.  
  
 [!code-cpp[System.TimeSpan.Compare\_Equals\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/CPP/cto_eq_obj.cpp#1)]
 [!code-csharp[System.TimeSpan.Compare\_Equals\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/CS/cto_eq_obj.cs#1)]
 [!code-vb[System.TimeSpan.Compare\_Equals\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/VB/cto_eq_obj.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.TimeSpan.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TimeSpan obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.TimeSpan obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Equals(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj">このインスタンスと比較するオブジェクト。</param>
        <summary>対象のインスタンスが、指定した <see cref="T:System.TimeSpan" /> オブジェクトに等しいかどうかを示す値を返します。</summary>
        <returns>
          <paramref name="obj" /> がこのインスタンスと同じ時間間隔を表している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを実装する、<xref:System.IEquatable%601?displayProperty=fullName>インターフェイス、および実行よりもわずかに向上<xref:System.TimeSpan.Equals%2A>変換があるないため、`obj`オブジェクトへのパラメーターです。  
  
   
  
## 例  
 次の例では、ジェネリックと非ジェネリック バージョンの<xref:System.TimeSpan.CompareTo%2A>いくつかの値と参照型のメソッドです。  
  
 [!code-cpp[T.CompareTo\#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.CompareTo/CPP/cat.cpp#1)]
 [!code-csharp[T.CompareTo\#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.CompareTo/CS/cat.cs#1)]
 [!code-vb[T.CompareTo\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.CompareTo/VB/cat.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeSpan.Equals(System.Object)" />
        <altmember cref="Overload:System.TimeSpan.CompareTo" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Equals(System.TimeSpan,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">比較する最初の時間間隔。</param>
        <param name="t2">比較する 2 番目の時間間隔。</param>
        <summary>
          <see cref="T:System.TimeSpan" /> の指定した 2 つのインスタンスが等しいかどうかを示す値を返します。</summary>
        <returns>
          <paramref name="t1" /> の値と <paramref name="t2" /> の値が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 The following example compares several <xref:System.TimeSpan> objects to a reference <xref:System.TimeSpan> object using the static <xref:System.TimeSpan.Equals%2A> method.  
  
 [!code-cpp[System.TimeSpan.Compare\_Equals\#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/CPP/comp_equal.cpp#2)]
 [!code-csharp[System.TimeSpan.Compare\_Equals\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/CS/comp_equal.cs#2)]
 [!code-vb[System.TimeSpan.Compare\_Equals\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/VB/comp_equal.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.TimeSpan.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FromDays">
      <MemberSignature Language="C#" Value="public static TimeSpan FromDays (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromDays(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.FromDays(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">ミリ秒単位の精度による日数。</param>
        <summary>指定した日数を表す <see cref="T:System.TimeSpan" /> を返します。日数は、ミリ秒単位の精度で指定します。</summary>
        <returns>
          <paramref name="value" /> を表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `value`ティックに変換すると、ミリ秒単位までのパラメーターを変換し、タイマー刻みの数が、新しい初期化するために使用される<xref:System.TimeSpan>です。 したがって、`value`のみと見なされます精度はミリ秒単位。 なお、有効桁数が失われるのため、<xref:System.Double>データ型の場合は、この変換が発生することができます、<xref:System.OverflowException>値のいずれかの範囲の中では近くの<xref:System.TimeSpan.MinValue>または<xref:System.TimeSpan.MaxValue>です。 たとえば、これにより、<xref:System.OverflowException>で、次のインスタンスを作成するために、<xref:System.TimeSpan>オブジェクト。  
  
 [!code-csharp[System.TimeSpan.FromMinutes\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/cs/System.TimeSpan.FromMinutes.cs#2)]
 [!code-vb[System.TimeSpan.FromMinutes\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/vb/System.TimeSpan.FromMinutes.vb#2)]  
  
   
  
## 例  
 次の例をいくつか作成<xref:System.TimeSpan>オブジェクトを使用して、<xref:System.TimeSpan.FromDays%2A>メソッドです。  
  
 [!code-cpp[System.TimeSpan.From\#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.From/CPP/fromdays.cpp#6)]
 [!code-csharp[System.TimeSpan.From\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.From/CS/fromdays.cs#6)]
 [!code-vb[System.TimeSpan.From\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.From/VB/fromdays.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> が <see cref="F:System.TimeSpan.MinValue" /> より小さいか、<see cref="F:System.TimeSpan.MaxValue" /> より大きいです。  
  
 \-または\-  
  
 <paramref name="value" /> は <see cref="F:System.Double.PositiveInfinity" /> です。  
  
 \-または\-  
  
 <paramref name="value" /> が <see cref="F:System.Double.NegativeInfinity" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> と <see cref="F:System.Double.NaN" /> が等価です。</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.TimeSpan.FromTicks(System.Int64)" />
        <altmember cref="M:System.TimeSpan.FromMilliseconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromSeconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromMinutes(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromHours(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="FromHours">
      <MemberSignature Language="C#" Value="public static TimeSpan FromHours (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromHours(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.FromHours(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">ミリ秒単位の精度による時間数。</param>
        <summary>指定した時間数を表す <see cref="T:System.TimeSpan" /> を返します。時間数は、ミリ秒単位の精度で指定します。</summary>
        <returns>
          <paramref name="value" /> を表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `value`パラメーターはタイマー刻みに変換すると、\(ミリ秒\) に変換され、タイマー刻みの数が、新しい初期化するために使用される<xref:System.TimeSpan>です。 したがって、`value`のみと見なされます精度はミリ秒単位。 なお、有効桁数が失われるのため、<xref:System.Double>データ型の場合は、この変換を生成できます、<xref:System.OverflowException>いずれかの範囲内でまだが、近くにある値の<xref:System.TimeSpan.MinValue>または<xref:System.TimeSpan.MaxValue>です。 たとえば、これにより、<xref:System.OverflowException>で、次のインスタンスを作成するために、<xref:System.TimeSpan>オブジェクト。  
  
 [!code-csharp[System.TimeSpan.FromMinutes\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/cs/System.TimeSpan.FromMinutes.cs#3)]
 [!code-vb[System.TimeSpan.FromMinutes\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/vb/System.TimeSpan.FromMinutes.vb#3)]  
  
   
  
## 例  
 次の例をいくつか作成<xref:System.TimeSpan>オブジェクトを使用して、<xref:System.TimeSpan.FromHours%2A>メソッドです。  
  
 [!code-cpp[System.TimeSpan.From\#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.From/CPP/fromhours.cpp#5)]
 [!code-csharp[System.TimeSpan.From\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.From/CS/fromhours.cs#5)]
 [!code-vb[System.TimeSpan.From\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.From/VB/fromhours.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> が <see cref="F:System.TimeSpan.MinValue" /> より小さいか、<see cref="F:System.TimeSpan.MaxValue" /> より大きいです。  
  
 \-または\-  
  
 <paramref name="value" /> は <see cref="F:System.Double.PositiveInfinity" /> です。  
  
 \-または\-  
  
 <paramref name="value" /> が <see cref="F:System.Double.NegativeInfinity" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> と <see cref="F:System.Double.NaN" /> が等価です。</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.TimeSpan.FromTicks(System.Int64)" />
        <altmember cref="M:System.TimeSpan.FromMilliseconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromSeconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromMinutes(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromDays(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="FromMilliseconds">
      <MemberSignature Language="C#" Value="public static TimeSpan FromMilliseconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromMilliseconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.FromMilliseconds(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">ミリ秒数。</param>
        <summary>指定されたミリ秒数を表す <see cref="T:System.TimeSpan" /> を返します。</summary>
        <returns>
          <paramref name="value" /> を表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `value`パラメーターは、タイマー刻みに変換され、タイマー刻みの数が、新しい初期化するために使用される<xref:System.TimeSpan>です。 したがって、`value`のみと見なされます精度はミリ秒単位。 なお、有効桁数が失われるのため、<xref:System.Double>データ型の場合は、この変換を生成できます、<xref:System.OverflowException>値のいずれかの範囲の中では近くの<xref:System.TimeSpan.MinValue>または<xref:System.TimeSpan.MaxValue>です。 たとえば、これにより、<xref:System.OverflowException>で、次のインスタンスを作成するために、<xref:System.TimeSpan>オブジェクト。  
  
 [!code-csharp[System.TimeSpan.FromMinutes\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/cs/System.TimeSpan.FromMinutes.cs#4)]
 [!code-vb[System.TimeSpan.FromMinutes\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/vb/System.TimeSpan.FromMinutes.vb#4)]  
  
   
  
## 例  
 次の例をいくつか作成<xref:System.TimeSpan>オブジェクトを使用して、<xref:System.TimeSpan.FromMilliseconds%2A>メソッドです。  
  
 [!code-cpp[System.TimeSpan.From\#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.From/CPP/frommillisec.cpp#2)]
 [!code-csharp[System.TimeSpan.From\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.From/CS/frommillisec.cs#2)]
 [!code-vb[System.TimeSpan.From\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.From/VB/frommillisec.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> が <see cref="F:System.TimeSpan.MinValue" /> より小さいか、<see cref="F:System.TimeSpan.MaxValue" /> より大きいです。  
  
 \-または\-  
  
 <paramref name="value" /> は <see cref="F:System.Double.PositiveInfinity" /> です。  
  
 \-または\-  
  
 <paramref name="value" /> が <see cref="F:System.Double.NegativeInfinity" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> と <see cref="F:System.Double.NaN" /> が等価です。</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.TimeSpan.FromTicks(System.Int64)" />
        <altmember cref="M:System.TimeSpan.FromSeconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromMinutes(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromHours(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromDays(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="FromMinutes">
      <MemberSignature Language="C#" Value="public static TimeSpan FromMinutes (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromMinutes(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.FromMinutes(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">ミリ秒単位の精度による分数。</param>
        <summary>指定した分数を表す <see cref="T:System.TimeSpan" /> を返します。分数は、ミリ秒単位の精度で指定します。</summary>
        <returns>
          <paramref name="value" /> を表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `value`パラメーターはタイマー刻みに変換すると、\(ミリ秒\) に変換され、タイマー刻みの数が、新しい初期化するために使用される<xref:System.TimeSpan>です。 したがって、`value`のみと見なされます精度はミリ秒単位。 なお、有効桁数が失われるのため、<xref:System.Double>データ型の場合は、この変換を生成できます、<xref:System.OverflowException>値のいずれかの範囲の中では近くの<xref:System.TimeSpan.MinValue>または<xref:System.TimeSpan.MaxValue>です。 たとえば、これにより、<xref:System.OverflowException>で、次のインスタンスを作成するために、<xref:System.TimeSpan>オブジェクト。  
  
 [!code-csharp[System.TimeSpan.FromMinutes\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/cs/System.TimeSpan.FromMinutes.cs#1)]
 [!code-vb[System.TimeSpan.FromMinutes\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/vb/System.TimeSpan.FromMinutes.vb#1)]  
  
   
  
## 例  
 次の例をいくつか作成<xref:System.TimeSpan>オブジェクトを使用して、<xref:System.TimeSpan.FromMinutes%2A>メソッドです。  
  
 [!code-cpp[System.TimeSpan.From\#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.From/CPP/fromminutes.cpp#4)]
 [!code-csharp[System.TimeSpan.From\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.From/CS/fromminutes.cs#4)]
 [!code-vb[System.TimeSpan.From\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.From/VB/fromminutes.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> が <see cref="F:System.TimeSpan.MinValue" /> より小さいか、<see cref="F:System.TimeSpan.MaxValue" /> より大きいです。  
  
 \-または\-  
  
 <paramref name="value" /> は <see cref="F:System.Double.PositiveInfinity" /> です。  
  
 \-または\-  
  
 <paramref name="value" /> が <see cref="F:System.Double.NegativeInfinity" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> と <see cref="F:System.Double.NaN" /> が等価です。</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.TimeSpan.FromTicks(System.Int64)" />
        <altmember cref="M:System.TimeSpan.FromMilliseconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromSeconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromHours(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromDays(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="FromSeconds">
      <MemberSignature Language="C#" Value="public static TimeSpan FromSeconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromSeconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.FromSeconds(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">ミリ秒単位の精度による秒数。</param>
        <summary>指定した秒数を表す <see cref="T:System.TimeSpan" /> を返します。秒数は、ミリ秒単位の精度で指定します。</summary>
        <returns>
          <paramref name="value" /> を表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `value`パラメーターはタイマー刻みに変換すると、\(ミリ秒\) に変換され、タイマー刻みの数が、新しい初期化に使用される<xref:System.TimeSpan>です。 したがって、`value`のみと見なされます精度はミリ秒単位。 なお、有効桁数が失われるのため、<xref:System.Double>データ型を生成できますこの、<xref:System.OverflowException>いずれかの範囲内でまだが、近くにある値の<xref:System.TimeSpan.MinValue>または<xref:System.TimeSpan.MaxValue>、これは、原因と、<xref:System.OverflowException>で、次をインスタンス化するために、<xref:System.TimeSpan>オブジェクト。  
  
 [!code-csharp[System.TimeSpan.FromMinutes\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/cs/System.TimeSpan.FromMinutes.cs#5)]
 [!code-vb[System.TimeSpan.FromMinutes\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/vb/System.TimeSpan.FromMinutes.vb#5)]  
  
   
  
## 例  
 次の例をいくつか作成<xref:System.TimeSpan>オブジェクトを使用して、<xref:System.TimeSpan.FromSeconds%2A>メソッドです。  
  
 [!code-cpp[System.TimeSpan.From\#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.From/CPP/fromseconds.cpp#3)]
 [!code-csharp[System.TimeSpan.From\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.From/CS/fromseconds.cs#3)]
 [!code-vb[System.TimeSpan.From\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.From/VB/fromseconds.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> が <see cref="F:System.TimeSpan.MinValue" /> より小さいか、<see cref="F:System.TimeSpan.MaxValue" /> より大きいです。  
  
 \-または\-  
  
 <paramref name="value" /> は <see cref="F:System.Double.PositiveInfinity" /> です。  
  
 \-または\-  
  
 <paramref name="value" /> が <see cref="F:System.Double.NegativeInfinity" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> と <see cref="F:System.Double.NaN" /> が等価です。</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.TimeSpan.FromTicks(System.Int64)" />
        <altmember cref="M:System.TimeSpan.FromMilliseconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromMinutes(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromHours(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromDays(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="FromTicks">
      <MemberSignature Language="C#" Value="public static TimeSpan FromTicks (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromTicks(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.FromTicks(System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">時間を表すタイマー刻み数。</param>
        <summary>指定した時間を表す <see cref="T:System.TimeSpan" /> を返します。時間は、タイマー刻み単位で指定します。</summary>
        <returns>
          <paramref name="value" /> を表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは便利なメソッドと同じ動作で、<xref:System.TimeSpan.%23ctor%28System.Int64%29?displayProperty=fullName>コンス トラクターです。 単一のティックは、100 ナノ秒または 1 つ 1,000万分の 1 秒を表します。 ミリ秒単位で 10,000 タイマー刻みがあります。  
  
   
  
## 例  
 次の例をいくつか作成<xref:System.TimeSpan>オブジェクトを使用して、<xref:System.TimeSpan.FromTicks%2A>メソッドです。  
  
 [!code-cpp[System.TimeSpan.From\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.From/CPP/fromticks.cpp#1)]
 [!code-csharp[System.TimeSpan.From\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.From/CS/fromticks.cs#1)]
 [!code-vb[System.TimeSpan.From\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.From/VB/fromticks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.TimeSpan.FromMilliseconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromSeconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromMinutes(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromHours(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromDays(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスのハッシュ コードを返します。</summary>
        <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 2 つ <xref:System.TimeSpan> オブジェクトは、別の時刻値である場合でも、同じハッシュ コードが持ちます。  
  
   
  
## 例  
 次の例は、いくつかのハッシュ コードを生成 <xref:System.TimeSpan> オブジェクトを使用して、 <xref:System.TimeSpan.GetHashCode%2A> メソッドです。  
  
 [!code-cpp[System.TimeSpan.GetHashCode\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.GetHashCode/CPP/hashcode.cpp#1)]
 [!code-csharp[System.TimeSpan.GetHashCode\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.GetHashCode/CS/hashcode.cs#1)]
 [!code-vb[System.TimeSpan.GetHashCode\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.GetHashCode/VB/hashcode.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hours">
      <MemberSignature Language="C#" Value="public int Hours { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hours" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.Hours" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.TimeSpan" /> 構造体が表す時間間隔の時間の部分を取得します。</summary>
        <value>現在の <see cref="T:System.TimeSpan" /> 構造体の時間の部分。 戻り値の範囲は、\-23 ～ 23 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A<xref:System.TimeSpan>として値を表すことができます \[*\-*\]*d*.*hh*:*mm*:*ss*.*ff*、省略可能なマイナス符号が負の時間間隔を示す、 *d*コンポーネントは、日、 *hh*は 24 時間制で測定される時間*mm*分です。 *ss* \(秒単位\) は、と*ff*秒の小数部は、します。 値、<xref:System.TimeSpan.Hours%2A>プロパティは、時間コンポーネント*hh*です。  
  
 <xref:System.TimeSpan.Hours%2A>プロパティを表す時間全体は、一方、<xref:System.TimeSpan.TotalHours%2A>プロパティは整数部と小数部の時間を表します。  
  
   
  
## 例  
 次の例をいくつか作成<xref:System.TimeSpan>オブジェクトし、表示、<xref:System.TimeSpan.Hours%2A>それぞれのプロパティです。  
  
 [!code-cpp[System.TimeSpan.Properties\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.TimeSpan.Properties\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CS/properties.cs#1)]
 [!code-vb[System.TimeSpan.Properties\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.TotalHours" />
        <altmember cref="P:System.TimeSpan.Ticks" />
        <altmember cref="P:System.TimeSpan.Milliseconds" />
        <altmember cref="P:System.TimeSpan.Seconds" />
        <altmember cref="P:System.TimeSpan.Minutes" />
        <altmember cref="P:System.TimeSpan.Days" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.TimeSpan" /> の最大値を表します。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このフィールドの値に相当<xref:System.Int64.MaxValue?displayProperty=fullName>タイマー刻み。 この値の文字列形式には、正の 10675199.02:48:05.4775807 または 10,675,199 日数よりも少しです。  
  
   
  
## 例  
 次の例を参照し、値を表示、<xref:System.TimeSpan.MaxValue>フィールドです。  
  
 [!code-cpp[System.TimeSpan.Fields\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp#1)]
 [!code-csharp[System.TimeSpan.Fields\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CS/fields.cs#1)]
 [!code-vb[System.TimeSpan.Fields\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
        <altmember cref="F:System.TimeSpan.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="Milliseconds">
      <MemberSignature Language="C#" Value="public int Milliseconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Milliseconds" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.Milliseconds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.TimeSpan" /> 構造体が表す時間間隔のミリ秒の部分を取得します。</summary>
        <value>現在の <see cref="T:System.TimeSpan" /> 構造体のミリ秒の部分。 戻り値の範囲は、\-999 ～ 999 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A<xref:System.TimeSpan>として値を表すことができます \[*\-*\]*d*.*hh*:*mm*:*ss*.*ff*、省略可能なマイナス符号が負の時間間隔を示す、 *d*コンポーネントは、日、 *hh*は 24 時間制で測定される時間*mm*分です。 *ss* \(秒単位\) は、と*ff*秒の小数部は、します。 値、<xref:System.TimeSpan.Milliseconds%2A>プロパティは、小数部の 2 番目のコンポーネント*ff*です。  
  
 <xref:System.TimeSpan.Milliseconds%2A>プロパティは、一方に全体 \(ミリ秒単位\) を表す、<xref:System.TimeSpan.TotalMilliseconds%2A>プロパティは、ミリ秒の整数部と小数部を表します。  
  
   
  
## 例  
 次の例をいくつか作成<xref:System.TimeSpan>オブジェクトし、表示、<xref:System.TimeSpan.Milliseconds%2A>それぞれのプロパティです。  
  
 [!code-cpp[System.TimeSpan.Properties\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.TimeSpan.Properties\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CS/properties.cs#1)]
 [!code-vb[System.TimeSpan.Properties\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.TotalMilliseconds" />
        <altmember cref="P:System.TimeSpan.Ticks" />
        <altmember cref="P:System.TimeSpan.Seconds" />
        <altmember cref="P:System.TimeSpan.Minutes" />
        <altmember cref="P:System.TimeSpan.Hours" />
        <altmember cref="P:System.TimeSpan.Days" />
      </Docs>
    </Member>
    <Member MemberName="Minutes">
      <MemberSignature Language="C#" Value="public int Minutes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minutes" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.Minutes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.TimeSpan" /> 構造体が表す時間間隔の分の部分を取得します。</summary>
        <value>現在の <see cref="T:System.TimeSpan" /> 構造体の分の部分。 戻り値の範囲は、\-59 ～ 59 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A<xref:System.TimeSpan>として値を表すことができます \[*\-*\]*d*.*hh*:*mm*:*ss*.*ff*、省略可能なマイナス符号が負の時間間隔を示す、 *d*コンポーネントは、日、 *hh*を 24 時間制で測定される時間が*mm*分です。 *ss* \(秒単位\) は、と*ff*秒の小数部は、します。 値、<xref:System.TimeSpan.Minutes%2A>プロパティは、分の部分では、 *mm*です。  
  
 <xref:System.TimeSpan.Minutes%2A>一方プロパティが整数の分を表す、<xref:System.TimeSpan.TotalMinutes%2A>プロパティは整数部と小数部の分を表します。  
  
   
  
## 例  
 次の例をいくつか作成<xref:System.TimeSpan>オブジェクトし、表示、<xref:System.TimeSpan.Minutes%2A>それぞれのプロパティです。  
  
 [!code-cpp[System.TimeSpan.Properties\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.TimeSpan.Properties\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CS/properties.cs#1)]
 [!code-vb[System.TimeSpan.Properties\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.TotalMinutes" />
        <altmember cref="P:System.TimeSpan.Ticks" />
        <altmember cref="P:System.TimeSpan.Milliseconds" />
        <altmember cref="P:System.TimeSpan.Seconds" />
        <altmember cref="P:System.TimeSpan.Hours" />
        <altmember cref="P:System.TimeSpan.Days" />
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan MinValue" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.TimeSpan" /> の最小値を表します。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このフィールドの値に相当<xref:System.Int64.MinValue?displayProperty=fullName>タイマー刻み。 この値の文字列形式には、\-10675199.02:48:05.4775808、または負の値よりも少し 10,675,199 日数です。  
  
   
  
## 例  
 次の例を参照し、値を表示、<xref:System.TimeSpan.MinValue>フィールドです。  
  
 [!code-cpp[System.TimeSpan.Fields\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp#1)]
 [!code-csharp[System.TimeSpan.Fields\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CS/fields.cs#1)]
 [!code-vb[System.TimeSpan.Fields\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
        <altmember cref="F:System.TimeSpan.MaxValue" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public TimeSpan Multiply (double factor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Multiply(float64 factor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Multiply(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factor" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="factor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public TimeSpan Negate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Negate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Negate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスの値とは符号が逆の値を持つ新しい <see cref="T:System.TimeSpan" /> オブジェクトを返します。</summary>
        <returns>このインスタンスの値と絶対値が同じで、逆の符号を持つ新しいオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例に適用されます、<xref:System.TimeSpan.Negate%2A>をいくつかのメソッド<xref:System.TimeSpan>オブジェクト。  
  
 [!code-cpp[System.TimeSpan.Dura\_Nega\_Unary\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/CPP/dura_nega_una.cpp#1)]
 [!code-csharp[System.TimeSpan.Dura\_Nega\_Unary\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/CS/dura_nega_una.cs#1)]
 [!code-vb[System.TimeSpan.Dura\_Nega\_Unary\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/VB/dura_nega_una.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <see cref="T:System.TimeSpan" /> ではこのインスタンスの負数化された値を表すことはできません。つまり、このインスタンスの値が <see cref="F:System.TimeSpan.MinValue" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static TimeSpan op_Addition (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Addition(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Addition(System.TimeSpan,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">加算する最初の時間間隔。</param>
        <param name="t2">加算する 2 番目の時間間隔。</param>
        <summary>指定した 2 つの <see cref="T:System.TimeSpan" /> インスタンスを加算します。</summary>
        <returns>
          <paramref name="t1" /> と <paramref name="t2" /> の値の合計を値とするオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.TimeSpan.op_Addition%2A>メソッド定義の加算演算子<xref:System.TimeSpan>値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.TimeSpan.Operators\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.operators/cs/operators1.cs#1)]
 [!code-vb[System.TimeSpan.Operators\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.operators/vb/operators1.vb#1)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、<xref:System.TimeSpan.Add%2A>メソッド代わりにします。  
  
 The equivalent method for this operator is <xref:System.TimeSpan.Add%28System.TimeSpan%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">結果として返された <see cref="T:System.TimeSpan" /> が <see cref="F:System.TimeSpan.MinValue" /> より小さいか、<see cref="F:System.TimeSpan.MaxValue" /> より大きいです。</exception>
        <altmember cref="M:System.TimeSpan.Add(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static TimeSpan op_Division (TimeSpan timeSpan, double divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Division(valuetype System.TimeSpan timeSpan, float64 divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Division(System.TimeSpan,System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
        <Parameter Name="divisor" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="timeSpan">To be added.</param>
        <param name="divisor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static double op_Division (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float64 op_Division(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Division(System.TimeSpan,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">To be added.</param>
        <param name="t2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Equality(System.TimeSpan,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">比較する最初の時間間隔。</param>
        <param name="t2">比較する 2 番目の時間間隔。</param>
        <summary>2 つの <see cref="T:System.TimeSpan" /> インスタンスが等しいかどうかを示します。</summary>
        <returns>
          <paramref name="t1" /> の値と <paramref name="t2" /> の値が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[The equivalent method for this operator is <xref:System.TimeSpan.Equals%28System.Object%29?displayProperty=fullName>  
  
## 例  
 The following example compares several <xref:System.TimeSpan> objects to a reference <xref:System.TimeSpan> using the <xref:System.TimeSpan.op_Equality%2A> operator.  
  
 [!code-cpp[System.TimeSpan.RelationalOps\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CPP/relationalops.cpp#1)]
 [!code-csharp[System.TimeSpan.RelationalOps\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CS/relationalops.cs#1)]
 [!code-vb[System.TimeSpan.RelationalOps\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/VB/relationalops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeSpan.Equals(System.Object)" />
        <altmember cref="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.TimeSpan.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool op_GreaterThan (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_GreaterThan(System.TimeSpan,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">比較する最初の時間間隔。</param>
        <param name="t2">比較する 2 番目の時間間隔。</param>
        <summary>指定した <see cref="T:System.TimeSpan" /> が、指定したもう 1 つの <see cref="T:System.TimeSpan" /> より大きいかどうかを示します。</summary>
        <returns>
          <paramref name="t1" /> の値が <paramref name="t2" /> の値より大きい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[The equivalent method for this operator is <xref:System.TimeSpan.Compare%28System.TimeSpan%2CSystem.TimeSpan%29?displayProperty=fullName>  
  
## 例  
 次の例では、いくつかを比較して<xref:System.TimeSpan>オブジェクトの参照を<xref:System.TimeSpan>を使用して、<xref:System.TimeSpan.op_GreaterThan%2A>演算子。  
  
 [!code-cpp[System.TimeSpan.RelationalOps\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CPP/relationalops.cpp#1)]
 [!code-csharp[System.TimeSpan.RelationalOps\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CS/relationalops.cs#1)]
 [!code-vb[System.TimeSpan.RelationalOps\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/VB/relationalops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.TimeSpan.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool op_GreaterThanOrEqual (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_GreaterThanOrEqual(System.TimeSpan,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">比較する最初の時間間隔。</param>
        <param name="t2">比較する 2 番目の時間間隔。</param>
        <summary>指定した <see cref="T:System.TimeSpan" /> が、指定したもう 1 つの <see cref="T:System.TimeSpan" /> 以上かどうかを示します。</summary>
        <returns>
          <paramref name="t1" /> の値が <paramref name="t2" /> の値以上の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[The equivalent method for this operator is <xref:System.TimeSpan.Compare%28System.TimeSpan%2CSystem.TimeSpan%29?displayProperty=fullName>  
  
## 例  
 次の例では、いくつかを比較して <xref:System.TimeSpan> オブジェクトの参照を <xref:System.TimeSpan> を使用して、 <xref:System.TimeSpan.op_GreaterThanOrEqual%2A> 演算子。  
  
 [!code-cpp[System.TimeSpan.RelationalOps\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CPP/relationalops.cpp#1)]
 [!code-csharp[System.TimeSpan.RelationalOps\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CS/relationalops.cs#1)]
 [!code-vb[System.TimeSpan.RelationalOps\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/VB/relationalops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.TimeSpan.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Inequality(System.TimeSpan,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">比較する最初の時間間隔。</param>
        <param name="t2">比較する 2 番目の時間間隔。</param>
        <summary>
          <see cref="T:System.TimeSpan" /> の 2 つのインスタンスが等しくないかどうかを示します。</summary>
        <returns>
          <paramref name="t1" /> の値と <paramref name="t2" /> の値が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[The equivalent method for this operator is <xref:System.TimeSpan.Compare%28System.TimeSpan%2CSystem.TimeSpan%29?displayProperty=fullName>  
  
## 例  
 次の例では、いくつかを比較して <xref:System.TimeSpan> オブジェクトの参照を <xref:System.TimeSpan> を使用して、 <xref:System.TimeSpan.op_Inequality%2A> 演算子。  
  
 [!code-cpp[System.TimeSpan.RelationalOps\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CPP/relationalops.cpp#1)]
 [!code-csharp[System.TimeSpan.RelationalOps\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CS/relationalops.cs#1)]
 [!code-vb[System.TimeSpan.RelationalOps\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/VB/relationalops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.TimeSpan.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool op_LessThan (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_LessThan(System.TimeSpan,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">比較する最初の時間間隔。</param>
        <param name="t2">比較する 2 番目の時間間隔。</param>
        <summary>指定した <see cref="T:System.TimeSpan" /> が、指定したもう 1 つの <see cref="T:System.TimeSpan" /> 未満かどうかを示します。</summary>
        <returns>
          <paramref name="t1" /> の値が <paramref name="t2" /> の値未満の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[The equivalent method for this operator is <xref:System.TimeSpan.Compare%28System.TimeSpan%2CSystem.TimeSpan%29?displayProperty=fullName>  
  
## 例  
 次の例では、いくつかを比較して<xref:System.TimeSpan>オブジェクトの参照を<xref:System.TimeSpan>を使用して、<xref:System.TimeSpan.op_LessThan%2A>演算子。  
  
 [!code-cpp[System.TimeSpan.RelationalOps\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CPP/relationalops.cpp#1)]
 [!code-csharp[System.TimeSpan.RelationalOps\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CS/relationalops.cs#1)]
 [!code-vb[System.TimeSpan.RelationalOps\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/VB/relationalops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.TimeSpan.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool op_LessThanOrEqual (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_LessThanOrEqual(System.TimeSpan,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">比較する最初の時間間隔。</param>
        <param name="t2">比較する 2 番目の時間間隔。</param>
        <summary>指定した <see cref="T:System.TimeSpan" /> が、指定したもう 1 つの <see cref="T:System.TimeSpan" /> 以下かどうかを示します。</summary>
        <returns>
          <paramref name="t1" /> の値が <paramref name="t2" /> の値以下の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[The equivalent method for this operator is <xref:System.TimeSpan.Compare%28System.TimeSpan%2CSystem.TimeSpan%29?displayProperty=fullName>  
  
## 例  
 次の例では、いくつかを比較して<xref:System.TimeSpan>オブジェクトの参照を<xref:System.TimeSpan>を使用して、<xref:System.TimeSpan.op_LessThanOrEqual%2A>演算子。  
  
 [!code-cpp[System.TimeSpan.RelationalOps\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CPP/relationalops.cpp#1)]
 [!code-csharp[System.TimeSpan.RelationalOps\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CS/relationalops.cs#1)]
 [!code-vb[System.TimeSpan.RelationalOps\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/VB/relationalops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.TimeSpan.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static TimeSpan op_Multiply (double factor, TimeSpan timeSpan);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Multiply(float64 factor, valuetype System.TimeSpan timeSpan) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Multiply(System.Double,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factor" Type="System.Double" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="factor">To be added.</param>
        <param name="timeSpan">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static TimeSpan op_Multiply (TimeSpan timeSpan, double factor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Multiply(valuetype System.TimeSpan timeSpan, float64 factor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Multiply(System.TimeSpan,System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
        <Parameter Name="factor" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="timeSpan">To be added.</param>
        <param name="factor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan op_Subtraction (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Subtraction(System.TimeSpan,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">被減数。</param>
        <param name="t2">減数。</param>
        <summary>指定したもう 1 つの <see cref="T:System.TimeSpan" /> から、指定した <see cref="T:System.TimeSpan" /> を減算します。</summary>
        <returns>
          <paramref name="t2" /> の値から <paramref name="t1" /> の値を減算した結果を値とするオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[The equivalent method for this operator is <xref:System.TimeSpan.Subtract%28System.TimeSpan%29?displayProperty=fullName>  
  
## 例  
 次の例では、<xref:System.TimeSpan>減算演算子を毎週の業務時間の長さの合計を計算します。 また、使用、<xref:System.TimeSpan>毎日の稼働時間の実際の合計を計算する減算演算で使用する前に日単位の区切りの時間の合計を計算する加算演算子。  
  
 [!code-csharp[System.TimeSpan.Operators\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.operators/cs/Subtraction1.cs#2)]
 [!code-vb[System.TimeSpan.Operators\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.operators/vb/Subtraction1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">戻り値が <see cref="F:System.TimeSpan.MinValue" /> 未満であるか、<see cref="F:System.TimeSpan.MaxValue" /> を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="op_UnaryNegation">
      <MemberSignature Language="C#" Value="public static TimeSpan op_UnaryNegation (TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_UnaryNegation(valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_UnaryNegation(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t">符号が反転される時間間隔。</param>
        <summary>指定したインスタンスの値とは符号が逆の値を持つ <see cref="T:System.TimeSpan" /> を返します。</summary>
        <returns>このインスタンスの値と絶対値が同じで、逆の符号を持つオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[The equivalent method for this operator is <xref:System.TimeSpan.Negate?displayProperty=fullName>  
  
## 例  
 次の例では、適用、 <xref:System.TimeSpan.op_UnaryNegation%2A> から複数の演算子 <xref:System.TimeSpan> オブジェクトです。  
  
 [!code-cpp[System.TimeSpan.Dura\_Nega\_Unary\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/CPP/dura_nega_una.cpp#1)]
 [!code-csharp[System.TimeSpan.Dura\_Nega\_Unary\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/CS/dura_nega_una.cs#1)]
 [!code-vb[System.TimeSpan.Dura\_Nega\_Unary\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/VB/dura_nega_una.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <see cref="T:System.TimeSpan" /> ではこのインスタンスの負数化された値を表すことはできません。つまり、このインスタンスの値は <see cref="F:System.TimeSpan.MinValue" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="op_UnaryPlus">
      <MemberSignature Language="C#" Value="public static TimeSpan op_UnaryPlus (TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_UnaryPlus(valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_UnaryPlus(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t">返される時間間隔。</param>
        <summary>
          <see cref="T:System.TimeSpan" /> の指定したインスタンスを返します。</summary>
        <returns>
          <paramref name="t" /> で指定された時間間隔。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例では、適用、 <xref:System.TimeSpan.op_UnaryPlus%2A> から複数の演算子 <xref:System.TimeSpan> オブジェクトです。  
  
 [!code-cpp[System.TimeSpan.Dura\_Nega\_Unary\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/CPP/dura_nega_una.cpp#1)]
 [!code-csharp[System.TimeSpan.Dura\_Nega\_Unary\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/CS/dura_nega_una.cs#1)]
 [!code-vb[System.TimeSpan.Dura\_Nega\_Unary\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/VB/dura_nega_una.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static TimeSpan Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Parse(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">変換する時間間隔を指定する文字列。</param>
        <summary>時間間隔の文字列形式を等価の <see cref="T:System.TimeSpan" /> に変換します。</summary>
        <returns>
          <paramref name="s" /> に対応する時間間隔。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `s`パラメーターを含む形式で時間間隔を指定します。  
  
 \[*ws*\]\[\-\]{ *d* &#124;\[*d*.\]*hh*:*mm*\[:*ss*\[.*ff*\]\] }\[*ws*\]  
  
 角かっこ \(\[ および \]\) 内の要素は省略可能です。 中かっこで囲まれた代替のリストから 1 つを選択 \({および}\) と、縦棒で区切られて \(&#124;\) が必要です。 次の表では、各要素について説明します。  
  
|要素|説明|  
|--------|--------|  
|*ws*|省略可能なホワイト スペースです。|  
|\-|負の値を示す省略可能なマイナス記号、<xref:System.TimeSpan>です。|  
|*d*|0 ~ 10675199 日です。|  
|」を参照してください。|数時間から日を区切るカルチャ記号です。 ピリオドを使用するロケールに依存しない形式 \("です"\)。 文字に置き換えらるからです。|  
|*hh*|0 から 23 までの時間です。|  
|:|カルチャに依存した時刻の区切り記号です。 インバリアントの形式では、コロン \(":"\) 文字です。|  
|*mm*|0 から 59 までの分です。|  
|*ss*|省略可能な秒は、0 から 59 までです。|  
|*」を参照してください。*|秒の小数部から秒を区切るカルチャ記号です。 ピリオドを使用するロケールに依存しない形式 \("です"\)。 文字に置き換えらるからです。|  
|*ff*|省略可能な秒の小数部、1 ~ 7 桁です。|  
  
 コンポーネント`s`に以上である時間間隔をまとめて指定する必要があります<xref:System.TimeSpan.MinValue?displayProperty=fullName>以下と等しい<xref:System.TimeSpan.MaxValue?displayProperty=fullName>です。  
  
 <xref:System.TimeSpan.Parse%28System.String%29>メソッド解析を試みます`s`カルチャ固有の形式の現在のカルチャを使用しています。  
  
   
  
## 例  
 次の例では、<xref:System.TimeSpan.Parse%2A>を文字列配列の各要素を変換する方法、<xref:System.TimeSpan>値。 クロアチア語 \- クロアチア \("HR\-HR"\) と英語 \- 米国 \("EN\-US"\) を現在のシステム カルチャが解析操作に与える影響を示すために、現在のシステムのカルチャを変更します。  
  
 [!code-csharp[System.TimeSpan.Parse\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.parse/cs/parse1.cs#1)]
 [!code-vb[System.TimeSpan.Parse\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parse/vb/parse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> の形式は無効です。</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> は <see cref="F:System.TimeSpan.MinValue" /> 未満の数値か、<see cref="F:System.TimeSpan.MaxValue" /> より大きい数値を表します。  
  
 または  
  
 日、時間、分、または秒のコンポーネントのうち少なくとも 1 つが、その有効範囲外です。</exception>
        <block subset="none" type="usage">
          <para>When a time interval component in the string to be parsed contains more than seven digits, parsing operations in the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions may behave differently from parsing operations in the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]. In some cases, parsing operations that succeed in the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions may fail and throw an <see cref="T:System.OverflowException" /> in the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]. In other cases, parsing operations that throw a <see cref="T:System.FormatException" /> in the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions may fail and throw an <see cref="T:System.OverflowException" /> in the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]. The following example illustrates both scenarios.  
  
 [!code-csharp[System.TimeSpan.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.parse/cs/parsefailure1.cs#3)]
 [!code-vb[System.TimeSpan.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parse/vb/parsefailure1.vb#3)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static TimeSpan Parse (string input, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan Parse(string input, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Parse(System.String,System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">変換する時間間隔を指定する文字列。</param>
        <param name="formatProvider">カルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>指定したカルチャ固有の書式情報を使用して、時間間隔の文字列形式を等価の <see cref="T:System.TimeSpan" /> に変換します。</summary>
        <returns>
          <paramref name="formatProvider" /> の指定に従って変換された、<paramref name="input" /> に対応する時間間隔。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `input`パラメーターに含まれるフォームの時間間隔を指定します。  
  
 \[*ws*\]\[\-\]{ *d* &#124;\[*d*.\]*hh*:*mm*\[:*ss*\[.*ff*\]\] }\[*ws*\]  
  
 角かっこ \(\[および\]\) は省略可能です。 内の要素中かっこで囲まれた代替のリストから 1 つを選択 \({および}\) と、縦棒で区切られて \(&#124;\) が必要です。 次の表では、各要素について説明します。  
  
|要素|説明|  
|--------|--------|  
|*ws*|省略可能なホワイト スペースです。|  
|\-|負の値を示す省略可能なマイナス記号、<xref:System.TimeSpan>です。|  
|*d*|0 ~ 10675199 日です。|  
|」を参照してください。|数時間から日を区切るカルチャ記号です。 既定値は、ピリオド \("です"\)。 文字に置き換えらるからです。|  
|*hh*|0 から 23 までの時間です。|  
|:|カルチャに依存した時刻の区切り記号です。|  
|*mm*|0 から 59 までの分です。|  
|*ss*|省略可能な秒は、0 から 59 までです。|  
|」を参照してください。|秒の小数部から秒を区切るカルチャ記号です。 既定値は、ピリオド \("です"\)。 文字に置き換えらるからです。|  
|*ff*|省略可能な秒の小数部、1 ~ 7 桁です。|  
  
 コンポーネントの`input`に以上である時間間隔をまとめて指定する必要があります<xref:System.TimeSpan.MinValue?displayProperty=fullName>以下と等しい<xref:System.TimeSpan.MaxValue?displayProperty=fullName>です。  
  
 <xref:System.TimeSpan.Parse%28System.String%29>メソッド解析を試みます`input`のカルチャに固有の書式で指定されたカルチャを使用して`formatProvider`です。  
  
 `formatProvider`パラメーターは、<xref:System.IFormatProvider>返される文字列の書式に関するカルチャ固有の情報を提供する実装。`formatProvider`パラメーターには、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>が書式指定規則が返される文字列に反映するのにはカルチャを表すオブジェクト。<xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>プロパティが返される文字列の書式を定義します。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>返される文字列の書式を定義するオブジェクト。  
  
-   実装するカスタム オブジェクト、<xref:System.IFormatProvider>インターフェイスです。 その<xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName>メソッドを返します、<xref:System.Globalization.DateTimeFormatInfo>書式情報を提供するオブジェクト。  
  
 場合`formatProvider`は`null`、<xref:System.Globalization.DateTimeFormatInfo>現在のカルチャに関連付けられているオブジェクトを使用します。  
  
   
  
## 例  
 次の例の配列を定義する<xref:System.Globalization.CultureInfo>オブジェクト、しの呼び出しで各オブジェクトを使用して、<xref:System.TimeSpan.Parse%28System.String%2CSystem.IFormatProvider%29>文字列配列の要素を解析します。 この例では、特定のカルチャの規則が、書式設定操作にどのように影響するかを示します。  
  
 [!code-csharp[System.TimeSpan.Parse\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.parse/cs/parse2.cs#2)]
 [!code-vb[System.TimeSpan.Parse\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parse/vb/parse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> の形式は無効です。</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="input" /> は <see cref="F:System.TimeSpan.MinValue" /> 未満の数値か、<see cref="F:System.TimeSpan.MaxValue" /> より大きい数値を表します。  
  
 または  
  
 <paramref name="input" /> の日、時間、分、または秒のコンポーネントのうち少なくとも 1 つが、その有効範囲外です。</exception>
        <block subset="none" type="usage">
          <para>When a time interval component in the string to be parsed contains more than seven digits, parsing operations in the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions may behave differently from parsing operations in the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]. In some cases, parsing operations that succeed in the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions may fail and throw an <see cref="T:System.OverflowException" /> in the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]. In other cases, parsing operations that throw a <see cref="T:System.FormatException" /> in the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions may fail and throw an <see cref="T:System.OverflowException" /> in the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]. The following example illustrates both scenarios.  
  
 [!code-csharp[System.TimeSpan.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.parse/cs/parsefailure1.cs#3)]
 [!code-vb[System.TimeSpan.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parse/vb/parsefailure1.vb#3)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static TimeSpan ParseExact (string input, string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan ParseExact(string input, string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">変換する時間間隔を指定する文字列。</param>
        <param name="format">
          <c>input</c> で必要とされる書式を定義する標準またはカスタムの書式指定文字列。</param>
        <param name="formatProvider">カルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>指定した書式とカルチャ固有の書式情報を使用して、時間間隔の文字列形式を等価の <see cref="T:System.TimeSpan" /> に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。</summary>
        <returns>
          <paramref name="format" /> および <paramref name="formatProvider" /> の指定に従って変換された、<paramref name="input" /> に対応する時間間隔。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29>メソッドで定義された形式である必要があります、時間の間隔の文字列形式を解析して、`format`パラメーター、その先頭および末尾の空白文字が無視される点が異なります。`input`の形式に従う必要があります`format`、厳密には常に使用する例外処理時間間隔に、ユーザーが入力文字列を変換するときにします。 例外処理を使用しないようにする場合は、呼び出す、<xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29>メソッド代わりにします。  
  
 `format`パラメーターは、1 つの標準書式指定子、または必要とされる書式を定義する 1 つまたは複数のカスタム書式指定子を含む文字列`input`です。 有効な書式指定文字列の詳細については、次を参照してください。[Standard TimeSpan Format Strings](http://msdn.microsoft.com/ja-jp/9f6c95eb-63ae-4dcc-9c32-f81985c75794)と[Custom TimeSpan Format Strings](http://msdn.microsoft.com/ja-jp/a63ebf55-7269-416b-b4f5-286f6c03bf0e)です。  
  
> [!IMPORTANT]
>  <xref:System.TimeSpan.ParseExact%2A>メソッドで指定されたカルチャの規則を使用して、`formatProvider`場合にのみパラメーター`format`標準<xref:System.TimeSpan>値の"g"または"G"のいずれかの文字列の書式を設定します。 "C"、"t"、"T"標準書式指定文字列は、インバリアント カルチャの書式指定規則を使用します。 カスタム書式指定文字列は、入力文字列の正確な形式を定義し、リテラル文字を使用して、時間間隔のコンポーネントを分離します。  
  
 `formatProvider`パラメーターは、<xref:System.IFormatProvider>場合に返される文字列の書式に関するカルチャ固有の情報を提供する実装`format`標準書式指定文字列です。`formatProvider`パラメーターには、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>が書式指定規則が返される文字列に反映するのにはカルチャを表すオブジェクト。<xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>プロパティが返される文字列の書式を定義します。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>返される文字列の書式を定義するオブジェクト。  
  
-   実装するカスタム オブジェクト、<xref:System.IFormatProvider>インターフェイスです。 その<xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName>メソッドを返します、<xref:System.Globalization.DateTimeFormatInfo>の書式情報を提供するオブジェクト。  
  
 場合`formatProvider`は`null`、<xref:System.Globalization.DateTimeFormatInfo>現在のカルチャに関連付けられているオブジェクトを使用します。  
  
   
  
## 例  
 次の例では、<xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29>さまざまな書式指定文字列とカルチャを使用して時間間隔のいくつかの文字列表現を解析します。  
  
 [!code-csharp[System.TimeSpan.ParseExact\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.parseexact/cs/parseexactexample1.cs#1)]
 [!code-vb[System.TimeSpan.ParseExact\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parseexact/vb/parseexactexample1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> の形式は無効です。</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="input" /> は <see cref="F:System.TimeSpan.MinValue" /> 未満の数値か、<see cref="F:System.TimeSpan.MaxValue" /> より大きい数値を表します。  
  
 または  
  
 <paramref name="input" /> の日、時間、分、または秒のコンポーネントのうち少なくとも 1 つが、その有効範囲外です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static TimeSpan ParseExact (string input, string[] formats, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan ParseExact(string input, string[] formats, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ParseExact(System.String,System.String[],System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">変換する時間間隔を指定する文字列。</param>
        <param name="formats">
          <c>input</c> で必要とされる書式を定義する標準またはカスタムの書式指定文字列の配列。</param>
        <param name="formatProvider">カルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>指定した書式指定文字列の配列とカルチャ固有の書式情報を使用して、時間間隔の文字列形式を等価の <see cref="T:System.TimeSpan" /> に変換します。 文字列形式の書式は、指定されたいずれかの書式と完全に一致する必要があります。</summary>
        <returns>
          <paramref name="formats" /> および <paramref name="formatProvider" /> の指定に従って変換された、<paramref name="input" /> に対応する時間間隔。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [ParseExact メソッド \(String, String\<xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> メソッドにより定義された形式のいずれかである必要があります、時間の間隔の文字列形式を解析し、 `formats` パラメーター、その先頭および末尾の空白文字が無視される点が異なります。`input` で指定された形式のいずれかに正確に従っている必要があります `formats`, 、時間間隔に、ユーザーが入力文字列を変換するときに、常に例外処理を使用する必要があります。 例外処理を使用しないようにする場合は、呼び出す、 [ParseExact メソッド \(String, String\<xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> メソッド代わりにします。  
  
 `formats` パラメーターは文字列配列で、1 つの標準書式指定子または要求の形式を定義する 1 つまたは複数のカスタム書式指定子のいずれかの要素で構成されます `input`します。 有効な書式指定文字列の詳細については、次を参照してください。 [Standard TimeSpan Format Strings](http://msdn.microsoft.com/ja-jp/9f6c95eb-63ae-4dcc-9c32-f81985c75794) と [Custom TimeSpan Format Strings](http://msdn.microsoft.com/ja-jp/a63ebf55-7269-416b-b4f5-286f6c03bf0e)です。`input` メンバーと正確に一致する必要があります `formats` 解析操作が成功するためです。 解析操作と一致させよう `input` で各要素に対して `formats` 配列の先頭の要素で開始します。  
  
> [!IMPORTANT]
>  [ParseExact メソッド \(String, String\<xref:System.TimeSpan.ParseExact%2A> メソッドで指定したカルチャの規則を使用する、 `formatProvider` パラメーター書式指定文字列の解析に使用する場合にのみ `input` 標準 [ParseExact メソッド \(String, String\<xref:System.TimeSpan> 値の"g"または"G"のいずれかの文字列の書式を設定します。 "C"、"t"、"T"標準書式指定文字列は、インバリアント カルチャの書式指定規則を使用します。 カスタム書式指定文字列は、入力文字列の正確な書式を定義して、リテラル文字を使用して時間間隔のコンポーネントを区切ります。  
  
 `formatProvider` パラメーターは、 [ParseExact メソッド \(String, String\<xref:System.IFormatProvider> 書式指定文字列の解析に使用する場合に返される文字列の書式に関するカルチャ固有の情報を提供する実装 `input` は標準書式指定文字列。`formatProvider` パラメーターは、次のいずれかを指定できます。  
  
-   A [ParseExact メソッド \(String, String\<xref:System.Globalization.CultureInfo> が書式指定規則が返される文字列に反映するのにはカルチャを表すオブジェクト。[ParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeFormatInfo> によって返されるオブジェクト、 [ParseExact メソッド \(String, String\<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> プロパティが返される文字列の書式を定義します。  
  
-   A [ParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeFormatInfo> 返される文字列の書式を定義するオブジェクト。  
  
-   実装するカスタム オブジェクト、 [ParseExact メソッド \(String, String\<xref:System.IFormatProvider> インターフェイスです。 その [ParseExact メソッド \(String, String\<xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName> メソッドが返される、 [ParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeFormatInfo> の書式情報を提供するオブジェクト。  
  
 場合 `formatProvider` は `null`, 、 [ParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeFormatInfo> 、現在のカルチャに関連付けられているオブジェクトを使用します。  
  
   
  
## 例  
 次の例では、 [ParseExact メソッド \(String, String\<xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%29> を文字列配列の各要素を変換する方法、 [ParseExact メソッド \(String, String\<xref:System.TimeSpan> 値。 この例では、フランス語 \- フランス \("FR\-FR"\) のカルチャの書式指定規則を使用して文字列を解釈します。 文字列は、一般の短い形式または一般の長い形式のいずれかを使用して、時間間隔を表すことができます。  
  
 さらに、時間間隔の解析メソッドが 1 桁の数字を解釈する方法を変更します。 通常、1 桁の数字は、時間間隔の日数として解釈されます。 代わりに、 `%h` カスタム書式指定文字列は 1 桁の数字を時間数として解釈するために使用します。 この変更を有効にするには、注意してください、 `%h` カスタム書式指定文字列で他の書式指定文字列を付ける必要があります、 `formats` 配列。  
  
 [!code-csharp[System.TimeSpan.ParseExact\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.parseexact/cs/parseexactexample3.cs#3)]
 [!code-vb[System.TimeSpan.ParseExact\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parseexact/vb/parseexactexample3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> の形式は無効です。</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="input" /> は <see cref="F:System.TimeSpan.MinValue" /> 未満の数値か、<see cref="F:System.TimeSpan.MaxValue" /> より大きい数値を表します。  
  
 または  
  
 <paramref name="input" /> の日、時間、分、または秒のコンポーネントのうち少なくとも 1 つが、その有効範囲外です。</exception>
        <altmember cref="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.TimeSpan@)" />
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static TimeSpan ParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan ParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.TimeSpanStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.TimeSpanStyles" />
      </Parameters>
      <Docs>
        <param name="input">変換する時間間隔を指定する文字列。</param>
        <param name="format">
          <c>input</c> で必要とされる書式を定義する標準またはカスタムの書式指定文字列。</param>
        <param name="formatProvider">カルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="styles">
          <c>input</c> で使用できるスタイル要素を定義する列挙値のビットごとの組み合わせ。</param>
        <summary>指定した書式、カルチャ固有の書式情報、およびスタイルを使用して、時間間隔の文字列形式を等価の <see cref="T:System.TimeSpan" /> に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。</summary>
        <returns>
          <paramref name="format" />、<paramref name="formatProvider" />、および <paramref name="styles" /> の指定に従って変換された、<paramref name="input" /> に対応する時間間隔。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.TimeSpan.ParseExact%2A>メソッドで定義された形式である必要があります、時間の間隔の文字列形式を解析して、`format`パラメーター、その先頭および末尾の空白文字が無視される点が異なります。`input`の形式に従う必要があります`format`、厳密には常に使用する例外処理時間間隔に、ユーザーが入力文字列を変換するときにします。 例外処理を使用しないようにする場合は、呼び出す、<xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%2CSystem.TimeSpan%40%29>メソッド代わりにします。  
  
 `format`パラメーターは、1 つの標準書式指定子、または必要とされる書式を定義する 1 つまたは複数のカスタム書式指定子を含む文字列`input`です。 有効な書式指定文字列の詳細については、次を参照してください。[Standard TimeSpan Format Strings](http://msdn.microsoft.com/ja-jp/9f6c95eb-63ae-4dcc-9c32-f81985c75794)と[Custom TimeSpan Format Strings](http://msdn.microsoft.com/ja-jp/a63ebf55-7269-416b-b4f5-286f6c03bf0e)です。  
  
> [!IMPORTANT]
>  <xref:System.TimeSpan.ParseExact%2A>メソッドで指定されたカルチャの規則を使用して、`formatProvider`場合にのみパラメーター`format`標準<xref:System.TimeSpan>値の"g"または"G"のいずれかの文字列の書式を設定します。 "C"、"t"、"T"標準書式指定文字列は、インバリアント カルチャの書式指定規則を使用します。 カスタム書式指定文字列は、入力文字列の正確な形式を定義し、リテラル文字を使用して、時間間隔のコンポーネントを分離します。  
  
 `formatProvider`パラメーターは、<xref:System.IFormatProvider>場合に返される文字列の書式に関するカルチャ固有の情報を提供する実装`format`標準書式指定文字列です。`formatProvider`パラメーターには、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>が書式指定規則が返される文字列に反映するのにはカルチャを表すオブジェクト。<xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>プロパティは、返される文字列の書式を定義します。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>返される文字列の書式を定義するオブジェクト。  
  
-   実装するカスタム オブジェクトの<xref:System.IFormatProvider>インターフェイスです。 その<xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName>メソッドを返します、<xref:System.Globalization.DateTimeFormatInfo>の書式情報を提供するオブジェクト。  
  
 場合`formatProvider`は`null`、<xref:System.Globalization.DateTimeFormatInfo>現在のカルチャに関連付けられているオブジェクトを使用します。  
  
 `styles`パラメーターはカスタム書式指定文字列を使用して解析される文字列の解釈に影響します。 決定するかどうか`input`は、負の符号がある場合にのみ負の時間間隔として解釈されます \(<xref:System.Globalization.TimeSpanStyles.None?displayProperty=fullName>\)、負の時間間隔として解釈されます常にするかどうか、または \(<xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=fullName>\)。 場合<xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=fullName>は使用されません`format`リテラル負の記号を含める必要があります \(など"\\\-"\)、負の時間間隔を正常に解析します。  
  
   
  
## 例  
 次の例では、<xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29>さまざまな書式指定文字列とカルチャを使用して時間間隔のいくつかの文字列表現を解析します。 また、使用、<xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=fullName>負の時間間隔として各文字列を解釈する値。 この例の出力を説明して、<xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=fullName>スタイルは、カスタム書式指定文字列を使用した場合にのみ、戻り値を適用します。  
  
 [!code-csharp[System.TimeSpan.ParseExact\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.parseexact/cs/parseexactexample2.cs#2)]
 [!code-vb[System.TimeSpan.ParseExact\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parseexact/vb/parseexactexample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> は無効な <see cref="T:System.Globalization.TimeSpanStyles" /> 値です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> の形式は無効です。</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="input" /> は <see cref="F:System.TimeSpan.MinValue" /> 未満の数値か、<see cref="F:System.TimeSpan.MaxValue" /> より大きい数値を表します。  
  
 または  
  
 <paramref name="input" /> の日、時間、分、または秒のコンポーネントのうち少なくとも 1 つが、その有効範囲外です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static TimeSpan ParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan ParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.TimeSpanStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.TimeSpanStyles" />
      </Parameters>
      <Docs>
        <param name="input">変換する時間間隔を指定する文字列。</param>
        <param name="formats">
          <c>input</c> で必要とされる書式を定義する標準またはカスタムの書式指定文字列の配列。</param>
        <param name="formatProvider">カルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="styles">input で使用できるスタイル要素を定義する列挙値のビットごとの組み合わせ。</param>
        <summary>指定した書式、カルチャ固有の書式情報、およびスタイルを使用して、時間間隔の文字列形式を等価の <see cref="T:System.TimeSpan" /> に変換します。 文字列形式の書式は、指定されたいずれかの書式と完全に一致する必要があります。</summary>
        <returns>
          <paramref name="formats" />、<paramref name="formatProvider" />、および <paramref name="styles" /> の指定に従って変換された、<paramref name="input" /> に対応する時間間隔。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [ParseExact メソッド \(String, String\<xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%29> メソッドにより定義された形式のいずれかである必要があります、時間の間隔の文字列形式を解析し、 `formats` パラメーター、その先頭および末尾の空白文字が無視される点が異なります。`input` で指定された形式のいずれかに正確に従っている必要があります `formats`, 、時間間隔に、ユーザーが入力文字列を変換するときに、常に例外処理を使用する必要があります。 例外処理を使用しないようにする場合は、呼び出す、 [ParseExact メソッド \(String, String\<xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%2CSystem.TimeSpan%40%29> メソッド代わりにします。  
  
 `formats` パラメーターは文字列配列で、1 つの標準書式指定子または要求の形式を定義する 1 つまたは複数のカスタム書式指定子のいずれかの要素で構成されます `input`します。 有効な書式指定文字列の詳細については、次を参照してください。 [Standard TimeSpan Format Strings](http://msdn.microsoft.com/ja-jp/9f6c95eb-63ae-4dcc-9c32-f81985c75794) と [Custom TimeSpan Format Strings](http://msdn.microsoft.com/ja-jp/a63ebf55-7269-416b-b4f5-286f6c03bf0e)です。`input` メンバーと正確に一致する必要があります `formats` 解析操作が成功するためです。 解析操作と一致させよう `input` で各要素に対して `formats` 配列の先頭の要素で開始します。  
  
> [!IMPORTANT]
>  [ParseExact メソッド \(String, String\<xref:System.TimeSpan.ParseExact%2A> メソッドで指定したカルチャの規則を使用する、 `formatProvider` パラメーター書式指定文字列の解析に使用する場合にのみ `input` 標準 [ParseExact メソッド \(String, String\<xref:System.TimeSpan> 値の"g"または"G"のいずれかの文字列の書式を設定します。 "C"、"t"、"T"標準書式指定文字列は、インバリアント カルチャの書式指定規則を使用します。 カスタム書式指定文字列は、入力文字列の正確な書式を定義して、リテラル文字を使用して時間間隔のコンポーネントを区切ります。  
  
 `formatProvider` パラメーターは、 [ParseExact メソッド \(String, String\<xref:System.IFormatProvider> 書式指定文字列の解析に使用する場合に返される文字列の書式に関するカルチャ固有の情報を提供する実装 `input` は標準書式指定文字列。`formatProvider` パラメーターは、次のいずれかを指定できます。  
  
-   A [ParseExact メソッド \(String, String\<xref:System.Globalization.CultureInfo> が書式指定規則が返される文字列に反映するのにはカルチャを表すオブジェクト。[ParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeFormatInfo> によって返されるオブジェクト、 [ParseExact メソッド \(String, String\<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> プロパティが返される文字列の書式を定義します。  
  
-   A [ParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeFormatInfo> 返される文字列の書式を定義するオブジェクト。  
  
-   実装するカスタム オブジェクト、 [ParseExact メソッド \(String, String\<xref:System.IFormatProvider> インターフェイスです。 その [ParseExact メソッド \(String, String\<xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName> メソッドが返される、 [ParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeFormatInfo> の書式情報を提供するオブジェクト。  
  
 場合 `formatProvider` は `null`, 、 [ParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeFormatInfo> 、現在のカルチャに関連付けられているオブジェクトを使用します。  
  
 `styles` パラメーターはカスタム書式指定文字列を使用して解析される文字列の解釈に影響します。 判断したかどうか `input` は、負の符号が存在する場合にのみ負の時間間隔として解釈されます \([ParseExact メソッド \(String, String\<xref:System.Globalization.TimeSpanStyles.None?displayProperty=fullName>\)、負の時間間隔として解釈されます常にするかどうか、または \([ParseExact メソッド \(String, String\<xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=fullName>\)。 場合 [ParseExact メソッド \(String, String\<xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=fullName> を使用しない `format` リテラル マイナス記号を含める必要があります \(など"\\\-"\) を正常に負の時間間隔を解析します。  
  
   
  
## 例  
 次の例では、 [ParseExact メソッド \(String, String\<xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%29> を文字列配列の各要素を変換する方法、 [ParseExact メソッド \(String, String\<xref:System.TimeSpan> 値。 文字列は、一般の短い形式または一般の長い形式のいずれかを使用して、時間間隔を表すことができます。  
  
 さらに、時間間隔の解析メソッドが 1 桁の数字を解釈する方法を変更します。 通常、1 桁の数字は、時間間隔の日数として解釈されます。 代わりに、 `%h` カスタム書式指定文字列は 1 桁の数字を時間数として解釈するために使用します。 この変更を有効にするには、注意してください、 `%h` カスタム書式指定文字列で他の書式指定文字列を付ける必要があります、 `formats` 配列。 出力にも注意してくださいを [ParseExact メソッド \(String, String\<xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=fullName> メソッド呼び出しで指定されたフラグは、この書式指定子と文字列を解析する場合にのみに使用します。  
  
 [!code-csharp[System.TimeSpan.ParseExact\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.parseexact/cs/parseexactexample4.cs#4)]
 [!code-vb[System.TimeSpan.ParseExact\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parseexact/vb/parseexactexample4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> は無効な <see cref="T:System.Globalization.TimeSpanStyles" /> 値です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> の形式は無効です。</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="input" /> は <see cref="F:System.TimeSpan.MinValue" /> 未満の数値か、<see cref="F:System.TimeSpan.MaxValue" /> より大きい数値を表します。  
  
 または  
  
 <paramref name="input" /> の日、時間、分、または秒のコンポーネントのうち少なくとも 1 つが、その有効範囲外です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Seconds">
      <MemberSignature Language="C#" Value="public int Seconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Seconds" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.Seconds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.TimeSpan" /> 構造体が表す時間間隔の秒の部分を取得します。</summary>
        <value>現在の <see cref="T:System.TimeSpan" /> 構造体の秒の部分。 戻り値の範囲は、\-59 ～ 59 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A<xref:System.TimeSpan>として値を表すことができます \[*\-*\]*d*.*hh*:*mm*:*ss*.*ff*、省略可能なマイナス符号が負の時間間隔を示す、 *d*コンポーネントは、日、 *hh*は 24 時間制で測定される時間*mm*分です。 *ss* \(秒単位\) は、と*ff*秒の小数部は、します。 値、<xref:System.TimeSpan.Seconds%2A>プロパティは、秒の部分、 *ss*です。  
  
 <xref:System.TimeSpan.Seconds%2A>プロパティは、一方に全体 \(秒単位\) を表す、<xref:System.TimeSpan.TotalSeconds%2A>プロパティは、整数部と小数秒を表します。  
  
   
  
## 例  
 次の例をいくつか作成<xref:System.TimeSpan>オブジェクトし、表示、<xref:System.TimeSpan.Seconds%2A>それぞれのプロパティです。  
  
 [!code-cpp[System.TimeSpan.Properties\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.TimeSpan.Properties\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CS/properties.cs#1)]
 [!code-vb[System.TimeSpan.Properties\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.TotalSeconds" />
        <altmember cref="P:System.TimeSpan.Ticks" />
        <altmember cref="P:System.TimeSpan.Milliseconds" />
        <altmember cref="P:System.TimeSpan.Minutes" />
        <altmember cref="P:System.TimeSpan.Hours" />
        <altmember cref="P:System.TimeSpan.Days" />
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (TimeSpan ts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.TimeSpan ts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Subtract(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ts" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="ts">減算される時間間隔。</param>
        <summary>指定した <see cref="T:System.TimeSpan" /> オブジェクトとこのインスタンスとの差を示す値を持つ、新しい <see cref="T:System.TimeSpan" /> オブジェクトを返します。</summary>
        <returns>このインスタンスの値から <paramref name="ts" /> の値を減算した結果を値とする新しい時間間隔。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 戻り値の間でなければなりません<xref:System.TimeSpan.MinValue?displayProperty=fullName>と<xref:System.TimeSpan.MaxValue?displayProperty=fullName>です。 それ以外の場合、例外がスローされます。  
  
 戻り値は、新しい<xref:System.TimeSpan>; 元<xref:System.TimeSpan>は変更されません。  
  
   
  
## 例  
 次の例では、<xref:System.TimeSpan.Subtract%2A>メソッドを 1 つの差を計算する<xref:System.TimeSpan>値および各配列内の時間間隔のです。 なお、ため<xref:System.TimeSpan>書式指定文字列を含めないでください負の記号は結果文字列に、例では、条件ロジックを使用して、負の時間間隔に負の符号を含めます。  
  
 [!code-csharp[System.TimeSpan.Subtract\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.subtract/cs/subtract1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">戻り値が <see cref="F:System.TimeSpan.MinValue" /> 未満であるか、<see cref="F:System.TimeSpan.MaxValue" /> を超えています。</exception>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.System#IComparable#CompareTo(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.TimeSpan" /> 構造体の値を表すタイマー刻みの数を取得します。</summary>
        <value>このインスタンス内のタイマー刻みの数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 時間の最小単位は、100 ナノ秒または 1,000万分の秒部分のと同じである目盛りです。 ミリ秒単位で 10,000 タイマー刻みがあります。 値、<xref:System.TimeSpan.Ticks%2A>プロパティは、正または負の時間間隔を表す正数または負数を指定できます。  
  
   
  
## 例  
 次の例をいくつか作成<xref:System.TimeSpan>オブジェクトし、表示、<xref:System.TimeSpan.Ticks%2A>それぞれのプロパティです。  
  
 [!code-cpp[System.TimeSpan.Properties\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.TimeSpan.Properties\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CS/properties.cs#1)]
 [!code-vb[System.TimeSpan.Properties\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
        <altmember cref="P:System.TimeSpan.Milliseconds" />
        <altmember cref="P:System.TimeSpan.Seconds" />
        <altmember cref="P:System.TimeSpan.Minutes" />
        <altmember cref="P:System.TimeSpan.Hours" />
        <altmember cref="P:System.TimeSpan.Days" />
      </Docs>
    </Member>
    <Member MemberName="TicksPerDay">
      <MemberSignature Language="C#" Value="public const long TicksPerDay = 864000000000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 TicksPerDay = (864000000000)" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.TicksPerDay" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>864000000000</MemberValue>
      <Docs>
        <summary>タイマー刻みの数を 1 日で表します。 このフィールドは定数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この定数の値は、10億を 864 です。つまり、864,000,000,000 です。  
  
   
  
## 例  
 次の例を参照し、値を表示、<xref:System.TimeSpan.TicksPerDay>フィールドです。  
  
 [!code-cpp[System.TimeSpan.Fields\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp#1)]
 [!code-csharp[System.TimeSpan.Fields\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CS/fields.cs#1)]
 [!code-vb[System.TimeSpan.Fields\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
        <altmember cref="F:System.TimeSpan.TicksPerMillisecond" />
        <altmember cref="F:System.TimeSpan.TicksPerSecond" />
        <altmember cref="F:System.TimeSpan.TicksPerMinute" />
        <altmember cref="F:System.TimeSpan.TicksPerHour" />
      </Docs>
    </Member>
    <Member MemberName="TicksPerHour">
      <MemberSignature Language="C#" Value="public const long TicksPerHour = 36000000000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 TicksPerHour = (36000000000)" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.TicksPerHour" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>36000000000</MemberValue>
      <Docs>
        <summary>タイマー刻みの数を 1 時間で表します。 このフィールドは定数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この定数の値は、10億を 36 です。つまり、36,000,000,000 です。  
  
   
  
## 例  
 次の例を参照し、値を表示、<xref:System.TimeSpan.TicksPerHour>フィールドです。  
  
 [!code-cpp[System.TimeSpan.Fields\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp#1)]
 [!code-csharp[System.TimeSpan.Fields\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CS/fields.cs#1)]
 [!code-vb[System.TimeSpan.Fields\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
        <altmember cref="F:System.TimeSpan.TicksPerMillisecond" />
        <altmember cref="F:System.TimeSpan.TicksPerSecond" />
        <altmember cref="F:System.TimeSpan.TicksPerMinute" />
        <altmember cref="F:System.TimeSpan.TicksPerDay" />
      </Docs>
    </Member>
    <Member MemberName="TicksPerMillisecond">
      <MemberSignature Language="C#" Value="public const long TicksPerMillisecond = 10000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 TicksPerMillisecond = (10000)" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.TicksPerMillisecond" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>10000</MemberValue>
      <Docs>
        <summary>タイマー刻みの数を 1 ミリ秒で表します。 このフィールドは定数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この定数の値は 10 桁です。つまり、10,000 です。  
  
   
  
## 例  
 次の例を参照し、値を表示、<xref:System.TimeSpan.TicksPerMillisecond>フィールドです。  
  
 [!code-cpp[System.TimeSpan.Fields\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp#1)]
 [!code-csharp[System.TimeSpan.Fields\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CS/fields.cs#1)]
 [!code-vb[System.TimeSpan.Fields\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
        <altmember cref="F:System.TimeSpan.TicksPerSecond" />
        <altmember cref="F:System.TimeSpan.TicksPerMinute" />
        <altmember cref="F:System.TimeSpan.TicksPerHour" />
        <altmember cref="F:System.TimeSpan.TicksPerDay" />
      </Docs>
    </Member>
    <Member MemberName="TicksPerMinute">
      <MemberSignature Language="C#" Value="public const long TicksPerMinute = 600000000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 TicksPerMinute = (600000000)" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.TicksPerMinute" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>600000000</MemberValue>
      <Docs>
        <summary>タイマー刻みの数を 1 分で表します。 このフィールドは定数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この定数の値は 600, 000 です。つまり、600,000,000 です。  
  
   
  
## 例  
 次の例を参照し、値を表示、<xref:System.TimeSpan.TicksPerMinute>フィールドです。  
  
 [!code-cpp[System.TimeSpan.Fields\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp#1)]
 [!code-csharp[System.TimeSpan.Fields\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CS/fields.cs#1)]
 [!code-vb[System.TimeSpan.Fields\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
        <altmember cref="F:System.TimeSpan.TicksPerMillisecond" />
        <altmember cref="F:System.TimeSpan.TicksPerSecond" />
        <altmember cref="F:System.TimeSpan.TicksPerHour" />
        <altmember cref="F:System.TimeSpan.TicksPerDay" />
      </Docs>
    </Member>
    <Member MemberName="TicksPerSecond">
      <MemberSignature Language="C#" Value="public const long TicksPerSecond = 10000000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 TicksPerSecond = (10000000)" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.TicksPerSecond" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>10000000</MemberValue>
      <Docs>
        <summary>タイマー刻みの数を 1 秒で表します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この定数の値は 10, 000 です。つまり、10,000, 000 です。  
  
   
  
## 例  
 次の例を参照し、値を表示、<xref:System.TimeSpan.TicksPerSecond>フィールドです。  
  
 [!code-cpp[System.TimeSpan.Fields\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp#1)]
 [!code-csharp[System.TimeSpan.Fields\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CS/fields.cs#1)]
 [!code-vb[System.TimeSpan.Fields\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
        <altmember cref="F:System.TimeSpan.TicksPerMillisecond" />
        <altmember cref="F:System.TimeSpan.TicksPerMinute" />
        <altmember cref="F:System.TimeSpan.TicksPerHour" />
        <altmember cref="F:System.TimeSpan.TicksPerDay" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.TimeSpan" /> オブジェクトの値を等価の文字列形式に変換します。</summary>
        <returns>現在の <see cref="T:System.TimeSpan" /> 値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 返される文字列は"c"書式指定子で書式設定であり、次の形式を使います。  
  
 \[\-\]\[*d*.\]*hh*:*mm*:*ss*\[.*fffffff*\]  
  
 角かっこ内の要素 \(\[および\]\)、返される文字列に含めることはできません。 コロン \(: とします\)。 リテラル文字です。 リテラルでない要素は、次の表に一覧表示されます。 によって返される文字列を<xref:System.TimeSpan.ToString>メソッドはカルチャではありません。  
  
|アイテム|説明|  
|----------|--------|  
|"\-"|負の時間間隔を示す、マイナス記号。 符号が正の期間に含まれていない場合です。|  
|"*d*"|時間間隔の日数の数。 時間間隔が 1 日未満の場合、この要素は省略されます。|  
|"*hh*"|0 から 23 までの時間間隔の時間の数。|  
|"*mm*"|0 から 59 までの時間間隔の分単位の数。|  
|"*ss*"|0 から 59 までの時間間隔の秒の数。|  
|"*fffffff*"|時間間隔の秒の小数部。 時間間隔に秒小数部にはが含まれていない場合、この要素は省略されます。 存在する場合、秒の小数部は小数点以下 7 桁を使用して表現は常にされます。|  
  
> [!NOTE]
>  文字列形式の比較の詳細については<xref:System.TimeSpan>Oracle データ型は、サポート技術情報の記事を参照してください。 および[324577: System.TimeSpan Does Not Match Oracle 9i INTERVAL DAY TO SECOND Data Type](http://go.microsoft.com/fwlink/?LinkId=161146)です。  
  
   
  
## 例  
 次の例は、呼び出すことによって返される文字列を表示、<xref:System.TimeSpan.ToString%2A>の数を持つメソッド<xref:System.TimeSpan>値。 例を呼び出しませんがなお、<xref:System.TimeSpan.ToString%2A>メソッドを直接メソッドによって呼び出されます、<xref:System.Console.WriteLine%2A?displayProperty=fullName>メソッドに変換しようとしたとき、<xref:System.TimeSpan>値を文字列形式。  
  
 [!code-csharp[System.TimeSpan.ToString\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.ToString/cs/ToString1.cs#1)]
 [!code-vb[System.TimeSpan.ToString\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.ToString/vb/ToString1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Support for formatting <see cref="T:System.TimeSpan" /> values was added in the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]. However, the <see cref="M:System.TimeSpan.ToString" /> method overload remains culture-insensitive. Its behavior remains unchanged from previous versions of the .NET Framework. To control the formatting of a <see cref="T:System.TimeSpan" /> value, call the <see cref="M:System.TimeSpan.ToString(System.String)" /> or <see cref="M:System.TimeSpan.ToString(System.String,System.IFormatProvider)" /> overload.</para>
        </block>
        <altmember cref="T:System.String" />
        <altmember cref="M:System.TimeSpan.Parse(System.String)" />
        <altmember cref="M:System.TimeSpan.TryParse(System.String,System.TimeSpan@)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ToString(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">標準またはカスタムの <see cref="T:System.TimeSpan" /> 書式指定文字列。</param>
        <summary>指定した書式を使用して、現在の <see cref="T:System.TimeSpan" /> オブジェクトの値を等価の文字列形式に変換します。</summary>
        <returns>現在の <see cref="T:System.TimeSpan" /> 値の文字列形式を、<paramref name="format" /> パラメーターで指定されている形式で表現した値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `format`パラメーターの任意の有効な標準またはカスタム書式指定子を指定できます<xref:System.TimeSpan>値。 場合`format`と等しい<xref:System.String.Empty?displayProperty=fullName>または`null`、現在の戻り値<xref:System.TimeSpan>オブジェクトは、一般的な書式指定子 \("c"\) でフォーマットします。 場合`format`その他の値、メソッドがスローされますが、<xref:System.FormatException>です。  
  
 場合`format`標準書式指定文字列では、返される文字列の形式は、現在のカルチャの書式指定規則を定義します。  
  
> [!IMPORTANT]
>  カスタムの書式指定文字列の<xref:System.TimeSpan>値に日付または時刻の区切り記号が含まれていません。 場合は、書式指定文字列でこれらの要素を追加するには、文字リテラルとして処理する必要があります。 詳細については、この例を参照して、[Custom TimeSpan Format Strings](http://msdn.microsoft.com/ja-jp/a63ebf55-7269-416b-b4f5-286f6c03bf0e)についても説明します。  
  
 .NET Framework では、次の書式設定のトピックで詳しく説明されている、広範な書式設定サポートを提供します。  
  
-   書式指定文字列の詳細については<xref:System.TimeSpan>値を参照してください[Standard TimeSpan Format Strings](http://msdn.microsoft.com/ja-jp/9f6c95eb-63ae-4dcc-9c32-f81985c75794)と[Custom TimeSpan Format Strings](http://msdn.microsoft.com/ja-jp/a63ebf55-7269-416b-b4f5-286f6c03bf0e)です。  
  
-   .NET Framework における書式設定のサポートに関する詳細については、次を参照してください。[Formatting Types in the .NET Framework](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f)です。  
  
   
  
## 例  
 次の例は、standard、およびカスタム<xref:System.TimeSpan>書式指定文字列の配列の各要素の文字列形式を表示する<xref:System.TimeSpan>値  
  
 [!code-csharp[System.TimeSpan.ToString\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.ToString/cs/tostring3.cs#3)]
 [!code-vb[System.TimeSpan.ToString\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.ToString/vb/tostring3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> パラメーターは、認識できないか、サポートされていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ToString(System.String,System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">標準またはカスタムの <see cref="T:System.TimeSpan" /> 書式指定文字列。</param>
        <param name="formatProvider">カルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>指定した書式とカルチャ固有の書式情報を使用して、現在の <see cref="T:System.TimeSpan" /> オブジェクトの値を等価の文字列形式に変換します。</summary>
        <returns>
          <paramref name="format" /> および <paramref name="formatProvider" /> の指定に従って表現された、現在の <see cref="T:System.TimeSpan" /> 値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `format`パラメーターの任意の有効な標準またはカスタム書式指定子を指定できます<xref:System.TimeSpan>値。 場合`format`と等しい<xref:System.String.Empty?displayProperty=fullName>または`null`、現在の戻り値<xref:System.TimeSpan>オブジェクトは、一般的な書式指定子 \("c"\) でフォーマットします。 その他の値を形式には、メソッドをスロー、<xref:System.FormatException>です。  
  
> [!IMPORTANT]
>  カスタムの書式指定文字列の<xref:System.TimeSpan>値に日付または時刻の区切り記号が含まれていません。 場合は、書式指定文字列でこれらの要素を追加するには、文字リテラルとして処理する必要があります。 例については、この例を参照して、[Custom TimeSpan Format Strings](http://msdn.microsoft.com/ja-jp/a63ebf55-7269-416b-b4f5-286f6c03bf0e)についても説明します。  
  
 .NET フレームワークでは、広範な書式設定の次のトピックで詳しく説明されている書式設定サポートを提供します。  
  
-   書式指定文字列の詳細については<xref:System.TimeSpan>値を参照してください[Standard TimeSpan Format Strings](http://msdn.microsoft.com/ja-jp/9f6c95eb-63ae-4dcc-9c32-f81985c75794)と[Custom TimeSpan Format Strings](http://msdn.microsoft.com/ja-jp/a63ebf55-7269-416b-b4f5-286f6c03bf0e)です。  
  
-   .NET Framework における書式設定のサポートに関する詳細については、次を参照してください。[Formatting Types in the .NET Framework](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f)です。  
  
 `formatProvider`パラメーターは、<xref:System.IFormatProvider>返される文字列の書式に関するカルチャ固有の情報を提供する実装。`formatProvider`パラメーターには、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>が書式指定規則が返される文字列に反映するのにはカルチャを表すオブジェクト。<xref:System.Globalization.DateTimeFormatInfo>オブジェクトによって返される、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>プロパティが返される文字列の書式を定義します。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>返される文字列の書式を定義するオブジェクト。  
  
-   実装するカスタム オブジェクトの<xref:System.IFormatProvider>インターフェイスです。 その<xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName>メソッドを返します、<xref:System.Globalization.DateTimeFormatInfo>の書式情報を提供するオブジェクト。  
  
 場合`formatProvider`は`null`、<xref:System.Globalization.DateTimeFormatInfo>現在のカルチャに関連付けられているオブジェクトを使用します。 場合`format`、カスタム書式指定文字列は、`formatProvider`パラメーターは無視されます。  
  
   
  
## 例  
 次の例では、 <xref:System.TimeSpan.ToString%28System.String%2CSystem.IFormatProvider%29> 2 つの時間間隔書式指定するメソッド。 例は、EN\-US カルチャの規則を使用してこれを表示するには、最初の書式文字列ごとに 2 回メソッドを呼び出して表示 FR\-FR カルチャの規則を使用するようにします。  
  
 [!code-csharp[System.TimeSpan.ToString\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.ToString/cs/tostring4.cs#4)]
 [!code-vb[System.TimeSpan.ToString\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.ToString/vb/tostring4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> パラメーターは、認識できないか、サポートされていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="TotalDays">
      <MemberSignature Language="C#" Value="public double TotalDays { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TotalDays" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.TotalDays" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>整数部と小数部から成る日数で表される、現在の <see cref="T:System.TimeSpan" /> 構造体の値を取得します。</summary>
        <value>このインスタンスで表される日数の合計。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、このインスタンスの値をタイマー刻みから日数に変換します。 この番号は、整数部と小数部日を含む可能性があります。  
  
 <xref:System.TimeSpan.TotalDays%2A>一方、プロパティが整数部と小数部の日数を表す、<xref:System.TimeSpan.Days%2A>プロパティは日単位を表します。  
  
   
  
## 例  
 次の例のインスタンスを作成、<xref:System.TimeSpan>オブジェクトし、の値を表示、<xref:System.TimeSpan.TotalDays%2A>プロパティです。 各 \(時間、分、秒、ミリ秒単位\) を形成するコンポーネントの値の小数部の値も表示されます、<xref:System.TimeSpan.TotalDays%2A>プロパティです。  
  
 [!code-csharp[System.TimeSpan.TotalDays\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.totaldays/cs/totaldays.cs#1)]
 [!code-vb[System.TimeSpan.TotalDays\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.totaldays/vb/totaldays.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.Days" />
        <altmember cref="P:System.TimeSpan.TotalMilliseconds" />
        <altmember cref="P:System.TimeSpan.TotalSeconds" />
        <altmember cref="P:System.TimeSpan.TotalMinutes" />
        <altmember cref="P:System.TimeSpan.TotalHours" />
      </Docs>
    </Member>
    <Member MemberName="TotalHours">
      <MemberSignature Language="C#" Value="public double TotalHours { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TotalHours" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.TotalHours" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>整数部と小数部から成る時間数で表される、現在の <see cref="T:System.TimeSpan" /> 構造体の値を取得します。</summary>
        <value>このインスタンスで表される時間数の合計。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、このインスタンスの値をティックの時間に変換します。 この番号は、整数部と小数部の時間を含める場合があります。  
  
 <xref:System.TimeSpan.TotalHours%2A>一方、プロパティが整数部と小数部の時間を表す、<xref:System.TimeSpan.Hours%2A>プロパティは、全体の時間を表します。  
  
   
  
## 例  
 次の例のインスタンスを作成、<xref:System.TimeSpan>オブジェクトおよび値を表示、<xref:System.TimeSpan.TotalHours%2A>プロパティです。 各 \(時間、分、秒、およびミリ秒単位\) を形成するコンポーネントの値の小数部の値も表示されます、<xref:System.TimeSpan.TotalHours%2A>プロパティです。  
  
 [!code-csharp[System.TimeSpan.TotalHours\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.totalhours/cs/totalhours.cs#1)]
 [!code-vb[System.TimeSpan.TotalHours\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.totalhours/vb/totalhours.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.Hours" />
        <altmember cref="P:System.TimeSpan.TotalMilliseconds" />
        <altmember cref="P:System.TimeSpan.TotalSeconds" />
        <altmember cref="P:System.TimeSpan.TotalMinutes" />
        <altmember cref="P:System.TimeSpan.TotalDays" />
      </Docs>
    </Member>
    <Member MemberName="TotalMilliseconds">
      <MemberSignature Language="C#" Value="public double TotalMilliseconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TotalMilliseconds" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.TotalMilliseconds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>整数部と小数部から成るミリ秒数で表される、現在の <see cref="T:System.TimeSpan" /> 構造体の値を取得します。</summary>
        <value>このインスタンスで表されるミリ秒数の合計。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、ミリ秒単位まで、タイマー刻みからこのインスタンスの値を変換します。 この番号は、整数部と小数部ミリ秒を含めることがあります。  
  
 <xref:System.TimeSpan.TotalMilliseconds%2A>一方、プロパティが整数部と小数部 \(ミリ秒単位\) を表す、<xref:System.TimeSpan.Milliseconds%2A>プロパティは整数のミリ秒単位を表します。  
  
   
  
## 例  
 次の例のインスタンスを作成、<xref:System.TimeSpan>オブジェクトし、の値を表示、<xref:System.TimeSpan.TotalMilliseconds%2A>プロパティです。  
  
 [!code-csharp[System.TimeSpan.TotalMilliseconds\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.totalmilliseconds/cs/totalmilliseconds.cs#1)]
 [!code-vb[System.TimeSpan.TotalMilliseconds\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.totalmilliseconds/vb/totalmilliseconds.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.Milliseconds" />
        <altmember cref="P:System.TimeSpan.TotalSeconds" />
        <altmember cref="P:System.TimeSpan.TotalMinutes" />
        <altmember cref="P:System.TimeSpan.TotalHours" />
        <altmember cref="P:System.TimeSpan.TotalDays" />
      </Docs>
    </Member>
    <Member MemberName="TotalMinutes">
      <MemberSignature Language="C#" Value="public double TotalMinutes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TotalMinutes" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.TotalMinutes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>整数部と小数部から成る分数で表される、現在の <see cref="T:System.TimeSpan" /> 構造体の値を取得します。</summary>
        <value>このインスタンスで表される分数の合計。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、このインスタンスの値をタイマー刻みから分に変換します。 この番号は、整数部と小数部 \(分\) にあります。  
  
 <xref:System.TimeSpan.TotalMinutes%2A>一方、プロパティが整数部と小数部の分数を表す、<xref:System.TimeSpan.Minutes%2A>プロパティは整数の分を表します。  
  
   
  
## 例  
 次の例のインスタンスを作成、<xref:System.TimeSpan>オブジェクトし、の値を表示、<xref:System.TimeSpan.TotalMinutes%2A>プロパティです。 各 \(秒、ミリ秒単位\) を形成するコンポーネントの値の小数部の値も表示されます、<xref:System.TimeSpan.TotalMinutes%2A>プロパティです。  
  
 [!code-csharp[System.TimeSpan.TotalMinutes\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.totalminutes/cs/totalminutes.cs#1)]
 [!code-vb[System.TimeSpan.TotalMinutes\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.totalminutes/vb/totalminutes.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.Minutes" />
        <altmember cref="P:System.TimeSpan.TotalMilliseconds" />
        <altmember cref="P:System.TimeSpan.TotalSeconds" />
        <altmember cref="P:System.TimeSpan.TotalHours" />
        <altmember cref="P:System.TimeSpan.TotalDays" />
      </Docs>
    </Member>
    <Member MemberName="TotalSeconds">
      <MemberSignature Language="C#" Value="public double TotalSeconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TotalSeconds" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.TotalSeconds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>整数部と小数部から成る秒数で表される、現在の <see cref="T:System.TimeSpan" /> 構造体の値を取得します。</summary>
        <value>このインスタンスで表される秒数の合計。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、このインスタンスの値をタイマー刻みから秒に変換します。 この番号は、整数部と小数部 \(秒\) にあります。  
  
 <xref:System.TimeSpan.TotalSeconds%2A>一方、プロパティが整数部と小数部 \(秒単位\) を表す、<xref:System.TimeSpan.Seconds%2A>プロパティは、全体の秒を表します。  
  
   
  
## 例  
 次の例のインスタンスを作成、<xref:System.TimeSpan>オブジェクトし、の値を表示、<xref:System.TimeSpan.TotalSeconds%2A>プロパティです。 フォームの値の小数部のミリ秒部分の値も表示の<xref:System.TimeSpan.TotalSeconds%2A>プロパティです。  
  
 [!code-csharp[System.TimeSpan.TotalSeconds\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.totalseconds/cs/totalseconds.cs#1)]
 [!code-vb[System.TimeSpan.TotalSeconds\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.totalseconds/vb/totalseconds.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.Seconds" />
        <altmember cref="P:System.TimeSpan.TotalMilliseconds" />
        <altmember cref="P:System.TimeSpan.TotalMinutes" />
        <altmember cref="P:System.TimeSpan.TotalHours" />
        <altmember cref="P:System.TimeSpan.TotalDays" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, valuetype System.TimeSpan result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParse(System.String,System.TimeSpan@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.TimeSpan&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">変換する時間間隔を指定する文字列。</param>
        <param name="result">このメソッドが返されるときに、<c>s</c> で指定した時間間隔を表すオブジェクトを格納します。変換に失敗した場合は、<see cref="F:System.TimeSpan.Zero" /> を格納します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>時間間隔の文字列形式を等価の <see cref="T:System.TimeSpan" /> に変換し、変換に成功したかどうかを示す値を返します。</summary>
        <returns>
          <paramref name="s" /> が正常に変換された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。<paramref name="s" /> パラメーターが <see langword="null" /> または <see cref="F:System.String.Empty" /> である場合、書式が無効な場合、表される時間間隔が <see cref="F:System.TimeSpan.MinValue" /> より短いか <see cref="F:System.TimeSpan.MaxValue" /> より長い場合、または日、時間、分、秒の各構成要素の少なくとも 1 つが有効な範囲にない場合、この操作は <see langword="false" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.TimeSpan.TryParse%2A>などのメソッドは、<xref:System.TimeSpan.Parse%28System.String%29?displayProperty=fullName>メソッド、点を除いて、変換が失敗した場合に、it が例外をスローしません。  
  
 `s`パラメーターを含む形式で時間間隔を指定します。  
  
 \[*ws*\]\[\-\]{ *d* &#124;*d*.*hh*:*mm*\[:*ss*\[.*ff*\]\] &#124;*hh*:*mm*\[:*ss*\[.*ff*\]\] }\[*ws*\]  
  
 角かっこ \(\[ および \]\) 内の要素は省略可能です。 中かっこで囲まれた代替のリストから 1 つを選択 \({および}\) と、縦棒で区切られて \(&#124;\) が必要です。 次の表では、各要素について説明します。  
  
|要素|説明|  
|--------|--------|  
|*ws*|省略可能なホワイト スペースです。|  
|\-|負の値を示す省略可能なマイナス記号、<xref:System.TimeSpan>です。|  
|*d*|0 ~ 10675199 日です。|  
|」を参照してください。|数時間から日を区切るカルチャ記号です。 ピリオドを使用するロケールに依存しない形式 \("です"\)。 文字に置き換えらるからです。|  
|*hh*|0 から 23 までの時間です。|  
|:|カルチャに依存した時刻の区切り記号です。 インバリアントの形式では、コロン \(":"\) 文字です。|  
|*mm*|0 から 59 までの分です。|  
|*ss*|省略可能な秒は、0 から 59 までです。|  
|」を参照してください。|秒の小数部から秒を区切るカルチャ記号です。 ピリオドを使用するロケールに依存しない形式 \("です"\)。 文字に置き換えらるからです。|  
|*ff*|省略可能な秒の小数部、1 ~ 7 桁です。|  
  
 コンポーネント`s`がより大きいまたは等しい時間間隔をまとめて指定する必要があります<xref:System.TimeSpan.MinValue?displayProperty=fullName>と以下を<xref:System.TimeSpan.MaxValue?displayProperty=fullName>です。  
  
 <xref:System.TimeSpan.Parse%28System.String%29>メソッド解析を試みます`s`カルチャ固有の形式の現在のカルチャを使用しています。  
  
   
  
## 例  
 次の例では、<xref:System.TimeSpan.TryParse%2A>メソッドを作成<xref:System.TimeSpan>から有効なオブジェクト<xref:System.TimeSpan>文字列とタイム スパン文字列が無効であるため、解析操作が失敗したときを示すです。  
  
 [!code-csharp[System.TimeSpan.TryParse\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.TryParse/cs/TryParse1.cs#1)]
 [!code-vb[System.TimeSpan.TryParse\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.TryParse/vb/TryParse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>In some cases, when a time interval component in the string to be parsed contains more than seven digits, parsing operations that succeed in the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions may fail and throw an <see cref="T:System.OverflowException" /> in the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], The following example illustrates this scenario.  
  
 [!code-csharp[System.TimeSpan.TryParse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.TryParse/cs/tryparsefailure1.cs#3)]
 [!code-vb[System.TimeSpan.TryParse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.TryParse/vb/tryparsefailure1.vb#3)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, IFormatProvider formatProvider, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, class System.IFormatProvider formatProvider, valuetype System.TimeSpan result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParse(System.String,System.IFormatProvider,System.TimeSpan@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.TimeSpan&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">変換する時間間隔を指定する文字列。</param>
        <param name="formatProvider">カルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="result">このメソッドが返されるときに、<c>input</c> で指定した時間間隔を表すオブジェクトを格納します。変換に失敗した場合は、<see cref="F:System.TimeSpan.Zero" /> を格納します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定したカルチャ固有の書式情報を使用して、時間間隔の文字列形式を等価の <see cref="T:System.TimeSpan" /> に変換し、変換に成功したかどうかを示す値を返します。</summary>
        <returns>
          <see langword="true" /> が正常に変換された場合は <paramref name="input" />。それ以外の場合は <see langword="false" />。<paramref name="input" /> パラメーターが <see langword="null" /> または <see cref="F:System.String.Empty" /> である場合、書式が無効な場合、表される時間間隔が <see cref="F:System.TimeSpan.MinValue" /> より短いか <see cref="F:System.TimeSpan.MaxValue" /> より長い場合、または日、時間、分、秒の各構成要素の少なくとも 1 つが有効な範囲にない場合、この操作は <see langword="false" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.TimeSpan.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29>などのメソッドは、<xref:System.TimeSpan.Parse%28System.String%2CSystem.IFormatProvider%29>メソッド、点を除いて、変換が失敗した場合に、it が例外をスローしません。  
  
 `input`パラメーターを含む形式で時間間隔を指定します。  
  
 \[*ws*\]\[\-\]{ *d* &#124;*d*.*hh*:*mm*\[:*ss*\[.*ff*\]\] &#124;*hh*:*mm*\[:*ss*\[.*ff*\]\] }\[*ws*\]  
  
 角かっこ \(\[ および \]\) 内の要素は省略可能です。 中かっこで囲まれた代替のリストから 1 つを選択 \({および}\) と、縦棒で区切られて \(&#124;\) が必要です。 次の表では、各要素について説明します。  
  
|要素|説明|  
|--------|--------|  
|*ws*|省略可能なホワイト スペースです。|  
|\-|負の値を示す省略可能なマイナス記号を<xref:System.TimeSpan>です。|  
|*d*|0 ~ 10675199 日です。|  
|」を参照してください。|数時間から日を区切るカルチャ記号です。 ピリオドを使用するロケールに依存しない形式 \("です"\)。 文字に置き換えらるからです。|  
|*hh*|0 から 23 までの時間です。|  
|:|カルチャに依存した時刻の区切り記号です。 インバリアントの形式では、コロン \(":"\) 文字です。|  
|*mm*|分、0 から 59 までです。|  
|*ss*|省略可能な秒は、0 から 59 までです。|  
|」を参照してください。|秒の小数部から秒を区切るカルチャ記号です。 ピリオドを使用するロケールに依存しない形式 \("です"\)。 文字に置き換えらるからです。|  
|*ff*|省略可能な秒の小数部、1 ~ 7 桁です。|  
  
 コンポーネント`input`に以上である時間間隔をまとめて指定する必要があります<xref:System.TimeSpan.MinValue?displayProperty=fullName>以下と等しい<xref:System.TimeSpan.MaxValue?displayProperty=fullName>です。  
  
 <xref:System.TimeSpan.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29>メソッド解析を試みます`input`で指定したカルチャ用のカルチャに固有の書式を使用して`formatProvider`です。  
  
 `formatProvider`パラメーターは、<xref:System.IFormatProvider>返される文字列の書式に関するカルチャ固有の情報を提供する実装。`formatProvider`パラメーターには、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>が書式指定規則が返される文字列に反映するのにはカルチャを表すオブジェクト。<xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>プロパティが返される文字列の書式を定義します。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>返される文字列の書式を定義するオブジェクト。  
  
-   実装するカスタム オブジェクト、<xref:System.IFormatProvider>インターフェイスです。 その<xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName>メソッドを返します、<xref:System.Globalization.DateTimeFormatInfo>の書式情報を提供するオブジェクト。  
  
 場合`formatProvider`は`null`、<xref:System.Globalization.DateTimeFormatInfo>現在のカルチャに関連付けられているオブジェクトを使用します。  
  
   
  
## 例  
 次の例の配列を定義する<xref:System.Globalization.CultureInfo>オブジェクト、しの呼び出しで各オブジェクトを使用して、<xref:System.TimeSpan.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29>文字列配列の要素を解析します。 この例では、特定のカルチャの規則が、書式設定操作にどのように影響するかを示します。  
  
 [!code-csharp[System.TimeSpan.TryParse\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.TryParse/cs/tryparse2.cs#2)]
 [!code-vb[System.TimeSpan.TryParse\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.TryParse/vb/tryparse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>In some cases, when a time interval component in the string to be parsed contains more than seven digits, parsing operations that succeed and return <see langword="true" /> in the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions may fail and return <see langword="false" /> in the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], The following example illustrates this scenario.  
  
 [!code-csharp[System.TimeSpan.TryParse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.TryParse/cs/tryparsefailure1.cs#3)]
 [!code-vb[System.TimeSpan.TryParse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.TryParse/vb/tryparsefailure1.vb#3)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string format, IFormatProvider formatProvider, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.TimeSpan result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.TimeSpan@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.TimeSpan&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">変換する時間間隔を指定する文字列。</param>
        <param name="format">
          <c>input</c> で必要とされる書式を定義する標準またはカスタムの書式指定文字列。</param>
        <param name="formatProvider">カルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="result">このメソッドが返されるときに、<c>input</c> で指定した時間間隔を表すオブジェクトを格納します。変換に失敗した場合は、<see cref="F:System.TimeSpan.Zero" /> を格納します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定した書式とカルチャ固有の書式情報を使用して、時間間隔の文字列形式を等価の <see cref="T:System.TimeSpan" /> に変換し、変換に成功したかどうかを示す値を返します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。</summary>
        <returns>
          <see langword="true" /> が正常に変換された場合は <paramref name="input" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29>メソッドで定義された形式である必要があります、時間の間隔の文字列形式を解析して、`format`パラメーター、その先頭および末尾の空白文字が無視される点が異なります。 このメソッドがに似ていますが、<xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29>メソッド、点を除いて、変換が失敗した場合に、it が例外をスローしません。  
  
 `format`パラメーターは、1 つの標準書式指定子、または必要とされる書式を定義する 1 つまたは複数のカスタム書式指定子を含む文字列`input`です。 有効な書式指定文字列の詳細については、次を参照してください。[Standard TimeSpan Format Strings](http://msdn.microsoft.com/ja-jp/9f6c95eb-63ae-4dcc-9c32-f81985c75794)と[Custom TimeSpan Format Strings](http://msdn.microsoft.com/ja-jp/a63ebf55-7269-416b-b4f5-286f6c03bf0e)です。  
  
> [!IMPORTANT]
>  <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29>メソッドで指定されたカルチャの規則を使用して、`formatProvider`場合にのみパラメーター`format`標準<xref:System.TimeSpan>値の"g"または"G"のいずれかの文字列の書式を設定します。 "C"、"t"、"T"標準書式指定文字列は、インバリアント カルチャの書式指定規則を使用します。 カスタム書式指定文字列は、入力文字列の正確な形式を定義し、リテラル文字を使用して、時間間隔のコンポーネントを分離します。  
  
 `formatProvider`パラメーターは、<xref:System.IFormatProvider>場合に返される文字列の書式に関するカルチャ固有の情報を提供する実装`format`標準書式指定文字列です。`formatProvider`パラメーターには、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>が書式指定規則が返される文字列に反映するのにはカルチャを表すオブジェクト。<xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>プロパティが返される文字列の書式を定義します。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>返される文字列の書式を定義するオブジェクト。  
  
-   実装するカスタム オブジェクトの<xref:System.IFormatProvider>インターフェイスです。 その<xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName>メソッドを返します、<xref:System.Globalization.DateTimeFormatInfo>の書式情報を提供するオブジェクト。  
  
 場合`formatProvider`は`null`、<xref:System.Globalization.DateTimeFormatInfo>現在のカルチャに関連付けられているオブジェクトを使用します。  
  
   
  
## 例  
 次の例では、<xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%2CSystem.TimeSpan%40%29>さまざまな書式指定文字列とカルチャを使用して時間間隔のいくつかの文字列表現を解析します。  
  
 [!code-csharp[System.TimeSpan.TryParseExact\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.tryparseexact/cs/tryparseexactexample1.cs#1)]
 [!code-vb[System.TimeSpan.TryParseExact\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.tryparseexact/vb/tryparseexactexample1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string[] formats, IFormatProvider formatProvider, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.TimeSpan result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.TimeSpan@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.TimeSpan&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">変換する時間間隔を指定する文字列。</param>
        <param name="formats">
          <c>input</c> に許容される書式を定義する標準またはカスタムの書式指定文字列の配列。</param>
        <param name="formatProvider">カルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="result">このメソッドが返されるときに、<c>input</c> で指定した時間間隔を表すオブジェクトを格納します。変換に失敗した場合は、<see cref="F:System.TimeSpan.Zero" /> を格納します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定した書式とカルチャ固有の書式情報を使用して、指定した文字列形式の時間間隔を等価の <see cref="T:System.TimeSpan" /> に変換し、変換に成功したかどうかを示す値を返します。 文字列形式の書式は、指定されたいずれかの書式と完全に一致する必要があります。</summary>
        <returns>
          <see langword="true" /> が正常に変換された場合は <paramref name="input" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [TryParseExact メソッド \(String, String\<xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> メソッドで指定された書式指定文字列のいずれかで定義された形式である時間間隔の文字列形式を解析し、 `formats` パラメーター、その先頭および末尾の空白文字が無視される点が異なります。 このメソッドは、 [TryParseExact メソッド \(String, String\<xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%29> メソッド、点を除いて、変換が失敗した場合に、it が例外をスローしません。  
  
 `formats` パラメーターは文字列配列で、1 つの標準書式指定子または要求の形式を定義する 1 つまたは複数のカスタム書式指定子のいずれかの要素で構成されます `input`します。 有効な書式指定文字列の詳細については、次を参照してください。 [Standard TimeSpan Format Strings](http://msdn.microsoft.com/ja-jp/9f6c95eb-63ae-4dcc-9c32-f81985c75794) と [Custom TimeSpan Format Strings](http://msdn.microsoft.com/ja-jp/a63ebf55-7269-416b-b4f5-286f6c03bf0e)です。`input` メンバーと正確に一致する必要があります `formats` 解析操作が成功するためです。 解析操作と一致させよう `input` で各要素に対して `formats` 配列の先頭の要素で開始します。  
  
> [!IMPORTANT]
>  [TryParseExact メソッド \(String, String\<xref:System.TimeSpan.TryParseExact%2A> メソッドで指定したカルチャの規則を使用する、 `formatProvider` パラメーター書式指定文字列の解析に使用する場合にのみ `input` 標準 [TryParseExact メソッド \(String, String\<xref:System.TimeSpan> 値の"g"または"G"のいずれかの文字列の書式を設定します。 "C"、"t"、"T"標準書式指定文字列は、インバリアント カルチャの書式指定規則を使用します。 カスタム書式指定文字列は、入力文字列の正確な書式を定義して、リテラル文字を使用して時間間隔のコンポーネントを区切ります。  
  
 `formatProvider` パラメーターは、 [TryParseExact メソッド \(String, String\<xref:System.IFormatProvider> 書式指定文字列の解析に使用する場合に返される文字列の書式に関するカルチャ固有の情報を提供する実装 `input` は標準書式指定文字列。`formatProvider` パラメーターは、次のいずれかを指定できます。  
  
-   A [TryParseExact メソッド \(String, String\<xref:System.Globalization.CultureInfo> が書式指定規則が返される文字列に反映するのにはカルチャを表すオブジェクト。[TryParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeFormatInfo> によって返されるオブジェクト、 [TryParseExact メソッド \(String, String\<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> プロパティが返される文字列の書式を定義します。  
  
-   A [TryParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeFormatInfo> 返される文字列の書式を定義するオブジェクト。  
  
-   実装するカスタム オブジェクト、 [TryParseExact メソッド \(String, String\<xref:System.IFormatProvider> インターフェイスです。 その [TryParseExact メソッド \(String, String\<xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName> メソッドが返される、 [TryParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeFormatInfo> の書式情報を提供するオブジェクト。  
  
 場合 `formatProvider` は `null`, 、 [TryParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeFormatInfo> 、現在のカルチャに関連付けられているオブジェクトを使用します。  
  
   
  
## 例  
 次の例では、 [TryParseExact メソッド \(String, String\<xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> を文字列配列の各要素を変換する方法、 [TryParseExact メソッド \(String, String\<xref:System.TimeSpan> 値。 この例では、フランス語 \- フランス \("FR\-FR"\) のカルチャの書式指定規則を使用して文字列を解釈します。 文字列は、一般の短い形式または一般の長い形式のいずれかを使用して、時間間隔を表すことができます。  
  
 さらに、時間間隔の解析メソッドが 1 桁の数字を解釈する方法を変更します。 通常、1 桁の数字は、時間間隔の日数として解釈されます。 代わりに、 `%h` カスタム書式指定文字列は 1 桁の数字を時間数として解釈するために使用します。 この変更を有効にするには、注意してください、 `%h` カスタム書式指定文字列で他の書式指定文字列を付ける必要があります、 `formats` 配列。  
  
 [!code-csharp[System.TimeSpan.TryParseExact\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.tryparseexact/cs/tryparseexactexample3.cs#3)]
 [!code-vb[System.TimeSpan.TryParseExact\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.tryparseexact/vb/tryparseexactexample3.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.TimeSpanStyles styles, valuetype System.TimeSpan result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.TimeSpanStyles" />
        <Parameter Name="result" Type="System.TimeSpan&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">変換する時間間隔を指定する文字列。</param>
        <param name="format">
          <c>input</c> で必要とされる書式を定義する標準またはカスタムの書式指定文字列。</param>
        <param name="formatProvider">カルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="styles">
          <c>input</c> のスタイルを示す 1 つ以上の列挙値。</param>
        <param name="result">このメソッドが返されるときに、<c>input</c> で指定した時間間隔を表すオブジェクトを格納します。変換に失敗した場合は、<see cref="F:System.TimeSpan.Zero" /> を格納します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定した書式、カルチャ固有の書式情報、およびスタイルを使用して、時間間隔の文字列形式を等価の <see cref="T:System.TimeSpan" /> に変換し、変換に成功したかどうかを示す値を返します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。</summary>
        <returns>
          <see langword="true" /> が正常に変換された場合は <paramref name="input" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%2CSystem.TimeSpan%40%29>メソッドで定義された形式である必要があります、時間の間隔の文字列形式を解析して、`format`パラメーター、その先頭および末尾の空白文字が無視される点が異なります。 このメソッドがに似ていますが、<xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%29>メソッド、点を除いて、変換が失敗した場合に、it が例外をスローしません。  
  
 `format`パラメーターは、1 つの標準書式指定子、または必要とされる書式を定義する 1 つまたは複数のカスタム書式指定子を含む文字列`input`です。 有効な書式指定文字列の詳細については、次を参照してください。[Standard TimeSpan Format Strings](http://msdn.microsoft.com/ja-jp/9f6c95eb-63ae-4dcc-9c32-f81985c75794)と[Custom TimeSpan Format Strings](http://msdn.microsoft.com/ja-jp/a63ebf55-7269-416b-b4f5-286f6c03bf0e)です。  
  
 `formatProvider`パラメーターは、<xref:System.IFormatProvider>場合に返される文字列の書式に関するカルチャ固有の情報を提供する実装`format`標準書式指定文字列です。`formatProvider`パラメーターには、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>が書式指定規則が返される文字列に反映するのにはカルチャを表すオブジェクト。<xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>プロパティが返される文字列の書式を定義します。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>返される文字列の書式を定義するオブジェクト。  
  
-   実装するカスタム オブジェクト、<xref:System.IFormatProvider>インターフェイスです。 その<xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName>メソッドを返します、<xref:System.Globalization.DateTimeFormatInfo>書式情報を提供するオブジェクト。  
  
 場合`formatProvider`は`null`、<xref:System.Globalization.DateTimeFormatInfo>現在のカルチャに関連付けられているオブジェクトを使用します。  
  
 `styles`パラメーターが使用するカスタム書式指定文字列を解析する文字列の解釈に影響します。 決定するかどうか`input`は、負の符号が存在する場合にのみ負の時間間隔として解釈されます \(<xref:System.Globalization.TimeSpanStyles.None?displayProperty=fullName>\)、負の時間間隔として解釈されます常にするかどうか、または \(<xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=fullName>\)。 場合<xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=fullName>を使用していない`format`リテラル負の記号を含める必要があります \(など、"\\\-"\) を正常に負の時間間隔を解析します。  
  
   
  
## 例  
 次の例では、<xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29>さまざまな書式指定文字列とカルチャを使用して時間間隔のいくつかの文字列表現を解析します。 また、使用、<xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=fullName>負の時間間隔として各文字列を解釈する値。 例の出力ことを示しています、<xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=fullName>スタイルは、カスタム書式指定文字列を使用した場合にのみ、戻り値を適用します。  
  
 [!code-csharp[System.TimeSpan.TryParseExact\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.tryparseexact/cs/tryparseexactexample2.cs#2)]
 [!code-vb[System.TimeSpan.TryParseExact\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.tryparseexact/vb/tryparseexactexample2.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.TimeSpanStyles styles, valuetype System.TimeSpan result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.TimeSpanStyles" />
        <Parameter Name="result" Type="System.TimeSpan&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">変換する時間間隔を指定する文字列。</param>
        <param name="formats">
          <c>input</c> に許容される書式を定義する標準またはカスタムの書式指定文字列の配列。</param>
        <param name="formatProvider">カルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="styles">
          <c>input</c> のスタイルを示す 1 つ以上の列挙値。</param>
        <param name="result">このメソッドが返されるときに、<c>input</c> で指定した時間間隔を表すオブジェクトを格納します。変換に失敗した場合は、<see cref="F:System.TimeSpan.Zero" /> を格納します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定した書式、カルチャ固有の書式情報、およびスタイルを使用して、指定した文字列形式の時間間隔を等価の <see cref="T:System.TimeSpan" /> に変換し、変換に成功したかどうかを示す値を返します。 文字列形式の書式は、指定されたいずれかの書式と完全に一致する必要があります。</summary>
        <returns>
          <see langword="true" /> が正常に変換された場合は <paramref name="input" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [TryParseExact メソッド \(String, String\<xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%2CSystem.TimeSpan%40%29> メソッドで指定された書式指定文字列のいずれかで定義された形式である時間間隔の文字列形式を解析し、 `formats` パラメーター、その先頭および末尾の空白文字が無視される点が異なります。 このメソッドは、 [TryParseExact メソッド \(String, String\<xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%29> メソッド、点を除いて、変換が失敗した場合に、it が例外をスローしません。  
  
 `formats` パラメーターは文字列配列で、1 つの標準書式指定子または要求の形式を定義する 1 つまたは複数のカスタム書式指定子のいずれかの要素で構成されます `input`します。 有効な書式指定文字列の詳細については、次を参照してください。 [Standard TimeSpan Format Strings](http://msdn.microsoft.com/ja-jp/9f6c95eb-63ae-4dcc-9c32-f81985c75794) と [Custom TimeSpan Format Strings](http://msdn.microsoft.com/ja-jp/a63ebf55-7269-416b-b4f5-286f6c03bf0e)です。`input` メンバーと正確に一致する必要があります `formats` 解析操作が成功するためです。 解析操作と一致させよう `input` で各要素に対して `formats` 配列の先頭の要素で開始します。  
  
> [!IMPORTANT]
>  [TryParseExact メソッド \(String, String\<xref:System.TimeSpan.ParseExact%2A> メソッドで指定したカルチャの規則を使用する、 `formatProvider` パラメーター書式指定文字列の解析に使用する場合にのみ `input` 標準 [TryParseExact メソッド \(String, String\<xref:System.TimeSpan> 値の"g"または"G"のいずれかの文字列の書式を設定します。 "C"、"t"、"T"標準書式指定文字列は、インバリアント カルチャの書式指定規則を使用します。 カスタム書式指定文字列は、入力文字列の正確な書式を定義して、リテラル文字を使用して時間間隔のコンポーネントを区切ります。  
  
 `formatProvider` パラメーターは、 [TryParseExact メソッド \(String, String\<xref:System.IFormatProvider> 書式指定文字列の解析に使用する場合に返される文字列の書式に関するカルチャ固有の情報を提供する実装 `input` は標準書式指定文字列。`formatProvider` パラメーターは、次のいずれかを指定できます。  
  
-   A [TryParseExact メソッド \(String, String\<xref:System.Globalization.CultureInfo> が書式指定規則が返される文字列に反映するのにはカルチャを表すオブジェクト。[TryParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeFormatInfo> によって返されるオブジェクト、 [TryParseExact メソッド \(String, String\<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> プロパティが返される文字列の書式を定義します。  
  
-   A [TryParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeFormatInfo> 返される文字列の書式を定義するオブジェクト。  
  
-   実装するカスタム オブジェクト、 [TryParseExact メソッド \(String, String\<xref:System.IFormatProvider> インターフェイスです。 その [TryParseExact メソッド \(String, String\<xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName> メソッドが返される、 [TryParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeFormatInfo> の書式情報を提供するオブジェクト。  
  
 場合 `formatProvider` は `null`, 、 [TryParseExact メソッド \(String, String\<xref:System.Globalization.DateTimeFormatInfo> 、現在のカルチャに関連付けられているオブジェクトを使用します。  
  
 `styles` パラメーターはカスタム書式指定文字列を使用して解析される文字列の解釈に影響します。 判断したかどうか `input` は、負の符号が存在する場合にのみ負の時間間隔として解釈されます \([TryParseExact メソッド \(String, String\<xref:System.Globalization.TimeSpanStyles.None?displayProperty=fullName>\)、負の時間間隔として解釈されます常にするかどうか、または \([TryParseExact メソッド \(String, String\<xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=fullName>\)。 場合 [TryParseExact メソッド \(String, String\<xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=fullName> を使用しない `format` リテラル マイナス記号を含める必要があります \(など"\\\-"\) を正常に負の時間間隔を解析します。  
  
   
  
## 例  
 次の例では、 [TryParseExact メソッド \(String, String\<xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%2CSystem.TimeSpan%40%29> を文字列配列の各要素を変換する方法、 [TryParseExact メソッド \(String, String\<xref:System.TimeSpan> 値。 文字列は、一般の短い形式または一般の長い形式のいずれかを使用して、時間間隔を表すことができます。  
  
 さらに、時間間隔の解析メソッドが 1 桁の数字を解釈する方法を変更します。 通常、1 桁の数字は、時間間隔の日数として解釈されます。 代わりに、 `%h` カスタム書式指定文字列は 1 桁の数字を時間数として解釈するために使用します。 この変更を有効にするには、注意してください、 `%h` カスタム書式指定文字列で他の書式指定文字列を付ける必要があります、 `formats` 配列。 出力にも注意してくださいを [TryParseExact メソッド \(String, String\<xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=fullName> メソッド呼び出しで指定されたフラグは、この書式指定子と文字列を解析する場合にのみに使用します。  
  
 [!code-csharp[System.TimeSpan.TryParseExact\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.tryparseexact/cs/tryparseexactexample4.cs#4)]
 [!code-vb[System.TimeSpan.TryParseExact\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.tryparseexact/vb/tryparseexactexample4.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Zero">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan Zero;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan Zero" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.Zero" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>0 の <see cref="T:System.TimeSpan" /> 値を表します。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 の値、<xref:System.TimeSpan.Zero>フィールドは、<xref:System.TimeSpan>ゼロの時刻の値を表す他と比較することができます<xref:System.TimeSpan>かどうか、後者を表す正の値、0 以外の場合、または負の時間間隔を決定するオブジェクト。 初期化するために、このフィールドを使用することもできます。、<xref:System.TimeSpan>時間値がゼロにオブジェクト。  
  
   
  
## 例  
 次の例を参照し、値を表示、<xref:System.TimeSpan.Zero>フィールドです。  
  
 [!code-cpp[System.TimeSpan.Fields\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp#1)]
 [!code-csharp[System.TimeSpan.Fields\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CS/fields.cs#1)]
 [!code-vb[System.TimeSpan.Fields\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>時間間隔の文字列形式を等価の <see cref="T:System.TimeSpan" /> に変換します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeSpan.TryParse" />
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.TimeSpan" /> の 2 つのインスタンスが等しいかどうかを示す値を返します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>時間間隔の文字列形式を等価の <see cref="T:System.TimeSpan" /> に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeSpan.TryParseExact" />
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>現在の <see cref="T:System.TimeSpan" /> オブジェクトの値を等価の文字列形式に変換します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.TimeSpan" /> 構造体の新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>時間間隔の文字列形式を等価の <see cref="T:System.TimeSpan" /> に変換し、変換に成功したかどうかを示す値を返します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeSpan.ParseExact" />
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した文字列形式の時間間隔を等価の <see cref="T:System.TimeSpan" /> に変換し、変換に成功したかどうかを示す値を返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeSpan.Parse" />
      </Docs>
    </MemberGroup>
  </Members>
</Type>