<Type Name="Guid" FullName="System.Guid">
  <TypeSignature Language="C#" Value="public struct Guid : IComparable, IComparable&lt;Guid&gt;, IEquatable&lt;Guid&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit Guid extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.Guid&gt;, class System.IEquatable`1&lt;valuetype System.Guid&gt;, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Guid" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.Guid&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Guid&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>グローバル一意識別子 \(GUID\) を表します。  
  
 この型の .NET Framework ソース コードを参照するを参照してください。、 [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/guid.cs#b622ef5f6b76c10a)します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  この型の .NET Framework ソース コードを参照してください、 [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/guid.cs#b622ef5f6b76c10a)します。 ソース コードをオンラインで参照、オフライン表示のリファレンスをダウンロードおよびデバッグ中にソース \(パッチや更新を含む\) をステップsee [instructions](http://referencesource.microsoft.com/).  
  
 GUID は、128 ビットの整数 \(16 バイト\) 一意の識別子が必要であれば常に、すべてのコンピューターおよびネットワークの間で使用できます。 このような識別子には、重複する可能性は非常に低いができます。  
  
   
  
## 例  
 次の例では、 <xref:System.Runtime.InteropServices.GuidAttribute?displayProperty=fullName> クラスに、インターフェイスと、ユーザー定義のクラスは、GUID を割り当てる。 呼び出すことによって、GUID の値を取得、 <xref:System.Attribute.GetCustomAttribute%2A> メソッドと等しいかどうかを判断するその他の 2 つの Guid と比較します。  
  
 [!code-cpp[Guid\#1](~/samples/snippets/cpp/VS_Snippets_CLR/Guid/CPP/Guids.cpp#1)]
 [!code-csharp[Guid\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Guid/CS/Guids.cs#1)]
 [!code-vb[Guid\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Guid/VB/Guids.vb#1)]  
  
 なお、 <xref:System.Runtime.InteropServices.GuidAttribute> com 型を公開するアプリケーションで属性が通常使用されます。 この例をコンパイルする場合は、実行、 [アセンブリ登録ツール \(Regasm.exe\)](http://msdn.microsoft.com/ja-jp/e190e342-36ef-4651-a0b4-0e8c2c0281cb) レジストリ \(.reg\) を作成し、タイプ ライブラリ \(.tlb\) ファイルには、生成されたアセンブリでします。 .Reg ファイルを使用してコクラスをレジストリに登録することができ、.tlb ファイルは、メタデータを COM 相互運用機能を提供します。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Guid (byte[] b);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Guid.#ctor(System.Byte[])" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="b" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="b">GUID の初期化に使用する値を含む 16 要素のバイト配列。</param>
        <summary>新しいインスタンスを初期化、<see cref="T:System.Guid" />指定されたバイトの配列を使用して、構造体。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="b" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="b" />ない 16 バイト長です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Guid (string g);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string g) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Guid.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="g" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="g">次のいずれかの形式の GUID を保持する文字列 \("d" は、大文字と小文字が区別されない 16 進数の文字を表します\)。  
  
 連続する 32 桁:  
  
 dddddddddddddddddddddddddddddddd  
  
 または  
  
 間をハイフン \(\-\) で区切った 8 桁、4 桁、4 桁、4 桁、12 桁のグループ。 左右が対応している中かっこや丸かっこで GUID 全体を囲むこともできます。  
  
 dddddddd\-dddd\-dddd\-dddd\-dddddddddddd  
  
 または  
  
 {dddddddd\-dddd\-dddd\-dddd\-dddddddddddd}  
  
 または  
  
 \(dddddddd\-dddd\-dddd\-dddd\-dddddddddddd\)  
  
 または  
  
 8 桁、4 桁、4 桁のグループと、2 桁のグループ 8 個で構成されるサブセット。各グループは "0x" または "0X" で始まり、コンマで区切ります。 GUID 全体およびサブセットは、左右が対応している中かっこで囲みます。  
  
 {0xdddddddd, 0xdddd, 0xdddd,{0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd}}  
  
 中かっこ、コンマ、プリフィックスの "0x" はすべて必須です。 埋め込まれている空白はすべて無視されます。 グループの先頭にある 0 はすべて無視されます。  
  
 各グループの桁数は、そのグループに指定できる最大の有効桁数です。 1 から、例で示した各グループの桁の数までを指定できます。 指定した数字は、そのグループの下位の桁と見なされます。</param>
        <summary>新しいインスタンスを初期化、<see cref="T:System.Guid" />構造体を指定した文字列で表される値を使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アルファベット順の 16 進数字、`g`パラメーターは、大文字と小文字を使用できます。 たとえば、次の文字列は、同じ GUID を表します。  
  
 "ca761232ed4211cebacd00aa0057b223"  
  
 "CA761232\-ED42\-11CE\-BACD\-00AA0057B223"  
  
 "{CA761232\-ED42\-11CE\-BACD\-00AA0057B223}"  
  
 "\(CA761232\-ED42\-11CE\-BACD\-00AA0057B223\)"  
  
 "{0xCA761232、0xED42、0x11CE、{0xBA、0 xcd、0x00、0xAA、0x00、0x57、0xB2、0x23}}"  
  
   
  
## 例  
 次の例は、「解説」セクションに記載各文字列を渡します、<xref:System.Guid.%23ctor%28System.String%29>コンス トラクターです。  
  
 [!code-csharp[System.Guid.ctor\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.guid.ctor/cs/ctor1.cs#1)]
 [!code-vb[System.Guid.ctor\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.guid.ctor/vb/ctor1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="g" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">形式<paramref name="g" />が無効です。</exception>
        <exception cref="T:System.OverflowException">形式<paramref name="g" />が無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Guid (int a, short b, short c, byte[] d);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 a, int16 b, int16 c, unsigned int8[] d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte[])" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="a" Type="System.Int32" />
        <Parameter Name="b" Type="System.Int16" />
        <Parameter Name="c" Type="System.Int16" />
        <Parameter Name="d" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="a">GUID の最初の 4 バイト。</param>
        <param name="b">GUID の次の 2 バイト。</param>
        <param name="c">GUID の次の 2 バイト。</param>
        <param name="d">GUID の残りの 8 バイト。</param>
        <summary>新しいインスタンスを初期化、<see cref="T:System.Guid" />指定の整数およびバイト配列を使用して構造体。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 `Guid(1,2,3,new byte[]{0,1,2,3,4,5,6,7})`作成、 <xref:System.Guid> 「00000001\-0002\-0003\-0001\-020304050607」に対応します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="d" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="d" />いない 8 バイト長です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Guid (int a, short b, short c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 a, int16 b, int16 c, unsigned int8 d, unsigned int8 e, unsigned int8 f, unsigned int8 g, unsigned int8 h, unsigned int8 i, unsigned int8 j, unsigned int8 k) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="a" Type="System.Int32" />
        <Parameter Name="b" Type="System.Int16" />
        <Parameter Name="c" Type="System.Int16" />
        <Parameter Name="d" Type="System.Byte" />
        <Parameter Name="e" Type="System.Byte" />
        <Parameter Name="f" Type="System.Byte" />
        <Parameter Name="g" Type="System.Byte" />
        <Parameter Name="h" Type="System.Byte" />
        <Parameter Name="i" Type="System.Byte" />
        <Parameter Name="j" Type="System.Byte" />
        <Parameter Name="k" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="a">GUID の最初の 4 バイト。</param>
        <param name="b">GUID の次の 2 バイト。</param>
        <param name="c">GUID の次の 2 バイト。</param>
        <param name="d">GUID の次のバイト。</param>
        <param name="e">GUID の次のバイト。</param>
        <param name="f">GUID の次のバイト。</param>
        <param name="g">GUID の次のバイト。</param>
        <param name="h">GUID の次のバイト。</param>
        <param name="i">GUID の次のバイト。</param>
        <param name="j">GUID の次のバイト。</param>
        <param name="k">GUID の次のバイト。</param>
        <summary>新しいインスタンスを初期化、<see cref="T:System.Guid" />指定の整数およびバイトを使用して構造体。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この方法で個々 のバイト数を指定することは、特定の種類のコンピューターのバイト順への制約 \(ビッグ エンディアンまたはリトル エンディアン バイト順\) を回避するため使用できます。  
  
   
  
## 例  
 次の例では、GUID の文字列表現は、"0000000a\-000b\-000c\-0001\-020304050607"を作成します。  
  
 [!code-csharp[System.Guid.Ctor\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.guid.ctor/cs/ctor2.cs#2)]
 [!code-vb[System.Guid.Ctor\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.guid.ctor/vb/ctor2.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Guid (uint a, ushort b, ushort c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int32 a, unsigned int16 b, unsigned int16 c, unsigned int8 d, unsigned int8 e, unsigned int8 f, unsigned int8 g, unsigned int8 h, unsigned int8 i, unsigned int8 j, unsigned int8 k) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Guid.#ctor(System.UInt32,System.UInt16,System.UInt16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="a" Type="System.UInt32" />
        <Parameter Name="b" Type="System.UInt16" />
        <Parameter Name="c" Type="System.UInt16" />
        <Parameter Name="d" Type="System.Byte" />
        <Parameter Name="e" Type="System.Byte" />
        <Parameter Name="f" Type="System.Byte" />
        <Parameter Name="g" Type="System.Byte" />
        <Parameter Name="h" Type="System.Byte" />
        <Parameter Name="i" Type="System.Byte" />
        <Parameter Name="j" Type="System.Byte" />
        <Parameter Name="k" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="a">GUID の最初の 4 バイト。</param>
        <param name="b">GUID の次の 2 バイト。</param>
        <param name="c">GUID の次の 2 バイト。</param>
        <param name="d">GUID の次のバイト。</param>
        <param name="e">GUID の次のバイト。</param>
        <param name="f">GUID の次のバイト。</param>
        <param name="g">GUID の次のバイト。</param>
        <param name="h">GUID の次のバイト。</param>
        <param name="i">GUID の次のバイト。</param>
        <param name="j">GUID の次のバイト。</param>
        <param name="k">GUID の次のバイト。</param>
        <summary>新しいインスタンスを初期化、<see cref="T:System.Guid" />構造体を使用して、指定した整数およびバイトの符号なし。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この方法で、バイト数を指定することによりエンディアン問題を回避します。  
  
   
  
## 例  
 Guid\(0xa,0xb,0xc,0,1,2,3,4,5,6,7\) を作成、 <xref:System.Guid> "0000000a\-000b\-000c\-0001\-020304050607"に対応します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Guid.CompareTo(System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="value">このインスタンスと比較するオブジェクト。</param>
        <summary>指定した <see cref="T:System.Guid" /> オブジェクトとこのインスタンスを比較し、これらの相対値を示す値を返します。</summary>
        <returns>このインスタンスと <paramref name="value" /> の相対値を示す符号付き数値。  
  
 <list type="table">  
<listheader>  
<term> 戻り値  
  
 </term>  
<description> 説明  
  
 </description>  
</listheader>  
<item>  
<term> 負の整数  
  
 </term>  
<description> このインスタンスは、<paramref name="value" /> よりも小さくなっています。  
  
 </description>  
</item>  
<item>  
<term> 0  
  
 </term>  
<description> このインスタンスは <paramref name="value" /> と等価です。  
  
 </description>  
</item>  
<item>  
<term> 正の整数  
  
 </term>  
<description> このインスタンスは <paramref name="value" /> よりも大きくなっています。  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Guid.CompareTo%2A>メソッドは、場合に指定された値と同様に、Guid を比較し、<xref:System.Guid.%23ctor%28System.Int32%2CSystem.Int16%2CSystem.Int16%2CSystem.Byte%5B%5D%29>コンス トラクターで、次のようにします。  
  
-   比較、 <xref:System.UInt32> 、値し、等しくない場合、結果を返します。 これらが等しい場合は、次の比較を行います。  
  
-   最初の比較<xref:System.UInt16>、値し、等しくない場合、結果を返します。 これらが等しい場合は、次の比較を行います。  
  
-   2 番目と比較<xref:System.UInt16>、値し、等しくない場合、結果を返します。 これらが等しい場合は、次の比較を行います。  
  
-   場合の次の 8 バイトで比較を実行<xref:System.Byte>値。 最初の等しくないペアが検出されると、結果を返します。 示す 0 を返しますそれ以外の場合、2 つ<xref:System.Guid>値が等しい。  
  
 最後の 8 バイトがの文字列形式に表示されるメモ、<xref:System.Guid>下位バイトを上位バイトから逆の順序で。 などの文字列形式で、<xref:System.Guid>値"01e75c83\-c6f5\-4192\-b57e\-7427cec5560d"最後の 8 バイトは、"b57e\-7427cec5560d"。 つまり、最後の 8 バイトは、左から右から始まる 0xb5 をバイトでごとに比較されます。  
  
 2 つの Guid のコンポーネントの値に等しい場合は、メソッドは、次のコンポーネントを比較します。 値が等しくないコンポーネントを検出すると、結果を返します。  
  
 このメソッドを実装する、<xref:System.IComparable%601?displayProperty=fullName>インターフェイスし、実行よりもわずかに向上、<xref:System.Guid.CompareTo%2A?displayProperty=fullName>メソッドに変換があるないため、`value`パラメーターを<xref:System.Guid>値。  
  
   
  
## 例  
 次の例では、 <xref:System.Guid.CompareTo%28System.Guid%29> 2 のような GUID 値を持つ GUID 値を比較するメソッド。  
  
 [!code-csharp[System.Guid.CompareTo\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.guid.compareto/cs/compareto2.cs#1)]
 [!code-vb[System.Guid.CompareTo\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.guid.compareto/vb/compareto2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Guid.CompareTo(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">比較対象のオブジェクト、または <see langword="null" />。</param>
        <summary>指定したオブジェクトとこのインスタンスを比較し、これらの相対値を示す値を返します。</summary>
        <returns>このインスタンスと <paramref name="value" /> の相対値を示す符号付き数値。  
  
 <list type="table">  
<listheader>  
<term> 戻り値  
  
 </term>  
<description> 説明  
  
 </description>  
</listheader>  
<item>  
<term> 負の整数  
  
 </term>  
<description> このインスタンスは、<paramref name="value" /> よりも小さくなっています。  
  
 </description>  
</item>  
<item>  
<term> 0  
  
 </term>  
<description> このインスタンスは <paramref name="value" /> と等価です。  
  
 </description>  
</item>  
<item>  
<term> 正の整数  
  
 </term>  
<description> このインスタンスがより大きい<paramref name="value" />、または<paramref name="value" />は<see langword="null" />します。  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `value`パラメーターでなければなりません`null`またはのインスタンス<xref:System.Guid>です。 それ以外の場合、例外がスローされます。 任意のインスタンス<xref:System.Guid>、その値に関係なくが大きいと見なされますより`null`です。  
  
 <xref:System.Guid.CompareTo%2A>メソッド場合に指定された値と同様に、Guid を比較し、<xref:System.Guid.%23ctor%2A>コンス トラクターで、次のようにします。  
  
-   比較、 <xref:System.Int32> 、値し、等しくない場合、結果を返します。 これらが等しい場合は、次の比較を行います。  
  
-   最初の比較<xref:System.Int16>、値し、等しくない場合、結果を返します。 これらが等しい場合は、次の比較を行います。  
  
-   2 番目と比較<xref:System.Int16>、値し、等しくない場合、結果を返します。 これらが等しい場合は、次の比較を行います。  
  
-   場合の次の 8 バイトで比較を実行<xref:System.Byte>値。 最初の等しくないペアが検出されると、結果を返します。 示す 0 を返しますそれ以外の場合、2 つ<xref:System.Guid>値が等しい。  
  
 2 つの Guid のコンポーネントの値に等しい場合は、メソッドは、次のコンポーネントを比較します。 値が等しくないコンポーネントを検出すると、結果を返します。  
  
 最後の 8 バイトがの文字列形式に表示されるメモ、<xref:System.Guid>下位バイトを上位バイトにから逆の順序で。 などの文字列形式で、<xref:System.Guid>値"01e75c83\-c6f5\-4192\-b57e\-7427cec5560d"最後の 8 バイトは、"b57e\-7427cec5560d"。  
  
   
  
## 例  
 次の例では、<xref:System.Runtime.InteropServices.GuidAttribute>クラスには GUID を割り当てる属性です。 呼び出してこの GUID の値を取得、<xref:System.Attribute.GetCustomAttribute%2A?displayProperty=fullName>メソッドと受け渡し、 <xref:System.Runtime.InteropServices.GuidAttribute.Value%2A> 、返されたプロパティ<xref:System.Runtime.InteropServices.GuidAttribute>オブジェクトを<xref:System.Guid.Parse%2A>メソッドです。 値の配列でその GUID を比較します。  
  
 [!code-csharp[System.Guid.CompareTo\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.guid.compareto/cs/compareto1.cs#2)]
 [!code-vb[System.Guid.CompareTo\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.guid.compareto/vb/compareto1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> が <see cref="T:System.Guid" /> ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static readonly Guid Empty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Guid Empty" />
      <MemberSignature Language="DocId" Value="F:System.Guid.Empty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>読み取り専用インスタンス、 <see cref="T:System.Guid" /> 値がすべてゼロです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値は GUID を比較する、 <xref:System.Guid.Empty?displayProperty=fullName> フィールド GUID が 0 以外であるかどうかを確認します。 次の例では、 <xref:System.Guid.op_Equality%2A> 2 つの GUID 値を比較する演算子 <xref:System.Guid.Empty?displayProperty=fullName> ゼロののみで構成されるかどうかを判断します。  
  
 [!code-csharp[System.Guid.Empty\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.guid.empty/cs/empty.cs#1)]
 [!code-vb[System.Guid.Empty\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.guid.empty/vb/empty.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (Guid g);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Guid g) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Guid.Equals(System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="g">このインスタンスと比較するオブジェクト。</param>
        <summary>このインスタンスと指定した <see cref="T:System.Guid" /> オブジェクトが同じ値を表しているかどうかを示す値を返します。</summary>
        <returns>
          <see langword="true" /> がこのインスタンスと等しい場合は <paramref name="g" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Two <xref:System.Guid> objects are equal if they have identical byte values.  
  
 This method performs slightly better than the <xref:System.Guid.Equals%2A> method because it does not have to box the **parameterReference tag is not supported!!!!**  
 parameter.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Guid.Equals(System.Object)" />
        <altmember cref="Overload:System.Guid.CompareTo" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Guid.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">このインスタンスと比較するオブジェクト。</param>
        <summary>このインスタンスが、指定されたオブジェクトと等価であるかどうかを示す値を返します。</summary>
        <returns>
          <see langword="true" /> 場合 <paramref name="o" /> は、 <see cref="T:System.Guid" /> はこのインスタンスと同じ値を持つそれ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 2 つ <xref:System.Guid> オブジェクトが同一のバイト値がある場合に等価です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Guid.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスのハッシュ コードを返します。</summary>
        <returns>対象のインスタンスのハッシュ コード。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewGuid">
      <MemberSignature Language="C#" Value="public static Guid NewGuid ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Guid NewGuid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Guid.NewGuid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Guid" /> 構造体の新しいインスタンスを初期化します。</summary>
        <returns>新しい GUID オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは便利な`static`メソッドを呼び出すことができる新しいを取得する<xref:System.Guid>です。 メソッドは、Windows への呼び出しをラップする[CoCreateGuid](http://msdn.microsoft.com/library/windows/desktop/ms688568.aspx)関数。 返された<xref:System.Guid>に等しくないことが保証<xref:System.Guid.Empty?displayProperty=fullName>です。  
  
   
  
## 例  
 次のコード例を作成し、2 つの値が表示されます<xref:System.Guid>オブジェクト。  
  
 [!code-csharp[system.guid.newguid\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.guid.newguid/cs/ng.cs#1)]
 [!code-vb[system.guid.newguid\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.guid.newguid/vb/ng.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (Guid a, Guid b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Guid a, valuetype System.Guid b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Guid.op_Equality(System.Guid,System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Guid" />
        <Parameter Name="b" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="a">比較する最初のオブジェクト。</param>
        <param name="b">比較する 2 番目のオブジェクト。</param>
        <summary>2 つの値を指定するかどうかを示す <see cref="T:System.Guid" /> オブジェクトが等しい。</summary>
        <returns>
          <see langword="true" /> と <paramref name="a" /> が等しい場合は <paramref name="b" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[The equivalent method for this operator is <xref:System.Guid.Equals%28System.Object%29?displayProperty=fullName>  
  
## 例  
 次の例では、 <xref:System.Guid.op_Equality%2A> 2 つの GUID 値を比較する演算子 <xref:System.Guid.Empty?displayProperty=fullName> ゼロののみで構成されるかどうかを判断します。  
  
 [!code-csharp[System.Guid.Empty\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.guid.empty/cs/empty.cs#1)]
 [!code-vb[System.Guid.Empty\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.guid.empty/vb/empty.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (Guid a, Guid b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Guid a, valuetype System.Guid b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Guid.op_Inequality(System.Guid,System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Guid" />
        <Parameter Name="b" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="a">比較する最初のオブジェクト。</param>
        <param name="b">比較する 2 番目のオブジェクト。</param>
        <summary>2 つの値を指定するかどうかを示す <see cref="T:System.Guid" /> オブジェクトが等しくないです。</summary>
        <returns>
          <paramref name="a" /> と <paramref name="b" /> が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[The equivalent method for this operator is <xref:System.Guid.Equals%28System.Object%29?displayProperty=fullName>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static Guid Parse (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Guid Parse(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Guid.Parse(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">変換する文字列。</param>
        <summary>該当するショートカットは、GUID の文字列形式に変換<see cref="T:System.Guid" />構造体。</summary>
        <returns>解析された値を格納する構造体。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Guid.Parse%2A>メソッドからの先頭または末尾にある空白文字をトリムする`input`に GUID の文字列形式に変換し、<xref:System.Guid>値。 このメソッドは、によって生成される 5 つの形式のいずれかで文字列を変換できる、<xref:System.Guid.ToString%28System.String%29>と<xref:System.Guid.ToString%28System.String%2CSystem.IFormatProvider%29>メソッドは、次の表に示すようにします。  
  
|指定子|説明|形式|  
|---------|--------|--------|  
|`N`|32 桁の数字|00000000000000000000000000000000|  
|`D`|ハイフンで区切られた 32 桁の数字|00000000\-0000\-0000\-0000\-000000000000|  
|`B`|中かっこで囲まれ、ハイフンで区切られた 32 桁|{00000000\-0000\-0000\-0000\-000000000000}|  
|`P`|かっこで囲まれた、ハイフンで区切られた 32 桁|\(00000000\-0000\-0000\-0000\-000000000000\)|  
|`X`|4 番目の値が中かっこで囲まれた 8 つの 16 進値のサブセットをかっこで囲まれた 4 つの 16 進値|{0x00000000、0x0000、0x0000、{0x00、0x00、0x00、0x00、0x00、0x00、0x00、0x00}}|  
  
 メソッドをスロー、<xref:System.FormatException>が正常に文字列を解析できない場合。 ここでは、なぜこれが発生する理由のいくつか含まれます。  
  
-   `input`16 進数の文字セットの一部ではない文字が含まれています。  
  
-   `input`多すぎるか少なすぎますの数値文字が含まれています。  
  
-   `input`多すぎるか、特定の形式の適切な数値以外の文字が少なすぎます。  
  
-   `input`によって認識される形式のいずれかに含まれない、<xref:System.Guid.ToString%2A>メソッドであり、前の表に表示します。  
  
 使用して、<xref:System.Guid.TryParse%2A>例外を処理することがなく、解析が失敗した操作をキャッチします。  
  
   
  
## 例  
 次の例は、新しい GUID を作成、呼び出すことによって次の 3 つの個別の文字列形式に変換、 <xref:System.Guid.ToString%28System.String%29> 、"B"、"D"と"X"書式指定子と呼び出すメソッド、 <xref:System.Guid.Parse%2A> 、文字列に変換するメソッドが戻ります<xref:System.Guid>値。  
  
 [!code-csharp[System.Guid.Parse\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.guid.parse/cs/parseex1.cs#3)]
 [!code-vb[System.Guid.Parse\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.guid.parse/vb/parseex1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" />認識される形式ではありません。</exception>
        <altmember cref="M:System.Guid.TryParse(System.String,System.Guid@)" />
        <altmember cref="M:System.Guid.ToString" />
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static Guid ParseExact (string input, string format);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Guid ParseExact(string input, string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Guid.ParseExact(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">変換対象の GUID。</param>
        <param name="format">解釈するときに使用する正確な書式を示す次の書式指定子のいずれかの<c>input</c>:"N"、"D"、"B"、"P"または"X"です。</param>
        <summary>相当するには GUID の文字列形式に変換します<see cref="T:System.Guid" />文字列が指定された形式ではその構造体します。</summary>
        <returns>解析された値を格納する構造体。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Guid.ParseExact%2A>メソッドで指定された形式で正確に変換する文字列が必要です、`format`先頭および末尾の空白文字が削除された後のパラメーターです。 次の表は、承認済みの書式指定子、`format`パラメーター。 「0」を表す 1 桁の数字です。ハイフン \("\-"\)、中かっこ \("{"、"}"\)、およびかっこ \(「\(",」\)"\) ように表示されます。  
  
|指定子|書式設定、`input`パラメーター|  
|---------|------------------------|  
|N|32 桁:<br /><br /> 00000000000000000000000000000000|  
|D|ハイフンで区切られた 32 桁:<br /><br /> 00000000\-0000\-0000\-0000\-000000000000|  
|B|中かっこで囲まれ、ハイフンで区切られた 32 桁:<br /><br /> {00000000\-0000\-0000\-0000\-000000000000}|  
|P|かっこで囲まれ、ハイフンで区切られた 32 桁:<br /><br /> \(00000000\-0000\-0000\-0000\-000000000000\)|  
|X|4 番目の値が中かっこで囲まれた 8 つの 16 進値のサブセットをかっこで囲まれた 4 つの 16 進値:<br /><br /> {0x00000000、0x0000、0x0000、{0x00、0x00、0x00、0x00、0x00、0x00、0x00、0x00}}|  
  
   
  
## 例  
 次の例では、<xref:System.Guid.ToString%28System.String%29>各を 1 つの GUID を表す文字列の配列を生成するサポートされている書式指定子を持つメソッドです。 渡されますし、<xref:System.Guid.ParseExact%2A>メソッドで、"B"書式指定子に準拠している文字列のみが正常に解析します。  
  
 [!code-csharp[System.Guid.Parse\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.guid.parse/cs/parseexactex1.cs#4)]
 [!code-vb[System.Guid.Parse\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.guid.parse/vb/parseexactex1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> または <paramref name="format" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" />指定された形式ではありません<paramref name="format" />です。</exception>
        <altmember cref="M:System.Guid.TryParseExact(System.String,System.String,System.Guid@)" />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Guid.System#IComparable#CompareTo(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IFormattable.ToString">
      <MemberSignature Language="C#" Value="string IFormattable.ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IFormattable.ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Guid.System#IFormattable#ToString(System.String,System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToByteArray">
      <MemberSignature Language="C#" Value="public byte[] ToByteArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] ToByteArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Guid.ToByteArray" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスの値を格納する 16 要素のバイト配列を返します。</summary>
        <returns>16 要素のバイト配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ラウンドト リップにこのメソッドによって返されるバイト配列を使用することができます、<xref:System.Guid>値を呼び出して、<xref:System.Guid.%23ctor%28System.Byte%5B%5D%29>コンス トラクターです。  
  
 返されるバイト配列内のバイトの順序の文字列形式と異なることに注意してください、<xref:System.Guid>値。 最後の 2 バイト グループと終わり 6 バイトのグループの順序は同じ先頭 4 バイト グループと次の 2 つの 2 バイトのグループの順序を反転します。 具体的な例を次に示します。  
  
   
  
## 例  
 次の例では、<xref:System.Guid.NewGuid%2A>メソッドを作成、<xref:System.Guid>値を呼び出し、続いて、<xref:System.Guid.ToByteArray%2A>メソッドを表す、<xref:System.Guid>バイト配列として値。 両方の値がコンソールに表示されます。 最後に、そのインスタンスを作成、新しい<xref:System.Guid>呼び出し、バイト配列から値、<xref:System.Guid.Equals%28System.Guid%29>を 2 つを表示するメソッド<xref:System.Guid>の値が同じです。  
  
 [!code-csharp[System.Guid.ToByteArray\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.guid.tobytearray/cs/tobytearray3.cs#1)]
 [!code-vb[System.Guid.ToByteArray\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.guid.tobytearray/vb/tobytearray3.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Guid.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスの値の文字列形式をレジストリ形式で返します。</summary>
        <returns>この値<see cref="T:System.Guid" />、次のように、"D"書式指定子を使用して書式設定します。  
  
 <c>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</c>  
  
 ここで、GUID の値は、ハイフンで 8 桁、4 桁、4 桁、4 桁、および 12 桁のグループに区切られた小文字の 16 進数で表されます。 戻り値は、たとえば "382c74c3\-721d\-4f34\-80e5\-57657b6cbc27" のようになります。 変換する 16 進数の桁を大文字の a ~ f、呼び出し、<see cref="M:System.String.ToUpper" />メソッドで返される文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、一般的な使用するための十分な既定の GUID 形式を提供します。ただし、このメソッドの他のバージョンを受け取る、`format`パラメーターがいくつかの一般的な形式バリエーションを提供します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Guid.ToString(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">この <see cref="T:System.Guid" /> の値の書式を指定する 1 文字の書式指定子。<c>format</c> パラメーターには、"N"、"D"、"B"、"P"、または "X" を指定できます。<c>format</c> が <see langword="null" /> または空の文字列 \(""\) である場合は、"D" が使用されます。</param>
        <summary>この値の文字列表現を返します<see cref="T:System.Guid" />に従って、指定された書式指定子のインスタンス。</summary>
        <returns>この <see cref="T:System.Guid" /> の値。指定した書式を使用して一連の小文字の 16 進数の数字で表されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 次の表は、承認済みの書式指定子、`format`パラメーター。 「0」を表す 1 桁の数字です。ハイフン \("\-"\)、中かっこ \("{"、"}"\)、およびかっこ \(「\(",」\)"\) ように表示されます。  
  
|指定子|戻り値の形式|  
|---------|------------|  
|`N`|32 桁:<br /><br /> 00000000000000000000000000000000|  
|`D`|ハイフンで区切られた 32 桁:<br /><br /> 00000000\-0000\-0000\-0000\-000000000000|  
|`B`|中かっこで囲まれ、ハイフンで区切られた 32 桁:<br /><br /> {00000000\-0000\-0000\-0000\-000000000000}|  
|`P`|かっこで囲まれ、ハイフンで区切られた 32 桁:<br /><br /> \(00000000\-0000\-0000\-0000\-000000000000\)|  
|`X`|4 番目の値が中かっこで囲まれた 8 つの 16 進値のサブセットをかっこで囲まれた 4 つの 16 進値:<br /><br /> {0x00000000、0x0000、0x0000、{0x00、0x00、0x00、0x00、0x00、0x00、0x00、0x00}}|  
  
 16 進数、a ~ f は小文字で返される文字列です。 大文字に変換を呼び出し、<xref:System.String.ToUpper%2A?displayProperty=fullName>メソッドで返される文字列。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> の値は <see langword="null" />、空の文字列 \(""\)、"N"、"D"、"B"、"P"、"X" ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Guid.ToString(System.String,System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">この <see cref="T:System.Guid" /> の値の書式を指定する 1 文字の書式指定子。<c>format</c> パラメーターには、"N"、"D"、"B"、"P"、または "X" を指定できます。<c>format</c> が <see langword="null" /> または空の文字列 \(""\) である場合は、"D" が使用されます。</param>
        <param name="provider">\(予約済み\) カルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>指定した書式指定子とカルチャ固有の書式情報に従って、<see cref="T:System.Guid" /> クラスのこのインスタンスの値を文字列形式で返します。</summary>
        <returns>この <see cref="T:System.Guid" /> の値。指定した書式を使用して一連の小文字の 16 進数の数字で表されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `provider`パラメーターは将来使用するために予約されていると、このメソッドの実行には含まれません。 渡すことができます`null`メソッドの呼び出しで。  
  
 次の表は、承認済みの書式指定子、`format`パラメーター。 「0」を表す 1 桁の数字です。ハイフン \("\-"\)、中かっこ \("{"、"}"\)、およびかっこ \(「\(",」\)"\) ように表示されます。  
  
|指定子|戻り値の形式|  
|---------|------------|  
|`N`|32 桁:<br /><br /> 00000000000000000000000000000000|  
|`D`|ハイフンで区切られた 32 桁:<br /><br /> 00000000\-0000\-0000\-0000\-000000000000|  
|`B`|中かっこで囲まれ、ハイフンで区切られた 32 桁:<br /><br /> {00000000\-0000\-0000\-0000\-000000000000}|  
|`P`|かっこで囲まれ、ハイフンで区切られた 32 桁:<br /><br /> \(00000000\-0000\-0000\-0000\-000000000000\)|  
|`X`|4 番目の値が中かっこで囲まれた 8 つの 16 進値のサブセットをかっこで囲まれた 4 つの 16 進値:<br /><br /> {0x00000000、0x0000、0x0000、{0x00、0x00、0x00、0x00、0x00、0x00、0x00、0x00}}|  
  
 16 進数、a ~ f は小文字で返される文字列です。 それらを大文字に変換を呼び出し、<xref:System.String.ToUpper%2A?displayProperty=fullName>メソッドで返される文字列。  
  
 `provider`パラメーターは無視され、それを使用して、カスタムの書式設定ソリューションを提供することはできません。 表すために、<xref:System.Guid>標準 GUID 書式指定文字列の呼び出しによってサポートされていない形式で文字列として値、<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName>メソッドを`provider`両方を実装するオブジェクト、<xref:System.ICustomFormatter>と<xref:System.IFormatProvider>インターフェイスです。 詳細については、「カスタム書式設定と icustomformatter を使用」」セクションを参照してください、[型の書式設定](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f)資料です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> の値は <see langword="null" />、空の文字列 \(""\)、"N"、"D"、"B"、"P"、"X" ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, out Guid result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, valuetype System.Guid result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Guid.TryParse(System.String,System.Guid@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="result" Type="System.Guid&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">変換対象の GUID。</param>
        <param name="result">解析された値を格納する構造体。 メソッドを返す場合<see langword="true" />、<c>result</c>に、有効な<see cref="T:System.Guid" />します。 メソッドを返す場合<see langword="false" />、 <c>result</c> equals<see cref="F:System.Guid.Empty" />です。</param>
        <summary>該当するショートカットは、GUID の文字列形式に変換<see cref="T:System.Guid" />構造体。</summary>
        <returns>
          <see langword="true" />解析操作が成功した場合それ以外の場合、<see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 同様に、このメソッドは、<xref:System.Guid.Parse%2A>以外を返します、解析された GUID を返す代わりに、メソッド`false`場合`input`は`null`か、認識される形式ではなく、例外をスローしません。 先頭または末尾にある空白文字をトリム`input`によって認識される 5 つの形式のいずれかの文字列に変換して、<xref:System.Guid.ToString%28System.String%29>と<xref:System.Guid.ToString%28System.String%2CSystem.IFormatProvider%29>メソッドは、次の表に示すようにします。  
  
|指定子|説明|形式|  
|---------|--------|--------|  
|`N`|32 桁の数字|00000000000000000000000000000000|  
|`D`|ハイフンで区切られた 32 桁の数字|00000000\-0000\-0000\-0000\-000000000000|  
|`B`|中かっこで囲まれ、ハイフンで区切られた 32 桁|{00000000\-0000\-0000\-0000\-000000000000}|  
|`P`|かっこで囲まれた、ハイフンで区切られた 32 桁|\(00000000\-0000\-0000\-0000\-000000000000\)|  
|`X`|4 番目の値が中かっこで囲まれた 8 つの 16 進値のサブセットをかっこで囲まれた 4 つの 16 進値|{0x00000000、0x0000、0x0000、{0x00、0x00、0x00、0x00、0x00、0x00、0x00、0x00}}|  
  
   
  
## 例  
 次の例は、新しい GUID を作成、呼び出すことによって次の 3 つの個別の文字列形式に変換、 <xref:System.Guid.ToString%28System.String%29> 、"B"、"D"と"X"書式指定子と呼び出すメソッド、 <xref:System.Guid.TryParse%2A> 、文字列に変換するメソッドが戻ります<xref:System.Guid>値。  
  
 [!code-csharp[System.Guid.Parse\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.guid.parse/cs/tryparseex1.cs#2)]
 [!code-vb[System.Guid.Parse\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.guid.parse/vb/tryparseex1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Guid.Parse(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string format, out Guid result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string format, valuetype System.Guid result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Guid.TryParseExact(System.String,System.String,System.Guid@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="result" Type="System.Guid&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">変換対象の GUID。</param>
        <param name="format">解釈するときに使用する正確な書式を示す次の書式指定子のいずれかの<c>input</c>:"N"、"D"、"B"、"P"または"X"です。</param>
        <param name="result">解析された値を格納する構造体。 メソッドを返す場合<see langword="true" />、<c>result</c>に、有効な<see cref="T:System.Guid" />します。 メソッドを返す場合<see langword="false" />、 <c>result</c> equals<see cref="F:System.Guid.Empty" />です。</param>
        <summary>相当するには GUID の文字列形式に変換します<see cref="T:System.Guid" />文字列が指定された形式ではその構造体します。</summary>
        <returns>
          <see langword="true" />解析操作が成功した場合それ以外の場合、<see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドで指定された形式で正確に変換する文字列では、`format`先頭および末尾の空白文字が削除された後のパラメーターです。 返します`false`場合`input`は`null`で指定された形式ではありませんか`format`例外をスローしないとします。  
  
 次の表は、承認済みの書式指定子、`format`パラメーター。 「0」を表す 1 桁の数字です。ハイフン \("\-"\)、中かっこ \("{"、"}"\)、およびかっこ \(「\(",」\)"\) ように表示されます。  
  
|指定子|書式設定、`input`パラメーター|  
|---------|------------------------|  
|N|32 桁:<br /><br /> 00000000000000000000000000000000|  
|D|ハイフンで区切られた 32 桁:<br /><br /> 00000000\-0000\-0000\-0000\-000000000000|  
|B|中かっこで囲まれ、ハイフンで区切られた 32 桁:<br /><br /> {00000000\-0000\-0000\-0000\-000000000000}|  
|P|かっこで囲まれ、ハイフンで区切られた 32 桁:<br /><br /> \(00000000\-0000\-0000\-0000\-000000000000\)|  
|X|4 番目の値が中かっこで囲まれた 8 つの 16 進値のサブセットをかっこで囲まれた 4 つの 16 進値:<br /><br /> {0x00000000、0x0000、0x0000、{0x00、0x00、0x00、0x00、0x00、0x00、0x00、0x00}}|  
  
   
  
## 例  
 次の例では、<xref:System.Guid.ToString%28System.String%29>各を 1 つの GUID を表す文字列の配列を生成するサポートされている書式指定子を持つメソッドです。 渡されますし、<xref:System.Guid.TryParseExact%2A>メソッドで、"B"書式指定子に準拠している文字列を正常に解析します。  
  
 [!code-csharp[System.Guid.Parse\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.guid.parse/cs/tryparseexactex1.cs#5)]
 [!code-vb[System.Guid.Parse\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.guid.parse/vb/tryparseexactex1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Guid.ParseExact(System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このインスタンスの値の文字列表現を返します、 <see cref="T:System.Guid" /> 構造体。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したオブジェクトまたは <see cref="T:System.Guid" /> とこのインスタンスを比較し、これらの相対値を示す値を返します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Guid" /> 構造体の新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>2 つのインスタンスかどうかを示す値を返すの <see cref="T:System.Guid" /> が同じ値を表しています。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>