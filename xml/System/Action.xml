<Type Name="Action" FullName="System.Action">
  <TypeSignature Language="C#" Value="public delegate void Action();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters />
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <summary>パラメーターを持たず、値を返さないメソッドをカプセル化します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 このデリゲートを使用して、メソッドを明示的にカスタム デリゲートを宣言しなくても、パラメーターとして渡すことができます。 カプセル化されるメソッドは、このデリゲートによって定義されているメソッドのシグネチャに対応する必要があります。 つまり、カプセル化されるメソッドに必要ないパラメーターと戻り値はありません。 \(C\# の場合、メソッドが返す必要があります`void`です。 Visual Basic で定義する必要があります、`Sub`しています.`End Sub`を構築します。 できますが無視される値を返すメソッド。\) 通常、このようなメソッドは、操作の実行に使用されます。  
  
> [!NOTE]
>  パラメーターを持たず、値を返すメソッドを参照するには、ジェネリックを使用して<xref:System.Func%601>代わりに委任します。  
  
 使用すると、<xref:System.Action>デリゲートがありませんを明示的にパラメーターなしのプロシージャをカプセル化するデリゲートを定義します。 たとえば、次のコードを明示的に宣言という名前のデリゲート`ShowValue`への参照を割り当てると、`Name.DisplayToWindow`インスタンス メソッドのデリゲートのインスタンスにします。  
  
 [!code-cpp[System.Action.Delegate\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.action.delegate/cpp/delegate.cpp#1)]
 [!code-csharp[System.Action.Delegate\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.action.delegate/cs/delegate.cs#1)]
 [!code-vb[System.Action.Delegate\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.action.delegate/vb/delegate.vb#1)]  
  
 次の例は、インスタンス化してこのコードを簡略化、<xref:System.Action>明示的に新しいデリゲートを定義して、名前付きメソッドをそこに割り当てるのではなくデリゲート。  
  
 [!code-cpp[System.Action\#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action/cpp/action.cpp#2)]
 [!code-csharp[System.Action\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action/cs/Action.cs#2)]
 [!code-vb[System.Action\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action/vb/Action.vb#2)]  
  
 使用することも、<xref:System.Action>次の例に示すように、C\# の場合は、匿名メソッドを持つデリゲートします。 \(匿名メソッドの概要については、次を参照してください[Anonymous Methods \(C\# Programming Guide\)](http://msdn.microsoft.com/ja-jp/a62441fa-f0a3-4acb-9aa6-93762a635275)。\)。  
  
 [!code-csharp[System.Action\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action/cs/Anon.cs#3)]  
  
 ラムダ式を割り当てることができます、<xref:System.Action>次の例に示すように、インスタンスを委任します。 \(ラムダ式の概要については、次を参照してください[Lambda Expressions \(C\# Programming Guide\)](http://msdn.microsoft.com/ja-jp/57e3ba27-9a82-4067-aca7-5ca446b7bf93)。\)。  
  
 [!code-csharp[System.Action\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action/cs/Lambda.cs#4)]
 [!code-vb[System.Action\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action/vb/lambda.vb#4)]  
  
   
  
## 例  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`1" />
  </Docs>
</Type>