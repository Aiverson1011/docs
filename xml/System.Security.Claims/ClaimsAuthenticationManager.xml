<Type Name="ClaimsAuthenticationManager" FullName="System.Security.Claims.ClaimsAuthenticationManager">
  <TypeSignature Language="C#" Value="public class ClaimsAuthenticationManager : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ClaimsAuthenticationManager extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.Security.Claims.ClaimsAuthenticationManager" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>クレーム認証マネージャーの基本実装を定義します。 クレーム認証マネージャーでは、要求の処理まで、アプリケーション コードを実行する前に、\(フィルター処理、検証、拡張機能\) 処理ロジックを受信したプリンシパルのクレームのコレクションに適用するためのパイプライン内の場所を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 認証マネージャーは、アプリケーションの機能拡張ポイントを要求処理パイプラインの検証、フィルター処理、変更に使用できる信頼性情報、受信要求またはによって提示されるクレームのセットに新しい要求を挿入、 <xref:System.Security.Claims.ClaimsPrincipal> 、RP の前にアプリケーション コードを実行します。 カスタム実装を返すこともできます <xref:System.Security.Claims.ClaimsPrincipal> RP アプリケーションに必要な場合です。 によって提供される既定の実装、 <xref:System.Security.Claims.ClaimsAuthenticationManager> クラス内のクレームが返されます、 <xref:System.Security.Claims.ClaimsPrincipal> 未変更の状態。 ただし、このクラスから派生し、オーバーライド、 <xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A> 内のクレームを変更する方法、 <xref:System.Security.Claims.ClaimsPrincipal> \(またはカスタムを返す <xref:System.Security.Claims.ClaimsPrincipal>\)。  
  
 カスタム クレーム認証マネージャーを作成するための一般的な理由は、追加、削除、または情報のみが認識するか、RP アプリケーションがより管理は、おそらくに基づくクレームを変換します。 たとえば、RP アプリケーションが管理して、については、受信したプリンシパル名クレームの値に基づくクレーム認証マネージャーによって返される要求のプリンシパルに追加のデータベースで、ショッピング カート アプリケーションで顧客の購入の履歴を保持する可能性があります。  
  
 使用するようにアプリケーションを構成、 `ClaimsAuthenticationManager` を使用してプログラムを使用して、 <xref:System.IdentityModel.Configuration.IdentityConfiguration> クラス、または構成を通じて、 [\<claimsAuthenticationManager\>](http://msdn.microsoft.com/ja-jp/6d30a450-6d13-4671-81a8-77e0204500c5) 要素 \(の子要素である、 [\<identityConfiguration\>](http://msdn.microsoft.com/ja-jp/1db76253-07da-447b-9e7a-3705c7228cf4) 要素\)。 オーバーライドすることができます、 <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> ためのカスタムの子要素を処理するメソッド、 `<claimsAuthenticationManager>` 要素を使用する、カスタムの manager を構成できます。 基本実装 <xref:System.Security.Claims.ClaimsAuthenticationManager> すべての子要素を処理しません。  
  
 クレーム認証マネージャーを使用して、アプリケーションの構成により、Windows Identity Foundation \(WIF\) で、呼び出す要求パイプラインからすること。  
  
   
  
## 例  
 次のコードは、入力方向の要求のいずれかのチェックを実行せず、受信したプリンシパルにロール クレームを追加するマネージャーを単純なクレームの認証には.  
  
 [!code-csharp[WifWebApplication1\#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifwebapplication1/cs/myclaimsauthenticationmanager/simpleclaimsauthenticatonmanager.cs#1)]  
  
 次の XML に示す、 `<claimsAuthenticationManager>` 要素。  
  
```xml  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthenticationManager type="MyClaimsAuthenticationManager.SimpleClaimsAuthenticatonManager, MyClaimsAuthenticationManager" />  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsAuthenticationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthenticationManager.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Security.Claims.ClaimsAuthenticationManager" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Authenticate">
      <MemberSignature Language="C#" Value="public virtual System.Security.Claims.ClaimsPrincipal Authenticate (string resourceName, System.Security.Claims.ClaimsPrincipal incomingPrincipal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.Claims.ClaimsPrincipal Authenticate(string resourceName, class System.Security.Claims.ClaimsPrincipal incomingPrincipal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthenticationManager.Authenticate(System.String,System.Security.Claims.ClaimsPrincipal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Claims.ClaimsPrincipal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="incomingPrincipal" Type="System.Security.Claims.ClaimsPrincipal" />
      </Parameters>
      <Docs>
        <param name="resourceName">要求されているリソースのアドレスです。</param>
        <param name="incomingPrincipal">リソースにアクセスしようとする認証済みユーザーを表すクレーム プリンシパルです。</param>
        <summary>派生クラスでオーバーライドされると、 <see cref="T:System.Security.Claims.ClaimsPrincipal" /> オブジェクト、RP アプリケーションの要件と一致します。 既定の実装では、受信は変更しません <see cref="T:System.Security.Claims.ClaimsPrincipal" />します。</summary>
        <returns>RP アプリケーションに必要なすべての変更を含む要求プリンシパル。 既定の実装は、入力方向の要求プリンシパル未変更の状態を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A> メソッドが呼び出されるフィルターを適用する派生クラスでは、このメソッドをオーバーライドすることができます、要求処理パイプラインでは、変更、またはクレームを RP アプリケーションのポリシーにより要求プリンシパルに挿入します。 RP アプリケーションの要件に応じてのカスタム実装をさらに返すことができます <xref:System.Security.Claims.ClaimsPrincipal>します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist">カスタム構成要素です。 型のリスト内の各ノードは、 <see cref="T:System.Xml.XmlElement" />です。</param>
        <summary>派生クラスでオーバーライドされた場合は、XML からカスタム構成を読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> 構成インフラストラクチャによって呼び出されます。 このメソッドが呼び出されると、 `nodelist` の最上位レベルの子要素が表示されます、 [\<claimsAuthenticationManager\>](http://msdn.microsoft.com/ja-jp/6d30a450-6d13-4671-81a8-77e0204500c5) 構成ファイルからの要素。 属性または子要素は、派生クラスの定義の構成スキーマに応じて、これらの各要素に含めること、ことがあります。 子要素が表示されない場合は、 `<claimsAuthenticationManager>` 構成ファイル内の要素、このメソッドは呼び出されません。  
  
 既定の実装でスロー、 <xref:System.NotImplementedException>です。 構成ファイルから、要求の認証マネージャーの初期化を有効にする派生クラスでは、このメソッドをオーバーライドします。 たとえば、構成要素が要求のプリンシパルを認証するときに、その後にポリシーを表す場合があります。または、元となる追加のクレームは、プリンシパルに追加する属性ストアをポイントに使用する場合があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>