<Type Name="OracleConnection" FullName="System.Data.OracleClient.OracleConnection">
  <TypeSignature Language="C#" Value="public sealed class OracleConnection : System.Data.Common.DbConnection, ICloneable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OracleConnection extends System.Data.Common.DbConnection implements class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Data.OracleClient.OracleConnection" />
  <AssemblyInfo>
    <AssemblyName>System.Data.OracleClient</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbConnection</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("InfoMessage")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Obsolete("OracleConnection has been deprecated. http://go.microsoft.com/fwlink/?LinkID=144260", false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>データベースへの接続を表します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 この型は廃止されており、.NET Framework の将来のバージョンで削除される予定です。 詳細については、「[Oracle and ADO.NET](http://msdn.microsoft.com/ja-jp/8ee8e389-53cf-45cf-80bd-1df63ef34f2e)」を参照してください。  
  
 <xref:System.Data.OracleClient.OracleConnection> オブジェクトは、Oracle データベースに一意の接続を表します。 クライアント\/サーバー データベース システムの場合は、サーバーへのネットワーク接続と同じです。  
  
 インスタンスを作成するアプリケーション、 <xref:System.Data.OracleClient.OracleConnection> オブジェクトがすべて直接的および間接的な呼び出し元コードに適切なアクセス許可を必要とする宣言的または命令型のセキュリティ確認要求を設定できます。<xref:System.Data.OracleClient.OracleConnection> 使用してセキュリティ確認要求を作成、 <xref:System.Data.OracleClient.OraclePermission> オブジェクトです。 そのコードが使用して、適切なアクセス許可を持っているユーザーが確認できる、 <xref:System.Data.OracleClient.OraclePermissionAttribute> オブジェクトです。 ユーザーおよび管理者では、コンピューター、ユーザー、およびエンタープライズ レベルのセキュリティ ポリシーを変更するのにコード アクセス セキュリティ ポリシー ツール \(Caspol.exe\) を使用できるもします。 詳細については、「[Security in the .NET Framework](http://msdn.microsoft.com/ja-jp/9a9621d7-8883-4a4f-a874-65e8e09e20a6)」を参照してください。  
  
> [!NOTE]
>  異なり、 **接続** 、他の .NET Framework データ プロバイダー \(SQL Server、OLE DB および ODBC\) 内のオブジェクト <xref:System.Data.OracleClient.OracleConnection> はサポートしていません、 <xref:System.Data.OracleClient.OracleConnection.ConnectionTimeout%2A> プロパティです。 プロパティまたは接続文字列で接続タイムアウトの設定も何も起こりません、および返される値は常に 0 です。<xref:System.Data.OracleClient.OracleConnection> サポートされていません、 <xref:System.Data.OracleClient.OracleConnection.Database%2A> プロパティまたは <xref:System.Data.OracleClient.OracleConnection.ChangeDatabase%2A> メソッドです。  
  
 場合、 <xref:System.Data.OracleClient.OracleConnection> オブジェクトがスコープから外れ、未処理のままにします。 常に閉じる必要がありますので、する <xref:System.Data.OracleClient.OracleConnection> を呼び出してオブジェクト <xref:System.Data.OracleClient.OracleConnection.Close%2A> または **Dispose**, 、またはを使用して、 <xref:System.Data.OracleClient.OracleConnection> オブジェクト内の `Using` ステートメントです。 それ以外の場合、ガベージ コレクションがそれらをすぐに解放しない可能性があります。 このような遅延では、接続の最大数に達すると、ガベージ コレクターによって削除される接続の数が待機している場合は、エラーが発生します。 これに対しを呼び出して接続を閉じて <xref:System.Data.OracleClient.OracleConnection.Close%2A> スケーラビリティを向上し、アプリケーション全体のパフォーマンスを向上させるより効率的にネイティブ リソースを使用します。 接続が常に閉じていることを確認するには、内の接続を開きます、 `Using` ブロックします。  
  
> [!NOTE]
>  高パフォーマンス アプリケーションを展開するには、多くの場合、接続プールを使用する必要があります。 ただし、.NET Framework Data Provider for Oracle を使用する場合、プロバイダーは、これを自動的に管理するために接続がプールを有効にする必要はありません。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Data.OracleClient.OracleCommand> と <xref:System.Data.OracleClient.OracleConnection>です。<xref:System.Data.OracleClient.OracleConnection> を開き、として設定は、 <xref:System.Data.OracleClient.OracleCommand.Connection%2A?displayProperty=fullName> プロパティです。 例では、 <xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A>, 、接続を閉じます。 これを実現する、 <xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A> 接続文字列とは、クエリ文字列が渡されます。  
  
 [!code-csharp[Classic WebData OracleConnection\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OracleConnection/CS/source.cs#1)]
 [!code-vb[Classic WebData OracleConnection\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OracleConnection/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Data.OracleClient.OracleDataAdapter" />
    <altmember cref="T:System.Data.OracleClient.OracleCommand" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OracleConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Data.OracleClient.OracleConnection" />の新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例を作成し、開きます、 <xref:System.Data.OracleClient.OracleConnection>です。  
  
 [!code-csharp[Classic WebData OracleConnection.OracleConnection1\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OracleConnection.OracleConnection1/CS/source.cs#1)]
 [!code-vb[Classic WebData OracleConnection.OracleConnection1\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OracleConnection.OracleConnection1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OracleConnection (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">データベースを開くために使用される接続。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Data.OracleClient.OracleConnection" /> クラスを指定した接続文字列を使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例を作成し、開きます、 <xref:System.Data.OracleClient.OracleConnection>です。  
  
 [!code-csharp[Classic WebData OracleConnection.OracleConnection1\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OracleConnection.OracleConnection1/CS/source.cs#1)]
 [!code-vb[Classic WebData OracleConnection.OracleConnection1\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OracleConnection.OracleConnection1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginDbTransaction">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbTransaction BeginDbTransaction (System.Data.IsolationLevel isolationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbTransaction BeginDbTransaction(valuetype System.Data.IsolationLevel isolationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.BeginDbTransaction(System.Data.IsolationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <param name="isolationLevel">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.OracleClient.OracleTransaction BeginTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.OracleClient.OracleTransaction BeginTransaction() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.BeginTransaction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleTransaction</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>データベースでトランザクションを開始します。</summary>
        <returns>新しいトランザクションを表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コミットまたはトランザクションをロールバックして、明示的に使用、 <xref:System.Data.OracleClient.OracleTransaction.Commit%2A> または <xref:System.Data.OracleClient.OracleTransaction.Rollback%2A> メソッドです。  
  
 モデルを正しく実行するため、.NET Framework Data Provider for Oracle トランザクションの管理、データベースによって提供されるよう他のトランザクション管理モデルは使用しないでください。  
  
> [!NOTE]
>  分離レベルを指定しない場合は、既定の分離レベルが使用します。 分離レベルを指定する、 <xref:System.Data.OracleClient.OracleConnection.BeginTransaction%2A> メソッドを使用して、 <xref:System.Data.OracleClient.OracleConnection.BeginTransaction%2A> オーバー ロードします。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Data.OracleClient.OracleConnection> と <xref:System.Data.OracleClient.OracleTransaction>です。 使用する方法も示します、 <xref:System.Data.OracleClient.OracleConnection.BeginTransaction%2A>, 、<xref:System.Data.OracleClient.OracleTransaction.Commit%2A>, 、および <xref:System.Data.OracleClient.OracleTransaction.Rollback%2A> メソッドです。  
  
 [!code-csharp[Classic WebData OracleConnection.BeginTransaction\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OracleConnection.BeginTransaction/CS/source.cs#1)]
 [!code-vb[Classic WebData OracleConnection.BeginTransaction\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OracleConnection.BeginTransaction/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">並列トランザクションはサポートされていません。</exception>
        <altmember cref="M:System.Data.OracleClient.OracleTransaction.Commit" />
        <altmember cref="M:System.Data.OracleClient.OracleTransaction.Rollback" />
      </Docs>
    </Member>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.OracleClient.OracleTransaction BeginTransaction (System.Data.IsolationLevel il);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.OracleClient.OracleTransaction BeginTransaction(valuetype System.Data.IsolationLevel il) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.BeginTransaction(System.Data.IsolationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="il" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <param name="il">この接続のトランザクション分離レベル。</param>
        <summary>指定したデータベースでトランザクションを開始 <see cref="T:System.Data.IsolationLevel" /> 値。</summary>
        <returns>新しいトランザクションを表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コミットまたはトランザクションをロールバックして、明示的に使用、 <xref:System.Data.OracleClient.OracleTransaction.Commit%2A> または <xref:System.Data.OracleClient.OracleTransaction.Rollback%2A> メソッドです。  
  
 モデルを正しく実行するため、.NET Framework Data Provider for Oracle トランザクションの管理、データベースによって提供されるよう他のトランザクション管理モデルは使用しないでください。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Data.OracleClient.OracleConnection> と <xref:System.Data.OracleClient.OracleTransaction>です。 使用する方法も示します、 <xref:System.Data.OracleClient.OracleConnection.BeginTransaction%2A>, 、<xref:System.Data.OracleClient.OracleTransaction.Commit%2A>, 、および <xref:System.Data.OracleClient.OracleTransaction.Rollback%2A> メソッドです。  
  
 [!code-csharp[Classic WebData OracleConnection.BeginTransaction\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OracleConnection.BeginTransaction/CS/source.cs#1)]
 [!code-vb[Classic WebData OracleConnection.BeginTransaction\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OracleConnection.BeginTransaction/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">並列トランザクションはサポートされていません。</exception>
        <altmember cref="M:System.Data.OracleClient.OracleTransaction.Commit" />
        <altmember cref="M:System.Data.OracleClient.OracleTransaction.Rollback" />
      </Docs>
    </Member>
    <Member MemberName="ChangeDatabase">
      <MemberSignature Language="C#" Value="public override void ChangeDatabase (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ChangeDatabase(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.ChangeDatabase(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">現在のデータベースの代わりに使用するデータベースの名前。</param>
        <summary>開いている <see cref="T:System.Data.OracleClient.OracleConnection" /> の現在のデータベースを変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **parameterReference tag is not supported!!!!**  
 parameter must contain a valid database name, and cannot contain a null value, an empty string \(""\), or a string with only blank characters.  
  
> [!NOTE]
>  Unlike the **legacyBold tag is not supported!!!!**  
>  object in the other .NET Framework data providers \(SQL Server, OLE DB, and ODBC\), <xref:System.Data.OracleClient.OracleConnection> does not support a <xref:System.Data.OracleClient.OracleConnection.ConnectionTimeout%2A> property. Setting a connection time\-out either as a property or in the connection string has no effect, and the value returned is always zero. <xref:System.Data.OracleClient.OracleConnection> also does not support a <xref:System.Data.OracleClient.OracleConnection.Database%2A> property or a <xref:System.Data.OracleClient.OracleConnection.ChangeDatabase%2A> method.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">データベース名が正しくありません。</exception>
        <exception cref="T:System.InvalidOperationException">接続が開かれていません。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">データベースを変更できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ClearAllPools">
      <MemberSignature Language="C#" Value="public static void ClearAllPools ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearAllPools() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.ClearAllPools" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>接続プールを空にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.OracleClient.OracleConnection.ClearAllPools%2A> resets \(or empties\) the connection pool. If connections are in use at the time of the call, they are marked appropriately and are discarded when <xref:System.Data.OracleClient.OracleConnection.Close%2A> is called on them.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearPool">
      <MemberSignature Language="C#" Value="public static void ClearPool (System.Data.OracleClient.OracleConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearPool(class System.Data.OracleClient.OracleConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.ClearPool(System.Data.OracleClient.OracleConnection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.OracleClient.OracleConnection" />
      </Parameters>
      <Docs>
        <param name="connection">
          <see cref="T:System.Data.OracleClient.OracleConnection" /> 、プールから削除します。</param>
        <summary>指定した接続に関連付けられている接続プールを空にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.OracleClient.OracleConnection.ClearPool%2A> メソッドが関連付けられている接続プールをクリア `connection`します。 追加の接続に関連付けられている場合 `connection` は呼び出し時に使用して、これらが適切にマークし、破棄されたときに <xref:System.Data.OracleClient.OracleConnection.Close%2A> に呼び出されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.Close" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>データベースへの接続を閉じます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.OracleClient.OracleConnection.Close%2A> メソッドが保留中のトランザクションをロールバックします。 接続プールに接続を解放し、または接続プールが無効になっている場合、接続を閉じます。  
  
 アプリケーションが呼び出すことができます <xref:System.Data.OracleClient.OracleConnection.Close%2A> 複数回、例外は生成されません。  
  
> [!NOTE]
>  .NET Framework Data Provider for Oracle を使用する場合は、プロバイダーは、これを自動的に管理するために接続がプールを有効にする必要はありません。  
  
> [!CAUTION]
>  呼び出す必要はありません <xref:System.Data.OracleClient.OracleConnection.Close%2A> 上、 <xref:System.Data.OracleClient.OracleConnection>, 、 <xref:System.Data.OracleClient.OracleDataReader>, 、またはその他のマネージ オブジェクトで、 `Finalize` クラスのメソッドです。 ファイナライザーでのみ、クラスが直接所有されているアンマネージ リソースを解放する必要があります。 クラスがアンマネージ リソースを所有していない場合は、クラス定義に `Finalize` メソッドを含めないでください。 詳細については、「[Garbage Collection](http://msdn.microsoft.com/ja-jp/22b6cb97-0c80-4eeb-a2cf-5ed7655e37f9)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectionString">
      <MemberSignature Language="C#" Value="public override string ConnectionString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConnectionString" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleConnection.ConnectionString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Oracle.Design.OracleConnectionStringEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または Oracle データベースを開くときに使用する文字列を設定します。</summary>
        <value>サーバー名などの設定を含む Oracle 接続文字列は、最初の接続を確立するために必要です。 既定値は、空の文字列 \(""\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.OracleClient.OracleConnection.ConnectionString%2A> 接続が閉じられたときにのみ設定できます。  
  
 使用することができます、 <xref:System.Data.OracleClient.OracleConnection.ConnectionString%2A> プロパティをデータベースに接続します。 次の例では、一般的な接続文字列を示します。  
  
```  
"Data Source=Oracle8i;Integrated Security=yes"  
```  
  
 対応する読み取り専用プロパティを持つ文字列で指定された設定の多く \(たとえば、 `Data Source=MyServer`, に対応する、 <xref:System.Data.OracleClient.OracleConnection.DataSource%2A> プロパティ\)。 接続文字列を設定すると、これらすべてのプロパティは、更新エラーが検出されると、プロパティのいずれも更新される場合に限り、されます。<xref:System.Data.OracleClient.OracleConnection> プロパティは、既定の設定またはで指定されたこれらの設定のみを返す、 <xref:System.Data.OracleClient.OracleConnection.ConnectionString%2A>です。  
  
 リセット、 <xref:System.Data.OracleClient.OracleConnection.ConnectionString%2A> 閉じた接続に対してすべての接続文字列の値 \(および関連するプロパティ\)、パスワードを含むをリセットします。  
  
 設定されている後すぐには、接続文字列を解析します。 解析明らかになった場合に構文、実行時に例外のエラーなど、 <xref:System.ArgumentException>, が生成されます。 開くには、接続試行時にのみ、その他のエラーを確認できます。  
  
 接続文字列の基本形式は、一連のキーワード\/値ペアをセミコロンで区切ってです。 それぞれのキーワードと値の関連付けには、等号 \(\=\) が使用されます。 セミコロン、単一引用符または二重引用符文字が含まれる値を含めるには、値を二重引用符で囲む必要があります。 セミコロンと二重引用符の両方が、値が含まれる場合は、単一引用符で囲まれた値を囲むことができます。 単一引用符も値が二重引用符文字で始まる場合に役立ちます。 逆に、値が単一引用符で開始する場合は、二重引用符を使用できます。 値に単一引用符と二重引用符の両方が含まれている場合値を囲む引用符は値以内に発生するたびに倍増する必要があります。  
  
 前または文字列値の末尾のスペースを含めるには、値を単一引用符または二重引用符で囲む必要があります。 引用符で囲んだ場合でも、整数、ブール型、列挙値の先頭または末尾の空白は無視されます。 ただし、文字列リテラルのキーワードや値内の空白文字は保持されます。 引用符文字は、値の最初と最後の文字をなどがない場合、区切り記号を使用せず、接続文字列内一重または二重引用符を使用ことがあります `Data Source= my'Server` または `Data Source= my"Server`です。  
  
 キーワードまたは値には等号 \(\=\) を含める、もう 1 つの等号 \(\=\) によって前する必要があります。 たとえば、仮想的な接続文字列で  
  
```  
"key==word=value"  
```  
  
 キーワードは"キーの単語を \="、値は"value"です。  
  
 接続文字列に複数回出現するキーワード\/値ペア内の特定のキーワードは、値セットで、最後に見つかった位置が使用されます。  
  
 キーワードは、大文字小文字を区別します。  
  
 次の表に、内の値の有効な名前、 <xref:System.Data.OracleClient.OracleConnection.ConnectionString%2A>です。  
  
|名前|既定値|説明|  
|--------|---------|--------|  
|Data Source<br /><br /> または<br /><br /> サーバー||接続先 oracle インスタンスの名前またはネットワーク アドレス。|  
|Integrated Security|' false'|かどうかにセキュリティで保護された接続をするかの接続です。<br /><br /> 認識できる値は `true` \(強く推奨\)、 `false`, 、`yes`, 、および `no`です。|  
|パスワード||ログオンする Oracle アカウントのパスワードです。 高レベルのセキュリティを維持するために強くお勧め統合セキュリティ キーワードを使用することです。|  
|Persist Security Info|' false'|設定すると `false` または `no` \(強く推奨\)、接続文字列の一部としては、接続が開いているか、開いているになった場合、パスワードなどのセキュリティ関連情報は返されません <xref:System.Data.OracleClient.OracleConnection.State%2A>します。 接続文字列をリセットすると、パスワードを含むすべての接続文字列の値がリセットされます。<br /><br /> 認識される値は `true`、`false`、`yes` および `no` です。|  
|Unicode|' false'|.NET Framework Data Provider for Oracle が UTF16 モードの API 呼び出しを使用するかどうかを指定します。 このキーワードは、Oracle9i クライアント ソフトウェアを使用する場合を除き無視されます。|  
|User ID||Oracle ログイン アカウントです。 高レベルのセキュリティを維持するために強くお勧め統合セキュリティ キーワードを使用することです。|  
  
 次の表に、接続プール内の値の有効な名前、 <xref:System.Data.OracleClient.OracleConnection.ConnectionString%2A>です。  
  
|名前|既定値|説明|  
|--------|---------|--------|  
|接続の有効期間|0|接続がプールに返された時点で、その接続の作成時刻と現在の時刻を比較し、その時間の長さ \(秒\) が `Connection Lifetime` で指定した値を超えている場合は、その接続が破棄されます。 これは、クラスター構成を採用している状況で、実行中のサーバーと、オンラインになったばかりのサーバーの間での、負荷を強制的に分散するのに便利です。<br /><br /> 値は 0 では、プールされた接続には、最大接続タイムアウトが発生します。|  
|Enlist|'true'|ときに `true` または `yes`, 、プーラーが、作成スレッドの現在のトランザクション コンテキストで接続を自動的に登録します。<br /><br /> 認識される値は `true`、`false`、`yes` および `no` です。|  
|Max Pool Size|100|プールに格納できる最大接続数。 設定、 `Max Pool Size` の値、 <xref:System.Data.OracleClient.OracleConnection.ConnectionString%2A> パフォーマンスに影響を与えることができます。 作成するし、積極的に 100 個の接続では複数使用増加しないように `Max Pool Size` アプリケーションの安定状態の接続の使用率に近似する値にします。|  
|Min Pool Size|0|プールで許可される接続の最小数。|  
|Pooling|'true'|ときに `true` または `yes`, 、 <xref:System.Data.OracleClient.OracleConnection> オブジェクト、適切なプールから取得されるか、必要に応じてが作成され、適切なプールに追加します。<br /><br /> 認識される値は `true`、`false`、`yes` および `no` です。|  
  
 キーワードまたは接続プールをブール値を必要とする値を設定する場合は、'true' ではなくと 'no' は 'false' ではなく 'yes' を使用できます。 整数値は、文字列として表されます。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Data.OracleClient.OracleConnection> し、接続文字列の一部のプロパティを設定します。  
  
 [!code-csharp[Classic WebData OracleConnection.DataSource\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OracleConnection.DataSource/CS/source.cs#1)]
 [!code-vb[Classic WebData OracleConnection.DataSource\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OracleConnection.DataSource/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectionTimeout">
      <MemberSignature Language="C#" Value="public override int ConnectionTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ConnectionTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleConnection.ConnectionTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>試行を終了し、エラーが発生する前に接続を確立するまで待機する時間を取得します。</summary>
        <value>接続が開くのを待機する時間 \(秒単位\)。 既定値は 15 秒です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 接続が待機する時間をタイムアウトに設定するにを使用して、 `Connect Timeout` または `Connection Timeout` 接続文字列のキーワードです。 値が 0 の制限がないことを示します。 およびでは避ける必要があります、 <xref:System.Data.OracleClient.OracleConnection.ConnectionString%2A> 接続の試行が無制限に待機するためです。  
  
> [!NOTE]
>  異なり、 `Connection` 、他の .NET Framework データ プロバイダー \(SQL Server、OLE DB および ODBC\) 内のオブジェクト <xref:System.Data.OracleClient.OracleConnection> はサポートしていません、 <xref:System.Data.OracleClient.OracleConnection.ConnectionTimeout%2A> プロパティです。 プロパティを持つ、または接続文字列では、接続タイムアウトの設定も何も起こりません、および返される値は常に 0 です。<xref:System.Data.OracleClient.OracleConnection> サポートされていません、 <xref:System.Data.OracleClient.OracleConnection.Database%2A> プロパティまたは <xref:System.Data.OracleClient.OracleConnection.ChangeDatabase%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定された値は、0 より小さい値です。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateCommand">
      <MemberSignature Language="C#" Value="public System.Data.OracleClient.OracleCommand CreateCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.OracleClient.OracleCommand CreateCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.CreateCommand" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>作成して返します、 <see cref="T:System.Data.OracleClient.OracleCommand" /> オブジェクトに関連付けられている、 <see cref="T:System.Data.OracleClient.OracleConnection" />です。</summary>
        <returns>
          <see cref="T:System.Data.OracleClient.OracleCommand" /> オブジェクト。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDbCommand">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbCommand CreateDbCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbCommand CreateDbCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.CreateDbCommand" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Database">
      <MemberSignature Language="C#" Value="public override string Database { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Database" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleConnection.Database" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のデータベース、または接続が開いてから使用するデータベースの名前を取得します。</summary>
        <value>現在のデータベース、または接続が開いてから使用するデータベースの名前。 既定値は空の文字列です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.OracleClient.OracleConnection.Database%2A> プロパティを動的に更新します。 SQL ステートメントを使用して、現在のデータベースを変更するかどうか、または <xref:System.Data.OracleClient.OracleConnection.ChangeDatabase%2A> メソッド、情報メッセージが送信され、プロパティが自動的に更新します。  
  
> [!NOTE]
>  異なり、 `Connection` 、他の .NET Framework データ プロバイダー \(SQL Server、OLE DB および ODBC\) 内のオブジェクト <xref:System.Data.OracleClient.OracleConnection> はサポートしていません、 <xref:System.Data.OracleClient.OracleConnection.ConnectionTimeout%2A> プロパティです。 プロパティを持つ、または接続文字列では、接続タイムアウトの設定も何も起こりません、および返される値は常に 0 です。<xref:System.Data.OracleClient.OracleConnection> サポートされていません、 <xref:System.Data.OracleClient.OracleConnection.Database%2A> プロパティまたは <xref:System.Data.OracleClient.OracleConnection.ChangeDatabase%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.OracleClient.OracleConnection.DataSource" />
      </Docs>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public override string DataSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataSource" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleConnection.DataSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>接続先 Oracle サーバーの名前を取得します。</summary>
        <value>接続先 Oracle サーバーの名前。 既定値は、空の文字列 \(""\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例を作成し、 <xref:System.Data.OracleClient.OracleConnection> し、一部の読み取り専用プロパティを表示します。  
  
 [!code-csharp[Classic WebData OracleConnection.DataSource\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OracleConnection.DataSource/CS/source.cs#1)]
 [!code-vb[Classic WebData OracleConnection.DataSource\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OracleConnection.DataSource/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.OracleClient.OracleConnection.ConnectionString" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnlistDistributedTransaction">
      <MemberSignature Language="C#" Value="public void EnlistDistributedTransaction (System.EnterpriseServices.ITransaction distributedTransaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnlistDistributedTransaction(class System.EnterpriseServices.ITransaction distributedTransaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="distributedTransaction" Type="System.EnterpriseServices.ITransaction" />
      </Parameters>
      <Docs>
        <param name="distributedTransaction">登録先の既存の <see cref="T:System.EnterpriseServices.ITransaction" /> への参照。</param>
        <summary>分散トランザクションとして指定したトランザクションに参加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 New in ADO.NET 2.0 is support for using the <xref:System.Data.Common.DbConnection.EnlistTransaction%2A> method to enlist in a distributed transaction. Because it enlists a connection in a <xref:System.Transactions.Transaction> instance, **legacyBold tag is not supported!!!!**  
 takes advantage of functionality available in the <xref:System.Transactions> namespace for managing distributed transactions, making it preferable to **legacyBold tag is not supported!!!!**  
 for this purpose. For more information, see [Performing a Distributed Transaction](http://msdn.microsoft.com/ja-jp/718b257c-bcb2-408e-b004-a7b0adb1c176).  
  
 You can continue to enlist in an existing distributed transaction using the  
  
 <xref:System.Data.OracleClient.OracleConnection.EnlistDistributedTransaction%2A> method if auto\-enlistment is disabled. Enlisting in an existing distributed transaction ensures that, if the transaction is committed or rolled back, modifications made by the code at the data source are also committed or rolled back.  
  
 <xref:System.Data.OracleClient.OracleConnection.EnlistDistributedTransaction%2A> returns an exception if the <xref:System.Data.OracleClient.OracleConnection> has already started a transaction using <xref:System.Data.OracleClient.OracleConnection.BeginTransaction%2A>. However, if the transaction is a local transaction started at the data source \(for example, by explicitly executing the BEGIN TRANSACTION statement using an <xref:System.Data.OracleClient.OracleCommand> object\), <xref:System.Data.OracleClient.OracleConnection.EnlistDistributedTransaction%2A> rolls back the local transaction and enlists in the existing distributed transaction as requested. You will not receive notice that the local transaction was rolled back, and are responsible for managing any local transactions not started using <xref:System.Data.OracleClient.OracleConnection.BeginTransaction%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnlistTransaction">
      <MemberSignature Language="C#" Value="public override void EnlistTransaction (System.Transactions.Transaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EnlistTransaction(class System.Transactions.Transaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.EnlistTransaction(System.Transactions.Transaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Transactions.Transaction" />
      </Parameters>
      <Docs>
        <param name="transaction">登録先の既存の <see cref="T:System.Transactions.Transaction" /> への参照。</param>
        <summary>分散トランザクションとして指定したトランザクションに参加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 New in ADO.NET 2.0 is support for using the  
  
 <xref:System.Data.Common.DbConnection.EnlistTransaction%2A> method to enlist in a distributed transaction. Because it enlists a connection in a <xref:System.Transactions.Transaction> instance, **EnlistTransaction** takes advantage of functionality available in the <xref:System.Transactions> namespace for managing distributed transactions, making it preferable to **EnlistDistributedTransaction**, which uses a **System.EnterpriseServices.ITransaction** object. It also has slightly different semantics: once a connection is explicitly enlisted on a transaction, it cannot be unenlisted or enlisted in another transaction until the first transaction finishes. For more information about distributed transactions, see [Performing a Distributed Transaction](http://msdn.microsoft.com/ja-jp/718b257c-bcb2-408e-b004-a7b0adb1c176).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable GetSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable GetSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.GetSchema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このデータ ソースのスキーマ情報を返す <see cref="T:System.Data.OracleClient.OracleConnection" />します。</summary>
        <returns>スキーマ情報を格納する <see cref="T:System.Data.DataTable" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable GetSchema (string collectionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable GetSchema(string collectionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.GetSchema(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="collectionName">返すスキーマの名前を指定します。</param>
        <summary>このデータ ソースのスキーマ情報を返す <see cref="T:System.Data.OracleClient.OracleConnection" /> スキーマ名として指定した文字列を使用します。</summary>
        <returns>スキーマ情報を格納する <see cref="T:System.Data.DataTable" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用してクエリ <xref:System.Data.OracleClient.OracleConnection.GetSchema%2A> は大文字小文字を区別します。 場合の処理と Oracle のため、スキーマが作成されると、この結果を引き起こす可能性予期しません。  
  
 スキーマは、引用符を使用しないで作成された場合`,` Oracle が大文字でオブジェクト名を格納します。 引用符を含むスキーマが作成されている場合、Oracle は、指定された大文字と小文字のオブジェクト名を格納します。  
  
 たとえば、次の 2 つのステートメントのいずれかを使用して、MyTable という名前のテーブルを作成するとします。  
  
 `CREATE TABLE MyTable ...`  
  
 `CREATE TABLE "MyTable" ...`  
  
 使用してこのテーブルの情報を取得する、 **GetSchema** に引数として"MYTABLE"を渡す必要は最初のケースでメソッドをします。 2 番目のケースでは、引数として"MyTable"を渡す必要があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="collectionName" /> は null として指定されます。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable GetSchema (string collectionName, string[] restrictionValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable GetSchema(string collectionName, string[] restrictionValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.GetSchema(System.String,System.String[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionName" Type="System.String" />
        <Parameter Name="restrictionValues" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="collectionName">返すスキーマの名前を指定します。</param>
        <param name="restrictionValues">要求したスキーマの制限値のセット。</param>
        <summary>このデータ ソースのスキーマ情報を返す <see cref="T:System.Data.OracleClient.OracleConnection" /> スキーマ名と制限値に指定した文字列の配列として指定した文字列を使用します。</summary>
        <returns>スキーマ情報を格納する <see cref="T:System.Data.DataTable" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `restrictionValues` パラメーターは、特定のコレクションの制限のコレクションによって指定される値の n 個の深さを指定できます。 指定された制限の値を設定して、他の制限値を設定しない、するためには、null に設定し、値を指定するには制限の適切な値を格納する、前述の制限を設定する必要があります。  
  
 この例は、"Tables"コレクションです。 "Tables"コレクションに 3 つの制限がある場合: データベース、所有者、およびテーブル名です。"Carl"の所有者に関連付けられているテーブルのみを取得する必要は \(少なくとも\) 次の値を指定する必要があります: null,"Carl"です。 制限値が渡されない場合に、既定値はその制限に使用します。 これは、これは、パラメーターの値に空の文字列を渡すこととは異なる null を渡すことと同じマッピングです。 その場合、空の文字列 \(""\) が指定されたパラメーターの値であると見なされます。  
  
 使用してクエリ <xref:System.Data.OracleClient.OracleConnection.GetSchema%2A> は大文字小文字を区別します。 場合の処理と Oracle のため、スキーマが作成されると、この結果を引き起こす可能性予期しません。  
  
 スキーマは、引用符を使用しないで作成された場合`,` Oracle が大文字でオブジェクト名を格納します。 引用符を含むスキーマが作成されている場合、Oracle は、指定された大文字と小文字のオブジェクト名を格納します。  
  
 たとえば、次の 2 つのステートメントのいずれかを使用して、MyTable という名前のテーブルを作成するとします。  
  
 `CREATE TABLE MyTable ...`  
  
 `CREATE TABLE "MyTable" ...`  
  
 使用してこのテーブルの情報を取得する、 **GetSchema** に引数として"MYTABLE"を渡す必要は最初のケースでメソッドをします。 2 番目のケースでは、引数として"MyTable"を渡す必要があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="collectionName" /> は null として指定されます。</exception>
      </Docs>
    </Member>
    <Member MemberName="InfoMessage">
      <MemberSignature Language="C#" Value="public event System.Data.OracleClient.OracleInfoMessageEventHandler InfoMessage;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.OracleClient.OracleInfoMessageEventHandler InfoMessage" />
      <MemberSignature Language="DocId" Value="E:System.Data.OracleClient.OracleConnection.InfoMessage" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleInfoMessageEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Oracle は、警告または情報メッセージを送信したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 データ プロバイダーが成功した場合に情報メッセージを受信するたびに、.NET Framework Data Provider for Oracle は、Oracle Call Interface \(OCI\) を使用するため、 <xref:System.Data.OracleClient.OracleConnection.InfoMessage> イベントが生成されます。 例には、構文エラーが含まれるストアド プロシージャを作成とします。 呼び出し、 <xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A> メソッドは成功します。 ただし、 <xref:System.Data.OracleClient.OracleConnection.InfoMessage> 構文エラーを通知するイベントが生成されます。  
  
 警告またはサーバーによって送信される情報のメッセージを処理しているクライアントを作成する必要があります、 <xref:System.Data.OracleClient.OracleInfoMessageEventHandler> このイベントを待機するデリゲート。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public override void Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Open() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.Open" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>指定されたプロパティの設定で、データベースへの接続を開き、 <see cref="P:System.Data.OracleClient.OracleConnection.ConnectionString" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.OracleClient.OracleConnection> がある場合、接続プールから開かれた接続を描画します。 それ以外の場合、データベースへの新しい接続を確立します。  
  
> [!NOTE]
>  場合、 <xref:System.Data.OracleClient.OracleConnection> がスコープ外になる、バッファプールの接続が自動的に閉じるされません。 そのため、明示的に閉じる必要があります、接続を呼び出して <xref:System.Data.OracleClient.OracleConnection.Close%2A>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">接続が開かれていません。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">データベースを変更できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ServerVersion">
      <MemberSignature Language="C#" Value="public override string ServerVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServerVersion" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleConnection.ServerVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クライアントが接続されているサーバーのバージョンを含む文字列を取得します。</summary>
        <value>接続されているサーバーのバージョン。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.OracleClient.OracleConnection.ServerVersion%2A> プロパティは、Oracle のバージョンの形式にします。 たとえば、Oracle8 リリースの形式は、フォームで文字列"8.1.7.0.0 Oracle8 8.1.7.0.0 \- 運用環境を解放します"。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Data.OracleClient.OracleConnection> し、一部の読み取り専用プロパティを表示します。  
  
 [!code-csharp[Classic WebData OracleConnection.ServerVersion\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OracleConnection.ServerVersion/CS/source.cs#1)]
 [!code-vb[Classic WebData OracleConnection.ServerVersion\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OracleConnection.ServerVersion/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">接続が閉じています。</exception>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public override System.Data.ConnectionState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.ConnectionState State" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleConnection.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.ConnectionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>接続の現在の状態を取得します。</summary>
        <value>
          <see cref="T:System.Data.ConnectionState" /> 値のビットごとの組み合わせ。 既定値は、<see langword="Closed" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 許可されている状態の変更は次のとおりです。  
  
-   `Closed` に `Open`, を使用して、 `Open` のメソッド、 <xref:System.Data.OracleClient.OracleConnection> オブジェクトです。  
  
-   `Open` に `Closed`, を使用して、 <xref:System.Data.OracleClient.OracleConnection.Close%2A> のメソッド、 <xref:System.Data.OracleClient.OracleConnection> オブジェクトです。  
  
   
  
## 例  
 次の例は、派生クラスのインスタンスを作成 <xref:System.Data.OracleClient.OracleConnection>, 、設定、 <xref:System.Data.IDbConnection.ConnectionString%2A>, 、し、表示、 <xref:System.Data.OracleClient.OracleConnection.State%2A>です。  
  
 [!code-csharp[Classic WebData OracleConnection.State\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OracleConnection.State/CS/source.cs#1)]
 [!code-vb[Classic WebData OracleConnection.State\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OracleConnection.State/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleConnection.System#ICloneable#Clone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のインスタンスのコピーである新しいオブジェクトを作成します。</summary>
        <returns>このインスタンスのコピーである新しいオブジェクト.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Data.OracleClient.OracleConnection> のインスタンスが <xref:System.ICloneable> インターフェイスにキャストされる場合にのみ、使用できます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginTransaction">
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>データベースでトランザクションを開始します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Data.OracleClient.OracleConnection" />の新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このデータ ソースのスキーマ情報を返す <see cref="T:System.Data.OracleClient.OracleConnection" />します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>