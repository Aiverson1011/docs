<Type Name="DispatcherSynchronizationContext" FullName="System.Windows.Threading.DispatcherSynchronizationContext">
  <TypeSignature Language="C#" Value="public sealed class DispatcherSynchronizationContext : System.Threading.SynchronizationContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DispatcherSynchronizationContext extends System.Threading.SynchronizationContext" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.DispatcherSynchronizationContext" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.SynchronizationContext</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>同期コンテキストを提供 Windows Presentation Foundation (WPF)します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Windows.Threading.Dispatcher> がの作成時に指定されていない、 <xref:System.Windows.Threading.DispatcherSynchronizationContext> インスタンス、現在 <xref:System.Windows.Threading.Dispatcher> に関連付けられている、 <xref:System.Windows.Threading.DispatcherSynchronizationContext>です。  
  
<a name="xamlTextUsage_DispatcherSynchronizationContext"></a>   
## XAML テキストの使用方法  
   
  
## 例  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherSynchronizationContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> クラスを現在 <see cref="T:System.Windows.Threading.Dispatcher" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherSynchronizationContext (System.Windows.Threading.Dispatcher dispatcher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Threading.Dispatcher dispatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor(System.Windows.Threading.Dispatcher)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dispatcher" Type="System.Windows.Threading.Dispatcher" />
      </Parameters>
      <Docs>
        <param name="dispatcher">
          <see cref="T:System.Windows.Threading.Dispatcher" /> 関連付ける <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> とします。</param>
        <summary>指定された <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> を使用して、<see cref="T:System.Windows.Threading.Dispatcher" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dispatcher" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherSynchronizationContext (System.Windows.Threading.Dispatcher dispatcher, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Threading.Dispatcher dispatcher, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor(System.Windows.Threading.Dispatcher,System.Windows.Threading.DispatcherPriority)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dispatcher" Type="System.Windows.Threading.Dispatcher" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="dispatcher">
          <see cref="T:System.Windows.Threading.Dispatcher" /> 関連付ける <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> とします。</param>
        <param name="priority">送信し、コールバック メソッドをポストするために使用する優先度です。</param>
        <summary>指定された <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> を使用して、<see cref="T:System.Windows.Threading.Dispatcher" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCopy">
      <MemberSignature Language="C#" Value="public override System.Threading.SynchronizationContext CreateCopy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.SynchronizationContext CreateCopy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherSynchronizationContext.CreateCopy" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このコピーを作成 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />します。</summary>
        <returns>この同期コンテキストのコピー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Post">
      <MemberSignature Language="C#" Value="public override void Post (System.Threading.SendOrPostCallback d, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Post(class System.Threading.SendOrPostCallback d, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d">呼び出されるデリゲート。</param>
        <param name="state">デリゲートに渡されたオブジェクト。</param>
        <summary>同期コンテキストでのコールバックを非同期的に呼び出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 デリゲートはキューに置か、ディスパッチャーの優先順位で <xref:System.Windows.Threading.DispatcherPriority.Normal>します。  
  
 <xref:System.Windows.Threading.DispatcherSynchronizationContext.Post%2A> メッセージを投稿する非同期要求を開始します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="d" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public override void Send (System.Threading.SendOrPostCallback d, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Send(class System.Threading.SendOrPostCallback d, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d">呼び出されるデリゲート。</param>
        <param name="state">デリゲートに渡されたオブジェクト。</param>
        <summary>同期コンテキストでのコールバックを同期的に呼び出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 デリゲートはキューに置か、ディスパッチャーの優先順位で <xref:System.Windows.Threading.DispatcherPriority.Normal>します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="d" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public override int Wait (IntPtr[] waitHandles, bool waitAll, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Wait(native int[] waitHandles, bool waitAll, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherSynchronizationContext.Wait(System.IntPtr[],System.Boolean,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.PrePrepareMethod</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.IntPtr[]" />
        <Parameter Name="waitAll" Type="System.Boolean" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="waitHandles">ネイティブのオペレーティング システム ハンドルを格納する配列。</param>
        <param name="waitAll">すべてのハンドルを待機する場合は <see langword="true" />。いずれかのハンドルを待機する場合は <see langword="false" />。</param>
        <param name="millisecondsTimeout">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> \(\-1\)。</param>
        <summary>指定した配列内のいずれかの要素またはすべての要素がシグナルを受信するまで待機します。</summary>
        <returns>待機を実行するオブジェクトの配列インデックス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>