<Type Name="Dispatcher" FullName="System.Windows.Threading.Dispatcher">
  <TypeSignature Language="C#" Value="public sealed class Dispatcher" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Dispatcher extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.Dispatcher" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>スレッドの作業項目のキューを管理するためのサービスを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Threading.Dispatcher> 特定のスレッドの作業項目の優先順位付けされたキューが保持されます。  
  
 ときに、 <xref:System.Windows.Threading.Dispatcher> が作成されるスレッドになるだけ <xref:System.Windows.Threading.Dispatcher> を関連付けることができる、スレッド場合でも、 <xref:System.Windows.Threading.Dispatcher> がシャット ダウンします。  
  
 取得しようとすると、 <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> 、現在のスレッドと <xref:System.Windows.Threading.Dispatcher> 、スレッドに関連付けられていない、 <xref:System.Windows.Threading.Dispatcher> が作成されます。 A <xref:System.Windows.Threading.Dispatcher> を作成する際にも作成、 <xref:System.Windows.Threading.DispatcherObject>です。 作成する場合、 <xref:System.Windows.Threading.Dispatcher> バック グラウンド スレッドでスレッドを終了する前に、ディスパッチャーをシャット ダウンすることを確認します。  
  
 場合、 <xref:System.Windows.Threading.Dispatcher> がシャット ダウン、再起動することはできません。  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], 、 <xref:System.Windows.Threading.DispatcherObject> によってのみアクセスできる、 <xref:System.Windows.Threading.Dispatcher> に関連付けられました。  たとえば、バック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button> と関連付けられている、 <xref:System.Windows.Threading.Dispatcher> で、 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] スレッドです。  バック グラウンド スレッドにアクセスするために、 <xref:System.Windows.Controls.ContentControl.Content%2A> のプロパティ、 <xref:System.Windows.Controls.Button>, 、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher> に関連付けられている、 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] スレッドです。  いずれかを使用してこの情報は <xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期的および <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。  キューに追加の操作では、 <xref:System.Windows.Threading.Dispatcher> 指定した <xref:System.Windows.Threading.DispatcherPriority>します。  
  
 場合 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> で呼び出される、 <xref:System.Windows.Threading.Dispatcher> をシャット ダウン、返されたの status プロパティ <xref:System.Windows.Threading.DispatcherOperation> に設定されている <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>します。  
  
 すべてのメソッドの <xref:System.Windows.Threading.Dispatcher>, 、例外として <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>, はフリー スレッドです。  
  
 派生したオブジェクト <xref:System.Windows.Threading.DispatcherObject> スレッド アフィニティがあります。  
  
 派生したオブジェクト <xref:System.Windows.Freezable> はフリー スレッドは、固定したとします。  詳細については、次を参照してください。 [Freezable オブジェクトの概要](http://msdn.microsoft.com/ja-jp/89c71692-4f43-4057-b611-67c6a8a863a2)します。  
  
   
  
## 例  
 次の例に、操作を配置する方法を示しています、 <xref:System.Windows.Threading.Dispatcher>です。  この例の完全なソース コードを参照してください。 [Single\-Threaded Application with Long\-Running Calculation Sample](http://go.microsoft.com/fwlink/?LinkID=160038)します。  
  
 最初に、デリゲート引数を受け取らないが作成されます。  
  
 [!code-csharp[ThreadingPrimeNumber\#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumber/CSharp/Window1.xaml.cs#threadingprimenumberinit)]
 [!code-vb[ThreadingPrimeNumber\#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumber/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]  
  
 次に、 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> が呼び出されます。  この呼び出しを <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> 2 つのパラメーター: に設定されている優先順位 <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=fullName>, 、およびデリゲートのインスタンスを通じてに渡されるコールバック `NextPrimeDelegate`します。  
  
 [!code-csharp[ThreadingPrimeNumber\#ThreadingPrimeNumberBeingInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumber/CSharp/Window1.xaml.cs#threadingprimenumberbeinginvoke)]
 [!code-vb[ThreadingPrimeNumber\#ThreadingPrimeNumberBeingInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumber/visualbasic/mainwindow.xaml.vb#threadingprimenumberbeinginvoke)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>スレッドでデリゲートを非同期的に実行、 <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられています。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], 、作成されたスレッドのみ、 <xref:System.Windows.Threading.DispatcherObject> そのオブジェクトにアクセスすることがあります。  たとえば、メイン UI スレッドからスピンオフ、バック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button> UI スレッド上に作成されました。  バック グラウンド スレッドの Content プロパティにアクセスするために、 <xref:System.Windows.Controls.Button>, 、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher> UI スレッドに関連付けられています。  いずれかを使用してこの情報は <xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。<xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期的および <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。  イベント キューに追加の操作では、 <xref:System.Windows.Threading.Dispatcher> 指定した <xref:System.Windows.Threading.DispatcherPriority>します。  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 非同期です。したがって、コントロールが呼び出された後、呼び出し元のオブジェクトをすぐに返されます。  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 返します、 <xref:System.Windows.Threading.DispatcherOperation> 、デリゲートは、キューでは、イベント、デリゲートとやり取りするために使用するオブジェクト。  
  
 <xref:System.Windows.Threading.DispatcherOperation> によって返されるオブジェクト <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> など、指定したデリゲートと対話するいくつかの方法で使用できます。  
  
-   変更する、 <xref:System.Windows.Threading.DispatcherPriority> デリゲートが保留中の実行のイベント キューです。  
  
-   デリゲートをイベント キューから削除しています。  
  
-   返すデリゲートの場合、待機しています。  
  
-   その後に、デリゲートが返された値を取得する機能が実行されます。  
  
 複数の <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 同時呼び出しが行われる <xref:System.Windows.Threading.DispatcherPriority>, の呼び出しが行われた順序で実行されます。  
  
 場合 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> で呼び出される、 <xref:System.Windows.Threading.Dispatcher> をシャット ダウン、返されたの status プロパティ <xref:System.Windows.Threading.DispatcherOperation> に設定されている <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">指定されたパラメーターを受け取るメソッドへのデリゲート <c>args</c>, にプッシュされますが、 <see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューです。</param>
        <param name="args">特定のメソッドに引数として渡すオブジェクトの配列。<see langword="null" /> の可能性があります。</param>
        <summary>スレッドで非同期的に指定された引数で指定したデリゲートを実行する、 <see cref="T:System.Windows.Threading.Dispatcher" /> に作成されました。</summary>
        <returns>後すぐに返されるオブジェクト <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> が呼び出されるデリゲートとやり取りしながら、それが保留中の実行、イベント キューを使用できます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Threading.DispatcherOperation> によって返されるオブジェクト <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> など、指定したデリゲートと対話するいくつかの方法で使用できます。  
  
-   変更する、 <xref:System.Windows.Threading.DispatcherPriority> デリゲートが保留中の実行のイベント キューです。  
  
-   デリゲートをイベント キューから削除しています。  
  
-   返すデリゲートの場合、待機しています。  
  
-   その後に、デリゲートが返された値を取得する機能が実行されます。  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 非同期です。したがって、コントロールが呼び出された後、呼び出し元のオブジェクトをすぐに返されます。  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], 、作成されたスレッドのみ、 <xref:System.Windows.Threading.DispatcherObject> そのオブジェクトにアクセスすることがあります。 たとえば、メイン UI スレッドからスピンオフ、バック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button> UI スレッド上に作成されました。 バック グラウンド スレッドの Content プロパティにアクセスするために、 <xref:System.Windows.Controls.Button>, 、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher> UI スレッドに関連付けられています。 いずれかを使用してこの情報は <xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。<xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期的および <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。 イベント キューに追加の操作では、 <xref:System.Windows.Threading.Dispatcher> 指定した <xref:System.Windows.Threading.DispatcherPriority>します。  
  
 場合 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> で呼び出される、 <xref:System.Windows.Threading.Dispatcher> をシャット ダウン、返されたの status プロパティ <xref:System.Windows.Threading.DispatcherOperation> に設定されている <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority">優先順位は、保留中の操作で、その他の基準とした、 <see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューでは、指定されたメソッドが呼び出されます。</param>
        <param name="method">メソッドへのデリゲートを引数を使用しないにプッシュされますが、 <see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューです。</param>
        <summary>スレッド上の指定した優先度で非同期的に指定されたデリゲートの実行、 <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられています。</summary>
        <returns>後すぐに返されるオブジェクト <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> が呼び出されるデリゲートとやり取りしながら、それが保留中の実行、イベント キューを使用できます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 複数の <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 同時呼び出しが行われる <xref:System.Windows.Threading.DispatcherPriority>, の呼び出しが行われた順序で実行されます。  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 返します、 <xref:System.Windows.Threading.DispatcherOperation> 、デリゲートは、キューでは、イベント、デリゲートとやり取りするために使用するオブジェクト。  
  
 <xref:System.Windows.Threading.DispatcherOperation> によって返されるオブジェクト <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> など、指定したデリゲートと対話するいくつかの方法で使用できます。  
  
-   変更する、 <xref:System.Windows.Threading.DispatcherPriority> デリゲートが保留中の実行のイベント キューです。  
  
-   デリゲートをイベント キューから削除しています。  
  
-   返すデリゲートの場合、待機しています。  
  
-   その後に、デリゲートが返された値を取得する機能が実行されます。  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 非同期です。したがって、コントロールが呼び出された後、呼び出し元のオブジェクトをすぐに返されます。  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], 、作成されたスレッドのみ、 <xref:System.Windows.Threading.DispatcherObject> そのオブジェクトにアクセスすることがあります。  たとえば、メイン UI スレッドからスピンオフ、バック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button> UI スレッド上に作成されました。  バック グラウンド スレッドの Content プロパティにアクセスするために、 <xref:System.Windows.Controls.Button>, 、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher> UI スレッドに関連付けられています。  いずれかを使用してこの情報は <xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。<xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期的および <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。  イベント キューに追加の操作では、 <xref:System.Windows.Threading.Dispatcher> 指定した <xref:System.Windows.Threading.DispatcherPriority>します。  
  
 場合 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> で呼び出される、 <xref:System.Windows.Threading.Dispatcher> をシャット ダウン、返されたの status プロパティ <xref:System.Windows.Threading.DispatcherOperation> に設定されている <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>します。  
  
   
  
## 例  
 次の例に、操作を配置する方法を示しています、 <xref:System.Windows.Threading.Dispatcher>です。  この例の完全なソース コードを参照してください。 [Single\-Threaded Application with Long\-Running Calculation Sample](http://go.microsoft.com/fwlink/?LinkID=160038)します。  
  
 最初に、デリゲート引数を受け取らないが作成されます。  
  
 [!code-csharp[ThreadingPrimeNumber\#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumber/CSharp/Window1.xaml.cs#threadingprimenumberinit)]
 [!code-vb[ThreadingPrimeNumber\#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumber/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]  
  
 次に、 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> が呼び出されます。  すべて <xref:System.Windows.Threading.DispatcherObject> を返すプロパティを持つ、 <xref:System.Windows.Threading.Dispatcher> 目的に関連付けられている <xref:System.Windows.Threading.Dispatcher> クエリを実行して取得した、 <xref:System.Windows.Threading.DispatcherObject>, 、ここでは、 <xref:System.Windows.Controls.Button> という名前 `startStopButton`します。   呼び出し <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> 2 つのパラメーター: に設定されている優先順位 <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=fullName>, 、およびデリゲートのインスタンスを通じてに渡されるコールバック `NextPrimeDelegate`します。  
  
 [!code-csharp[ThreadingPrimeNumber\#ThreadingPrimeNumberBeingInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumber/CSharp/Window1.xaml.cs#threadingprimenumberbeinginvoke)]
 [!code-vb[ThreadingPrimeNumber\#ThreadingPrimeNumberBeingInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumber/visualbasic/mainwindow.xaml.vb#threadingprimenumberbeinginvoke)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="method" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="priority" /> 無効な <see cref="T:System.Windows.Threading.DispatcherPriority" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">指定されたパラメーターを受け取るメソッドへのデリゲート <c>args</c>, にプッシュされますが、 <see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューです。</param>
        <param name="priority">優先順位は、保留中の操作で、その他の基準とした、 <see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューでは、指定されたメソッドが呼び出されます。</param>
        <param name="args">特定のメソッドに引数として渡すオブジェクトの配列。<see langword="null" /> の可能性があります。</param>
        <summary>スレッドで非同期で実行し、指定された優先順位で、指定された引数の指定したデリゲートを実行する、 <see cref="T:System.Windows.Threading.Dispatcher" /> に作成されました。</summary>
        <returns>後すぐに返されるオブジェクト <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> が呼び出されるデリゲートとやり取りしながら、それが保留中の実行、イベント キューを使用できます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Threading.DispatcherOperation> によって返されるオブジェクト <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> など、指定したデリゲートと対話するいくつかの方法で使用できます。  
  
-   変更する、 <xref:System.Windows.Threading.DispatcherPriority> デリゲートが保留中の実行のイベント キューです。  
  
-   デリゲートをイベント キューから削除しています。  
  
-   返すデリゲートの場合、待機しています。  
  
-   その後に、デリゲートが返された値を取得する機能が実行されます。  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 非同期です。したがって、コントロールが呼び出された後、呼び出し元のオブジェクトをすぐに返されます。  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], 、作成されたスレッドのみ、 <xref:System.Windows.Threading.DispatcherObject> そのオブジェクトにアクセスすることがあります。 たとえば、メイン UI スレッドからスピンオフ、バック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button> UI スレッド上に作成されました。 バック グラウンド スレッドの Content プロパティにアクセスするために、 <xref:System.Windows.Controls.Button>, 、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher> UI スレッドに関連付けられています。 いずれかを使用してこの情報は <xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。<xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期的および <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。 イベント キューに追加の操作では、 <xref:System.Windows.Threading.Dispatcher> 指定した <xref:System.Windows.Threading.DispatcherPriority>します。  
  
 場合 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> で呼び出される、 <xref:System.Windows.Threading.Dispatcher> をシャット ダウン、返されたの status プロパティ <xref:System.Windows.Threading.DispatcherOperation> に設定されている <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority">優先順位は、保留中の操作で、その他の基準とした、 <see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューでは、指定されたメソッドが呼び出されます。</param>
        <param name="method">1 つの引数にプッシュを受け取るメソッドへのデリゲート、 <see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューです。</param>
        <param name="arg">指定したメソッドに引数として渡すオブジェクト。</param>
        <summary>指定した優先度で非同期的に、指定された引数の指定したデリゲートをスレッドで実行、 <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられています。</summary>
        <returns>後すぐに返されるオブジェクト <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> が呼び出されるデリゲートとやり取りしながら、それが保留中の実行、イベント キューを使用できます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `Arg` できる `null` 引数は必要ない場合。  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 返します、 <xref:System.Windows.Threading.DispatcherOperation> 、デリゲートは、キューでは、イベント、デリゲートとやり取りするために使用するオブジェクト。  
  
 <xref:System.Windows.Threading.DispatcherOperation> によって返されるオブジェクト <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> など、指定したデリゲートと対話するいくつかの方法で使用できます。  
  
-   変更する、 <xref:System.Windows.Threading.DispatcherPriority> デリゲートが保留中の実行のイベント キューです。  
  
-   デリゲートをイベント キューから削除しています。  
  
-   返すデリゲートの場合、待機しています。  
  
-   その後に、デリゲートが返された値を取得する機能が実行されます。  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 非同期です。したがって、コントロールが呼び出された後、呼び出し元のオブジェクトをすぐに返されます。  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], 、作成されたスレッドのみ、 <xref:System.Windows.Threading.DispatcherObject> そのオブジェクトにアクセスすることがあります。  たとえば、メイン UI スレッドからスピンオフ、バック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button> UI スレッド上に作成されました。  バック グラウンド スレッドの content プロパティにアクセスするために、 <xref:System.Windows.Controls.Button>, 、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher> UI スレッドに関連付けられています。  いずれかを使用してこの情報は <xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。<xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期的および <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。  イベント キューに追加の操作では、 <xref:System.Windows.Threading.Dispatcher> 指定した <xref:System.Windows.Threading.DispatcherPriority>します。  
  
 複数の <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 同時呼び出しが行われる <xref:System.Windows.Threading.DispatcherPriority>, の呼び出しが行われた順序で実行されます。  
  
 場合 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> で呼び出される、 <xref:System.Windows.Threading.Dispatcher> をシャット ダウン、返されたの status プロパティ <xref:System.Windows.Threading.DispatcherOperation> に設定されている <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>します。  
  
   
  
## 例  
 次の例に、操作を配置する方法を示しています、 <xref:System.Windows.Threading.Dispatcher>です。  
  
 まず、この場合は、文字列の 1 つの引数がデリゲートを作成します。  
  
 [!code-csharp[ThreadingWeatherForecast\#ThreadingWeatherDelegates](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdelegates)]
 [!code-vb[ThreadingWeatherForecast\#ThreadingWeatherDelegates](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdelegates)]  
  
 次に、 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> が呼び出されます。  すべて <xref:System.Windows.Threading.DispatcherObject> を返すプロパティを持つ、 <xref:System.Windows.Threading.Dispatcher> 目的に関連付けられている <xref:System.Windows.Threading.Dispatcher> クエリを実行して取得した、 <xref:System.Windows.Threading.DispatcherObject>, 、ここでは、 <xref:System.Windows.Controls.Grid> という名前 `tomorrowsWeather`します。 呼び出し <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> 3 つのパラメーター: に設定されている優先順位 <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=fullName>;、コールバックは、デリゲートのインスタンスに渡されます `OneArgDelegate`; という名前の文字列と `weather`, 、コールバックの引数であります。  
  
 [!code-csharp[threadingweatherforecast\#ThreadingWeatherDispatcherOneArge](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdispatcheronearge)]
 [!code-vb[threadingweatherforecast\#ThreadingWeatherDispatcherOneArge](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdispatcheronearge)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="method" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="priority" /> 無効な <see cref="T:System.Windows.Threading.DispatcherPriority" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority">優先順位は、保留中の操作で、その他の基準とした、 <see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューでは、指定されたメソッドが呼び出されます。</param>
        <param name="method">メソッドへのデリゲートを受け取る複数の引数にプッシュされますが、 <see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューです。</param>
        <param name="arg">指定したメソッドに引数として渡すオブジェクト。</param>
        <param name="args">指定したメソッドに引数として渡すオブジェクトの配列。</param>
        <summary>指定した優先度で非同期的に、指定された引数の配列の指定したデリゲートをスレッドで実行、 <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられています。</summary>
        <returns>後すぐに返されるオブジェクト <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> が呼び出されるデリゲートとやり取りしながら、保留中の実行では使用できる、 <see cref="T:System.Windows.Threading.Dispatcher" /> キューです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `arg` パラメーターを指定できます `null` 引数は必要ない場合。  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 返します、 <xref:System.Windows.Threading.DispatcherOperation> 、デリゲートは、キューでは、イベント、デリゲートとやり取りするために使用するオブジェクト。  
  
 <xref:System.Windows.Threading.DispatcherOperation> によって返されるオブジェクト <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> など、指定したデリゲートと対話するいくつかの方法で使用できます。  
  
-   変更する、 <xref:System.Windows.Threading.DispatcherPriority> デリゲートが保留中の実行のイベント キューです。  
  
-   デリゲートをイベント キューから削除しています。  
  
-   返すデリゲートの場合、待機しています。  
  
-   その後に、デリゲートが返された値を取得する機能が実行されます。  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 非同期です。したがって、コントロールが呼び出された後、呼び出し元のオブジェクトをすぐに返されます。  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], 、作成されたスレッドのみ、 <xref:System.Windows.Threading.DispatcherObject> そのオブジェクトにアクセスすることがあります。  たとえば、メイン UI スレッドからスピンオフ、バック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button> UI スレッド上に作成されました。  バック グラウンド スレッドの Content プロパティにアクセスするために、 <xref:System.Windows.Controls.Button>, 、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher> UI スレッドに関連付けられています。  いずれかを使用してこの情報は <xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。<xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期的および <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。  イベント キューに追加の操作では、 <xref:System.Windows.Threading.Dispatcher> 指定した <xref:System.Windows.Threading.DispatcherPriority>します。  
  
 複数の <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 同時呼び出しが行われる <xref:System.Windows.Threading.DispatcherPriority>, の呼び出しが行われた順序で実行されます。  
  
 場合 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> で呼び出される、 <xref:System.Windows.Threading.Dispatcher> をシャット ダウン、返されたの status プロパティ <xref:System.Windows.Threading.DispatcherOperation> に設定されている <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="method" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <see cref="T:System.Windows.Threading.DispatcherPriority" /> 有効な優先度ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginInvokeShutdown">
      <MemberSignature Language="C#" Value="public void BeginInvokeShutdown (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginInvokeShutdown(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority">ディスパッチャーのシャット ダウンを開始位置を示す優先度です。</param>
        <summary>シャット ダウンを開始、 <see cref="T:System.Windows.Threading.Dispatcher" /> 非同期的にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A> 無制限の UI のアクセス許可を要求します。  
  
 ときに、 <xref:System.Windows.Threading.Dispatcher> をシャット ダウン、開始、 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> イベントが発生し、 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> に設定されている `true`します。  
  
 <xref:System.Windows.Threading.Dispatcher> シャット ダウンしない完全にイベント キューをアンワインドするまでです。  
  
 ディスパッチャーは、シャット ダウンが完了すると、 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> イベントが発生し、 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> にプロパティが設定されている `true`します。  
  
 シャット ダウン プロセスが開始されると、保留中のすべての作業キュー内の項目は中止されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for shutting down the dispatcher.  Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public bool CheckAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>呼び出し元のスレッドがこれに関連付けられているスレッドかどうかを判断 <see cref="T:System.Windows.Threading.Dispatcher" />します。</summary>
        <returns>
          <see langword="true" /> 呼び出し元のスレッドがこれに関連付けられたスレッド <see cref="T:System.Windows.Threading.Dispatcher" />。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 のみ、 <xref:System.Windows.Threading.Dispatcher> を <xref:System.Windows.Threading.DispatcherObject> が作成されるオブジェクトに \[アクセス可能性があります。  使用 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 別のスレッドからオブジェクトにアクセスします。  
  
 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 任意のスレッドから呼び出すことができます。  
  
 違い <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> と <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> は <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> へのアクセスを呼び出し元のスレッドがあるかどうかを示すブール値を返す、 <xref:System.Windows.Threading.Dispatcher> と <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 例外をスローします。  
  
   
  
## 例  
 次の例では使用 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> スレッドへのアクセスがあるかどうかを確認するのには <xref:System.Windows.Controls.Button>です。<xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> メソッドを <xref:System.Windows.Threading.Dispatcher> に関連付けられている、 <xref:System.Windows.Controls.Button> が呼び出され、スレッドへのアクセスを確認します。  呼び出し元のスレッドがアクセスできるよう、 <xref:System.Windows.Threading.Dispatcher>, 、 <xref:System.Windows.Controls.Button> のメンバーにアクセスして更新、 <xref:System.Windows.Controls.Button>、それ以外を受け入れ、代理人、 <xref:System.Windows.Controls.Button> に配置を引数として、 <xref:System.Windows.Threading.Dispatcher>です。<xref:System.Windows.Threading.Dispatcher> の更新の作業を委任、 <xref:System.Windows.Controls.Button>です。  
  
 [!code-csharp[DispatcherAccessSample\#DispatcherAccessCheckAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccesscheckaccess)]
 [!code-vb[DispatcherAccessSample\#DispatcherAccessCheckAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccesscheckaccess)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      </Docs>
    </Member>
    <Member MemberName="CurrentDispatcher">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher CurrentDispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Threading.Dispatcher CurrentDispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.CurrentDispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Windows.Threading.Dispatcher" /> 現在のスレッドを実行して、新たに作成 <see cref="T:System.Windows.Threading.Dispatcher" /> 、スレッドに関連付けられたいずれかがない場合。</summary>
        <value>現在のスレッドに関連付けられているディスパッチャー。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Windows.Threading.Dispatcher> が現在のスレッドに関連付けられていない新しい <xref:System.Windows.Threading.Dispatcher> が作成されます。  これは、<xref:System.Windows.Threading.Dispatcher.FromThread%2A> メソッドには該当しません。<xref:System.Windows.Threading.Dispatcher.FromThread%2A> 戻ります `null` 指定のスレッドに関連付けられているディスパッチャーがないかどうか。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableProcessing">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.DisableProcessing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherProcessingDisabled</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>処理を無効になります、 <see cref="T:System.Windows.Threading.Dispatcher" /> キューです。</summary>
        <returns>ディスパッチャーの処理を有効にする構造体。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ディスパッチャーの処理を無効にすることは、関連性のない再入の可能性を排除するためのものでは、高度な方法です。  
  
 処理を無効にすることによる影響は次のとおりです。  
  
-   [!INCLUDE[TLA2#tla_clr#initcap](~/includes/tla2sharptla-clrsharpinitcap-md.md)] ロックはないメッセージをポンプを内部的にします。  
  
-   <xref:System.Windows.Threading.DispatcherFrame> オブジェクトをプッシュするのには使用できません。  
  
-   メッセージの処理を指定することはできません。  
  
 <xref:System.Windows.Threading.DispatcherProcessingDisabled> 構造体 <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> を返しますが呼び出されるとは、ディスパッチャーの処理を再度有効に使用できます。  呼び出す <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> 上、 <xref:System.Windows.Threading.DispatcherProcessingDisabled> 構造再処理を有効にします。  
  
 <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> スレッドでのみ呼び出すことができます、 <xref:System.Windows.Threading.Dispatcher> に関連付けられています。  
  
   
  
## 例  
 次の例では、ディスパッチャーの処理を無効にして、ディスパッチャーの処理を再度有効にする方法を示します。<xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> 呼び出される、 **を使用して** ステートメントです。<xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> 返します、 <xref:System.Windows.Threading.DispatcherProcessingDisabled> に破棄されたときに、オブジェクトとして使用されている構造、 **を使用して** ブロックが完了するとします。<xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> で呼び出される、 <xref:System.Windows.Threading.DispatcherProcessingDisabled> 構造体、ディスパッチャーの処理を再度有効にします。  
  
 [!code-csharp[DispatcherSnippets\#DispatcherDisableProcessing](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdisableprocessing)]
 [!code-vb[DispatcherSnippets\#DispatcherDisableProcessing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdisableprocessing)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitAllFrames">
      <MemberSignature Language="C#" Value="public static void ExitAllFrames ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExitAllFrames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>入れ子になったフレームを含むすべてのフレームを閉じるように要求します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for calling this method. Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
        <altmember cref="T:System.Windows.Threading.DispatcherFrame" />
      </Docs>
    </Member>
    <Member MemberName="FromThread">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher FromThread (System.Threading.Thread thread);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Threading.Dispatcher FromThread(class System.Threading.Thread thread) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thread" Type="System.Threading.Thread" />
      </Parameters>
      <Docs>
        <param name="thread">取得するスレッド、 <see cref="T:System.Windows.Threading.Dispatcher" /> からです。</param>
        <summary>取得、 <see cref="T:System.Windows.Threading.Dispatcher" /> 指定のスレッドにします。</summary>
        <returns>ディスパッチャー <paramref name="thread" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ディスパッチャーが指定したスレッドでは、使用できない場合 `null` が返されます。  
  
 <xref:System.Windows.Threading.Dispatcher.FromThread%2A> 作成されません、 <xref:System.Windows.Threading.Dispatcher> がないスレッドで、 <xref:System.Windows.Threading.Dispatcher>です。   新しい <xref:System.Windows.Threading.Dispatcher> ないスレッドで作成された、 <xref:System.Windows.Threading.Dispatcher> を取得する際、 <xref:System.Windows.Threading.Dispatcher> を使用して、 <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> プロパティです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownFinished">
      <MemberSignature Language="C#" Value="public bool HasShutdownFinished { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownFinished" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>決定するかどうか、 <see cref="T:System.Windows.Threading.Dispatcher" /> シャット ダウンが完了します。</summary>
        <value>
          <see langword="true" /> ディスパッチャーがシャット ダウンを完了している場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、 <xref:System.Windows.Threading.Dispatcher> をシャット ダウン、開始、 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> イベントが発生し、 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> に設定されている `true`します。  
  
 <xref:System.Windows.Threading.Dispatcher> イベント キューがアンワインドされるまで完全にシャット ダウンできませんをしません。  
  
 ディスパッチャーは、シャット ダウンが完了すると、 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> イベントが発生し、 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> にプロパティが設定されている `true`します。  
  
 シャット ダウン プロセスが開始されると、保留中のすべての作業キュー内の項目は中止されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownStarted">
      <MemberSignature Language="C#" Value="public bool HasShutdownStarted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownStarted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>決定するかどうか、 <see cref="T:System.Windows.Threading.Dispatcher" /> がシャット ダウンします。</summary>
        <value>
          <see langword="true" /> 場合、 <see cref="T:System.Windows.Threading.Dispatcher" /> のシャット ダウン以外の場合が開始 <see langword="false" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、 <xref:System.Windows.Threading.Dispatcher> をシャット ダウン、開始、 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> イベントが発生し、 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> に設定されている `true`します。  
  
 <xref:System.Windows.Threading.Dispatcher> シャット ダウンしない完全にイベント キューをアンワインドするまでです。  
  
 ディスパッチャーは、シャット ダウンが完了すると、 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> イベントが発生し、 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> にプロパティが設定されている `true`します。  
  
 シャット ダウン プロセスが開始されると、保留中のすべての作業キュー内の項目は中止されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hooks">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherHooks Hooks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.DispatcherHooks Hooks" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Hooks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherHooks</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>に関する追加のイベント情報を提供するフックのコレクションを取得、 <see cref="T:System.Windows.Threading.Dispatcher" />です。</summary>
        <value>これに関連付けられているフック <see cref="T:System.Windows.Threading.Dispatcher" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Threading.DispatcherHooks> クラスに関する追加のイベント情報を提供する、 <xref:System.Windows.Threading.Dispatcher>, 、日時など、 <xref:System.Windows.Threading.Dispatcher> がアクティブでないか、操作が完了しました。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for getting this property.  Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したデリゲートをスレッドで同期的に実行、 <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられています。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], 、作成されたスレッドのみ、 <xref:System.Windows.Threading.DispatcherObject> そのオブジェクトにアクセスすることがあります。  たとえば、メイン UI スレッドからスピンオフ、バック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button> UI スレッド上に作成されました。  バック グラウンド スレッドの Content プロパティにアクセスするために、 <xref:System.Windows.Controls.Button>, 、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher> UI スレッドに関連付けられています。  いずれかを使用してこの情報は <xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。<xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期的および <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。  イベント キューに追加の操作では、 <xref:System.Windows.Threading.Dispatcher> 指定した <xref:System.Windows.Threading.DispatcherPriority>します。  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。  
  
   
  
## 例  
 次の例にデリゲートを格納する、 <xref:System.Windows.Threading.Dispatcher> で <xref:System.Windows.Threading.DispatcherPriority.Normal> を使用して <xref:System.Windows.Threading.Dispatcher.Invoke%2A>します。  
  
 [!code-csharp[invalidaterequerywithsystemtimer\#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer\#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="callback">ディスパッチャーを介したを呼び出すデリゲート。</param>
        <summary>指定した実行 <see cref="T:System.Action" /> スレッドで同期的に、 <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられています。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="callback">ディスパッチャーを介したを呼び出すデリゲート。</param>
        <param name="priority">相対的な保留中の操作でどのような順序で指定されたコールバックが呼び出されるを決定する優先度、 <see cref="T:System.Windows.Threading.Dispatcher" />です。</param>
        <summary>指定した実行 <see cref="T:System.Action" /> スレッドで指定された優先順位で同期的に、 <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられています。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">指定されたパラメーターを受け取るメソッドへのデリゲート <c>args</c>, にプッシュされますが、 <see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューです。</param>
        <param name="args">特定のメソッドに引数として渡すオブジェクトの配列。<see langword="null" /> の可能性があります。</param>
        <summary>スレッドで同期的に指定された引数で指定したデリゲートを実行、 <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられています。</summary>
        <returns>呼び出されるデリゲートからの戻り値または <see langword="null" /> デリゲートに戻り値があるない場合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], 、作成されたスレッドのみ、 <xref:System.Windows.Threading.DispatcherObject> そのオブジェクトにアクセスすることがあります。 たとえば、メイン UI スレッドからスピンオフ、バック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button> UI スレッド上に作成されました。 バック グラウンド スレッドの Content プロパティにアクセスするために、 <xref:System.Windows.Controls.Button>, 、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher> UI スレッドに関連付けられています。 いずれかを使用してこの情報は <xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。<xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期的および <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。 イベント キューに追加の操作では、 <xref:System.Windows.Threading.Dispatcher> 指定した <xref:System.Windows.Threading.DispatcherPriority>します。  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority">優先順位は、保留中の操作で、その他の基準とした、 <see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューでは、指定されたメソッドが呼び出されます。</param>
        <param name="method">メソッドへのデリゲートを引数を使用しないにプッシュされますが、 <see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューです。</param>
        <summary>指定した優先度で同期的に指定したデリゲートをスレッド上で実行、 <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられています。</summary>
        <returns>呼び出されるデリゲートからの戻り値または <see langword="null" /> デリゲートに戻り値があるない場合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], 、作成されたスレッドのみ、 <xref:System.Windows.Threading.DispatcherObject> そのオブジェクトにアクセスすることがあります。  たとえば、メイン UI スレッドからスピンオフ、バック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button> UI スレッド上に作成されました。  バック グラウンド スレッドの Content プロパティにアクセスするために、 <xref:System.Windows.Controls.Button>, 、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher> UI スレッドに関連付けられています。  いずれかを使用してこの情報は <xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。<xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期的および <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。  イベント キューに追加の操作では、 <xref:System.Windows.Threading.Dispatcher> 指定した <xref:System.Windows.Threading.DispatcherPriority>します。  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。  
  
   
  
## 例  
 次の例にデリゲートを格納する、 <xref:System.Windows.Threading.Dispatcher> で <xref:System.Windows.Threading.DispatcherPriority.Normal> を使用して <xref:System.Windows.Threading.Dispatcher.Invoke%2A>します。  
  
 [!code-csharp[invalidaterequerywithsystemtimer\#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer\#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="priority" /> と <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" /> が等価です。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="priority" /> 有効な優先度ではありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="method" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="callback">ディスパッチャーを介したを呼び出すデリゲート。</param>
        <param name="priority">相対的な保留中の操作でどのような順序で指定されたコールバックが呼び出されるを決定する優先度、 <see cref="T:System.Windows.Threading.Dispatcher" />です。</param>
        <param name="cancellationToken">操作をキャンセルするかどうかを示すオブジェクト。</param>
        <summary>指定した実行 <see cref="T:System.Action" /> スレッドで指定された優先順位で同期的に、 <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられています。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">指定されたパラメーターを受け取るメソッドへのデリゲート <c>args</c>, にプッシュされますが、 <see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューです。</param>
        <param name="timeout">操作が完了するまでの最大待機時間。</param>
        <param name="args">特定のメソッドに引数として渡すオブジェクトの配列。<see langword="null" /> の可能性があります。</param>
        <summary>スレッドで同期的に指定された引数で指定した優先度で指定のタイム スパン内で指定したデリゲートを実行、 <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられています。</summary>
        <returns>呼び出されるデリゲートからの戻り値または <see langword="null" /> デリゲートに戻り値があるない場合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], 、作成されたスレッドのみ、 <xref:System.Windows.Threading.DispatcherObject> そのオブジェクトにアクセスすることがあります。 たとえば、メイン UI スレッドからスピンオフ、バック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button> UI スレッド上に作成されました。 バック グラウンド スレッドの Content プロパティにアクセスするために、 <xref:System.Windows.Controls.Button>, 、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher> UI スレッドに関連付けられています。 いずれかを使用してこの情報は <xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。<xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期的および <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。 イベント キューに追加の操作では、 <xref:System.Windows.Threading.Dispatcher> 指定した <xref:System.Windows.Threading.DispatcherPriority>します。  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">指定されたパラメーターを受け取るメソッドへのデリゲート <c>args</c>, にプッシュされますが、 <see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューです。</param>
        <param name="priority">優先順位は、保留中の操作で、その他の基準とした、 <see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューでは、指定されたメソッドが呼び出されます。</param>
        <param name="args">特定のメソッドに引数として渡すオブジェクトの配列。<see langword="null" /> の可能性があります。</param>
        <summary>スレッドで同期的に指定された引数で指定した優先度で指定したデリゲートを実行、 <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられています。</summary>
        <returns>呼び出されるデリゲートからの戻り値または <see langword="null" /> デリゲートに戻り値があるない場合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], 、作成されたスレッドのみ、 <xref:System.Windows.Threading.DispatcherObject> そのオブジェクトにアクセスすることがあります。 たとえば、メイン UI スレッドからスピンオフ、バック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button> UI スレッド上に作成されました。 バック グラウンド スレッドの Content プロパティにアクセスするために、 <xref:System.Windows.Controls.Button>, 、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher> UI スレッドに関連付けられています。 いずれかを使用してこの情報は <xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。<xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期的および <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。 イベント キューに追加の操作では、 <xref:System.Windows.Threading.Dispatcher> 指定した <xref:System.Windows.Threading.DispatcherPriority>します。  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority">優先順位は、保留中の操作で、その他の基準とした、 <see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューでは、指定されたメソッドが呼び出されます。</param>
        <param name="method">1 つの引数にプッシュを受け取るメソッドへのデリゲート、 <see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューです。</param>
        <param name="arg">特定のメソッドに引数として渡すオブジェクト。</param>
        <summary>スレッドで同期的に指定された引数で指定した優先度で指定したデリゲートを実行、 <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられています。</summary>
        <returns>呼び出されるデリゲートからの戻り値または <see langword="null" /> デリゲートに戻り値があるない場合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `Arg` できる `null` 引数が必要でない場合  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], 、作成されたスレッドのみ、 <xref:System.Windows.Threading.DispatcherObject> そのオブジェクトにアクセスすることがあります。  たとえば、メイン UI スレッドからスピンオフ、バック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button> UI スレッド上に作成されました。  バック グラウンド スレッドの Content プロパティにアクセスするために、 <xref:System.Windows.Controls.Button>, 、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher> UI スレッドに関連付けられています。  いずれかを使用してこの情報は <xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。<xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期的および <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。  イベント キューに追加の操作では、 <xref:System.Windows.Threading.Dispatcher> 指定した <xref:System.Windows.Threading.DispatcherPriority>します。  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="priority" /> と <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" /> が等価です。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="priority" /> 有効な優先度ではありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="method" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority">優先順位は、保留中の操作で、その他の基準とした、 <see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューでは、指定されたメソッドが呼び出されます。</param>
        <param name="timeout">操作が終了するまで待機する最大時間。</param>
        <param name="method">メソッドへのデリゲートを引数を使用しないにプッシュされますが、 <see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューです。</param>
        <summary>スレッドで指定した優先度に同期的に指定されたタイムアウト値で、指定したデリゲートを実行、 <see cref="T:System.Windows.Threading.Dispatcher" /> が作成されました。</summary>
        <returns>呼び出されるデリゲートからの戻り値または <see langword="null" /> デリゲートに戻り値があるない場合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], 、作成されたスレッドのみ、 <xref:System.Windows.Threading.DispatcherObject> そのオブジェクトにアクセスすることがあります。  たとえば、メイン UI スレッドからスピンオフ、バック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button> UI スレッド上に作成されました。  バック グラウンド スレッドの Content プロパティにアクセスするために、 <xref:System.Windows.Controls.Button>, 、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher> UI スレッドに関連付けられています。  いずれかを使用してこの情報は <xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。<xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期的および <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。  イベント キューに追加の操作では、 <xref:System.Windows.Threading.Dispatcher> 指定した <xref:System.Windows.Threading.DispatcherPriority>します。  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="callback">ディスパッチャーを介したを呼び出すデリゲート。</param>
        <param name="priority">相対的な保留中の操作でどのような順序で指定されたコールバックが呼び出されるを決定する優先度、 <see cref="T:System.Windows.Threading.Dispatcher" />です。</param>
        <param name="cancellationToken">操作をキャンセルするかどうかを示すオブジェクト。</param>
        <param name="timeout">開始する操作を待機する時間の最小量。</param>
        <summary>指定した実行 <see cref="T:System.Action" /> スレッドで指定された優先順位で同期的に、 <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられています。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, System.Windows.Threading.DispatcherPriority priority, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">指定されたパラメーターを受け取るメソッドへのデリゲート <c>args</c>, にプッシュされますが、 <see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューです。</param>
        <param name="timeout">操作が完了するまでの最大待機時間。</param>
        <param name="priority">優先順位は、保留中の操作で、その他の基準とした、 <see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューでは、指定されたメソッドが呼び出されます。</param>
        <param name="args">特定のメソッドに引数として渡すオブジェクトの配列。<see langword="null" /> の可能性があります。</param>
        <summary>スレッドで同期的に指定された引数で指定した優先度で指定のタイム スパン内で指定したデリゲートを実行、 <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられています。</summary>
        <returns>呼び出されるデリゲートからの戻り値または <see langword="null" /> デリゲートに戻り値があるない場合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], 、作成されたスレッドのみ、 <xref:System.Windows.Threading.DispatcherObject> そのオブジェクトにアクセスすることがあります。 たとえば、メイン UI スレッドからスピンオフ、バック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button> UI スレッド上に作成されました。 バック グラウンド スレッドの Content プロパティにアクセスするために、 <xref:System.Windows.Controls.Button>, 、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher> UI スレッドに関連付けられています。 いずれかを使用してこの情報は <xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。<xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期的および <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。 イベント キューに追加の操作では、 <xref:System.Windows.Threading.Dispatcher> 指定した <xref:System.Windows.Threading.DispatcherPriority>します。  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority">優先順位は、保留中の操作で、その他の基準とした、 <see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューでは、指定されたメソッドが呼び出されます。</param>
        <param name="method">メソッドへのデリゲートを受け取る複数の引数にプッシュされますが、 <see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューです。</param>
        <param name="arg">特定のメソッドに引数として渡すオブジェクト。</param>
        <param name="args">特定のメソッドに引数として渡すオブジェクトの配列。</param>
        <summary>スレッドで同期的に指定された引数で指定した優先度で指定したデリゲートを実行、 <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられています。</summary>
        <returns>呼び出されるデリゲートからの戻り値または <see langword="null" /> デリゲートに戻り値があるない場合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `Arg` できる `null` 引数が必要でない場合  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], 、作成されたスレッドのみ、 <xref:System.Windows.Threading.DispatcherObject> そのオブジェクトにアクセスすることがあります。  たとえば、メイン UI スレッドからスピンオフ、バック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button> UI スレッド上に作成されました。  バック グラウンド スレッドの Content プロパティにアクセスするために、 <xref:System.Windows.Controls.Button>, 、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher> UI スレッドに関連付けられています。  いずれかを使用してこの情報は <xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。<xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期的および <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。  イベント キューに追加の操作では、 <xref:System.Windows.Threading.Dispatcher> 指定した <xref:System.Windows.Threading.DispatcherPriority>します。  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="priority" /> と <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" /> が等価です。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="priority" /> 有効な優先度ではありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="method" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority">優先順位は、保留中の操作で、その他の基準とした、 <see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューでは、指定されたメソッドが呼び出されます。</param>
        <param name="timeout">操作が終了するまで待機する最大時間。</param>
        <param name="method">メソッドへのデリゲートを受け取る複数の引数にプッシュされますが、 <see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューです。</param>
        <param name="arg">特定のメソッドに引数として渡すオブジェクト。 引数が必要ない場合は、<see langword="null" /> を指定できます。</param>
        <summary>スレッドで同期的に指定された引数で指定した優先度で指定したデリゲートを実行、 <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられています。</summary>
        <returns>呼び出されるデリゲートからの戻り値または <see langword="null" /> デリゲートに戻り値があるない場合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `Arg` できる `null` 引数が必要でない場合  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], 、作成されたスレッドのみ、 <xref:System.Windows.Threading.DispatcherObject> そのオブジェクトにアクセスすることがあります。  たとえば、メイン UI スレッドからスピンオフ、バック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button> UI スレッド上に作成されました。  バック グラウンド スレッドの Content プロパティにアクセスするために、 <xref:System.Windows.Controls.Button>, 、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher> UI スレッドに関連付けられています。  いずれかを使用してこの情報は <xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。<xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期的および <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。  イベント キューに追加の操作では、 <xref:System.Windows.Threading.Dispatcher> 指定した <xref:System.Windows.Threading.DispatcherPriority>します。  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="priority" /> と <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" /> が等価です。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="priority" /> 有効な優先度ではありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="method" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority">優先順位は、保留中の操作で、その他の基準とした、 <see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューでは、指定されたメソッドが呼び出されます。</param>
        <param name="timeout">操作が終了するまで待機する最大時間。</param>
        <param name="method">メソッドへのデリゲートを受け取る複数の引数にプッシュされますが、 <see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューです。</param>
        <param name="arg">指定したメソッドに引数として渡すオブジェクト。</param>
        <param name="args">指定したメソッドに引数として渡すオブジェクトの配列。</param>
        <summary>スレッドで同期的に指定された引数で指定した優先度で指定したデリゲートを実行、 <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられています。</summary>
        <returns>呼び出されるデリゲートからの戻り値または <see langword="null" /> デリゲートに戻り値があるない場合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `Arg` できる `null` 引数が不要な場合です。  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], 、作成されたスレッドのみ、 <xref:System.Windows.Threading.DispatcherObject> そのオブジェクトにアクセスすることがあります。  たとえば、メイン UI スレッドからスピンオフ、バック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button> UI スレッド上に作成されました。  バック グラウンド スレッドの Content プロパティにアクセスするために、 <xref:System.Windows.Controls.Button>, 、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher> UI スレッドに関連付けられています。  いずれかを使用してこの情報は <xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>です。<xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期的および <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。  イベント キューに追加の操作では、 <xref:System.Windows.Threading.Dispatcher> 指定した <xref:System.Windows.Threading.DispatcherPriority>します。  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="priority" /> と <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" /> が等価です。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="priority" /> は有効な <see cref="T:System.Windows.Threading.DispatcherPriority" /> ではありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="method" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">指定したデリゲートの戻り値の型。</typeparam>
        <param name="callback">ディスパッチャーを介したを呼び出すデリゲート。</param>
        <summary>指定した実行 <see cref="T:System.Func`1" /> スレッドで同期的に、 <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられています。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 によって返される値 `callback`です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">指定したデリゲートの戻り値の型。</typeparam>
        <param name="callback">ディスパッチャーを介したを呼び出すデリゲート。</param>
        <param name="priority">相対的な保留中の操作でどのような順序で指定されたコールバックが呼び出されるを決定する優先度、 <see cref="T:System.Windows.Threading.Dispatcher" />です。</param>
        <summary>指定した実行 <see cref="T:System.Func`1" /> スレッドで指定された優先順位で同期的に、 <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられています。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 によって返される値 `callback`です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">指定したデリゲートの戻り値の型。</typeparam>
        <param name="callback">ディスパッチャーを介したを呼び出すデリゲート。</param>
        <param name="priority">相対的な保留中の操作でどのような順序で指定されたコールバックが呼び出されるを決定する優先度、 <see cref="T:System.Windows.Threading.Dispatcher" />です。</param>
        <param name="cancellationToken">操作をキャンセルするかどうかを示すオブジェクト。</param>
        <summary>指定した実行 <see cref="T:System.Func`1" /> スレッドで指定された優先順位で同期的に、 <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられています。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 によって返される値 `callback`です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">指定したデリゲートの戻り値の型。</typeparam>
        <param name="callback">ディスパッチャーを介したを呼び出すデリゲート。</param>
        <param name="priority">相対的な保留中の操作でどのような順序で指定されたコールバックが呼び出されるを決定する優先度、 <see cref="T:System.Windows.Threading.Dispatcher" />です。</param>
        <param name="cancellationToken">操作をキャンセルするかどうかを示すオブジェクト。</param>
        <param name="timeout">開始する操作を待機する時間の最小量。</param>
        <summary>指定した実行 <see cref="T:System.Func`1" /> スレッドで指定された優先順位で同期的に、 <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられています。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 によって返される値 `callback`です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="callback">ディスパッチャーを介したを呼び出すデリゲート。</param>
        <summary>指定した実行 <see cref="T:System.Action" /> スレッドで非同期的に、 <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられています。</summary>
        <returns>後すぐに返されるオブジェクト <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" /> が呼び出されるデリゲートとやり取りしながら、それが保留中の実行、イベント キューを使用できます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="callback">ディスパッチャーを介したを呼び出すデリゲート。</param>
        <param name="priority">相対的な保留中の操作でどのような順序で指定されたコールバックが呼び出されるを決定する優先度、 <see cref="T:System.Windows.Threading.Dispatcher" />です。</param>
        <summary>指定した実行 <see cref="T:System.Action" /> スレッドで指定した優先度で非同期的に、 <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられています。</summary>
        <returns>後すぐに返されるオブジェクト <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" /> が呼び出されるデリゲートとやり取りしながら、それが保留中の実行、イベント キューを使用できます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="callback">ディスパッチャーを介したを呼び出すデリゲート。</param>
        <param name="priority">相対的な保留中の操作でどのような順序で指定されたコールバックが呼び出されるを決定する優先度、 <see cref="T:System.Windows.Threading.Dispatcher" />です。</param>
        <param name="cancellationToken">操作をキャンセルするかどうかを示すオブジェクト。</param>
        <summary>指定した実行 <see cref="T:System.Action" /> スレッドで指定した優先度で非同期的に、 <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられています。</summary>
        <returns>後すぐに返されるオブジェクト <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> が呼び出されるデリゲートとやり取りしながら、それが保留中の実行、イベント キューを使用できます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">指定したデリゲートの戻り値の型。</typeparam>
        <param name="callback">ディスパッチャーを介したを呼び出すデリゲート。</param>
        <summary>指定した実行 <see cref="T:System.Func`1" /> スレッドで非同期的に、 <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられています。</summary>
        <returns>後すぐに返されるオブジェクト <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" /> が呼び出されるデリゲートとやり取りしながら、それが保留中の実行、イベント キューを使用できます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">指定したデリゲートの戻り値の型。</typeparam>
        <param name="callback">ディスパッチャーを介したを呼び出すデリゲート。</param>
        <param name="priority">相対的な保留中の操作でどのような順序で指定されたコールバックが呼び出されるを決定する優先度、 <see cref="T:System.Windows.Threading.Dispatcher" />です。</param>
        <summary>指定した実行 <see cref="T:System.Func`1" /> スレッドで指定した優先度で非同期的に、 <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられています。</summary>
        <returns>後すぐに返されるオブジェクト <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" /> が呼び出されるデリゲートとやり取りしながら、それが保留中の実行、イベント キューを使用できます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">指定したデリゲートの戻り値の型。</typeparam>
        <param name="callback">ディスパッチャーを介したを呼び出すデリゲート。</param>
        <param name="priority">相対的な保留中の操作でどのような順序で指定されたコールバックが呼び出されるを決定する優先度、 <see cref="T:System.Windows.Threading.Dispatcher" />です。</param>
        <param name="cancellationToken">操作をキャンセルするかどうかを示すオブジェクト。</param>
        <summary>指定した実行 <see cref="T:System.Func`1" /> スレッドで指定された優先順位で同期的に、 <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられています。</summary>
        <returns>後すぐに返されるオブジェクト <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> が呼び出されるデリゲートとやり取りしながら、それが保留中の実行、イベント キューを使用できます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeShutdown">
      <MemberSignature Language="C#" Value="public void InvokeShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>シャット ダウン処理を開始、 <see cref="T:System.Windows.Threading.Dispatcher" /> 同期的にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A> 無制限の UI のアクセス許可を要求します。  
  
 ときに、 <xref:System.Windows.Threading.Dispatcher> をシャット ダウン、開始、 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> イベントが発生し、 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> に設定されている `true`します。  
  
 <xref:System.Windows.Threading.Dispatcher> シャット ダウンしない完全にイベント キューをアンワインドするまでです。  
  
 ディスパッチャーは、シャット ダウンが完了すると、 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> イベントが発生し、 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> にプロパティが設定されている `true`します。  
  
 シャット ダウン プロセスが開始されると、保留中のすべての作業キュー内の項目は中止されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for shutting down the dispatcher.  Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
      </Docs>
    </Member>
    <Member MemberName="PushFrame">
      <MemberSignature Language="C#" Value="public static void PushFrame (System.Windows.Threading.DispatcherFrame frame);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PushFrame(class System.Windows.Threading.DispatcherFrame frame) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frame" Type="System.Windows.Threading.DispatcherFrame" />
      </Parameters>
      <Docs>
        <param name="frame">ディスパッチャーが処理するフレーム。</param>
        <summary>実行ループに入ります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Windows.Threading.DispatcherFrame> 保留中の作業項目を処理するループを表します。  
  
 ディスパッチャーは、ループ内での作業項目のキューを処理します。  ループは、"フレーム"と呼ばれます。  呼び出して最初のループが開始、アプリケーションで通常 <xref:System.Windows.Threading.Dispatcher.Run%2A>です。  
  
 <xref:System.Windows.Threading.Dispatcher.PushFrame%2A> パラメーターによって表されるループに入る `frame`します。  ループの反復ごとに、 <xref:System.Windows.Threading.Dispatcher> は確認、 <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> プロパティを <xref:System.Windows.Threading.DispatcherFrame> クラスは、ループを続行するかどうか、または停止するかどうかを判断します。  
  
 <xref:System.Windows.Threading.DispatcherFrame> により、 <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> プロパティを明示的に設定して、それを尊重、 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> プロパティを <xref:System.Windows.Threading.Dispatcher>です。  つまり、ときに、 <xref:System.Windows.Threading.Dispatcher> をシャット ダウンが起動し、既定値を使用するフレーム <xref:System.Windows.Threading.DispatcherFrame> を終了する入れ子になったすべてのフレームを有効にする、実装が終了されます。  
  
   
  
## 例  
 次の例では、使用する方法、 <xref:System.Windows.Threading.DispatcherFrame> と同様の結果を実現するために、 [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] <xref:System.Windows.Forms.Application.DoEvents%2A> メソッドです。  
  
 [!code-csharp[dispatchersnippets\#DispatcherDispatcherFrameDoEvents](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdispatcherframedoevents)]
 [!code-vb[dispatchersnippets\#DispatcherDispatcherFrameDoEvents](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdispatcherframedoevents)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="frame" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> します。 <see langword="true" />  
  
 または  
  
 <paramref name="frame" /> 別に実行されている <see cref="T:System.Windows.Threading.Dispatcher" />します。  
  
 または  
  
 ディスパッチャーの処理を無効にされています。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for pushing an execution frame.  Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Run" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>メインの実行のフレームのイベント キューにプッシュ、 <see cref="T:System.Windows.Threading.Dispatcher" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Threading.Dispatcher> ループ内でイベント キューを処理します。  ループは、"フレーム"と呼ばれます。  呼び出して最初のループが開始、アプリケーションで通常 <xref:System.Windows.Threading.Dispatcher.Run%2A>です。  
  
 メインの実行のフレームはまで続行され、 <xref:System.Windows.Threading.Dispatcher> シャット ダウンします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownFinished">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownFinished;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownFinished" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに、 <see cref="T:System.Windows.Threading.Dispatcher" /> シャット ダウンが完了するとします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときのシャット ダウン プロセス、 <xref:System.Windows.Threading.Dispatcher> が開始されて、 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> イベントが発生し、 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> に設定されている `true`します。  
  
 <xref:System.Windows.Threading.Dispatcher> イベント キューがアンワインドされるまで完全にシャット ダウンできませんをしません。  
  
 ディスパッチャーは、シャット ダウンが完了すると、 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> イベントが発生し、 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> にプロパティが設定されている `true`します。  
  
 シャット ダウン プロセスが開始されると、保留中のすべての作業キュー内の項目は中止されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="ShutdownStarted">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownStarted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownStarted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに、 <see cref="T:System.Windows.Threading.Dispatcher" /> シャット ダウンを開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときのシャット ダウン プロセス、 <xref:System.Windows.Threading.Dispatcher> が開始されて、 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> イベントが発生し、 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> に設定されている `true`します。  
  
 <xref:System.Windows.Threading.Dispatcher> イベント キューがアンワインドされるまで完全にシャット ダウンできませんをしません。  
  
 ディスパッチャーは、シャット ダウンが完了すると、 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> イベントが発生し、 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> にプロパティが設定されている `true`します。  
  
 シャット ダウン プロセスが開始されると、保留中のすべての作業キュー内の項目は中止されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="Thread">
      <MemberSignature Language="C#" Value="public System.Threading.Thread Thread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Thread Thread" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Thread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Thread</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このスレッドを取得 <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられています。</summary>
        <value>スレッド。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnhandledException">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledException" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>スレッドの例外がスローされ、によるデリゲートの実行中にキャッチされていないときに発生 <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> または <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントが発生したデリゲートの実行中にスローされた例外 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> キャッチすることはありません。  
  
 ハンドラーできます例外処理済みとしてマーク、呼び出されることを内部例外ハンドラーができなくなります。  
  
 発生したすべて注意をセカンダリの例外を防ぐために、キャッチするでは、このイベントのイベント ハンドラーを記述する必要があります。 メモリの割り当てや、任意のリソースのハンドラーで処理を要する操作を実行しないようにお勧めします。  
  
 <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> イベントを発生させない手段を提供する、 <xref:System.Windows.Threading.Dispatcher.UnhandledException> イベントです。<xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> イベントは、最初に、場合 <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> 上、 <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> に設定されている `false`, 、 <xref:System.Windows.Threading.Dispatcher.UnhandledException> イベントは発生しません。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="UnhandledExceptionFilter">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>スレッドの例外がスローされ、によるデリゲートの実行中にキャッチされていないときに発生 <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> または <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> フィルター ステージの場合にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントが発生したデリゲートの実行中に発生する例外のフィルターの段階で <xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 、キャッチされました。  
  
 コール スタックがアンワインド \(初回例外\) この時点ではありません。  
  
 発生したすべて注意をセカンダリの例外を防ぐために、キャッチするでは、このイベントのイベント ハンドラーを記述する必要があります。  メモリの割り当てや、任意のリソースのハンドラーで処理を要する操作を実行しないようにお勧めします。  
  
 <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> イベントを発生させない手段を提供する、 <xref:System.Windows.Threading.Dispatcher.UnhandledException> イベントです。<xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> イベントは、最初に、場合 <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> 上、 <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> に設定されている `false`, 、 <xref:System.Windows.Threading.Dispatcher.UnhandledException> イベントは発生しません。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">for adding or removing a handler for this event.  Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="ValidatePriority">
      <MemberSignature Language="C#" Value="public static void ValidatePriority (System.Windows.Threading.DispatcherPriority priority, string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidatePriority(valuetype System.Windows.Threading.DispatcherPriority priority, string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="priority">チェックする優先度です。</param>
        <param name="parameterName">優先順位が有効な場合に発生する例外により返される文字列。</param>
        <summary>決定するかどうか、指定した <see cref="T:System.Windows.Threading.DispatcherPriority" /> 優先順位が無効です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="priority" /> は有効な <see cref="T:System.Windows.Threading.DispatcherPriority" /> ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyAccess">
      <MemberSignature Language="C#" Value="public void VerifyAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void VerifyAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>呼び出し元のスレッドがこれにアクセスをサポートしているかどうかを決定 <see cref="T:System.Windows.Threading.Dispatcher" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 スレッドでのみ、 <xref:System.Windows.Threading.Dispatcher> 作成にアクセスすることが、 <xref:System.Windows.Threading.Dispatcher>です。  
  
 このメソッドはパブリックです。したがって、任意のスレッドを確認できますへのアクセスがあるかどうかを確認する、 <xref:System.Windows.Threading.Dispatcher>です。  
  
 違い <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> と <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> は <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 呼び出し元のスレッドにへのアクセスがない場合は、ブール値を返します、 <xref:System.Windows.Threading.Dispatcher> と <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 例外をスローします。  
  
   
  
## 例  
 次の例では使用 <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> スレッドがスレッドへのアクセスを持つかどうかを判断するを <xref:System.Windows.Controls.Button> に作成されました。  このメソッドは、オブジェクトにキャストする引数、 <xref:System.Windows.Controls.Button>です。<xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> メソッドを <xref:System.Windows.Threading.Dispatcher> の <xref:System.Windows.Controls.Button> が呼び出され、スレッドへのアクセスを確認します。  
  
 呼び出し元のスレッドがアクセスできるよう、 <xref:System.Windows.Threading.Dispatcher>, 、 <xref:System.Windows.Controls.Button> だけのメンバーにアクセスして更新される、 <xref:System.Windows.Controls.Button>です。  
  
 呼び出し元のスレッドには、アクセスがない場合、 <xref:System.InvalidOperationException> がスローされます。  この例は、例外をキャッチし、プッシュを受け取るデリゲート、 <xref:System.Windows.Controls.Button> を引数として上に、 <xref:System.Windows.Threading.Dispatcher> の <xref:System.Windows.Controls.Button>です。  これは、 <xref:System.Windows.Threading.Dispatcher> の更新の作業を実行する、 <xref:System.Windows.Controls.Button>です。  
  
 [!code-csharp[DispatcherAccessSample\#DispatcherAccessVerifyAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccessverifyaccess)]
 [!code-vb[DispatcherAccessSample\#DispatcherAccessVerifyAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccessverifyaccess)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">呼び出し元のスレッドでは、これにアクセスできない <see cref="T:System.Windows.Threading.Dispatcher" />します。</exception>
        <altmember cref="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>非同期的に現在の dispatcher にコントロールを生成し、その他のイベントを処理するディスパッチャーの機会を提供する待機可能オブジェクトを作成します。</summary>
        <returns>非同期的に現在の dispatcher にコントロールを生成し、その他のイベントを処理するディスパッチャーの機会を提供する待機可能なオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、ので、その他のイベントを処理する際に、このような他の作業を行うことが、現在の dispatcher に実行制御を一時的に解放する方法を提供します。 使用して、 `await`, 、または `Await` Visual basic では、演算子、戻り値を現在の dispatcher に制御を戻します。 場合に、このメソッドを使用して多数の UI スレッドで処理するアプリケーションの実行中にイベントを処理する機会をアプリに付与します。 たとえば、コントロールの更新の実行時間の長いループ内でこのメソッドを使用できます。  
  
 このメソッドを呼び出すことは、 <xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29> メソッドを渡して <xref:System.Windows.Threading.DispatcherPriority.Background?displayProperty=fullName>します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority">この継続タスクをスケジュールする優先順位。</param>
        <summary>非同期的に現在の dispatcher にコントロールを生成し、その他のイベントを処理するディスパッチャーの機会を提供する待機可能オブジェクトを作成します。  このメソッドの結果を待機しているコードに制御が戻るときに発生する作業は、指定した優先度でスケジュールされます。</summary>
        <returns>非同期的に現在の dispatcher にコントロールを生成し、その他のイベントを処理するディスパッチャーの機会を提供する待機可能なオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、ので、その他のイベントを処理する際に、このような他の作業を行うことが、現在の dispatcher に実行制御を一時的に解放する方法を提供します。 使用して、 `await`, 、または `Await` Visual basic では、演算子、戻り値を現在の dispatcher に制御を戻します。 場合に、このメソッドを使用して多数の UI スレッドで処理するアプリケーションの実行中にイベントを処理する機会をアプリに付与します。 たとえば、コントロールの更新の実行時間の長いループ内でこのメソッドを使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Yield">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>非同期的に現在の dispatcher にコントロールを生成し、その他のイベントを処理するディスパッチャーの機会を提供する待機可能オブジェクトを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したデリゲートをスレッドで非同期的に実行、 <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられています。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>