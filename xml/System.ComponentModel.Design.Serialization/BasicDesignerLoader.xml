<Type Name="BasicDesignerLoader" FullName="System.ComponentModel.Design.Serialization.BasicDesignerLoader">
  <TypeSignature Language="C#" Value="public abstract class BasicDesignerLoader : System.ComponentModel.Design.Serialization.DesignerLoader, System.ComponentModel.Design.Serialization.IDesignerLoaderService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit BasicDesignerLoader extends System.ComponentModel.Design.Serialization.DesignerLoader implements class System.ComponentModel.Design.Serialization.IDesignerLoaderService" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.Serialization.BasicDesignerLoader" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Design.Serialization.DesignerLoader</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.Design.Serialization.IDesignerLoaderService</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderService" /> インターフェイスの実装を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader> is a complete implementation of a designer loader without anything relating to a persistence format. A <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader> does not dictate either a text or binary persistence, but it does support the following features:  
  
-   Multiple load dependencies.  
  
-   Tracking changes within the designer.  
  
-   Deferred idle\-time reloading.  
  
 A <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader> adds two kinds of services to the designer host’s service container: replaceable services and irreplaceable services. You can replace a replaceable service by changing the value of the protected <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.LoaderHost%2A> property. You cannot replace irreplaceable services because their implementations depend on each other.  
  
 The following table describes the services that are provided by default.  
  
|Default Service|Description|  
|---------------------|-----------------|  
|<xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService>|Allows objects to request that the designer reload itself when it is idle. This is a replaceable service.|  
|<xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager>|Used to serialize and deserialize objects. The serialization manager is added as a service so objects that need to perform serialization can utilize any serialization providers that were added to the serialization manager. This is an irreplaceable service.|  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.NamedPermissionSet">for full access to system resources. Demand values: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />, <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />. Associated state:</permission>
    <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderService" />
    <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" />
    <altmember cref="T:System.ComponentModel.Design.IDesignerHost" />
    <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected BasicDesignerLoader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.ComponentModel.Design.Serialization.BasicDesignerLoader" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginLoad">
      <MemberSignature Language="C#" Value="public override void BeginLoad (System.ComponentModel.Design.Serialization.IDesignerLoaderHost host);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void BeginLoad(class System.ComponentModel.Design.Serialization.IDesignerLoaderHost host) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.BeginLoad(System.ComponentModel.Design.Serialization.IDesignerLoaderHost)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.ComponentModel.Design.Serialization.IDesignerLoaderHost" />
      </Parameters>
      <Docs>
        <param name="host">読み込むデザイナー ローダー ホストします。</param>
        <summary>読み込みプロセスを開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、抽象の実装 <xref:System.ComponentModel.Design.Serialization.DesignerLoader.BeginLoad%2A?displayProperty=fullName> メソッドです。 独自のクラスには、このメソッドをオーバーライドする必要はありません。<xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.BeginLoad%2A> メソッドは、次の操作を実行します。  
  
-   これは、デザイン サーフェイスが既に読み込まれなかったことを確認します。  
  
-   最初の呼び出しでは、該当するサービスとの呼び出しを追加、 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.Initialize%2A> メソッドです。  
  
-   呼び出す、 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.OnBeginLoad%2A>, 、<xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.PerformLoad%2A>, 、および <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.OnEndLoad%2A> メソッドです。  
  
 デザイナー ローダー サービスがサービス コンテナーから削除されていない場合 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.BeginLoad%2A> が呼び出す、 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.System%23ComponentModel%23Design%23Serialization%23IDesignerLoaderService%23AddLoadDependency%2A> と <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.System%23ComponentModel%23Design%23Serialization%23IDesignerLoaderService%23DependentLoadComplete%2A> メソッドの代わりに、 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.OnBeginLoad%2A> と <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.OnEndLoad%2A> メソッドです。 このような状況では、デザイナー ローダー サービスを呼び出す、 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.OnBeginLoad%2A> と <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.OnEndLoad%2A>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="host" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">デザイナーが既に読み込ま、または <see cref="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.BeginLoad(System.ComponentModel.Design.Serialization.IDesignerLoaderHost)" /> 異なるデザイナー ローダー ホストで呼び出されました。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <paramref name="host" /> 破棄されました。</exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public override void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.ComponentModel.Design.Serialization.BasicDesignerLoader" /> で使用したリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Calling the <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.Dispose%2A> method does not flush changes to the designer loader. If you want changes to be saved, call <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.Flush%2A> before calling <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.Dispose%2A>.  
  
 Call <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.Dispose%2A> when you are finished using the <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader>. The <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.Dispose%2A> method leaves the <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader> in an unusable state. After calling <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.Dispose%2A>, you must release all references to the <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader> so the garbage collector can reclaim the memory that the <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader> was occupying. For more information, see [Cleaning Up Unmanaged Resources](http://msdn.microsoft.com/ja-jp/a17b0066-71c2-4ba4-9822-8e19332fc213) and [Implementing a Dispose Method](http://msdn.microsoft.com/ja-jp/eb4e1af0-3b48-4fbc-ad4e-fc2f64138bf9).  
  
> [!NOTE]
>  Always call <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.Dispose%2A> before you release your last reference to the <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader> object's **languageKeyword tag is not supported!!!!**  
>  method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableComponentNotification">
      <MemberSignature Language="C#" Value="protected virtual bool EnableComponentNotification (bool enable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool EnableComponentNotification(bool enable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.EnableComponentNotification(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enable">
          <see langword="true" /> によってコンポーネントの通知を有効にする、 <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" />; <see langword="false" /> によってコンポーネントの通知を無効にする、 <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" />です。</param>
        <summary>有効またはを使用してコンポーネントの通知を無効にします <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" />します。</summary>
        <returns>
          <see langword="true" /> この呼び出しの前に、コンポーネントの通知が有効な場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.Flush" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>保留中の変更、デザイナー ローダーをフラッシュします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 デザイナー ローダーが読み込まれていないか、変更済みとしてマークされていない場合、 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.Flush%2A> メソッドをすぐに返します。 それ以外の場合、 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.Flush%2A> シリアル化セッションを作成するシリアル化マネージャーを確認し、呼び出します <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.PerformFlush%2A>します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="protected object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.GetService(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">サービスの <see cref="T:System.Type" />。</param>
        <summary>要求したサービスを取得します。</summary>
        <returns>要求されたサービスまたは <see langword="null" /> 要求したサービスが見つからない場合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.GetService%2A> 派生するクラスを使用するヘルパー メソッドは、 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader> サービスにアクセスしてデザイナー ローダー ホストが提供されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="protected virtual void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.Initialize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>サービスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.Initialize%2A> メソッドは、初めて <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.BeginLoad%2A> が呼び出されます。 この時点では、デザイナー ローダー ホストに必要なサービスを追加できます。 基本実装を追加しているサービス <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader> 提供するため、基本実装を呼び出した後は、既存のサービスを置き換えることができます。 ここでオーバーライドすることで追加するカスタム サービスを削除する必要があります <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.Dispose%2A>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" /> が初期化されていません。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" /> は破棄されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsReloadNeeded">
      <MemberSignature Language="C#" Value="protected virtual bool IsReloadNeeded ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsReloadNeeded() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.IsReloadNeeded" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>デザイナーを再読み込みするかどうかを示します。</summary>
        <returns>
          <see langword="true" /> 場合は、デザイナーを再読み込みする必要があります。それ以外の場合、 <see langword="false" />です。 既定の実装を常に <see langword="true" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.IsReloadNeeded%2A> を再読み込みを最適化するために一部のデザイナー ローダーがメソッドを使用します。 デザイナー ローダーは、インテリジェントな再読み込みをサポートしている場合、このメソッドをオーバーライドできます。 一部のデザイナー ローダーでは、その基になるドキュメントに加えられた変更を検出でき、デザイナーの再読み込みが実際に必要であるかを判断することができます。 返す必要がありますが、場合 `false` このメソッドからです。 既定の実装を常に `true`, を呼び出すいずれかを示す <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.Reload%2A> は成功します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoaderHost">
      <MemberSignature Language="C#" Value="protected System.ComponentModel.Design.Serialization.IDesignerLoaderHost LoaderHost { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.Design.Serialization.IDesignerLoaderHost LoaderHost" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.BasicDesignerLoader.LoaderHost" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.Serialization.IDesignerLoaderHost</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ローダーのホストを取得します。</summary>
        <value>
          <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" /> に渡された、 <see cref="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.BeginLoad(System.ComponentModel.Design.Serialization.IDesignerLoaderHost)" /> メソッドです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、このデザイナー ローダーに指定されたローダー ホストを返します。 これは、 `null` 場合 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.BeginLoad%2A> がまだ呼び出されていないか、このデザイナー ローダーが破棄されている場合。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" /> が初期化されていません。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" /> は破棄されています。</exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" />
      </Docs>
    </Member>
    <Member MemberName="Loading">
      <MemberSignature Language="C#" Value="public override bool Loading { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Loading" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.BasicDesignerLoader.Loading" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>デザイナー ローダーがデザイン サーフェイスを読み込んでいるかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> デザイナー ローダーは現在、デザイン サーフェイスを読み込んでいる場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader> クラスには、 <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService>, 、負荷の依存関係をサポートします。 このプロパティでは、戻り値のアカウントとは、読み込みの依存関係が受け取る `true` 保留状態の読み込みの依存関係がある場合。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Modified">
      <MemberSignature Language="C#" Value="protected virtual bool Modified { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Modified" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.BasicDesignerLoader.Modified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または、デザイナーが変更されているかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" /> デザイナーが変更された場合それ以外の場合、 <see langword="false" />,、</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 デザイナー ローダーが、デザイナーが変更されたことを検出したかどうかを判断します。 場合は、このプロパティは `true` ときに、デザイナー ローダーの <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.Flush%2A> メソッドが呼び出されると、デザイナー ローダーが呼び出す、 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.PerformFlush%2A> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBeginLoad">
      <MemberSignature Language="C#" Value="protected virtual void OnBeginLoad ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBeginLoad() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.OnBeginLoad" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>読み込みが開始することをデザイナー ローダーに通知します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.OnBeginLoad%2A> 読み込みプロセスを開始するメソッドが呼び出されます。 この時点で、読み込みに必要な初期化を行う必要があります。 このメソッドは、実際の読み込みを実行する指定しないでください。 既定の実装が変更通知を無効にし、設定、 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader> 読み込み用です。  
  
 実装する場合 <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService> 依存読み込みをサポートするを呼び出す必要があります <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.OnBeginLoad%2A> 依存の最初の読み込みが発生したとき。 呼び出す、 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.OnEndLoad%2A> メソッドを最後に呼び出した後、 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.System%23ComponentModel%23Design%23Serialization%23IDesignerLoaderService%23DependentLoadComplete%2A> メソッドです。 既定では、 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader> 実装 <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService> が代わりとします。 場合 <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService> 場合は使用できません <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.BeginLoad%2A> が呼び出されると、 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.BeginLoad%2A> は直接呼び出す <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.OnBeginLoad%2A>します。  
  
 独自のローダー サービスを提供する場合、またはローダー サービスを提供しないように選択する場合は、このメソッドの呼び出しを担当しています。<xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.BeginLoad%2A> メソッドではこの呼び出しを直接呼び出しますが自動的に <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.System%23ComponentModel%23Design%23Serialization%23IDesignerLoaderService%23AddLoadDependency%2A> 場合 <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService> が利用可能なまたは直接がない場合。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBeginUnload">
      <MemberSignature Language="C#" Value="protected virtual void OnBeginUnload ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBeginUnload() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.OnBeginUnload" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>アンロードが開始されようにするデザイナー ローダーに通知します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.OnBeginUnload%2A> メソッドが呼び出されるは、デザイナー ローダーがドキュメントをアンロードしようとします。  
  
 再読み込みに備えて、ドキュメントをアンロードできますか、ドキュメントの読み込みに失敗します。 ドキュメントに固有のサービスを追加した場合 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.OnBeginLoad%2A> または <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.OnEndLoad%2A>, 、ここでそれらを削除します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnEndLoad">
      <MemberSignature Language="C#" Value="protected virtual void OnEndLoad (bool successful, System.Collections.ICollection errors);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnEndLoad(bool successful, class System.Collections.ICollection errors) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.OnEndLoad(System.Boolean,System.Collections.ICollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="successful" Type="System.Boolean" />
        <Parameter Name="errors" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="successful">
          <see langword="true" /> 負荷が正常に完了した場合それ以外の場合、 <see langword="false" />です。</param>
        <param name="errors">
          <see cref="T:System.Collections.ICollection" /> がエラーとして報告されているオブジェクト \(通常は例外\) を含みます。</param>
        <summary>読み込みが完了したことをデザイナー ローダーに通知します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.OnEndLoad%2A> 読み込みが完了すると、メソッドが呼び出されます。 これは、ような読み込み中に例外がスローされた場合でも、常と呼ばれます。 値 `successful` に設定されます `true` 負荷に成功した場合、または `false` 致命的なエラーが発生した場合。`errors` コレクションがエラーとして報告されているオブジェクトが表示されます。 通常、これらのオブジェクトは例外です。  
  
 実装する場合 <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService> 依存読み込みをサポートするを呼び出す必要があります、 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.OnEndLoad%2A> メソッドを最後に呼び出した後、 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.System%23ComponentModel%23Design%23Serialization%23IDesignerLoaderService%23DependentLoadComplete%2A> メソッドです。 既定では、 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader> 実装 <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService> が代わりとします。 場合 <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService> 場合は使用できません <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.BeginLoad%2A> が呼び出されると、 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.BeginLoad%2A> は直接呼び出す <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.OnEndLoad%2A> 呼び出した後 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.PerformLoad%2A>します。  
  
 このメソッドは、すべての依存読み込みが完了すると、デザイナー ローダー サービスによって呼び出さ必要があります。  これによって開始された読み込みプロセスを停止、 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.BeginLoad%2A> メソッドです。 独自のローダー サービスを提供する場合、またはローダー サービスを提供しないように選択する場合は、このメソッドの呼び出しを担当しています。<xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.BeginLoad%2A> メソッドではこの呼び出しを直接呼び出しますが自動的に、 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.System%23ComponentModel%23Design%23Serialization%23IDesignerLoaderService%23DependentLoadComplete%2A> メソッド場合 <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService> が利用可能なまたは直接がない場合。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" /> が初期化されていません。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" /> は破棄されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="OnModifying">
      <MemberSignature Language="C#" Value="protected virtual void OnModifying ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnModifying() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.OnModifying" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ドキュメントの状態が変更されようとしてあるデザイナー ローダーに通知します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.OnModifying%2A> 追加すると、コンポーネントの変化に応じてメソッドが呼び出されるかを変更しようとしていますが、デザイナーであることを示すイベントを削除します。 ソース コード管理を実装するには、このメソッドをオーバーライドします。 呼び出し <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.OnModifying%2A> とは限りませんが、 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.Modified%2A> 後でプロパティを設定する `true`;、単に示すようにします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformFlush">
      <MemberSignature Language="C#" Value="protected abstract void PerformFlush (System.ComponentModel.Design.Serialization.IDesignerSerializationManager serializationManager);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void PerformFlush(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager serializationManager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.PerformFlush(System.ComponentModel.Design.Serialization.IDesignerSerializationManager)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serializationManager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
      </Parameters>
      <Docs>
        <param name="serializationManager">
          <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> 読み込まれたデザイナーの状態を永続化に使用します。</param>
        <summary>デザイナーには、すべての変更をフラッシュします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.PerformFlush%2A> デザイナー ローダーは、デザイナーに加えられた変更を永続化をフラッシュする必要がある場合、メソッドが呼び出されます。 呼び出しに応答で呼び出される、 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.Flush%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
      </Docs>
    </Member>
    <Member MemberName="PerformLoad">
      <MemberSignature Language="C#" Value="protected abstract void PerformLoad (System.ComponentModel.Design.Serialization.IDesignerSerializationManager serializationManager);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void PerformLoad(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager serializationManager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.PerformLoad(System.ComponentModel.Design.Serialization.IDesignerSerializationManager)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serializationManager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
      </Parameters>
      <Docs>
        <param name="serializationManager">
          <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> 状態をデザイナーの読み込みに使用します。</param>
        <summary>永続化ストアから、デザイナーを読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.PerformLoad%2A> 、デザイナー ローダーは、その状態を読み込む必要がある場合、メソッドが呼び出されます。<xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.PerformLoad%2A> 前に呼び出されますが、 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.OnBeginLoad%2A> メソッドです。 デザイナーの内容を読み込むには、このメソッドを実装する必要があります。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
      </Docs>
    </Member>
    <Member MemberName="PropertyProvider">
      <MemberSignature Language="C#" Value="protected object PropertyProvider { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object PropertyProvider" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.BasicDesignerLoader.PropertyProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはローダーによって使用されているシリアル化マネージャーのプロパティのプロバイダーを設定します。</summary>
        <value>プロパティを持つ、シリアル化マネージャーに提供するオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 シリアル化マネージャーは、提供、 `Properties` プロパティをプライマリ インターフェイスの特定のニーズに、シリアル化をカスタマイズするシリアライザーで読み取ることができます。 シリアライザーによって検査されるプロパティは、使用するシリアライザーの型によって異なります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" /> が初期化されていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Reload">
      <MemberSignature Language="C#" Value="protected void Reload (System.ComponentModel.Design.Serialization.BasicDesignerLoader.ReloadOptions flags);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void Reload(valuetype System.ComponentModel.Design.Serialization.BasicDesignerLoader/ReloadOptions flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.Reload(System.ComponentModel.Design.Serialization.BasicDesignerLoader.ReloadOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flags" Type="System.ComponentModel.Design.Serialization.BasicDesignerLoader+ReloadOptions" />
      </Parameters>
      <Docs>
        <param name="flags">
          <see cref="T:System.ComponentModel.Design.Serialization.BasicDesignerLoader.ReloadOptions" /> 値のビットごとの組み合わせ。</param>
        <summary>デザイナーの再読み込みキューに入れます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.Reload%2A> メソッドは、デザイナーの再読み込みを要求するデザイナー ローダーによって呼び出すことができます。 再読み込みを実行するためのアイドル時間に、このメソッドは実際には再読み込みされませんはデザイナーのみ、再読み込みをキューに配置します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.Serialization.BasicDesignerLoader.ReloadOptions" />
      </Docs>
    </Member>
    <Member MemberName="ReloadPending">
      <MemberSignature Language="C#" Value="protected bool ReloadPending { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReloadPending" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.BasicDesignerLoader.ReloadPending" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>再読み込みがキューに追加されたかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" />, 、への呼び出し <see cref="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.Reload(System.ComponentModel.Design.Serialization.BasicDesignerLoader.ReloadOptions)" /> 再読み込み要求がキューに登録しない場合は、 <see langword="false" />です。</value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.Reload(System.ComponentModel.Design.Serialization.BasicDesignerLoader.ReloadOptions)" />
      </Docs>
    </Member>
    <Member MemberName="ReportFlushErrors">
      <MemberSignature Language="C#" Value="protected virtual void ReportFlushErrors (System.Collections.ICollection errors);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ReportFlushErrors(class System.Collections.ICollection errors) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.ReportFlushErrors(System.Collections.ICollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="errors" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="errors">
          <see cref="T:System.Collections.ICollection" /> エラー オブジェクト、通常は例外を含みます。</param>
        <summary>変更のフラッシュ中に発生したエラーを報告します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.ReportFlushErrors%2A> 中にメソッドが呼び出されます <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.Flush%2A> 変更のフラッシュ中に 1 つまたは複数のエラーが発生した場合。 値、 `errors` 例外やオブジェクトをコレクションでできます <xref:System.Object.ToString%2A> エラーを記述する値。 既定の実装 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.ReportFlushErrors%2A> コレクションの最後の例外が発生します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">変更のフラッシュ中に 1 つ以上のエラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetBaseComponentClassName">
      <MemberSignature Language="C#" Value="protected void SetBaseComponentClassName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetBaseComponentClassName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.SetBaseComponentClassName(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">デザインするコンポーネントの完全な名前を表す文字列。</param>
        <summary>ベース コンポーネントの完全クラス名を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.SetBaseComponentClassName%2A> デザイナーがデザイン コンポーネントの完全な名前を確立するために読み込み中にメソッドを呼び出す必要があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency">
      <MemberSignature Language="C#" Value="void IDesignerLoaderService.AddLoadDependency ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.System#ComponentModel#Design#Serialization#IDesignerLoaderService#AddLoadDependency" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>によって管理されるロード プロセスの一環として、外部コンポーネントを登録 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderService" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す、 <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A> 読み込みプロセスに参加している外部オブジェクトごとに 1 回のメソッドです。<xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> 読み込みプロセスの作業が終わったときに、メソッドが呼び出されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" /> が初期化されていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete">
      <MemberSignature Language="C#" Value="void IDesignerLoaderService.DependentLoadComplete (bool successful, System.Collections.ICollection errorCollection);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(bool successful, class System.Collections.ICollection errorCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.System#ComponentModel#Design#Serialization#IDesignerLoaderService#DependentLoadComplete(System.Boolean,System.Collections.ICollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="successful" Type="System.Boolean" />
        <Parameter Name="errorCollection" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="successful">
          <see langword="true" /> 正常に読み込むそれ以外の場合、 <see langword="false" />です。</param>
        <param name="errorCollection">
          <see cref="T:System.Collections.ICollection" /> 読み込み中に発生したエラーを含みます。</param>
        <summary>依存の読み込みが完了したことを通知します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.System%23ComponentModel%23Design%23Serialization%23IDesignerLoaderService%23DependentLoadComplete%2A> メソッドが呼び出され、依存読み込み操作が完了したことを指示します。 呼び出す、 <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> メソッドを呼び出すことによって登録されたすべてのプロセスに対して 1 回、 <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A> メソッドで、既に完了しています。  
  
 かどうか依存読み込み成功すると、呼び出し元のセット、 `successful` パラメーターを `true` し、いずれか、空のコレクションまたは `null` に、 `errorCollection` パラメーター。 依存の読み込みには、エラーが発生すると、呼び出し元の設定、 `successful` パラメーターを `false` 理由またはへのエラーの理由を示す例外のコレクションを渡すと、 `errorCollection` パラメーター。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">負荷の依存関係が追加されていない <see cref="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.System#ComponentModel#Design#Serialization#IDesignerLoaderService#AddLoadDependency" />, 、または <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" /> が初期化されていません。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" /> は破棄されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload">
      <MemberSignature Language="C#" Value="bool IDesignerLoaderService.Reload ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.System#ComponentModel#Design#Serialization#IDesignerLoaderService#Reload" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>デザイン ドキュメントを再読み込みします。</summary>
        <returns>
          <see langword="true" /> 場合は再読み込み要求が受け入れられます。 <see langword="false" /> 、ローダーは、再読み込みを許可していない場合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 任意のオブジェクトを呼び出すことができます、 <xref:System.ComponentModel.Design.Serialization.BasicDesignerLoader.System%23ComponentModel%23Design%23Serialization%23IDesignerLoaderService%23Reload%2A> メソッドをローダーが設計文書を再読み込みを要求します。 デザイナー ローダーを返せるかどうか、ローダーの再読み込みをサポートしており、再読み込みに準拠しているを `true`します。 それ以外を返します `false`, 、再読み込みが発生しないことを示します。 読み込みに直接再読み込みの呼び出し元は使用できません。デザイナー ローダー、その他の時間をスケジュールするか、デザイナーをすぐに再読み込みを試みることができます。  
  
 デザイナーを再読み込みできなかった場合、呼び出し元ユーザーにメッセージが表示できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>