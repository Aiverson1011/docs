<Type Name="BigInteger" FullName="System.Numerics.BigInteger">
  <TypeSignature Language="C#" Value="public struct BigInteger : IComparable, IComparable&lt;System.Numerics.BigInteger&gt;, IEquatable&lt;System.Numerics.BigInteger&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit BigInteger extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.Numerics.BigInteger&gt;, class System.IEquatable`1&lt;valuetype System.Numerics.BigInteger&gt;, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Numerics.BigInteger" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Numerics</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Numerics</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>FSharp.Core</AssemblyName>
    <AssemblyVersion>2.3.98.1</AssemblyVersion>
    <AssemblyVersion>3.98.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.Numerics.BigInteger&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Numerics.BigInteger&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>任意の大きさを持つ符号付き整数を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger> 型は、任意の大きさを理論的には値に上限や下限がない整数を表す不変の型。 メンバー、 <xref:System.Numerics.BigInteger> 型とかなり類似して他の整数型 \(、 <xref:System.Byte>, 、<xref:System.Int16>, 、<xref:System.Int32>, 、<xref:System.Int64>, 、<xref:System.SByte>, 、<xref:System.UInt16>, 、<xref:System.UInt32>, 、および <xref:System.UInt64> 型\)。 この型の他の整数型と異なる、 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], で表される範囲である、 `MinValue` と `MaxValue` プロパティです。  
  
> [!NOTE]
>  <xref:System.Numerics.BigInteger> 型は変更不可 \(を参照してください [可変性や BigInteger 構造体](#mutability)\) 上限または下限の境界が存在しないと、 <xref:System.OutOfMemoryException> 原因となるすべての操作に対してスローすることができます、 <xref:System.Numerics.BigInteger> が大きくなりすぎる値。  
  
## BigInteger オブジェクトをインスタンス化します。  
 インスタンスを作成できる、 <xref:System.Numerics.BigInteger> いくつかの方法でオブジェクト。  
  
-   使用することができます、 `new` キーワードをパラメーターとして任意の整数または浮動小数点値を指定し、 <xref:System.Numerics.BigInteger> コンス トラクターです。 \(に割り当てられる前に、浮動小数点値が切り捨てられて、 <xref:System.Numerics.BigInteger>.\) 次の例では、使用する方法、 `new` をインスタンス化するキーワード <xref:System.Numerics.BigInteger> 値。  
  
     [!code-csharp[System.Numerics.BigInteger.Class\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#1)]
     [!code-vb[System.Numerics.BigInteger.Class\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#1)]  
  
-   宣言することができます、 <xref:System.Numerics.BigInteger> 変数して割り当てるのと同じ値とその値が整数型とならない限り任意の数値型。 次の例では、割り当てを使用して、作成、 <xref:System.Numerics.BigInteger> 値から、 <xref:System.Int64>です。  
  
     [!code-csharp[System.Numerics.BigInteger.Class\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#2)]
     [!code-vb[System.Numerics.BigInteger.Class\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#2)]  
  
-   Decimal 型または浮動小数点値を割り当てることができます、 <xref:System.Numerics.BigInteger> オブジェクトの値をキャストするか、最初に変換したかどうか。 次の例は、明示的にキャスト \(C\# の場合\) または、\(Visual Basic で\) に変換する <xref:System.Double> と <xref:System.Decimal> 値を <xref:System.Numerics.BigInteger>です。  
  
     [!code-csharp[System.Numerics.BigInteger.Class\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#3)]
     [!code-vb[System.Numerics.BigInteger.Class\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#3)]  
  
 これらのメソッドを使用すると、インスタンス化、 <xref:System.Numerics.BigInteger> が既存の数値の 1 つの範囲内に値を持つオブジェクトの型だけです。 インスタンスを作成できる、 <xref:System.Numerics.BigInteger> オブジェクトの値を持つ 3 つの方法のいずれかで既存の数値型の範囲を超える場合は。  
  
-   使用することができます、 `new` キーワードを任意のサイズのバイト配列を提供し、 <xref:System.Numerics.BigInteger.%23ctor%2A?displayProperty=fullName> コンス トラクターです。 例:  
  
     [!code-csharp[System.Numerics.BigInteger.Class\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#4)]
     [!code-vb[System.Numerics.BigInteger.Class\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#4)]  
  
-   呼び出すことができます、 <xref:System.Numerics.BigInteger.Parse%2A> または <xref:System.Numerics.BigInteger.TryParse%2A> に数値の文字列形式を変換するメソッド、 <xref:System.Numerics.BigInteger>です。 例:  
  
     [!code-csharp[System.Numerics.BigInteger.Class\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#5)]
     [!code-vb[System.Numerics.BigInteger.Class\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#5)]  
  
-   呼び出すことができます、 `static` \(`Shared` Visual Basic で\) <xref:System.Numerics.BigInteger> 数値式に対してなんらかの操作を実行し、集計を返すメソッド <xref:System.Numerics.BigInteger> 結果。 次の例は、キューブ <xref:System.UInt64.MaxValue?displayProperty=fullName> に結果の割り当てと、 <xref:System.Numerics.BigInteger>です。  
  
     [!code-csharp[System.Numerics.BigInteger.Class\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#6)]
     [!code-vb[System.Numerics.BigInteger.Class\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#6)]  
  
 初期化されていない値の <xref:System.Numerics.BigInteger> は <xref:System.Numerics.BigInteger.Zero%2A>です。  
  
## BigInteger 値に対して操作を実行します。  
 使用することができます、 <xref:System.Numerics.BigInteger> インスタンスの他の任意の整数型で使用するとします。<xref:System.Numerics.BigInteger> 加算、減算、除算、乗算、減算、否定、単項否定演算子などの基本的な算術演算を実行するために、標準の数値演算子をオーバー ロードです。 標準の数値演算子を使用して 2 つを比較する <xref:System.Numerics.BigInteger> 相互の値。 などの他の整数型 <xref:System.Numerics.BigInteger> もビットごとのようにサポート `And`, 、`Or`, 、`XOr`, 、shift キー、および右シフト演算子のままです。 カスタム演算子をサポートしない言語用、 <xref:System.Numerics.BigInteger> 構造体では、算術演算を実行するための同等のメソッドも用意されています。 以下の <xref:System.Numerics.BigInteger.Add%2A>, 、<xref:System.Numerics.BigInteger.Divide%2A>, 、<xref:System.Numerics.BigInteger.Multiply%2A>, 、<xref:System.Numerics.BigInteger.Negate%2A>, 、<xref:System.Numerics.BigInteger.Subtract%2A>, 、およびその他のいくつか。  
  
 多くのメンバー、 <xref:System.Numerics.BigInteger> 構造とその他の整数型のメンバーに直接対応しています。 さらに、 <xref:System.Numerics.BigInteger> 、次のようにメンバーを追加します。  
  
-   <xref:System.Numerics.BigInteger.Sign%2A>, での符号を示す値を返す、 <xref:System.Numerics.BigInteger> 値。  
  
-   <xref:System.Numerics.BigInteger.Abs%2A>, での絶対パスの値を返す、 <xref:System.Numerics.BigInteger> 値。  
  
-   <xref:System.Numerics.BigInteger.DivRem%2A>, 、商と除算の剰余の両方が返されます。  
  
-   <xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A>, 、2 つの最大公約数を返すことを <xref:System.Numerics.BigInteger> 値。  
  
 このメンバーの多くのメンバーに対応して、 <xref:System.Math> プリミティブ数値型を処理する機能を提供するクラス。  
  
<a name="mutability"></a>   
## 可変性や BigInteger 構造体  
 次の例のインスタンスを作成、 <xref:System.Numerics.BigInteger> オブジェクトを 1 つの値をインクリメントします。  
  
 [!code-csharp[System.Numerics.BigInteger.Class.Mutability\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/cs/Mutability_Examples.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Class.Mutability\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/vb/Mutability_Examples.vb#1)]  
  
 この例は、既存のオブジェクトの値を変更に見えますが、これはありません。<xref:System.Numerics.BigInteger> オブジェクトは不変、つまり内部的に、共通言語ランタイムは実際には、新しい作成 <xref:System.Numerics.BigInteger> オブジェクトし、1 つ前の値より大きい値を割り当てます。 この新しいオブジェクトは、呼び出し元に返されます。  
  
> [!NOTE]
>  その他の数値の型については、.NET Framework も変更できません。 ただし、あるため、 <xref:System.Numerics.BigInteger> 型に上限や下限がないと、その値が非常に大きくなるし、パフォーマンスに大きな影響があることができます。  
  
 このプロセスは、呼び出し元に対して透過的ですが、これはパフォーマンスが低下します。 場合によっては、特にと繰り返し操作の実行、ループ内で非常に大きな <xref:System.Numerics.BigInteger> 値、そのパフォーマンスの低下を長時間になることができます。 たとえば、次の例で操作を実行、100万回まで繰り返し、 <xref:System.Numerics.BigInteger> 、操作が成功するたびに 1 つの値がインクリメントされます。  
  
 [!code-csharp[System.Numerics.BigInteger.Class.Mutability\#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/cs/Mutability_Examples.cs#12)]
 [!code-vb[System.Numerics.BigInteger.Class.Mutability\#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/vb/Mutability_Examples.vb#12)]  
  
 このような場合は、パフォーマンスを向上するすべての中間の割り当てを実行することによって、 <xref:System.Int32> 変数です。 変数の最終的な値にし、割り当てることが、 <xref:System.Numerics.BigInteger> オブジェクトをループを終了します。 具体的な例を次に示します。  
  
 [!code-csharp[System.Numerics.BigInteger.Class.Mutability\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/cs/Mutability_Examples.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Class.Mutability\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/vb/Mutability_Examples.vb#3)]  
  
## バイト配列と 16 進文字列の操作  
 変換する場合 <xref:System.Numerics.BigInteger> バイト配列に値をバイト配列に変換する場合、または <xref:System.Numerics.BigInteger> 値、バイトの順序を考慮する必要があります。<xref:System.Numerics.BigInteger> 構造体にはリトル エンディアン順で表示するバイト配列内の個々 のバイトが必要ですが \(つまり、上位バイトの前の値の下位バイト\)。 ラウンドト リップすることができます、 <xref:System.Numerics.BigInteger> を呼び出して値、 <xref:System.Numerics.BigInteger.ToByteArray%2A> メソッド結果のバイトを渡す、配列を <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> 次の例のように、コンス トラクターです。  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#1)]  
  
 インスタンスを作成、 <xref:System.Numerics.BigInteger> 値の他のいくつかの整数型の値を表すバイト配列からは整数値を渡すことができます、 <xref:System.BitConverter.GetBytes%2A?displayProperty=fullName> メソッド、および結果のバイト配列をパス、 <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> コンス トラクターです。 次の例のインスタンスを作成、 <xref:System.Numerics.BigInteger> を表すバイト配列から値、 <xref:System.Int16> 値。  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#2)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#2)]  
  
 <xref:System.Numerics.BigInteger> 構造体は、負の値が 2 の補数形式で格納されていることを想定しています。<xref:System.Numerics.BigInteger> 構造がない固定長の数値を表して、 <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> コンス トラクターは、常に符号ビットとして、配列内の最後のバイトの最上位ビットを解釈します。 防ぐために、 <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> 2 の補数表現負の値の正の値をバイト配列内の最後のバイトの最上位ビットは通常は設定されますが、追加のバイト値が 0 を含める必要があります正の値の符号および絶対値表現との混乱を招くからコンス トラクターです。 たとえば、0xC0 0xBD 0xF0 0xFF で\-1,000,000 または 4,293,967,296 リトル エンディアンの 16 進表現であります。 バイト配列の値によって解釈されるこの配列の最後のバイトの最上位ビットは上にあるため、 <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> で\-1,000,000 としてコンス トラクターです。 インスタンス化する、 <xref:System.Numerics.BigInteger> 値が正の数、バイト配列が含まれる要素が 0xC0 0xBD 0xF0 0xFF 0x00 をコンス トラクターに渡す必要があります。 次に例を示します。  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#3)]  
  
 によって作成されたバイト配列、 <xref:System.Numerics.BigInteger.ToByteArray%2A> 正の値からのメソッドは、この余分な値の 0 バイトを含めます。 したがって、 <xref:System.Numerics.BigInteger> 構造が、それらを割り当て、次の例のように、バイト配列から復元することで値のラウンドト リップに成功をことができます。  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#4)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#4)]  
  
 ただし、開発者によって動的に作成された、またはバイト配列を符号なし整数に変換するメソッドによって返されることに、バイト配列にこの追加の値 0 バイトを追加する必要があります \(よう <xref:System.BitConverter.GetBytes%28System.UInt16%29?displayProperty=fullName>, 、<xref:System.BitConverter.GetBytes%28System.UInt32%29?displayProperty=fullName>, 、および <xref:System.BitConverter.GetBytes%28System.UInt64%29?displayProperty=fullName>\)。  
  
 16 進数文字列を解析するときに、 <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName> と <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=fullName> メソッドだ、文字列の最初のバイトの最上位ビットを設定すると、または 2 の補数表現を使用して値を表示する場合は、文字列の最初の 16 進数の桁が下から 4 バイト値のビットを表します。 たとえば、「ff 01」と"f01 のいずれ"の両方は、10 進値\-255 を表します。 負の値から正の値を区別するには、正の値は、先行ゼロを含める必要があります。 関連するオーバー ロード、 <xref:System.Numerics.BigInteger.ToString%2A> メソッドは、"X"書式指定文字列で渡されるとは、正の値の場合は、返される 16 進数文字列に先行ゼロを追加します。 これにより、ラウンドト リップさせる <xref:System.Numerics.BigInteger> 値を使用して、 <xref:System.Numerics.BigInteger.ToString%2A> と <xref:System.Numerics.BigInteger.Parse%2A> メソッドは、次の例のようにです。  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#5)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#5)]  
  
 ただし、16 進文字列が呼び出すことによって作成、 `ToString` 他の整数型またはのオーバー ロードのメソッド、 <xref:System.Convert.ToString%2A> メソッドを含む、 `toBase` パラメーターに値または 16 進数の文字列の派生元となるソース データ型の符号が示されていません。 正常にインスタンス化する、 <xref:System.Numerics.BigInteger> このような文字列からの値には、いくつか追加のロジックが必要です。 次の例では、1 つとして考えられる実装を提供します。  
  
 [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples2.cs#6)]
 [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples2.vb#6)]  
  
   
  
## 例  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (byte[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Byte[])" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="value">リトル エンディアン順に格納されたバイト値の配列。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Numerics.BigInteger" /> 、バイト配列の値を使用して構造化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 内の個々 のバイト、 `value` 配列は、最上位のバイトまでの最下位バイトから、リトル エンディアン順でする必要があります。 たとえば、数値 1,000,000,000,000 は、次の表に示すように表されます。  
  
|||  
|-|-|  
|16 進文字列|E8D4A51000|  
|バイト配列 \(最初にインデックスが最も低い\)|00 10 A5 D4 E8 00|  
  
 などの数値をバイト配列に変換するほとんどのメソッド <xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=fullName> と <xref:System.BitConverter.GetBytes%2A?displayProperty=fullName>, 、リトル エンディアン順でバイト配列を返します。  
  
 コンス トラクターは、2 の補数表現を使用する、符号および絶対値による表現と負の値を使用するバイト配列の正の値を必要とします。 つまりかどうかは、上位ビットの最上位バイトの `value` 設定すると、その結果、 <xref:System.Numerics.BigInteger> は負の値。 ソースによっては、バイト配列の正の値が負の値として誤って解釈される場合があります。 バイト配列は通常、次の方法で生成されます。  
  
-   呼び出して、 <xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=fullName> メソッドです。 このメソッドは、正の値の 0 に、アレイ セット内の最上位バイトの最上位ビットを使用してバイト配列を返す、ので、負と正の値を解釈する可能性はありません。 によって作成されたバイト配列を変更せず、 <xref:System.Numerics.BigInteger.ToByteArray%2A> メソッドに渡されるときに常に正常にラウンドト リップ、 <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> コンス トラクターです。  
  
-   呼び出して、 <xref:System.BitConverter.GetBytes%2A?displayProperty=fullName> メソッドとをパラメーターとして符号付き整数を渡します。 符号付き整数では、符号および絶対値による表現と 2 の補数表現の両方を処理するため、負と正の値を解釈する可能性はありません。  
  
-   呼び出して、 <xref:System.BitConverter.GetBytes%2A?displayProperty=fullName> メソッドとをパラメーターとして符号なし整数を渡します。 符号なし整数は、magnitude のみによって表される、ため正の値が負の値として誤って解釈されることができます。 このように誤って解釈を防ぐためには、配列の末尾にゼロ バイトの値を追加できます。 次のセクションの例では、具体的なを示します。  
  
-   バイト配列を作成するか動的または静的にないとは限りませんが、または既存のバイト配列を変更することによって、上記の方法のいずれかを呼び出しています。 正の値が負の値として誤って解釈されるようにするのには、配列の末尾に 0 バイトの値を追加できます。  
  
 場合 `value` は、空 <xref:System.Byte> 配列と、新しい <xref:System.Numerics.BigInteger> オブジェクトは、の値に初期化 <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=fullName>します。 場合 `value` は `null`, 、コンス トラクターは、スロー、 <xref:System.ArgumentNullException>です。  
  
   
  
## 例  
 次の例のインスタンスを作成、 <xref:System.Numerics.BigInteger> 値が {5, 4、3、2, 1} 5 要素のバイト配列からオブジェクトです。 これは、後、表示、 <xref:System.Numerics.BigInteger> コンソールに、10 進数と 16 進数の両方の数値として表される値。 テキスト出力を含む入力配列の比較では、その理由をオフになります。 こののオーバー ロード、 <xref:System.Numerics.BigInteger> クラスのコンス トラクターを作成、 <xref:System.Numerics.BigInteger> オブジェクトの値が 4328719365 \(または 0x102030405\)。 値が 5 であるバイト配列の最初の要素の最下位バイトの値を定義する、 <xref:System.Numerics.BigInteger> 0x05 であるオブジェクト。 値が 4 であるバイト配列の 2 番目の要素の 2 番目のバイトの値を定義する、 <xref:System.Numerics.BigInteger> 0x04 では、オブジェクトとします。  
  
 [!code-csharp[System.Numerics.BigInteger.ctors\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.ctors\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example1.vb#1)]  
  
 次の例は、正および負の数をインスタンス化 <xref:System.Numerics.BigInteger> 値には、コマンドを渡し、 <xref:System.Numerics.BigInteger.ToByteArray%2A> メソッド、復元元 <xref:System.Numerics.BigInteger> 結果のバイト配列からの値。 2 つの値が同一のバイト配列で表されることに注意してください。 これらの唯一の違いはバイト配列の最後の要素の最上位ビットです。 このビットを負の値から配列を作成する場合に設定すると \(バイトの値は 0 xff\) <xref:System.Numerics.BigInteger> 値。 このビットが設定されていない \(バイトの値は 0\)、正の数から、配列を作成する場合 <xref:System.Numerics.BigInteger> 値。  
  
 [!code-csharp[System.Numerics.BigInteger.ctors\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.ctors\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example1.vb#2)]  
  
 次の例では、いる正の値が正しくインスタンス化されない負の値として値が配列の末尾にゼロのバイトを追加することで確認する方法を示します。  
  
 [!code-csharp[System.Numerics.BigInteger.ctors\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.ctors\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Numerics.BigInteger.ToByteArray" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Decimal)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">10 進数。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Numerics.BigInteger" /> を使用して、 <see cref="T:System.Decimal" /> 値。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターの呼び出しの結果は明示的に割り当てることと同じ、 <xref:System.Decimal> 値を <xref:System.Numerics.BigInteger> 変数です。  
  
 このコンス トラクターの呼び出しデータ損失が発生することができます。小数部 `value` インスタンス化するときに切り捨てられますが、 <xref:System.Numerics.BigInteger> オブジェクトです。  
  
   
  
## 例  
 次の例では、使用する、 <xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29> インスタンスを作成するコンス トラクター、 <xref:System.Numerics.BigInteger> オブジェクトです。 配列を定義して <xref:System.Decimal> 数値を使用して、ごとに値を渡す、 <xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29> コンス トラクターです。 なお、 <xref:System.Decimal> に割り当てられているときに丸められるのではなく値が切り捨てられます、 <xref:System.Numerics.BigInteger> オブジェクトです。  
  
 [!code-csharp[System.Numerics.BigInteger.ctors\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#4)]
 [!code-vb[System.Numerics.BigInteger.ctors\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Double)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">倍精度浮動小数点数値。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Numerics.BigInteger" /> 倍精度浮動小数点値を使用して構造化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 小数部、 `value` パラメーターは、インスタンス化するときに切り捨てられますが、 <xref:System.Numerics.BigInteger> オブジェクトです。  
  
 桁数が不足しているのため、 <xref:System.Double> このコンス トラクターの呼び出しのデータ型は、データ損失を引き起こすことができます。  
  
 <xref:System.Numerics.BigInteger> このコンス トラクターを呼び出すことによって生成される値が明示的に割り当てることによって生成される値と同一では、 <xref:System.Double> 値を <xref:System.Numerics.BigInteger>です。  
  
   
  
## 例  
 次の例では、使用する、 <xref:System.Numerics.BigInteger.%23ctor%28System.Double%29> インスタンスを作成するコンス トラクター、 <xref:System.Numerics.BigInteger> オブジェクトです。 精度を使用する場合に発生する可能性の低下も示しています、 <xref:System.Double> データ型。 A <xref:System.Double> に割り当てられる、大きな値が割り当てられた、 <xref:System.Numerics.BigInteger> オブジェクトです。 出力に示すように、この割り当てには、精度の損失が含まれます。 両方の値は、1 ずつインクリメントされます。 出力を表示する、 <xref:System.Numerics.BigInteger> オブジェクトが変更された値が反映されます、 <xref:System.Double> オブジェクトはありません。  
  
 [!code-csharp[System.Numerics.BigInteger.ctors\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#5)]
 [!code-vb[System.Numerics.BigInteger.ctors\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> の値が <see cref="F:System.Double.NaN" /> です。  
  
 または  
  
 <paramref name="value" /> の値が <see cref="F:System.Double.NegativeInfinity" /> です。  
  
 または  
  
 <paramref name="value" /> の値が <see cref="F:System.Double.PositiveInfinity" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>2.3.98.1</AssemblyVersion>
        <AssemblyVersion>3.98.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">32 ビット符号付き整数。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Numerics.BigInteger" /> 32 ビット符号付き整数値を使用して構造化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 インスタンス化するとき、有効桁数の損失はありません、 <xref:System.Numerics.BigInteger> オブジェクトをこのコンス トラクターを使用します。  
  
 <xref:System.Numerics.BigInteger> このコンス トラクターを呼び出すことによって生成される値に割り当てることによって生成される値と同一では、 <xref:System.Int32> 値を <xref:System.Numerics.BigInteger>です。  
  
 <xref:System.Numerics.BigInteger> 構造体では、型のパラメーターを持つコンス トラクターは含まれません <xref:System.Byte>, 、<xref:System.Int16>, 、<xref:System.SByte>, 、または <xref:System.UInt16>です。 ただし、 <xref:System.Int32> 型には、8 ビット、16 ビット符号付きと符号なし整数の 32 ビット符号付き整数への暗黙的変換がサポートしています。 このコンス トラクターと呼ばれる場合はその結果、 `value` これら 4 つの整数型のいずれかがします。  
  
   
  
## 例  
 次の例では、 <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29> インスタンスを作成するコンス トラクター <xref:System.Numerics.BigInteger> 32 ビット整数の配列の値。 各 32 ビット整数値を代入する暗黙的な変換を使用する <xref:System.Numerics.BigInteger> 変数です。 比較して 2 つの値を確立するために、その結果 <xref:System.Numerics.BigInteger> 値は同じです。  
  
 [!code-csharp[System.Numerics.BigInteger.ctors\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#6)]
 [!code-vb[System.Numerics.BigInteger.ctors\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Int64)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>2.3.98.1</AssemblyVersion>
        <AssemblyVersion>3.98.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">64 ビット符号付き整数。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Numerics.BigInteger" /> 64 ビット符号付き整数値を使用して構造化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 インスタンス化するとき、有効桁数の損失はありません、 <xref:System.Numerics.BigInteger> オブジェクトをこのコンス トラクターを使用します。  
  
 <xref:System.Numerics.BigInteger> このコンス トラクターを呼び出すことによって生成される値に割り当てることによって生成される値と同一では、 <xref:System.Int64> 値を <xref:System.Numerics.BigInteger>です。  
  
   
  
## 例  
 次の例では、 <xref:System.Numerics.BigInteger.%23ctor%28System.Int64%29> インスタンスを作成するコンス トラクター <xref:System.Numerics.BigInteger> 64 ビット整数の配列の値。 各 64 ビット整数値を代入する暗黙的な変換を使用する <xref:System.Numerics.BigInteger> 変数です。 比較して 2 つの値を確立するために、その結果 <xref:System.Numerics.BigInteger> 値は同じです。  
  
 [!code-csharp[System.Numerics.BigInteger.ctors\#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#7)]
 [!code-vb[System.Numerics.BigInteger.ctors\#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.Single)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">単精度浮動小数点数値。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Numerics.BigInteger" /> 単精度浮動小数点値を使用して構造化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 小数部、 `value` パラメーターは、インスタンス化するときに切り捨てられますが、 <xref:System.Numerics.BigInteger> オブジェクトです。  
  
 桁数が不足しているのため、 <xref:System.Single> このコンス トラクターの呼び出しのデータ型は、データ損失につながることができます。  
  
 <xref:System.Numerics.BigInteger> このコンス トラクターを呼び出すことによって生成される値が明示的に割り当てることによって生成される値と同一では、 <xref:System.Single> 値を <xref:System.Numerics.BigInteger>です。  
  
   
  
## 例  
 次の例では、使用する、 <xref:System.Numerics.BigInteger.%23ctor%28System.Single%29> インスタンスを作成するコンス トラクター、 <xref:System.Numerics.BigInteger> オブジェクトです。 精度を使用する場合に発生する可能性の低下も示しています、 <xref:System.Single> データ型。 A <xref:System.Single> 、大規模な負の値に代入していますが割り当てられて、 <xref:System.Numerics.BigInteger> オブジェクトです。 出力に示すように、この割り当てには、精度の損失が含まれます。 両方の値は、1 ずつインクリメントされます。 出力を表示する、 <xref:System.Numerics.BigInteger> オブジェクトが変更された値が反映されます、 <xref:System.Single> オブジェクトはありません。  
  
 [!code-csharp[System.Numerics.BigInteger.ctors\#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#8)]
 [!code-vb[System.Numerics.BigInteger.ctors\#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> の値が <see cref="F:System.Single.NaN" /> です。  
  
 または  
  
 <paramref name="value" /> の値が <see cref="F:System.Single.NegativeInfinity" /> です。  
  
 または  
  
 <paramref name="value" /> の値が <see cref="F:System.Single.PositiveInfinity" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.UInt32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">32 ビットの符号なし整数値。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Numerics.BigInteger" /> 32 ビット符号なし整数値を使用して構造化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 インスタンス化するとき、有効桁数の損失はありません、 <xref:System.Numerics.BigInteger> このコンス トラクターを使用します。  
  
 <xref:System.Numerics.BigInteger> このコンス トラクターを呼び出すことによって生成される値に割り当てることによって生成される値と同一では、 <xref:System.UInt32> 値を <xref:System.Numerics.BigInteger>です。  
  
   
  
## 例  
 次の例では、 <xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29> コンス トラクターおよび初期化するために、代入ステートメント <xref:System.Numerics.BigInteger> 32 ビットの符号なし整数の配列から値です。 比較してしたことを示す 2 つの値を初期化する 2 つの方法、 <xref:System.Numerics.BigInteger> の値が同一の結果を生成します。  
  
 [!code-csharp[System.Numerics.BigInteger.ctors\#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#9)]
 [!code-vb[System.Numerics.BigInteger.ctors\#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#9)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Numerics.BigInteger.#ctor(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BigInteger (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.#ctor(System.UInt64)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">符号なし 64 ビット整数。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Numerics.BigInteger" /> 64 ビット符号なし整数値を含む構造体。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 インスタンス化するとき、有効桁数の損失はありません、 <xref:System.Numerics.BigInteger> このコンス トラクターを使用します。  
  
 <xref:System.Numerics.BigInteger> このコンス トラクターを呼び出すことによって生成される値に割り当てることによって生成される値と同一では、 <xref:System.UInt64> 値を <xref:System.Numerics.BigInteger>です。  
  
   
  
## 例  
 次の例では、 <xref:System.Numerics.BigInteger.%23ctor%28System.UInt64%29> インスタンスを作成するコンス トラクター、 <xref:System.Numerics.BigInteger> 値があるオブジェクトと等しい <xref:System.UInt64.MaxValue>します。  
  
 [!code-csharp[System.Numerics.BigInteger.ctors\#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#10)]
 [!code-vb[System.Numerics.BigInteger.ctors\#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#10)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Numerics.BigInteger.#ctor(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Abs (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Abs(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>2.3.98.1</AssemblyVersion>
        <AssemblyVersion>3.98.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">数値。</param>
        <summary>絶対値の取得、 <see cref="T:System.Numerics.BigInteger" /> オブジェクトです。</summary>
        <returns>絶対値 <paramref name="value" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 数値の絶対値は、次の表に示すように、その記号を付けずには、その数値です。  
  
|`value` パラメーター|戻り値|  
|--------------------|---------|  
|`value` \>\= 0|`value`|  
|`value` \< 0|`value` \* \-1|  
  
 <xref:System.Numerics.BigInteger.Abs%2A> メソッドは、 <xref:System.Math.Abs%2A?displayProperty=fullName> のプリミティブ数値型のメソッドです。  
  
   
  
## 例  
 次の例では、 <xref:System.Numerics.BigInteger.Abs%2A> に変換する方法、 <xref:System.Numerics.BigInteger> 値 2 の補数表現から、ファイルにシリアル化する前に符号および絶対値による表現にします。 ファイル内のデータが次に、逆シリアル化され、新しいに割り当てられている <xref:System.Numerics.BigInteger> オブジェクトです。  
  
 [!code-csharp[System.Numerics.BigInteger.Abs\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Abs/cs/Abs1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Abs\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Abs/vb/Abs1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Abs(System.SByte)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Add (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Add(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">加算する 1 番目の値。</param>
        <param name="right">加算する 2 番目の値。</param>
        <summary>2 つ追加 <see cref="T:System.Numerics.BigInteger" /> 値であり、結果を返します。</summary>
        <returns>
          <paramref name="left" /> と <paramref name="right" /> の合計。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 演算子のオーバー ロードまたはカスタム演算子をサポートしない言語を使用して、 <xref:System.Numerics.BigInteger.Add%2A> メソッドの追加を使用して実行を <xref:System.Numerics.BigInteger> 値。  
  
 <xref:System.Numerics.BigInteger.Add%2A> メソッドは、インスタンス化する場合、加算演算子の便利な代用、 <xref:System.Numerics.BigInteger> 変数に次の例に示すように、さらに、結果の合計を割り当てることをします。  
  
 [!code-csharp[System.Numerics.BigInteger.OperationMethods\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.OperationMethods\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#2)]  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値です。</param>
        <param name="right">比較する 2 番目の値です。</param>
        <summary>2 つを比較して <see cref="T:System.Numerics.BigInteger" /> 値であり、最初の値が同じか、または 2 番目の値より大きいよりも小さいかどうかを示す整数を返します。</summary>
        <returns>
          <paramref name="left" /> と <paramref name="right" /> の相対値を示す符号付き整数。次の表を参照してください。  
  
 <list type="table">  
<listheader>  
<term> 値  
  
 </term>  
<description> 状態  
  
 </description>  
</listheader>  
<item>  
<term> 0 より小さい値  
  
 </term>  
<description> <paramref name="left" /> は <paramref name="right" /> より小さい値です。  
  
 </description>  
</item>  
<item>  
<term> 0  
  
 </term>  
<description> <paramref name="left" /> と <paramref name="right" /> は等しい。  
  
 </description>  
</item>  
<item>  
<term> 0 より大きい値  
  
 </term>  
<description> <paramref name="left" /> が <paramref name="right" /> より大きくなっています。  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ですが、 <xref:System.Numerics.BigInteger> 一定範囲の比較を持たない <xref:System.Numerics.BigInteger> 値が浮動小数点数の比較の特性を設定する有効桁数の不足によって特徴付けられていません。 次の例では、2 つを比較して <xref:System.Numerics.BigInteger> 1 の値は、それぞれが異なる値がある 1,896 桁の数字です。<xref:System.Numerics.BigInteger.Compare%2A> メソッドは 2 つの値が等しくないことを正しく報告します。  
  
 [!code-csharp[System.Numerics.BigInteger.Compare\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Compare/cs/Compare1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Compare\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Compare/vb/Compare1.vb#1)]  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.CompareTo" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (long other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CompareTo(int64 other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.CompareTo(System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="other">比較する符号付き 64 ビット整数。</param>
        <summary>このインスタンスと符号付き 64 ビット整数を比較し、このインスタンスの値が符号付き 64 ビット整数の値よりも小さいか、同じか、または大きいかを示す整数を返します。</summary>
        <returns>このインスタンスの関係を示す符号付き整数値 <paramref name="other" />, 、次の表に示すようにします。  
  
 <list type="table">  
<listheader>  
<term> 戻り値  
  
 </term>  
<description> 説明  
  
 </description>  
</listheader>  
<item>  
<term> 0 より小さい値  
  
 </term>  
<description> 現在のインスタンスがより小さい <paramref name="other" />します。  
  
 </description>  
</item>  
<item>  
<term> 0  
  
 </term>  
<description> 現在のインスタンスが等しい <paramref name="other" />します。  
  
 </description>  
</item>  
<item>  
<term> 0 より大きい値  
  
 </term>  
<description> 現在のインスタンスがより大きい <paramref name="other" />します。  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 `other` は、 <xref:System.Byte>, 、<xref:System.Int16>, 、<xref:System.Int32>, 、<xref:System.SByte>, 、<xref:System.UInt16>, 、または <xref:System.UInt32> 値、それが暗黙的に変換する、 <xref:System.Int64> 値と、 <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29> メソッドが呼び出されます。  
  
   
  
## 例  
 次の例では、呼び出しの結果、 <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29> 整数値を持つメソッドです。  
  
 [!code-csharp[System.Numerics.BigInteger.CompareTo\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example2.cs#3)]
 [!code-vb[System.Numerics.BigInteger.CompareTo\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example2.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (System.Numerics.BigInteger other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.Numerics.BigInteger other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="other">比較対象のオブジェクト。</param>
        <summary>もう 1 つは、このインスタンスと比較 <see cref="T:System.Numerics.BigInteger" /> をこのインスタンスの値が同じか、または指定したオブジェクトの値を超えるよりも小さいかどうかを示す整数を返します。</summary>
        <returns>このインスタンスの関係を示す符号付き整数値 <paramref name="other" />, 、次の表に示すようにします。  
  
 <list type="table">  
<listheader>  
<term> 戻り値  
  
 </term>  
<description> 説明  
  
 </description>  
</listheader>  
<item>  
<term> 0 より小さい値  
  
 </term>  
<description> 現在のインスタンスがより小さい <paramref name="other" />します。  
  
 </description>  
</item>  
<item>  
<term> 0  
  
 </term>  
<description> 現在のインスタンスが等しい <paramref name="other" />します。  
  
 </description>  
</item>  
<item>  
<term> 0 より大きい値  
  
 </term>  
<description> 現在のインスタンスがより大きい <paramref name="other" />します。  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このオーバー ロード、 <xref:System.Numerics.BigInteger.CompareTo%2A> メソッドを実装して、 <xref:System.IComparable%601.CompareTo%2A?displayProperty=fullName> メソッドです。 ジェネリック コレクション オブジェクトがコレクション内の項目の並べ替えに使用されます。  
  
   
  
## 例  
 次の例では、使用する、 <xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29> の一覧を順序付ける方法 `StarInfo` オブジェクトです。 各 `StarInfo` オブジェクトは、星の名前とマイルで表現された地球からの距離に関する情報を提供します。`StarInfo` 実装して、 <xref:System.IComparable%601> インターフェイスを有効にする `StarInfo` ジェネリック コレクション クラスでソートするオブジェクト。 その <xref:System.IComparable%601.CompareTo%2A?displayProperty=fullName> 実装への呼び出しをラップだけ <xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29>します。  
  
 [!code-csharp[System.Numerics.BigInteger.CompareTo\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.CompareTo\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example1.vb#1)]  
  
 4 つは、次のコードが、そのインスタンス `StarInfo` オブジェクトおよびジェネリック型で格納する <xref:System.Collections.Generic.List%601> オブジェクトです。 後に、 <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=fullName> メソッドが呼び出される `StarInfo` オブジェクトは、地球からの距離の順に表示されます。  
  
 [!code-csharp[System.Numerics.BigInteger.CompareTo\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.CompareTo\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="M:System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.CompareTo(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">比較対象のオブジェクト。</param>
        <summary>このインスタンスと指定したオブジェクトを比較し、このインスタンスの値が指定したオブジェクトの値よりも小さいか、同じか、または大きいかを示す整数を返します。</summary>
        <returns>現在のインスタンスの関係を示す符号付き整数、 <paramref name="obj" /> パラメーターは、次の表に示すようにします。  
  
 <list type="table">  
<listheader>  
<term> 戻り値  
  
 </term>  
<description> 説明  
  
 </description>  
</listheader>  
<item>  
<term> 0 より小さい値  
  
 </term>  
<description> 現在のインスタンスがより小さい <paramref name="obj" />します。  
  
 </description>  
</item>  
<item>  
<term> 0  
  
 </term>  
<description> 現在のインスタンスが等しい <paramref name="obj" />します。  
  
 </description>  
</item>  
<item>  
<term> 0 より大きい値  
  
 </term>  
<description> 現在のインスタンスがより大きい <paramref name="obj" />, 、または <paramref name="obj" /> パラメーターは <see langword="null" />です。  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このオーバー ロード、 <xref:System.Numerics.BigInteger.CompareTo%2A> メソッドを実装して、 <xref:System.IComparable.CompareTo%2A?displayProperty=fullName> メソッドです。 非ジェネリック コレクション オブジェクトがコレクション内の項目の並べ替えに使用されます。  
  
 `obj` パラメーターは、次のいずれかを指定する必要があります。  
  
-   オブジェクトのランタイム型を持つ <xref:System.Numerics.BigInteger>です。  
  
-   <xref:System.Object> 値が変数 `null`します。 場合の値、 `obj` パラメーターは `null`, 、メソッドには、現在のインスタンスがより大きいことを示す 1 が返された `obj`です。  
  
   
  
## 例  
 次の例では、 <xref:System.Numerics.BigInteger.CompareTo%28System.Object%29> を比較するメソッド、 <xref:System.Numerics.BigInteger> オブジェクト配列内の各要素を持つ値  
  
 [!code-csharp[System.Numerics.BigInteger.CompareTo\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example2.cs#4)]
 [!code-vb[System.Numerics.BigInteger.CompareTo\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="obj" /> が <see cref="T:System.Numerics.BigInteger" /> ではありません。</exception>
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (ulong other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CompareTo(unsigned int64 other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.CompareTo(System.UInt64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="other">比較する符号なし 64 ビット整数。</param>
        <summary>このインスタンスと符号なし 64 ビット整数を比較し、このインスタンスの値が符号なし 64 ビット整数の値よりも小さいか、同じか、または大きいかを示す整数を返します。</summary>
        <returns>このインスタンスの相対値を示す符号付き整数と <paramref name="other" />, 、次の表に示すようにします。  
  
 <list type="table">  
<listheader>  
<term> 戻り値  
  
 </term>  
<description> 説明  
  
 </description>  
</listheader>  
<item>  
<term> 0 より小さい値  
  
 </term>  
<description> 現在のインスタンスがより小さい <paramref name="other" />します。  
  
 </description>  
</item>  
<item>  
<term> 0  
  
 </term>  
<description> 現在のインスタンスが等しい <paramref name="other" />します。  
  
 </description>  
</item>  
<item>  
<term> 0 より大きい値  
  
 </term>  
<description> 現在のインスタンスがより大きい <paramref name="other" />します。  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Divide (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Divide(valuetype System.Numerics.BigInteger dividend, valuetype System.Numerics.BigInteger divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.BigInteger" />
        <Parameter Name="divisor" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="dividend">被除数。</param>
        <param name="divisor">除数。</param>
        <summary>1 つに分割 <see cref="T:System.Numerics.BigInteger" /> で別の値を結果を返します。</summary>
        <returns>除算の商。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.Divide%2A> メソッドは、整数の除算を実行します。 除算の結果生じた剰余を破棄します。 残りの部分を保持しながら整数除算を実行する呼び出し、 <xref:System.Numerics.BigInteger.DivRem%2A> メソッドです。 残りの部分のみを取得する、 <xref:System.Numerics.BigInteger.Remainder%2A> メソッドです。  
  
 <xref:System.Numerics.BigInteger.Divide%2A> メソッドは、演算子のオーバー ロードをサポートしない言語で使用できます。 その動作は、除算演算子を使用した除算と同じです。  
  
   
  
## 例  
 次の例の配列を作成する <xref:System.Numerics.BigInteger> 値。 使用する除算演算の商として次の各要素を使用して、 <xref:System.Numerics.BigInteger.Divide%2A> メソッド、除算演算子 \(\/\)、および <xref:System.Numerics.BigInteger.DivRem%2A> メソッドです。  
  
 [!code-csharp[System.Numerics.BigInteger.Divide\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/cs/Divide1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Divide\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/vb/Divide1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException">
          <paramref name="divisor" /> 0 \(ゼロ\) です。</exception>
        <altmember cref="M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
        <altmember cref="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)" />
        <altmember cref="M:System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="DivRem">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger DivRem (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor, out System.Numerics.BigInteger remainder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger DivRem(valuetype System.Numerics.BigInteger dividend, valuetype System.Numerics.BigInteger divisor, valuetype System.Numerics.BigInteger remainder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>2.3.98.1</AssemblyVersion>
        <AssemblyVersion>3.98.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.BigInteger" />
        <Parameter Name="divisor" Type="System.Numerics.BigInteger" />
        <Parameter Name="remainder" Type="System.Numerics.BigInteger&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="dividend">被除数。</param>
        <param name="divisor">除数。</param>
        <param name="remainder">このメソッドが戻るとき、 <see cref="T:System.Numerics.BigInteger" /> 除算の剰余を表す値。 このパラメーターは初期化せずに渡されます。</param>
        <summary>1 つに分割 <see cref="T:System.Numerics.BigInteger" /> を他の値が、結果を返すし、出力パラメーターの剰余を返します。</summary>
        <returns>除算の商。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、商と整数除算の結果生じた剰余の両方を保持します。 残りの部分に関心ができない場合は、使用して、 <xref:System.Numerics.BigInteger.Divide%2A> のみ、残りの部分で関心があるを使用してメソッドまたは除算演算子; する場合は、 <xref:System.Numerics.BigInteger.Remainder%2A> メソッドです。  
  
 返されたの符号 `remainder` の符号と同じ値を持ち、 `dividend` パラメーター。  
  
 動作、 <xref:System.Numerics.BigInteger.DivRem%2A> メソッドのと同じですが、 <xref:System.Math.DivRem%2A?displayProperty=fullName> メソッドです。  
  
   
  
## 例  
 次の例の配列を作成する <xref:System.Numerics.BigInteger> 値。 使用する除算演算の商として次の各要素を使用して、 <xref:System.Numerics.BigInteger.Divide%2A> メソッド、除算演算子 \(\/\)、および <xref:System.Numerics.BigInteger.DivRem%2A> メソッドです。  
  
 [!code-csharp[System.Numerics.BigInteger.Divide\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/cs/Divide1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Divide\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/vb/Divide1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException">
          <paramref name="divisor" /> 0 \(ゼロ\) です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (long other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(int64 other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Equals(System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="other">比較する符号付き 64 ビット整数値。</param>
        <summary>現在のインスタンスの値と符号付き 64 ビット整数の値が等しいかどうかを示す値を返します。</summary>
        <returns>
          <see langword="true" /> 64 ビットの符号付き整数と現在のインスタンスの値が等しい場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 `other` は、 <xref:System.Byte>, 、<xref:System.Int16>, 、<xref:System.Int32>, 、<xref:System.SByte>, 、<xref:System.UInt16>, 、または <xref:System.UInt32> 値、それが暗黙的に変換する、 <xref:System.Int64> 、メソッドが呼び出されたときの値します。  
  
 等しいかどうかテストするだけではなく 2 つのオブジェクト間の関係を調べるを呼び出して、 <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> メソッドです。  
  
   
  
## 例  
 次の例のインスタンスを作成、 <xref:System.Numerics.BigInteger> オブジェクト以外の各整数型から <xref:System.UInt64>します。 呼び出して、 <xref:System.Numerics.BigInteger.Equals%28System.Int64%29> を比較するメソッド、 <xref:System.Numerics.BigInteger> に渡された元の整数値を持つ値、 <xref:System.Numerics.BigInteger> コンス トラクターです。 出力に示すようには、いずれの場合、値が等しければします。  
  
 [!code-cpp[System.Numerics.BigInteger.Equals\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cpp/equals.cpp#1)]
 [!code-csharp[System.Numerics.BigInteger.Equals\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cs/EqualsExample1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Equals\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/vb/EqualsExample1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Numerics.BigInteger other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Numerics.BigInteger other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="other">比較対象のオブジェクト。</param>
        <summary>示す値を返すかどうか、現在のインスタンスと、指定した <see cref="T:System.Numerics.BigInteger" /> オブジェクトが同じ値を持ちます。</summary>
        <returns>
          <see langword="true" /> この場合 <see cref="T:System.Numerics.BigInteger" /> オブジェクトおよび <paramref name="other" /> 値が同じである。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、 <xref:System.IEquatable%601> インターフェイスし、実行よりもわずかに良い <xref:System.Numerics.BigInteger.Equals%28System.Object%29> 変換があるないため、 `other` パラメーターを <xref:System.Numerics.BigInteger> オブジェクトです。  
  
 2 つの間の関係を決定する <xref:System.Numerics.BigInteger> 等しいかどうかをテストするだけではなくオブジェクトを呼び出す、 <xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29?displayProperty=fullName> メソッドです。  
  
   
  
## 例  
 次の例では、Epsilon 示す等しいかどうかを判断する Earth からの距離に地球からいくつかの星の距離の概算値を比較します。 この例の各オーバー ロードを使用して、 <xref:System.Numerics.BigInteger.Equals%2A> 等しいかどうかをテストするメソッドです。  
  
 [!code-cpp[System.Numerics.BigInteger.Equals\#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cpp/equals2.cpp#2)]
 [!code-csharp[System.Numerics.BigInteger.Equals\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cs/EqualsExample1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.Equals\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/vb/EqualsExample1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>2.3.98.1</AssemblyVersion>
        <AssemblyVersion>3.98.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">比較対象のオブジェクト。</param>
        <summary>現在のインスタンスの値と指定されたオブジェクトの値が等しいかどうかを示す値を返します。</summary>
        <returns>
          <paramref name="obj" /> 引数が <see cref="T:System.Numerics.BigInteger" /> オブジェクトで、その値が現在の <see cref="T:System.Numerics.BigInteger" /> インスタンスの値と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 If the **parameterReference tag is not supported!!!!**  
 argument is not a <xref:System.Numerics.BigInteger> value, the method returns **languageKeyword tag is not supported!!!!**  
. The method returns**languageKeyword tag is not supported!!!!**  
 only if **parameterReference tag is not supported!!!!**  
 is a <xref:System.Numerics.BigInteger> instance whose value is equal to the current instance.  
  
 To determine the relationship between the two objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.Object%29> method.  
  
   
  
## 例  
 The following example defines parallel <xref:System.Object> and <xref:System.Numerics.BigInteger> arrays. Each element of one array has the same value as the corresponding element of the second array. As the output from the example shows, the instance in the <xref:System.Numerics.BigInteger> array is considered to be equal to the instance in the <xref:System.Object> array only if the latter is a <xref:System.Numerics.BigInteger> and their values are equal.  
  
 [!code-csharp[System.Numerics.BigInteger.Equals\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cs/Equals_Obj1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Equals\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/vb/Equals_Obj1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (ulong other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(unsigned int64 other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Equals(System.UInt64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="other">比較する符号なし 64 ビット整数。</param>
        <summary>現在のインスタンスの値と符号なし 64 ビット整数の値が等しいかどうかを示す値を返します。</summary>
        <returns>
          <see langword="true" /> 現在のインスタンスと 64 ビットの符号なし整数の値が等しい場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 等しいかどうかテストするだけではなく 2 つのオブジェクト間の関係を調べるを呼び出して、 <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> メソッドです。  
  
   
  
## 例  
 次の例では、Epsilon 示す等しいかどうかを判断する Earth からの距離に地球からいくつかの星の距離の概算値を比較します。 この例の各オーバー ロードを使用して、 <xref:System.Numerics.BigInteger.Equals%2A> 等しいかどうかをテストするメソッドです。  
  
 [!code-cpp[System.Numerics.BigInteger.Equals\#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cpp/equals2.cpp#2)]
 [!code-csharp[System.Numerics.BigInteger.Equals\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cs/EqualsExample1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.Equals\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/vb/EqualsExample1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>2.3.98.1</AssemblyVersion>
        <AssemblyVersion>3.98.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のハッシュ コードを返す <see cref="T:System.Numerics.BigInteger" /> オブジェクトです。</summary>
        <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GreatestCommonDivisor">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger GreatestCommonDivisor (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger GreatestCommonDivisor(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>2.3.98.1</AssemblyVersion>
        <AssemblyVersion>3.98.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">最初の値。</param>
        <param name="right">2 番目の値。</param>
        <summary>2 つの最大公約数を検索 <see cref="T:System.Numerics.BigInteger" /> 値。</summary>
        <returns>最大公約数 <paramref name="left" /> と <paramref name="right" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 最大公約数を最大数は、2 つ <xref:System.Numerics.BigInteger> 値を返さず、残りの部分に分けることができます。  
  
 場合、 `left` と `right` パラメーターが 0 以外の数値のメソッドは、1 のすべての数値を分けることがあるため常に 1 で、最低の値を返します。 いずれかのパラメーターが 0 の場合は、パラメーターに 0 以外の絶対値を返します。 両方の値が 0 の場合は、このメソッドは 0 を返します。  
  
> [!NOTE]
>  コンピューティングの非常に大きな値の最大公約数 `left` と `right` 非常に時間のかかる操作を指定できます。  
  
 によって返される値、 <xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A> メソッドは正の符号に関係なく常に、 `left` と `right` パラメーター。  
  
   
  
## 例  
 次の例への呼び出し、 <xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A> メソッドと、例外処理に関する有用な情報を提供するために必要な <xref:System.ArgumentOutOfRangeException>です。 結果は、これら 2 つの数値の最大公約数が 1 であることを示します。  
  
 [!code-csharp[System.Numeric.BigInteger.Class\#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#10)]
 [!code-vb[System.Numeric.BigInteger.Class\#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEven">
      <MemberSignature Language="C#" Value="public bool IsEven { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEven" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.IsEven" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示すかどうか、現在の値 <see cref="T:System.Numerics.BigInteger" /> オブジェクトは、偶数です。</summary>
        <value>
          <see langword="true" /> 場合の値、 <see cref="T:System.Numerics.BigInteger" /> オブジェクトは、偶数。 そうしないと、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、便利な機能を示すかどうか、 <xref:System.Numerics.BigInteger> 値は 2 で均等に分割します。 次の式と同等です。  
  
 \[C\#\]  
  
```  
value % 2 == 0;  
```  
  
 \[Visual Basic\]  
  
```  
value Mod 2 = 0  
```  
  
 場合は、現在の <xref:System.Numerics.BigInteger> オブジェクトが <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=fullName>, 、プロパティの戻り値を `true`します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOne">
      <MemberSignature Language="C#" Value="public bool IsOne { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOne" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.IsOne" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>2.3.98.1</AssemblyVersion>
        <AssemblyVersion>3.98.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示すかどうか、現在の <see cref="T:System.Numerics.BigInteger" /> オブジェクトが <see cref="P:System.Numerics.BigInteger.One" />です。</summary>
        <value>
          <see langword="true" /> 場合の値、 <see cref="T:System.Numerics.BigInteger" /> オブジェクトが <see cref="P:System.Numerics.BigInteger.One" />。 そうしないと、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、1 つの他の比較よりもパフォーマンスが著しく向上をなど、 `thisBigInteger.Equals(BigInteger.One)`です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.BigInteger.One" />
      </Docs>
    </Member>
    <Member MemberName="IsPowerOfTwo">
      <MemberSignature Language="C#" Value="public bool IsPowerOfTwo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPowerOfTwo" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.IsPowerOfTwo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示すかどうか、現在の値 <see cref="T:System.Numerics.BigInteger" /> オブジェクトが 2 の累乗します。</summary>
        <value>
          <see langword="true" /> 場合の値、 <see cref="T:System.Numerics.BigInteger" /> オブジェクトが 2 の累乗。 そうしないと、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを決定するかどうか、 <xref:System.Numerics.BigInteger> 値が 0 以外に 1 ビットを設定します。 つまり、返されることを `true` 場合、現在の値 <xref:System.Numerics.BigInteger> オブジェクトが 1 \(つまり、2<sup>0</sup>\) または 2 つより強力です。 返す `false` 場合は、現在の <xref:System.Numerics.BigInteger> オブジェクトは、0 です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsZero">
      <MemberSignature Language="C#" Value="public bool IsZero { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsZero" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.IsZero" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>2.3.98.1</AssemblyVersion>
        <AssemblyVersion>3.98.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示すかどうか、現在の <see cref="T:System.Numerics.BigInteger" /> オブジェクトが <see cref="P:System.Numerics.BigInteger.Zero" />です。</summary>
        <value>
          <see langword="true" /> 場合の値、 <see cref="T:System.Numerics.BigInteger" /> オブジェクトが <see cref="P:System.Numerics.BigInteger.Zero" />。 そうしないと、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティよりもパフォーマンスが著しく向上 `BigInteger.Equals(BigInteger.Zero)`します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.BigInteger.Zero" />
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static double Log (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">対数を求める対象の数値。</param>
        <summary>指定した数の自然 \(底 <see langword="e" />\) 対数を返します。</summary>
        <returns>自然 \(基本 <see langword="e" />\) の対数 <paramref name="value" />, の「解説」表に示すようにします。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `value` 底 10 の数値としてパラメーターを指定します。  
  
 このメソッドの値の符号に依存、正確な返す `value`, 次の表に示すようです。  
  
|サインアウト `value` パラメーター|戻り値|  
|---------------------------|---------|  
|正|自然対数 `value`です。 つまり、ln `value`, 、またはログ e`value`します。|  
|0|<xref:System.Double.NegativeInfinity>。|  
|負|<xref:System.Double.NaN>。|  
  
 底 10 の対数を計算する、 <xref:System.Numerics.BigInteger> 値を呼び出し、 <xref:System.Numerics.BigInteger.Log10%2A> メソッドです。 別の基数で数の対数を計算するには、呼び出し、 <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29> メソッドです。  
  
 呼び出すことによって、数値の平方根を求めることができます、 <xref:System.Numerics.BigInteger.Log%2A> メソッドと共に、 <xref:System.Math.Exp%2A?displayProperty=fullName> メソッドです。 結果は <xref:System.Double.PositiveInfinity?displayProperty=fullName> 、結果がよりも大きい場合 <xref:System.Double.MaxValue?displayProperty=fullName>します。 次の例の配列内の各要素の平方根を計算する <xref:System.Numerics.BigInteger> 値。  
  
 [!code-csharp[System.Numerics.BigInteger.Log\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.biginteger.log/cs/log1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Log\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.biginteger.log/vb/log1.vb#1)]  
  
 このメソッドに対応、 <xref:System.Math.Log%28System.Double%29?displayProperty=fullName> のプリミティブ数値型のメソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">自然対数 <paramref name="value" /> の範囲外には、 <see cref="T:System.Double" /> データ型。</exception>
        <altmember cref="M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static double Log (System.Numerics.BigInteger value, double baseValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log(valuetype System.Numerics.BigInteger value, float64 baseValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
        <Parameter Name="baseValue" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">対数を検索する対象の数値。</param>
        <param name="baseValue">対数の底。</param>
        <summary>指定した数値の指定した底での対数を返します。</summary>
        <returns>基本 <paramref name="baseValue" /> の対数 <paramref name="value" />, の「解説」表に示すようにします。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `value` と `baseValue` パラメーターが 10 個の番号を基準として指定します。  
  
 Precise を返すメソッドの値の符号に依存 `value` の記号との値に `baseValue`, 次の表に示すようです。  
  
|`value` パラメーター|`baseValue` パラメーター|戻り値|  
|--------------------|------------------------|---------|  
|`value` \> 0|\(0 \< `baseValue` \< 1\) \- または \-\(`baseValue` \> 1\)|ログベース Value\(`value`\)|  
|`value` \< 0|\(任意の値\)|<xref:System.Double.NaN?displayProperty=fullName>|  
|\(任意の値\)|`baseValue` \< 0|<xref:System.Double.NaN?displayProperty=fullName>|  
|`value` \!\= 1|`baseValue` \= 0|<xref:System.Double.NaN?displayProperty=fullName>|  
|`value` \!\= 1|`baseValue` \= <xref:System.Double.PositiveInfinity?displayProperty=fullName>|<xref:System.Double.NaN?displayProperty=fullName>|  
|\(任意の値\)|`baseValue` \= <xref:System.Double.NaN?displayProperty=fullName>|<xref:System.Double.NaN?displayProperty=fullName>|  
|\(任意の値\)|`baseValue` \= 1|<xref:System.Double.NaN?displayProperty=fullName>|  
|`value` \= 0|0 \< `baseValue` \< 1|<xref:System.Double.PositiveInfinity?displayProperty=fullName>|  
|`value` \= 0|`baseValue` \> 1|<xref:System.Double.PositiveInfinity?displayProperty=fullName>|  
|`value` \= 1|`baseValue` \= 0|0|  
|`value` \= 1|`baseValue` \= <xref:System.Double.PositiveInfinity?displayProperty=fullName>|0|  
  
 底 10 の対数を計算する、 <xref:System.Numerics.BigInteger> 値を呼び出し、 <xref:System.Numerics.BigInteger.Log10%2A> メソッドです。 数値の自然対数を計算するには、呼び出し、 <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29> メソッドです。  
  
 このメソッドに対応、 <xref:System.Math.Log%2A?displayProperty=fullName> のプリミティブ数値型のメソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">ログ <paramref name="value" /> がの範囲外の <see cref="T:System.Double" /> データ型。</exception>
        <altmember cref="M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public static double Log10 (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log10(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">対数を検索する対象の数値。</param>
        <summary>指定した数の底 10 の対数を返します。</summary>
        <returns>底 10 の対数 <paramref name="value" />, の「解説」表に示すようにします。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `value` 底 10 の数値としてパラメーターを指定します。  
  
 Precise を返すメソッドの値の符号に依存 `value`, 次の表を示します。  
  
|Value パラメーターの符号|戻り値|  
|---------------------|---------|  
|正|底 10 の log `value`; は、ログイン10`value`します。|  
|0|<xref:System.Double.NegativeInfinity?displayProperty=fullName>。|  
|負|<xref:System.Double.NaN?displayProperty=fullName>。|  
  
 自然対数を計算する、 <xref:System.Numerics.BigInteger> 値を呼び出し、 <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29?displayProperty=fullName> メソッドです。 別の基数で数の対数を計算するには、呼び出し、 <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29?displayProperty=fullName> メソッドです。  
  
 このメソッドに対応、 <xref:System.Math.Log10%2A?displayProperty=fullName> のプリミティブ数値型のメソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">底 10 の log <paramref name="value" /> の範囲外には、 <see cref="T:System.Double" /> データ型。</exception>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Max (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Max(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値。</param>
        <summary>2 つのうち、大きい方を返します <see cref="T:System.Numerics.BigInteger" /> 値。</summary>
        <returns>
          <paramref name="left" /> または <paramref name="right" /> パラメーター、大きい方します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドに対応、 <xref:System.Math.Max%2A?displayProperty=fullName> のプリミティブ数値型のメソッドです。  
  
   
  
## 例  
 次の例では、 <xref:System.Numerics.BigInteger.Max%2A> メソッドの配列の最大数を選択する <xref:System.Numerics.BigInteger> 値。  
  
 [!code-csharp[System.Numerics.BigInteger.Max\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Max/cs/Max1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Max\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Max/vb/Max1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Min (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Min(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値。</param>
        <summary>2 つのうち、小さい方を返します <see cref="T:System.Numerics.BigInteger" /> 値。</summary>
        <returns>
          <paramref name="left" /> または <paramref name="right" /> パラメーター、小さい方です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドに対応、 <xref:System.Math.Min%2A?displayProperty=fullName> のプリミティブ数値型のメソッドです。  
  
   
  
## 例  
 次の例では、 <xref:System.Numerics.BigInteger.Min%2A> メソッドの配列の最小数を選択する <xref:System.Numerics.BigInteger> 値。  
  
 [!code-csharp[System.Numerics.BigInteger.Min\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Min/cs/Min1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Min\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Min/vb/Min1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="MinusOne">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger MinusOne { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Numerics.BigInteger MinusOne" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.MinusOne" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>負の 1 \(\-1\) を表す値を取得します。</summary>
        <value>値が負の 1 \(\-1\) である整数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.MinusOne%2A> プロパティが比較に使用される、 <xref:System.Numerics.BigInteger> 値を\-1 にする場合は\-1 を割り当てるまたは、 <xref:System.Numerics.BigInteger> オブジェクトです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.BigInteger.One" />
        <altmember cref="P:System.Numerics.BigInteger.IsOne" />
      </Docs>
    </Member>
    <Member MemberName="ModPow">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger ModPow (System.Numerics.BigInteger value, System.Numerics.BigInteger exponent, System.Numerics.BigInteger modulus);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger ModPow(valuetype System.Numerics.BigInteger value, valuetype System.Numerics.BigInteger exponent, valuetype System.Numerics.BigInteger modulus) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
        <Parameter Name="exponent" Type="System.Numerics.BigInteger" />
        <Parameter Name="modulus" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">発生させるのには、番号、 <c>exponent</c> 電源です。</param>
        <param name="exponent">指数 <c>value</c> しています。</param>
        <param name="modulus">除算する数値 <c>value</c> を累乗した、 <c>exponent</c> 電源です。</param>
        <summary>ある数値を別の数値で累乗し、それをさらに別の数値で割った結果生じた剰余を求めます。</summary>
        <returns>割った結果生じた剰余 <paramref name="value" /><sup>指数</sup> によって <paramref name="modulus" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.ModPow%2A> メソッドは、次の式を評価します。  
  
 \(baseValue ^ exponent\) Mod modulus  
  
 指数演算を実行する <xref:System.Numerics.BigInteger> 剰余、なしの値を使用して、 <xref:System.Numerics.BigInteger.Pow%2A> メソッドです。  
  
   
  
## 例  
 次の例は、呼び出し元の簡単な図、 <xref:System.Numerics.BigInteger.ModPow%2A> メソッドです。  
  
 [!code-csharp[System.Numerics.BigInteger.ModPow\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ModPow/cs/ModPow1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.ModPow\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ModPow/vb/ModPow1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException">
          <paramref name="modulus" /> 0 です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="exponent" /> は負の値です。</exception>
        <altmember cref="M:System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Multiply (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Multiply(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">乗算対象の最初の数。</param>
        <param name="right">乗算対象の 2 番目の数。</param>
        <summary>2 つの製品を返す <see cref="T:System.Numerics.BigInteger" /> 値。</summary>
        <returns>製品、 <paramref name="left" /> と <paramref name="right" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.Multiply%2A> 演算子のオーバー ロードをサポートしていない言語のメソッドを実装します。 その動作は、乗算演算子を使用する乗算と同じです。 さらに、 <xref:System.Numerics.BigInteger.Multiply%2A> メソッドがインスタンス化するとき、乗算演算子の便利な代替手段は、 <xref:System.Numerics.BigInteger> 変数代入することによって、乗算の結果である製品の次の例に示すようにします。  
  
 [!code-csharp[System.Numerics.BigInteger.OperationMethods\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.OperationMethods\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#1)]  
  
 必要に応じて、このメソッドに自動的に実行する他の整数型の暗黙的な変換 <xref:System.Numerics.BigInteger> オブジェクトです。 次のセクションで例に示すはここで、 <xref:System.Numerics.BigInteger.Multiply%2A> メソッドが渡される 2 つ <xref:System.Int64> 値。  
  
   
  
## 例  
 次の例は、2 つの長整数値で乗算を実行しようとします。 結果は、長整数の範囲を超えているため、 <xref:System.OverflowException> がスローされると、 <xref:System.Numerics.BigInteger.Multiply%2A> 乗算を処理するメソッドが呼び出されます。 C\# が必要であるかを使用することに注意してください、 `checked` \(この例では\) のようにキーワードまたは `/checked+` コンパイラ オプションは、数値オーバーフローについては、例外がスローされるかどうかを確認します。  
  
 [!code-csharp[System.Numeric.BigInteger.Class\#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#7)]
 [!code-vb[System.Numeric.BigInteger.Class\#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Negate (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Negate(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">否定する値。</param>
        <summary>指定した符号を反転 <see cref="T:System.Numerics.BigInteger" /> 値。</summary>
        <returns>結果、 <paramref name="value" /> 負の 1 \(\-1\) を掛けた値パラメーターです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 否定は、数値の加法に関する逆元を取得します。 数値の加法に関する逆元は、元の数に追加されると、0 の値を生成する番号です。  
  
 <xref:System.Numerics.BigInteger.Negate%2A> カスタム演算子をサポートしていない言語のメソッドを実装します。 その動作は、単項否定演算子を使用した否定演算と同じです。 さらに、 <xref:System.Numerics.BigInteger.Negate%2A> メソッドは、インスタンス化する場合、否定演算子の便利な代用、 <xref:System.Numerics.BigInteger> 変数に次の例で示すようにします。  
  
 [!code-csharp[System.Numerics.BigInteger.OperationMethods\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#4)]
 [!code-vb[System.Numerics.BigInteger.OperationMethods\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#4)]  
  
   
  
## 例  
 次の例の値を否定する 3 つの方法を示しています、 <xref:System.Numerics.BigInteger> オブジェクトです。  
  
 [!code-csharp[System.Numeric.BigInteger.Class\#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#16)]
 [!code-vb[System.Numeric.BigInteger.Class\#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="One">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger One { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Numerics.BigInteger One" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.One" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>2.3.98.1</AssemblyVersion>
        <AssemblyVersion>3.98.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>正の 1 \(1\) を表す値を取得します。</summary>
        <value>値が正の 1 \(1\) であるオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.One%2A> プロパティが比較に使用される通常の <xref:System.Numerics.BigInteger> 値を 1 または 1 を割り当てる、 <xref:System.Numerics.BigInteger> オブジェクトです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.BigInteger.IsOne" />
        <altmember cref="P:System.Numerics.BigInteger.MinusOne" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger op_Addition (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Addition(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>2.3.98.1</AssemblyVersion>
        <AssemblyVersion>3.98.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">加算する 1 番目の値。</param>
        <param name="right">加算する 2 番目の値。</param>
        <summary>指定した 2 つの値を加算 <see cref="T:System.Numerics.BigInteger" /> オブジェクトです。</summary>
        <returns>
          <paramref name="left" /> と <paramref name="right" /> の合計。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_Addition%2A> メソッド定義の加算演算 <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numeric.BigInteger.Class\#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#12)]
 [!code-vb[System.Numeric.BigInteger.Class\#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#12)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、 <xref:System.Numerics.BigInteger.Add%2A> メソッド代わりにします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="op_BitwiseAnd">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger op_BitwiseAnd (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_BitwiseAnd(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">最初の値。</param>
        <param name="right">2 番目の値。</param>
        <summary>排他的 or 演算 <see langword="And" /> 2 つの操作 <see cref="T:System.Numerics.BigInteger" /> 値。</summary>
        <returns>ビットごとの結果 <see langword="And" /> 操作します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> メソッドは、ビットごとの定義 `And` 操作 <xref:System.Numerics.BigInteger> 値。 ビットごと `And` 対応するビットを結果ビット場合にのみ、設定操作 `left` と `right` 設定されて、次の表に示すようにします。  
  
|内のビットします。 `left`|内のビットします。 `right`|内のビットします。|  
|----------------------|-----------------------|---------------|  
|0|0|0|  
|1|0|0|  
|1|1|1|  
|0|1|0|  
  
 <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> メソッドは、次のようなコードを使用します。  
  
 [!code-csharp[System.Numerics.BigInteger.Operators\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Operators\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#1)]  
  
 <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> 演算を実行メソッド `And` 2 つの操作 <xref:System.Numerics.BigInteger> 値の場合と同様の両方で 2 の補数表現仮想符号拡張とします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_BitwiseOr">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger op_BitwiseOr (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_BitwiseOr(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">最初の値。</param>
        <param name="right">2 番目の値。</param>
        <summary>排他的 or 演算 <see langword="Or" /> 2 つの操作 <see cref="T:System.Numerics.BigInteger" /> 値。</summary>
        <returns>ビットごとの結果 <see langword="Or" /> 操作します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> メソッドは、ビットごとの定義 `Or` 操作 <xref:System.Numerics.BigInteger> 値。 ビットごと `Or` 操作は結果ビット場合にのみ、設定に対応するビットの一方または両方 `left` と `right` 次の表に示すように設定されます。  
  
|内のビットします。 `left`|内のビットします。 `right`|内のビットします。|  
|----------------------|-----------------------|---------------|  
|0|0|0|  
|1|0|1|  
|1|1|1|  
|0|1|1|  
  
 <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> メソッドは、次のようなコードを使用します。  
  
 [!code-csharp[System.Numerics.BigInteger.Operators\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.Operators\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#2)]  
  
 <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> 演算を実行メソッド `Or` 2 つの操作 <xref:System.Numerics.BigInteger> 値の場合と同様の両方で 2 の補数表現仮想符号拡張とします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Decrement">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger op_Decrement (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Decrement(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">デクリメントする値。</param>
        <summary>デクリメント、 <see cref="T:System.Numerics.BigInteger" /> 値を 1 です。</summary>
        <returns>値、 <paramref name="value" /> パラメーターを 1 だけデクリメントします。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_Decrement%2A> メソッド定義のデクリメント演算 <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numeric.BigInteger.Class\#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#17)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、 <xref:System.Numerics.BigInteger.Subtract%2A> メソッド代わりにします。 例:  
  
 [!code-csharp[System.Numerics.BigInteger.Operators\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Operators\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#3)]  
  
 <xref:System.Numerics.BigInteger> オブジェクトは不変で、 <xref:System.Numerics.BigInteger.op_Decrement%2A> 演算子が、新たに作成 <xref:System.Numerics.BigInteger> 値は 1 つのオブジェクトより小さい <xref:System.Numerics.BigInteger> によって表されるオブジェクト `value`します。 このためにを繰り返し呼び出す <xref:System.Numerics.BigInteger.op_Decrement%2A> 高価な場合があります。  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger op_Division (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Division(valuetype System.Numerics.BigInteger dividend, valuetype System.Numerics.BigInteger divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>2.3.98.1</AssemblyVersion>
        <AssemblyVersion>3.98.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.BigInteger" />
        <Parameter Name="divisor" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="dividend">被除数。</param>
        <param name="divisor">除数。</param>
        <summary>指定された <see cref="T:System.Numerics.BigInteger" /> で指定した別の値を <see cref="T:System.Numerics.BigInteger" /> 整数除算を使用した値です。</summary>
        <returns>除算の結果 \(整数\)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_Division%2A> メソッド定義の除算演算 <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numeric.BigInteger.Class\#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#13)]
 [!code-vb[System.Numeric.BigInteger.Class\#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#13)]  
  
 カスタム演算子と演算子のオーバー ロードをサポートしない言語を呼び出すことができます、 <xref:System.Numerics.BigInteger.Divide%2A> メソッド代わりにします。  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.Divide%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>  
  
## 例  
 次の例の配列を作成する <xref:System.Numerics.BigInteger> 値。 使用する除算演算の商として次の各要素を使用して、 <xref:System.Numerics.BigInteger.Divide%2A> メソッド、除算演算子 \(\/\)、および <xref:System.Numerics.BigInteger.DivRem%2A> メソッドです。  
  
 [!code-csharp[System.Numerics.BigInteger.Divide\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/cs/Divide1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Divide\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/vb/Divide1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException">
          <paramref name="divisor" /> 0 \(ゼロ\) です。</exception>
        <altmember cref="M:System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値。</param>
        <summary>A と符号付き長整数値かどうかを示す値を返す <see cref="T:System.Numerics.BigInteger" /> 値が等しい。</summary>
        <returns>
          <see langword="true" /> 場合、 <paramref name="left" /> と <paramref name="right" /> パラメーター値が同じである。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_Equality%28System.Int64%2CSystem.Numerics.BigInteger%29> メソッド定義の等値比較演算 <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numerics.BigInteger.Operators\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#4)]
 [!code-vb[System.Numerics.BigInteger.Operators\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#4)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、 <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName> メソッドを代わりにインスタンス化します。  
  
 場合 `left` は、 <xref:System.Byte>, 、<xref:System.Int16>, 、<xref:System.Int32>, 、<xref:System.SByte>, 、<xref:System.UInt16>, 、または <xref:System.UInt32> 値、それが暗黙的に変換する、 <xref:System.Int64> 、操作を実行するときの値します。  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Inequality" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値。</param>
        <summary>示す値を返すかどうか、 <see cref="T:System.Numerics.BigInteger" /> 値と符号付き長整数値が等しい。</summary>
        <returns>
          <see langword="true" /> 場合、 <paramref name="left" /> と <paramref name="right" /> パラメーター値が同じである。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Int64%29> メソッド定義の等値比較演算 <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numerics.BigInteger.Operators\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#5)]
 [!code-vb[System.Numerics.BigInteger.Operators\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#5)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、 <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName> メソッドを代わりにインスタンス化します。  
  
 場合 `right` は、 <xref:System.Byte>, 、<xref:System.Int16>, 、<xref:System.Int32>, 、<xref:System.SByte>, 、<xref:System.UInt16>, 、または <xref:System.UInt32> 値、それが暗黙的に変換する、 <xref:System.Int64> 、操作を実行するときの値します。  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Inequality" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>2.3.98.1</AssemblyVersion>
        <AssemblyVersion>3.98.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値。</param>
        <summary>示す値を返すかどうか 2 つの値 <see cref="T:System.Numerics.BigInteger" /> オブジェクトが等しい。</summary>
        <returns>
          <see langword="true" /> 場合、 <paramref name="left" /> と <paramref name="right" /> パラメーター値が同じである。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> メソッドに対して等値演算子の動作を定義する <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numeric.BigInteger.Class\#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#19)]
 [!code-vb[System.Numeric.BigInteger.Class\#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#19)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、 <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=fullName> メソッドを代わりにインスタンス化します。  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.Equals" />
        <altmember cref="Overload:System.Numerics.BigInteger.op_Inequality" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値。</param>
        <summary>示す値を返すかどうか、 <see cref="T:System.Numerics.BigInteger" /> 値と符号なし長整数値が等しい。</summary>
        <returns>
          <see langword="true" /> 場合、 <paramref name="left" /> と <paramref name="right" /> パラメーター値が同じである。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.UInt64%29> メソッド定義の等値比較演算 <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numerics.BigInteger.Operators\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#6)]
 [!code-vb[System.Numerics.BigInteger.Operators\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#6)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、 <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=fullName> メソッドを代わりにインスタンス化します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Inequality" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値。</param>
        <summary>A と符号なし長整数値かどうかを示す値を返す <see cref="T:System.Numerics.BigInteger" /> 値が等しい。</summary>
        <returns>
          <see langword="true" /> 場合、 <paramref name="left" /> と <paramref name="right" /> パラメーター値が同じである。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_Equality%28System.UInt64%2CSystem.Numerics.BigInteger%29> メソッド定義の等値比較演算 <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numerics.BigInteger.Operators\#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#7)]
 [!code-vb[System.Numerics.BigInteger.Operators\#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#7)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、 <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=fullName> メソッドを代わりにインスタンス化します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Inequality" />
      </Docs>
    </Member>
    <Member MemberName="op_ExclusiveOr">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger op_ExclusiveOr (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_ExclusiveOr(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">最初の値。</param>
        <param name="right">2 番目の値。</param>
        <summary>ビットごとの排他的実行 <see langword="Or" /> \(<see langword="XOr" />\) 2 つの操作 <see cref="T:System.Numerics.BigInteger" /> 値。</summary>
        <returns>ビットごとの結果 <see langword="Or" /> 操作します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 結果のビットごとの排他的 `Or` 操作が `true` 2 ビットの値が異なる以外の場合は `false`です。 次に示す、排他的な `Or` 操作します。  
  
|X のビット `left`|X のビット `right`|戻り値|  
|-------------------|--------------------|---------|  
|0|0|0|  
|0|1|1|  
|1|0|1|  
|1|1|0|  
  
 <xref:System.Numerics.BigInteger.op_ExclusiveOr%2A> メソッドは、次のようなコードを使用します。  
  
 [!code-csharp[System.Numerics.BigInteger.Operators\#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#8)]
 [!code-vb[System.Numerics.BigInteger.Operators\#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#8)]  
  
 <xref:System.Numerics.BigInteger.op_ExclusiveOr%2A> メソッドは排他的論理和を実行 `Or` 2 つの操作 <xref:System.Numerics.BigInteger> 値の場合と同様の両方で 2 の補数表現仮想符号拡張とします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger op_Explicit (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Explicit(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">変換する値、 <see cref="T:System.Numerics.BigInteger" />です。</param>
        <summary>明示的な変換を定義、 <see cref="T:System.Decimal" /> オブジェクトを <see cref="T:System.Numerics.BigInteger" /> 値。</summary>
        <returns>値を格納しているオブジェクト、 <paramref name="value" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 小数部、 `value` パラメーターは変換する前に切り捨てられます。  
  
 オーバー ロード、 <xref:System.Numerics.BigInteger.op_Explicit%2A> または元に使用するメソッドが型を定義、 <xref:System.Numerics.BigInteger> オブジェクトを変換できます。 から変換 <xref:System.Decimal> に <xref:System.Numerics.BigInteger> の小数部の切り捨てを含めることができる `value`, 、言語コンパイラはこの変換を自動的に実行されません。 \(C\#\) のキャスト演算子または変換関数の場合のみが変換を実行する代わりに、\(よう `CType` Visual Basic で\) を使用します。 それ以外の場合、コンパイラ エラーが表示されます。  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29?displayProperty=fullName>  
  
## 例  
 次の例の配列の個々 の要素を変換する <xref:System.Decimal> 値 <xref:System.Numerics.BigInteger> オブジェクト、および各変換の結果を表示します。 小数のことに注意してくださいの一部では、 <xref:System.Decimal> 値は変換中に切り捨てられます。  
  
 [!code-csharp[System.Numerics.BigInteger.Explicit\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/cs/Explicit1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Explicit\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/vb/Explicit1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger op_Explicit (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Explicit(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Double)~System.Numerics.BigInteger" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">変換する値、 <see cref="T:System.Numerics.BigInteger" />です。</param>
        <summary>明示的な変換を定義、 <see cref="T:System.Double" /> 値を <see cref="T:System.Numerics.BigInteger" /> 値。</summary>
        <returns>値を格納しているオブジェクト、 <paramref name="value" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 小数部、 `value` パラメーターは変換する前に切り捨てられます。  
  
 オーバー ロード、 <xref:System.Numerics.BigInteger.op_Explicit%2A> または元に使用するメソッドが型を定義、 <xref:System.Numerics.BigInteger> オブジェクトを変換できます。 から変換 <xref:System.Double> に <xref:System.Numerics.BigInteger> の小数部の切り捨てを含めることができる `value`, 、言語コンパイラはこの変換を自動的に実行されません。 \(C\#\) のキャスト演算子または変換関数の場合のみが変換を実行する代わりに、\(よう `CType` Visual Basic で\) を使用します。 それ以外の場合、コンパイラ エラーが表示されます。  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.%23ctor%28System.Double%29?displayProperty=fullName>  
  
## 例  
 次の例の配列の個々 の要素を変換する <xref:System.Double> 値 <xref:System.Numerics.BigInteger> オブジェクト、および各変換の結果を表示します。 小数のことに注意してくださいの一部では、 <xref:System.Double> 値は変換中に切り捨てられます。  
  
 [!code-csharp[System.Numerics.BigInteger.Explicit\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/cs/Explicit1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.Explicit\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/vb/Explicit1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> は <see cref="F:System.Double.NaN" /> です。  
  
 \-または\-  
  
 <paramref name="value" /> は <see cref="F:System.Double.PositiveInfinity" /> です。  
  
 \-または\-  
  
 <paramref name="value" /> は <see cref="F:System.Double.NegativeInfinity" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static byte op_Explicit (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int8 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Byte" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">変換する値、 <see cref="T:System.Byte" />です。</param>
        <summary>明示的な変換を定義、 <see cref="T:System.Numerics.BigInteger" /> オブジェクト符号なしバイト値から。</summary>
        <returns>値を格納しているオブジェクト、 <paramref name="value" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オーバー ロード、 <xref:System.Numerics.BigInteger.op_Explicit%2A> または元に使用するメソッドが型を定義、 <xref:System.Numerics.BigInteger> 変換することができます。 言語コンパイラは行いませんこの変換に自動的にデータの損失が生じる可能性があるためです。 \(C\#\) のキャスト演算子または変換関数の場合のみが変換を実行する代わりに、\(よう `CType` または `CByte` Visual Basic で\) を使用します。 それ以外の場合、コンパイラ エラーが表示されます。  
  
 スローするこの操作は、縮小変換を定義するため、 <xref:System.OverflowException> 実行時に場合は、 <xref:System.Numerics.BigInteger> の範囲外の値は、 <xref:System.Byte> データ型。 結果の精度の損失はありません <xref:System.Byte> 値の場合は、変換が成功します。  
  
   
  
## 例  
 次の例は、の変換を示しています。 <xref:System.Numerics.BigInteger> に <xref:System.Byte> 値。 処理され、 <xref:System.OverflowException> スローされるため、 <xref:System.Numerics.BigInteger> の範囲外の値は、 <xref:System.Byte> データ型。  
  
 [!code-csharp[System.Numeric.BigInteger.Explicit\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#1)]
 [!code-vb[System.Numeric.BigInteger.Explicit\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> は <see cref="F:System.Byte.MinValue" /> より小さい値です。  
  
 または  
  
 <paramref name="value" /> が <see cref="F:System.Byte.MaxValue" /> より大きくなっています。</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static decimal op_Explicit (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Decimal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">変換する値、 <see cref="T:System.Decimal" />です。</param>
        <summary>明示的な変換を定義、 <see cref="T:System.Numerics.BigInteger" /> オブジェクトを <see cref="T:System.Decimal" /> 値。</summary>
        <returns>値を格納しているオブジェクト、 <paramref name="value" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オーバー ロード、 <xref:System.Numerics.BigInteger.op_Explicit%2A> または元に使用するメソッドが型を定義、 <xref:System.Numerics.BigInteger> オブジェクトを変換できます。 言語コンパイラは行いませんこの変換に自動的にデータの損失が生じる可能性があるためです。 \(C\#\) のキャスト演算子または変換関数の場合のみが変換を実行する代わりに、\(よう `CType` または `CDec` Visual Basic で\) を使用します。  
  
 スローするこの操作は、縮小変換を定義するため、 <xref:System.OverflowException> 実行時に場合は、 <xref:System.Numerics.BigInteger> の範囲外の値は、 <xref:System.Decimal> データ型。  
  
   
  
## 例  
 次の例は、の変換を示しています。 <xref:System.Numerics.BigInteger> に <xref:System.Decimal> 値。 処理され、 <xref:System.OverflowException> スローされるため、 <xref:System.Numerics.BigInteger> の範囲外の値は、 <xref:System.Decimal> データ型。  
  
 [!code-csharp[System.Numeric.BigInteger.Explicit\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#2)]
 [!code-vb[System.Numeric.BigInteger.Explicit\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> は <see cref="F:System.Decimal.MinValue" /> より小さい値です。  
  
 または  
  
 <paramref name="value" /> が <see cref="F:System.Decimal.MaxValue" /> より大きくなっています。</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static double op_Explicit (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float64 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>2.3.98.1</AssemblyVersion>
        <AssemblyVersion>3.98.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">変換する値、 <see cref="T:System.Double" />です。</param>
        <summary>明示的な変換を定義、 <see cref="T:System.Numerics.BigInteger" /> オブジェクトを <see cref="T:System.Double" /> 値。</summary>
        <returns>値を格納しているオブジェクト、 <paramref name="value" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オーバー ロード、 <xref:System.Numerics.BigInteger.op_Explicit%2A> または元に使用するメソッドが型を定義、 <xref:System.Numerics.BigInteger> オブジェクトを変換できます。 言語コンパイラは行いませんこの変換に自動的にデータの損失が生じる可能性があるためです。 \(C\#\) のキャスト演算子または変換関数の場合のみが変換を実行する代わりに、\(よう `CType` または `CDbl` Visual Basic で\) を使用します。  
  
 <xref:System.Numerics.BigInteger> の範囲外に値があることができます、 <xref:System.Double> データ型のこの操作では、縮小変換です。 スローしない変換が成功しなかった場合、 <xref:System.OverflowException>です。 代わりに場合、 <xref:System.Numerics.BigInteger> 値より小さい <xref:System.Double.MinValue?displayProperty=fullName>, 、結果の <xref:System.Double> 値は <xref:System.Double.NegativeInfinity?displayProperty=fullName>です。 場合、 <xref:System.Numerics.BigInteger> 値が超える <xref:System.Double.MaxValue?displayProperty=fullName>, 、結果の <xref:System.Double> 値は <xref:System.Double.PositiveInfinity?displayProperty=fullName>です。  
  
 変換、 <xref:System.Numerics.BigInteger> に、 <xref:System.Double> 精度の損失が生じる可能性があります。 場合によっては、精度の損失が原因キャスト演算または変換操作が成功する場合でも、 <xref:System.Numerics.BigInteger> の範囲外の値は、 <xref:System.Double> データ型。 具体的な例を次に示します。 最大値を代入して、 <xref:System.Double> を 2 つ <xref:System.Numerics.BigInteger> 変数、1 つずつ <xref:System.Numerics.BigInteger> 9.999e291 と等しいかどうか 2 つの変数をテストして変数です。 呼び出しを予期したとおり、 <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29> メソッドは、それらが等しくないことを示しています。 ただし、大きい方の変換 <xref:System.Numerics.BigInteger> 値にバックアップ、 <xref:System.Double> が成功したが、 <xref:System.Numerics.BigInteger> 値を超えるようになりました <xref:System.Double.MaxValue?displayProperty=fullName>します。  
  
 [!code-csharp[System.Numerics.BigInteger.Explicit\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/cs/Explicit1.cs#4)]
 [!code-vb[System.Numerics.BigInteger.Explicit\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/vb/Explicit1.vb#4)]  
  
   
  
## 例  
 次の例は、の変換を示しています。 <xref:System.Numerics.BigInteger> に <xref:System.Double> 値。  
  
 [!code-csharp[System.Numeric.BigInteger.Explicit\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#3)]
 [!code-vb[System.Numeric.BigInteger.Explicit\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static short op_Explicit (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int16 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int16" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">16 ビット符号付き整数へと変換する値。</param>
        <summary>明示的な変換を定義、 <see cref="T:System.Numerics.BigInteger" /> オブジェクト 16 ビット符号付き整数値から。</summary>
        <returns>値を格納しているオブジェクト、 <paramref name="value" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オーバー ロード、 <xref:System.Numerics.BigInteger.op_Explicit%2A> または元に使用するメソッドが型を定義、 <xref:System.Numerics.BigInteger> 変換することができます。 言語コンパイラは行いませんこの変換に自動的にデータの損失が生じる可能性があるためです。 \(C\#\) のキャスト演算子または変換関数の場合のみが変換を実行する代わりに、\(よう `CType` または `CShort` Visual Basic で\) を使用します。 それ以外の場合、コンパイラ エラーが表示されます。  
  
 スローするこの操作は、縮小変換を定義するため、 <xref:System.OverflowException> 実行時に場合は、 <xref:System.Numerics.BigInteger> の範囲外の値は、 <xref:System.Int16> データ型。 結果の精度の損失はありません <xref:System.Int16> 値の場合は、変換が成功します。  
  
   
  
## 例  
 次の例では、変換の <xref:System.Numerics.BigInteger> 値 <xref:System.Int16> 値。 処理され、 <xref:System.OverflowException> スローされるため、 <xref:System.Numerics.BigInteger> の範囲外の値は、 <xref:System.Int16> データ型。  
  
 [!code-csharp[System.Numeric.BigInteger.Explicit\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#4)]
 [!code-vb[System.Numeric.BigInteger.Explicit\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> は <see cref="F:System.Int16.MinValue" /> より小さい値です。  
  
 または  
  
 <paramref name="value" /> が <see cref="F:System.Int16.MaxValue" /> より大きくなっています。</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static int op_Explicit (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int32 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int32" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>2.3.98.1</AssemblyVersion>
        <AssemblyVersion>3.98.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">32 ビット符号付き整数に変換する値。</param>
        <summary>明示的な変換を定義、 <see cref="T:System.Numerics.BigInteger" /> オブジェクトを 32 ビット符号付き整数値にします。</summary>
        <returns>値を格納しているオブジェクト、 <paramref name="value" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オーバー ロード、 <xref:System.Numerics.BigInteger.op_Explicit%2A> または元に使用するメソッドが型を定義、 <xref:System.Numerics.BigInteger> オブジェクトを変換できます。 言語コンパイラは行いませんこの変換に自動的にデータの損失が生じる可能性があるためです。 \(C\#\) のキャスト演算子または変換関数の場合のみが変換を実行する代わりに、\(よう `CType` または `CInt` Visual Basic で\) を使用します。 それ以外の場合、コンパイラ エラーが表示されます。  
  
 スローするこの操作は、縮小変換を定義するため、 <xref:System.OverflowException> 実行時に場合は、 <xref:System.Numerics.BigInteger> の範囲外の値は、 <xref:System.Int32> データ型。 結果の精度の損失はありません <xref:System.Int32> 値の場合は、変換が成功します。  
  
   
  
## 例  
 次の例では、変換の <xref:System.Numerics.BigInteger> 値 <xref:System.Int32> 値。 処理され、 <xref:System.OverflowException> スローされるため、 <xref:System.Numerics.BigInteger> の範囲外の値は、 <xref:System.Int32> データ型。  
  
 [!code-csharp[System.Numeric.BigInteger.Explicit\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#5)]
 [!code-vb[System.Numeric.BigInteger.Explicit\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> は <see cref="F:System.Int32.MinValue" /> より小さい値です。  
  
 または  
  
 <paramref name="value" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static long op_Explicit (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int64 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int64" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>2.3.98.1</AssemblyVersion>
        <AssemblyVersion>3.98.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">64 ビット符号付き整数へと変換する値。</param>
        <summary>明示的な変換を定義、 <see cref="T:System.Numerics.BigInteger" /> オブジェクトを 64 ビット符号付き整数値にします。</summary>
        <returns>値を格納しているオブジェクト、 <paramref name="value" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オーバー ロード、 <xref:System.Numerics.BigInteger.op_Explicit%2A> または元に使用するメソッドが型を定義、 <xref:System.Numerics.BigInteger> オブジェクトを変換できます。 言語コンパイラは行いませんこの変換に自動的にデータの損失が生じる可能性があるためです。 \(C\#\) のキャスト演算子または変換関数の場合のみが変換を実行する代わりに、\(よう `CType` または `CLng` Visual Basic で\) を使用します。 それ以外の場合、コンパイラ エラーが表示されます。  
  
 スローするこの操作は、縮小変換を定義するため、 <xref:System.OverflowException> 実行時に場合は、 <xref:System.Numerics.BigInteger> の範囲外の値は、 <xref:System.Int64> データ型。 結果の精度の損失はありません <xref:System.Int64> 値の場合は、変換が成功します。  
  
   
  
## 例  
 次の例では、変換の <xref:System.Numerics.BigInteger> 値 <xref:System.Int64> 値。 処理され、 <xref:System.OverflowException> スローされるため、 <xref:System.Numerics.BigInteger> の範囲外の値は、 <xref:System.Int64> データ型。  
  
 [!code-csharp[System.Numeric.BigInteger.Explicit\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#6)]
 [!code-vb[System.Numeric.BigInteger.Explicit\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> は <see cref="F:System.Int64.MinValue" /> より小さい値です。  
  
 または  
  
 <paramref name="value" /> が <see cref="F:System.Int64.MaxValue" /> より大きくなっています。</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static sbyte op_Explicit (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int8 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.SByte" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">符号付き 8 ビット値へと変換する値。</param>
        <summary>明示的な変換を定義、 <see cref="T:System.Numerics.BigInteger" /> オブジェクト符号付き 8 ビット値から。</summary>
        <returns>値を格納しているオブジェクト、 <paramref name="value" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オーバー ロード、 <xref:System.Numerics.BigInteger.op_Explicit%2A> または元に使用するメソッドが型を定義、 <xref:System.Numerics.BigInteger> オブジェクトを変換できます。 言語コンパイラは行いませんこの変換に自動的にデータの損失が生じる可能性があるためです。 \(C\#\) のキャスト演算子または変換関数の場合のみが変換を実行する代わりに、\(よう `CType` または `CSByte` Visual Basic で\) を使用します。 それ以外の場合、コンパイラ エラーが表示されます。  
  
 スローするこの操作は、縮小変換を定義するため、 <xref:System.OverflowException> 実行時に場合は、 <xref:System.Numerics.BigInteger> の範囲外の値は、 <xref:System.SByte> データ型。 結果の精度の損失はありません <xref:System.SByte> 値の場合は、変換が成功します。  
  
   
  
## 例  
 次の例では、変換の <xref:System.Numerics.BigInteger> 値 <xref:System.SByte> 値。 処理され、 <xref:System.OverflowException> スローされるため、 <xref:System.Numerics.BigInteger> の範囲外の値は、 <xref:System.SByte> データ型。  
  
 [!code-csharp[System.Numeric.BigInteger.Explicit\#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#7)]
 [!code-vb[System.Numeric.BigInteger.Explicit\#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#7)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="T:System.Int16" />
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> は <see cref="F:System.SByte.MinValue" /> より小さい値です。  
  
 または  
  
 <paramref name="value" /> が <see cref="F:System.SByte.MaxValue" /> より大きくなっています。</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static float op_Explicit (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float32 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Single" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">単精度浮動小数点値へと変換する値。</param>
        <summary>明示的な変換を定義、 <see cref="T:System.Numerics.BigInteger" /> オブジェクトを単精度浮動小数点値にします。</summary>
        <returns>最も近い表現を格納しているオブジェクト、 <paramref name="value" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オーバー ロード、 <xref:System.Numerics.BigInteger.op_Explicit%2A> または元に使用するメソッドが型を定義、 <xref:System.Numerics.BigInteger> オブジェクトを変換できます。 言語コンパイラは行いませんこの変換に自動的にデータの消失または精度の損失が生じる可能性があるためです。 \(C\#\) のキャスト演算子または変換関数の場合のみが変換を実行する代わりに、\(よう `CType` または `CSng` Visual Basic で\) を使用します。 それ以外の場合、コンパイラ エラーが表示されます。  
  
 <xref:System.Numerics.BigInteger> の範囲外に値があることができます、 <xref:System.Single> データ型のこの操作では、縮小変換です。 スローしない変換が成功しなかった場合、 <xref:System.OverflowException>です。 代わりに場合、 <xref:System.Numerics.BigInteger> 値より小さい <xref:System.Single.MinValue?displayProperty=fullName>, 、結果の <xref:System.Single> 値は <xref:System.Single.NegativeInfinity?displayProperty=fullName>です。 場合、 <xref:System.Numerics.BigInteger> 値が超える <xref:System.Single.MaxValue?displayProperty=fullName>, 、結果の <xref:System.Single> 値は <xref:System.Single.PositiveInfinity?displayProperty=fullName>です。  
  
 変換、 <xref:System.Numerics.BigInteger> に、 <xref:System.Single> 精度の損失が生じる可能性があります。 場合によっては、精度の損失が原因キャスト演算または変換操作が成功する場合でも、 <xref:System.Numerics.BigInteger> の範囲外の値は、 <xref:System.Single> データ型。 具体的な例を次に示します。 最大値を代入して、 <xref:System.Single> を 2 つ <xref:System.Numerics.BigInteger> 変数、1 つずつ <xref:System.Numerics.BigInteger> 9.999e291 と等しいかどうか 2 つの変数をテストして変数です。 呼び出しを予期したとおり、 <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29> メソッドは、それらが等しくないことを示しています。 ただし、大きい方の変換 <xref:System.Numerics.BigInteger> 値にバックアップ、 <xref:System.Single> が成功したが、 <xref:System.Numerics.BigInteger> 値を超えるようになりました <xref:System.Single.MaxValue?displayProperty=fullName>します。  
  
 [!code-csharp[System.Numerics.BigInteger.Explicit\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/cs/Explicit1.cs#5)]
 [!code-vb[System.Numerics.BigInteger.Explicit\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/vb/Explicit1.vb#5)]  
  
   
  
## 例  
 次の例は、の変換を示しています。 <xref:System.Numerics.BigInteger> 値を <xref:System.Single> 値。  
  
 [!code-csharp[System.Numeric.BigInteger.Explicit\#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#8)]
 [!code-vb[System.Numeric.BigInteger.Explicit\#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static ushort op_Explicit (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int16 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt16" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">符号なし 16 ビット整数へと変換する値。</param>
        <summary>明示的な変換を定義、 <see cref="T:System.Numerics.BigInteger" /> オブジェクト 16 ビット符号なし整数値から。</summary>
        <returns>値を格納しているオブジェクト、 <paramref name="value" /> パラメーター</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オーバー ロード、 <xref:System.Numerics.BigInteger.op_Explicit%2A> または元に使用するメソッドが型を定義、 <xref:System.Numerics.BigInteger> オブジェクトを変換できます。 言語コンパイラは行いませんこの変換に自動的にデータの損失が生じる可能性があるためです。 \(C\#\) のキャスト演算子または変換関数の場合のみが変換を実行する代わりに、\(よう `CType` または `CUShort` Visual Basic で\) を使用します。 それ以外の場合、コンパイラ エラーが表示されます。  
  
 スローするこの操作は、縮小変換を定義するため、 <xref:System.OverflowException> 実行時に場合は、 <xref:System.Numerics.BigInteger> の範囲外の値は、 <xref:System.UInt16> データ型。 結果の精度の損失はありません <xref:System.UInt16> 値の場合は、変換が成功します。  
  
   
  
## 例  
 次の例では、変換の <xref:System.Numerics.BigInteger> 値 <xref:System.UInt16> 値。 処理され、 <xref:System.OverflowException> スローされるため、 <xref:System.Numerics.BigInteger> の範囲外の値は、 <xref:System.UInt16> データ型。  
  
 [!code-csharp[System.Numeric.BigInteger.Explicit\#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#9)]
 [!code-vb[System.Numeric.BigInteger.Explicit\#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#9)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="T:System.Int32" />
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> は <see cref="F:System.UInt16.MinValue" /> より小さい値です。  
  
 または  
  
 <paramref name="value" /> が <see cref="F:System.UInt16.MaxValue" /> より大きくなっています。</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static uint op_Explicit (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int32 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt32" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">符号なし 32 ビット整数へと変換する値。</param>
        <summary>明示的な変換を定義、 <see cref="T:System.Numerics.BigInteger" /> オブジェクト符号なし 32 ビット整数値から。</summary>
        <returns>値を格納しているオブジェクト、 <paramref name="value" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オーバー ロード、 <xref:System.Numerics.BigInteger.op_Explicit%2A> または元に使用するメソッドが型を定義、 <xref:System.Numerics.BigInteger> オブジェクトを変換できます。 言語コンパイラは行いませんこの変換に自動的にデータの損失が生じる可能性があるためです。 \(C\#\) のキャスト演算子または変換関数の場合のみが変換を実行する代わりに、\(よう `CType` または `CUInt` Visual Basic で\) を使用します。 それ以外の場合、コンパイラ エラーが表示されます。  
  
 スローするこの操作は、縮小変換を定義するため、 <xref:System.OverflowException> 実行時に場合は、 <xref:System.Numerics.BigInteger> の範囲外の値は、 <xref:System.UInt32> データ型。 結果の精度の損失はありません <xref:System.UInt32> 値の場合は、変換が成功します。  
  
   
  
## 例  
 次の例では、変換の <xref:System.Numerics.BigInteger> 値 <xref:System.UInt32> 値。 処理され、 <xref:System.OverflowException> スローされるため、 <xref:System.Numerics.BigInteger> の範囲外の値は、 <xref:System.UInt32> データ型。  
  
 [!code-csharp[System.Numeric.BigInteger.Explicit\#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#10)]
 [!code-vb[System.Numeric.BigInteger.Explicit\#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#10)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="T:System.Int64" />
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> は <see cref="F:System.UInt32.MinValue" /> より小さい値です。  
  
 または  
  
 <paramref name="value" /> が <see cref="F:System.UInt32.MaxValue" /> より大きくなっています。</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static ulong op_Explicit (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int64 op_Explicit(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt64" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">符号なし 64 ビット整数へと変換する値。</param>
        <summary>明示的な変換を定義、 <see cref="T:System.Numerics.BigInteger" /> オブジェクトを 64 ビット符号なし整数値にします。</summary>
        <returns>値を格納しているオブジェクト、 <paramref name="value" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オーバー ロード、 <xref:System.Numerics.BigInteger.op_Explicit%2A> または元に使用するメソッドが型を定義、 <xref:System.Numerics.BigInteger> オブジェクトを変換できます。 言語コンパイラは行いませんこの変換に自動的にデータの損失が生じる可能性があるためです。 \(C\#\) のキャスト演算子または変換関数の場合のみが変換を実行する代わりに、\(よう `CType` または `CULng` Visual Basic で\) を使用します。 それ以外の場合、コンパイラ エラーが表示されます。  
  
 スローするこの操作は、縮小変換を定義するため、 <xref:System.OverflowException> 実行時に場合は、 <xref:System.Numerics.BigInteger> の範囲外の値は、 <xref:System.UInt64> データ型。 結果の精度の損失はありません <xref:System.UInt64> 値の場合は、変換が成功します。  
  
   
  
## 例  
 次の例では、変換の <xref:System.Numerics.BigInteger> 値 <xref:System.UInt64> 値。 処理され、 <xref:System.OverflowException> スローされるため、 <xref:System.Numerics.BigInteger> の範囲外の値は、 <xref:System.UInt64> データ型。  
  
 [!code-csharp[System.Numeric.BigInteger.Explicit\#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/cs/System.Numeric.BigInteger.Explicit.cs#11)]
 [!code-vb[System.Numeric.BigInteger.Explicit\#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Explicit/vb/System.Numeric.BigInteger.Explicit.vb#11)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="T:System.Double" />
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> は <see cref="F:System.UInt64.MinValue" /> より小さい値です。  
  
 または  
  
 <paramref name="value" /> が <see cref="F:System.UInt64.MaxValue" /> より大きくなっています。</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger op_Explicit (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Explicit(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Explicit(System.Single)~System.Numerics.BigInteger" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">変換する値、 <see cref="T:System.Numerics.BigInteger" />です。</param>
        <summary>明示的な変換を定義、 <see cref="T:System.Single" /> オブジェクトを <see cref="T:System.Numerics.BigInteger" /> 値。</summary>
        <returns>値を格納しているオブジェクト、 <paramref name="value" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 小数部、 `value` パラメーターは変換する前に切り捨てられます。  
  
 オーバー ロード、 <xref:System.Numerics.BigInteger.op_Explicit%2A> または元に使用するメソッドが型を定義、 <xref:System.Numerics.BigInteger> 変換することができます。 から変換 <xref:System.Single> に <xref:System.Numerics.BigInteger> の小数部の切り捨てを含めることができる `value`, 、言語コンパイラはこの変換を自動的に実行されません。 \(C\#\) のキャスト演算子または変換関数の場合のみが変換を実行する代わりに、\(よう `CType` Visual Basic で\) を使用します。 それ以外の場合、コンパイラ エラーが表示されます。  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.%23ctor%28System.Single%29?displayProperty=fullName>  
  
## 例  
 次の例の配列の個々 の要素を変換する <xref:System.Single> 値 <xref:System.Numerics.BigInteger> オブジェクト、および各変換の結果を表示します。 小数のことに注意してくださいの一部では、 <xref:System.Single> 値は変換中に切り捨てられます。  
  
 [!code-csharp[System.Numerics.BigInteger.Explicit\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/cs/Explicit1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Explicit\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Explicit/vb/Explicit1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> は <see cref="F:System.Single.NaN" /> です。  
  
 \-または\-  
  
 <paramref name="value" /> は <see cref="F:System.Single.PositiveInfinity" /> です。  
  
 \-または\-  
  
 <paramref name="value" /> は <see cref="F:System.Single.NegativeInfinity" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool op_GreaterThan (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値です。</param>
        <summary>64 ビット符号付き整数がより大きいかどうかを示す値を返す、 <see cref="T:System.Numerics.BigInteger" /> 値。</summary>
        <returns>
          <see langword="true" /> が <paramref name="left" /> より大きい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_GreaterThan%2A> メソッドは、以下の演算子の動作を定義 <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numerics.BigInteger.Operators\#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#9)]
 [!code-vb[System.Numerics.BigInteger.Operators\#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#9)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、 <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> メソッドを代わりにインスタンス化します。 一部の言語を呼び出すことも、 <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Int64%2CSystem.Numerics.BigInteger%29> メソッドを直接として次の例を示しています。  
  
 [!code-vb[System.Numerics.BigInteger.Operators\#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#10)]  
  
 場合 `left` は、 <xref:System.Byte>, 、<xref:System.Int16>, 、<xref:System.Int32>, 、<xref:System.SByte>, 、<xref:System.UInt16>, 、または <xref:System.UInt32> 値、それが暗黙的に変換する、 <xref:System.Int64> 、操作を実行するときの値します。  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool op_GreaterThan (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値です。</param>
        <summary>示す値を返すかどうか、 <see cref="T:System.Numerics.BigInteger" /> が 64 ビット符号付き整数値より大きい。</summary>
        <returns>
          <see langword="true" /> が <paramref name="left" /> より大きい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_GreaterThan%2A> メソッドは、以下の演算子の動作を定義 <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numerics.BigInteger.Operators\#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#11)]
 [!code-vb[System.Numerics.BigInteger.Operators\#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#11)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、 <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> メソッド代わりにします。 一部の言語を呼び出すことも、 <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Int64%29> メソッドを直接として次の例を示しています。  
  
 [!code-vb[System.Numerics.BigInteger.Operators\#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#12)]  
  
 場合 `right` は、 <xref:System.Byte>, 、<xref:System.Int16>, 、<xref:System.Int32>, 、<xref:System.SByte>, 、<xref:System.UInt16>, 、または <xref:System.UInt32> 値、それが暗黙的に変換する、 <xref:System.Int64> 、操作を実行するときの値します。  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool op_GreaterThan (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>2.3.98.1</AssemblyVersion>
        <AssemblyVersion>3.98.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値です。</param>
        <summary>示す値を返すかどうか、 <see cref="T:System.Numerics.BigInteger" /> 値が他よりも大きい <see cref="T:System.Numerics.BigInteger" /> 値。</summary>
        <returns>
          <see langword="true" /> が <paramref name="left" /> より大きい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_GreaterThan%2A> メソッドは、以下の演算子の動作を定義 <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numeric.BigInteger.Class\#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#20)]
 [!code-vb[System.Numeric.BigInteger.Class\#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#20)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、 <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName> メソッド代わりにします。 これらを呼び出すことも、 <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> メソッドを直接として次の例を示しています。  
  
 [!code-vb[System.Numeric.BigInteger.Class\#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#21)]  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.%2A> Compare(System.Numeric s .BigInteger,System.Numeric s .BigInteger)?qualifyHint=True&autoUpgrade=False  
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool op_GreaterThan (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値です。</param>
        <summary>示す値を返すかどうか、 <see cref="T:System.Numerics.BigInteger" /> 値が 64 ビット符号なし整数より大きい。</summary>
        <returns>
          <see langword="true" /> が <paramref name="left" /> より大きい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_GreaterThan%2A> メソッドは、以下の演算子の動作を定義 <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numerics.BigInteger.Operators\#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#13)]
 [!code-vb[System.Numerics.BigInteger.Operators\#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#13)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、 <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> メソッド代わりにします。 一部の言語を呼び出すことも、 <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.UInt64%29> メソッドを直接として次の例を示しています。  
  
 [!code-vb[System.Numerics.BigInteger.Operators\#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#14)]  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool op_GreaterThan (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値です。</param>
        <summary>示す値を返すかどうか、 <see cref="T:System.Numerics.BigInteger" /> 値が 64 ビット符号なし整数より大きい。</summary>
        <returns>
          <see langword="true" /> が <paramref name="left" /> より大きい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_GreaterThan%2A> メソッドは、以下の演算子の動作を定義 <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numerics.BigInteger.Operators\#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#15)]
 [!code-vb[System.Numerics.BigInteger.Operators\#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#15)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、 <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> メソッド代わりにします。 一部の言語を呼び出すことも、 <xref:System.Numerics.BigInteger.op_GreaterThan%28System.UInt64%2CSystem.Numerics.BigInteger%29> メソッドを直接として次の例を示しています。  
  
 [!code-vb[System.Numerics.BigInteger.Operators\#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#16)]  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool op_GreaterThanOrEqual (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値です。</param>
        <summary>64 ビット符号付き整数がより大きいまたは等しいかどうかを示す値を返す、 <see cref="T:System.Numerics.BigInteger" /> 値。</summary>
        <returns>
          <see langword="true" /> が <paramref name="left" /> より大きい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> メソッドは、以上の演算子の動作を定義 <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numerics.BigInteger.Operators\#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#17)]
 [!code-vb[System.Numerics.BigInteger.Operators\#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#17)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、 <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> メソッド代わりにします。 一部の言語を呼び出すことも、 <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29> メソッドを直接として次の例を示しています。  
  
 [!code-vb[System.Numerics.BigInteger.Operators\#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#18)]  
  
 場合 `left` は、 <xref:System.Byte>, 、<xref:System.Int16>, 、<xref:System.Int32>, 、<xref:System.SByte>, 、<xref:System.UInt16>, 、または <xref:System.UInt32> 値、それが暗黙的に変換する、 <xref:System.Int64> 、操作を実行するときの値します。  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThan" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool op_GreaterThanOrEqual (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値です。</param>
        <summary>示す値を返すかどうか、 <see cref="T:System.Numerics.BigInteger" /> 値よりも大きいか 64 ビット符号付き整数値に等しいです。</summary>
        <returns>
          <see langword="true" /> が <paramref name="left" /> より大きい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> メソッドは、以上の演算子の動作を定義 <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numerics.BigInteger.Operators\#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#19)]
 [!code-vb[System.Numerics.BigInteger.Operators\#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#19)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、 <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> メソッド代わりにします。 一部の言語を呼び出すことも、 <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29> メソッドを直接として次の例を示しています。  
  
 [!code-vb[System.Numerics.BigInteger.Operators\#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#20)]  
  
 場合 `right` は、 <xref:System.Byte>, 、<xref:System.Int16>, 、<xref:System.Int32>, 、<xref:System.SByte>, 、<xref:System.UInt16>, 、または <xref:System.UInt32> 値、それが暗黙的に変換する、 <xref:System.Int64> 、操作を実行するときの値します。  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThan" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool op_GreaterThanOrEqual (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>2.3.98.1</AssemblyVersion>
        <AssemblyVersion>3.98.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値です。</param>
        <summary>示す値を返すかどうか、 <see cref="T:System.Numerics.BigInteger" /> 値より大きいか等しい別です <see cref="T:System.Numerics.BigInteger" /> 値。</summary>
        <returns>
          <see langword="true" /> が <paramref name="left" /> より大きい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> メソッドは、以上の演算子の動作を定義 <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numeric.BigInteger.Class\#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#22)]
 [!code-vb[System.Numeric.BigInteger.Class\#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#22)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、 <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=fullName> メソッド代わりにします。 一部の言語を呼び出すことも、 <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> メソッドを直接として次の例を示しています。  
  
 [!code-vb[System.Numeric.BigInteger.Class\#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#23)]  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.%2A> Compare(System.Numeric s .BigInteger,System.Numeric s .BigInteger)?qualifyHint=True&autoUpgrade=False  
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThan" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool op_GreaterThanOrEqual (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値です。</param>
        <summary>示す値を返すかどうか、 <see cref="T:System.Numerics.BigInteger" /> 値よりも大きいか 64 ビット符号なし整数値に等しいです。</summary>
        <returns>
          <see langword="true" /> が <paramref name="left" /> より大きい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> メソッドは、以上の演算子の動作を定義 <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numerics.BigInteger.Operators\#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#21)]
 [!code-vb[System.Numerics.BigInteger.Operators\#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#21)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、 <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> メソッド代わりにします。 一部の言語を呼び出すことも、 <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29> メソッドを直接として次の例を示しています。  
  
 [!code-vb[System.Numerics.BigInteger.Operators\#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#22)]  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThan" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool op_GreaterThanOrEqual (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値です。</param>
        <summary>64 ビット符号なし整数がより大きいまたは等しいかどうかを示す値を返す、 <see cref="T:System.Numerics.BigInteger" /> 値。</summary>
        <returns>
          <see langword="true" /> が <paramref name="left" /> より大きい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> メソッドは、以上の演算子の動作を定義 <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numerics.BigInteger.Operators\#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#23)]
 [!code-vb[System.Numerics.BigInteger.Operators\#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#23)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、 <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> メソッド代わりにします。 一部の言語を呼び出すことも、 <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29> メソッドを直接として次の例を示しています。  
  
 [!code-vb[System.Numerics.BigInteger.Operators\#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#24)]  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_GreaterThan" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger op_Implicit (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">変換する値、 <see cref="T:System.Numerics.BigInteger" />です。</param>
        <summary>符号なしバイトへの暗黙的な変換を定義、 <see cref="T:System.Numerics.BigInteger" /> 値。</summary>
        <returns>値を格納しているオブジェクト、 <paramref name="value" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オーバー ロード、 <xref:System.Numerics.BigInteger.op_Implicit%2A> メソッドは、コンパイラを自動的に変換する元となる型を定義、 <xref:System.Numerics.BigInteger> \(c\#\) の明示的なキャスト演算子または \(Visual Basic で\) 変換関数の呼び出しなしの値。 これらには、拡大変換をデータの損失を伴わないスローしないで、 <xref:System.OverflowException>です。 このオーバー ロードにより、コンパイラからの変換を処理する <xref:System.Byte> 値を <xref:System.Numerics.BigInteger> では、次の例に示す値。  
  
 [!code-csharp[System.Numeric.BigInteger.Implicit\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#1)]
 [!code-vb[System.Numeric.BigInteger.Implicit\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#1)]  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger op_Implicit (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.Int16)~System.Numerics.BigInteger" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">変換する値、 <see cref="T:System.Numerics.BigInteger" />です。</param>
        <summary>符号付き 16 ビット整数の暗黙的な変換を定義、 <see cref="T:System.Numerics.BigInteger" /> 値。</summary>
        <returns>値を格納しているオブジェクト、 <paramref name="value" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オーバー ロード、 <xref:System.Numerics.BigInteger.op_Implicit%2A> メソッドは、コンパイラを自動的に変換する元となる型を定義、 <xref:System.Numerics.BigInteger> \(c\#\) の明示的なキャスト演算子または \(Visual Basic で\) 変換関数の呼び出しなしの値。 これらには、拡大変換をデータの損失を伴わないスローしないで、 <xref:System.OverflowException>です。 このオーバー ロードにより、コンパイラからの変換を処理する <xref:System.Int16> 値を <xref:System.Numerics.BigInteger> では、次の例に示す値。  
  
 [!code-csharp[System.Numeric.BigInteger.Implicit\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#2)]
 [!code-vb[System.Numeric.BigInteger.Implicit\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#2)]  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger op_Implicit (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">変換する値、 <see cref="T:System.Numerics.BigInteger" />です。</param>
        <summary>符号付き 32 ビット整数の暗黙的な変換を定義、 <see cref="T:System.Numerics.BigInteger" /> 値。</summary>
        <returns>値を格納しているオブジェクト、 <paramref name="value" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オーバー ロード、 <xref:System.Numerics.BigInteger.op_Implicit%2A> メソッドは、コンパイラを自動的に変換する元となる型を定義、 <xref:System.Numerics.BigInteger> \(c\#\) の明示的なキャスト演算子または \(Visual Basic で\) 変換関数の呼び出しなしの値。 これらには、拡大変換をデータの損失を伴わないスローしないで、 <xref:System.OverflowException>です。 このオーバー ロードにより、コンパイラからの変換を処理する <xref:System.Int32> 値を <xref:System.Numerics.BigInteger> では、次の例に示す値。  
  
 [!code-csharp[System.Numeric.BigInteger.Implicit\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#3)]
 [!code-vb[System.Numeric.BigInteger.Implicit\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#3)]  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger op_Implicit (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">変換する値、 <see cref="T:System.Numerics.BigInteger" />です。</param>
        <summary>符号付き 64 ビット整数の暗黙的な変換を定義、 <see cref="T:System.Numerics.BigInteger" /> 値。</summary>
        <returns>値を格納しているオブジェクト、 <paramref name="value" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オーバー ロード、 <xref:System.Numerics.BigInteger.op_Implicit%2A> メソッドは、コンパイラを自動的に変換する元となる型を定義、 <xref:System.Numerics.BigInteger> \(c\#\) の明示的なキャスト演算子または \(Visual Basic で\) 変換関数の呼び出しなしの値。 これらには、拡大変換をデータの損失を伴わないスローしないで、 <xref:System.OverflowException>です。 このオーバー ロードにより、コンパイラからの変換を処理する <xref:System.Int64> 値を <xref:System.Numerics.BigInteger> では、次の例に示す値。  
  
 [!code-csharp[System.Numeric.BigInteger.Implicit\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#4)]
 [!code-vb[System.Numeric.BigInteger.Implicit\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#4)]  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.%23ctor%28System.Int64%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger op_Implicit (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.SByte)~System.Numerics.BigInteger" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">変換する値、 <see cref="T:System.Numerics.BigInteger" />です。</param>
        <summary>8 ビット符号付き整数への暗黙的な変換を定義、 <see cref="T:System.Numerics.BigInteger" /> 値。</summary>
        <returns>値を格納しているオブジェクト、 <paramref name="value" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オーバー ロード、 <xref:System.Numerics.BigInteger.op_Implicit%2A> メソッドは、コンパイラを自動的に変換する元となる型を定義、 <xref:System.Numerics.BigInteger> \(c\#\) の明示的なキャスト演算子または \(Visual Basic で\) 変換関数の呼び出しなしの値。 これらには、拡大変換をデータの損失を伴わないスローしないで、 <xref:System.OverflowException>です。 このオーバー ロードにより、コンパイラからの変換を処理する <xref:System.SByte> 値を <xref:System.Numerics.BigInteger> では、次の例に示す値。  
  
 [!code-csharp[System.Numeric.BigInteger.Implicit\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#5)]
 [!code-vb[System.Numeric.BigInteger.Implicit\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#5)]  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Numerics.BigInteger.#ctor(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger op_Implicit (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.UInt16)~System.Numerics.BigInteger" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">変換する値、 <see cref="T:System.Numerics.BigInteger" />です。</param>
        <summary>16 ビット符号なし整数の暗黙的な変換を定義、 <see cref="T:System.Numerics.BigInteger" /> 値。</summary>
        <returns>値を格納しているオブジェクト、 <paramref name="value" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オーバー ロード、 <xref:System.Numerics.BigInteger.op_Implicit%2A> メソッドは、コンパイラを自動的に変換する元となる型を定義、 <xref:System.Numerics.BigInteger> \(c\#\) の明示的なキャスト演算子または \(Visual Basic で\) 変換関数の呼び出しなしの値。 これらには、拡大変換をデータの損失を伴わないスローしないで、 <xref:System.OverflowException>です。 このオーバー ロードにより、コンパイラからの変換を処理する <xref:System.UInt16> 値を <xref:System.Numerics.BigInteger> では、次の例に示す値。  
  
 [!code-csharp[System.Numeric.BigInteger.Implicit\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#6)]
 [!code-vb[System.Numeric.BigInteger.Implicit\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#6)]  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger op_Implicit (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.UInt32)~System.Numerics.BigInteger" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">変換する値、 <see cref="T:System.Numerics.BigInteger" />です。</param>
        <summary>32 ビット符号なし整数の暗黙的な変換を定義、 <see cref="T:System.Numerics.BigInteger" /> 値。</summary>
        <returns>値を格納しているオブジェクト、 <paramref name="value" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オーバー ロード、 <xref:System.Numerics.BigInteger.op_Implicit%2A> メソッドは、コンパイラを自動的に変換する元となる型を定義、 <xref:System.Numerics.BigInteger> \(c\#\) の明示的なキャスト演算子または \(Visual Basic で\) 変換関数の呼び出しなしの値。 これらには、拡大変換をデータの損失を伴わないスローしないで、 <xref:System.OverflowException>です。 このオーバー ロードにより、コンパイラからの変換を処理する <xref:System.UInt32> 値を <xref:System.Numerics.BigInteger> では、次の例に示す値。  
  
 [!code-csharp[System.Numeric.BigInteger.Implicit\#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#7)]
 [!code-vb[System.Numeric.BigInteger.Implicit\#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#7)]  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger op_Implicit (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Implicit(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Implicit(System.UInt64)~System.Numerics.BigInteger" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">変換する値、 <see cref="T:System.Numerics.BigInteger" />です。</param>
        <summary>64 ビット符号なし整数の暗黙的な変換を定義、 <see cref="T:System.Numerics.BigInteger" /> 値。</summary>
        <returns>値を格納しているオブジェクト、 <paramref name="value" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オーバー ロード、 <xref:System.Numerics.BigInteger.op_Implicit%2A> メソッドは、コンパイラを自動的に変換する元となる型を定義、 <xref:System.Numerics.BigInteger> \(c\#\) の明示的なキャスト演算子または \(Visual Basic で\) 変換関数の呼び出しなしの値。 これらには、拡大変換をデータの損失を伴わないスローしないで、 <xref:System.OverflowException>です。 このオーバー ロードにより、コンパイラからの変換を処理する <xref:System.UInt64> 値を <xref:System.Numerics.BigInteger> では、次の例に示す値。  
  
 [!code-csharp[System.Numeric.BigInteger.Implicit\#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/cs/Implicit1.cs#8)]
 [!code-vb[System.Numeric.BigInteger.Implicit\#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Implicit/vb/Implicit1.vb#8)]  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.%23ctor%28System.UInt64%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
        <altCompliant cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="op_Increment">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger op_Increment (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Increment(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">インクリメントする値。</param>
        <summary>インクリメント、 <see cref="T:System.Numerics.BigInteger" /> 値を 1 です。</summary>
        <returns>値、 <paramref name="value" /> パラメーターが 1 ずつインクリメントされます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_Increment%2A> メソッド定義のインクリメント演算 <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numeric.BigInteger.Class\#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#24)]  
  
 インクリメント演算子または演算子のオーバー ロードをサポートしていません \(Visual Basic の場合\) などの一部の言語、 <xref:System.Numerics.BigInteger.op_Increment%2A> メソッドを直接として次の例を示しています。  
  
 [!code-vb[System.Numeric.BigInteger.Class\#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#25)]  
  
 <xref:System.Numerics.BigInteger> オブジェクトは不変で、 <xref:System.Numerics.BigInteger.op_Increment%2A> 演算子が、新たに作成 <xref:System.Numerics.BigInteger> 値は 1 つのオブジェクトよりも多く <xref:System.Numerics.BigInteger> によって表されるオブジェクト `value`します。 したがってへの呼び出しを繰り返す <xref:System.Numerics.BigInteger.op_Increment%2A> 高価な場合があります。  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.Add%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値。</param>
        <summary>A と 64 ビット符号付き整数かどうかを示す値を返す <see cref="T:System.Numerics.BigInteger" /> 値が等しくないです。</summary>
        <returns>
          <paramref name="left" /> と <paramref name="right" /> が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_Inequality%2A> メソッドの非等値演算子の動作を定義する <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numerics.BigInteger.Operators\#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#25)]
 [!code-vb[System.Numerics.BigInteger.Operators\#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#25)]  
  
 カスタム演算子をサポートしない言語では、次の手法のいずれかを使用して非等値テストできます。  
  
-   呼び出す、 <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> インスタンス間の関係を示すメソッドを <xref:System.Numerics.BigInteger> と符号付き長整数値。  
  
-   呼び出す、 <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName> インスタンス メソッドおよびその値を反転します。  
  
 場合 `left` は、 <xref:System.Byte>, 、<xref:System.Int16>, 、<xref:System.Int32>, 、<xref:System.SByte>, 、<xref:System.UInt16>, 、または <xref:System.UInt32> 値、暗黙的に変換されます、 <xref:System.Int64> 、操作を実行するときの値します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Equality" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値。</param>
        <summary>示す値を返すかどうか、 <see cref="T:System.Numerics.BigInteger" /> 値と 64 ビット符号付き整数が等しくないです。</summary>
        <returns>
          <paramref name="left" /> と <paramref name="right" /> が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_Inequality%2A> メソッドの非等値演算子の動作を定義する <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numerics.BigInteger.Operators\#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#26)]
 [!code-vb[System.Numerics.BigInteger.Operators\#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#26)]  
  
 カスタム演算子をサポートしない言語では、次の手法のいずれかを使用して非等値テストできます。  
  
-   呼び出す、 <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> 間の関係を通知する、メソッド、 <xref:System.Numerics.BigInteger> と符号付き長整数値。  
  
-   呼び出す、 <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName> メソッドとその値を反転します。  
  
 場合 `right` は、 <xref:System.Byte>, 、<xref:System.Int16>, 、<xref:System.Int32>, 、<xref:System.SByte>, 、<xref:System.UInt16>, 、または <xref:System.UInt32> 値、それが暗黙的に変換する、 <xref:System.Int64> 、操作を実行するときの値します。  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Equality" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>2.3.98.1</AssemblyVersion>
        <AssemblyVersion>3.98.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値。</param>
        <summary>2 つの <see cref="T:System.Numerics.BigInteger" /> オブジェクトの値が異なるかどうかを示す値を返します。</summary>
        <returns>
          <paramref name="left" /> と <paramref name="right" /> が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_Inequality%2A> メソッドの非等値演算子の動作を定義する <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numeric.BigInteger.Class\#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#26)]
 [!code-vb[System.Numeric.BigInteger.Class\#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#26)]  
  
 カスタム演算子をサポートしない言語では、次の手法のいずれかを使用して非等値テストできます。  
  
-   呼び出す、 <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=fullName> メソッドで、2 つの間の関係を示す <xref:System.Numerics.BigInteger> オブジェクトです。  
  
-   呼び出す、 <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=fullName> メソッドとその値を反転します。  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Equality" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.UInt64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値。</param>
        <summary>示す値を返すかどうか、 <see cref="T:System.Numerics.BigInteger" /> 値と 64 ビット符号なし整数が等しくないです。</summary>
        <returns>
          <paramref name="left" /> と <paramref name="right" /> が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_Inequality%2A> メソッドの非等値演算子の動作を定義する <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numerics.BigInteger.Operators\#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#27)]
 [!code-vb[System.Numerics.BigInteger.Operators\#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#27)]  
  
 カスタム演算子をサポートしない言語では、次の手法のいずれかを使用して非等値テストできます。  
  
-   呼び出す、 <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> 間の関係を通知する、メソッド、 <xref:System.Numerics.BigInteger> と符号なし長整数値。  
  
-   呼び出す、 <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=fullName> メソッドとその値を反転します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Equality" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Inequality(System.UInt64,System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値。</param>
        <summary>A と 64 ビット符号なし整数かどうかを示す値を返す <see cref="T:System.Numerics.BigInteger" /> 値が等しくないです。</summary>
        <returns>
          <paramref name="left" /> と <paramref name="right" /> が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_Inequality%2A> メソッドの非等値演算子の動作を定義する <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numerics.BigInteger.Operators\#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#28)]
 [!code-vb[System.Numerics.BigInteger.Operators\#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#28)]  
  
 カスタム演算子をサポートしない言語では、次の手法のいずれかを使用して非等値テストできます。  
  
-   呼び出す、 <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> 間の関係を通知する、メソッド、 <xref:System.Numerics.BigInteger> と符号なし長整数値。  
  
-   呼び出す、 <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=fullName> メソッドとその値を反転します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_Equality" />
      </Docs>
    </Member>
    <Member MemberName="op_LeftShift">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger op_LeftShift (System.Numerics.BigInteger value, int shift);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_LeftShift(valuetype System.Numerics.BigInteger value, int32 shift) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
        <Parameter Name="shift" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">ビットをシフトする対象の値。</param>
        <param name="shift">シフトするビット数 <c>value</c> 左にします。</param>
        <summary>シフト、 <see cref="T:System.Numerics.BigInteger" /> 値の左側にビット数を指定します。</summary>
        <returns>指定されたビット数だけ左にシフトされた値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_LeftShift%2A> メソッドのビットごとの左シフト演算子の動作を定義する <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numerics.BigInteger.Operators\#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#29)]
 [!code-vb[System.Numerics.BigInteger.Operators\#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#29)]  
  
> [!NOTE]
>  整数のプリミティブでビットごとの左シフト演算とは異なり、 <xref:System.Numerics.BigInteger.op_LeftShift%2A> メソッドは、元の符号、保存 <xref:System.Numerics.BigInteger> 値。  
  
 カスタム演算子をサポートしない言語では、乗算することによって、ビットごとの左シフト演算を実行できます `value` によって `BigInteger.Pow(2,``shift``)`します。 次の例では、この演算子を使用した結果と同じ結果であることを示します。  
  
 [!code-csharp[System.Numerics.BigInteger.Operators\#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#30)]
 [!code-vb[System.Numerics.BigInteger.Operators\#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#30)]  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool op_LessThan (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値です。</param>
        <summary>64 ビット符号付き整数があるかどうかを示す値より小さいを返します。 <see cref="T:System.Numerics.BigInteger" /> 値。</summary>
        <returns>
          <paramref name="left" /> が <paramref name="right" /> より小さい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_LessThan%2A> メソッド定義の演算子よりも低いの操作 <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numerics.BigInteger.Operators\#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#31)]
 [!code-vb[System.Numerics.BigInteger.Operators\#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#31)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、 <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> メソッド代わりにします。 一部の言語を呼び出すことも、 <xref:System.Numerics.BigInteger.op_LessThan%28System.Int64%2CSystem.Numerics.BigInteger%29> メソッドを直接として次の例を示しています。  
  
 [!code-vb[System.Numerics.BigInteger.Operators\#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#32)]  
  
 場合 `left` は、 <xref:System.Byte>, 、<xref:System.Int16>, 、<xref:System.Int32>, 、<xref:System.SByte>, 、<xref:System.UInt16>, 、または <xref:System.UInt32> 値、それが暗黙的に変換する、 <xref:System.Int64> 、操作を実行するときの値します。  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool op_LessThan (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値です。</param>
        <summary>示す値を返すかどうか、 <see cref="T:System.Numerics.BigInteger" /> 64 ビット符号付き整数より小さい値です。</summary>
        <returns>
          <paramref name="left" /> が <paramref name="right" /> より小さい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_LessThan%2A> メソッド定義の演算子よりも低いの操作 <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numerics.BigInteger.Operators\#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#33)]
 [!code-vb[System.Numerics.BigInteger.Operators\#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#33)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、 <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> メソッド代わりにします。 一部の言語を呼び出すことも、 <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Int64%29> メソッドを直接として次の例を示しています。  
  
 [!code-vb[System.Numerics.BigInteger.Operators\#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#34)]  
  
 場合 `right` は、 <xref:System.Byte>, 、<xref:System.Int16>, 、<xref:System.Int32>, 、<xref:System.SByte>, 、<xref:System.UInt16>, 、または <xref:System.UInt32> 値、それが暗黙的に変換する、 <xref:System.Int64> 、操作を実行するときの値します。  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool op_LessThan (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>2.3.98.1</AssemblyVersion>
        <AssemblyVersion>3.98.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値です。</param>
        <summary>示す値を返すかどうか、 <see cref="T:System.Numerics.BigInteger" /> 値が他よりも小さい <see cref="T:System.Numerics.BigInteger" /> 値。</summary>
        <returns>
          <paramref name="left" /> が <paramref name="right" /> より小さい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_LessThan%2A> メソッド定義の演算子よりも低いの操作 <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numeric.BigInteger.Class\#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#27)]
 [!code-vb[System.Numeric.BigInteger.Class\#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#27)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、 <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=fullName> メソッド代わりにします。 一部の言語を呼び出すことも、 <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> メソッドを直接として次の例を示しています。  
  
 [!code-vb[System.Numeric.BigInteger.Class\#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#28)]  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool op_LessThan (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値です。</param>
        <summary>示す値を返すかどうか、 <see cref="T:System.Numerics.BigInteger" /> 64 ビット符号なし整数より小さい値です。</summary>
        <returns>
          <paramref name="left" /> が <paramref name="right" /> より小さい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_LessThan%2A> メソッド定義の演算子よりも低いの操作 <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numerics.BigInteger.Operators\#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#35)]
 [!code-vb[System.Numerics.BigInteger.Operators\#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#35)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、 <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> メソッド代わりにします。 これらを呼び出すことも、 <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.UInt64%29> メソッドを直接として次の例を示しています。  
  
 [!code-vb[System.Numerics.BigInteger.Operators\#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#36)]  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool op_LessThan (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値です。</param>
        <summary>64 ビット符号なし整数があるかどうかを示す値より小さいを返します。 <see cref="T:System.Numerics.BigInteger" /> 値。</summary>
        <returns>
          <paramref name="left" /> が <paramref name="right" /> より小さい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_LessThan%2A> メソッド定義の演算子よりも低いの操作 <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numerics.BigInteger.Operators\#37](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#37)]
 [!code-vb[System.Numerics.BigInteger.Operators\#37](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#37)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、 <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> メソッド代わりにします。 これらを呼び出すことも、 <xref:System.Numerics.BigInteger.op_LessThan%28System.UInt64%2CSystem.Numerics.BigInteger%29> メソッドを直接として次の例を示しています。  
  
 [!code-vb[System.Numerics.BigInteger.Operators\#38](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#38)]  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThanOrEqual" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool op_LessThanOrEqual (long left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値です。</param>
        <summary>64 ビット符号付き整数が小さいかに等しいかどうかを示す値を返す、 <see cref="T:System.Numerics.BigInteger" /> 値。</summary>
        <returns>
          <paramref name="left" /> が <paramref name="right" /> 以下の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> メソッドの動作を定義する、以下のオペレーターに <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numerics.BigInteger.Operators\#39](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#39)]
 [!code-vb[System.Numerics.BigInteger.Operators\#39](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#39)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、 <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> メソッド代わりにします。 これらを呼び出すことも、 <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29> メソッドを直接として次の例を示しています。  
  
 [!code-vb[System.Numerics.BigInteger.Operators\#40](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#40)]  
  
 場合 `left` は、 <xref:System.Byte>, 、<xref:System.Int16>, 、<xref:System.Int32>, 、<xref:System.SByte>, 、<xref:System.UInt16>, 、または <xref:System.UInt32> 値、それが暗黙的に変換する、 <xref:System.Int64> 、操作を実行するときの値します。  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThan" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool op_LessThanOrEqual (System.Numerics.BigInteger left, long right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.Numerics.BigInteger left, int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値です。</param>
        <summary>示す値を返すかどうか、 <see cref="T:System.Numerics.BigInteger" /> 値が小さい 64 ビット符号付き整数。</summary>
        <returns>
          <paramref name="left" /> が <paramref name="right" /> 以下の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> メソッドの動作を定義する、以下のオペレーターに <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numerics.BigInteger.Operators\#41](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#41)]
 [!code-vb[System.Numerics.BigInteger.Operators\#41](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#41)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、 <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> メソッド代わりにします。 これらを呼び出すことも、 <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29> メソッドを直接として次の例を示しています。  
  
 [!code-vb[System.Numerics.BigInteger.Operators\#42](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#42)]  
  
 場合 `right` は、 <xref:System.Byte>, 、<xref:System.Int16>, 、<xref:System.Int32>, 、<xref:System.SByte>, 、<xref:System.UInt16>, 、または <xref:System.UInt32> 値、それが暗黙的に変換する、 <xref:System.Int64> 、操作を実行するときの値します。  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThan" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool op_LessThanOrEqual (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>2.3.98.1</AssemblyVersion>
        <AssemblyVersion>3.98.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値です。</param>
        <summary>示す値を返すかどうか、 <see cref="T:System.Numerics.BigInteger" /> 値が別に小さい <see cref="T:System.Numerics.BigInteger" /> 値。</summary>
        <returns>
          <paramref name="left" /> が <paramref name="right" /> 以下の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> メソッドの動作を定義する、以下のオペレーターに <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numeric.BigInteger.Class\#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#29)]
 [!code-vb[System.Numeric.BigInteger.Class\#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#29)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、 <xref:System.Numerics.BigInteger.Compare%2A> メソッド代わりにします。 これらを呼び出すことも、 <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> メソッドを直接として次の例を示しています。  
  
 [!code-vb[System.Numeric.BigInteger.Class\#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#30)]  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThan" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool op_LessThanOrEqual (System.Numerics.BigInteger left, ulong right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.Numerics.BigInteger left, unsigned int64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値です。</param>
        <summary>示す値を返すかどうか、 <see cref="T:System.Numerics.BigInteger" /> 値が小さい 64 ビット符号なし整数。</summary>
        <returns>
          <paramref name="left" /> が <paramref name="right" /> 以下の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> メソッドの動作を定義する、以下のオペレーターに <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numerics.BigInteger.Operators\#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#43)]
 [!code-vb[System.Numerics.BigInteger.Operators\#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#43)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、 <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> メソッド代わりにします。 これらを呼び出すことも、 <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29> メソッドを直接として次の例を示しています。  
  
 [!code-vb[System.Numerics.BigInteger.Operators\#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#44)]  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThan" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool op_LessThanOrEqual (ulong left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(unsigned int64 left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.UInt64" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">比較する最初の値。</param>
        <param name="right">比較する 2 番目の値です。</param>
        <summary>64 ビット符号なし整数が小さいかに等しいかどうかを示す値を返す、 <see cref="T:System.Numerics.BigInteger" /> 値。</summary>
        <returns>
          <paramref name="left" /> が <paramref name="right" /> 以下の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> メソッドの動作を定義する、以下のオペレーターに <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numerics.BigInteger.Operators\#45](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#45)]
 [!code-vb[System.Numerics.BigInteger.Operators\#45](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#45)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、 <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> メソッド代わりにします。 これらを呼び出すことも、 <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29> メソッドを直接として次の例を示しています。  
  
 [!code-vb[System.Numerics.BigInteger.Operators\#46](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#46)]  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Numerics.BigInteger.op_LessThan" />
      </Docs>
    </Member>
    <Member MemberName="op_Modulus">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger op_Modulus (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Modulus(valuetype System.Numerics.BigInteger dividend, valuetype System.Numerics.BigInteger divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>2.3.98.1</AssemblyVersion>
        <AssemblyVersion>3.98.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.BigInteger" />
        <Parameter Name="divisor" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="dividend">被除数。</param>
        <param name="divisor">除数。</param>
        <summary>指定した 2 つと除算の結果生じた剰余を返す <see cref="T:System.Numerics.BigInteger" /> 値。</summary>
        <returns>除算の結果生じた剰余。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_Modulus%2A> メソッドに対して剰余演算子の動作を定義する <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numeric.BigInteger.Class\#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#31)]
 [!code-vb[System.Numeric.BigInteger.Class\#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#31)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、 <xref:System.Numerics.BigInteger.Remainder%2A?displayProperty=fullName> メソッド代わりにします。  
  
 剰余演算によって返される値の符号の符号に依存します `dividend`: 場合 `dividend` が正、剰余演算は、陽性の結果を返します。 剰余演算負の値が、負の結果が返されます。 剰余の操作の動作 <xref:System.Numerics.BigInteger> 値は、その他の整数型の剰余演算と同じです。  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.Remainder%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException">
          <paramref name="divisor" /> 0 \(ゼロ\) です。</exception>
        <altmember cref="M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
        <altmember cref="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger op_Multiply (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Multiply(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>2.3.98.1</AssemblyVersion>
        <AssemblyVersion>3.98.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">乗算する 1 番目の値。</param>
        <param name="right">乗算する 2 番目の値。</param>
        <summary>指定された 2 つの <see cref="T:System.Numerics.BigInteger" /> 値を乗算します。</summary>
        <returns>製品 <paramref name="left" /> と <paramref name="right" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_Multiply%2A> メソッドの乗算演算子の動作を定義する <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numeric.BigInteger.Class\#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#11)]
 [!code-vb[System.Numeric.BigInteger.Class\#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#11)]  
  
 The equivalent method for this operator is <xref:System.Numeric%2A> s .BigInteger.Multiply(System.Numeric s .BigInteger,System.Numeric s .BigInteger)?qualifyHint=True&autoUpgrade=False  
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="op_OnesComplement">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger op_OnesComplement (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_OnesComplement(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">整数値。</param>
        <summary>返す 1 つのビットごとの補数、 <see cref="T:System.Numerics.BigInteger" /> 値。</summary>
        <returns>ビットごとの 1 の補数 <paramref name="value" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_OnesComplement%2A> メソッドは、ビットごとの操作を定義します。 1 の補数演算子の <xref:System.Numerics.BigInteger> 値。 数値の各ビット ビットごとの補数演算子を反転させます。 ビットで `value` である 0 は、結果では 1 に設定され、1 であるビットですが、結果に 0 に設定されます。<xref:System.Numerics.BigInteger.op_OnesComplement%2A> メソッドは、次のようなコードを使用します。  
  
 [!code-csharp[System.Numerics.BigInteger.OnesComplement\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OnesComplement/cs/OnesComplement1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.OnesComplement\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OnesComplement/vb/OnesComplement1.vb#1)]  
  
 カスタム演算子をサポートしない言語で呼び出すことができる場合があります、 <xref:System.Numerics.BigInteger.op_OnesComplement%2A> メソッドを直接実行 1 のビットごとの補数演算します。 例:  
  
 [!code-vb[System.Numerics.BigInteger.OnesComplement\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OnesComplement/vb/onescomplement2.vb#2)]  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_RightShift">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger op_RightShift (System.Numerics.BigInteger value, int shift);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_RightShift(valuetype System.Numerics.BigInteger value, int32 shift) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
        <Parameter Name="shift" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">ビットをシフトする対象の値。</param>
        <param name="shift">
          <c>value</c> を右にシフトするビット数。</param>
        <summary>指定されたビット数だけ <see cref="T:System.Numerics.BigInteger" /> 値を右にシフトします。</summary>
        <returns>指定されたビット数だけ右にシフトされた値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_RightShift%2A> メソッドのビットごとの右シフト演算子の動作を定義する <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numerics.BigInteger.Operators\#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/RightShift1.cs#47)]
 [!code-vb[System.Numerics.BigInteger.Operators\#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#47)]  
  
 カスタム演算子をサポートしない言語割ることによって、ビットごとの右シフト演算を実行できます `value` によって `BigInteger.Pow(2,``shift``)` 、および 1 回の減算 `shift` 負の値。 次の例では、この演算子を使用した結果と同じ結果であることを示します。  
  
 [!code-csharp[System.Numerics.BigInteger.Operators\#48](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/RightShift1.cs#48)]
 [!code-vb[System.Numerics.BigInteger.Operators\#48](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#48)]  
  
 場合 `shift` よりも大きい、または正の数のビット数と同じ <xref:System.Numerics.BigInteger> 値、右シフト演算の結果は <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=fullName>です。 場合 `shift` が負の数のビット数を超える <xref:System.Numerics.BigInteger> 値、右シフト演算の結果は <xref:System.Numerics.BigInteger.MinusOne%2A?displayProperty=fullName>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger op_Subtraction (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_Subtraction(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>2.3.98.1</AssemblyVersion>
        <AssemblyVersion>3.98.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">減算される値 \(被減数\)。</param>
        <param name="right">減算する値 \(減数\)。</param>
        <summary>引きます、 <see cref="T:System.Numerics.BigInteger" /> 別の数値から <see cref="T:System.Numerics.BigInteger" /> 値。</summary>
        <returns>
          <paramref name="left" /> から <paramref name="right" /> を減算した結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_Subtraction%2A> メソッドの減算演算子の動作を定義する <xref:System.Numerics.BigInteger> 値。 次のようなコードが有効にします。  
  
 [!code-csharp[System.Numeric.BigInteger.Class\#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#14)]
 [!code-vb[System.Numeric.BigInteger.Class\#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#14)]  
  
 カスタム演算子をサポートしない言語を呼び出すことができます、 <xref:System.Numerics.BigInteger.Subtract%2A?displayProperty=fullName> メソッド代わりにします。  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="op_UnaryNegation">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger op_UnaryNegation (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_UnaryNegation(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>2.3.98.1</AssemblyVersion>
        <AssemblyVersion>3.98.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">否定する値。</param>
        <summary>指定された BigInteger 値を否定 \(負数化\) します。</summary>
        <returns>結果、 <paramref name="value" /> 負の 1 \(\-1\) を掛けた値パラメーターです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_UnaryNegation%2A> メソッドは、の単項否定演算子 \(または加法に関する逆元演算子\) の操作を定義 <xref:System.Numerics.BigInteger> 値。 操作は、元の数に追加されると、0 \(ゼロ\) で生成される値を生成します。 カスタム演算子をサポートしない言語を呼び出すことができます、 <xref:System.Numerics.BigInteger.Negate%2A> メソッド代わりにします。  
  
 The equivalent method for this operator is <xref:System.Numerics.BigInteger.Negate%28System.Numerics.BigInteger%29?displayProperty=fullName>  
  
## 例  
 次の例の値を否定する 3 つの方法を示しています、 <xref:System.Numerics.BigInteger> オブジェクトです。  
  
 [!code-csharp[System.Numeric.BigInteger.Class\#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#16)]
 [!code-vb[System.Numeric.BigInteger.Class\#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_UnaryPlus">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger op_UnaryPlus (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.BigInteger op_UnaryPlus(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>2.3.98.1</AssemblyVersion>
        <AssemblyVersion>3.98.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">整数値。</param>
        <summary>値を返す、 <see cref="T:System.Numerics.BigInteger" /> オペランド。 オペランドの符号は変更されません。</summary>
        <returns>値、 <paramref name="value" /> オペランド。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.op_UnaryPlus%2A> メソッドは、の単項プラス演算子の動作を定義 <xref:System.Numerics.BigInteger> 値。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Parse (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Parse(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Parse(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>2.3.98.1</AssemblyVersion>
        <AssemblyVersion>3.98.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">変換する数値を含んだ文字列。</param>
        <summary>数値の文字列形式を、それと等価の <see cref="T:System.Numerics.BigInteger" /> に変換します。</summary>
        <returns>指定した数値と等価の値、 <paramref name="value" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `value` パラメーターが次の形式で数値の文字列形式にする必要があります。  
  
 \[*ws*\]\[*sign*\]*digits*\[*ws*\]  
  
 角かっこ \(\[ および \]\) 内の要素は省略可能です。 次の表では、各要素について説明します。  
  
|要素|説明|  
|--------|--------|  
|*ws*|省略可能な空白です。|  
|*サインイン*|オプションの符号です。 有効な署名の文字によって決定されます、 <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName> と <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=fullName> 、現在のカルチャのプロパティです。|  
|*数字*|数字の 0 から 9 までのシーケンス。 先頭の 0 は無視されます。|  
  
> [!NOTE]
>  指定された文字列、 `value` パラメーターを使用して解釈されます、 <xref:System.Globalization.NumberStyles.Integer?displayProperty=fullName> スタイル。 桁区切り記号や小数点区切り文字を含めることはできず、小数部を持つことはできません。  
  
 `value` で書式設定情報を使用してパラメーターを解析、 <xref:System.Globalization.NumberFormatInfo?displayProperty=fullName> オブジェクトを現在のシステム カルチャが初期化されます。 詳細については、「<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=fullName>」を参照してください。 特定のカルチャの書式情報を使用して、文字列の解析を使用して、 <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29> メソッドです。  
  
> [!IMPORTANT]
>  使用する場合、 <xref:System.Numerics.BigInteger.Parse%2A> 文字列形式をラウンドト リップさせるメソッドの <xref:System.Numerics.BigInteger> によって出力された値、 <xref:System.Numerics.BigInteger.ToString%2A> メソッドを使用してください、 <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName> メソッドの文字列形式を生成する、"R"書式指定子を <xref:System.Numerics.BigInteger> 値。 それ以外の場合の文字列表現、 <xref:System.Numerics.BigInteger> 、50 個の元の値とデータの最大有効桁数が失われるを使用する場合のみが保持されます、 <xref:System.Numerics.BigInteger.Parse%2A> を復元する方法、 <xref:System.Numerics.BigInteger> 値。  
  
   
  
## 例  
 次の例では、 <xref:System.Numerics.BigInteger.Parse%28System.String%29> 2 つのインスタンスを作成するメソッド <xref:System.Numerics.BigInteger> オブジェクトです。 各オブジェクトを他の数値を乗算しを呼び出しますが、 <xref:System.Numerics.BigInteger.Compare%2A> メソッドを次の 2 つの値の間の関係を決定します。  
  
 [!code-csharp[System.Numerics.BigInteger.Parse\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/Parse1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Parse\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/Parse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> が正しい形式ではありません。</exception>
        <altmember cref="Overload:System.Numerics.BigInteger.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Parse (string value, System.Globalization.NumberStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Parse(string value, valuetype System.Globalization.NumberStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
      </Parameters>
      <Docs>
        <param name="value">変換する数値を含んだ文字列。</param>
        <param name="style">
          <c>value</c> に許可されている書式を指定する列挙値のビットごとの組み合わせ。</param>
        <summary>指定のスタイルで表現された数値の文字列形式を、それと等価な <see cref="T:System.Numerics.BigInteger" /> に変換します。</summary>
        <returns>指定した数値と等価の値、 <paramref name="value" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `style` パラメーター \(空白文字、正または負記号、桁区切り記号、小数点記号など\) で使用できるスタイル要素を定義する、 `value` 解析操作が成功するためのパラメーターです。`styles` ビット フラグの組み合わせにする必要があります、 <xref:System.Globalization.NumberStyles> 列挙します。`style` パラメーターにより、このメソッドのオーバー ロードの便利な場合に `value` によって表される数システム \(10 進または 16 進数\) と 16 進数値の文字列形式を含む `value` 、実行時にのみ、または空白を許可しない場合し、で記号がわかっている `value`します。  
  
 値に応じて `style`, 、 `value` パラメーターは、次の要素を含めることがあります。  
  
 \[*ws*\]\[*$*\]\[*sign*\]\[*digits*,\]*digits*\[.*fractional\_digits*\] \[E \[*記号*\]*exponential\_digits*\] \[*ws*\]  
  
 場合 `style` を含む <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=fullName>, 、 `value` パラメーターは、次の要素を含めることがあります。  
  
 \[*ws*\]*hexdigits*\[*ws*\]  
  
 角かっこ \(\[ および \]\) 内の要素は省略可能です。 次の表では、各要素について説明します。  
  
|要素|説明|  
|--------|--------|  
|*ws*|省略可能な空白です。 空白文字の開始時に表示されます `value` 場合 `style` が含まれています、 <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=fullName> の最後に、フラグ、およびそれが表示される `value` 場合 `style` が含まれています、 <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=fullName> フラグ。|  
|*$*|カルチャに固有の通貨記号です。 文字列内での位置が定義されている、 <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=fullName> と <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=fullName> 、現在のカルチャのプロパティです。 現在のカルチャの通貨記号が表示されるよう `value` 場合 `style` を含む、 <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=fullName> フラグ。|  
|*サインイン*|オプションの符号です。 先頭に符号があることができます `value` 場合 `style` が含まれています、 <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=fullName> の最後に、フラグ、およびそれが表示される `value` 場合 `style` が含まれています、 <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=fullName> フラグ。 かっこを使用できます `value` 負の値を指定する場合 `style` を含む、 <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=fullName> フラグ。|  
|*数字*<br /><br /> *fractional\_digits*<br /><br /> *exponential\_digits*|0 ~ 9 桁の数字のシーケンス。*Fractional\_digits*, 、数字の 0 は有効なだけです。|  
|*、*|カルチャに固有のグループの区切り記号です。 現在のカルチャの桁区切り記号に表示される `value` 場合 `style` が含まれています、 <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=fullName> フラグ。|  
|*」を参照してください。*|カルチャに固有の小数点の記号。 現在のカルチャの小数点の記号が表示されるよう `value` 場合 `style` を含む、 <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=fullName> フラグ。 数字の 0 は、解析操作を成功させるため桁の小数部として表示されます。場合 *fractional\_digits* 他の任意の数字を含む、 <xref:System.FormatException> がスローされます。|  
|E|"E"または"E"文字は、値が指数表記で表されることを示します。`value` 場合、パラメーターは指数表記の数値を表すことができます `style` を含む、 <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=fullName> フラグ。|  
|*hexdigits*|16 進数 0 ~ f、または 0 F. ~ からのシーケンス|  
  
 数字のみの文字列 \(に対応する、 <xref:System.Globalization.NumberStyles.None?displayProperty=fullName> スタイル\) 常に正常に解析します。 残りのほとんど <xref:System.Globalization.NumberStyles> メンバーが存在する可能性がありますが、入力文字列内に存在する必要はありませんが要素を制御します。 次の表に示す個別 <xref:System.Globalization.NumberStyles> メンバー内に存在可能な要素に影響を与える `value`します。  
  
|`NumberStyles` の値|使用できる要素 `value` 数字だけでなく|  
|-----------------------|-----------------------------|  
|<xref:System.Globalization.NumberStyles.None>|*桁* 要素のみです。|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|小数点 \(.\)*桁の小数部* 要素。|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|"E"または"E"文字は、指数表記を示すと共に *exponential\_digits*します。|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|*Ws* 先頭の要素 `value`します。|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|*Ws* の末尾から要素 `value`します。|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|*記号* 先頭の要素 `value`します。|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|*記号* の末尾から要素 `value`します。|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|*記号* 形式の数値を囲むかっこ内の要素。|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|グループ区切り記号 \(,\) 要素です。|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|通貨 \($\) の要素。|  
|<xref:System.Globalization.NumberStyles.Currency>|すべての要素。 ただし、 `value` 16 進数または指数表記の数値を表すことはできません。|  
|<xref:System.Globalization.NumberStyles.Float>|*Ws* 先頭または末尾の位置にある要素 `value`, 、*記号* の開始時 `value`, 、および小数点 \(*.*\) シンボルです。`value` パラメーターは、指数表記も使用できます。|  
|<xref:System.Globalization.NumberStyles.Number>|`ws`, 、`sign`, 、桁区切り記号 \(*,、*\)、および小数点 \(*.*\) 要素です。|  
|<xref:System.Globalization.NumberStyles.Any>|すべての要素。 ただし、 `value` 16 進数を表すことはできません。|  
  
> [!IMPORTANT]
>  使用する場合、 <xref:System.Numerics.BigInteger.Parse%2A> 文字列形式をラウンドト リップさせるメソッドの <xref:System.Numerics.BigInteger> によって出力された値、 <xref:System.Numerics.BigInteger.ToString%2A> メソッドを使用してください、 <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName> メソッドの文字列形式を生成する、"R"書式指定子を <xref:System.Numerics.BigInteger> 値。 それ以外の場合の文字列表現、 <xref:System.Numerics.BigInteger> 、50 個の元の値とデータの最大有効桁数が失われるを使用する場合のみが保持されます、 <xref:System.Numerics.BigInteger.Parse%2A> を復元する方法、 <xref:System.Numerics.BigInteger> 値。  
  
 異なり、その他の <xref:System.Globalization.NumberStyles> 値を使用するが、必要としない、特定のスタイルの要素のプレゼンス `value`, 、 <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=fullName> スタイル値つまりの個々 の数値文字 `value` 常に 16 進数の文字として解釈されます。 有効な 16 進数の文字は 0 ~ 9、A ~ F、a ~ f です。 のみ他のフラグと組み合わせて使用できますが、 `style` パラメーターは <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=fullName> と <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=fullName>です。 \(、 <xref:System.Globalization.NumberStyles> 列挙体には、複合数値のスタイルが含まれています <xref:System.Globalization.NumberStyles.HexNumber>, 、両方の空白文字フラグが含まれます。\)。  
  
> [!NOTE]
>  場合 `value` 文字列の形式は、その、16 進数の接頭辞前ことはできません \(など `0x` または `&h`\)、16 進数として区別します。 これにより、変換に失敗します。  
  
 場合 `value` 16 進数の文字列、 <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> メソッドでは、解釈 `value` の最初の 2 つの 16 進数字がより大きいか等しい場合は、2 の補数表現を使用して、格納されている負の数値として `0x80`します。 つまり、メソッドは、最初のバイトの最上位ビットを解釈 `value` 符号ビットとします。 16 進数文字列がの最初の桁の正の整数として正しく解釈されるかどうかを確認する `value` ゼロの値を持つ必要があります。 たとえば、このメソッドは解釈 `0x80` 負の値が解釈するか、 `0x080` または `0x0080` 正の値。 次の例では、負と正の値を表す 16 進数の文字列間で違いを示します。  
  
 [!code-csharp[System.Numerics.BigInteger.Parse\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/ParseHex1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Parse\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/ParseHex1.vb#3)]  
  
 `value` で書式設定情報を使用してパラメーターを解析、 <xref:System.Globalization.NumberFormatInfo> オブジェクトを現在のシステム カルチャが初期化されます。 書式情報を含むが、解析操作で使用されるカルチャを指定するには、呼び出し、 <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> オーバー ロードします。  
  
   
  
## 例  
 次の例への呼び出し、 <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> メソッドのいくつかの値を `style` パラメーター。 16 進数の値として文字列を解釈する方法とスペースを禁止して、シンボルを署名する方法を示しています。  
  
 [!code-csharp[System.Numeric.BigInteger.Parse\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/cs/System.Numeric.BigInteger.Parse.cs#5)]
 [!code-vb[System.Numeric.BigInteger.Parse\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/vb/System.Numeric.BigInteger.Parse.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> は <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。  
  
 または  
  
 <paramref name="style" /> 含む、 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> または <see cref="F:System.Globalization.NumberStyles.HexNumber" /> と共に別の値のフラグ。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> 指定された入力のパターンに準拠していない <see cref="T:System.Globalization.NumberStyles" />します。</exception>
        <altmember cref="Overload:System.Numerics.BigInteger.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Parse (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Parse(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">変換する数値を含んだ文字列。</param>
        <param name="provider">に関するカルチャ固有の書式情報を提供するオブジェクト <c>value</c>します。</param>
        <summary>指定されたカルチャ固有の書式で表現された文字列形式の数値を、それと等価の <see cref="T:System.Numerics.BigInteger" /> に変換します。</summary>
        <returns>指定した数値と等価の値、 <paramref name="value" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `value` パラメーターが次の形式で数値の文字列形式にする必要があります。  
  
 \[*ws*\]\[*sign*\]*digits*\[*ws*\]  
  
 角かっこ \(\[ および \]\) 内の要素は省略可能です。 次の表では、各要素について説明します。  
  
|要素|説明|  
|--------|--------|  
|*ws*|省略可能な空白です。|  
|*サインイン*|オプションの符号です。 有効な署名の文字によって決定されます、 <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName> と <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=fullName> のプロパティ、 <xref:System.Globalization.NumberFormatInfo> によって返されるオブジェクト、 `provider` オブジェクトの <xref:System.IFormatProvider.GetFormat%2A> メソッドです。|  
|*数字*|数字の 0 から 9 までのシーケンス。 先頭の 0 は無視されます。|  
  
> [!NOTE]
>  指定された文字列、 `value` パラメーターを使用して解釈されますが、 <xref:System.Globalization.NumberStyles.Integer?displayProperty=fullName> スタイル。 桁区切り記号や小数点区切り文字を含めることはできず、小数部を持つことはできません。  
  
> [!IMPORTANT]
>  使用する場合、 <xref:System.Numerics.BigInteger.Parse%2A> 文字列形式をラウンドト リップさせるメソッドの <xref:System.Numerics.BigInteger> によって出力された値、 <xref:System.Numerics.BigInteger.ToString%2A> メソッドを使用してください、 <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName> メソッドの文字列形式を生成する、"R"書式指定子を <xref:System.Numerics.BigInteger> 値。 それ以外の場合の文字列表現、 <xref:System.Numerics.BigInteger> 、50 個の元の値とデータの最大有効桁数が失われるを使用する場合のみが保持されます、 <xref:System.Numerics.BigInteger.Parse%2A> を復元する方法、 <xref:System.Numerics.BigInteger> 値。  
  
 `provider` パラメーターは、 <xref:System.IFormatProvider> 実装が <xref:System.IFormatProvider.GetFormat%2A> メソッドが返される、 <xref:System.Globalization.NumberFormatInfo> カルチャ固有の書式情報を提供するオブジェクト。 ときに、 <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29> メソッドが呼び出される、呼び出し、 `provider` パラメーターの <xref:System.IFormatProvider.GetFormat%2A> メソッドし、これを <xref:System.Type> を表すオブジェクト、 <xref:System.Globalization.NumberFormatInfo> 型です。<xref:System.IFormatProvider.GetFormat%2A> メソッドが戻ります、 <xref:System.Globalization.NumberFormatInfo> の形式に関する情報を提供するオブジェクト、 `value` パラメーター。 3 つの方法を使用する、 `provider` パラメーターを解析操作にカスタムの書式情報を指定します。  
  
-   渡すことができます、 <xref:System.Globalization.CultureInfo> の書式情報を提供するカルチャを表すオブジェクト。 その <xref:System.Globalization.CultureInfo.GetFormat%2A> メソッドが返される、 <xref:System.Globalization.NumberFormatInfo> そのカルチャの数値の書式設定情報を提供するオブジェクト。  
  
-   実際に渡すことができます <xref:System.Globalization.NumberFormatInfo> 数値書式設定情報を提供するオブジェクト。 \(その実装の <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> 自体が返されるだけです\)。  
  
-   実装するカスタム オブジェクトを渡すことができます <xref:System.IFormatProvider>します。 その <xref:System.IFormatProvider.GetFormat%2A> メソッドをインスタンス化し、返します、 <xref:System.Globalization.NumberFormatInfo> の書式情報を提供するオブジェクト。  
  
 場合 `provider` は `null`, の書式設定 `value` に基づいて解釈されます、 <xref:System.Globalization.NumberFormatInfo> の現在のカルチャ オブジェクト。  
  
   
  
## 例  
 次の例は、書式設定に負の符号としてティルダ \(~\) を定義する 2 つの方法を示して <xref:System.Numerics.BigInteger> 値。 表示することに注意してください、 <xref:System.Numerics.BigInteger> 元の文字列と同じ形式で値をコードを呼び出す必要があります、 <xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29?displayProperty=fullName> メソッドを渡して、 <xref:System.Globalization.NumberFormatInfo> の書式情報を提供するオブジェクト。  
  
 最初の例を実装するクラスを定義する <xref:System.IFormatProvider> を使用して、 <xref:System.IFormatProvider.GetFormat%2A> を返すメソッドを <xref:System.Globalization.NumberFormatInfo> の書式情報を提供するオブジェクト。  
  
 [!code-csharp[System.Numeric.BigInteger.Parse\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/cs/System.Numeric.BigInteger.Parse.cs#2)]
 [!code-vb[System.Numeric.BigInteger.Parse\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/vb/System.Numeric.BigInteger.Parse.vb#2)]  
  
 A <xref:System.Numerics.BigInteger> オブジェクトは次のコードで、インスタンス化します。  
  
 [!code-csharp[System.Numeric.BigInteger.Parse\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/cs/System.Numeric.BigInteger.Parse.cs#3)]
 [!code-vb[System.Numeric.BigInteger.Parse\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/vb/System.Numeric.BigInteger.Parse.vb#3)]  
  
 2 番目の例より簡単です。 渡す、 <xref:System.Globalization.NumberFormatInfo> を書式設定情報を提供するオブジェクト、 `provider` パラメーター。  
  
 [!code-csharp[System.Numeric.BigInteger.Parse\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/cs/System.Numeric.BigInteger.Parse.cs#4)]
 [!code-vb[System.Numeric.BigInteger.Parse\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/vb/System.Numeric.BigInteger.Parse.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> 正しい形式ではありません。</exception>
        <altmember cref="Overload:System.Numerics.BigInteger.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Parse (string value, System.Globalization.NumberStyles style, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Parse(string value, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">変換する数値を含んだ文字列。</param>
        <param name="style">
          <c>value</c> に許可されている書式を指定する列挙値のビットごとの組み合わせ。</param>
        <param name="provider">に関するカルチャ固有の書式情報を提供するオブジェクト <c>value</c>します。</param>
        <summary>指定したスタイルおよびカルチャ固有の書式の数値の文字列形式を、それと等価の <see cref="T:System.Numerics.BigInteger" /> に変換します。</summary>
        <returns>指定した数値と等価の値、 <paramref name="value" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `style` パラメーター \(空白文字、正または負記号、桁区切り記号、小数点記号など\) で使用できるスタイル要素を定義する、 `value` 解析操作が成功するためのパラメーターです。`styles` ビット フラグの組み合わせにする必要があります、 <xref:System.Globalization.NumberStyles> 列挙します。`style` パラメーターにより、このメソッドのオーバー ロードの便利な場合に `value` によって表される数システム \(10 進または 16 進数\) と 16 進数値の文字列形式を含む `value` 、実行時にのみ、または空白を許可しない場合し、で記号がわかっている `value`します。  
  
 値に応じて `style`, 、 `value` パラメーターは、次の要素を含めることがあります。  
  
 \[*ws*\] \[*$*\] \[*記号*\] \[*桁*,、\]*桁*\[*.fractional\_digits*\] \[E \[*記号*\]*exponential\_digits*\] \[*ws*\]  
  
 場合 `style` を含む <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=fullName>, 、 `value` パラメーターは、次の要素を含めることがあります。  
  
 \[*ws*\]*hexdigits*\[*ws*\]  
  
 角かっこ \(\[ および \]\) 内の要素は省略可能です。 次の表では、各要素について説明します。  
  
|要素|説明|  
|--------|--------|  
|*ws*|省略可能な空白です。 空白文字の開始時に表示されます `value` 場合 `style` が含まれています、 <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=fullName> の最後に、フラグ、およびそれが表示される `value` 場合 `style` が含まれています、 <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=fullName> フラグ。|  
|*$*|カルチャに固有の通貨記号です。 文字列内での位置が定義されている、 <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=fullName> と <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=fullName> によって、カルチャのプロパティが示される、 `provider` パラメーター。 現在のカルチャの通貨記号が表示されるよう `value` 場合 `style` を含む、 <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=fullName> フラグ。|  
|*サインイン*|オプションの符号です。 先頭に符号があることができます `value` 場合 `style` が含まれています、 <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=fullName> の最後に、フラグ、およびそれが表示される `value` 場合 `style` が含まれています、 <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=fullName> フラグ。 かっこを使用できます `value` 負の値を指定する場合 `style` を含む、 <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=fullName> フラグ。|  
|*数字*<br /><br /> *fractional\_digits*<br /><br /> *exponential\_digits*|0 ~ 9 桁の数字のシーケンス。*Fractional\_digits*, 、数字の 0 は有効なだけです。|  
|*、*|カルチャに固有のグループの区切り記号です。 指定したカルチャの桁区切り記号 `provider` に表示されるよう `value` 場合 `style` を含む、 <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=fullName> フラグ。|  
|*」を参照してください。*|カルチャに固有の小数点の記号。 指定されたカルチャの小数点記号 `provider` に表示されるよう `value` 場合 `style` が含まれています、 <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=fullName> フラグ。 数字の 0 は、解析操作を成功させるため桁の小数部として表示されます。場合 *fractional\_digits* 他の任意の数字を含む、 <xref:System.FormatException> がスローされます。|  
|E|"E"または"E"文字は、値が指数表記で表されることを示します。`value` 場合、パラメーターは指数表記の数値を表すことができます `style` を含む、 <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=fullName> フラグ。|  
|*hexdigits*|16 進数 0 ~ f、または 0 F. ~ からのシーケンス|  
  
 数字のみの文字列 \(に対応する、 <xref:System.Globalization.NumberStyles.None?displayProperty=fullName> スタイル\) 常に正常に解析します。 残りのほとんど <xref:System.Globalization.NumberStyles> メンバーが存在する可能性がありますが、入力文字列内に存在する必要はありませんが要素を制御します。 次の表に示す個別 <xref:System.Globalization.NumberStyles> メンバー内に存在可能な要素に影響を与える `value`します。  
  
|NumberStyles 値|数字以外の値で使用できる要素|  
|--------------------|--------------------|  
|<xref:System.Globalization.NumberStyles.None>|*桁* 要素のみです。|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|小数点 \(.\)*桁の小数部* 要素。|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|"E"または"E"文字は、指数表記法を示します。 と共に *exponential\_digits*します。|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|*Ws* 先頭の要素 `value`します。|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|*Ws* の末尾から要素 `value`します。|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|*記号* 先頭の要素 `value`します。|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|*記号* の末尾から要素 `value`します。|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|*記号* 形式の数値を囲むかっこ内の要素。|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|グループ区切り記号 \(,\) 要素です。|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|通貨 \($\) の要素。|  
|<xref:System.Globalization.NumberStyles.Currency>|すべての要素。 ただし、 `value` 16 進数または指数表記の数値を表すことはできません。|  
|<xref:System.Globalization.NumberStyles.Float>|*Ws* 先頭または末尾の位置にある要素 `value`, 、*記号* の開始時 `value`, 、および小数点 \(.\) 記号です。`value` パラメーターは、指数表記も使用できます。|  
|<xref:System.Globalization.NumberStyles.Number>|`ws`, 、`sign`, 、桁区切り記号 \(,\)、および小数点 \(.\) 要素です。|  
|<xref:System.Globalization.NumberStyles.Any>|すべての要素。 ただし、 `value` 16 進数を表すことはできません。|  
  
> [!IMPORTANT]
>  使用する場合、 <xref:System.Numerics.BigInteger.Parse%2A> 文字列形式をラウンドト リップさせるメソッドの <xref:System.Numerics.BigInteger> によって出力された値、 <xref:System.Numerics.BigInteger.ToString%2A> メソッドを使用してください、 <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName> メソッドの文字列形式を生成する、"R"書式指定子を <xref:System.Numerics.BigInteger> 値。 それ以外の場合の文字列表現、 <xref:System.Numerics.BigInteger> 、50 個の元の値とデータの最大有効桁数が失われるを使用する場合のみが保持されます、 <xref:System.Numerics.BigInteger.Parse%2A> を復元する方法、 <xref:System.Numerics.BigInteger> 値。  
  
 異なり、その他の <xref:System.Globalization.NumberStyles> 値を使用するが、特定のスタイルの要素の存在を必要としない `value`, 、 <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=fullName> スタイル値つまりの個々 の数値文字 `value` 常に 16 進数の文字として解釈されます。 有効な 16 進数の文字は 0 ~ 9、A ~ F、a ~ f です。 のみ他のフラグと組み合わせて使用できますが、 `style` パラメーターは <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=fullName> と <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=fullName>です。 \(、 <xref:System.Globalization.NumberStyles> 列挙体には、複合数値のスタイルが含まれています <xref:System.Globalization.NumberStyles.HexNumber>, 、両方の空白文字フラグが含まれます。\)。  
  
> [!NOTE]
>  場合 `value` 文字列の形式は、その、16 進数の接頭辞前ことはできません \(など `0x` または `&h`\)、16 進数として区別します。 これにより、変換に失敗します。  
  
 場合 `value` 16 進数の文字列、 <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> メソッドでは、解釈 `value` の最初の 2 つの 16 進数字がより大きいか等しい場合は、2 の補数表現を使用して、格納されている負の数値として `0x80`します。 つまり、メソッドは、最初のバイトの最上位ビットを解釈 `value` 符号ビットとします。 16 進数文字列がの最初の桁の正の整数として正しく解釈されるかどうかを確認する `value` ゼロの値を持つ必要があります。 たとえば、このメソッドは解釈 `0x80` 負の値が解釈するか、 `0x080` または `0x0080` 正の値。 次の例では、負と正の値を表す 16 進数の文字列間で違いを示します。  
  
 [!code-csharp[System.Numerics.BigInteger.Parse\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/ParseHex1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.Parse\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/ParseHex1.vb#3)]  
  
 `provider` パラメーターは、 <xref:System.IFormatProvider> 実装します。 その <xref:System.IFormatProvider.GetFormat%2A> メソッドが返される、 <xref:System.Globalization.NumberFormatInfo> の書式に関するカルチャ固有の情報を提供するオブジェクト `value`します。 通常、 `provider` 、次のいずれかを指定できます。  
  
-   A <xref:System.Globalization.CultureInfo> 数値書式設定情報を提供するカルチャを表すオブジェクト。 その <xref:System.Globalization.CultureInfo.GetFormat%2A> メソッドが返される、 <xref:System.Globalization.NumberFormatInfo> 数値書式設定情報を提供するオブジェクト。  
  
-   A <xref:System.Globalization.NumberFormatInfo> の書式情報を提供するオブジェクト。 \(その実装の <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> 自体が返されるだけです\)。  
  
-   実装するカスタム オブジェクト <xref:System.IFormatProvider> を使用して、 <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> をインスタンス化して返すメソッド、 <xref:System.Globalization.NumberFormatInfo> の書式情報を提供するオブジェクト。  
  
 場合 `provider` は `null`, 、 <xref:System.Globalization.NumberFormatInfo> オブジェクトの現在のカルチャが使用されます。  
  
   
  
## 例  
 次の例は、いくつかの呼び出し、 <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> の値のさまざまな組み合わせを使用して、メソッド、 `style` と `provider` パラメーター。  
  
 [!code-csharp[System.Numerics.BigInteger.Parse\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/Parse1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.Parse\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/Parse1.vb#2)]  
  
 個々 の呼び出しの数、 <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> メソッドは、次のインスタンスを渡す `BigIntegerFormatProvider` クラスは、負の符号としてティルダ \(~\) を定義します。  
  
 [!code-csharp[System.Numerics.BigInteger.Parse\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/Parse1.cs#4)]
 [!code-vb[System.Numerics.BigInteger.Parse\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/Parse1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> は <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。  
  
 または  
  
 <paramref name="style" /> 含む、 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> または <see cref="F:System.Globalization.NumberStyles.HexNumber" /> と共に別の値のフラグ。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> 指定された入力のパターンに準拠していない <paramref name="style" />します。</exception>
        <altmember cref="Overload:System.Numerics.BigInteger.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Pow">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Pow (System.Numerics.BigInteger value, int exponent);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Pow(valuetype System.Numerics.BigInteger value, int32 exponent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>2.3.98.1</AssemblyVersion>
        <AssemblyVersion>3.98.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
        <Parameter Name="exponent" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">発生させるのには、番号、 <c>exponent</c> 電源です。</param>
        <param name="exponent">指数 <c>value</c> しています。</param>
        <summary>発生させる、 <see cref="T:System.Numerics.BigInteger" /> 値を指定された値の累乗します。</summary>
        <returns>累乗した結果 <paramref name="value" /> に、 <paramref name="exponent" /> 電源です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.Pow%2A> メソッドは、指数のパラメーターの値が 0 の場合、または、1 を返します両方の値、 `value` と `exponent` パラメーターは 0 です。 場合 `exponent` は 1 ですが、 <xref:System.Numerics.BigInteger.Pow%2A> メソッドが返す `value`します。 場合 `value` は負の場合、負の結果は、メソッドを返します。  
  
 このメソッドに対応、 <xref:System.Math.Pow%2A?displayProperty=fullName> のプリミティブ数値型のメソッドです。  
  
   
  
## 例  
 指数演算を使用して、次の例に示す、 <xref:System.Numerics.BigInteger> 値と値の範囲は 0 10 からの指数部です。  
  
 [!code-csharp[System.Numeric.BigInteger.Class\#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#32)]
 [!code-vb[System.Numeric.BigInteger.Class\#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">値、 <paramref name="exponent" /> パラメーターが負の値。</exception>
      </Docs>
    </Member>
    <Member MemberName="Remainder">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Remainder (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Remainder(valuetype System.Numerics.BigInteger dividend, valuetype System.Numerics.BigInteger divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividend" Type="System.Numerics.BigInteger" />
        <Parameter Name="divisor" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="dividend">被除数。</param>
        <param name="divisor">除数。</param>
        <summary>2 つの整数の除算を実行 <see cref="T:System.Numerics.BigInteger" /> 値であり、剰余を返します。</summary>
        <returns>
          <paramref name="dividend" /> を <paramref name="divisor" /> で除算した結果生じた剰余。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 剰余の符号の符号、 `dividend` パラメーター。  
  
 <xref:System.Numerics.BigInteger.Remainder%2A> カスタム演算子をサポートしていない言語のメソッドを実装します。 その動作は、除算、剰余演算子を使用すると同じです。  
  
 かどうか、必要に応じて、メソッドが自動的に実行する他の整数型の暗黙的な変換 <xref:System.Numerics.BigInteger> 剰余演算を実行する前にオブジェクトです。  
  
   
  
## 例  
 次の例では、残りの部分から、 <xref:System.Numerics.BigInteger.DivRem%2A> メソッドによって返される残りの部分を <xref:System.Numerics.BigInteger.Remainder%2A> 2 つの方法が同一の剰余を計算するメソッドです。  
  
 [!code-csharp[System.Numerics.BigInteger.Remainder\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Remainder/cs/Remainder1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.Remainder\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Remainder/vb/Remainder1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException">
          <paramref name="divisor" /> 0 \(ゼロ\) です。</exception>
        <altmember cref="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)" />
        <altmember cref="M:System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public int Sign { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Sign" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.Sign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>2.3.98.1</AssemblyVersion>
        <AssemblyVersion>3.98.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>符号を示す数を取得 \(負、正、またはゼロ\)、現在の <see cref="T:System.Numerics.BigInteger" /> オブジェクトです。</summary>
        <value>数値の符号を示す、 <see cref="T:System.Numerics.BigInteger" /> オブジェクトを次の表に示すようにします。  
  
 <list type="table">  
<listheader>  
<term> 数値  
  
 </term>  
<description> 説明  
  
 </description>  
</listheader>  
<item>  
<term> \-1  
  
 </term>  
<description> このオブジェクトの値は負です。  
  
 </description>  
</item>  
<item>  
<term> 0  
  
 </term>  
<description> このオブジェクトの値は 0 \(ゼロ\) です。  
  
 </description>  
</item>  
<item>  
<term> 1  
  
 </term>  
<description> このオブジェクトの値は正です。  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.Sign%2A> プロパティは、 <xref:System.Math.Sign%2A?displayProperty=fullName> のプリミティブ数値型のメソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Subtract (System.Numerics.BigInteger left, System.Numerics.BigInteger right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger Subtract(valuetype System.Numerics.BigInteger left, valuetype System.Numerics.BigInteger right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.BigInteger" />
        <Parameter Name="right" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="left">減算される値 \(被減数\)。</param>
        <param name="right">減算する値 \(減数\)。</param>
        <summary>1 を減算 <see cref="T:System.Numerics.BigInteger" /> 別の数値から結果を返します。</summary>
        <returns>
          <paramref name="left" /> から <paramref name="right" /> を減算した結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 カスタム演算子をサポートしない言語を使用して、 <xref:System.Numerics.BigInteger.Subtract%2A> 減算を使用して実行するメソッド <xref:System.Numerics.BigInteger> 値。  
  
 <xref:System.Numerics.BigInteger.Subtract%2A> メソッドがインスタンス化するとき、減算演算子の便利な代替手段は、 <xref:System.Numerics.BigInteger> 変数に次の例に示すように、減算の結果の違いを割り当てることをします。  
  
 [!code-csharp[System.Numerics.BigInteger.OperationMethods\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.OperationMethods\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#3)]  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)" />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.System#IComparable#CompareTo(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToByteArray">
      <MemberSignature Language="C#" Value="public byte[] ToByteArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] ToByteArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToByteArray" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>変換、 <see cref="T:System.Numerics.BigInteger" /> をバイト配列値です。</summary>
        <returns>現在の値 <see cref="T:System.Numerics.BigInteger" /> オブジェクトをバイト配列に変換します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドによって返される配列内の個々 のバイトは、リトル エンディアン順で表示されます。 つまり、値の下位バイトには、上位バイトが前になります。 配列の最初のバイトの最初の 8 ビットの反映、 <xref:System.Numerics.BigInteger> と次の 8 ビット、2 番目のバイトの値が反映されます。 たとえば、値 1,024年 0x0400 は、次の 2 バイトの配列として格納されます。  
  
|要素|バイト値|  
|--------|----------|  
|0|0x00|  
|1|0x04|  
  
 フォームの最も簡潔な可能性のある 2 の補数表現を使用して、配列には、負の値が書き込まれます。 たとえば、\-1 は、値が 1 バイトとして表されます。 `0xFF` の代わりに、複数の要素を配列としてなど `0xFF`, 、`0xFF` または `0xFF`, 、`0xFF`, 、`0xFF`, 、`0xFF`です。  
  
 最後のバイト配列内の最上位ビットを解釈するため、2 の補数の表示は常に \(位置にあるバイト <xref:System.Array.Length%2A?displayProperty=fullName>`- 1`\) 符号ビットとして、メソッドは値が 0 の符号ビットがセットを持つとして解釈される可能性はそれ以外の場合、正の値を区別するために余分な要素を使用してバイト配列を返します。 たとえば、120 までの値または `0x78` は 1 バイトの配列として表されます: `0x78`です。 ただし、128、または `0x80`, 、2 バイト配列として表されます。 `0x80`, 、`0x00`です。  
  
 ラウンドト リップすることができます、 <xref:System.Numerics.BigInteger> 値をバイト配列への保存、復元を使用して、 <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> コンス トラクターです。  
  
> [!CAUTION]
>  コードでは、値を復元する前に、このメソッドによって返される配列の個々 のバイト数の値を変更する場合を誤って変更されない、符号ビットを確認する必要があります。 たとえば、変更は、正の値を増やすため、バイト配列の最後の要素内の最上位ビット場合は、設定された場合、値が 0 の配列の末尾に新しいバイトを追加するのようになります。  
  
   
  
## 例  
 次の例がいくつか方法を示しています <xref:System.Numerics.BigInteger> 値はバイト配列で表されます。  
  
 [!code-csharp[System.Numerics.BigInteger.ToByteArray\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToByteArray/cs/ToByteArray1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.ToByteArray\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToByteArray/vb/ToByteArray1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>2.3.98.1</AssemblyVersion>
        <AssemblyVersion>3.98.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.Numerics.BigInteger" /> オブジェクトの数値を等価の文字列形式に変換します。</summary>
        <returns>現在の <see cref="T:System.Numerics.BigInteger" /> 値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Numerics.BigInteger.ToString> method formats a <xref:System.Numerics.BigInteger> value in the "R", or round\-trip, format of the current culture. If you want to specify a different format or culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:  
  
|To use format|For culture|Use the overload|  
|-------------------|-----------------|----------------------|  
|Round\-trip \("R"\) format|A specific culture|<xref:System.Numerics.BigInteger.ToString%2A>|  
|A specific format|Default \(current\) culture|<xref:System.Numerics.BigInteger.ToString%28System.String%29>|  
|A specific format|A specific culture|<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 The string representation of the <xref:System.Numerics.BigInteger> value includes a negative sign if its value is negative, and a sequence of digits ranging from 0 to 9 without leading zeros. The negative sign is defined by the <xref:System.Globalization.NumberFormatInfo> object for the current culture.  
  
   
  
## 例  
 The following example displays a <xref:System.Numerics.BigInteger> value by using the default <xref:System.Numerics.BigInteger.ToString> method. It also displays the string representations of the <xref:System.Numerics.BigInteger> value that results from using some standard format specifiers. The examples are displayed using the formatting conventions of the en\-US culture.  
  
 [!code-csharp[System.Numerics.BigInteger.ToString\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/cs/ToString1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.ToString\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/vb/ToString1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToString(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>指定されたカルチャ固有の書式情報を使用して、現在の <see cref="T:System.Numerics.BigInteger" /> オブジェクトの数値をそれと等価の文字列形式に変換します。</summary>
        <returns>現在の <see cref="T:System.Numerics.BigInteger" /> 値の文字列形式を、<paramref name="provider" /> パラメーターで指定されている形式で表現した値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29> method formats a <xref:System.Numerics.BigInteger> value in the "R", or round\-trip, format by using the <xref:System.Globalization.NumberFormatInfo> object of a specified culture. If you want to specify a different format or the current culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:  
  
|To use format|For culture|Use the overload|  
|-------------------|-----------------|----------------------|  
|Round\-trip \("R"\) format|Default \(current\) culture|<xref:System.Numerics.BigInteger.ToString>|  
|A specific format|Default \(current\) culture|<xref:System.Numerics.BigInteger.ToString%28System.String%29>|  
|A specific format|A specific culture|<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 The **parameterReference tag is not supported!!!!**  
 parameter is an <xref:System.IFormatProvider> implementation. Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture\-specific information about the format of the string returned by this method. If **parameterReference tag is not supported!!!!**  
 is **languageKeyword tag is not supported!!!!**  
, the <xref:System.Numerics.BigInteger> value is formatted using the <xref:System.Globalization.NumberFormatInfo> object of the current culture. The only property of the <xref:System.Globalization.NumberFormatInfo> object that controls the string representation of the <xref:System.Numerics.BigInteger> value using the general format specifier is <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName>, which defines the character that represents the negative sign.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter can be one of the following:  
  
-   A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.  
  
-   The <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.  
  
-   A custom object that implements <xref:System.IFormatProvider>. Its <xref:System.IFormatProvider.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.  
  
   
  
## 例  
 The following example instantiates a custom <xref:System.Globalization.NumberFormatInfo> object that defines the tilde \(~\) as a negative sign. The <xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29> method then uses the custom <xref:System.Globalization.NumberFormatInfo> object to display a negative <xref:System.Numerics.BigInteger> value.  
  
 [!code-csharp[System.Numeric.BigInteger.ToString\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.ToString/cs/System.Numeric.BigInteger.ToString.cs#1)]
 [!code-vb[System.Numeric.BigInteger.ToString\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.ToString/vb/System.Numeric.BigInteger.ToString.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToString(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">標準またはカスタムの数値書式指定文字列。</param>
        <summary>指定された書式を使用して、現在の <see cref="T:System.Numerics.BigInteger" /> オブジェクトの数値をそれと等価な文字列形式に変換します。</summary>
        <returns>現在の <see cref="T:System.Numerics.BigInteger" /> 値の文字列形式を、<paramref name="format" /> パラメーターで指定されている形式で表現した値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Numerics.BigInteger.ToString%28System.String%29> method formats a <xref:System.Numerics.BigInteger> value in a specified format by using a <xref:System.Globalization.NumberFormatInfo> object that represents the conventions of the current culture. If you want to use the "R", or round\-trip, format or specify a different culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:  
  
|To use format|For culture|Use the overload|  
|-------------------|-----------------|----------------------|  
|Round\-trip \("R"\) format|Default \(current\) culture|<xref:System.Numerics.BigInteger.ToString>|  
|Round\-trip \("R"\) format|A specific culture|<xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29>|  
|A specific format|A specific culture|<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 The **parameterReference tag is not supported!!!!**  
 parameter can be any valid [standard numeric string](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467), or any combination of [custom numeric format strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4). If **parameterReference tag is not supported!!!!**  
 is equal to <xref:System.String.Empty?displayProperty=fullName> or is **languageKeyword tag is not supported!!!!**  
, the return value of the current <xref:System.Numerics.BigInteger> object is formatted with the round\-trip format specifier \("R"\). If **parameterReference tag is not supported!!!!**  
 is any other value, the method throws a <xref:System.FormatException>.  
  
 The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  
  
-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467) and [Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4).  
  
-   For more information about support for formatting in the .NET Framework, see [Formatting Overview](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f).  
  
 The format of the returned string is determined by the <xref:System.Globalization.NumberFormatInfo> object for the current culture. Depending on the **parameterReference tag is not supported!!!!**  
 parameter, this object controls symbols such as the negative sign, the group separator, and the decimal point symbol in the output string. To provide formatting information for cultures other than the current culture, call the <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> overload.  
  
   
  
## 例  
 The following example initializes a <xref:System.Numerics.BigInteger> value and displays it by using each standard format string and some custom format strings.  
  
 [!code-csharp[System.Numerics.BigInteger.ToString\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/cs/ToString1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.ToString\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/vb/ToString1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> は有効な文字列ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">標準またはカスタムの数値書式指定文字列。</param>
        <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>指定された書式とカルチャ固有の書式情報を使用して、現在の <see cref="T:System.Numerics.BigInteger" /> オブジェクトの数値をそれと等価の文字列形式に変換します。</summary>
        <returns>
          <paramref name="format" /> パラメーターと <paramref name="provider" />パラメーターで指定されている現在の <see cref="T:System.Numerics.BigInteger" /> 値の文字列表現。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method formats a <xref:System.Numerics.BigInteger> value in a specified format by using the <xref:System.Globalization.NumberFormatInfo> object of a specified culture. If you want to use the round\-trip format or default culture settings, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:  
  
|To use format|For culture|Use the overload|  
|-------------------|-----------------|----------------------|  
|Round\-trip \("R"\) format|Default \(current\) culture|<xref:System.Numerics.BigInteger.ToString>|  
|Round\-trip \("R"\) format|A specific culture|<xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29>|  
|A specific format|Default \(current\) culture|<xref:System.Numerics.BigInteger.ToString%28System.String%29>|  
  
 The **parameterReference tag is not supported!!!!**  
 parameter can be any valid  [standard numeric string](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467), or any combination of [custom numeric format strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4). If **parameterReference tag is not supported!!!!**  
 is equal to <xref:System.String.Empty?displayProperty=fullName> or is **languageKeyword tag is not supported!!!!**  
, the return value of the current <xref:System.Numerics.BigInteger> object is formatted with the round\-trip format specifier \("R"\). If **parameterReference tag is not supported!!!!**  
 is any other value, the method throws a <xref:System.FormatException>.  
  
 The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  
  
-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467) and [Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4).  
  
-   For more information about support for formatting in the .NET Framework, see [Formatting Overview](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f).  
  
 The **parameterReference tag is not supported!!!!**  
 parameter is an <xref:System.IFormatProvider> implementation. Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture\-specific information about the format of the string returned by this method. When the <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method is invoked, it calls the **parameterReference tag is not supported!!!!**  
 parameter's <xref:System.IFormatProvider.GetFormat%2A> method and passes it a <xref:System.Type> object that represents the <xref:System.Globalization.NumberFormatInfo> type. The <xref:System.IFormatProvider.GetFormat%2A> method then returns the <xref:System.Globalization.NumberFormatInfo> object that provides information for formatting the **parameterReference tag is not supported!!!!**  
 parameter, such as the negative sign symbol, the group separator symbol, or the decimal point symbol. There are three ways to use the **parameterReference tag is not supported!!!!**  
 parameter to supply formatting information to the <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method:  
  
-   You can pass a <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information. Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.  
  
-   You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information. \(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.\)  
  
-   You can pass a custom object that implements <xref:System.IFormatProvider>. Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.  
  
 If **parameterReference tag is not supported!!!!**  
 is **languageKeyword tag is not supported!!!!**  
, the formatting of the returned string is based on the <xref:System.Globalization.NumberFormatInfo> object of the current culture.  
  
   
  
## 例  
 The following example initializes a <xref:System.Numerics.BigInteger> value, and displays it to the console using a standard format string and a <xref:System.Globalization.NumberFormatInfo> object that defines the tilde \(~\) as a negative sign.  
  
 [!code-csharp[System.Numerics.BigInteger.ToString\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/cs/ToString1.cs#4)]
 [!code-vb[System.Numerics.BigInteger.ToString\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/vb/ToString1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> は有効な文字列ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string value, out System.Numerics.BigInteger result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string value, valuetype System.Numerics.BigInteger result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="result" Type="System.Numerics.BigInteger&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">数値の文字列形式。</param>
        <param name="result">このメソッドが戻るとき、 <see cref="T:System.Numerics.BigInteger" /> に含まれている数値と等しい <c>value</c>, 、またはゼロ \(0\) の場合は、変換は失敗します。 変換は失敗、 <c>value</c> パラメーターは <see langword="null" /> または正しい形式のではありません。 このパラメーターは初期化せずに渡されます。</param>
        <summary>数値の文字列形式を対応する <see cref="T:System.Numerics.BigInteger" /> 表現に変換できるかどうかを試行し、変換に成功したかどうかを示す値を返します。</summary>
        <returns>
          <see langword="true" /> が正常に変換された場合は <paramref name="value" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Numerics.BigInteger%40%29> メソッドは、のように、 <xref:System.Numerics.BigInteger.Parse%28System.String%29> メソッド、点を除いて、変換が失敗した場合に、it が例外をスローしません。 このメソッドをテストするため、例外処理を使用する必要がある、 <xref:System.FormatException> 場合 `value` 無効なため、正常に解析することはできません。  
  
 `value` パラメーターは、次の形式の 10 進数の文字列形式を指定する必要があります。  
  
 \[*ws*\]\[*sign*\]*digits*\[*ws*\]  
  
 角かっこ \(\[ および \]\) 内の要素は省略可能です。 次の表では、各要素について説明します。  
  
|要素|説明|  
|--------|--------|  
|*ws*|省略可能な空白です。|  
|*サインイン*|オプションの符号です。 有効な署名の文字によって決定されます、 <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName> と <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=fullName> 、現在のカルチャのプロパティです。|  
|*数字*|10 進数字の 0 から 9 までのシーケンス。|  
  
> [!NOTE]
>  指定された文字列、 `value` パラメーターは、桁区切り記号や小数点区切り文字を含めることはできず、小数部を持つことはできません。  
  
 `value` パラメーターを使用して解釈されます、 <xref:System.Globalization.NumberStyles.Integer?displayProperty=fullName> スタイル。 10 進数字以外には、先頭と末尾の先頭の符号とスペースのみを使用できます。 使用可能なカルチャ固有の書式情報を持つスタイル要素を明示的に定義する `value`, を呼び出す、 <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> メソッドです。  
  
 `value` で書式設定情報を使用してパラメーターを解析、 <xref:System.Globalization.NumberFormatInfo> 、現在のカルチャ オブジェクト。 詳細については、「<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=fullName>」を参照してください。  
  
 このオーバー ロード内のすべての桁を解釈し、 `value` 小数点以下桁数のパラメーターです。 を 16 進数の文字列形式を解析するを呼び出す、 <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> 代わりに、オーバー ロードします。  
  
   
  
## 例  
 次の例では、 <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Numerics.BigInteger%40%29> 2 つのインスタンスを作成するメソッド <xref:System.Numerics.BigInteger> オブジェクトです。 別の数値によって各オブジェクトを乗算しを呼び出して、変換が成功した場合、 <xref:System.Numerics.BigInteger.Compare%2A> メソッドを 2 つのオブジェクト間の関係を決定します。  
  
 [!code-csharp[System.Numeric.BigInteger.TryParse\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.TryParse/cs/System.Numeric.BigInteger.TryParse.cs#1)]
 [!code-vb[System.Numeric.BigInteger.TryParse\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.TryParse/vb/System.Numeric.BigInteger.TryParse.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Numerics.BigInteger.ToString(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string value, System.Globalization.NumberStyles style, IFormatProvider provider, out System.Numerics.BigInteger result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string value, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, valuetype System.Numerics.BigInteger result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.Numerics.BigInteger&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">数値の文字列形式。 文字列は、<c>style</c> で指定されたスタイルを使用して解釈されます。</param>
        <param name="style">
          <c>value</c> で使用可能なスタイル要素を示す、列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.NumberStyles.Integer" /> です。</param>
        <param name="provider">
          <c>value</c> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="result">このメソッドが戻るとき、 <see cref="T:System.Numerics.BigInteger" /> に含まれている数値と等しい <c>value</c>, 、または <see cref="P:System.Numerics.BigInteger.Zero" /> 変換に失敗した場合。 変換は失敗、 <c>value</c> パラメーターは <see langword="null" /> に準拠した形式ではない、または <c>style</c>です。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定されたスタイルおよびカルチャ固有の書式の数値の文字列形式を等価の <see cref="T:System.Numerics.BigInteger" /> に変換できるかどうかを試行し、変換に成功したかどうかを示す値を返します。</summary>
        <returns>
          <see langword="true" /> パラメーターが正常に変換された場合は <paramref name="value" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> メソッドは、のように、 <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> メソッド、点を除いて、変換が失敗した場合に、it が例外をスローしません。 このメソッドをテストするため、例外処理を使用する必要がある、 <xref:System.FormatException> 場合 `value` 無効なため、正常に解析されたことはできません。  
  
 `style` パラメーター \(空白や正または負符号\) で使用できるスタイル要素を定義する、 `value` 解析操作が成功するためのパラメーターです。 ビット フラグの組み合わせを可能にする必要があります、 <xref:System.Globalization.NumberStyles> 列挙します。 値に応じて `style`, 、 `value` パラメーターは、次の要素を含めることがあります。  
  
 \[*ws*\]\[*$*\]\[*sign*\]\[*digits*,\]*digits*\[.*fractional\_digits*\] \[E \[*記号*\]*exponential\_digits*\] \[*ws*\]  
  
 場合、 `style` パラメーターが含まれる <xref:System.Globalization.NumberStyles.AllowHexSpecifier>, 、 `value` パラメーターは、次の要素を含めることがあります。  
  
 \[*ws*\]*hexdigits*\[*ws*\]  
  
 角かっこ \(\[ および \]\) 内の要素は省略可能です。 次の表では、各要素について説明します。  
  
|要素|説明|  
|--------|--------|  
|*ws*|省略可能な空白です。 空白文字の開始時に表示されます `value` 場合 `style` が含まれています、 <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=fullName> フラグ、またはの終了時に `value` 場合 `style` が含まれています、 <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=fullName> フラグ。|  
|*$*|カルチャに固有の通貨記号です。 文字列内での位置が定義されている、 <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A> のプロパティ、 <xref:System.Globalization.NumberFormatInfo> によって返されるオブジェクト、 <xref:System.IFormatProvider.GetFormat%2A> のメソッド、 `provider` パラメーター。 通貨記号に表示される `value` 場合 `style` が含まれています、 <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=fullName> フラグ。|  
|*サインイン*|オプションの符号です。 先頭に符号があることができます `value` 場合 `style` が含まれています、 <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=fullName> の最後に、フラグ、およびそれが表示される `value` 場合 `style` が含まれています、 <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=fullName> フラグ。 かっこを使用できます `value` 負の値を指定する場合 `style` を含む、 <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=fullName> フラグ。|  
|*数字*|0 ~ 9 桁の数字のシーケンス。|  
|*、*|カルチャに固有の桁区切り記号。 指定したカルチャの桁区切り記号 `provider` に表示されるよう `value` 場合 `style` が含まれています、 <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=fullName> フラグ。|  
|*」を参照してください。*|カルチャに固有の小数点の記号。 指定したカルチャの小数点記号 `provider` に表示されるよう `value` 場合 `style` が含まれています、 <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=fullName> フラグ。|  
|*fractional\_digits*|数字の 0 の 1 つ以上の出現します。 桁の小数部に表示される `value` 場合にのみ、 `style` を含む、 <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=fullName> フラグ。|  
|E|"E"または"E"文字は、値が指数表記で表されることを示します。`value` 場合、パラメーターは指数表記の数値を表すことができます `style` を含む、 <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=fullName> フラグ。|  
|*exponential\_digits*|0 ~ 9 桁の数字のシーケンス。`value` 場合、パラメーターは指数表記の数値を表すことができます `style` を含む、 <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=fullName> フラグ。|  
|*hexdigits*|16 進数 0 ~ f、または 0 F. ~ からのシーケンス|  
  
 桁のみの文字列 \(に対応する、 <xref:System.Globalization.NumberStyles.None?displayProperty=fullName> フラグ\) 常に正常に解析します。 残りのほとんど <xref:System.Globalization.NumberStyles> メンバーが存在する可能性がありますが、この入力文字列内に存在する必要はありませんが要素を制御します。 次の表に示す個別 <xref:System.Globalization.NumberStyles> メンバー内に存在可能な要素に影響を与える `value`します。  
  
|非複合 `NumberStyles` 値|数字以外の値で使用できる要素|  
|--------------------------|--------------------|  
|<xref:System.Globalization.NumberStyles.None>|10 進数字のみです。|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|整数部の桁数 \(*.*\) と *fractional\_digits* 要素。 ただし、 *fractional\_digits* 限必要なだけの 1 つ以上の数字 0、またはメソッドの戻り値を `false`します。|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|"E"または"E"文字は、指数表記を示すと共に *exponential\_digits*します。 場合 `value` 数値を指数表記は使用できない、0 以外の小数部のコンポーネントです。|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|*Ws* 先頭の要素 `value`します。|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|*Ws* の末尾から要素 `value`します。|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|*記号* の前に要素 *桁*します。|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|*記号* 要素の後に *桁*します。|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|*記号* 形式の数値を囲むかっこ内の要素。|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|桁区切り記号 \(*,、*\) 要素です。|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|通貨 \(*$*\) 要素です。|  
|<xref:System.Globalization.NumberStyles.Currency>|すべての要素。 ただし、 `value` 16 進数または指数表記の数値を表すことはできません。|  
|<xref:System.Globalization.NumberStyles.Float>|*Ws* 先頭または末尾の位置にある要素 `value`, 、*記号* の開始時 `value`, 、および小数点 \(*.*\) シンボルです。`value` パラメーターは、指数表記も使用できます。|  
|<xref:System.Globalization.NumberStyles.Number>|*Ws*, 、*記号*, 、桁区切り記号 \(*,、*\)、および小数点 \(*.*\) 要素です。|  
|<xref:System.Globalization.NumberStyles.Any>|すべての要素。 ただし、 `value` 16 進数を表すことはできません。|  
  
> [!IMPORTANT]
>  使用する場合、 <xref:System.Numerics.BigInteger.TryParse%2A> 文字列形式をラウンドト リップさせるメソッドの <xref:System.Numerics.BigInteger> によって出力された値、 <xref:System.Numerics.BigInteger.ToString%2A> メソッドを使用してください、 <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName> メソッドの文字列形式を生成する、"R"書式指定子を <xref:System.Numerics.BigInteger> 値。 それ以外の場合の文字列表現、 <xref:System.Numerics.BigInteger> 、50 個の元の値とデータの最大有効桁数が失われるを使用する場合のみが保持されます、 <xref:System.Numerics.BigInteger.TryParse%2A> を復元する方法、 <xref:System.Numerics.BigInteger> 値。  
  
 場合、 <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=fullName> フラグを使用すると、 `value` 16 進数値にする必要があります。 その他のフラグのみで使用可能な `style` は <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=fullName> と <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=fullName>です。 \(、 <xref:System.Globalization.NumberStyles> 列挙体には、複合スタイル <xref:System.Globalization.NumberStyles.HexNumber>, 、両方の空白文字フラグが含まれます\)。  
  
> [!NOTE]
>  場合 `value` 文字列の形式は、その、16 進数の接頭辞前ことはできません \(など `0x` または `&h`\)、16 進数として区別します。 これにより、変換に失敗します。  
  
 場合 `value` 16 進数の文字列、 <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> メソッドでは、解釈 `value` の最初の 2 つの 16 進数字がより大きいか等しい場合は、2 の補数表現を使用して、格納されている負の数値として `0x80`します。 つまり、メソッドは、最初のバイトの最上位ビットを解釈 `value` 符号ビットとします。 16 進数文字列がの最初の桁の正の整数として正しく解釈されるかどうかを確認する `value` ゼロの値を持つ必要があります。 たとえば、このメソッドは解釈 `0x80` 負の値が解釈するか、 `0x080` または `0x0080` 正の値。 次の例では、負と正の値を表す 16 進数の文字列間で違いを示します。  
  
 [!code-csharp[System.Numerics.BigInteger.TryParse\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/cs/TryParseHex1.cs#1)]
 [!code-vb[System.Numerics.BigInteger.TryParse\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/vb/TryParseHex1.vb#1)]  
  
 `provider` パラメーターは、 <xref:System.IFormatProvider> 実装します。 その <xref:System.IFormatProvider.GetFormat%2A> メソッドが返される、 <xref:System.Globalization.NumberFormatInfo> の書式に関するカルチャ固有の情報を提供するオブジェクト `value`します。`provider` パラメーターは、次のいずれかを指定できます。  
  
-   A <xref:System.Globalization.CultureInfo> の書式情報を提供するカルチャを表すオブジェクト。 その <xref:System.Globalization.CultureInfo.GetFormat%2A> メソッドが返される、 <xref:System.Globalization.NumberFormatInfo> そのカルチャの数値の書式設定情報を提供するオブジェクト。  
  
-   A <xref:System.Globalization.NumberFormatInfo> 数値書式設定情報を提供するオブジェクト。 \(その実装の <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> 自体が返されるだけです\)。  
  
-   実装するカスタム オブジェクト <xref:System.IFormatProvider>します。 その <xref:System.IFormatProvider.GetFormat%2A> メソッドをインスタンス化し、返します、 <xref:System.Globalization.NumberFormatInfo> の書式情報を提供するオブジェクト。  
  
 場合 `provider` は `null`, 、 <xref:System.Globalization.NumberFormatInfo> オブジェクトの現在のカルチャが使用されます。  
  
   
  
## 例  
 次の例は、いくつかの呼び出し、 <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> の値のさまざまな組み合わせを使用して、メソッド、 `style` と `provider` パラメーター。  
  
 [!code-csharp[System.Numerics.BigInteger.TryParse\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/cs/TryParse1.cs#2)]
 [!code-vb[System.Numerics.BigInteger.TryParse\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/vb/TryParse1.vb#2)]  
  
 個々 の呼び出しの数、 <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> メソッドは、次のインスタンスを渡す `BigIntegerFormatProvider` クラスは、負の符号としてティルダ \(~\) を定義します。  
  
 [!code-csharp[System.Numerics.BigInteger.TryParse\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/cs/TryParse1.cs#3)]
 [!code-vb[System.Numerics.BigInteger.TryParse\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/vb/TryParse1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。  
  
 または  
  
 <paramref name="style" /> 含む、 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> または <see cref="F:System.Globalization.NumberStyles.HexNumber" /> と共に別の値のフラグ。</exception>
        <altmember cref="Overload:System.Numerics.BigInteger.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Zero">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger Zero { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Numerics.BigInteger Zero" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.BigInteger.Zero" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Numerics</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>2.3.98.1</AssemblyVersion>
        <AssemblyVersion>3.98.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>0 \(ゼロ\) を表す値を取得します。</summary>
        <value>値が 0 \(ゼロ\) である整数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Numerics.BigInteger>このプロパティによって返されるオブジェクトは、代入と比較で使用する値が 0 の便利なソースを提供します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Numerics.BigInteger.IsZero" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Implicit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>間の暗黙的な変換を定義、 <see cref="T:System.Numerics.BigInteger" /> オブジェクトと別の型。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>2 つの数値が等しいかどうかを示す値を返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>現在の <see cref="T:System.Numerics.BigInteger" /> オブジェクトの数値を等価の文字列形式に変換します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Numerics.BigInteger" /> 構造体の新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>数値の文字列形式を対応する <see cref="T:System.Numerics.BigInteger" /> 表現に変換できるかどうかを試行し、変換に成功したかどうかを示す値を返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="op_GreaterThan">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された値を指定した値が他よりも大きいかどうかを示す値を返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="op_Explicit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Numerics.BigInteger" /> オブジェクトと別の型の間の明示的な変換を定義します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="op_Equality">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された 2 つの値が等しいかどうかを示す値を返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Log">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した数の対数を返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このインスタンスの値と別の値を比較し、このインスタンスの値がもう一方の値よりも小さいか、同じか、または大きいかを示す整数を返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="op_LessThanOrEqual">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された値がもう 1 つの指定された値以下かどうかを示す値を返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="op_LessThan">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された値がもう 1 つの指定された値より小さいかどうかを示す値を返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="op_GreaterThanOrEqual">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された値がもう 1 つの指定された値以上かどうかを示す値を返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>数値の文字列形式を、それと等価の <see cref="T:System.Numerics.BigInteger" /> に変換します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="op_Inequality">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Numerics</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>2 つの数値が等しくないかどうかを示す値を返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>