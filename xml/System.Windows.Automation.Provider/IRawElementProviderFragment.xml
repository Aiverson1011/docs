<Type Name="IRawElementProviderFragment" FullName="System.Windows.Automation.Provider.IRawElementProviderFragment">
  <TypeSignature Language="C#" Value="public interface IRawElementProviderFragment : System.Windows.Automation.Provider.IRawElementProviderSimple" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRawElementProviderFragment implements class System.Windows.Automation.Provider.IRawElementProviderSimple" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.IRawElementProviderFragment" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Automation.Provider.IRawElementProviderSimple</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("f7063da8-8359-439c-9297-bbc5299a7d87")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>リスト ボックスやリスト項目などの多階層構造の一部である、ユーザー インターフェイス (UI) 要素のメソッドとプロパティを公開します。 UI オートメーション プロバイダーによって実装されます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 フラグメントのルート ノードをサポートする必要があります、 <xref:System.Windows.Automation.Provider.IRawElementProviderFragmentRoot> から継承するインターフェイスを <xref:System.Windows.Automation.Provider.IRawElementProviderFragment>します。  
  
   
  
## 例  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BoundingRectangle">
      <MemberSignature Language="C#" Value="public System.Windows.Rect BoundingRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Rect BoundingRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IRawElementProviderFragment.BoundingRectangle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この要素の外接する四角形を取得します。</summary>
        <value>外接する四角画面座標。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 クリップは必要ありません、要素が隠ぺいされたその他の部分または画面外にある場合です。<xref:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsOffscreen%2A> 四角形が実際に表示されているかどうかを示すためにプロパティを設定する必要があります。  
  
 外接する四角形に含まれるすべてのポイントは、必ずしもクリック可能です。  
  
   
  
## 例  
 次のコード例外接する四角形の内部状態を保持、 <xref:System.Drawing.Rectangle?displayProperty=fullName>, に変換する、 <xref:System.Windows.Rect?displayProperty=fullName> 返される前にします。  
  
 [!code-csharp[UIAFragmentProvider\_snip\#104](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAFragmentProvider_snip/CSharp/ListItemFragment.cs#104)]
 [!code-vb[UIAFragmentProvider\_snip\#104](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAFragmentProvider_snip/VisualBasic/ListItemFragment.vb#104)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FragmentRoot">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.IRawElementProviderFragmentRoot FragmentRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Automation.Provider.IRawElementProviderFragmentRoot FragmentRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IRawElementProviderFragment.FragmentRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.IRawElementProviderFragmentRoot</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フラグメントのルート ノードを取得します。</summary>
        <value>ルート ノード。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 実装するプロバイダー <xref:System.Windows.Automation.Provider.IRawElementProviderFragmentRoot> 自体を返す必要があります。  
  
   
  
## 例  
 次のコード例は、リスト ボックス内のリスト アイテムなどのフラグメント内の要素の実装を示します。  
  
 [!code-csharp[UIAFragmentProvider\_snip\#105](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAFragmentProvider_snip/CSharp/ListItemFragment.cs#105)]
 [!code-vb[UIAFragmentProvider\_snip\#105](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAFragmentProvider_snip/VisualBasic/ListItemFragment.vb#105)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEmbeddedFragmentRoots">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.IRawElementProviderSimple[] GetEmbeddedFragmentRoots ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.IRawElementProviderSimple[] GetEmbeddedFragmentRoots() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IRawElementProviderFragment.GetEmbeddedFragmentRoots" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.IRawElementProviderSimple[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>埋め込まれているフラグメント ルートの配列を取得、 UI オートメーション 要素ツリーは、現在の要素をルートとします。</summary>
        <returns>ルートのフラグメントの配列または <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドが現在の要素が別のホストの場合のみ、フラグメントの配列を返します [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] フレームワークです。 ほとんどのプロバイダーを返す `null`します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRuntimeId">
      <MemberSignature Language="C#" Value="public int[] GetRuntimeId ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32[] GetRuntimeId() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IRawElementProviderFragment.GetRuntimeId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>要素のランタイム識別子を取得します。</summary>
        <returns>要素の一意のランタイム識別子。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 メソッドの実装 `null` ウィンドウ ハンドルに対応する要素。 その他の要素を含む配列を返す必要があります <xref:System.Windows.Automation.Provider.AutomationInteropProvider.AppendRuntimeId>, フラグメント内で一意である値と、その後です。  
  
 フラグメント内での一意性を確保する、プロバイダーの役目です。たとえば、一覧内の各項目を個別に番号する必要があります。[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] エンジンにより、識別子がすべてのインスタンス間で一意で変換することによって、 <xref:System.Windows.Automation.Provider.AutomationInteropProvider.AppendRuntimeId>値。  
  
   
  
## 例  
 次のコード例では、リスト ボックス内の項目などのフラグメント内の要素でこのメソッドの実装を示しています。 アイテムが、フラグメントのこのインスタンス内で一意の識別子があると、 <xref:System.Windows.Automation.Provider.AutomationInteropProvider.AppendRuntimeId> 値メソッドによって返された識別子が内で一意であることを確認、 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] ツリーです。  
  
 [!code-csharp[UIAFragmentProvider\_snip\#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAFragmentProvider_snip/CSharp/ListItemFragment.cs#101)]
 [!code-vb[UIAFragmentProvider\_snip\#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAFragmentProvider_snip/VisualBasic/ListItemFragment.vb#101)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.IRawElementProviderFragment Navigate (System.Windows.Automation.Provider.NavigateDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.IRawElementProviderFragment Navigate(valuetype System.Windows.Automation.Provider.NavigateDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IRawElementProviderFragment.Navigate(System.Windows.Automation.Provider.NavigateDirection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.IRawElementProviderFragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Automation.Provider.NavigateDirection" />
      </Parameters>
      <Docs>
        <param name="direction">移動する方向。</param>
        <summary>ツリー内で、指定された方向にある UI オートメーション 要素を取得します。</summary>
        <returns>指定された方向にある要素。その方向に要素が存在しない場合は <see langword="null" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] このメソッドのサーバーの実装の構造を定義する、 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] 要素ツリー。  
  
 ナビゲーションは、必要に応じて、上に親下方向に最初と最後の子に、横方向の移動は次の手順と前の兄弟である必要があります。  
  
 それぞれの子ノードは 1 つだけの親を持ち、親からのチェーンに配置する必要があります <xref:System.Windows.Automation.Provider.NavigateDirection.FirstChild> と <xref:System.Windows.Automation.Provider.NavigateDirection.LastChild>です。  
  
 兄弟間でリレーションシップを双方向のと同じにする必要があります: A が B の場合は <xref:System.Windows.Automation.Provider.NavigateDirection.PreviousSibling>, 、B は A の <xref:System.Windows.Automation.Provider.NavigateDirection.NextSibling>です。 A <xref:System.Windows.Automation.Provider.NavigateDirection.FirstChild> 持たない <xref:System.Windows.Automation.Provider.NavigateDirection.PreviousSibling>, 、および <xref:System.Windows.Automation.Provider.NavigateDirection.LastChild> 持たない <xref:System.Windows.Automation.Provider.NavigateDirection.NextSibling>します。  
  
 フラグメント ルートは、親または兄弟へのナビゲーションを有効にしません。フラグメント ルート間の移動は、既定のウィンドウ プロバイダーによって処理されます。 フラグメント内の要素は、フラグメント内の他の要素にのみ移動する必要があります。  
  
   
  
## 例  
 次のコード例は、の実装を示しています。 <xref:System.Windows.Automation.Provider.IRawElementProviderFragment.Navigate%2A> フラグメント ルートを持つ単一の子要素です。 実装する要素は、フラグメントのルートであるため、親要素または要素の兄弟要素へのナビゲーションは有効なりません。  
  
 [!code-csharp[UIAProvider\_snip\#105](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAProvider_snip/CSharp/FragmentRoot.cs#105)]
 [!code-vb[UIAProvider\_snip\#105](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAProvider_snip/VisualBasic/FragmentRoot.vb#105)]  
  
 次の例では、リスト ボックス内の 1 つの項目を表すフラグメントによって、実装を示します。 ここで、要素には、すべての子ではなく、その親および兄弟にナビゲーションができるようにします。  
  
 [!code-csharp[UIAFragmentProvider\_snip\#103](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAFragmentProvider_snip/CSharp/ListItemFragment.cs#103)]
 [!code-vb[UIAFragmentProvider\_snip\#103](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAFragmentProvider_snip/VisualBasic/ListItemFragment.vb#103)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFocus">
      <MemberSignature Language="C#" Value="public void SetFocus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFocus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IRawElementProviderFragment.SetFocus" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この要素にフォーカスを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] フレームワークは、このフラグメントをホストするインターフェイスの一部が既にこのメソッドを呼び出す前に重点を置いていることを確認します。 実装は、内部のフォーカス状態のみを更新する必要があります。たとえば、結果がリスト アイテムを再描画して、フォーカスを持ちます。 たい場合 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] いない親ウィンドウのフォーカスを設定、 <xref:System.Windows.Automation.Provider.ProviderOptions.ProviderOwnsSetFocus> オプション <xref:System.Windows.Automation.Provider.ProviderOptions> フラグメント ルートのです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>