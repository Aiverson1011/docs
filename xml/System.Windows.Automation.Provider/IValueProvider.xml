<Type Name="IValueProvider" FullName="System.Windows.Automation.Provider.IValueProvider">
  <TypeSignature Language="C#" Value="public interface IValueProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IValueProvider" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.IValueProvider" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("c7935180-6fb3-4201-b174-7df73adbf64a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>1 つの範囲に広がらず、文字列として表すことができる固有の値を持つコントロールへの、UI オートメーション クライアントのアクセスをサポートするメソッドとプロパティを公開します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 コントロールの値は、可能性がありますか、コントロールとその設定によっては編集できない可能性があります。  
  
 サポートが必要な UI オートメーション プロバイダーに実装されている、 <xref:System.Windows.Automation.ValuePattern> コントロール パターンです。  
  
   
  
## 例  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.ValuePattern" />
  </Docs>
  <Members>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IValueProvider.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの値は読み取り専用であるかどうかを指定する値を取得します。</summary>
        <value>値が読み取り専用の場合は <see langword="true" />。変更可能な場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Automation.Provider.IValueProvider.SetValue%2A> を呼び出せるようにするには、コントロールの <xref:System.Windows.Automation.AutomationElement.IsEnabledProperty> を `true` に設定し、<xref:System.Windows.Automation.ValuePattern.IsReadOnlyProperty> を `false` に設定する必要があります。  
  
   
  
## 例  
 次の例では、変更する場合は、その値を許可する、コントロールに対して、このメソッドの実装を示します。  
  
 [!code-csharp[UIAIValueProvider\_snip\#IsReadOnly](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAIValueProvider_snip/CSharp/ValueFragment.cs#isreadonly)]
 [!code-vb[UIAIValueProvider\_snip\#IsReadOnly](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAIValueProvider_snip/visualbasic/valuefragment.vb#isreadonly)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IValueProvider.SetValue(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">設定する値。 プロバイダーは、値を適切なデータ型に変換します。</param>
        <summary>コントロールの値を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Single\-line edit controls support programmatic access to their contents by implementing <xref:System.Windows.Automation.Provider.IValueProvider>. However, multi\-line edit controls do not implement <xref:System.Windows.Automation.Provider.IValueProvider>; instead they provide access to their content by implementing <xref:System.Windows.Automation.Provider.ITextProvider>.  
  
 Controls such as <xref:System.Windows.Automation.ControlType.ListItem> and <xref:System.Windows.Automation.ControlType.TreeItem> must implement <xref:System.Windows.Automation.Provider.IValueProvider> if the value of any of the items is editable, regardless of the current edit mode of the control. The parent control must also implement <xref:System.Windows.Automation.Provider.IValueProvider> if the child items are editable.  
  
 5298b4c2-6d95-4cd0-a48e-6b998bcceea0  
Example of an Editable List Item  
  
   
  
## 例  
 The following example code demonstrates a custom control that allows its value to be set to a string of limited length.  
  
 [!code-csharp[UIAIValueProvider\_snip\#SetValue](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAIValueProvider_snip/CSharp/ValueFragment.cs#setvalue)]
 [!code-vb[UIAIValueProvider\_snip\#SetValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAIValueProvider_snip/visualbasic/valuefragment.vb#setvalue)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">ロケールに固有の情報が、誤った形式でコントロールに渡された場合 \(誤った日付形式など\)。</exception>
        <exception cref="T:System.ArgumentException">新しい値を、文字列からコントロールが認識する形式に変換できない場合。</exception>
        <exception cref="T:System.Windows.Automation.ElementNotEnabledException">有効になっていないコントロールの操作が試行された場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IValueProvider.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの値を取得します。</summary>
        <value>文字列としてのコントロールの値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 単一行のエディット コントロールを実装してその内容にプログラムでアクセスをサポートする <xref:System.Windows.Automation.Provider.IValueProvider> \(に加えて <xref:System.Windows.Automation.Provider.ITextProvider>\)。 ただし、複数行のエディット コントロールを実装しない <xref:System.Windows.Automation.Provider.IValueProvider>します。  
  
 複数行のエディット コントロールのテキスト コンテンツを取得するコントロールを実装する必要があります <xref:System.Windows.Automation.Provider.ITextProvider>します。 ただし、<xref:System.Windows.Automation.Provider.ITextProvider> はコントロールの値の設定はサポートしていません。  
  
 <xref:System.Windows.Automation.Provider.IValueProvider> は、書式設定情報や部分文字列の値の取得をサポートしていません。 このようなシナリオでは <xref:System.Windows.Automation.Provider.ITextProvider> を実装します。  
  
   
  
## 例  
 次の例では、取得するには、その値を許可する、コントロールに対して、このメソッドの実装を示します。  
  
 [!code-csharp[UIAIValueProvider\_snip\#Value](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAIValueProvider_snip/CSharp/ValueFragment.cs#value)]
 [!code-vb[UIAIValueProvider\_snip\#Value](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAIValueProvider_snip/visualbasic/valuefragment.vb#value)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>