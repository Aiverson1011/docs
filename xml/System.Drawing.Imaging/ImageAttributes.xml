<Type Name="ImageAttributes" FullName="System.Drawing.Imaging.ImageAttributes">
  <TypeSignature Language="C#" Value="public sealed class ImageAttributes : ICloneable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit ImageAttributes extends System.Object implements class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Imaging.ImageAttributes" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>レンダリング時のビットマップとメタファイルの色の操作方法に関する情報を格納します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Drawing.Imaging.ImageAttributes> オブジェクトは、カラー調整行列、グレースケール調整行列、ガンマ補正値、カラー マップ テーブルでは、色のしきい値など、いくつかのカラー調整設定を保持します。 レンダリング中に色を修正、暗く、明るく、および削除できます。 このような操作を適用するには、初期化、 <xref:System.Drawing.Imaging.ImageAttributes> オブジェクトし、そのパスを渡す <xref:System.Drawing.Imaging.ImageAttributes> オブジェクト \(のパスと共に、 <xref:System.Drawing.Image>\) に、 <xref:System.Drawing.Graphics.DrawImage%2A> メソッドです。  
  
   
  
## 例  
 次の例はすべて 1 つの色 \(0.2、0.0、0.4, 1.0\) のイメージと赤の要素 1 個の double 0.2 を赤、緑、青の各要素に追加します。  
  
 次の図は、元のイメージを左に、右側の変換後のイメージを示しています。  
  
 4F3B9F97-0E89-4693-8BF8-E72CB730380B  
  
 次の例のコードでは、次の手順を使用して、色の変更を実行します。  
  
1.  初期化、 <xref:System.Drawing.Imaging.ColorMatrix> オブジェクトです。  
  
2.  作成、 <xref:System.Drawing.Imaging.ImageAttributes> オブジェクトを渡す、 <xref:System.Drawing.Imaging.ColorMatrix> オブジェクトを <xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%2A> のメソッド、 <xref:System.Drawing.Imaging.ImageAttributes> オブジェクトです。  
  
3.  渡す、 <xref:System.Drawing.Imaging.ImageAttributes> オブジェクトを <xref:System.Drawing.Graphics.DrawImage%2A> のメソッド、 <xref:System.Drawing.Graphics> オブジェクトです。  
  
 [!code-csharp[System.Drawing.RecoloringImages\#21](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.RecoloringImages/CS/Class1.cs#21)]
 [!code-vb[System.Drawing.RecoloringImages\#21](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.RecoloringImages/VB/Class1.vb#21)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ImageAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearBrushRemapTable">
      <MemberSignature Language="C#" Value="public void ClearBrushRemapTable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearBrushRemapTable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearBrushRemapTable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> オブジェクトのブラシのカラー リマップ テーブルを消去します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 An <xref:System.Drawing.Imaging.ImageAttributes> object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify one color\-remap table for the default category, a different color\-remap table for the bitmap category, and still a different color\-remap table for the brush category.  
  
 The default color\-adjustment and grayscale\-adjustment settings apply to all categories that do not have adjustment settings of their own. For example, if you never specify any adjustment settings for the brush category, the default settings apply to the brush category.  
  
 As soon as you specify a color\-adjustment or grayscale\-adjustment setting for a certain category, the default adjustment settings no longer apply to that category. For example, suppose you specify a default remap table that converts red to green, and you specify a default gamma value of 1.8. If you call the <xref:System.Drawing.Imaging.ImageAttributes.SetBrushRemapTable%2A> method, the default remap table \(red to green\) and the default gamma value \(1.8\) will not apply to brushes. If you later call the <xref:System.Drawing.Imaging.ImageAttributes.ClearBrushRemapTable%2A> method, the brush category will not revert to the default remap table; rather, the brush category will have no remap table. Similarly, the brush category will not revert to the default gamma value; rather, the brush category will have no gamma value.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearColorKey">
      <MemberSignature Language="C#" Value="public void ClearColorKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearColorKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearColorKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>既定のカテゴリのカラー キー \(透明度の範囲\) を消去します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 An <xref:System.Drawing.Imaging.ImageAttributes> object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify one color key for the default category, a different color key for the bitmap category, and still a different color key for the pen category.  
  
 The default color\-adjustment and grayscale\-adjustment settings apply to all categories that do not have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, the default settings apply to the pen category.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearColorKey">
      <MemberSignature Language="C#" Value="public void ClearColorKey (System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearColorKey(valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearColorKey(System.Drawing.Imaging.ColorAdjustType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="type">カラー キーを消去する対象のカテゴリを指定する <see cref="T:System.Drawing.Imaging.ColorAdjustType" /> の要素。</param>
        <summary>指定したカテゴリのカラー キー \(透明度の範囲\) を消去します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 An <xref:System.Drawing.Imaging.ImageAttributes> object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify one color key for the default category, a different color key for the bitmap category, and still a different color key for the pen category.  
  
 The default color\-adjustment and grayscale\-adjustment settings apply to all categories that do not have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, the default settings apply to the pen category.  
  
 As soon as you specify a color\-adjustment or grayscale\-adjustment setting for a certain category, the default adjustment settings no longer apply to that category. For example, suppose you specify a default color key that makes any color with a red component from 200 through 255 transparent, and you specify a default gamma value of 1.8. If you set the color key of the pen category by calling the <xref:System.Drawing.Imaging.ImageAttributes.SetColorKey%2A> method, the default color key and the default gamma value will not apply to pens. If you later clear the pen color key by calling the <xref:System.Drawing.Imaging.ImageAttributes.ClearColorKey%2A> method, the pen category will not revert to the default color key; rather, the pen category will have no color key. Similarly, the pen category will not revert to the default gamma value; rather, the pen category will have no gamma value.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearColorMatrix">
      <MemberSignature Language="C#" Value="public void ClearColorMatrix ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearColorMatrix() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearColorMatrix" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>既定のカテゴリのカラー調整行列を消去します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 An <xref:System.Drawing.Imaging.ImageAttributes> object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a color\-adjustment matrix for the default category, a different color\-adjustment matrix for the bitmap category, and still a different color\-adjustment matrix for the pen category.  
  
 The default color\-adjustment and grayscale\-adjustment settings apply to all categories that do not have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, then the default settings apply to the pen category.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearColorMatrix">
      <MemberSignature Language="C#" Value="public void ClearColorMatrix (System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearColorMatrix(valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearColorMatrix(System.Drawing.Imaging.ColorAdjustType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="type">カラー調整行列を消去する対象のカテゴリを指定する <see cref="T:System.Drawing.Imaging.ColorAdjustType" /> の要素。</param>
        <summary>指定したカテゴリのカラー調整行列を消去します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 An <xref:System.Drawing.Imaging.ImageAttributes> object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a color\-adjustment matrix for the default category, a different color\-adjustment matrix for the bitmap category, and still a different color\-adjustment matrix for the pen category.  
  
 The default color\-adjustment and grayscale\-adjustment settings apply to all categories that do not have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, then the default settings apply to the pen category.  
  
 As soon as you specify a color\-adjustment or grayscale\-adjustment setting for a certain category, the default adjustment settings no longer apply to that category. For example, suppose you specify a color\-adjustment matrix and a gamma value for the default category. If you set a color\-adjustment matrix for the pen category by calling the <xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%2A> method, the default color\-adjustment matrix will not apply to pens. If you later clear the pen color\-adjustment matrix by calling the <xref:System.Drawing.Imaging.ImageAttributes.ClearColorMatrix%2A> method, the pen category will not revert to the default adjustment matrix; rather, the pen category will have no adjustment matrix. Similarly, the pen category will not revert to the default gamma value; rather, the pen category will have no gamma value.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearGamma">
      <MemberSignature Language="C#" Value="public void ClearGamma ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearGamma() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearGamma" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>既定のカテゴリのガンマ補正を無効にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Drawing.Imaging.ImageAttributes> オブジェクトは、調整の 5 つのカテゴリのカラー\/グレースケールの設定を保持します。 既定値、ビットマップ、ブラシ、ペン、およびテキスト。 たとえば、既定のカテゴリのガンマ値、異なるカテゴリのガンマ値、ビットマップ、およびまだペン カテゴリに別のガンマ値を指定できます。  
  
 既定のカラー調整とグレースケール調整の設定は、独自の調整設定がないすべてのカテゴリに適用されます。 たとえば、ペン カテゴリの調整設定を一切指定していない場合、ペンのカテゴリには、既定の設定が適用されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearGamma">
      <MemberSignature Language="C#" Value="public void ClearGamma (System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearGamma(valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearGamma(System.Drawing.Imaging.ColorAdjustType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="type">ガンマ補正が無効にされるカテゴリを指定する <see cref="T:System.Drawing.Imaging.ColorAdjustType" /> の要素。</param>
        <summary>指定したカテゴリのガンマ補正を無効にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Drawing.Imaging.ImageAttributes> オブジェクトは、調整の 5 つのカテゴリのカラー\/グレースケールの設定を保持します。 既定値、ビットマップ、ブラシ、ペン、およびテキスト。 たとえば、既定のカテゴリのガンマ値、異なるカテゴリのガンマ値、ビットマップ、およびまだペン カテゴリに別のガンマ値を指定できます。  
  
 既定のカラー調整とグレースケール調整の設定は、独自の調整設定がないすべてのカテゴリに適用されます。 たとえば、ペンのカテゴリの調整設定を一切指定していない場合ペン カテゴリに既定の設定が適用されます。  
  
 カラー調整または特定のカテゴリのグレースケール調整設定を指定するとすぐに、既定の調整設定はそのカテゴリに適用されません。 たとえば、ガンマ値と既定のカテゴリのカラー調整行列を指定するとします。 呼び出してペン カテゴリのガンマ値を設定するかどうか、 <xref:System.Drawing.Imaging.ImageAttributes.SetGamma%2A> メソッド、ペンに既定のガンマ値は適用されません。 後で呼び出すことによってペン ガンマ値を削除する場合、 <xref:System.Drawing.Imaging.ImageAttributes.ClearGamma%2A> メソッド、ペンのカテゴリが既定のガンマ値に戻りませんは; ではなく、ペン カテゴリはありませんガンマ値。 同様に、ペン カテゴリは、既定のカラー調整行列に戻さはありません。ペン カテゴリはカラー調整行列を持たなくなります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearNoOp">
      <MemberSignature Language="C#" Value="public void ClearNoOp ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearNoOp() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearNoOp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>既定のカテゴリの <see langword="NoOp" /> 設定を消去します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 An <xref:System.Drawing.Imaging.ImageAttributes> object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a gamma value for the default category, a different gamma value for the bitmap category, and still a different gamma value for the pen category.  
  
 You can disable color adjustment for the default category by calling the <xref:System.Drawing.Imaging.ImageAttributes.SetNoOp%2A> method. Later, you can reinstate color adjustment for the default category by calling the <xref:System.Drawing.Imaging.ImageAttributes.ClearNoOp%2A> method. The color adjustment then returns to what was in place before the call to <xref:System.Drawing.Imaging.ImageAttributes.SetNoOp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearNoOp">
      <MemberSignature Language="C#" Value="public void ClearNoOp (System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearNoOp(valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearNoOp(System.Drawing.Imaging.ColorAdjustType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="type">
          <see langword="NoOp" /> 設定を消去する対象のカテゴリを指定する <see cref="T:System.Drawing.Imaging.ColorAdjustType" /> の要素。</param>
        <summary>指定したカテゴリの <see langword="NoOp" /> 設定を消去します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 An <xref:System.Drawing.Imaging.ImageAttributes> object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a gamma value for the default category, a different gamma value for the bitmap category, and still a different gamma value for the pen category.  
  
 You can disable color adjustment for a certain category by calling the <xref:System.Drawing.Imaging.ImageAttributes.SetNoOp%2A> method. Later, you can reinstate color adjustment for that category by calling the <xref:System.Drawing.Imaging.ImageAttributes.ClearNoOp%2A> method. The color adjustment then returns to what was in place before the call to <xref:System.Drawing.Imaging.ImageAttributes.SetNoOp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearOutputChannel">
      <MemberSignature Language="C#" Value="public void ClearOutputChannel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearOutputChannel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearOutputChannel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>既定のカテゴリの CMYK \(水色、マゼンタ、黄、黒\) 出力チャネル設定を消去します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 An <xref:System.Drawing.Imaging.ImageAttributes> object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify an output channel for the default category and a different output channel for the bitmap category.  
  
 The default color\-adjustment and grayscale\-adjustment settings apply to all categories that do not have adjustment settings of their own. For example, if you never specify any adjustment settings for the bitmap category, the default settings apply to the bitmap category.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearOutputChannel">
      <MemberSignature Language="C#" Value="public void ClearOutputChannel (System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearOutputChannel(valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearOutputChannel(System.Drawing.Imaging.ColorAdjustType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="type">出力チャネル設定を消去する対象のカテゴリを指定する <see cref="T:System.Drawing.Imaging.ColorAdjustType" /> の要素。</param>
        <summary>指定されたのカテゴリの CMYK \(水色、マゼンタ、黄、黒\) 出力チャネル設定を消去します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 An <xref:System.Drawing.Imaging.ImageAttributes> object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify an output channel for the default category and a different output channel for the bitmap category.  
  
 The default color\-adjustment and grayscale\-adjustment settings apply to all categories that do not have adjustment settings of their own. For example, if you never specify any adjustment settings for the bitmap category, the default settings apply to the bitmap category.  
  
 As soon as you specify a color\-adjustment or grayscale\-adjustment setting for a certain category, the default adjustment settings no longer apply to that category. For example, suppose you specify an output channel and an adjustment matrix for the default category. If you set the output channel for the bitmap category by calling the <xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A> method, the default output channel will not apply to bitmaps. If you later clear the bitmap output channel by calling the <xref:System.Drawing.Imaging.ImageAttributes.ClearOutputChannel%2A> method, the bitmap category will not revert to the default output channel; rather, the bitmap category will have no output channel setting. Similarly, the bitmap category will not revert to the default color\-adjustment matrix; rather, the bitmap category will have no color\-adjustment matrix.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearOutputChannelColorProfile">
      <MemberSignature Language="C#" Value="public void ClearOutputChannelColorProfile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearOutputChannelColorProfile() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>既定のカテゴリの出力チャネルのカラー プロファイル設定を消去します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 An <xref:System.Drawing.Imaging.ImageAttributes> object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify an output channel profile for the default category and a different output channel profile for the bitmap category.  
  
 The default color\-adjustment and grayscale\-adjustment settings apply to all categories that do not have adjustment settings of their own. For example, if you never specify any adjustment settings for the bitmap category, the default settings apply to the bitmap category.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearOutputChannelColorProfile">
      <MemberSignature Language="C#" Value="public void ClearOutputChannelColorProfile (System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearOutputChannelColorProfile(valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile(System.Drawing.Imaging.ColorAdjustType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="type">出力チャネル プロファイル設定を消去する対象のカテゴリを指定する <see cref="T:System.Drawing.Imaging.ColorAdjustType" /> の要素。</param>
        <summary>指定したカテゴリの出力チャネルのカラー プロファイル設定を消去します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 An <xref:System.Drawing.Imaging.ImageAttributes> object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify an output channel profile for the default category and a different output channel profile for the bitmap category.  
  
 The default color\-adjustment and grayscale\-adjustment settings apply to all categories that do not have adjustment settings of their own. For example, if you never specify any adjustment settings for the bitmap category, the default settings apply to the bitmap category.  
  
 As soon as you specify a color\-adjustment or grayscale\-adjustment setting for a certain category, the default adjustment settings no longer apply to that category. For example, suppose you specify an output channel profile and an adjustment matrix for the default category. If you set the output channel profile for the bitmap category by calling the <xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A> method, the default output channel profile will not apply to bitmaps. If you later clear the bitmap output channel profile by calling the <xref:System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile%2A> method, the bitmap category will not revert to the default output channel profile; rather, the bitmap category will have no output channel profile setting. Similarly, the bitmap category will not revert to the default color\-adjustment matrix; rather, the bitmap category will have no color\-adjustment matrix.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearRemapTable">
      <MemberSignature Language="C#" Value="public void ClearRemapTable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearRemapTable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearRemapTable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>既定のカテゴリのカラー リマップ テーブルを消去します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Drawing.Imaging.ImageAttributes> オブジェクトは、調整の 5 つのカテゴリのカラー\/グレースケールの設定を保持します。 既定値、ビットマップ、ブラシ、ペン、およびテキスト。 たとえば、既定のカテゴリのリマップ テーブル、ビットマップ カテゴリについて、異なるリマップ テーブルおよびまだペン カテゴリに異なるリマップ テーブルを指定できます。  
  
 既定のカラー調整とグレースケール調整の設定は、独自の調整設定がないすべてのカテゴリに適用されます。 たとえば、ペン カテゴリの調整設定を一切指定していない場合、ペンのカテゴリには、既定の設定が適用されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearRemapTable">
      <MemberSignature Language="C#" Value="public void ClearRemapTable (System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearRemapTable(valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearRemapTable(System.Drawing.Imaging.ColorAdjustType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="type">リマップ テーブルを消去する対象のカテゴリを指定する <see cref="T:System.Drawing.Imaging.ColorAdjustType" /> の要素。</param>
        <summary>指定したカテゴリのカラー リマップ テーブルを消去します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 An <xref:System.Drawing.Imaging.ImageAttributes> object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a remap table for the default category, a different remap table for the bitmap category, and still a different remap table for the pen category.  
  
 The default color\-adjustment and grayscale\-adjustment settings apply to all categories that do not have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, then the default settings apply to the pen category.  
  
 As soon as you specify a color\-adjustment or grayscale\-adjustment setting for a certain category, the default adjustment settings no longer apply to that category. For example, suppose you specify a remap table and a gamma value for the default category. If you set the remap table for the pen category by calling the <xref:System.Drawing.Imaging.ImageAttributes.SetRemapTable%2A> method, the default remap table will not apply to pens. If you later clear the pen remap table by calling the <xref:System.Drawing.Imaging.ImageAttributes.ClearRemapTable%2A> method, the pen category will not revert to the default remap table; rather, the pen category will have no remap table. Similarly, the pen category will not revert to the default gamma value; rather, the pen category will have no gamma value.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearThreshold">
      <MemberSignature Language="C#" Value="public void ClearThreshold ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearThreshold() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearThreshold" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>既定のカテゴリのしきい値を消去します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The threshold is a value from 0 through 1 that specifies a cutoff point for each color component. For example, suppose the threshold is set to 0.7, and suppose you are rendering a color whose red, green, and blue components are 230, 50, and 220, respectively. The red component \(230\) is greater than 0.7x255, so the red component will be changed to 255 \(full intensity\). The green component \(50\) is less than 0.7x255, so the green component will be changed to 0. The blue component \(220\) is greater than 0.7x255, so the blue component will be changed to 255.  
  
 An <xref:System.Drawing.Imaging.ImageAttributes> object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a threshold for the default category, a different threshold for the bitmap category, and still a different threshold for the pen category.  
  
 The default color\-adjustment and grayscale\-adjustment settings apply to all categories that do not have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, the default settings apply to the pen category.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearThreshold">
      <MemberSignature Language="C#" Value="public void ClearThreshold (System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearThreshold(valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.ClearThreshold(System.Drawing.Imaging.ColorAdjustType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="type">しきい値設定を消去する対象のカテゴリを指定する <see cref="T:System.Drawing.Imaging.ColorAdjustType" /> の要素。</param>
        <summary>指定したカテゴリのしきい値を消去します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The threshold is a value from 0 through 1 that specifies a cutoff point for each color component. For example, suppose the threshold is set to 0.7, and suppose you are rendering a color whose red, green, and blue components are 230, 50, and 220, respectively. The red component \(230\) is greater than 0.7x55, so the red component will be changed to 255 \(full intensity\). The green component \(50\) is less than 0.7x255, so the green component will be changed to 0. The blue component \(220\) is greater than 0.7x255, so the blue component will be changed to 255.  
  
 An <xref:System.Drawing.Imaging.ImageAttributes> object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a threshold for the default category, a different threshold for the bitmap category, and still a different threshold for the pen category.  
  
 The default color\-adjustment and grayscale\-adjustment settings apply to all categories that do not have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, the default settings apply to the pen category.  
  
 As soon as you specify a color\-adjustment or grayscale\-adjustment setting for a certain category, the default adjustment settings no longer apply to that category. For example, suppose you specify a threshold and a gamma value for the default category. If you set the threshold for the pen category by calling the <xref:System.Drawing.Imaging.ImageAttributes.SetThreshold%2A> method, the default threshold will not apply to pens. If you later clear the pen threshold by calling the <xref:System.Drawing.Imaging.ImageAttributes.ClearThreshold%2A> method, the pen category will not revert to the default threshold; rather, the pen category will have no threshold. Similarly, the pen category will not revert to the default gamma value; rather, the pen category will have no gamma value.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.Clone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Drawing.Imaging.ImageAttributes" /> オブジェクトの同一コピーを作成します。</summary>
        <returns>このクラスが作成し、オブジェクトとしてキャストされる <see cref="T:System.Drawing.Imaging.ImageAttributes" /> オブジェクト。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Drawing.Imaging.ImageAttributes" /> オブジェクトによって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Call <xref:System.Drawing.Imaging.ImageAttributes.Dispose%2A> when you are finished using the <xref:System.Drawing.Imaging.ImageAttributes>. The <xref:System.Drawing.Imaging.ImageAttributes.Dispose%2A> method leaves the <xref:System.Drawing.Imaging.ImageAttributes> in an unusable state. After calling <xref:System.Drawing.Imaging.ImageAttributes.Dispose%2A>, you must release all references to the <xref:System.Drawing.Imaging.ImageAttributes> so the garbage collector can reclaim the memory that the <xref:System.Drawing.Imaging.ImageAttributes> was occupying. For more information, see [Cleaning Up Unmanaged Resources](http://msdn.microsoft.com/ja-jp/a17b0066-71c2-4ba4-9822-8e19332fc213) and [Implementing a Dispose Method](http://msdn.microsoft.com/ja-jp/eb4e1af0-3b48-4fbc-ad4e-fc2f64138bf9).  
  
> [!NOTE]
>  Always call <xref:System.Drawing.Imaging.ImageAttributes.Dispose%2A> before you release your last reference to the <xref:System.Drawing.Imaging.ImageAttributes>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Drawing.Imaging.ImageAttributes> object's **languageKeyword tag is not supported!!!!**  
>  method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~ImageAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.Finalize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>オブジェクトが、ガベージ コレクションによって収集される前に、リソースの解放とその他のクリーンアップ操作の実行を試みることができるようにします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAdjustedPalette">
      <MemberSignature Language="C#" Value="public void GetAdjustedPalette (System.Drawing.Imaging.ColorPalette palette, System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetAdjustedPalette(class System.Drawing.Imaging.ColorPalette palette, valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.GetAdjustedPalette(System.Drawing.Imaging.ColorPalette,System.Drawing.Imaging.ColorAdjustType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="palette" Type="System.Drawing.Imaging.ColorPalette" />
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="palette">
          <see cref="T:System.Drawing.Imaging.ColorPalette" />。入力では調整対象のパレットを、出力では調整済みのパレットを格納します。</param>
        <param name="type">調整設定がパレットに適用されるカテゴリを指定する <see cref="T:System.Drawing.Imaging.ColorAdjustType" /> の要素。</param>
        <summary>指定したカテゴリの調整設定に従ってパレットの色を調整します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Drawing.Imaging.ImageAttributes> オブジェクトは、調整の 5 つのカテゴリのカラー\/グレースケールの設定を保持します。 既定値、ビットマップ、ブラシ、ペン、およびテキスト。 たとえば、既定のカテゴリのカラー リマップ テーブル、ビットマップ カテゴリのさまざまなカラー リマップ テーブルしつつ、ペン カテゴリのさまざまなカラー リマップ テーブルを指定できます。  
  
 呼び出すと、 <xref:System.Drawing.Imaging.ImageAttributes.GetAdjustedPalette%2A> メソッド、パレットの色を調整するために使用される調整カテゴリを指定することができます。 たとえば、渡す必要が <xref:System.Drawing.Imaging.ColorAdjustType.Bitmap> に、 <xref:System.Drawing.Imaging.ImageAttributes.GetAdjustedPalette%2A> メソッドは、ビットマップのカテゴリの設定を使用するパレットの色を調整する調整します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBrushRemapTable">
      <MemberSignature Language="C#" Value="public void SetBrushRemapTable (System.Drawing.Imaging.ColorMap[] map);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetBrushRemapTable(class System.Drawing.Imaging.ColorMap[] map) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetBrushRemapTable(System.Drawing.Imaging.ColorMap[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="map" Type="System.Drawing.Imaging.ColorMap[]" />
      </Parameters>
      <Docs>
        <param name="map">
          <see cref="T:System.Drawing.Imaging.ColorMap" /> オブジェクトの配列。</param>
        <summary>ブラシ カテゴリのカラー リマップ テーブルを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A color\-remap table is an array of <xref:System.Drawing.Imaging.ColorMap> structures. Each <xref:System.Drawing.Imaging.ColorMap> structure has two <xref:System.Drawing.Color> objects: one that specifies an old color and one that specifies a corresponding new color. During rendering, any color that matches one of the old colors in the remap table is changed to the corresponding new color.  
  
 Calling the <xref:System.Drawing.Imaging.ImageAttributes.SetBrushRemapTable%2A> method has the same effect as passing <xref:System.Drawing.Imaging.ColorAdjustType.Brush> to the <xref:System.Drawing.Imaging.ImageAttributes.SetRemapTable%2A> method. The specified remap table applies to items in metafiles that are filled with a brush.  
  
 This method is intended to be used only with metafiles.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
1.  Creates a single\-element <xref:System.Drawing.Imaging.ColorMap> array that holds red as the old color and green as the new color.  
  
2.  Passes this array to a newly created <xref:System.Drawing.Imaging.ImageAttributes> object.  
  
 [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.ClassicImaging.ImageAttributes\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CS/form1.cs#1)]
 [!code-vb[System.Drawing.ClassicImaging.ImageAttributes\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetColorKey">
      <MemberSignature Language="C#" Value="public void SetColorKey (System.Drawing.Color colorLow, System.Drawing.Color colorHigh);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetColorKey(valuetype System.Drawing.Color colorLow, valuetype System.Drawing.Color colorHigh) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetColorKey(System.Drawing.Color,System.Drawing.Color)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="colorLow" Type="System.Drawing.Color" />
        <Parameter Name="colorHigh" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="colorLow">下位のカラー キー値。</param>
        <param name="colorHigh">上位のカラー キー値。</param>
        <summary>既定のカテゴリのカラー キーを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method sets the high and low color\-key values so that a range of colors can be made transparent. Any color that has each of its three components \(red, green, blue\) between the corresponding components of the high and low color keys is made transparent.  
  
 An <xref:System.Drawing.Imaging.ImageAttributes> object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a color key for the default category, a different color key for the bitmap category, and still a different color key for the pen category.  
  
 The default color\-adjustment and grayscale\-adjustment settings apply to all categories that do not have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, the default settings apply to the pen category.  
  
   
  
## 例  
 For a code example, see the <xref:System.Drawing.Imaging.ImageAttributes.SetColorKey%28System.Drawing.Color%2CSystem.Drawing.Color%2CSystem.Drawing.Imaging.ColorAdjustType%29> method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetColorKey">
      <MemberSignature Language="C#" Value="public void SetColorKey (System.Drawing.Color colorLow, System.Drawing.Color colorHigh, System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetColorKey(valuetype System.Drawing.Color colorLow, valuetype System.Drawing.Color colorHigh, valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetColorKey(System.Drawing.Color,System.Drawing.Color,System.Drawing.Imaging.ColorAdjustType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="colorLow" Type="System.Drawing.Color" />
        <Parameter Name="colorHigh" Type="System.Drawing.Color" />
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="colorLow">下位のカラー キー値。</param>
        <param name="colorHigh">上位のカラー キー値。</param>
        <param name="type">カラー キーを設定する対象のカテゴリを指定する <see cref="T:System.Drawing.Imaging.ColorAdjustType" /> の要素。</param>
        <summary>指定したカテゴリのカラー キー \(透明度の範囲\) を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method sets the high and low color\-key values so that a range of colors can be made transparent. Any color that has each of its three components \(red, green, blue\) between the corresponding components of the high and low color keys is made transparent.  
  
 An <xref:System.Drawing.Imaging.ImageAttributes> object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a color key for the default category, a different color key for the bitmap category, and still a different color key for the pen category.  
  
 The default color\-adjustment and grayscale\-adjustment settings apply to all categories that do not have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, the default settings apply to the pen category.  
  
 As soon as you specify a color\-adjustment or grayscale\-adjustment setting for a certain category, the default adjustment settings no longer apply to that category. For example, suppose you specify a collection of adjustment settings for the default category. If you set the color key for the pen category by passing <xref:System.Drawing.Imaging.ColorAdjustType.Pen> to the <xref:System.Drawing.Imaging.ImageAttributes.SetColorKey%2A> method, none of the default adjustment settings will apply to pens.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
1.  Opens an <xref:System.Drawing.Image> that uses the file Circle.bmp and draws it to the screen.  
  
2.  Creates an <xref:System.Drawing.Imaging.ImageAttributes> object and sets its color key by calling the <xref:System.Drawing.Imaging.ImageAttributes.SetColorKey%2A> method.  
  
3.  Draws the image to the screen using the color key of the <xref:System.Drawing.Imaging.ImageAttributes> object.  
  
 [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.ClassicImaging.ImageAttributes\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CS/form1.cs#2)]
 [!code-vb[System.Drawing.ClassicImaging.ImageAttributes\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetColorMatrices">
      <MemberSignature Language="C#" Value="public void SetColorMatrices (System.Drawing.Imaging.ColorMatrix newColorMatrix, System.Drawing.Imaging.ColorMatrix grayMatrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetColorMatrices(class System.Drawing.Imaging.ColorMatrix newColorMatrix, class System.Drawing.Imaging.ColorMatrix grayMatrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetColorMatrices(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newColorMatrix" Type="System.Drawing.Imaging.ColorMatrix" />
        <Parameter Name="grayMatrix" Type="System.Drawing.Imaging.ColorMatrix" />
      </Parameters>
      <Docs>
        <param name="newColorMatrix">カラー調整行列。</param>
        <param name="grayMatrix">グレースケール調整行列。</param>
        <summary>既定のカテゴリのカラー調整行列とグレースケール調整行列を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Drawing.Imaging.ImageAttributes> オブジェクトは、調整の 5 つのカテゴリのカラー\/グレースケールの設定を保持します。 既定値、ビットマップ、ブラシ、ペン、およびテキスト。 たとえば、既定のカテゴリの調整行列、ビットマップ カテゴリに属している別の調整行列とペン カテゴリにも異なる調整行列を指定できます。  
  
 既定のカラー調整とグレースケール調整の設定は、独自の調整設定がないすべてのカテゴリに適用されます。 たとえば、ペン カテゴリの調整設定を一切指定していない場合、ペンのカテゴリには、既定の設定が適用されます。  
  
 呼び出す、 <xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrices%28System.Drawing.Imaging.ColorMatrix%2CSystem.Drawing.Imaging.ColorMatrix%29?displayProperty=fullName> メソッドを呼び出すことは、 <xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrices%28System.Drawing.Imaging.ColorMatrix%2CSystem.Drawing.Imaging.ColorMatrix%2CSystem.Drawing.Imaging.ColorMatrixFlag%29?displayProperty=fullName> メソッドと受け渡し <xref:System.Drawing.Imaging.ColorMatrixFlag.Default?displayProperty=fullName> の `flags` パラメーター。<xref:System.Drawing.Imaging.ColorMatrixFlag.Default?displayProperty=fullName> カラー調整行列のグレースケール調整行列ではありません \(グレーで表示を含む\) のすべての色を調整することを指定します。 したがって、このメソッドに渡されるグレースケール調整行列には効果はありません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetColorMatrices">
      <MemberSignature Language="C#" Value="public void SetColorMatrices (System.Drawing.Imaging.ColorMatrix newColorMatrix, System.Drawing.Imaging.ColorMatrix grayMatrix, System.Drawing.Imaging.ColorMatrixFlag flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetColorMatrices(class System.Drawing.Imaging.ColorMatrix newColorMatrix, class System.Drawing.Imaging.ColorMatrix grayMatrix, valuetype System.Drawing.Imaging.ColorMatrixFlag flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetColorMatrices(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newColorMatrix" Type="System.Drawing.Imaging.ColorMatrix" />
        <Parameter Name="grayMatrix" Type="System.Drawing.Imaging.ColorMatrix" />
        <Parameter Name="flags" Type="System.Drawing.Imaging.ColorMatrixFlag" />
      </Parameters>
      <Docs>
        <param name="newColorMatrix">カラー調整行列。</param>
        <param name="grayMatrix">グレースケール調整行列。</param>
        <param name="flags">カラー調整行列とグレースケール調整行列の影響を受けるイメージと色の種類を指定する <see cref="T:System.Drawing.Imaging.ColorMatrixFlag" /> の要素。</param>
        <summary>既定のカテゴリのカラー調整行列とグレースケール調整行列を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 An <xref:System.Drawing.Imaging.ImageAttributes> object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify adjustment matrices for the default category, different adjustment matrices for the bitmap category, and still different adjustment matrices for the pen category.  
  
 The default color\-adjustment and grayscale\-adjustment settings apply to all categories that do not have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, the default settings apply to the pen category.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetColorMatrices">
      <MemberSignature Language="C#" Value="public void SetColorMatrices (System.Drawing.Imaging.ColorMatrix newColorMatrix, System.Drawing.Imaging.ColorMatrix grayMatrix, System.Drawing.Imaging.ColorMatrixFlag mode, System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetColorMatrices(class System.Drawing.Imaging.ColorMatrix newColorMatrix, class System.Drawing.Imaging.ColorMatrix grayMatrix, valuetype System.Drawing.Imaging.ColorMatrixFlag mode, valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetColorMatrices(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag,System.Drawing.Imaging.ColorAdjustType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newColorMatrix" Type="System.Drawing.Imaging.ColorMatrix" />
        <Parameter Name="grayMatrix" Type="System.Drawing.Imaging.ColorMatrix" />
        <Parameter Name="mode" Type="System.Drawing.Imaging.ColorMatrixFlag" />
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="newColorMatrix">カラー調整行列。</param>
        <param name="grayMatrix">グレースケール調整行列。</param>
        <param name="mode">カラー調整行列とグレースケール調整行列の影響を受けるイメージと色の種類を指定する <see cref="T:System.Drawing.Imaging.ColorMatrixFlag" /> の要素。</param>
        <param name="type">カラー調整とグレースケール調整行列を設定する対象のカテゴリを指定する <see cref="T:System.Drawing.Imaging.ColorAdjustType" /> の要素。</param>
        <summary>指定したカテゴリのカラー調整行列とグレースケール調整行列を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Drawing.Imaging.ImageAttributes> オブジェクトは、調整の 5 つのカテゴリのカラー\/グレースケールの設定を保持します。 既定値、ビットマップ、ブラシ、ペン、およびテキスト。 たとえば、既定のカテゴリの調整行列、ビットマップ カテゴリに属している別の調整行列とペン カテゴリにも異なる調整行列を指定できます。  
  
 既定のカラー調整とグレースケール調整の設定は、独自の調整設定がないすべてのカテゴリに適用されます。 たとえば、ペン カテゴリの調整設定を一切指定していない場合、ペンのカテゴリには、既定の設定が適用されます。  
  
 カラー調整または特定のカテゴリのグレースケール調整設定を指定するとすぐに、既定の調整設定はそのカテゴリに適用されません。 たとえば、既定のカテゴリの調整設定のコレクションを指定します。 渡すことによって、ペン カテゴリのカラー調整とグレースケール調整行列を設定した場合 <xref:System.Drawing.Imaging.ColorAdjustType.Pen> に、 <xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrices%2A> メソッドでは、既定の調整設定のいずれもペンには適用されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetColorMatrix">
      <MemberSignature Language="C#" Value="public void SetColorMatrix (System.Drawing.Imaging.ColorMatrix newColorMatrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetColorMatrix(class System.Drawing.Imaging.ColorMatrix newColorMatrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetColorMatrix(System.Drawing.Imaging.ColorMatrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newColorMatrix" Type="System.Drawing.Imaging.ColorMatrix" />
      </Parameters>
      <Docs>
        <param name="newColorMatrix">カラー調整行列。</param>
        <summary>既定のカテゴリのカラー調整行列を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 An <xref:System.Drawing.Imaging.ImageAttributes> object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a color\-adjustment matrix for the default category, a different color\-adjustment matrix for the bitmap category, and still a different color\-adjustment matrix for the pen category.  
  
 The default color\-adjustment and grayscale\-adjustment settings apply to all categories that do not have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, the default settings apply to the pen category.  
  
 Calling the <xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%28System.Drawing.Imaging.ColorMatrix%29?displayProperty=fullName> method is equivalent to calling the <xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%28System.Drawing.Imaging.ColorMatrix%2CSystem.Drawing.Imaging.ColorMatrixFlag%29?displayProperty=fullName> method and passing <xref:System.Drawing.Imaging.ColorMatrixFlag.Default?displayProperty=fullName> for the **parameterReference tag is not supported!!!!**  
 parameter. <xref:System.Drawing.Imaging.ColorMatrixFlag.Default?displayProperty=fullName> specifies that all colors \(including grays\) are adjusted by the color\-adjustment matrix  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
1.  Creates a rectangle image that has all the color values set to 128, producing a rectangle that is filled with a solid medium\-gray color. The code then draws this rectangle image to the screen.  
  
2.  Creates a <xref:System.Drawing.Imaging.ColorMatrix> and sets its <xref:System.Drawing.Drawing2D.Matrix> location to 1.75, which emphasizes the red component of the image.  
  
3.  Creates an <xref:System.Drawing.Imaging.ImageAttributes> object and calls the <xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%2A> method.  
  
4.  Draws the image \(a second rectangle\) to the screen using the <xref:System.Drawing.Imaging.ColorMatrix> just set in the <xref:System.Drawing.Imaging.ImageAttributes> object.  
  
 Note that the second rectangle has the color red emphasized.  
  
 [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.ClassicImaging.ImageAttributes\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CS/form1.cs#3)]
 [!code-vb[System.Drawing.ClassicImaging.ImageAttributes\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetColorMatrix">
      <MemberSignature Language="C#" Value="public void SetColorMatrix (System.Drawing.Imaging.ColorMatrix newColorMatrix, System.Drawing.Imaging.ColorMatrixFlag flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetColorMatrix(class System.Drawing.Imaging.ColorMatrix newColorMatrix, valuetype System.Drawing.Imaging.ColorMatrixFlag flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetColorMatrix(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newColorMatrix" Type="System.Drawing.Imaging.ColorMatrix" />
        <Parameter Name="flags" Type="System.Drawing.Imaging.ColorMatrixFlag" />
      </Parameters>
      <Docs>
        <param name="newColorMatrix">カラー調整行列。</param>
        <param name="flags">カラー調整行列の影響を受けるイメージと色の種類を指定する <see cref="T:System.Drawing.Imaging.ColorMatrixFlag" /> の要素。</param>
        <summary>既定のカテゴリのカラー調整行列を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 An <xref:System.Drawing.Imaging.ImageAttributes> object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a color\-adjustment matrix for the default category, a different color\-adjustment matrix for the bitmap category, and still a different color\-adjustment matrix for the pen category.  
  
 The default color\-adjustment and grayscale\-adjustment settings apply to all categories that do not have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, the default settings apply to the pen category.  
  
   
  
## 例  
 For a code example, see the <xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%28System.Drawing.Imaging.ColorMatrix%29> method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetColorMatrix">
      <MemberSignature Language="C#" Value="public void SetColorMatrix (System.Drawing.Imaging.ColorMatrix newColorMatrix, System.Drawing.Imaging.ColorMatrixFlag mode, System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetColorMatrix(class System.Drawing.Imaging.ColorMatrix newColorMatrix, valuetype System.Drawing.Imaging.ColorMatrixFlag mode, valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetColorMatrix(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag,System.Drawing.Imaging.ColorAdjustType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newColorMatrix" Type="System.Drawing.Imaging.ColorMatrix" />
        <Parameter Name="mode" Type="System.Drawing.Imaging.ColorMatrixFlag" />
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="newColorMatrix">カラー調整行列。</param>
        <param name="mode">カラー調整行列の影響を受けるイメージと色の種類を指定する <see cref="T:System.Drawing.Imaging.ColorMatrixFlag" /> の要素。</param>
        <param name="type">カラー調整行列を設定する対象のカテゴリを指定する <see cref="T:System.Drawing.Imaging.ColorAdjustType" /> の要素。</param>
        <summary>指定したカテゴリのカラー調整行列を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 An <xref:System.Drawing.Imaging.ImageAttributes> object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a color\-adjustment matrix for the default category, a different color\-adjustment matrix for the bitmap category, and still a different color\-adjustment matrix for the pen category.  
  
 The default color\-adjustment and grayscale\-adjustment settings apply to all categories that do not have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, the default settings apply to the pen category.  
  
 As soon as you specify a color\-adjustment or grayscale\-adjustment setting for a certain category, the default adjustment settings no longer apply to that category. For example, suppose you specify a collection of adjustment settings for the default category. If you set the color\-adjustment matrix for the pen category by passing <xref:System.Drawing.Imaging.ColorAdjustType.Pen> to the <xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%2A> method, none of the default adjustment settings will apply to pens.  
  
   
  
## 例  
 The following code example demonstrates how to use the <xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%2A> method. To run this example, paste the code into a Windows Form and call `RotateColors` from the form's <xref:System.Windows.Forms.Control.Paint> event\-handling method, passing **parameterReference tag is not supported!!!!**  
 as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.RotateColors\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.RotateColors/CS/Form1.cs#1)]
 [!code-vb[System.Drawing.RotateColors\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.RotateColors/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetGamma">
      <MemberSignature Language="C#" Value="public void SetGamma (float gamma);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetGamma(float32 gamma) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetGamma(System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gamma" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="gamma">ガンマ補正値。</param>
        <summary>既定のカテゴリのガンマ値を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一般的な値、 `gamma` パラメーターを 1.0 ~ 2.2 には。 ただし、値は 0.1 5.0 生じる可能性がいくつかの状況で便利です。  
  
 <xref:System.Drawing.Imaging.ImageAttributes> オブジェクトは、調整の 5 つのカテゴリのカラー\/グレースケールの設定を保持します。 既定値、ビットマップ、ブラシ、ペン、およびテキスト。 たとえば、既定のカテゴリのガンマ値、異なるカテゴリのガンマ値、ビットマップ、およびまだペン カテゴリに別のガンマ値を指定できます。  
  
 既定のカラー調整とグレースケール調整の設定は、独自の調整設定がないすべてのカテゴリに適用されます。 たとえば、ペン カテゴリの調整設定を一切指定していない場合、ペンのカテゴリには、既定の設定が適用されます。  
  
 通常の範囲外のガンマ値は、古い CRT モニターや産業の環境やウィンドウの表示などの特殊な照明環境にあるモニターを役立ちます可能性があります。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 さらに、イメージ ファイルのパスをシステム上で有効なパスとイメージ名に変更する必要があります。 コードは、次のアクションを実行します。  
  
1.  開き、 <xref:System.Drawing.Image> Camera.jpg ファイルを使用して、ガンマ既定値を使用して、画面に描画します。  
  
2.  作成、 <xref:System.Drawing.Imaging.ImageAttributes> オブジェクトし、そのガンマ値 2.2 を呼び出すことによって設定、 <xref:System.Drawing.Imaging.ImageAttributes.SetGamma%2A> メソッドです。  
  
3.  設定するだけのガンマ値を使用して、画面にイメージ \(2 つ目のカメラ\) を描画、 <xref:System.Drawing.Imaging.ImageAttributes> オブジェクトです。  
  
 [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes\#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.ClassicImaging.ImageAttributes\#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CS/form1.cs#4)]
 [!code-vb[System.Drawing.ClassicImaging.ImageAttributes\#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetGamma">
      <MemberSignature Language="C#" Value="public void SetGamma (float gamma, System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetGamma(float32 gamma, valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetGamma(System.Single,System.Drawing.Imaging.ColorAdjustType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gamma" Type="System.Single" />
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="gamma">ガンマ補正値。</param>
        <param name="type">ガンマ値を設定する対象のカテゴリを指定する <see cref="T:System.Drawing.Imaging.ColorAdjustType" /> 列挙の要素。</param>
        <summary>指定したカテゴリのガンマ値を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Typical values for the **parameterReference tag is not supported!!!!**  
 parameter are from 1.0 to 2.2; however, values from 0.1 to 5.0 could prove useful in some circumstances.  
  
 An <xref:System.Drawing.Imaging.ImageAttributes> object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a gamma value for the default category, a different gamma value for the bitmap category, and still a different gamma value for the pen category.  
  
 The default color\-adjustment and grayscale\-adjustment settings apply to all categories that do not have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, the default settings apply to the pen category.  
  
 As soon as you specify a color\-adjustment or grayscale\-adjustment setting for a certain category, the default adjustment settings no longer apply to that category. For example, suppose you specify a collection of adjustment settings for the default category. If you set the gamma value for the pen category by passing <xref:System.Drawing.Imaging.ColorAdjustType.Pen> to the <xref:System.Drawing.Imaging.ImageAttributes.SetGamma%2A> method, none of the default adjustment settings will apply to pens.  
  
 Gamma values outside the usual range may be useful for old CRT monitors or for monitors that are in unusual lighting conditions, such as industrial environments or window displays.  
  
   
  
## 例  
 For a code example, see the <xref:System.Drawing.Imaging.ImageAttributes.SetGamma%28System.Single%29> method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetNoOp">
      <MemberSignature Language="C#" Value="public void SetNoOp ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetNoOp() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetNoOp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>既定のカテゴリのカラー調整をオフにします。<see cref="Overload:System.Drawing.Imaging.ImageAttributes.ClearNoOp" /> メソッドを呼び出して、<see cref="Overload:System.Drawing.Imaging.ImageAttributes.SetNoOp" /> メソッドを呼び出す前のカラー調整設定に戻すことができます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Drawing.Imaging.ImageAttributes> オブジェクトは、調整の 5 つのカテゴリのカラー\/グレースケールの設定を保持します。 既定値、ビットマップ、ブラシ、ペン、およびテキスト。 たとえば、既定のカテゴリのガンマ値、異なるカテゴリのガンマ値、ビットマップ、およびまだペン カテゴリに別のガンマ値を指定できます。  
  
 既定のカラー調整とグレースケール調整の設定は、独自の調整設定がないすべてのカテゴリに適用されます。 たとえば、ペン カテゴリの調整設定を一切指定していない場合、ペンのカテゴリには、既定の設定が適用されます。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
1.  開き、 <xref:System.Drawing.Image> Camera.jpg ファイルを使用します。  
  
2.  ガンマ値を設定、 <xref:System.Drawing.Imaging.ImageAttributes> 0.25 オブジェクトです。  
  
3.  画面にイメージを描画します。  
  
4.  呼び出し、 <xref:System.Drawing.Imaging.ImageAttributes.SetNoOp%2A> メソッドです。  
  
5.  画面にイメージ \(2 つ目のカメラ\) を描画します。ただし、ため、 <xref:System.Drawing.Imaging.ImageAttributes.SetNoOp%2A> メソッドが呼び出された、ガンマ値が 1.0 とイメージの既定の設定がガンマ設定画面に描画します。  
  
 左側のイメージは、\(0.25 のガンマ\) 色あせ、右側のイメージがよりコントラストの高い \(ガンマ値 1.0\) ことに注意してください。  
  
 [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes\#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.ClassicImaging.ImageAttributes\#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CS/form1.cs#5)]
 [!code-vb[System.Drawing.ClassicImaging.ImageAttributes\#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetNoOp">
      <MemberSignature Language="C#" Value="public void SetNoOp (System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetNoOp(valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetNoOp(System.Drawing.Imaging.ColorAdjustType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="type">色補正をオフにする対象のカテゴリを指定する <see cref="T:System.Drawing.Imaging.ColorAdjustType" /> の要素。</param>
        <summary>指定したカテゴリのカラー調整をオフにします。<see cref="Overload:System.Drawing.Imaging.ImageAttributes.ClearNoOp" /> メソッドを呼び出して、<see cref="Overload:System.Drawing.Imaging.ImageAttributes.SetNoOp" /> メソッドを呼び出す前のカラー調整設定に戻すことができます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 An <xref:System.Drawing.Imaging.ImageAttributes> object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a gamma value for the default category, a different gamma value for the bitmap category, and still a different gamma value for the pen category.  
  
   
  
## 例  
 For a code example, see the <xref:System.Drawing.Imaging.ImageAttributes.SetNoOp> method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOutputChannel">
      <MemberSignature Language="C#" Value="public void SetOutputChannel (System.Drawing.Imaging.ColorChannelFlag flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputChannel(valuetype System.Drawing.Imaging.ColorChannelFlag flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetOutputChannel(System.Drawing.Imaging.ColorChannelFlag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flags" Type="System.Drawing.Imaging.ColorChannelFlag" />
      </Parameters>
      <Docs>
        <param name="flags">出力チャネルを指定する <see cref="T:System.Drawing.Imaging.ColorChannelFlag" /> の要素。</param>
        <summary>既定のカテゴリの CMYK \(水色、マゼンタ、黄、黒\) 出力チャネルを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することができます、 <xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A> メソッド CMYK 色空間にイメージを変換し、CMYK カラー チャネルのいずれかの強度を確認します。 たとえば、作成する、 <xref:System.Drawing.Imaging.ImageAttributes> オブジェクトし、そのビットマップ出力チャネル設定 <xref:System.Drawing.Imaging.ColorChannelFlag.ColorChannelC>します。 そのパスを渡す場合 <xref:System.Drawing.Imaging.ImageAttributes> オブジェクトを <xref:System.Drawing.Graphics.DrawImage%2A> メソッドでは、各ピクセルの水色の要素が計算され、レンダリングされたイメージ内の各ピクセルが水色チャネルの度合いを示す灰色の網掛けができます。 同様に、マゼンタ、黄、および黒のチャネルの輝度を示すイメージをレンダリングすることができます。  
  
 <xref:System.Drawing.Imaging.ImageAttributes> オブジェクトは、調整の 5 つのカテゴリのカラー\/グレースケールの設定を保持します。 既定値、ビットマップ、ブラシ、ペン、およびテキスト。 たとえば、既定のカテゴリの出力チャネルとビットマップ カテゴリに別の出力チャネルを指定できます。  
  
 既定のカラー調整とグレースケール調整の設定は、独自の調整設定がないすべてのカテゴリに適用されます。 たとえば、ビットマップ カテゴリの調整設定を一切指定していない場合、ビットマップのカテゴリには、既定の設定が適用されます。  
  
   
  
## 例  
 次のコード例は、<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A> メソッドの使用方法を示します。 この例を実行するには、Windows フォームに次のコードを貼り付けます。 フォームの処理 <xref:System.Windows.Forms.Control.Paint> イベントと呼び出し `ShowOutputChannels`, を渡すこと `e` として<xref:System.Windows.Forms.PaintEventArgs>します。  
  
 [!code-csharp[System.Drawing.Misc3\#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Misc3/CS/Form1.cs#4)]
 [!code-vb[System.Drawing.Misc3\#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Misc3/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOutputChannel">
      <MemberSignature Language="C#" Value="public void SetOutputChannel (System.Drawing.Imaging.ColorChannelFlag flags, System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputChannel(valuetype System.Drawing.Imaging.ColorChannelFlag flags, valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetOutputChannel(System.Drawing.Imaging.ColorChannelFlag,System.Drawing.Imaging.ColorAdjustType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flags" Type="System.Drawing.Imaging.ColorChannelFlag" />
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="flags">出力チャネルを指定する <see cref="T:System.Drawing.Imaging.ColorChannelFlag" /> の要素。</param>
        <param name="type">出力チャネルを設定する対象のカテゴリを指定する <see cref="T:System.Drawing.Imaging.ColorAdjustType" /> の要素。</param>
        <summary>指定されたカテゴリの CMYK \(水色、マゼンタ、黄、黒\) 出力チャネルを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することができます、 <xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A> メソッド CMYK 色空間にイメージを変換し、CMYK カラー チャネルのいずれかの強度を確認します。 たとえば、作成する、 <xref:System.Drawing.Imaging.ImageAttributes> オブジェクトし、そのビットマップ出力チャネル設定 <xref:System.Drawing.Imaging.ColorChannelFlag.ColorChannelC>します。 そのパスを渡す場合 <xref:System.Drawing.Imaging.ImageAttributes> オブジェクトを <xref:System.Drawing.Graphics.DrawImage%2A> メソッドでは、各ピクセルの水色の要素が計算され、レンダリングされたイメージ内の各ピクセルが水色チャネルの度合いを示す灰色の網掛けができます。 同様に、マゼンタ、黄、および黒のチャネルの輝度を示すイメージをレンダリングすることができます。  
  
 <xref:System.Drawing.Imaging.ImageAttributes> オブジェクトは、調整の 5 つのカテゴリのカラー\/グレースケールの設定を保持します。 既定値、ビットマップ、ブラシ、ペン、およびテキスト。 たとえば、既定のカテゴリの出力チャネルとビットマップ カテゴリに別の出力チャネルを指定できます。  
  
 既定のカラー調整とグレースケール調整の設定は、独自の調整設定がないすべてのカテゴリに適用されます。 たとえば、ビットマップ カテゴリの調整設定を一切指定していない場合、ビットマップのカテゴリには、既定の設定が適用されます。  
  
 カラー調整または特定のカテゴリのグレースケール調整設定を指定するとすぐに、既定の調整設定はそのカテゴリに適用されません。 たとえば、既定のカテゴリの調整設定のコレクションを指定します。 渡すことによって、ビットマップ カテゴリの出力チャネルを設定するかどうかは <xref:System.Drawing.Imaging.ColorAdjustType.Bitmap> に、 <xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A> メソッド、ビットマップに適用なし、既定の調整設定されます。  
  
   
  
## 例  
 次のコード例は、<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A> メソッドの使用方法を示します。 この例を実行するには、Windows フォームに次のコードを貼り付けます。 フォームの処理 <xref:System.Windows.Forms.Control.Paint> イベントと呼び出し `ShowOutputChannels`, を渡すこと `e` として<xref:System.Windows.Forms.PaintEventArgs>します。  
  
 [!code-csharp[System.Drawing.Misc3\#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Misc3/CS/Form1.cs#4)]
 [!code-vb[System.Drawing.Misc3\#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Misc3/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOutputChannelColorProfile">
      <MemberSignature Language="C#" Value="public void SetOutputChannelColorProfile (string colorProfileFilename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputChannelColorProfile(string colorProfileFilename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="colorProfileFilename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="colorProfileFilename">カラー プロファイル ファイルのパス名。 カラー プロファイル ファイルが %SystemRoot%\\System32\\Spool\\Drivers\\Color ディレクトリにある場合、このパラメーターはファイル名にすることができます。 それ以外の場合、このパラメーターは、完全修飾パス名を指定する必要があります。</param>
        <summary>既定のカテゴリの出力チャネルのカラー プロファイル ファイルを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することができます、 <xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A> と <xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A> CMYK \(水色、マゼンタ、黄、黒\) のカラー スペースにイメージを変換して、CMYK のいずれかの強度を確認する方法のカラー チャネル。 たとえば、次の手順を実行するコードを記述するとします。  
  
1.  作成、 <xref:System.Drawing.Image>です。  
  
2.  作成、 <xref:System.Drawing.Imaging.ImageAttributes> オブジェクトです。  
  
3.  渡す <xref:System.Drawing.Imaging.ColorChannelFlag.ColorChannelC> に、 <xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A> のメソッド、 <xref:System.Drawing.Imaging.ImageAttributes> オブジェクトです。  
  
4.  カラー プロファイル ファイルのパス名を渡す、 <xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A> のメソッド、 <xref:System.Drawing.Imaging.ImageAttributes> オブジェクトです。  
  
5.  パスを渡す、 <xref:System.Drawing.Image> と <xref:System.Drawing.Imaging.ImageAttributes> オブジェクトを <xref:System.Drawing.Graphics.DrawImage%2A> メソッドです。  
  
 [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] カラー プロファイル ファイルを使用して、イメージ内の各ピクセルの水色の要素を計算し、描画された画像内の各ピクセルは水色チャネルの度合いを示す灰色の網掛けされます。  
  
 <xref:System.Drawing.Imaging.ImageAttributes> オブジェクトは、調整の 5 つのカテゴリのカラー\/グレースケールの設定を保持します。 既定値、ビットマップ、ブラシ、ペン、およびテキスト。 たとえば、既定のカテゴリの出力チャネル カラー プロファイル ファイルおよびビットマップ カテゴリに別の出力チャネル カラー プロファイル ファイルを指定できます。  
  
 既定のカラー調整とグレースケール調整の設定は、独自の調整設定がないすべてのカテゴリに適用されます。 たとえば、ビットマップ カテゴリの調整設定を一切指定していない場合、ビットマップのカテゴリには、既定の設定が適用されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOutputChannelColorProfile">
      <MemberSignature Language="C#" Value="public void SetOutputChannelColorProfile (string colorProfileFilename, System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputChannelColorProfile(string colorProfileFilename, valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile(System.String,System.Drawing.Imaging.ColorAdjustType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="colorProfileFilename" Type="System.String" />
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="colorProfileFilename">カラー プロファイル ファイルのパス名。 カラー プロファイル ファイルが %SystemRoot%\\System32\\Spool\\Drivers\\Color ディレクトリにある場合、このパラメーターはファイル名にすることができます。 それ以外の場合、このパラメーターは、完全修飾パス名を指定する必要があります。</param>
        <param name="type">出力チャネル カラー プロファイル ファイルを設定する対象のカテゴリを指定する <see cref="T:System.Drawing.Imaging.ColorAdjustType" /> の要素。</param>
        <summary>指定したカテゴリの出力チャネルのカラー プロファイル ファイルを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 You can use the <xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A> and <xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A> methods to convert an image to a CMYK \(cyan\-magenta\-yellow\-black\) color space and examine the intensities of one of the CMYK color channels. For example, suppose you write code that performs the following steps:  
  
1.  Create an <xref:System.Drawing.Image>.  
  
2.  Create an <xref:System.Drawing.Imaging.ImageAttributes> object.  
  
3.  Pass <xref:System.Drawing.Imaging.ColorChannelFlag.ColorChannelC> to the <xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A> method of the <xref:System.Drawing.Imaging.ImageAttributes> object.  
  
4.  Pass the path name of a color profile file to the <xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A> method of the <xref:System.Drawing.Imaging.ImageAttributes> object.  
  
5.  Pass the paths of the <xref:System.Drawing.Image> and <xref:System.Drawing.Imaging.ImageAttributes> objects to the <xref:System.Drawing.Graphics.DrawImage%2A> method.  
  
 [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] will use the color\-profile file to calculate the cyan component of each pixel in the image, and each pixel in the rendered image will be a shade of gray that indicates the intensity of its cyan channel.  
  
 An <xref:System.Drawing.Imaging.ImageAttributes> object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify an output channel color\-profile file for the default category and a different output channel color\-profile file for the bitmap category.  
  
 The default color\-adjustment and grayscale\-adjustment settings apply to all categories that do not have adjustment settings of their own. For example, if you never specify any adjustment settings for the bitmap category, the default settings apply to the bitmap category.  
  
 As soon as you specify a color\-adjustment or grayscale\-adjustment setting for a certain category, the default adjustment settings no longer apply to that category. For example, suppose you specify a collection of adjustment settings for the default category. If you set the output channel color\-profile file for the bitmap category by passing <xref:System.Drawing.Imaging.ColorAdjustType.Bitmap> to the <xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A> method, none of the default adjustment settings will apply to bitmaps.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetRemapTable">
      <MemberSignature Language="C#" Value="public void SetRemapTable (System.Drawing.Imaging.ColorMap[] map);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetRemapTable(class System.Drawing.Imaging.ColorMap[] map) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetRemapTable(System.Drawing.Imaging.ColorMap[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="map" Type="System.Drawing.Imaging.ColorMap[]" />
      </Parameters>
      <Docs>
        <param name="map">
          <see cref="T:System.Drawing.Imaging.ColorMap" /> 型の色ペアの配列。 それぞれの色ペアには、既存の色 \(1 番目の値\) および変換後の色 \(2 番目の値\) が含まれています。</param>
        <summary>既定のカテゴリのカラー リマップ テーブルを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A color\-remap table is an array of <xref:System.Drawing.Imaging.ColorMap> structures. Each <xref:System.Drawing.Imaging.ColorMap> structure has two <xref:System.Drawing.Color> objects: one that specifies an old color and one that specifies a corresponding new color. During rendering, any color that matches one of the old colors in the remap table is changed to the corresponding new color.  
  
 An <xref:System.Drawing.Imaging.ImageAttributes> object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a color remap for the default category, a color\-remap table for the bitmap category, and still a different color\-remap table for the pen category.  
  
 The default color\-adjustment and grayscale\-adjustment settings apply to all categories that do not have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, the default settings apply to the pen category.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
1.  Creates an image \(a red circle\), saves it as Circle2.jpg, opens that image, and draws it to the screen.  
  
2.  Creates a color map that maps the color red to the color green.  
  
3.  Draws the image created earlier to the screen again, but this time using the color map.  
  
 [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes\#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.ClassicImaging.ImageAttributes\#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CS/form1.cs#6)]
 [!code-vb[System.Drawing.ClassicImaging.ImageAttributes\#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetRemapTable">
      <MemberSignature Language="C#" Value="public void SetRemapTable (System.Drawing.Imaging.ColorMap[] map, System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetRemapTable(class System.Drawing.Imaging.ColorMap[] map, valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetRemapTable(System.Drawing.Imaging.ColorMap[],System.Drawing.Imaging.ColorAdjustType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="map" Type="System.Drawing.Imaging.ColorMap[]" />
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="map">
          <see cref="T:System.Drawing.Imaging.ColorMap" /> 型の色ペアの配列。 それぞれの色ペアには、既存の色 \(1 番目の値\) および変換後の色 \(2 番目の値\) が含まれています。</param>
        <param name="type">カラー リマップ テーブルを設定する対象のカテゴリを指定する <see cref="T:System.Drawing.Imaging.ColorAdjustType" /> の要素。</param>
        <summary>指定したカテゴリのカラー リマップ テーブルを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 カラー リマップ テーブルの配列は、 [SetRemapTable メソッド \(ColorMap\<xref:System.Drawing.Imaging.ColorMap> 構造体。 各 [SetRemapTable メソッド \(ColorMap\<xref:System.Drawing.Imaging.ColorMap> 構造体には 2 つ [SetRemapTable メソッド \(ColorMap\<xref:System.Drawing.Color> オブジェクト: いずれかの既存の色と対応する新しい色を指定する 1 つを指定します。 レンダリング中に古いカラー リマップ テーブル内の 1 つに一致する色は、対応する新しい色に変更されます。  
  
 [SetRemapTable メソッド \(ColorMap\<xref:System.Drawing.Imaging.ImageAttributes> オブジェクトは、調整の 5 つのカテゴリのカラー\/グレースケールの設定を保持します。 既定値、ビットマップ、ブラシ、ペン、およびテキスト。 たとえば、既定のカテゴリ、ビットマップ カテゴリのカラー リマップ テーブルしつつ、ペン カテゴリのさまざまなカラー リマップ テーブルのカラー リマップを指定できます。  
  
 既定のカラー調整とグレースケール調整の設定は、独自の調整設定がないすべてのカテゴリに適用されます。 たとえば、ペン カテゴリの調整設定を一切指定していない場合、ペンのカテゴリには、既定の設定が適用されます。  
  
 カラー調整または特定のカテゴリのグレースケール調整設定を指定するとすぐに、既定の調整設定はそのカテゴリに適用されません。 たとえば、既定のカテゴリの調整設定のコレクションを指定します。 渡すことによって、ペン カテゴリのカラー リマップ テーブルを設定するかどうかは [SetRemapTable メソッド \(ColorMap\<xref:System.Drawing.Imaging.ColorAdjustType.Pen> に、 [SetRemapTable メソッド \(ColorMap\<xref:System.Drawing.Imaging.ImageAttributes.SetRemapTable%2A> メソッドでは、既定の調整設定のいずれもペンには適用されます。  
  
   
  
## 例  
 コード例については、 [SetRemapTable メソッド \(ColorMap\<xref:System.Drawing.Imaging.ImageAttributes.SetRemapTable%28System.Drawing.Imaging.ColorMap%5B%5D%29> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetThreshold">
      <MemberSignature Language="C#" Value="public void SetThreshold (float threshold);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetThreshold(float32 threshold) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetThreshold(System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threshold" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="threshold">しきい値を指定する実数。</param>
        <summary>既定のカテゴリのしきい値 \(透明度の範囲\) を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The threshold is a value from 0 through 1 that specifies a cutoff point for each color component. For example, suppose the threshold is set to 0.7, and suppose you are rendering a color whose red, green, and blue components are 230, 50, and 220, respectively. The red component \(230\) is greater than 0.7x255, so the red component will be changed to 255 \(full intensity\). The green component \(50\) is less than 0.7x255, so the green component will be changed to 0. The blue component \(220\) is greater than 0.7x255, so the blue component will be changed to 255.  
  
 An <xref:System.Drawing.Imaging.ImageAttributes> object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a threshold for the default category, a threshold for the bitmap category, and still a different threshold for the pen category.  
  
 The default color\-adjustment and grayscale\-adjustment settings apply to all categories that do not have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, the default settings apply to the pen category.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
1.  Opens an <xref:System.Drawing.Image> and draws it to the screen.  
  
2.  Creates an <xref:System.Drawing.Imaging.ImageAttributes> object and sets its threshold by using the <xref:System.Drawing.Imaging.ImageAttributes.SetThreshold%2A> method.  
  
3.  Draws the image to the screen by using the threshold of the <xref:System.Drawing.Imaging.ImageAttributes> object.  
  
 [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes\#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.ClassicImaging.ImageAttributes\#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CS/form1.cs#7)]
 [!code-vb[System.Drawing.ClassicImaging.ImageAttributes\#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetThreshold">
      <MemberSignature Language="C#" Value="public void SetThreshold (float threshold, System.Drawing.Imaging.ColorAdjustType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetThreshold(float32 threshold, valuetype System.Drawing.Imaging.ColorAdjustType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetThreshold(System.Single,System.Drawing.Imaging.ColorAdjustType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threshold" Type="System.Single" />
        <Parameter Name="type" Type="System.Drawing.Imaging.ColorAdjustType" />
      </Parameters>
      <Docs>
        <param name="threshold">最大値または最小値に変換する色の並べ替えのためのブレークポイントとして使用される、0.0 ～ 1.0 の範囲内のしきい値。</param>
        <param name="type">色のしきい値を設定する対象のカテゴリを指定する <see cref="T:System.Drawing.Imaging.ColorAdjustType" /> の要素。</param>
        <summary>指定したカテゴリのしきい値 \(透明度の範囲\) を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The threshold is a value from 0 through 1 that specifies a cutoff point for each color component. For example, suppose the threshold is set to 0.7, and suppose you are rendering a color whose red, green, and blue components are 230, 50, and 220, respectively. The red component \(230\) is greater than 0.7x255, so the red component will be changed to 255 \(full intensity\). The green component \(50\) is less than 0.7x255, so the green component will be changed to 0. The blue component \(220\) is greater than 0.7x255, so the blue component will be changed to 255.  
  
 An <xref:System.Drawing.Imaging.ImageAttributes> object maintains color and grayscale settings for five adjustment categories: default, bitmap, brush, pen, and text. For example, you can specify a threshold for the default category, a threshold for the bitmap category, and still a different threshold for the pen category.  
  
 The default color\-adjustment and grayscale\-adjustment settings apply to all categories that do not have adjustment settings of their own. For example, if you never specify any adjustment settings for the pen category, the default settings apply to the pen category.  
  
 As soon as you specify a color\-adjustment or grayscale\-adjustment setting for a certain category, the default adjustment settings no longer apply to that category. For example, suppose you specify a collection of adjustment settings for the default category. If you set the threshold for the pen category by passing <xref:System.Drawing.Imaging.ColorAdjustType.Pen> to the <xref:System.Drawing.Imaging.ImageAttributes.SetThreshold%2A> method, none of the default adjustment settings will apply to pens.  
  
   
  
## 例  
 For a code example, see the <xref:System.Drawing.Imaging.ImageAttributes.SetThreshold%28System.Single%29> method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetWrapMode">
      <MemberSignature Language="C#" Value="public void SetWrapMode (System.Drawing.Drawing2D.WrapMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetWrapMode(valuetype System.Drawing.Drawing2D.WrapMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetWrapMode(System.Drawing.Drawing2D.WrapMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Drawing.Drawing2D.WrapMode" />
      </Parameters>
      <Docs>
        <param name="mode">イメージの繰り返しコピーを領域に並べて表示するときの方法を指定する <see cref="T:System.Drawing.Drawing2D.WrapMode" /> の要素。</param>
        <summary>形状全体、または形状の境界上にテクスチャを並べて表示する方法を決定するために使用されるラップ モードを設定します。 テクスチャで塗りつぶす形状がそのテクスチャより小さい場合、テクスチャは形状の境界をはみだして表示されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す、 <xref:System.Drawing.Imaging.ImageAttributes.SetWrapMode%28System.Drawing.Drawing2D.WrapMode%29> メソッドを呼び出すことは <xref:System.Drawing.Imaging.ImageAttributes.SetWrapMode%28System.Drawing.Drawing2D.WrapMode%2CSystem.Drawing.Color%29> を渡すと <xref:System.Drawing.Color.Black%2A?displayProperty=fullName> の `color` パラメーター。<xref:System.Drawing.Color.Black%2A?displayProperty=fullName> 表示イメージの外側のピクセルの色を指定します。 この色が、モード パラメーターに設定されている場合は、表示 <xref:System.Drawing.Drawing2D.WrapMode.Clamp> に元の四角形が渡されると、 <xref:System.Drawing.Graphics.DrawImage%2A> メソッドはイメージ自体より大きい。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
1.  開き、 <xref:System.Drawing.Image> 、Circle3.jpg からファイル \(小規模、赤で塗りつぶされた円\) と、画面に描画します。  
  
2.  作成、 <xref:System.Drawing.Imaging.ImageAttributes> オブジェクトと設定、 <xref:System.Drawing.Drawing2D.WrapMode> 列挙体を <xref:System.Drawing.Drawing2D.WrapMode.Tile>します。  
  
3.  作成、 <xref:System.Drawing.TextureBrush> Circle3.jpg ファイルからイメージを使用します。  
  
4.  画面は、赤で塗りつぶされた小さな円で塗りつぶされた四角形を描画します。  
  
 [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes\#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.ClassicImaging.ImageAttributes\#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/CS/form1.cs#8)]
 [!code-vb[System.Drawing.ClassicImaging.ImageAttributes\#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicImaging.ImageAttributes/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetWrapMode">
      <MemberSignature Language="C#" Value="public void SetWrapMode (System.Drawing.Drawing2D.WrapMode mode, System.Drawing.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetWrapMode(valuetype System.Drawing.Drawing2D.WrapMode mode, valuetype System.Drawing.Color color) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetWrapMode(System.Drawing.Drawing2D.WrapMode,System.Drawing.Color)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Drawing.Drawing2D.WrapMode" />
        <Parameter Name="color" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="mode">イメージの繰り返しコピーを領域に並べて表示するときの方法を指定する <see cref="T:System.Drawing.Drawing2D.WrapMode" /> の要素。</param>
        <param name="color">表示イメージの外側のピクセルの色を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" /> オブジェクト。 モード パラメーターが <see cref="F:System.Drawing.Drawing2D.WrapMode.Clamp" /> に設定され、<see cref="Overload:System.Drawing.Graphics.DrawImage" /> に渡されたソース四角形がそのイメージ自体より大きい場合に、この色が表示されます。</param>
        <summary>形状全体、または形状の境界上にテクスチャを並べて表示する方法を決定するために使用される、ラップ モードおよび色を指定します。 テクスチャで塗りつぶす形状がそのテクスチャより小さい場合、テクスチャは形状の境界をはみだして表示されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 For a code example, see the <xref:System.Drawing.Imaging.ImageAttributes.SetWrapMode%28System.Drawing.Drawing2D.WrapMode%29> method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetWrapMode">
      <MemberSignature Language="C#" Value="public void SetWrapMode (System.Drawing.Drawing2D.WrapMode mode, System.Drawing.Color color, bool clamp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetWrapMode(valuetype System.Drawing.Drawing2D.WrapMode mode, valuetype System.Drawing.Color color, bool clamp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Imaging.ImageAttributes.SetWrapMode(System.Drawing.Drawing2D.WrapMode,System.Drawing.Color,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Drawing.Drawing2D.WrapMode" />
        <Parameter Name="color" Type="System.Drawing.Color" />
        <Parameter Name="clamp" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="mode">イメージの繰り返しコピーを領域に並べて表示するときの方法を指定する <see cref="T:System.Drawing.Drawing2D.WrapMode" /> の要素。</param>
        <param name="color">表示イメージの外側のピクセルの色を指定する Color オブジェクト。 モード パラメーターが <see cref="F:System.Drawing.Drawing2D.WrapMode.Clamp" /> に設定され、<see cref="Overload:System.Drawing.Graphics.DrawImage" /> に渡されたソース四角形がそのイメージ自体より大きい場合に、この色が表示されます。</param>
        <param name="clamp">このパラメーターは何も作用しません。<see langword="false" /> に設定してください。</param>
        <summary>形状全体、または形状の境界上にテクスチャを並べて表示する方法を決定するために使用される、ラップ モードおよび色を指定します。 テクスチャで塗りつぶす形状がそのテクスチャより小さい場合、テクスチャは形状の境界をはみだして表示されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 For a code example, see the <xref:System.Drawing.Imaging.ImageAttributes.SetWrapMode%28System.Drawing.Drawing2D.WrapMode%29> method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetGamma">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ガンマ値を設定します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ClearGamma">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ガンマ補正を無効にします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="SetWrapMode">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ラップ モードを設定します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="SetColorKey">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>カラー キー \(透明度の範囲\) を設定します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ClearColorMatrix">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>カラー調整行列を消去します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ClearOutputChannel">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>CMYK \(水色、マゼンタ、黄、黒\) 出力チャネル設定を消去します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="SetColorMatrix">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>カラー調整行列を設定します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="SetRemapTable">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>カラー リマップ テーブルを設定します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="SetOutputChannel">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>CMYK \(水色、マゼンタ、黄、黒\) 出力チャネルを設定します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="SetColorMatrices">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>カラー調整行列とグレースケール調整行列を設定します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="SetOutputChannelColorProfile">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>出力チャネルのカラー プロファイル ファイルを設定します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="SetNoOp">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>カラー調整をオフにします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ClearColorKey">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>カラー キー \(透明度の範囲\) を消去します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ClearNoOp">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see langword="NoOp" /> 設定を消去します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ClearRemapTable">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>カラー リマップ テーブルを消去します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="SetThreshold">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>しきい値 \(透明度の範囲\) を設定します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ClearThreshold">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>しきい値を消去します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ClearOutputChannelColorProfile">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>出力チャネルのカラー プロファイル設定を消去します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>