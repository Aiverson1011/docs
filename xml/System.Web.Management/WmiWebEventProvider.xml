<Type Name="WmiWebEventProvider" FullName="System.Web.Management.WmiWebEventProvider">
  <TypeSignature Language="C#" Value="public class WmiWebEventProvider : System.Web.Management.WebEventProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WmiWebEventProvider extends System.Web.Management.WebEventProvider" />
  <TypeSignature Language="DocId" Value="T:System.Web.Management.WmiWebEventProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Management.WebEventProvider</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>ASP.NET 状態監視イベントを Windows Management Instrumentation \(WMI\) イベントにマップするイベント プロバイダーを実装します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 運用環境と運用スタッフが配置された Web アプリケーションの管理を ASP.NET の状態監視できます。<xref:System.Web.Management> 名前空間には、アプリケーションの正常性状態データおよびこのデータ処理の種類のプロバイダーをパッケージ化する正常性イベントの種類が含まれています。 正常性イベントの管理時に支援するサポート型も含まれています。  
  
 ASP.NET では、このクラスを使用して、稼働状況の監視イベントを WMI イベントにマップします。 WMI のサブシステムへの ASP.NET 状態監視イベントの配信を有効にするには構成、 <xref:System.Web.Management.WmiWebEventProvider> クラスで適切な設定を追加することで、 `<healthMonitoring>` 構成ファイルのセクションです。  
  
 Aspnet.mof ファイルに含まれる情報に ASP.NET 状態監視イベントがルーティングされるときに発生する WMI イベントのパラメーターの説明、 <xref:System.Web.Management.WmiWebEventProvider> クラスし、WMI イベントにマップします。 .NET Framework のビルド ディレクトリ、たとえば %windir%\\Microsoft.NET\\Framework\\ Aspnet.mof ファイルが格納されている*BuildNumber*します。 WMI イベントの稼働状況の監視イベントをレポートの詳細については、次を参照してください。 [NIB: WMI ASP.NET 状態監視イベントの配信を使用した](http://msdn.microsoft.com/ja-jp/e57fea2f-610f-4432-9dd6-dd10a6c5bd10)します。  
  
> [!NOTE]
>  ほとんどの場合は実装されると、ASP.NET 状態監視の種類を使用してで値を指定して、稼働状況の監視システムを制御するが、 `<healthMonitoring>` 構成セクション。 独自のカスタム イベントとプロバイダーを作成するの稼働状況の監視の種類から派生できます。 カスタム プロバイダーの作成方法の例は、次を参照してください。 [ASP.NET Health\-Monitoring Custom Provider Sample](http://msdn.microsoft.com/ja-jp/bbb1c959-e6e4-42b2-be62-49b7ca5ab72c)します。  
  
   
  
## 例  
 次の例では、ASP.NET 状態監視 Web アプリケーションの正常性イベントの結果としてによって発行された WMI イベントのコンシューマーを作成する方法を示します。  
  
> [!NOTE]
>  <xref:System.Web.Management.WmiWebEventProvider> クラスとを監視するヘルス イベントの種類は、既定では構成されています。 行う必要があることだけでは、すべての正常性イベントのルールを定義します。 正常性イベントがディスパッチされていないことに注意してください、 <xref:System.Web.Management.WmiWebEventProvider> 既定のプロバイダー。  
  
 [!code-csharp[System.Web.Management.WmiWebEventProvider\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WmiWebEventProvider/CS/WmiWebEventListener.cs#1)]
 [!code-vb[System.Web.Management.WmiWebEventProvider\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WmiWebEventProvider/VB/WmiWebEventListener.vb#1)]  
  
 次の例は構成ファイルの抜粋を示す、 `<healthMonitoring>` ASP.NET で使用できるようにする構成セクション、 <xref:System.Web.Management.WmiWebEventProvider> 稼働状況の監視のすべてのイベントを処理するプロバイダー。  
  
```  
<healthMonitoring>  
  <rules>  
    <add   
      name="Using Wmi"  
      eventName="All Events"   
      provider="WmiWebEventProvider"   
      profile="Critical"/>  
  </rules>  
</healthMonitoring>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WmiWebEventProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WmiWebEventProvider.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.Management.WmiWebEventProvider" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターは、ASP.NET 状態監視システムによって内部的に使用されます。 インスタンスの作成に使用しないが、 <xref:System.Web.Management.TraceWebEventProvider> がクラスでは、このクラスから継承する、独自のプロバイダーの種類を実装する場合に、このコンス トラクターに呼び出すことができます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WmiWebEventProvider.Flush" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>プロバイダーのバッファーからのすべてのイベントを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドが呼び出されると、プロバイダーのバッファー内のイベントがすぐに削除されると、すべて、最後からどれ時間だけが経過したに関係なく書き込みまたはイベントの数は、バッファー内です。 最後の書き込みの時間は、フラッシュ操作の時間にリセットされます。 バッファーの機能が有効でない場合は、このメソッドを呼び出しても効果はありません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public override void Initialize (string name, System.Collections.Specialized.NameValueCollection config);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Initialize(string name, class System.Collections.Specialized.NameValueCollection config) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WmiWebEventProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="config" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="name">このプロバイダーを識別するために、構成ファイルで使用する名前。</param>
        <param name="config">A <see cref="T:System.Collections.Specialized.NameValueCollection" /> このプロバイダーの構成ファイルに割り当てられている属性を指定するオブジェクト。</param>
        <summary>このオブジェクトの初期値を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ASP.NET の呼び出し、 <xref:System.Web.Management.WmiWebEventProvider.Initialize%2A> メソッドを呼び出した後、 <xref:System.Web.Management.WmiWebEventProvider.%23ctor%2A> コンス トラクターです。 初期化するためにこのメソッドは、 <xref:System.Web.Management.WmiWebEventProvider> クラスの構成設定と構成ファイルで指定した名前を使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessEvent">
      <MemberSignature Language="C#" Value="public override void ProcessEvent (System.Web.Management.WebBaseEvent eventRaised);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ProcessEvent(class System.Web.Management.WebBaseEvent eventRaised) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WmiWebEventProvider.ProcessEvent(System.Web.Management.WebBaseEvent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventRaised" Type="System.Web.Management.WebBaseEvent" />
      </Parameters>
      <Docs>
        <param name="eventRaised">
          <see cref="T:System.Web.Management.WebBaseEvent" /> オブジェクトを処理します。</param>
        <summary>プロバイダーに渡されたイベントを処理します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、イベントの処理を開始するを呼び出す ASP.NET 状態監視メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">イベントを発生させることができませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public override void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Shutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WmiWebEventProvider.Shutdown" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>プロバイダーのシャット ダウンに関連するタスクを実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ASP.NET の呼び出し、 <xref:System.Web.Management.EventLogWebEventProvider.Shutdown%2A> メソッドは、Web アプリケーションをホストするアプリケーション ドメインが終了するとします。 タスクによって正常に終了するアプリケーションは実行を実行するメソッドと呼びます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>