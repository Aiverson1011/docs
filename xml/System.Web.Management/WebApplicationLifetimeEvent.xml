<Type Name="WebApplicationLifetimeEvent" FullName="System.Web.Management.WebApplicationLifetimeEvent">
  <TypeSignature Language="C#" Value="public class WebApplicationLifetimeEvent : System.Web.Management.WebManagementEvent" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebApplicationLifetimeEvent extends System.Web.Management.WebManagementEvent" />
  <TypeSignature Language="DocId" Value="T:System.Web.Management.WebApplicationLifetimeEvent" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Management.WebManagementEvent</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>アプリケーションの有効期間中に重大なイベントを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 運用環境と運用スタッフが配置された Web アプリケーションの管理を ASP.NET の状態監視できます。<xref:System.Web.Management> 名前空間には、アプリケーションの正常性状態データおよびこのデータ処理の種類のプロバイダーをパッケージ化する正常性イベントの種類が含まれています。 正常性イベントの管理時に支援するサポート型も含まれています。  
  
 アプリケーションの有効期間イベントには、アプリケーションの起動などのイベントとシャット ダウン イベントが含まれます。 アプリケーションが終了した場合は、関連するイベント メッセージのフィールドを表示して理由を確認できます。  
  
 ときに、 <xref:System.Web.Management.WebApplicationLifetimeEvent> インスタンスが発生すると、ASP.NET の状態監視、アプリケーションの有効期間イベント パフォーマンス カウンターを更新します。 追加することでこれらのイベント ログに記録できます、 <xref:System.Web.Management.WebApplicationLifetimeEvent> オブジェクトを `rules` のサブセクション、 `healthMonitoring` の次の例に示すとおり、構成ファイルのセクションです。  
  
```  
<rules>  
  <add name="Application Events"  
    eventName="Application Lifetime Events"  
    provider="EventLogProvider"  
    profile="Default"  
    minInterval="00:01:00" />  
</rules>  
  
```  
  
 アプリケーションの有効期間イベントのパフォーマンス カウンターには、すべての ASP.NET の有効期間イベントの合計が含まれています。 システム モニター \(PerfMon\) では、このパフォーマンス カウンターを表示する、 **カウンターの追加** ウィンドウ選択 **ASP.NET** から、 **パフォーマンス オブジェクト** ドロップダウン リストです。 選択、 **アプリケーションの有効期間イベント** パフォーマンス カウンター、およびをクリックして、 **追加** \] ボタンをクリックします。 詳細については、「を使用して ASP.NET アプリケーションとシステム モニター \(PerfMon\)」を参照してください [MSDN](http://go.microsoft.com/fwlink/?linkid=37118)します。 標準的なログに記録するイベントを許可するかどうかは <xref:System.Web.Management.EventLogWebEventProvider>, 、ことで表示するイベント ビューアーを選択して、 **アプリケーション** ログです。 詳細については、次を参照してください。 [Event Viewer](http://go.microsoft.com/fwlink/?linkid=24845&clcid=0x409) TechNet の Windows Server 2003 のドキュメントにします。  
  
> [!CAUTION]
>  <xref:System.Web.Management.WebApplicationLifetimeEvent> オブジェクトは、大量のイベント ログを記録するリソースを消費して、システムが低下する可能性があります。 場合に上書きされることを他のイベントを発生する可能性も、 <xref:System.Web.Management.EventLogWebEventProvider> イベントの動作をログにイベントの頻度の高い原因クラスです。  
  
> [!NOTE]
>  ほとんどの場合は実装されると、ASP.NET 状態監視の種類を使用してで値を指定して、稼働状況の監視システムを制御するが、 `healthMonitoring` 構成セクション。 独自のカスタム イベントとプロバイダーを作成するの稼働状況の監視の種類から派生できます。 派生する例については、 <xref:System.Web.Management.WebApplicationLifetimeEvent> このトピックで例を参照してください。  
  
   
  
## 例  
 次のコード例から派生させる方法を示しています、 <xref:System.Web.Management.WebApplicationLifetimeEvent> カスタム イベントを作成するクラス。  
  
 [!code-csharp[System.Web.Management.WebApplicationLifetimeEvent\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.management.WebApplicationLifetimeEvent/CS/webapplicationlifetimeevent.cs#1)]
 [!code-vb[System.Web.Management.WebApplicationLifetimeEvent\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.management.WebApplicationLifetimeEvent/VB/webapplicationlifetimeevent.vb#1)]  
  
 次の構成ファイルの抜粋を構成する方法を示しています、 `healthMonitoring` を追加する構成ファイルのセクション、 `SampleWebApplicationLifetimeEvent` ASP.NET 状態監視システムに上記で定義されたコード。 システムにイベントを追加するには、新しいエントリを追加することでイベントを定義する必要があります、 `eventMappings` セクションし、新しいエントリを追加することで、イベントをプロバイダーに割り当てる、 `rules` セクションです。  
  
```  
<healthMonitoring  
  enabled="true"  
  heartBeatInterval="0">  
  
    <eventMappings>  
       <clear />  
       <!-- Configure the application lifetime event -->  
       <!-- object to handle the Web application events. -->  
       <add name="SampleApplicationLifetimeEvents"  
         type="System.Web.Management.SampleWebApplicationLifetimeEvent,  
         System.Web,Version=2.0.3600.0,  
         Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a" />  
     </eventMappings>  
  
    <rules>  
      <clear/>  
       // Configure the connection between the   
       // application lifetime event object   
       // and the provider that must process it.  
       <add name="Custom Application Events"  
         eventName="SampleApplicationLifetimeEvents"  
         provider="EventLogProvider"  
         profile="Default"  
         minInterval="00:01:00" />  
    </rules>  
  
</healthMonitoring>  
```  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>When formatting your custom event information for display, override the <see cref="M:System.Web.Management.WebBaseEvent.FormatCustomEventDetails(System.Web.Management.WebEventFormatter)" /> method rather than the <see cref="Overload:System.Web.Management.WebBaseEvent.ToString" /> method. This will avoid overwriting or tampering with sensitive system information.</para>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WebApplicationLifetimeEvent (string message, object eventSource, int eventCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(string message, object eventSource, int32 eventCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WebApplicationLifetimeEvent.#ctor(System.String,System.Object,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="eventSource" Type="System.Object" />
        <Parameter Name="eventCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">イベントに関連付けられたメッセージ。</param>
        <param name="eventSource">イベントのソースであるオブジェクト。</param>
        <param name="eventCode">イベントに関連付けられたコードです。 カスタム イベントを実装するときに、イベントのコードがより大きくなければなりません <see cref="F:System.Web.Management.WebEventCodes.WebExtendedBase" />します。</param>
        <summary>初期化、 <see cref="T:System.Web.Management.WebApplicationLifetimeEvent" /> クラスの指定のパラメーターを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターは、ASP.NET 状態監視システムによって内部的に使用されます。 インスタンスの作成に使用しないが、 <xref:System.Web.Management.WebApplicationLifetimeEvent> がクラスでは、このクラスから継承する、独自のイベントの種類を実装するときに、このコンス トラクターに呼び出すことができます。  
  
> [!NOTE]
>  <xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A> コンス トラクターは、コードから直接使用するものではありません。 ASP.NET によって呼び出されます。 呼び出すことができます、 <xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A> コンス トラクターから派生する場合、 <xref:System.Web.Management.WebApplicationLifetimeEvent> クラスです。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A> ASP.NET カスタムの正常性イベント。 このコード例は、主を使用する正しい構文を示しています。  
  
 [!code-csharp[System.Web.Management.WebApplicationLifetimeEvent\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.management.WebApplicationLifetimeEvent/CS/webapplicationlifetimeevent.cs#2)]
 [!code-vb[System.Web.Management.WebApplicationLifetimeEvent\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.management.WebApplicationLifetimeEvent/VB/webapplicationlifetimeevent.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WebApplicationLifetimeEvent (string message, object eventSource, int eventCode, int eventDetailCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(string message, object eventSource, int32 eventCode, int32 eventDetailCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WebApplicationLifetimeEvent.#ctor(System.String,System.Object,System.Int32,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="eventSource" Type="System.Object" />
        <Parameter Name="eventCode" Type="System.Int32" />
        <Parameter Name="eventDetailCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">イベントに関連付けられたメッセージ。</param>
        <param name="eventSource">イベントのソースであるオブジェクト。</param>
        <param name="eventCode">イベントに関連付けられたコードです。 カスタム イベントを実装するときに、イベントのコードがより大きくなければなりません <see cref="F:System.Web.Management.WebEventCodes.WebExtendedBase" />します。</param>
        <param name="eventDetailCode">
          <see cref="T:System.Web.Management.WebEventCodes" /> イベントの詳細な識別子を指定する値。</param>
        <summary>初期化、 <see cref="T:System.Web.Management.WebApplicationLifetimeEvent" /> クラスの指定のパラメーターを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターは、ASP.NET 状態監視システムによって内部的に使用されます。 インスタンスの作成に使用しないが、 <xref:System.Web.Management.WebApplicationLifetimeEvent> がクラスでは、このクラスから継承する、独自のイベントの種類を実装するときに、このコンス トラクターに呼び出すことができます。  
  
> [!NOTE]
>  <xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A> コンス トラクターは、コードから直接使用するものではありません。 ASP.NET によって呼び出されます。 呼び出すことができます、 <xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A> コンス トラクターから派生する場合、 <xref:System.Web.Management.WebApplicationLifetimeEvent> クラスです。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A> ASP.NET カスタムの正常性イベント。 このコード例は、主を使用する正しい構文を示しています。  
  
 [!code-csharp[System.Web.Management.WebApplicationLifetimeEvent\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.management.WebApplicationLifetimeEvent/CS/webapplicationlifetimeevent.cs#3)]
 [!code-vb[System.Web.Management.WebApplicationLifetimeEvent\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.management.WebApplicationLifetimeEvent/VB/webapplicationlifetimeevent.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IncrementPerfCounters">
      <MemberSignature Language="C#" Value="protected override void IncrementPerfCounters ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void IncrementPerfCounters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WebApplicationLifetimeEvent.IncrementPerfCounters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>パフォーマンス カウンターをインクリメントするためには、内部的に使用します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Web.Management.WebApplicationLifetimeEvent" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>