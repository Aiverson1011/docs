<Type Name="IPersonalizable" FullName="System.Web.UI.WebControls.WebParts.IPersonalizable">
  <TypeSignature Language="C#" Value="public interface IPersonalizable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPersonalizable" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.IPersonalizable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>アプリケーションや抽出をパーソナル化状態の追加の管理機能を定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用するだけでなく、 `Personalizable` 属性コントロールも実装するコントロールのプロパティに <xref:System.Web.UI.WebControls.WebParts.IPersonalizable> 用のアプリケーションや抽出をパーソナル化状態の追加の管理機能。 たとえば、プライベート状態情報を管理する必要があるコントロールでは、このインターフェイスを実装する必要があります。 カスタム キャッシュ ソリューション、メインフレーム、または XML Web サービスにデータの永続性などの複雑なメカニズムを個人用に設定されたデータにアクセスするためのコントロールは、このインターフェイスを実装もする必要があります。  
  
> [!IMPORTANT]
>  App\_Code ディレクトリに定義されているクラスに基づいての種類を追加されず、既定のバイナリ シリアル化機構に依存し、必要があります。 App\_Code ベースのアイテムは時間のランダム ポイントに変更された、アセンブリ名を持つことができますというという事実は一貫してバイナリ シリアル化されません。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.WebParts.IPersonalizable> インターフェイスです。 例では、という名前の Web パーツ コントロールを参照する .aspx ページから成る `UrlListWebPart`します。 次のコードは、たとえば、.aspx ファイルです。  
  
 [!code-csharp[WebParts\_IPersonalizable\_Overview\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/IPersonalizableCS.aspx#1)]
 [!code-vb[WebParts\_IPersonalizable\_Overview\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/IPersonalizableVB.aspx#1)]  
  
 次のコードは、カスタム ソース <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールです。 このファイルを App\_Code ディレクトリに配置する必要があります。  
  
 [!code-csharp[WebParts\_IPersonalizable\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/urllistwebpart.cs#2)]
 [!code-vb[WebParts\_IPersonalizable\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/urllistwebpart.vb#2)]  
  
 ブラウザーでページを読み込みます。 URL を表すし、実際の URL の先頭を追加する名前を入力 `http://`, 、\] をクリックし、 **追加** 、URL を追加する\] ボタンをクリックします。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsDirty">
      <MemberSignature Language="C#" Value="public bool IsDirty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirty" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールを管理するカスタムのデータが変更されたかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" />カスタム データで管理されている場合、<see cref="T:System.Web.UI.WebControls.WebParts.IPersonalizable" />インターフェイスが変更されました。 それ以外の場合、<see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コントロールによって管理されているデータが変更されたときに、コントロールと見なされます「ダーティ」です。 コントロールを返す必要があります`true`かどうか、カスタム データが管理を通じて、<xref:System.Web.UI.WebControls.WebParts.IPersonalizable>インターフェイスが変更されました。 コントロールを返す場合`true`からこのプロパティは、コントロールの<xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A>インターフェイス メソッドの実装は、プロパティ値の抽出中に呼び出されます。  
  
> [!NOTE]
>  後者のフェーズの POST 要求を処理中に、パーソナル化インフラストラクチャによって、自動的にこのプロパティがチェックされます。 ただし、GET 要求に対して返される値から、<xref:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty%2A>プロパティはチェックされません。 コントロールの州\-\-によって管理されているだけでなくデータの「ダーティ」と見なされるにコントロールが原因で他のいくつかのイベントには、 <xref:System.Web.UI.WebControls.WebParts.IPersonalizable>\-\-を保存します。 コントロールのマークを付ける自体「ダーティ」GET 要求中に場合、またはインフラストラクチャは、パーソナル化非常に特定する境界条件下で扱いますコントロール「ダーティ」GET 要求中に、場合<xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A>が常に呼び出されます。  
  
 コントロールをそれに関連する参照できます<xref:System.Web.UI.WebControls.WebParts.WebPartManager>を制御し、確認、<xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization.Scope%2A>プロパティを現在のスコープを決定します。 コントロールのカスタム データの「ダーティ」の状態を現在のスコープに対して適切にする必要があります。  
  
   
  
## 例  
 次のコード例に示しますの使用、<xref:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty%2A>プロパティです。 この例の最初の部分がホストする Web ページ、<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール。  
  
 [!code-csharp[WebParts\_IPersonalizable\_Overview\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/IPersonalizableCS.aspx#1)]
 [!code-vb[WebParts\_IPersonalizable\_Overview\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/IPersonalizableVB.aspx#1)]  
  
 例の 2 番目の部分は、カスタム コード<xref:System.Web.UI.WebControls.WebParts.WebPart>と呼ばれるコントロール`UrlListWebPart`です。 このファイルは、例を実行する App\_Code ディレクトリに配置する必要があります。 ソース コードを実装することに注意してください、<xref:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty%2A>プロパティです。  
  
 [!code-csharp[WebParts\_IPersonalizable\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/urllistwebpart.cs#2)]
 [!code-vb[WebParts\_IPersonalizable\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/urllistwebpart.vb#2)]  
  
 ブラウザーでページを読み込みます。 URL を表すで始まるされて、実際の URL を追加し、名前を入力`http://`、 をクリックし、**追加**URL を追加するボタンをクリックします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load(class System.Web.UI.WebControls.WebParts.PersonalizationDictionary state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.IPersonalizable.Load(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />
      </Parameters>
      <Docs>
        <param name="state">A <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationDictionary" /> 基になるデータ ストアから読み込まれたカスタムのスコープを持つデータが含まれます。</param>
        <summary>カスタム データをコントロールに読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、それ自体にカスタム データをロードすることを許可するためのコントロールで呼び出されます。 コントロールのカスタム状態を \[ページ上の個人用設定のデータが変更されたかどうかに関係なく、基になるデータ ストアに戻す書き込む必要があるかどうかを示す値を返すこともできます。 コントロールでは、独自のカスタム プロパティを設定でき、パーソナル化のディクショナリに含まれる値に基づく追加の内部ロジックを実行することができます。 このメソッドは、Web パーツ コントロールをパーソナル化データをコントロールに適用するときにセットによって呼び出されます。  
  
 マージ動作に注意する必要があります <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User>\-とスコープ <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared>のスコープに含まれるプロパティ、 <xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary> オブジェクトです。`state` パラメーターには、基になるデータ ストアから読み込まれたカスタム データのマージされた表現が含まれています。<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared> ページ自体が以前に追加されたすべての値のスコープ <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared> スコープが使用できます。<xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User> 値に関連付けられている場合のスコープ <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User> パーソナル化スコープが追加されたときに 1 つの値 <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared> スコープ、および別の値を使用しているページが <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User> スコープ、パーソナル化インフラストラクチャが含まれてのみ、 <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User>\-値のスコープ \(とは対照的に、 <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared> 値の範囲\) 内で、 `state` パラメーター。  
  
   
  
## 例  
 実装を次のコード例に示します、 <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A> カスタム メソッド <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールです。 この例を実行するために必要な完全なコードの使用例」セクションを参照してください、 <xref:System.Web.UI.WebControls.WebParts.IPersonalizable> クラスの概要です。  
  
 [!code-csharp[WebParts\_IPersonalizable\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/urllistwebpart.cs#2)]
 [!code-vb[WebParts\_IPersonalizable\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/urllistwebpart.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save(class System.Web.UI.WebControls.WebParts.PersonalizationDictionary state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.IPersonalizable.Save(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />
      </Parameters>
      <Docs>
        <param name="state">A <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationDictionary" /> 基になるデータ ストアから読み込まれたカスタムのスコープを持つデータが含まれます。</param>
        <summary>コントロールのカスタム プロパティと内部の状態情報が保存 <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationDictionary" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 サーバー コントロールは、独自のカスタム プロパティと内部の状態情報を格納できます、 <xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary> で指定されている、 `state` パラメーター。 情報は、一連の名前と値のペアとして格納されます。 使用してコントロールに対する後続の呼び出し中に認識できる名前\/値ペアを使用するコントロールの機能により、 <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A> メソッドです。  
  
 コントロールはそれに関連する参照できる <xref:System.Web.UI.WebControls.WebParts.WebPartManager> を制御し、確認、 <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope> オブジェクトを現在のスコープを決定します。 カスタム状態情報は、現在のスコープに適している必要があります。<xref:System.Web.UI.WebControls.WebParts.PersonalizationEntry> に加算される値、 <xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary> を結合するときに、パーソナル化インフラストラクチャがこれに依存するためにオブジェクトが適切なスコープの値を関連付ける必要があります <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared> と <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User>\-に渡す前にカスタム データのスコープ、 <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A> メソッドです。  
  
 コントロールが、ASP.NET によって、状態のディクショナリに配置されるオブジェクトをシリアル化できることを確認する必要があります Web パーツの標準の ASP.NET の実装を使用して、 <xref:System.Web.UI.ObjectStateFormatter> クラスです。 実際には、これは、次の意味をします。  
  
-   .NET Framework のプリミティブ型、文字列、および配列、配列リスト、ハッシュ テーブル、およびハイブリッド ディクショナリなどの .NET Framework 型のコレクション指向は、自動的にシリアル化します。  
  
-   独自に提供するカスタム型 <xref:System.ComponentModel.TypeConverter> にシリアル化して、文字列から逆シリアル化できるクラスがシリアル化可能と見なされます。  
  
-   シリアル化できるカスタムの型、 <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> クラスがシリアル化可能と見なされます。  
  
> [!IMPORTANT]
>  App\_Code ディレクトリに定義されているクラスに基づいての種類を追加されず、既定のバイナリ シリアル化機構に依存し、必要があります。 App\_Code ベースのアイテムは時間のランダム ポイントに変更された、アセンブリ名を持つことができますというという事実は一貫してバイナリ シリアル化されません。  
  
   
  
## 例  
 次のコード例では、実装することを示しています、 <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A> カスタム メソッド <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールです。 この例を実行するために必要な完全なコードの使用例」セクションを参照してください、 <xref:System.Web.UI.WebControls.WebParts.IPersonalizable> クラスの概要です。  
  
 [!code-csharp[WebParts\_IPersonalizable\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/urllistwebpart.cs#2)]
 [!code-vb[WebParts\_IPersonalizable\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/urllistwebpart.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>