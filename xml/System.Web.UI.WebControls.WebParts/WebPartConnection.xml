<Type Name="WebPartConnection" FullName="System.Web.UI.WebControls.WebParts.WebPartConnection">
  <TypeSignature Language="C#" Value="public sealed class WebPartConnection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WebPartConnection extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true, "Transformers")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>2 つを有効にするオブジェクトは、 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> コントロール接続を構成します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 接続がリンクまたは 2 つのアソシエーションには、Web パーツ コントロール セットで <xref:System.Web.UI.WebControls.WebParts.WebPart> \(またはその他のサーバーまたはユーザー\) のデータを共有できるようにするコントロール。 データを共有するには、この機能により、単独のコントロールによって提供される機能以外の方法で使用される接続されているコントロールです。 たとえば、1 つのコントロールは、郵便番号データを提供し、別のコントロールがそのデータが読み込まれ、郵便番号に基づいて地域の気象情報を提供する、2 つのコントロールの機能の接続より多くの価値をユーザーになります。 この例を拡張するには、ことも表示情報に基づいてローカル情報へのリンクを持つコントロールなどの郵便番号コードと郵便番号データを扱えるこれらすべてのコントロールは郵便番号コードを提供する 1 つのコントロールとデータを共有することが、コントロールを作成可能性があります。 Web パーツ アプリケーションのエンドユーザーを作成してによって提供される標準の接続のユーザー インターフェイス \(UI\) を使用して、Web ブラウザーから直接このような互換性のあるすべてのコントロール間の接続を管理、 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> コントロール、または開発者によって提供されるカスタム UI を使用します。  
  
 これは、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> クラスの概要は、接続の作成の基本情報の全般的なステートメントを示します。 詳細については、特定のコンポーネントとの接続の作成に必要な要件は、次を参照してください。 [Web Parts Connections Overview](http://msdn.microsoft.com/ja-jp/d98cfd0f-ebd6-4871-89d5-abbd2cdef67b), 、コード例を次の説明に記載されているや参照クラスを参照してください。 Web パーツの接続のいくつかの基本的な側面があります。  
  
-   2 つ <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールです。 すべての Web パーツ接続は、2 つのコントロールで構成されます。 同時に複数の接続に参加するためのコントロールがありますが、すべて 1 つの接続は、2 つのコントロールで構成されます。 コントロールをから直接派生させることができます、 <xref:System.Web.UI.WebControls.WebParts.WebPart> 基底クラス、またはこれらには、ASP.NET コントロール、カスタム サーバー コントロール、およびユーザー コントロールを含む他のサーバー コントロールを指定できます。 派生していないコントロール、 <xref:System.Web.UI.WebControls.WebParts.WebPart> クラスに配置されている場合、 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> ゾーンに自動的にラップ、 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> オブジェクトから継承するように、実行時に、 <xref:System.Web.UI.WebControls.WebParts.WebPart> クラスと関数が実行時として <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールです。  
  
-   コントロール内にある <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> ゾーンです。 両方とも <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールとサーバー コントロールの他の任意の型に存在する必要があります、 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> ゾーンの Web パーツ接続 \(およびその他のほとんどの Web パーツ機能\) に参加することができます。  
  
-   コンシューマーとプロバイダー。 すべての Web パーツ接続では、2 つのコントロールがあります。 データとデータのコンシューマーのプロバイダー。 プロバイダーは、データを返すインターフェイスの形式で指定されたコールバック メソッドをコンシューマーにデータを提供します。 \(を作成し、コールバック メソッドを指定する方法の例は、このトピックの「例」セクションを参照してください\)。 このコールバック メソッドは、プロバイダー接続ポイントと呼びます。 この接続ポイント \(「わかりやすい」名前、ID、および返されたインターフェイスの種類\) の詳細が含まれる、 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> プロバイダー コントロールに関連付けられているオブジェクト。 コンシューマーは、インターフェイスのインスタンスを受け入れることができる指定されたメソッドを通じて、データを受信します。 このメソッドがコンシューマー接続ポイントと呼ばれ、接続ポイント \(名前、ID、およびインターフェイスの型\) の詳細については、 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> コンシューマー コントロールに関連付けられているオブジェクト。  
  
-   互換性のあるコントロールまたは有効なトランスフォーマー。 接続を機能させるには、コンシューマーとプロバイダーする必要がありますか、互換性のある \(つまり、インターフェイスの同じ型を持つ、指定した接続ポイントによる方法を操作できること\)、または存在してください、 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> で認識できる型に、プロバイダーによって提供される型に変換する機能を持つオブジェクト。  
  
-   <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> オブジェクト。 接続が存在する必要がありますのインスタンス、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 、プロバイダーとコンシューマー コントロールとの接続ポイントの詳細情報への参照を含むクラスです。 かどうか、プロバイダーとコンシューマーが互換性がなく、代わりに使用して、 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> オブジェクトに接続する接続トランスフォーマーを参照します。  
  
-   接続を確立することを意味します。 正しく接続ポイントによる方法でを設計し、ゾーンに配置されてコンシューマーとプロバイダーの互換性のあるコントロールと <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> オブジェクトは利用できますが、最後の基本的な手順の必要な接続を開始します。 これが発生する 1 つの方法は、UI で接続を作成するユーザーです。 配置した場合、 `<asp:connectionszone>` 接続用のコンポーネントはインプレースで実行時にユーザーを使用して、ページを接続の表示モードに切り替えることができます動詞をクリックして、接続プロバイダーまたはコンシューマー、および接続の UI のいずれかの動詞メニューを開き、ページと、その他の要素が必要な \(に基づいて、 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> コントロール\) が表示されます。 この UI を通じて、ユーザーは、接続を開始できます。 接続を開始する別の方法では、プログラムによって実行されます。 いずれの場合、UI またはプログラムを使用して、基になるメソッドを介して接続を開始するかどうかは、同じです。 アプリケーションの呼び出し、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> メソッド \(または <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> トランスフォーマーを使用して場合\) で、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> を制御する、プロバイダー、コンシューマー、および、それぞれのコネクション ポイントのオブジェクトを渡すと、メソッドが戻る、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> オブジェクトです。  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> クラスは 2 つの接続の重要な詳細をカプセル化するオブジェクトを定義 <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールです。 クラスは、ほとんどすべての特定の接続の詳細に関連するプロパティで構成されます。 いくつかのプロパティでは、接続のコンシューマー コントロールに関するものです。<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> プロパティは、コンシューマー コントロール自体を参照し、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> プロパティは、コンシューマーの ID を参照<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> コンシューマーのコネクション ポイントの詳細が含まれているオブジェクトは、コンシューマーによって参照される <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> プロパティです。<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> プロパティ参照の ID、 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> オブジェクトです。 これらすべてのコンシューマーに関連する接続プロパティは、接続を作成する割り当てられた値が必要です。  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> クラスも、接続プロバイダーのコントロールに関連するいくつかのプロパティがあり、これらはコンシューマーのプロパティに対応しています。<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> プロパティは、プロバイダー コントロール自体を参照中に、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> プロパティは、その ID を参照します。<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> プロパティ参照、 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> オブジェクト、および <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> プロパティは、プロバイダーの接続ポイントの ID を参照します。  
  
 いくつかのプロパティでは、接続の状態に関するものです。<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> プロパティは、接続がアクティブ \(現在のデータを交換する\)\] または \[非アクティブな \(まだ接続されているが、アクティブに共有ではないデータ\) のかどうかを示します。<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> プロパティは、接続が共有するかどうかを示します \(ページのすべてのユーザーが使用可能\) またはユーザーに固有の接続と <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> プロパティ コントロールを示すかどうか、静的 \(内で宣言、ページのマークアップと永続的なので\) または動的 \(プログラムによって作成された、削除することを意味する\)。  
  
   
  
## 例  
 次のコード例は、2 つの単純な接続を作成する方法を示します <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールです。 接続の構成の 3 つの方法の例: Web ページのマークアップで接続するためのタグを配置することにより宣言によって、コードで接続を作成することでプログラムを使用して、ui に配置することで、 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> \] ページで、ユーザーの接続を確立できるようにするコントロール。  
  
 このコード例には、4 つの部分があります。  
  
-   Web パーツを変更することができますユーザー コントロールは、ページのモードを表示します。  
  
-   インターフェイスと 2 つのコードをソース <xref:System.Web.UI.WebControls.WebParts.WebPart> プロバイダーと接続のコンシューマーとしての動作を制御します。  
  
-   すべてのコントロールをホストし、コード例を実行する Web ページ。  
  
-   ページの例を実行する方法の説明です。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるユーザー コントロールです。 割り当てられているファイル名を付けます .ascx ファイルに次のソース コードを保存、 `Src` の属性、 `Register` ホストする Web ページの上部にあるディレクティブは、このユーザー コントロールをします。 詳細については、このコントロールのモードとソース コードの説明を表示、参照してください [Walkthrough: Changing Display Modes on a Web Parts Page](http://msdn.microsoft.com/ja-jp/24e42f74-82dc-4c13-8574-130398985fc0)します。  
  
 [!code-csharp[WebParts\_WebPartConnection\_Overview\#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-vb[WebParts\_WebPartConnection\_Overview\#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 コード例の 2 番目の部分では、インターフェイスとコントロールのソース コードを示します。 ソース ファイルには、という名前の単純なインターフェイスが含まれています。 `IZipCode`します。<xref:System.Web.UI.WebControls.WebParts.WebPart> という名前のクラス `ZipCodeWebPart` インターフェイスを実装であり、プロバイダー コントロールとして機能します。 その `ProvideIZipCode` メソッドは、インターフェイスの唯一のメンバーを実装するコールバック メソッド。 メソッドは、単に、インターフェイスのインスタンスを返します。 メソッドが表示されているメモ、 `ConnectionProvider` メタデータ内の属性です。 これは、プロバイダーの接続ポイントのコールバック メソッドとしてメソッドを識別するためのメカニズムです。 他の <xref:System.Web.UI.WebControls.WebParts.WebPart> クラスの名前は `WeatherWebPart`, 、接続のコンシューマーとして機能するとします。 このクラスはという名前のメソッドを持つ `GetZipCode` のインスタンスを取得する、 `IZipCode` プロバイダー コントロールからのインターフェイスです。 このメソッドとコンシューマーのコネクション ポイントのメソッドとしてマークされることに注意してください、 `ConnectionConsumer` メタデータ内の属性です。  
  
 このコード例を実行するには、このソース コードをコンパイルする必要があります。 明示的にコンパイルし、Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに、生成されたアセンブリを配置できます。 また、ここで、動的にコンパイル実行時に、サイトの App\_Code フォルダーにソース コードを配置することができます。 このコード例では、動的なコンパイルを使用します。 コンパイルする方法について説明するチュートリアルは、次を参照してください。 [Walkthrough: Developing and Using a Custom Server Control](http://msdn.microsoft.com/ja-jp/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。  
  
 [!code-csharp[WebParts\_WebPartConnection\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts\_WebPartConnection\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/ZipCodeComponent.vb#2)]  
  
 コード例の 3 番目の部分は、Web ページです。 上の方は、 `Register` ユーザー コントロールとカスタム ディレクティブ <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールです。 コントロールのソース コードを App\_Code サブフォルダーにする必要がありますので、この例では、コントロールの動的なコンパイル、 `Register` ページ内のタグは、任意のタグ プリフィックスだけと、コントロールの名前空間を参照します。 カスタム <xref:System.Web.UI.WebControls.WebParts.WebPart> の Web ページ内のコントロール \(プロバイダーおよびコンシューマー\) が宣言されている `<asp:webpartzone>` 要素内で、 `<zonetemplate>` 要素。  
  
 ページは、カスタム コントロール間の接続を構成する 3 つの方法を提供します。 最初のメソッドは、宣言型です。 ページのマークアップに、\<`StaticConnections>` 要素が宣言されているし、するには、 `<asp:WebPartConnections>` 要素に属性として指定された接続のさまざまなコンシューマーとプロバイダーの詳細なです。 これは、具体的には、内部 Web ページに直接宣言することにより、接続を作成する方法の 1 つ、 `<asp:WebPartManager>` 要素。 この静的な接続のため 2 つのカスタム コントロール間の接続は、ページが読み込まれる最初にすぐに作成されます。  
  
 コントロール間の接続を構成するための 2 つ目のメソッドがあり、 `<asp:connectionszone>` ページ内の要素。 ユーザーが実行時に、接続の表示モードに切り替えます、カスタム コントロールの 1 つの connect 動詞をクリックすると、 `<asp:connectionszone>` 要素が自動的に接続を作成するための UI を表示します。  
  
 ページには、プログラムで行うの接続の作成の 3 番目の方法も示します。`Button1_Click` メソッドは、コードの作成、 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> プロバイダー コントロールとの接続ポイントの詳細を呼び出すことによって取得オブジェクトを <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> メソッドです。 コンシューマー コントロールに似たようなタスクを実行して呼び出し、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> メソッドです。 最後に、新しく作成 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> オブジェクトを呼び出して、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> メソッドを <xref:System.Web.UI.WebControls.WebParts.WebPartManager> コントロールです。  
  
 [!code-csharp[WebParts\_WebPartConnection\_Overview\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-vb[WebParts\_WebPartConnection\_Overview\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 内で宣言されているので、最初の接続は既にが存在する、ブラウザーで Web ページを読み込んだ後、 `<StaticConnections>` 要素。 テキストを入力、 **ZIP コード プロバイダー** コントロール、およびそれがコンシューマー コントロールに表示されます。 次に、2 つのコントロールを切断します。 使用して、 **表示モード** ドロップダウン リスト コントロール、ページの表示モードの接続を変更します。 各 \(タイトル バーの下向きの矢印で表される\) の動詞メニューをクリックして、 <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロール、およびそれぞれを持つことを確認、 **接続** オプション。 これは、connect 動詞で、動詞メニューに表示されるページが接続モードが場合にのみです。 コントロール、および接続によって提供される UI のいずれかに接続する動詞をクリックして、 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> コントロールが表示されます。 クリックして、 **切断** コントロール間の静的な接続を終了するボタンです。 使用して、 **表示モード** ページをブラウズ モードを返すときにします。 ここでも、プロバイダーの新しいテキストを入力し、コントロールが切断されたため、コンシューマー コントロールで更新するテキストが失敗に注意してくださいしようとします。  
  
 次に、上記と同じメソッドを使用して、もう一度接続表示モードに切り替えます。 コントロールの 1 つの connect 動詞をクリックします。 クリックして、 **接続を作成** リンク、およびによって提供される UI を使用して、 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> コントロール間の接続を作成するコントロール。 これは、接続を作成する 2 番目のメソッドです。 接続が形成されるとすぐに、最後の文字列で入力した \(つまり、コントロールの接続が切断されたために、表示できませんでした\) プロバイダー コントロールに注意してください。 接続が作成し直されました突然、コンシューマーに表示されます。 クリックして、 **切断** を作成した現在の接続を終了\] ボタンをクリックします。 ページをブラウズ モードを返します。 テキストが更新されないことと、コントロールが再び切断されたことを説明するプロバイダーに新しいテキストを入力します。  
  
 表示モードを接続するページを返します。 Connect 動詞をクリックする代わりをクリックして、 **web パーツ コントロールの接続** の接続を構成するは、3 番目の方法を示しています。 このボタンをクリックします。 この方法では、1 つの簡単な手順でプログラムを使用してコントロールを接続を使用しなくても、 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> コントロールです。 接続を作成するプロバイダーに突然入力の最後の文字列が表示されるコンシューマー コントロールに注意してください。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionsZone" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
    <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPartConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A> 接続が Web ページのマークアップで宣言されている場合、ASP.NET のパーサーはインスタンスを作成できるように、コンス トラクターがパブリック; 開発者のコードで使用するこのコンス トラクターがありません。  
  
 作成する場合、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> を使用する必要がありますプログラムを使用して、オブジェクト、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName> または <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName> で提供されるメソッド、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> コントロールです。 これらのメソッドは、接続の作成のさまざまな詳細を処理し、返す、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> オブジェクトです。  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A> のコンス トラクター、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> クラスの値を設定する、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> と <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> プロパティ `true`します。 したがって、新しい接続の既定の状態は \(含まれる Web ページのマークアップで宣言されていることを意味する\) 静的になりし、\(ページのすべてのユーザーに表示\) を共有します。 これは、そうなるかを使用してページのマークアップで接続を宣言することで、典型的なシナリオで接続を追加するときに、 `<asp:webpartconnection>` 要素。 ただし、他の状況での接続は、これらのプロパティに別の値があります。 たとえば、コードでは、接続オブジェクトを作成することで、接続をプログラムで追加すると、ユーザーは、ページを表示する既定のユーザーのパーソナル化スコープでは、接続が user\(visible only to the specific user\) ごとに、動的接続として作成されます。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> と <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> プロパティは読み取り専用との接続の種類を特定するこれらのプロパティの設定によって内部的に、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> ページ マークアップで宣言によって \(プログラムを使用して、コードやユーザー インターフェイスを使用\) に接続を作成する方法によって制御されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
      </Docs>
    </Member>
    <Member MemberName="Consumer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Consumer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Consumer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 接続でコンシューマー コントロールとして機能しているオブジェクト。</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 接続でコンシューマーとして機能する Web パーツ コントロールを表します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 すべての Web パーツ接続は、データを共有する 2 つのコントロールで構成されます。 1 つのコントロールは、データのプロバイダーとして機能し、その他のコントロールの受信およびプロバイダーからのデータの処理、コンシューマーとして機能します。<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> プロパティへの参照を取得する、 <xref:System.Web.UI.WebControls.WebParts.WebPart> connection リレーションシップでコンシューマーとしての動作を制御します。  
  
   
  
## 例  
 プログラムによる使用を次のコード例に示します、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> プロパティです。  
  
 このコード例には、4 つの部分があります。  
  
-   Web パーツを変更することができますユーザー コントロールは、ページのモードを表示します。  
  
-   インターフェイスと 2 つのコードをソース <xref:System.Web.UI.WebControls.WebParts.WebPart> プロバイダーと接続のコンシューマーとしての動作を制御します。  
  
-   すべてのコントロールをホストし、コード例を実行する Web ページ。  
  
-   ページの例を実行する方法の説明です。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるユーザー コントロールです。 割り当てられているファイル名を付けます .ascx ファイルに次のソース コードを保存、 `Src` の属性、 `Register` ホストする Web ページの上部にあるディレクティブは、このユーザー コントロールをします。 詳細については、このコントロールのモードとソース コードの説明を表示、参照してください [Walkthrough: Changing Display Modes on a Web Parts Page](http://msdn.microsoft.com/ja-jp/24e42f74-82dc-4c13-8574-130398985fc0)します。  
  
 [!code-csharp[WebParts\_WebPartConnection\_Consumer\#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/displaymodemenucs.ascx#6)]
 [!code-vb[WebParts\_WebPartConnection\_Consumer\#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/DisplayModeMenuVB.ascx#6)]  
  
 コード例の 2 つ目は、2 つのソース コード <xref:System.Web.UI.WebControls.WebParts.WebPart> と、接続と接続ポイントに使用されるインターフェイスのプロバイダーのコンシューマーとして機能するコントロール。 このコード例を実行するには、このソース コードをコンパイルする必要があります。 明示的にコンパイルし、Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに、生成されたアセンブリを配置できます。 また、ここで、動的にコンパイル実行時に、サイトの App\_Code フォルダーにソース コードを配置することができます。 このコード例では、動的なコンパイルを使用します。 コンパイルする方法について説明するチュートリアルは、次を参照してください。 [Walkthrough: Developing and Using a Custom Server Control](http://msdn.microsoft.com/ja-jp/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。  
  
 [!code-csharp[WebParts\_WebPartConnection\_Consumer\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts\_WebPartConnection\_Consumer\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/ZipCodeComponent.vb#2)]  
  
 コード例の 3 番目の部分は、コントロールをホストし、の使い方を説明する Web ページのコード、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> プロパティです。 ページの上部には、 `Register` ユーザー コントロールとカスタム コントロールのディレクティブです。 この例は、動的なコンパイルを使用しているため、 `Register` ソース ファイルのディレクティブはアセンブリ名を参照する必要はありません。 これは、任意のタグ プリフィックスだけと、コントロールの名前空間が含まれます。`Button2_Click` メソッド、コードにアクセスする、接続オブジェクトを通じて、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> を制御して、コンシューマー コントロールへの参照を取得します。  
  
 [!code-csharp[WebParts\_WebPartConnection\_Consumer\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-vb[WebParts\_WebPartConnection\_Consumer\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 ブラウザーでページを読み込むを使用して、 **表示モード** ドロップダウン リスト コントロール接続モードをページに切り替えます。 いずれかの動詞メニュー \(タイトル バーの下向きの矢印で表される\) をクリックして、 <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロール、および connect 動詞をクリックします。 使用して、 **web パーツ コントロールの接続** ボタン、または指定された接続のユーザー インターフェイス \(UI\) は、2 つのコントロール間の接続を作成します。 クリックして、 **コンシューマーの情報を表示** を示すコードを実行するボタン、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">長さ、 <see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" /> プロパティが 0 です。</exception>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>接続でコンシューマーとして機能しているコントロールの接続ポイントとして機能するオブジェクトを取得します。</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" /> 接続でコンシューマー コントロールに関連付けられています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 2 つの接続を作成するために必要な手順のいずれかの <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールは、各コントロールのコネクション ポイントを作成します。 コンシューマー接続ポイントは、コンシューマーとして機能するコントロールに接続する方法に関する情報を含むオブジェクトです。 いずれかのコンシューマーのソース コード内で識別する必要があります、 `ConnectionConsumer` 属性です。<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> コンシューマー コントロールに関連付けられているオブジェクトには、メソッドおよびユーザー インターフェイス \(UI\) で使用する表示名、メソッドの ID を含む属性の詳細が含まれ、メソッド インターフェイスの種類を取得できます。 この、コンシューマーに関する情報を接続、および認識しているインターフェイスの種類を構成するためには、そのメソッドのセットは、総称してコンシューマー接続ポイントを構成します。  
  
 既定では、 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> オブジェクトが 1 つだけに接続できる <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 一度にオブジェクトです。 コンシューマーが使用可能なコンシューマー接続ポイントとして識別される複数の方法を持つ可能性がありますが、\(そのため、そのコンシューマー接続ポイントの 1 つは、アクティブにすることができます\) のみ、コンシューマーは、コンシューマーとしての 1 つの接続に参加のみできる一度にします。 これに対し、 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> の任意の数に接続できる <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> オブジェクトです。 この既定の動作をオーバーライドすることで変更することができます、 <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A> プロパティを <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> 属性です。  
  
   
  
## 例  
 プログラムによる使用を次のコード例に示します、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> プロパティです。  
  
 この例では、4 つの部分があります。  
  
-   Web パーツを変更することができますユーザー コントロールは、ページのモードを表示します。  
  
-   インターフェイスと 2 つのコードをソース <xref:System.Web.UI.WebControls.WebParts.WebPart> プロバイダーと接続のコンシューマーとしての動作を制御します。  
  
-   すべてのコントロールをホストし、コード例を実行する Web ページ。  
  
-   ページの例を実行する方法の説明です。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるユーザー コントロールです。 割り当てられているファイル名を付けます .ascx ファイルに次のソース コードを保存、 `Src` の属性、 `Register` ホストする Web ページの上部にあるディレクティブは、このユーザー コントロールをします。 詳細については、このコントロールのモードとソース コードの説明を表示、参照してください [Walkthrough: Changing Display Modes on a Web Parts Page](http://msdn.microsoft.com/ja-jp/24e42f74-82dc-4c13-8574-130398985fc0)します。  
  
 [!code-csharp[WebParts\_WebPartConnection\_ConsumerConnectionPoint\#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-vb[WebParts\_WebPartConnection\_ConsumerConnectionPoint\#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 コード例の 2 つ目は、2 つのソース コード <xref:System.Web.UI.WebControls.WebParts.WebPart> と、接続と接続ポイントに使用されるインターフェイスのプロバイダーのコンシューマーとして機能するコントロール。 このコード例を実行するには、このソース コードをコンパイルする必要があります。 明示的にコンパイルし、Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに、生成されたアセンブリを配置できます。 また、ここで、動的にコンパイル実行時に、サイトの App\_Code フォルダーにソース コードを配置することができます。 このコード例では、動的なコンパイルを使用します。 コンパイルする方法について説明するチュートリアルは、次を参照してください。 [Walkthrough: Developing and Using a Custom Server Control](http://msdn.microsoft.com/ja-jp/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。  
  
 [!code-csharp[WebParts\_WebPartConnection\_ConsumerConnectionPoint\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts\_WebPartConnection\_ConsumerConnectionPoint\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 コード例の 3 番目の部分は、コントロールをホストし、の使い方を説明する Web ページのコード、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> プロパティです。`Button1_Click` メソッド、接続の形成に必要なすべてのオブジェクトが作成を含む、 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> オブジェクトです。 これらのオブジェクトがすべてに渡される、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> 接続を作成する方法です。`Button2_Click` メソッド、コードにアクセスする、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> の接続についていくつかのポイント プロパティを表示します。  
  
 [!code-csharp[WebParts\_WebPartConnection\_ConsumerConnectionPoint\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-vb[WebParts\_WebPartConnection\_ConsumerConnectionPoint\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 ブラウザーでページを読み込むを使用して、 **表示モード** ドロップダウン リスト コントロール接続モードをページに切り替えます。 いずれかの動詞メニュー \(タイトル バーの下向きの矢印で表される\) をクリックして、 <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロール、および connect 動詞をクリックします。 使用して、 **web パーツ コントロールの接続** ボタン、または指定された接続の UI は、2 つのコントロール間の接続を作成します。 クリックして、 **ConnectionPoint 詳細** ボタンで示すコードを実行する、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPointID">
      <MemberSignature Language="C#" Value="public string ConsumerConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("default")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または接続のコンシューマー接続ポイントとして提供しているオブジェクトの ID を参照する接続のプロパティ値を設定します。</summary>
        <value>コンシューマーの接続の ID を表す文字列をポイントします。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 どのコンシューマー接続ポイントは、値を割り当てることによって接続に使用されます Web ページのマークアップで宣言された静的な接続の開発者が指定できる、 `ConsumerConnectionPointID` 属性を `<asp:webpartconnection>` 要素。 値は、属性に割り当てられていない場合、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> プロパティの値を使用します。  
  
 動的 \(プログラム\) 接続を作成するときに通常を設定しないでくださいの値、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> プロパティです。 呼び出すだけで、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> メソッドを <xref:System.Web.UI.WebControls.WebParts.WebPartManager> 、制御を渡す、コンシューマーとコンシューマー接続ポイント \(およびその他の必須パラメーターは\)、オブジェクトとそのメソッドは、コンシューマー接続ポイントとして使用する正しい ID を決定します。 同様に、切断するを呼び出すことができます、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> メソッドを指定せず、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> プロパティの値。  
  
> [!NOTE]
>  入力した場合は、コンシューマーのコネクション ポイントの ID を特定できる、 <xref:System.Web.UI.WebControls.WebParts.WebPart> またはコンシューマーとしての他のサーバー コントロール。 コンシューマーがプロバイダー コントロール、またはトランスフォーマーで提供されたインターフェイスのインスタンスを取得するメソッドを指定する必要があります。 メソッドを識別するために使用してマーク、 `ConnectionConsumer` コード属性です。 この属性を追加する場合は、コンシューマーの ID として機能する省略可能な文字列値パラメーターを追加することができます <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> オブジェクトです。 省略可能な ID パラメーターの値を指定すると、その値がの値、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> 接続のプロパティです。 ID の値を指定しない場合、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> プロパティの値を使用します。  
  
   
  
## 例  
 次のコード例は、宣言型およびプログラムで使用するを示しています、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> プロパティです。  
  
 この例では、4 つの部分があります。  
  
-   Web パーツを変更することができますユーザー コントロールは、ページのモードを表示します。  
  
-   インターフェイスと 2 つのコードをソース <xref:System.Web.UI.WebControls.WebParts.WebPart> プロバイダーと接続のコンシューマーとしての動作を制御します。  
  
-   すべてのコントロールをホストし、コード例を実行する Web ページ。  
  
-   ページの例を実行する方法の説明です。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるユーザー コントロールです。 割り当てられているファイル名を付けます .ascx ファイルに次のソース コードを保存、 `Src` の属性、 `Register` ホストする Web ページの上部にあるディレクティブは、このユーザー コントロールをします。 詳細については、このコントロールのモードとソース コードの説明を表示、参照してください [Walkthrough: Changing Display Modes on a Web Parts Page](http://msdn.microsoft.com/ja-jp/24e42f74-82dc-4c13-8574-130398985fc0)します。  
  
 [!code-csharp[WebParts\_WebPartConnection\_ConsumerConnectionPointID\#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-vb[WebParts\_WebPartConnection\_ConsumerConnectionPointID\#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 コード例の 2 番目の部分では、インターフェイス、およびコンシューマーとプロバイダーのコントロールのソース コードを示します。 このコード例を実行するには、このソース コードをコンパイルする必要があります。 明示的にコンパイルし、Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに、生成されたアセンブリを配置できます。 また、ここで、動的にコンパイル実行時に、サイトの App\_Code フォルダーにソース コードを配置することができます。 このコード例では、動的なコンパイルを使用します。 コンパイルする方法について説明するチュートリアルは、次を参照してください。 [Walkthrough: Developing and Using a Custom Server Control](http://msdn.microsoft.com/ja-jp/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。  
  
 [!code-csharp[WebParts\_WebPartConnection\_ConsumerConnectionPointID\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts\_WebPartConnection\_ConsumerConnectionPointID\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 コード例の 3 番目の部分は、Web ページです。 接続が、ページのマークアップで宣言されていることに注意してください。 を使用して、 `<StaticConnections>` と `<asp:WebPartsConnection>` 要素。 結合の宣言が含まれていますが、必要な `ConsumerConnectionPointID` 属性です。 接続を作成するための 2 番目のメソッドが表示される、 `Button1_Click` メソッドのコードがコンシューマー コントロールで定義されている接続ポイントを使用して、新しい接続を作成します。 次に、 `Button2_Click` メソッド、コードにアクセスする、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> プロパティです。  
  
 [!code-csharp[WebParts\_WebPartConnection\_ConsumerConnectionPointID\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-vb[WebParts\_WebPartConnection\_ConsumerConnectionPointID\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 ブラウザーでページを読み込んだ後、ページで宣言された静的な接続のための接続は既にが存在します。 プロバイダー コントロールにテキストを入力し、接続のため、コンシューマーで表示されることに注意してください。 次に、コントロールを切断します。 使用して、 **表示モード** ドロップダウン リスト コントロール、ページを接続モードを切り替えます。 いずれかの動詞メニュー \(タイトル バーの下向きの矢印で表される\) をクリックして、 <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロール、および connect 動詞をクリックします。 クリックして、 **切断** \] ボタンをクリックします。 使用して、 **web パーツ コントロールの接続** を 2 つのコントロール間の接続を再作成する\] ボタンをクリックします。 をクリックして、 **ConnectionPoint 詳細** にアクセスするコードを実行するボタン、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> プロパティの値。 値は、コントロールの下のラベルに書き出されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
      </Docs>
    </Member>
    <Member MemberName="ConsumerID">
      <MemberSignature Language="C#" Value="public string ConsumerID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはの ID を参照する接続のプロパティの値を設定、 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> その接続のコンシューマーとしての動作を制御します。</summary>
        <value>接続でコンシューマーとして機能するコントロールの ID を表す文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> 間の接続を作成するときに、プロパティの値が必要な <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールです。 プロパティの値が割り当てられていない場合、例外がスロー、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> コントロールは、接続をアクティブ化しようとしています。  
  
   
  
## 例  
 次のコード例は、宣言型およびプログラムで使用するを示しています、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> プロパティです。  
  
 この例では、4 つの部分があります。  
  
-   Web パーツを変更することができますユーザー コントロールは、ページのモードを表示します。  
  
-   インターフェイスと 2 つのコードをソース <xref:System.Web.UI.WebControls.WebParts.WebPart> プロバイダーと接続のコンシューマーとしての動作を制御します。  
  
-   すべてのコントロールをホストし、コード例を実行する Web ページ。  
  
-   ページの例を実行する方法の説明です。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるユーザー コントロールです。 割り当てられているファイル名を付けます .ascx ファイルに次のソース コードを保存、 `Src` の属性、 `Register` ホストする Web ページの上部にあるディレクティブは、このユーザー コントロールをします。 詳細については、このコントロールのモードとソース コードの説明を表示、参照してください [Walkthrough: Changing Display Modes on a Web Parts Page](http://msdn.microsoft.com/ja-jp/24e42f74-82dc-4c13-8574-130398985fc0)します。  
  
 [!code-csharp[WebParts\_WebPartConnection\_ConsumerID\#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/displaymodemenucs.ascx#6)]
 [!code-vb[WebParts\_WebPartConnection\_ConsumerID\#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/DisplayModeMenuVB.ascx#6)]  
  
 コード例の 2 番目の部分では、インターフェイス、およびコンシューマーとプロバイダーのコントロールのソース コードを示します。 このコード例を実行するには、このソース コードをコンパイルする必要があります。 明示的にコンパイルし、Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに、生成されたアセンブリを配置できます。 また、ここで、動的にコンパイル実行時に、サイトの App\_Code フォルダーにソース コードを配置することができます。 このコード例では、動的なコンパイルを使用します。 コンパイルする方法について説明するチュートリアルは、次を参照してください。 [Walkthrough: Developing and Using a Custom Server Control](http://msdn.microsoft.com/ja-jp/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。  
  
 [!code-csharp[WebParts\_WebPartConnection\_ConsumerID\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts\_WebPartConnection\_ConsumerID\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/ZipCodeComponent.vb#2)]  
  
 コード例の 3 番目の部分は、Web ページです。 接続が、ページのマークアップで宣言されていることに注意してください。 を使用して、 `<StaticConnections>` と `<asp:WebPartsConnection>` 要素。 結合の宣言が含まれていますが、必要な `ConsumerID` 属性です。 接続を作成するための 2 番目のメソッドが表示される、 `Button1_Click` メソッドのコードがコンシューマー コントロールで定義されている接続ポイントを使用して、新しい接続を作成します。 次に、 `Button2_Click` メソッドの値にアクセスするコード、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> プロパティし、ラベルに表示します。  
  
 [!code-csharp[WebParts\_WebPartConnection\_ConsumerID\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-vb[WebParts\_WebPartConnection\_ConsumerID\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 ブラウザーでページを読み込んだ後、ページで宣言された静的な接続のための接続は既にが存在します。 プロバイダー コントロールにテキストを入力し、接続のため、コンシューマーで表示されることに注意してください。 次に、コントロールを切断します。 使用して、 **表示モード** ドロップダウン リスト コントロール、ページを接続モードを切り替えます。 いずれかの動詞メニュー \(タイトル バーの下向きの矢印で表される\) をクリックして、 <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロール、および connect 動詞をクリックします。 クリックして、 **切断** \] ボタンをクリックします。 使用して、 **web パーツ コントロールの接続** を 2 つのコントロール間の接続を再作成する\] ボタンをクリックします。 をクリックして、 **コンシューマー詳細** にアクセスするコードを実行するボタン、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> プロパティの値。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public string ID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定の ID、 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> オブジェクトです。</summary>
        <value>ID を表す文字列、 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 各 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> オブジェクトに割り当てられている一意の値には、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> プロパティです。 これは、複数の接続を区別する方法があることを確認します。  
  
 宣言することで静的な接続を作成する場合、 `<asp:webpartconnection>` Web ページにある要素の値を割り当てないでください、 `ID` 属性への接続で例外がスローされるときに、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> コントロールは、接続をアクティブ化しようとしています。  
  
 ときに、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> コントロールが新しい動的な接続を作成し、呼び出し、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A> 接続の一意の ID を生成します。  
  
   
  
## 例  
 次のコード例は、宣言型およびプログラムで使用するを示しています、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> プロパティです。  
  
 この例では、4 つの部分があります。  
  
-   Web パーツを変更することができますユーザー コントロールは、ページのモードを表示します。  
  
-   インターフェイスと 2 つのコードをソース <xref:System.Web.UI.WebControls.WebParts.WebPart> プロバイダーと接続のコンシューマーとしての動作を制御します。  
  
-   すべてのコントロールをホストし、コード例を実行する Web ページ。  
  
-   ページの例を実行する方法の説明です。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるユーザー コントロールです。 割り当てられているファイル名を付けます .ascx ファイルに次のソース コードを保存、 `Src` の属性、 `Register` ホストする Web ページの上部にあるディレクティブは、このユーザー コントロールをします。 詳細については、このコントロールのモードとソース コードの説明を表示、参照してください [Walkthrough: Changing Display Modes on a Web Parts Page](http://msdn.microsoft.com/ja-jp/24e42f74-82dc-4c13-8574-130398985fc0)します。  
  
 [!code-csharp[WebParts\_WebPartConnection\_ID\#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/displaymodemenucs.ascx#6)]
 [!code-vb[WebParts\_WebPartConnection\_ID\#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/DisplayModeMenuVB.ascx#6)]  
  
 コード例の 2 番目の部分では、インターフェイス、およびコンシューマーとプロバイダーのコントロールのソース コードを示します。 このコード例を実行するには、このソース コードをコンパイルする必要があります。 明示的にコンパイルし、Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに、生成されたアセンブリを配置できます。 また、ここで、動的にコンパイル実行時に、サイトの App\_Code フォルダーにソース コードを配置することができます。 このコード例では、動的なコンパイルを使用します。 コンパイルする方法について説明するチュートリアルは、次を参照してください。 [Walkthrough: Developing and Using a Custom Server Control](http://msdn.microsoft.com/ja-jp/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。  
  
 [!code-csharp[WebParts\_WebPartConnection\_ID\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts\_WebPartConnection\_ID\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/ZipCodeComponent.vb#2)]  
  
 コード例の 3 番目の部分は、Web ページです。 接続が、ページのマークアップで宣言されていることに注意してください。 を使用して、 `<StaticConnections>` と `<asp:WebPartsConnection>` 要素。 結合の宣言が含まれていますが、必要な `ID` 属性です。 接続を作成するための 2 番目のメソッドが表示される、 `Button1_Click` メソッドのコードがコンシューマー コントロールで定義されている接続ポイントを使用して、新しい接続を作成します。 ここでは、ID プロパティは必要ありません、接続が動的であるため、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> コントロールは、接続に ID を割り当てます。`Button2_Click` メソッドの値にアクセスするコード、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> プロパティし、ラベルに表示します。  
  
 [!code-csharp[WebParts\_WebPartConnection\_ID\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-vb[WebParts\_WebPartConnection\_ID\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 ブラウザーでページを読み込んだ後、ページで宣言された静的な接続のための接続は既にが存在します。 プロバイダー コントロールにテキストを入力し、接続のため、コンシューマーで表示されることに注意してください。 次に、コントロールを切断します。 使用して、 **表示モード** ドロップダウン リスト コントロール、ページを接続モードを切り替えます。 いずれかの動詞メニュー \(タイトル バーの下向きの矢印で表される\) をクリックして、 <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロール、および connect 動詞をクリックします。 クリックして、 **切断** \] ボタンをクリックします。 使用して、 **web パーツ コントロールの接続** を 2 つのコントロール間の接続を再作成する\] ボタンをクリックします。 クリックして、 **接続の詳細** にアクセスするコードを実行するボタン、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> プロパティの値。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsActive">
      <MemberSignature Language="C#" Value="public bool IsActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsActive" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうか、 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> オブジェクトは、現在のプロバイダーとコンシューマー コントロールの間で確立されているとすることの exchange データ。</summary>
        <value>
          <see langword="true" /> 接続がアクティブである場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> プロパティの状態を示します、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> オブジェクトです。 接続のプロバイダーとコンシューマーのコントロールが通信していると、共通のインターフェイスを介してデータを交換することは、接続がこの状態になった場合、または <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> オブジェクトです。  
  
 ユーザーが通常のブラウズ モードで確立された接続を含む、表示されたページを表示 \(ない場合に、ページが読み込まれるときに、いくつかの競合またはその他の問題によりアクティブ化に失敗しました\)、接続には通常アクティブです。 プロパティの値は、ページとコントロールのライフ サイクルの初期の段階で `false`します。 接続が直後にアクティブ化、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> でイベントを <xref:System.Web.UI.WebControls.WebParts.WebPartManager> コントロールが発生します。 プロバイダーからコンシューマーに指定されたインターフェイスのインスタンスが取得された後に、接続がアクティブに具体的には、または <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> オブジェクトです。  
  
 かどうか接続がアクティブな場合に知っておくと役立ちますが、競合またはページ上の複数の接続による同期の問題があります。 たとえば、ある種の 2 つの接続間の競合がある場合、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> コントロールに、競合を避けるためのライセンス認証を行わない、接続の 1 つのオプションがあります。  
  
   
  
## 例  
 次のコード例では使用、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> プロパティです。  
  
 この例では、3 つの部分があります。  
  
-   インターフェイスと 2 つのコードをソース <xref:System.Web.UI.WebControls.WebParts.WebPart> プロバイダーと接続のコンシューマーとしての動作を制御します。  
  
-   すべてのコントロールをホストし、コード例を実行する Web ページ。  
  
-   ページの例を実行する方法の説明です。  
  
 このコード例の最初の部分では、インターフェイス、およびコンシューマーとプロバイダーのコントロールのソース コードを示します。 このコード例を実行するには、このソース コードをコンパイルする必要があります。 明示的にコンパイルし、Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに、生成されたアセンブリを配置できます。 また、ここで、動的にコンパイル実行時に、サイトの App\_Code フォルダーにソース コードを配置することができます。 このコード例では、動的なコンパイルを使用します。 コンパイルする方法について説明するチュートリアルは、次を参照してください。 [Walkthrough: Developing and Using a Custom Server Control](http://msdn.microsoft.com/ja-jp/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。  
  
 [!code-csharp[WebParts\_WebPartConnection\_IsActive\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts\_WebPartConnection\_IsActive\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/ZipCodeComponent.vb#2)]  
  
 コード例の 2 番目の部分は、Web ページです。 上の方が、 `Register` 動的にコンパイルされる 2 つのソース コードを参照するディレクティブ <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールです。 静的な接続が内で宣言された、 `<StaticConnections>` ページ上の要素。 内で、 `<script>` 要素は次の 4 つのイベント ハンドラーです。 各イベント ハンドラーの値を調べて、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> 静的な接続のプロパティにメッセージが書き込ま、 <xref:System.Web.UI.WebControls.Label> ページおよびコントロールのライフ サイクルの状態が、アクティブまたは非アクティブに接続するかどうかを示すコントロールです。 残っているアクティブな後、ページが表示され、これは、どの時点で、接続がアクティブになりを示します。  
  
 [!code-csharp[WebParts\_WebPartConnection\_IsActive\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/wpConnectIsActiveCS.aspx#1)]
 [!code-vb[WebParts\_WebPartConnection\_IsActive\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/wpConnectIsActiveVB.aspx#1)]  
  
 ブラウザーでページを読み込みます。 静的な接続の作成し、メッセージは、接続がページとコントロールのライフ サイクルのさまざまな時点でアクティブだったかどうかを示すラベルに既に書き込まれています。 クリックして、 **接続の詳細** ボタンをクリックし、接続がないアクティブである時点が、接続が後に毎回の再アクティブ化したことに注意してください、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> イベント、および、アクティブなままです \(およびは必ず保持されます\) 後、 <xref:System.Web.UI.Control.PreRender> ページのイベントです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsStatic" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating" />
      </Docs>
    </Member>
    <Member MemberName="IsShared">
      <MemberSignature Language="C#" Value="public bool IsShared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsShared" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうか、 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> オブジェクトがすべてのユーザーに、または現在のユーザーにのみ表示されます。</summary>
        <value>
          <see langword="true" /> 接続が共有されている場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 個人と同様に <xref:System.Web.UI.WebControls.WebParts.WebPart> 、コントロール、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> オブジェクトは、共有、またはユーザーごとのインスタンスを指定できます。 共有インスタンスは、接続が、Web ページのすべてのユーザーに表示され、ユーザーごとのインスタンスでは、接続が特定のユーザーにのみ表示されることを意味することを意味します。  
  
 一般に、ページへの接続の追加方法は、接続を共有するかどうかを決定します。 接続が、Web ページのマークアップで宣言されているかどうかは、接続を共有し、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> プロパティの値が `true`です。 さらに、Web ページが共有パーソナル化スコープの場合、接続が追加されたときに、接続も共有されます。 通常、ユーザーを使用する場合、 `<asp:connectionszone>` 接続が共有されていないため、ページの接続を追加するユーザー インターフェイス \(UI\) がユーザーのパーソナル化スコープでは、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> プロパティの値が `false`です。  
  
   
  
## 例  
 次のコード例に示しますのプログラムでの使用、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> プロパティです。  
  
 このコード例には、5 つの部分があります。  
  
-   Web パーツを変更することができますユーザー コントロールは、ページのモードを表示します。  
  
-   インターフェイスと 2 つのコードをソース <xref:System.Web.UI.WebControls.WebParts.WebPart> プロバイダーと接続のコンシューマーとしての動作を制御します。  
  
-   すべてのコントロールをホストし、コード例を実行する Web ページ。  
  
-   例を実行するために必要な Web.config ファイルのエントリ。  
  
-   ページの例を実行する方法の説明です。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるユーザー コントロールです。 割り当てられているファイル名を付けます .ascx ファイルに次のソース コードを保存、 `Src` の属性、 `Register` ホストする Web ページの上部にあるディレクティブは、このユーザー コントロールをします。 詳細については、このコントロールのモードとソース コードの説明を表示、参照してください [Walkthrough: Changing Display Modes on a Web Parts Page](http://msdn.microsoft.com/ja-jp/24e42f74-82dc-4c13-8574-130398985fc0)します。  
  
 [!code-csharp[WebParts\_WebPartConnection\_IsShared\#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/displaymodemenucs.ascx#6)]
 [!code-vb[WebParts\_WebPartConnection\_IsShared\#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/DisplayModeMenuVB.ascx#6)]  
  
 コード例の 2 番目の部分では、インターフェイス、およびコンシューマーとプロバイダーのコントロールのソース コードを示します。 このコード例を実行するには、このソース コードをコンパイルする必要があります。 明示的にコンパイルし、Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに、生成されたアセンブリを配置できます。 また、ここで、動的にコンパイル実行時に、サイトの App\_Code フォルダーにソース コードを配置することができます。 このコード例では、動的なコンパイルを使用します。 コンパイルする方法について説明するチュートリアルは、次を参照してください。 [Walkthrough: Developing and Using a Custom Server Control](http://msdn.microsoft.com/ja-jp/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。  
  
 [!code-csharp[WebParts\_WebPartConnection\_IsShared\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts\_WebPartConnection\_IsShared\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/ZipCodeComponent.vb#2)]  
  
 コード例の 3 番目の部分は、Web ページです。`Button2_Click` チェック、メソッド、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> 、既存の接続のプロパティ\] ページで結果を表示します。  
  
 [!code-csharp[WebParts\_WebPartConnection\_IsShared\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-vb[WebParts\_WebPartConnection\_IsShared\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 コード例の 4 番目の部分は、共有のパーソナル化スコープでページを編集できる例を実行するユーザー アカウントに必要な Web.config ファイル内のエントリです。 これを有効にする内の Web.config ファイル内のエントリがある必要があります、 `<system.web>` 次の例のようなセクションです。  
  
```  
<webParts>  
  <personalization>  
    <authorization>  
      <allow users="UserAccount"  
             roles="admin"  
             verbs="enterSharedScope"/>  
    </authorization>            
  </personalization>  
</webParts>  
```  
  
 ブラウザーでページを読み込むを使用して、 **表示モード** ドロップダウン リスト コントロールの表示モードを接続するページに切り替えます。 クリックして、 **web パーツ コントロールの接続** の接続を構成する\] ボタンをクリックします。 次に、クリックして、 **接続の詳細** 、接続を共有するかどうかを表示するボタンをクリックします。 既定のユーザーのパーソナル化スコープ内のページで、接続を作成する場合、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> プロパティ値にする必要があります `false` 接続します。  
  
 いずれかの動詞メニューを開き、 <xref:System.Web.UI.WebControls.WebParts.WebPart> \(タイトル バーの下向きの矢印で示されます\)、コントロールは、connect 動詞をクリックします。 接続の UI が表示されたら、クリックして、 **切断** 接続を終了します\] ボタンをクリックします。 使用して、 **表示モード** ページをブラウズ モードを返すときにします。  
  
 **表示モード** コントロール、 **Shared** にページを切り替えることは、パーソナル化スコープを共有します。 接続を作成し、もう一度クリックして上記と同じ手順に従います、 **接続の詳細** 、接続を共有するかどうかを表示するボタンをクリックします。 ここでの値、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> プロパティ `true`します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsShared" />
      </Docs>
    </Member>
    <Member MemberName="IsStatic">
      <MemberSignature Language="C#" Value="public bool IsStatic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStatic" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうか、 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> オブジェクトが、Web ページのマークアップで宣言またはプログラムで作成します。</summary>
        <value>
          <see langword="true" /> 場合は、接続が静的です。それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Web パーツ コントロール間の接続は、静的または動的のどちらかにできます。 静的な接続は、Web ページのマークアップで宣言を使用して、 `<asp:WebPartConnection>` 要素。 動的接続がプログラムで作成されるか、ユーザーがによって定義されたユーザー インターフェイス \(UI\) を経由して接続を作成すると、 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> コントロールです。  
  
 静的な接続は、共有オブジェクトであるため、Web ページのすべてのユーザーに利用します。 また、これらは本質的には永続的なためなどの静的な <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールが完全に削除します。  
  
> [!NOTE]
>  静的な接続オブジェクトは完全に削除中に、完全に切断できます。 この場合、サーバーで、切断されているオブジェクトは存在しますが、エンド ユーザーはページ内のオブジェクトの存在を認識できないようにします。  
  
   
  
## 例  
 プログラムによる使用を次のコード例に示します、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> プロパティです。  
  
 このコード例には、3 つの部分があります。  
  
-   インターフェイスと 2 つのコードをソース <xref:System.Web.UI.WebControls.WebParts.WebPart> プロバイダーと接続のコンシューマーとしての動作を制御します。  
  
-   コントロールをホストして、コード例を実行する Web ページ。  
  
-   ページの例を実行する方法の説明です。  
  
 このコード例の最初の部分では、インターフェイス、およびコンシューマーとプロバイダーのコントロールのソース コードを示します。 このコード例を実行するには、このソース コードをコンパイルする必要があります。 明示的にコンパイルし、Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに、生成されたアセンブリを配置できます。 また、ここで、動的にコンパイル実行時に、サイトの App\_Code フォルダーにソース コードを配置することができます。 このコード例では、動的なコンパイルを使用します。 コンパイルする方法について説明するチュートリアルは、次を参照してください。 [Walkthrough: Developing and Using a Custom Server Control](http://msdn.microsoft.com/ja-jp/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。  
  
 [!code-csharp[WebParts\_WebPartConnection\_IsStatic\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts\_WebPartConnection\_IsStatic\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/ZipCodeComponent.vb#2)]  
  
 コード例の 2 番目の部分は、Web ページです。 上の方が、 `Register` 動的にコンパイルされる 2 つのソース コードを参照するディレクティブ <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールです。 静的な接続が内で宣言された、 `<StaticConnections>` ページ上の要素。`Button1_Click` メソッドへのアクセス、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> 接続が静的かどうかを確認するプロパティです。  
  
 [!code-csharp[WebParts\_WebPartConnection\_IsStatic\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/wpConnectIsStaticCS.aspx#1)]
 [!code-vb[WebParts\_WebPartConnection\_IsStatic\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/wpConnectIsStaticVB.aspx#1)]  
  
 ブラウザーでページを読み込みます。 静的な接続が既に作成されています。 プロバイダー コントロールにテキストを入力し、テキストがコンシューマー コントロールに表示されることに注意してください。 クリックして、 **接続の詳細** の値を表示するボタン、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections" />
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Provider" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> Web パーツの接続でプロバイダーとして機能するコントロール。</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> データのプロバイダーとして機能します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 すべての Web パーツ接続は、2 つの <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールというコンシューマーおよびプロバイダー\-\-と <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> プロパティは、接続でプロバイダー コントロールへの参照を返します。  
  
 接続 \(コンシューマー コントロール\) に対応するようにプロバイダー コントロールは、接続を確立するために必要です。 プログラム、またはページの保存形式で宣言することによって、接続を作成するかどうかは、接続のプロバイダーとして機能するコントロールを指定する必要があります。  
  
   
  
## 例  
 次のコード例では使用、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> プロパティです。  
  
 このコード例には、3 つの部分があります。  
  
-   インターフェイスと 2 つのコードをソース <xref:System.Web.UI.WebControls.WebParts.WebPart> プロバイダーと接続のコンシューマーとしての動作を制御します。  
  
-   コントロールをホストして、コード例を実行する Web ページ。  
  
-   ページの例を実行する方法の説明です。  
  
 このコード例の最初の部分では、インターフェイス、およびコンシューマーとプロバイダーのコントロールのソース コードを示します。 このコード例を実行するには、このソース コードをコンパイルする必要があります。 明示的にコンパイルし、Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに、生成されたアセンブリを配置できます。 また、ここで、動的にコンパイル実行時に、サイトの App\_Code フォルダーにソース コードを配置することができます。 このコード例では、動的なコンパイルを使用します。 コンパイルする方法について説明するチュートリアルは、次を参照してください。 [Walkthrough: Developing and Using a Custom Server Control](http://msdn.microsoft.com/ja-jp/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。  
  
 [!code-csharp[WebParts\_WebPartConnection\_Provider\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts\_WebPartConnection\_Provider\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/ZipCodeComponent.vb#2)]  
  
 コード例の 2 番目の部分は、Web ページです。 上の方が、 `Register` 動的にコンパイルされる 2 つのソース コードを参照するディレクティブ <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールです。 静的な接続が内で宣言された、 `<StaticConnections>` ページ上の要素。 ことに注意して、 `<asp:webpartconnection>` 要素、 `ProviderID` 属性に割り当てられたプロバイダー コントロールの ID。 これは、静的な接続のプロバイダーを識別するために必要です。`Button1_Click` メソッドへのアクセス、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> プロパティの詳細情報の一部がラベルに書き込みます。  
  
 [!code-csharp[WebParts\_WebPartConnection\_Provider\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/wpConnectProviderCS.aspx#1)]
 [!code-vb[WebParts\_WebPartConnection\_Provider\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/wpConnectProviderVB.aspx#1)]  
  
 ブラウザーでページを読み込みます。 静的な接続が既に作成されています。 プロバイダー コントロールにテキストを入力し、テキストがコンシューマー コントロールに表示されることに注意してください。 クリックして、 **プロバイダーの詳細** を使用してアクセスするプロパティ値の一部を表示するボタン、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">長さ、 <see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" /> プロパティの値は 0 です。</exception>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ProviderConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>接続ポイントとして機能するオブジェクトを取得、 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 接続のプロバイダーとしての動作を制御します。</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> 接続でプロバイダーのコントロールに関連付けられています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 2 つの接続を作成するために必要な手順のいずれかの <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールは、各コントロールのコネクション ポイントを作成します。 プロバイダー接続ポイントは、プロバイダーとして機能するコントロールに接続する方法に関する情報を含むオブジェクトです。 いずれかのプロバイダーのソース コード内で識別する必要があります、 `ConnectionProvider` 属性です。<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> が関連付けられているプロバイダーとコントロールには、メソッドおよびユーザー インターフェイス \(UI\) で使用する表示名、メソッドの ID を含む属性の詳細が含まれ、コンシューマー コントロールに戻ることがどのようなインターフェイスのインスタンス メソッドです。 このプロバイダーについては、接続、およびそれが提供するインターフェイスの型を形成するためのメソッドのセットは、プロバイダー接続ポイントを総称して構成します。  
  
 既定では、 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 1 つだけに接続できる <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 一度にオブジェクトです。 コンシューマーが使用可能なコンシューマー接続ポイントとして識別される複数の方法を持つ可能性がありますが、\(そのため、そのコンシューマー接続ポイントの 1 つは、アクティブにすることができます\) のみ、コンシューマーは、コンシューマーとしての 1 つの接続に参加のみできる一度にします。 これに対し、 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> の任意の数に接続できる <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 既定ではオブジェクトです。 たとえば、郵便番号コードを提供するプロバイダー コントロールは、さまざまな種類の気象データ、ニュースなどの郵便番号コードに基づいてデータを作成する郵便番号コードを使用して複数のコンシューマー コントロールに接続でした。 この既定の動作をオーバーライドすることで変更することができます、 <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A> プロパティを <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> 属性です。  
  
   
  
## 例  
 プログラムによる使用を次のコード例に示します、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> プロパティです。  
  
 この例では、4 つの部分があります。  
  
-   Web パーツを変更することができますユーザー コントロールは、ページのモードを表示します。  
  
-   インターフェイスと 2 つのコードをソース <xref:System.Web.UI.WebControls.WebParts.WebPart> プロバイダーと接続のコンシューマーとしての動作を制御します。  
  
-   すべてのコントロールをホストし、コード例を実行する Web ページ。  
  
-   ページの例を実行する方法の説明です。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるユーザー コントロールです。 割り当てられているファイル名を付けます .ascx ファイルに次のソース コードを保存、 `Src` の属性、 `Register` ホストする Web ページの上部にあるディレクティブは、このユーザー コントロールをします。 詳細については、このコントロールのモードとソース コードの説明を表示、参照してください [Walkthrough: Changing Display Modes on a Web Parts Page](http://msdn.microsoft.com/ja-jp/24e42f74-82dc-4c13-8574-130398985fc0)します。  
  
 [!code-csharp[WebParts\_WebPartConnection\_ProviderConnectionPoint\#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-vb[WebParts\_WebPartConnection\_ProviderConnectionPoint\#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 コード例の 2 つ目は、2 つのソース コード <xref:System.Web.UI.WebControls.WebParts.WebPart> と、接続と接続ポイントに使用されるインターフェイスのプロバイダーのコンシューマーとして機能するコントロール。 このコード例を実行するには、このソース コードをコンパイルする必要があります。 明示的にコンパイルし、Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに、生成されたアセンブリを配置できます。 また、ここで、動的にコンパイル実行時に、サイトの App\_Code フォルダーにソース コードを配置することができます。 このコード例では、動的なコンパイルを使用します。 コンパイルする方法について説明するチュートリアルは、次を参照してください。 [Walkthrough: Developing and Using a Custom Server Control](http://msdn.microsoft.com/ja-jp/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。  
  
 [!code-csharp[WebParts\_WebPartConnection\_ProviderConnectionPoint\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts\_WebPartConnection\_ProviderConnectionPoint\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 コード例の 3 番目の部分は、コントロールをホストし、の使い方を説明する Web ページのコード、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> プロパティです。`Button1_Click` メソッド、接続の形成に必要なすべてのオブジェクトが作成を含む、 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> オブジェクトです。 呼び出しに注意してください、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> メソッドを <xref:System.Web.UI.WebControls.WebParts.WebPartManager> コントロールです。 さまざまな作成されたオブジェクトがすべてに渡される、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> 接続を作成する方法です。`Button2_Click` メソッド、コードにアクセスする、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> の接続についていくつかのポイント プロパティを表示します。  
  
 [!code-csharp[WebParts\_WebPartConnection\_ProviderConnectionPoint\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-vb[WebParts\_WebPartConnection\_ProviderConnectionPoint\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 ブラウザーでページを読み込むを使用して、 **表示モード** ドロップダウン リスト コントロール接続モードをページに切り替えます。 いずれかの動詞メニュー \(タイトル バーの下向きの矢印で表される\) をクリックして、 <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロール、および connect 動詞をクリックします。 使用して、 **web パーツ コントロールの接続** ボタン、または指定された接続の UI は、2 つのコントロール間の接続を作成します。 クリックして、 **ConnectionPoint 詳細** ボタンで示すコードを実行する、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPointID">
      <MemberSignature Language="C#" Value="public string ProviderConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("default")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または接続のプロバイダー接続ポイントとして提供しているオブジェクトの ID を参照する接続のプロパティ値を設定します。</summary>
        <value>プロバイダー接続ポイントのオブジェクトの ID を表す文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 どのプロバイダー接続ポイントは、値を割り当てることによって接続に使用されます Web ページのマークアップで宣言された静的な接続の開発者が指定できる、 `ProviderConnectionPointID` 属性を `<asp:webpartconnection>` 要素。 値は、属性に割り当てられていない場合、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> プロパティの値を使用します。  
  
 動的 \(プログラム\) 接続を作成するときに通常を設定しないでくださいの値、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> プロパティです。 呼び出すだけで、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> メソッドを <xref:System.Web.UI.WebControls.WebParts.WebPartManager> 制御、プロバイダーおよびプロバイダー接続ポイント \(およびその他の必須パラメーターは\)、オブジェクトを渡すと、そのメソッドは、プロバイダーの接続ポイントとして使用する正しい ID を決定します。 同様に、切断するを呼び出すことができます、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> メソッドを指定せず、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> プロパティの値。  
  
> [!NOTE]
>  入力した場合は、プロバイダーのコネクション ポイントの ID を特定できる、 <xref:System.Web.UI.WebControls.WebParts.WebPart> またはプロバイダーとその他のサーバー コントロール。 コンシューマーにデータを含むインターフェイスのインスタンスを提供するプロバイダーのコールバック メソッドを指定する必要があります。 メソッドを識別するために使用してマーク、 `ConnectionProvider` コード属性です。 この属性を追加する場合は、プロバイダーの ID として機能する省略可能な文字列値パラメーターを追加することができます <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> オブジェクトです。 省略可能な ID パラメーターの値を指定すると、その値がの値、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> 接続のプロパティです。 ID の値を指定しない場合、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> コントロールは、オブジェクトの作成時に既定の ID を割り当てます。  
  
   
  
## 例  
 次のコード例は、宣言型およびプログラムで使用するを示しています、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> プロパティです。  
  
 この例では、4 つの部分があります。  
  
-   Web パーツを変更することができますユーザー コントロールは、ページのモードを表示します。  
  
-   インターフェイスと 2 つのコードをソース <xref:System.Web.UI.WebControls.WebParts.WebPart> プロバイダーと接続のコンシューマーとしての動作を制御します。  
  
-   すべてのコントロールをホストし、コード例を実行する Web ページ。  
  
-   ページの例を実行する方法の説明です。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるユーザー コントロールです。 割り当てられているファイル名を付けます .ascx ファイルに次のソース コードを保存、 `Src` の属性、 `Register` ホストする Web ページの上部にあるディレクティブは、このユーザー コントロールをします。 詳細については、このコントロールのモードとソース コードの説明を表示、参照してください [Walkthrough: Changing Display Modes on a Web Parts Page](http://msdn.microsoft.com/ja-jp/24e42f74-82dc-4c13-8574-130398985fc0)します。  
  
 [!code-csharp[WebParts\_WebPartConnection\_ProviderConnectionPointID\#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-vb[WebParts\_WebPartConnection\_ProviderConnectionPointID\#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 コード例の 2 番目の部分では、インターフェイス、およびコンシューマーとプロバイダーのコントロールのソース コードを示します。 このコード例を実行するには、このソース コードをコンパイルする必要があります。 明示的にコンパイルし、Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに、生成されたアセンブリを配置できます。 また、ここで、動的にコンパイル実行時に、サイトの App\_Code フォルダーにソース コードを配置することができます。 このコード例では、動的なコンパイルを使用します。 コンパイルする方法について説明するチュートリアルは、次を参照してください。 [Walkthrough: Developing and Using a Custom Server Control](http://msdn.microsoft.com/ja-jp/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。  
  
 [!code-csharp[WebParts\_WebPartConnection\_ProviderConnectionPointID\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts\_WebPartConnection\_ProviderConnectionPointID\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 コード例の 3 番目の部分は、Web ページです。 接続が、ページのマークアップで宣言されていることに注意してください。 を使用して、 `<StaticConnections>` と `<asp:WebPartsConnection>` 要素。 結合の宣言が含まれていますが、必要な `ProviderConnectionPointID` 属性です。 接続を作成するための 2 番目のメソッドが表示される、 `Button1_Click` メソッド、コードが新しい接続を作成、接続ポイント \(と ID\) で定義されているプロバイダー コントロールです。 次に、 `Button2_Click` メソッド、コードにアクセスする、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> プロパティです。  
  
 [!code-csharp[WebParts\_WebPartConnection\_ProviderConnectionPointID\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-vb[WebParts\_WebPartConnection\_ProviderConnectionPointID\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 ブラウザーでページを読み込んだ後、ページで宣言された静的な接続のための接続は既にが存在します。 プロバイダー コントロールにテキストを入力し、接続のため、コンシューマーで表示されることに注意してください。 次に、コントロールを切断します。 使用して、 **表示モード** ドロップダウン リスト コントロール、ページを接続モードを切り替えます。 いずれかの動詞メニュー \(タイトル バーの下向きの矢印で表される\) をクリックして、 <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロール、および connect 動詞をクリックします。 クリックして、 **切断** \] ボタンをクリックします。 使用して、 **web パーツ コントロールの接続** を 2 つのコントロール間の接続を再作成する\] ボタンをクリックします。 をクリックして、 **ConnectionPoint 詳細** にアクセスするコードを実行するボタン、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> プロパティの値。 値は、コントロールの下のラベルに書き出されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
      </Docs>
    </Member>
    <Member MemberName="ProviderID">
      <MemberSignature Language="C#" Value="public string ProviderID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはの ID を参照する接続のプロパティの値を設定、 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> にその接続プロバイダーとしての動作を制御します。</summary>
        <value>プロバイダーのコントロールの ID を表す文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> プロパティの値は、2 つの接続を作成するときに必要な <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールです。 プロパティの値が割り当てられていない場合、例外がスロー、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> コントロールは、接続をアクティブ化しようとしています。  
  
   
  
## 例  
 次のコード例は、宣言型およびプログラムで使用するを示しています、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> プロパティです。  
  
 この例では、4 つの部分があります。  
  
-   Web パーツを変更することができますユーザー コントロールは、ページのモードを表示します。  
  
-   インターフェイスと 2 つのコードをソース <xref:System.Web.UI.WebControls.WebParts.WebPart> プロバイダーと接続のコンシューマーとしての動作を制御します。  
  
-   すべてのコントロールをホストし、コード例を実行する Web ページ。  
  
-   ページの例を実行する方法の説明です。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるユーザー コントロールです。 割り当てられているファイル名を付けます .ascx ファイルに次のソース コードを保存、 `Src` の属性、 `Register` ホストする Web ページの上部にあるディレクティブは、このユーザー コントロールをします。 詳細については、このコントロールのモードとソース コードの説明を表示、参照してください [Walkthrough: Changing Display Modes on a Web Parts Page](http://msdn.microsoft.com/ja-jp/24e42f74-82dc-4c13-8574-130398985fc0)します。  
  
 [!code-csharp[WebParts\_WebPartConnection\_ProviderID\#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/displaymodemenucs.ascx#6)]
 [!code-vb[WebParts\_WebPartConnection\_ProviderID\#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/DisplayModeMenuVB.ascx#6)]  
  
 コード例の 2 番目の部分では、インターフェイス、およびコンシューマーとプロバイダーのコントロールのソース コードを示します。 このコード例を実行するには、このソース コードをコンパイルする必要があります。 明示的にコンパイルし、Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに、生成されたアセンブリを配置できます。 また、ここで、動的にコンパイル実行時に、サイトの App\_Code フォルダーにソース コードを配置することができます。 このコード例では、動的なコンパイルを使用します。 コンパイルする方法について説明するチュートリアルは、次を参照してください。 [Walkthrough: Developing and Using a Custom Server Control](http://msdn.microsoft.com/ja-jp/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。  
  
 [!code-csharp[WebParts\_WebPartConnection\_ProviderID\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts\_WebPartConnection\_ProviderID\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/ZipCodeComponent.vb#2)]  
  
 コード例の 3 番目の部分は、Web ページです。 接続が、ページのマークアップで宣言されていることに注意してください。 を使用して、 `<StaticConnections>` と `<asp:WebPartsConnection>` 要素。 結合の宣言が含まれていますが、必要な `ProviderID` 属性です。 接続を作成するための 2 番目のメソッドが表示される、 `Button1_Click` メソッドのコードがコンシューマー コントロールで定義されている接続ポイントを使用して、新しい接続を作成します。 次に、 `Button2_Click` メソッドの値にアクセスするコード、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> プロパティし、ラベルに表示します。  
  
 [!code-csharp[WebParts\_WebPartConnection\_ProviderID\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-vb[WebParts\_WebPartConnection\_ProviderID\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 ブラウザーでページを読み込んだ後、ページで宣言された静的な接続のための接続は既にが存在します。 プロバイダー コントロールにテキストを入力し、接続のため、コンシューマーで表示されることに注意してください。 次に、コントロールを切断します。 実行するには、使用、 **表示モード** ドロップダウン リスト コントロール接続モードをページに切り替えます。 いずれかの動詞メニュー \(タイトル バーの下向きの矢印で表される\) をクリックして、 <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロール、および connect 動詞をクリックします。 クリックして、 **切断** \] ボタン、およびコントロールを切断します。 次に、使用、 **web パーツ コントロールの接続** を 2 つのコントロール間の接続を再作成する\] ボタンをクリックします。 をクリックして、 **コンシューマー詳細** にアクセスするコードを実行するボタン、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> プロパティの値。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>継承されたオーバーライド <see cref="M:System.Object.ToString" /> メソッドとの接続オブジェクトの短い型名を返します。</summary>
        <returns>短い \(修飾されていない\) の型名を含む文字列、 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは利便性のほとんどの場合コントロール デザイナーによって使用されます。 デザイン ビューで完全修飾型名ではなく、短い型名を使用して、接続オブジェクトの表示が向上します。 ただし、メソッド、コードのどの時点でも、接続オブジェクトの型名を確認します。  
  
   
  
## 例  
 次のコード例では、呼び出し、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> の短い型名を取得するメソッド、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> オブジェクトです。  
  
 このコード例には、3 つの部分があります。  
  
-   インターフェイスと 2 つのコードをソース <xref:System.Web.UI.WebControls.WebParts.WebPart> プロバイダーと接続のコンシューマーとしての動作を制御します。  
  
-   コントロールをホストして、コード例を実行する Web ページ。  
  
-   ページの例を実行する方法の説明です。  
  
 このコード例の最初の部分では、インターフェイス、およびコンシューマーとプロバイダーのコントロールのソース コードを示します。 このコード例を実行するには、このソース コードをコンパイルする必要があります。 明示的にコンパイルし、Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに、生成されたアセンブリを配置できます。 また、ここで、動的にコンパイル実行時に、サイトの App\_Code フォルダーにソース コードを配置することができます。 このコード例では、動的なコンパイルを使用します。 コンパイルする方法について説明するチュートリアルは、次を参照してください。 [Walkthrough: Developing and Using a Custom Server Control](http://msdn.microsoft.com/ja-jp/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。  
  
 [!code-csharp[WebParts\_WebPartConnection\_ToString\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts\_WebPartConnection\_ToString\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/ZipCodeComponent.vb#2)]  
  
 コード例の 2 番目の部分は、Web ページです。 上の方が、 `Register` 動的にコンパイルされる 2 つのソース コードを参照するディレクティブ <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールです。 静的な接続が内で宣言された、 `<StaticConnections>` ページ上の要素。`Button1_Click` メソッドの呼び出し、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> ラベルに、接続の型名を書き込みます。  
  
 [!code-csharp[WebParts\_WebPartConnection\_ToString\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/wpConnectToStringCS.aspx#1)]
 [!code-vb[WebParts\_WebPartConnection\_ToString\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/wpConnectToStringVB.aspx#1)]  
  
 ブラウザーでページを読み込みます。 静的な接続が既に作成されています。 プロバイダー コントロールにテキストを入力し、テキストがコンシューマー コントロールに表示されることに注意してください。 クリックして、 **接続の詳細** を実行するボタン、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Transformer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> Web パーツの接続で 2 つのそれ以外の場合に互換性がないコネクション ポイント間でデータを変換するために使用します。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Web パーツの接続は、接続のプロバイダーとコンシューマーのコントロールの接続に使用できる 2 つの方法があります。 それぞれ経由で直接接続する <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> オブジェクトとインターフェイスの型はどちらのコントロールによって認識されます。 または、互換性がない場合、直接接続できるいないを使用して、 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> コンシューマーによって認識される型プロバイダーからインターフェイスのインスタンスに変換するオブジェクト。  
  
 トランスフォーマーが、接続の一部として必要なときに、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A> プロパティへの参照を提供する、 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> オブジェクトです。 カスタム トランスフォーマー \(または、Web パーツ コントロール セットに付属の変換機能の 1 つ\) のタグを追加することで、Web ページのマークアップで宣言によって接続のトランスフォーマーを追加するには内で、 `<asp:WebPartConnection>` 要素。 追加することも、変換プログラムを使用して、コードでは、オブジェクトのインスタンスを作成および呼び出し、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29> メソッドを <xref:System.Web.UI.WebControls.WebParts.WebPartManager> トランスフォーマー オブジェクトと共に、他の必要なパラメーターを渡す接続を作成するコントロール。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
      </Docs>
    </Member>
    <Member MemberName="Transformers">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerDefaultProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コレクションを取得 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> Web パーツ コントロール セットが内部的に使用するオブジェクト。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" /> オブジェクトを含んでいる <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A> プロパティは、決してで使用するための開発者です。 接続に関連付けられているトランスフォーマーをアクセスする開発者に使用する必要があります常に、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A> プロパティです。  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A> プロパティは設定ページ開発者はトランスフォーマー要素内で宣言できるように Web パーツ コントロールによって内部的に使用、 `<asp:webpartconnection>` Web ページのマークアップ内の要素。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      </Docs>
    </Member>
  </Members>
</Type>