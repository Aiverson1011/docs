<Type Name="ImportCatalogPart" FullName="System.Web.UI.WebControls.WebParts.ImportCatalogPart">
  <TypeSignature Language="C#" Value="public sealed class ImportCatalogPart : System.Web.UI.WebControls.WebParts.CatalogPart" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ImportCatalogPart extends System.Web.UI.WebControls.WebParts.CatalogPart" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ImportCatalogPart" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.CatalogPart</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>あらかじめ定義した設定でコントロールを Web ページに追加できるように、<see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> コントロール \(または <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> コントロールとして使用される他の ASP.NET サーバー コントロール\) の記述ファイルをインポートします。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> コントロールは、ユーザーの設定について説明する説明ファイルをインポート、 <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールまたはユーザーに追加するサーバー コントロール、 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> ゾーンです。  
  
 ユーザーが、記述ファイルをインポートした後、 <xref:System.Web.UI.WebControls.WebParts.WebPart> 内で、ファイルで参照されているコントロールを表示、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> コントロール、およびユーザーは、ページにコントロールを追加できます。  
  
 説明のファイルは、コントロール自体と同じではありません。 終了する XML ファイルでは、です。Web パーツの拡張機能が名前\/値ペア\-\-\- コントロールの状態を記述するプロパティ値ほとんど含まれています。 トピックの説明に従って、指定した XML 形式に従って記述ファイルが作成された [Web Parts Control Description Files](http://msdn.microsoft.com/ja-jp/480992e4-8fc7-43f8-bffc-ae97bbdfe5b8)します。  
  
 記述ファイルで参照されるコントロール、アセンブリにコンパイルすることができますか、または .ascx ファイルで定義されているユーザー コントロールであることができます。 いずれの場合、コントロールをインポートしようとするページをホストする Web サーバーでインポートした記述ファイルで参照されているコントロールがあります。 記述ファイルが、コントロールを含むコントロール名とアセンブリ \(またはファイル\) を参照し、記述ファイルには、コントロールのプロパティの値、外観、および動作に影響する設定が含まれています。  
  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> コントロールは、ユーザーがコントロールの設定を共有します。 複雑なコントロールは、多くのプロパティと設定ができます。 たとえば、大企業で、カスタム内の一般的なイントラネット サイトで <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールは、データベース接続、部署の情報などのユーザーの環境に固有の値を保持するプロパティの数を含めることがあります。 コントロールは、さまざまな外観に影響するプロパティもあります。 1 人のユーザーは、特定のサイトのコントロールのカスタマイズ、動作を正常に取得し、コントロールの記述ファイルをエクスポート、およびその他のユーザーと、完全に構成されたコントロールをカスタマイズすることが許可されている他のイントラネット サイトを追加するファイルをインポートすることが記述ファイルを共有可能性があります。 自分のサイトをホストしている Web サーバーで、コンパイルされたアセンブリまたはコントロールを含むユーザー コントロール ファイルが存在する限り、ユーザーは、他の Web サイトにコントロールを追加できます。  
  
 ユーザーが記述ファイルをインポート \(および、関連付けられているサーバーを制御するため\)、Web ページには、このメカニズムは、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> コントロールで、ページの開発者が Web ページに追加する必要があります。 ページをカタログ表示モードに切り替えるときに、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> コントロールが表示され、ユーザーがユーザーを参照するには、このコントロールします。サーバー コントロールに対応する web パーツの説明ファイルをインポートします。 UI とによって提供される指示に従って、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> コントロール、ユーザーは Web ページの外観およびプロパティが完全にインポートした記述ファイルで指定された構成に必要なサーバー コントロールを追加することができます。  
  
 前に、 <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールの記述ファイルをインポートすることは、ユーザーが \(エクスポート\) をまず作成する必要があります、既存のファイルベース <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールです。 次の条件が満たされた場合、コントロールの記述ファイルをエクスポートできます。  
  
-   コントロールに付いているプロパティがある、 `Personalizable` 属性です。  
  
-   Web.config ファイルには、 `enableExport` 属性の値に設定 `true` 上、 `<webParts>` 要素。  
  
-   開発者の値を設定する、 <xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A> プロパティの既定値以外の値に制御を <xref:System.Web.UI.WebControls.WebParts.WebPartExportMode.None>, 、エクスポートを禁止します。 場合、 <xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A> にプロパティの値が設定されている <xref:System.Web.UI.WebControls.WebParts.WebPartExportMode.NonSensitiveData>, 、任意のプロパティを含む、 <xref:System.Web.UI.WebControls.WebParts.PersonalizableAttribute.IsSensitive%2A> パラメーターを `Personalizable` 属性は、ユーザーが記述ファイルをエクスポートするときにエクスポートされません。 これにより、コントロールの開発者は接続文字列などの機密データが特定の状況でエクスポートされることを防止できます。  
  
 ユーザーが、コントロール、および保存する手順については、次の動詞メニューに表示されるエクスポート動詞をクリックしてエクスポートを有効になっているコントロールをエクスポートします。Web パーツ コントロールのファイルを説明します。 他のユーザーは、コントロールの独自のインスタンスを構成するのには、このファイルをインポートできます。  
  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> クラスには、いくつかのプロパティが含まれています。<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A> 記述ファイルを参照して選択するときに、プロパティにはユーザーに関する手順を説明テキストが含まれます。<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A> プロパティ内で表示されるインポート済みのコントロールのラベルとして機能するテキストを含む、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> コントロールです。<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A> コントロールの説明がインポートされているときにエラーが発生した場合に表示されるテキストが含まれています。<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A> プロパティの既定のタイトルを割り当てるための基本プロパティをオーバーライドする、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 、開発者は、タイトルを割り当てない場合は、制御します。<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A> プロパティには、記述ファイルをアップロードするユーザーがクリックしたボタンのテキストが含まれています。 および <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A> プロパティには、アップロード処理する方法について説明します。  
  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> クラスには、いくつかの固有のメソッドも含まれています。<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A> メソッドを取得、 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> オブジェクトごとに <xref:System.Web.UI.WebControls.WebParts.WebPart> これにより、カタログ内のコントロール、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> のインスタンスを作成することがなく各サーバー コントロールに関する情報を表示するコントロール。<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A> メソッドは、特定のインスタンスを取得 <xref:System.Web.UI.WebControls.WebParts.WebPart> メソッドに渡される説明に基づく制御します。  
  
 使用に関連するいくつか特有のリスクがある、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> コントロールです。 1 つの例は、インポートするために使用する記述ファイルを通じて、悪意のあるデータを Web アプリケーションにインポートする可能性です。 誰かが記述ファイル内の文字列プロパティの値としては、悪意のあるスクリプト コードを配置して場合、そのスクリプト可能性がありますが実行されるユーザーが記述ファイルをインポートし、参照先のサーバー コントロールを Web ページに追加します。 悪意のあるデータ記述ファイルをインポートするリスクを最小限に抑えるには、文字列型のプロパティを持つサーバー コントロールでは常にプロパティ データをエンコードする必要があります。 別のリスクには、記述ファイルからの種類のインポートが含まれます \(を参照してください [Web Parts Control Description Files](http://msdn.microsoft.com/ja-jp/480992e4-8fc7-43f8-bffc-ae97bbdfe5b8)\)。 悪意のあるユーザーに多くのアセンブリを読み込む要求を送信、 <xref:System.AppDomain>, 、過剰な量のメモリが消費されるが発生します。  
  
 インポートに関連するリスクを避けるためには、する機能を無効に、まったくインポート機能を使用しない、または <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> コントロールです。 または、コントロールに対してどのようなユーザーにアクセスを制限することができます。 これを行うプログラムを使用して、ロールの管理を使用して \(を参照してください [Managing Authorization Using Roles](http://msdn.microsoft.com/ja-jp/01954ce4-39a2-487f-8153-a69f6f6f3195)\)。 たとえば、ページが読み込まれると、ユーザーが管理者の役割などの特定のロールであるかどうかをテストする可能性があります。 ロールのユーザーがあるかどうか、プログラムで追加できます、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> コントロールをそのユーザーのページにします。 使用できるユーザーのセットを制限する宣言型のアプローチを使用することも、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> コントロールです。  カタログを含む web ページ内で、2 つを入れることもできます <xref:System.Web.UI.WebControls.WebParts.CatalogZone> コントロール: できない方のためにインポートできるように、ユーザー用とします。 インポートできるようにユーザーのゾーンには、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> コントロールです。 内のゾーン自体を配置することが、 <xref:System.Web.UI.WebControls.LoginView> コントロールで、ユーザーまたはロールを指定する認証されているもののみにするゾーン内のコントロールの使用を制限することができます。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> Web ページで宣言またはプログラムによってを制御します。 この例では、4 つの部分があります。  
  
-   ユーザー コントロールを Web パーツ ページの表示モードを変更することができます。  
  
-   含む Web ページ、 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> コントロールと <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> コントロールです。  
  
-   ソース コード ファイルを含む 2 つのカスタム <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールです。  
  
-   ブラウザーでページを読み込む場合の例のしくみの説明です。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるユーザー コントロールです。 次のソース コード ファイル内に配置し、Displaymodemenucs.ascx や Displaymodemenuvb.ascx \(言語に応じて使用する\) 名前を付けます必要があります。 詳細については、このコントロールのモードとソース コードの説明を表示、参照してください [Walkthrough: Changing Display Modes on a Web Parts Page](http://msdn.microsoft.com/ja-jp/24e42f74-82dc-4c13-8574-130398985fc0)します。  
  
 [!code-csharp[WebParts\_ImportCatalogPart\_Overview\#7](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/DisplayModeMenuCS.ascx#7)]
 [!code-vb[WebParts\_ImportCatalogPart\_Overview\#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/DisplayModeMenuVB.ascx#7)]  
  
 コード例の 2 番目の部分は、Web ページです。 ページの上部には 2 つ `register` ディレクティブ、ユーザー コントロールおよびコンパイル済みのコンポーネントを含む 2 つのカスタム <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールです。 ページがへの参照を宣言型であることを確認、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> コントロールの宣言型の要素の適切な階層内に入れ子にします。 いくつかのプロパティ値は宣言的に割り当てられているにも注意してください、 `<asp:importcatalogpart>` 要素。 また、 `Button1_Click` メソッドでプロパティ値の数を更新する、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> コントロールです。  
  
 ページの \[ <xref:System.Web.UI.WebControls.WebParts.WebPartZone> コントロール、2 つのカスタム <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールを宣言します。`<aspSample:userinfowebpart>` コントロールが、 `exportmode="all"` の属性です。 ユーザーをインポートできるように記述ファイルを使用して、コントロールをインポートする別のユーザーがコントロールの記述ファイルのエクスポートを有効にするには、この属性が必要です。  
  
> [!NOTE]
>  記述ファイルをエクスポートする Web パーツ アプリケーションのユーザーを有効にする <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールを追加することで Web アプリケーションのエクスポート機能を有効にすることもあります、 `enableExport="true"` 属性を `<webParts>` 要素 \(の子である、 `<system.web>` 要素\) Web.config ファイルにします。 エクスポートが既定で無効になっている、のでまだ、アプリケーションのエクスポートを有効にしない場合、Web.config ファイルを編集し、今すぐそうです。  
  
 [!code-csharp[WebParts\_ImportCatalogPart\_Overview\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#1)]
 [!code-vb[WebParts\_ImportCatalogPart\_Overview\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#1)]  
  
 コード例の 3 番目の部分は、2 つのソース コード <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールです。 これらのコントロールの一部のプロパティが付けられているに注意してください、 `WebBrowsable` 属性です。 これにより、 <xref:System.Web.UI.WebControls.WebParts.PropertyGridEditorPart> コントロールを動的に、コントロールが編集モードにする場合は、これらのプロパティを編集するユーザーのユーザー インターフェイス \(UI\) を生成します。 プロパティでもマークされて、 `WebDisplayName` 属性で、編集用の UI 内の各コントロールの横に表示されるラベルのテキストを指定します。 このコード例を実行するには、このソース コードをコンパイルする必要があります。 明示的にコンパイルし、Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに、生成されたアセンブリを配置できます。 また、ここで、動的にコンパイル実行時に、サイトの App\_Code フォルダーにソース コードを配置することができます。 このコード例では、動的なコンパイルを使用します。 両方のコンパイル方法を説明するチュートリアルは、次を参照してください。 [Walkthrough: Developing and Using a Custom Server Control](http://msdn.microsoft.com/ja-jp/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。  
  
 カスタム コントロールと呼ばれる `TextDisplayWebPart` 、Web ページで参照される、 `<aspSample:TextDisplayWebPart>` 要素。 その他のコントロールと呼ばれる `UserInfoWebPart`, 、宣言されて、Web ページに最初に、コントロールの記述ファイルをインポートできることを示す後に削除されますがします。  
  
 [!code-csharp[WebParts\_ImportCatalogPart\_Overview\#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/userinfowebpart.cs#6)]
 [!code-vb[WebParts\_ImportCatalogPart\_Overview\#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/userinfowebpart.vb#6)]  
  
 このコード例を実行します。 ブラウザーで Web ページを読み込みます。 編集するのには、まず、 `UserInfoWebPart` コントロールです。 使用して、 **表示モード** ドロップダウン リスト コントロールと選択 **編集** ページを編集モードを切り替える。 動詞メニューをクリックして、 `UserInfoWebPart` コントロール \(タイトル バーに下向きの矢印\) をクリックして **編集**します。 編集用の UI が表示されたら、いくつかの編集コントロールの下に表示、 `UserInfoWebPart` コントロールがそのフィールドの値を編集できます。 いくつかのフィールドを編集\] をクリックして **OK**, をクリックして、 **表示モード** をブラウズ モードのページを返すには、ドロップダウンです。  
  
 2 番目の手順でエクスポートするのには、です。Web パーツの記述ファイルを `UserInfoWebPart` コントロールです。 \(タイトル バーの下向きの矢印で表される\)、カスタム コントロールの動詞メニューをクリックし、クリックして **エクスポート**します。 保存するための指示に従って、します。Web パーツ コントロールのファイルを説明します。 ここで Web ページを閉じて、エディターで、ページのソースを編集します。 削除、 `<aspSample:userinfowebpart>` 宣言要素を制御し、保存して、ファイルを閉じます。 \(まだないユーザーをシミュレートするには、この手順を実行する、 `UserInfoWebPart` を制御するため、ページにコントロールをインポートすることができます\)。  
  
 ブラウザーに再度 Web ページを読み込みます。`UserInfoWebPart` 削除したため、コントロールは表示されない必要があります。 使用して、 **表示モード** ドロップダウン リスト コントロールと選択 **カタログ** カタログ モードにページを切り替えます。<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> をクリックして、制御、 **参照** ボタンをクリックしを参照、します。Web パーツは、作成したファイルにし、クリックして、 **アップロード** \] ボタンをクリックします。 コントロールへの参照は、隣のチェック ボックスに表示されます。 チェック ボックスを選択し、クリックして **追加** 、ページにコントロールを追加します。  
  
 このページのビューには、次のようをクリックして、 **更新 ImportCatalogPart** プロパティ値の数をプログラムで更新の結果を確認するページの下部付近にボタン、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> コントロールです。 ボタンをクリックすると、UI で、さまざまなプロパティを変更する方法を確認します。  
  
 最後に、クリックして **閉じる** カタログ モードを終了し、ページをブラウズ モードを返します。`UserInfoWebPart` 前にエクスポートしたときに存在していた値を格納した、ページにコントロールが表示されます。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.PageCatalogPart" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ImportCatalogPart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.WebParts.ImportCatalogPart" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.%23ctor%2A> コンス トラクターは、既定値は、のコンス トラクターが宣言されていなければ、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> クラスとのでない特殊なタスクを実施する、クラスの新しいインスタンスが作成されるとします。 .NET Framework は、クラスのインスタンスを作成するのに内部コンス トラクターを使用します。  
  
 通常使用する必要はありません、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.%23ctor%2A> プログラムを使用して、独自のコードでコンス トラクターです。 コントロールを使用する目的は、デザイン時にページに宣言によって追加、ページ開発者です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BrowseHelpText">
      <MemberSignature Language="C#" Value="public string BrowseHelpText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BrowseHelpText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または記述ファイルの場所を参照するユーザーに指示するテキスト メッセージを設定します。</summary>
        <value>メッセージのテキストを含む文字列です。 既定値は、.NET Framework によって提供されるカルチャに固有のメッセージです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A> プロパティは、まず、インポートされたコントロールを追加しているようにする必要がありますの簡単な概要のユーザーに提供します。 パスを入力するか、ファイルを参照して、記述ファイルの場所を提供します。 このプロパティのカスタム値を指定する一般的な理由は、記述ファイルを検索するように、参照する必要があります、特定のネットワーク共有などのユーザーに対して特別な指示があるかどうかです。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A> プロパティ宣言またはプログラムによって。 完全なコードと、例を実行するために必要な手順については、例」のセクションを参照してください、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> クラスの概要です。  
  
 コードの次のセクションでわかるように、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A> コントロールの宣言によってプロパティの値を設定します。  
  
 [!code-csharp[WebParts\_ImportCatalogPart\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#2)]
 [!code-vb[WebParts\_ImportCatalogPart\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#2)]  
  
 コードのこのセクションで、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A> プロパティの値がプログラムによって割り当てられます。  
  
 [!code-csharp[WebParts\_ImportCatalogPart\_Overview\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#3)]
 [!code-vb[WebParts\_ImportCatalogPart\_Overview\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#3)]  
  
 ブラウザーでページを読み込むときに使用できます、 **表示モード** を選択するドロップダウン リスト コントロール **カタログ モード** カタログ モードに切り替えるとします。 カタログ モードとアップロードの説明ファイルでは、そのページとユーザー インターフェイス \(UI\) に表示されるさまざまなテキスト文字列をメモは、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> コントロールです。 クリックすると、 **記述ファイルのアップロード** \] ボタンをいくつか、UI 上でプロパティのテキストを変更すると、テキストを含む、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A> プロパティです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateChildControls">
      <MemberSignature Language="C#" Value="protected override void CreateChildControls ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void CreateChildControls() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.CreateChildControls" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultButton">
      <MemberSignature Language="C#" Value="public override string DefaultButton { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultButton" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ImportCatalogPart.DefaultButton" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、ユーザー インターフェイス \(UI\) でボタンの動作は、ボタンが含まれるフォームが表示されるときに、フォーカスを受け取る既定のボタンとして扱われます。 このプロパティは、ページ開発者のコードから呼び出されるものではありません。</summary>
        <value>ID を表す文字列、 <see cref="T:System.Web.UI.WebControls.Button" /> で既定のフォーカスを受け取る、 <see cref="T:System.Web.UI.WebControls.Panel" /> コントロールです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティのコードから継承された基本プロパティをオーバーライドする、 <xref:System.Web.UI.WebControls.Panel> クラス デザイナーからプロパティを非表示にし、テーマの影響を受けるを防ぐことです。 パブリックですが、このプロパティは Web パーツ コントロール セットには、このコントロールの既定のレンダリングによって内部的に使用される、ページの開発者によって使用されるものではありません。  
  
 テーマまたはスタイル シートのテーマでは、このプロパティを設定できません。 詳細については、<xref:System.Web.UI.ThemeableAttribute> および [ASP.NET Themes Overview](http://msdn.microsoft.com/ja-jp/5df3ebbd-d46c-4502-9406-02f9df4ef2c3) を参照してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Panel.DefaultButton" />
      </Docs>
    </Member>
    <Member MemberName="GetAvailableWebPartDescriptions">
      <MemberSignature Language="C#" Value="public override System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection GetAvailableWebPartDescriptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection GetAvailableWebPartDescriptions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用可能な説明のコレクションを返します <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> カタログ内のコントロールです。</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection" /> を含む、 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDescription" /> カタログ内の各コントロールにします。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A> で抽象基本メソッドが宣言されているために、メソッドが実装を提供、 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> クラスです。<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A> メソッドは、カタログの各コントロールの説明情報を返します。 場合に注意してください、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 制御なることがあります 1 台のサーバー コントロール、カタログで、一度に複数のコントロールがあった場合、メソッドが機能する場合でもです。  
  
 A <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> オブジェクトについて、重要な情報を格納しているオブジェクトでは、 <xref:System.Web.UI.WebControls.WebParts.WebPart> 、ID をコントロールとから継承されているいくつかの重要なプロパティの値へのオブジェクト参照を含む、コントロール、 <xref:System.Web.UI.WebControls.WebParts.Part> クラスなど、 <xref:System.Web.UI.WebControls.WebParts.Part.Title%2A> と <xref:System.Web.UI.WebControls.WebParts.Part.Description%2A>です。  
  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A> メソッドのパフォーマンスが向上します。 それに含まれるタイトル、説明、アイコン \(1 つ存在する場合\)、および ID を含む各コントロールに関する情報が必要なカタログが作成されると、 この情報を取得するには、各コントロールのインスタンスを作成するのではなく、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 呼び出しのカタログを作成するゾーン、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A> メソッド、および呼び出しは、コントロールのインスタンスではなく、コントロールの説明情報のみを返します。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A> Web ページ上のメソッドです。 この例では、4 つの部分があります。  
  
-   ユーザー コントロールを Web パーツ ページの表示モードを変更することができます。  
  
-   含む Web ページ、 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> コントロールと <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> コントロール、コードを使用すると、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A> メソッドです。  
  
-   ソース コード ファイルを含む 2 つのカスタム <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールです。  
  
-   ブラウザーでページを読み込む場合の例のしくみの説明です。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるユーザー コントロールです。 次のソース コード ファイル内に配置し、Displaymodemenucs.ascx や Displaymodemenuvb.ascx \(言語に応じて使用する\) 名前を付けます必要があります。 詳細については、このコントロールのモードとソース コードの説明を表示、参照してください [Walkthrough: Changing Display Modes on a Web Parts Page](http://msdn.microsoft.com/ja-jp/24e42f74-82dc-4c13-8574-130398985fc0)します。  
  
 [!code-csharp[WebParts\_ImportCatalogPart\_Get\#7](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/CS/DisplayModeMenuCS.ascx#7)]
 [!code-vb[WebParts\_ImportCatalogPart\_Get\#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/VB/DisplayModeMenuVB.ascx#7)]  
  
 コード例の 2 番目の部分は、Web ページです。 ページの上部には 2 つ `register` ディレクティブ、ユーザー コントロールおよびコンパイル済みのコンポーネントを含む 2 つのカスタム <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールです。 これらのコントロールは、ページのマークアップで宣言によって参照されます。 宣言型の参照で、 <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロール \(で始まる両方、 `aspSample` プレフィックス\)、それぞれを持つに注意してください、 `exportMode="all"` 属性を追加します。 この属性を使用すると、エクスポートします。コントロールをページにインポートする手順を後で使用すると、コントロールの web パーツの説明ファイルです。  
  
> [!NOTE]
>  記述ファイルをエクスポートする Web パーツ アプリケーションのユーザーを有効にする <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールを追加することで Web アプリケーションのエクスポート機能を有効にすることもあります、 `enableExport="true"` 属性を `<webParts>` 要素 \(の子である、 `<system.web>` 要素\) Web.config ファイルにします。 エクスポートが既定で無効になっている、のでまだ、アプリケーションのエクスポートを有効にしない場合、Web.config ファイルを編集し、今すぐそうです。  
  
 Web ページにもへの参照を宣言、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> コントロールの宣言型の要素の適切な階層内に入れ子にします。<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A> のコード内でメソッドが呼び出される、 `Button1_Click` メソッドです。  
  
 [!code-csharp[WebParts\_ImportCatalogPart\_Get\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/CS/ImportCatalogPart_GetCS.aspx#1)]
 [!code-vb[WebParts\_ImportCatalogPart\_Get\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/VB/ImportCatalogPart_GetVB.aspx#1)]  
  
 コード例の 3 番目の部分は、2 つのソース コード <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールです。 このコード例を実行するには、このソース コードをコンパイルする必要があります。 明示的にコンパイルし、Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに、生成されたアセンブリを配置できます。 また、ここで、動的にコンパイル実行時に、サイトの App\_Code フォルダーにソース コードを配置することができます。 このコード例では、動的なコンパイルを使用します。 両方のコンパイル方法を説明するチュートリアルは、次を参照してください。 [Walkthrough: Developing and Using a Custom Server Control](http://msdn.microsoft.com/ja-jp/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。  
  
 [!code-csharp[WebParts\_ImportCatalogPart\_Get\#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/CS/userinfowebpart.cs#6)]
 [!code-vb[WebParts\_ImportCatalogPart\_Get\#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/VB/userinfowebpart.vb#6)]  
  
 このコード例を実行します。 ブラウザーで Web ページを読み込みます。 最初の手順では、エクスポートします。それぞれの web パーツの記述ファイル <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロール \(の `TextDisplayWebPart` および、 `UserInfoWebPart` コントロール\)。 各コントロールについて \(タイトル バーの下向きの矢印で表される\)、コントロールの動詞メニューをクリックし、をクリックして **エクスポート**します。 保存するための指示に従って、します。Web パーツ コントロールのファイルを説明します。 各コントロールの記述ファイルをエクスポートした場合は、Web ページを閉じてエディターで、ページのソースを編集します。 削除、 `<aspSample:userinfowebpart>` と `<aspSample:textdisplaywebpart>` 宣言要素を制御し、保存して、ファイルを閉じます。 \(はまだありませんこれらのコントロールをページにコントロールをインポートできるようにするユーザーをシミュレートするには、この手順を行っている。\)  
  
 ブラウザーに再度 Web ページを読み込みます。 使用して、 **表示モード** ドロップダウン リスト コントロールと選択 **カタログ** カタログ モードにページを切り替えます。<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> をクリックして、制御、 **参照** \] ボタンを参照、します。作成した web パーツのファイルは、1 つを選択し、クリックして、 **アップロード** \] ボタンをクリックします。 コントロールへの参照は、隣のチェック ボックスに表示されます。 チェック ボックスを選択し、クリックして **追加** 、ページにコントロールを追加します。 別のコントロールには、この手順を繰り返します。  
  
 このページのビューには、次のようをクリックして、 **web パーツの説明を取得** プログラムでアクセスするための効果を表示するページの下部付近にボタン、 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> にコントロールの説明が読み込まれているオブジェクト、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> コントロールです。 説明の詳細へのアクセスに使用する方法については、 `Button1_Click` ページのソースのメソッドは、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A> メソッドです。 ボタンの下のラベルには、コントロールに関する基本情報が表示されます。  
  
 最初のコントロールを追加した後に、2 つ目のコントロールをページに追加する手順を繰り返します。 最後に、クリックして **閉じる** カタログ モードを終了し、ページをブラウズ モードを返します。 前の記述ファイルにエクスポートしたときの値を含むページで、両方のカスタム コントロールが表示されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart(System.Web.UI.WebControls.WebParts.WebPartDescription)" />
      </Docs>
    </Member>
    <Member MemberName="GetWebPart">
      <MemberSignature Language="C#" Value="public override System.Web.UI.WebControls.WebParts.WebPart GetWebPart (System.Web.UI.WebControls.WebParts.WebPartDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Web.UI.WebControls.WebParts.WebPart GetWebPart(class System.Web.UI.WebControls.WebParts.WebPartDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart(System.Web.UI.WebControls.WebParts.WebPartDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="System.Web.UI.WebControls.WebParts.WebPartDescription" />
      </Parameters>
      <Docs>
        <param name="description">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDescription" /> コントロールの詳細を含みます。</param>
        <summary>参照を返す、 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> コントロールが、メソッドに渡される説明の値に基づいたします。</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> コントロールが、説明、値と一致して <paramref name="description" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A> メソッドへの参照を返します、 <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールの詳細を説明の値と一致する、 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> メソッドに渡されるオブジェクト。 通常、このメソッドはと共に使用する、 <xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart.GetAvailableWebPartDescriptions%2A> メソッドで、カタログ内のコントロールの説明を取得するために使用します。 各 <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールは、取得または個別に渡すことによって、必要に応じて操作 <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> オブジェクトを <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A> メソッドです。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A> Web ページ上のメソッドです。 この例では、4 つの部分があります。  
  
-   ユーザー コントロールを Web パーツ ページの表示モードを変更することができます。  
  
-   含む Web ページ、 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> コントロールと <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> コントロール、コードを使用すると、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A> メソッドです。  
  
-   ソース コード ファイルを含む 2 つのカスタム <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールです。  
  
-   ブラウザーでページを読み込む場合の例のしくみの説明です。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるユーザー コントロールです。 次のソース コード ファイル内に配置し、Displaymodemenucs.ascx や Displaymodemenuvb.ascx \(言語に応じて使用する\) 名前を付けます必要があります。 詳細については、このコントロールのモードとソース コードの説明を表示、参照してください [Walkthrough: Changing Display Modes on a Web Parts Page](http://msdn.microsoft.com/ja-jp/24e42f74-82dc-4c13-8574-130398985fc0)します。  
  
 [!code-csharp[WebParts\_ImportCatalogPart\_Get\#7](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/CS/DisplayModeMenuCS.ascx#7)]
 [!code-vb[WebParts\_ImportCatalogPart\_Get\#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/VB/DisplayModeMenuVB.ascx#7)]  
  
 コード例の 2 番目の部分は、Web ページです。 ページの上部には 2 つ `register` ディレクティブ、ユーザー コントロールおよびコンパイル済みのコンポーネントを含む 2 つのカスタム <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールです。 これらのコントロールは、ページのマークアップで宣言によって参照されます。 宣言型の参照で、 <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロール \(で始まる両方、 `aspSample` プレフィックス\)、それぞれを持つに注意してください、 `exportMode="all"` 属性を追加します。 この属性を使用すると、エクスポートします。コントロールをページにインポートする手順を後で使用すると、コントロールの web パーツの説明ファイルです。  
  
> [!NOTE]
>  記述ファイルをエクスポートする Web パーツ アプリケーションのユーザーを有効にする <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールを追加することで Web アプリケーションのエクスポート機能を有効にすることもあります、 `enableExport="true"` 属性を `<webParts>` 要素 \(の子である、 `<system.web>` 要素\) Web.config ファイルにします。 エクスポートが既定で無効になっている、のでまだ、アプリケーションのエクスポートを有効にしない場合、Web.config ファイルを編集し、今すぐそうです。  
  
 Web ページにもへの参照を宣言、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> コントロールの宣言型の要素の適切な階層内に入れ子にします。<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A> のコード内でメソッドが呼び出される、 `Button2_Click` メソッドです。  
  
 [!code-csharp[WebParts\_ImportCatalogPart\_Get\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/CS/ImportCatalogPart_GetCS.aspx#1)]
 [!code-vb[WebParts\_ImportCatalogPart\_Get\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/VB/ImportCatalogPart_GetVB.aspx#1)]  
  
 コード例の 3 番目の部分は、2 つのソース コード <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールです。 このコード例を実行するには、このソース コードをコンパイルする必要があります。 明示的にコンパイルし、Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに、生成されたアセンブリを配置できます。 また、ここで、動的にコンパイル実行時に、サイトの App\_Code フォルダーにソース コードを配置することができます。 このコード例では、動的なコンパイルを使用します。 両方のコンパイル方法を説明するチュートリアルは、次を参照してください。 [Walkthrough: Developing and Using a Custom Server Control](http://msdn.microsoft.com/ja-jp/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。  
  
 [!code-csharp[WebParts\_ImportCatalogPart\_Get\#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/CS/userinfowebpart.cs#6)]
 [!code-vb[WebParts\_ImportCatalogPart\_Get\#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/VB/userinfowebpart.vb#6)]  
  
 このコード例を実行します。 ブラウザーで Web ページを読み込みます。 最初の手順では、エクスポートします。それぞれの web パーツの記述ファイル <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロール \(の `TextDisplayWebPart` および、 `UserInfoWebPart` コントロール\)。 各コントロールについて \(タイトル バーの下向きの矢印で表される\)、コントロールの動詞メニューをクリックし、をクリックして **エクスポート**します。 保存するための指示に従って、します。Web パーツ コントロールのファイルを説明します。 各コントロールの記述ファイルをエクスポートした場合は、Web ページを閉じてエディターで、ページのソースを編集します。 削除、 `<aspSample:userinfowebpart>` と `<aspSample:textdisplaywebpart>` 宣言要素を制御し、保存して、ファイルを閉じます。 \(はまだありませんこれらのコントロールをページにコントロールをインポートできるようにするユーザーをシミュレートするには、この手順を行っている。\)  
  
 ブラウザーに再度 Web ページを読み込みます。 使用して、 **表示モード** ドロップダウン リスト コントロールと選択 **カタログ** カタログ モードにページを切り替えます。<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> をクリックして、制御、 **参照** \] ボタンを参照、します。作成した web パーツのファイルは、1 つを選択し、クリックして、 **アップロード** \] ボタンをクリックします。 コントロールへの参照は、隣のチェック ボックスに表示されます。 コントロールの説明にアップロード、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 制御\] をクリックして、 **使用 GetWebPart** 、ページの下部にあるボタンをクリックします。 これは、通話の効果を実演、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A> メソッドと現在に読み込まれているコントロールの説明を渡す、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> コントロールです。 関連付けられたサーバー コントロールが追加すぐに Web ページにユーザーをクリックする必要がありません、 **追加** \] ボタンをクリックします。<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A> で呼び出されるメソッド、 `Button2_Click` ページのソースのメソッドが戻る、 <xref:System.Web.UI.WebControls.WebParts.WebPart> に読み込まれている現在の説明に関連付けられたコントロール、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> コントロールです。 次へ\]、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A> メソッドが呼び出されると、 <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールがページに直接追加します。 これからプログラムでコントロールを追加する方法を示して、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> ユーザーの介入なしのコントロールです。  
  
 最初のコントロールを追加した後に、2 つ目のコントロールをページに追加する手順を繰り返します。 最後に、クリックして **閉じる** カタログ モードを終了し、ページをブラウズ モードを返します。 前の記述ファイルにエクスポートしたときの値を含むページで、両方のカスタム コントロールが表示されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="description" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="description" /> 利用できません <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDescription" /> 値。</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions" />
      </Docs>
    </Member>
    <Member MemberName="ImportedPartLabelText">
      <MemberSignature Language="C#" Value="public string ImportedPartLabelText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ImportedPartLabelText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはユーザーにインポートされたコントロールのカタログ内で読み込まれたコントロール記述ファイルをインポートした後に表示されるテキストを設定します。</summary>
        <value>ラベルのテキストを含む文字列です。 既定値は、.NET Framework によって提供されるカルチャに固有のメッセージです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A> 内に含まれるコントロールを説明する短い、一般的なラベルを格納するプロパティが使用される通常の <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> コントロールです。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A> プロパティ宣言またはプログラムによって。 完全なコードと、例を実行するために必要な手順については、例」のセクションを参照してください、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> クラスの概要です。  
  
 コードの次のセクションでわかるように、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A> コントロールの宣言によってプロパティの値を設定します。  
  
 [!code-csharp[WebParts\_ImportCatalogPart\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#2)]
 [!code-vb[WebParts\_ImportCatalogPart\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#2)]  
  
 コードのこのセクションで、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A> プロパティの値がプログラムによって割り当てられます。  
  
 [!code-csharp[WebParts\_ImportCatalogPart\_Overview\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#3)]
 [!code-vb[WebParts\_ImportCatalogPart\_Overview\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#3)]  
  
 ブラウザーでページを読み込むときに使用できます、 **表示モード** を選択するドロップダウン リスト コントロール **カタログ モード** カタログ モードに切り替えるとします。 カタログ モードとアップロードの説明ファイルでは、そのページとユーザー インターフェイス \(UI\) に表示されるさまざまなテキスト文字列をメモは、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> コントロールです。 クリックすると、 **記述ファイルのアップロード** \] ボタンをいくつか、UI 上でプロパティのテキストを変更するのテキストを含む、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A> プロパティです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadControlState">
      <MemberSignature Language="C#" Value="protected override void LoadControlState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void LoadControlState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.LoadControlState(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.OnInit(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PartImportErrorLabelText">
      <MemberSignature Language="C#" Value="public string PartImportErrorLabelText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PartImportErrorLabelText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはインポート処理中にエラーが発生した場合に表示されるエラー メッセージを設定します。</summary>
        <value>ラベルのテキストを含む文字列です。 既定値は、.NET Framework によって提供されるカルチャに固有のメッセージです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A> プロパティは、ページが、記述ファイルをインポートしようとしています。 中にいくつかの問題またはエラーが発生した場合、ユーザーに通知するために役立ちます。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A> プロパティ宣言またはプログラムによって。 完全なコードと、例を実行するために必要な手順については、例」のセクションを参照してください、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> クラスの概要です。  
  
 コードの次のセクションでわかるように、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A> コントロールの宣言によってプロパティの値を設定します。  
  
 [!code-csharp[WebParts\_ImportCatalogPart\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#2)]
 [!code-vb[WebParts\_ImportCatalogPart\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#2)]  
  
 コードのこのセクションで、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A> プロパティの値がプログラムによって割り当てられます。  
  
 [!code-csharp[WebParts\_ImportCatalogPart\_Overview\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#3)]
 [!code-vb[WebParts\_ImportCatalogPart\_Overview\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#3)]  
  
 ブラウザーでページを読み込むときに使用できます、 **表示モード** を選択するドロップダウン リスト コントロール **カタログ モード** カタログ モードに切り替えるとします。 カタログ モードとアップロードの説明ファイルでは、そのページとユーザー インターフェイス \(UI\) に表示されるさまざまなテキスト文字列をメモは、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> コントロールです。 クリックすると、 **記述ファイルのアップロード** \] ボタンをいくつか、UI 上でプロパティのテキストを変更するのテキストを含む、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A> プロパティです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderContents">
      <MemberSignature Language="C#" Value="protected override void RenderContents (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void RenderContents(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.RenderContents(System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveControlState">
      <MemberSignature Language="C#" Value="protected override object SaveControlState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance object SaveControlState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.SaveControlState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public override string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはのタイトル バーに表示されるタイトルを設定、 <see cref="T:System.Web.UI.WebControls.WebParts.ImportCatalogPart" /> コントロールです。</summary>
        <value>コントロールのタイトルとして使用されている文字列。 既定値は、Web パーツ コントロール セットから指定された演算コントロールの名前です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A> のタイトル バーにプロパティ値が表示されます、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> ときに、コントロールは、カタログ モードで表示を制御します。 使用してプロパティの値を設定するには、コントロールがページに宣言されている場合、 `Title` 属性です。 タイトルの値を指定しない場合、このコントロールでユーザーを編集できるプロパティの種類を説明する、カルチャに固有の既定値が使用します。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A> プロパティ宣言またはプログラムによって。 完全なコードと、例を実行するために必要な手順については、例」のセクションを参照してください、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> クラスの概要です。  
  
 コードの次のセクションでわかるように、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A> コントロールの宣言によってプロパティの値を設定します。  
  
 [!code-csharp[WebParts\_ImportCatalogPart\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#2)]
 [!code-vb[WebParts\_ImportCatalogPart\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#2)]  
  
 コードのこのセクションで、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A> プロパティの値がプログラムによって割り当てられます。  
  
 [!code-csharp[WebParts\_ImportCatalogPart\_Overview\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#3)]
 [!code-vb[WebParts\_ImportCatalogPart\_Overview\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#3)]  
  
 ブラウザーでページを読み込むときに使用できます、 **表示モード** を選択するドロップダウン リスト コントロール **カタログ モード** カタログ モードに切り替えるとします。 カタログ モードとアップロードの説明ファイルでは、そのページとユーザー インターフェイス \(UI\) に表示されるさまざまなテキスト文字列をメモは、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> コントロールです。 クリックすると、 **記述ファイルのアップロード** \] ボタンをいくつか、UI 上でプロパティのテキストを変更すると、テキストを含む、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A> プロパティです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadButtonText">
      <MemberSignature Language="C#" Value="public string UploadButtonText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UploadButtonText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>テキストを取得または設定、 <see cref="T:System.Web.UI.WebControls.Button" /> コントロール記述ファイルのアップロードを開始します。</summary>
        <value>テキストとして使用される文字列、 <see cref="T:System.Web.UI.WebControls.Button" />です。 既定値は、Web パーツ コントロール セットによって指定されたカルチャに固有の文字列です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A> プロパティのテキストを提供する、 <xref:System.Web.UI.WebControls.Button> コントロール、アップロード プロセスを開始します。 このプロパティは、または、カスタム テキストを割り当てるかどうかは、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A> プロパティには、テキストをユーザーが記述ファイルをアップロードすることが明確にする必要があります。 テキストと答えてまたはアップロード プロセスが実際には、コントロール自体をアップロードすることを示すものでいない必要があります。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A> プロパティ宣言またはプログラムによって。 完全なコードと、例を実行するために必要な手順については、例」のセクションを参照してください、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> クラスの概要です。  
  
 コードの次のセクションでわかるように、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A> コントロールの宣言によってプロパティの値を設定します。  
  
 [!code-csharp[WebParts\_ImportCatalogPart\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#2)]
 [!code-vb[WebParts\_ImportCatalogPart\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#2)]  
  
 コードのこのセクションで、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A> プロパティの値がプログラムによって割り当てられます。  
  
 [!code-csharp[WebParts\_ImportCatalogPart\_Overview\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#3)]
 [!code-vb[WebParts\_ImportCatalogPart\_Overview\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#3)]  
  
 ブラウザーでページを読み込むときに使用できます、 **表示モード** を選択するドロップダウン リスト コントロール **カタログ モード** カタログ モードに切り替えるとします。 カタログ モードとアップロードの説明ファイルでは、そのページとユーザー インターフェイス \(UI\) に表示されるさまざまなテキスト文字列をメモは、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> コントロールです。 クリックすると、 **記述ファイルのアップロード** \] ボタンをいくつか、UI 上でプロパティのテキストを変更するのテキストを含む、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A> プロパティです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadHelpText">
      <MemberSignature Language="C#" Value="public string UploadHelpText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UploadHelpText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または記述ファイルをアップロードする方法をユーザーに通知メッセージのテキストを設定します。</summary>
        <value>記述ファイルをアップロードするユーザーの指示として使用される文字列。 既定値は、Web パーツ コントロール セットによって指定されたカルチャに固有の文字列です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A> プロパティは、簡単な文やユーザーに指示する記述ファイルをアップロードするためのボタンをクリックするように指示のフレーズを提供します。 このプロパティは、または、カスタム テキストを割り当てるかどうかは、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A> プロパティには、テキストをユーザーが記述ファイルをアップロードすることが明確にする必要があります。 テキストと答えてまたはアップロード プロセスが実際には、コントロール自体をアップロードすることを示すものでいない必要があります。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A> プロパティ宣言またはプログラムによって。 完全なコードと、例を実行するために必要な手順については、例」のセクションを参照してください、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> クラスの概要です。  
  
 コードの次のセクションでわかるように、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A> コントロールの宣言によってプロパティの値を設定します。  
  
 [!code-csharp[WebParts\_ImportCatalogPart\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#2)]
 [!code-vb[WebParts\_ImportCatalogPart\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#2)]  
  
 コードのこのセクションで、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A> プロパティの値がプログラムによって割り当てられます。  
  
 [!code-csharp[WebParts\_ImportCatalogPart\_Overview\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#3)]
 [!code-vb[WebParts\_ImportCatalogPart\_Overview\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#3)]  
  
 ブラウザーでページを読み込むときに使用できます、 **表示モード** を選択するドロップダウン リスト コントロール **カタログ モード** カタログ モードに切り替えるとします。 カタログ モードとアップロードの説明ファイルでは、そのページとユーザー インターフェイス \(UI\) に表示されるさまざまなテキスト文字列をメモは、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> コントロールです。 クリックすると、 **記述ファイルのアップロード** \] ボタンをいくつか、UI 上でプロパティのテキストを変更するのテキストを含む、 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A> プロパティです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>