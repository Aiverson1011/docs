<Type Name="CatalogZoneBase" FullName="System.Web.UI.WebControls.WebParts.CatalogZoneBase">
  <TypeSignature Language="C#" Value="public abstract class CatalogZoneBase : System.Web.UI.WebControls.WebParts.ToolZone, System.Web.UI.IPostBackDataHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CatalogZoneBase extends System.Web.UI.WebControls.WebParts.ToolZone implements class System.Web.UI.IPostBackDataHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ToolZone</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IPostBackDataHandler</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>カタログとして機能するすべてのゾーン コントロールの基底クラスとして機能します。 ユーザーが Web ページに追加できる <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> コントロールの一覧を含んだカタログ。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> class is a base class that inherits from the <xref:System.Web.UI.WebControls.WebParts.ToolZone> class. It provides a base set of behaviors for derived zones.  
  
 The <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> class provides a unique user interface \(UI\) that enables users to add <xref:System.Web.UI.WebControls.WebParts.WebPart> controls and other server controls to Web pages. Controls that derive from the <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> class, such as <xref:System.Web.UI.WebControls.WebParts.CatalogZone>, are the controls actually placed on Web pages. They act as containers for other controls, known as <xref:System.Web.UI.WebControls.WebParts.CatalogPart> controls, that create lists of server controls for users to add to a page. Zones that derive from the <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> class can appear only when the page is in catalog display mode.  
  
> [!NOTE]
>  A <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> zone can contain only <xref:System.Web.UI.WebControls.WebParts.CatalogPart> controls, and conversely, <xref:System.Web.UI.WebControls.WebParts.CatalogPart> controls can reside only in <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> zones.  
  
 The mechanism for adding server controls to a catalog is the following set of three controls that derive from the base <xref:System.Web.UI.WebControls.WebParts.CatalogPart> class.  
  
|Control|Description|  
|-------------|-----------------|  
|<xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>|Maintains references to controls that have been closed on a page. These controls can be reopened \(added back to the page\) by users.|  
|<xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart>|Contains references to controls that are declared in a Web Parts catalog in the markup of a Web page. These controls can be added to a Web page by users.|  
|<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>|Provides the UI for a user to upload a definition file to a catalog so that the control can be added to a Web page. Definition files are XML file with a .WebPart file name extension that import settings for a control. The control must be present on the server before the definition file can be imported.|  
  
 The <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> class has a number of properties that are useful for displaying catalogs of <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.AddVerb%2A> property references the verb that adds a selected control from the catalog to the page, while the <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CloseVerb%2A> property references a verb that closes the catalog and returns the page's display mode to browse mode. The <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CatalogParts%2A> property references the collection of all <xref:System.Web.UI.WebControls.WebParts.CatalogPart> controls in the zone. Several text\-oriented properties, such as <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.EmptyZoneText%2A>, <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.HeaderText%2A>, and <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.InstructionText%2A>, override base properties to provide default text appropriate for catalogs. The <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectTargetZoneText%2A> property contains the text alongside the drop\-down list control that allows users to choose which zone a control will be added to.  
  
 Several other properties are included in the <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> class. The <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectedCatalogPartID%2A> property is a unique string identifier for the currently selected <xref:System.Web.UI.WebControls.WebParts.CatalogPart> control. The <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.ShowCatalogIcons%2A> property indicates whether to show the icons that can be associated with controls by setting the <xref:System.Web.UI.WebControls.WebParts.WebPart.CatalogIconImageUrl%2A> property on a <xref:System.Web.UI.WebControls.WebParts.WebPart> control.  
  
 The <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.PartLinkStyle%2A> property contains style attributes for the links to the <xref:System.Web.UI.WebControls.WebParts.CatalogPart> controls that are not currently selected in the zone. In contrast, the <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectedPartLinkStyle%2A> property contains style attributes for a link to the <xref:System.Web.UI.WebControls.WebParts.CatalogPart> control that the user has currently selected in the zone.  
  
 In addition to the properties, there are also some methods in the <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> class, in addition to the standard event\-handling and rendering methods inherited from other base controls, which are uniquely designed for the purpose of handling catalogs of controls. The <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogPartChrome%2A> method creates the chrome \(peripheral UI elements such as a border, verbs, icons, and a title\) that surrounds each <xref:System.Web.UI.WebControls.WebParts.CatalogPart> control in the zone, and also handles the rendering for the controls. The <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogParts%2A> method is an abstract method; derived classes override it to create instances of all the <xref:System.Web.UI.WebControls.WebParts.CatalogPart> controls contained in the zone. The <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.InvalidateCatalogParts%2A> method can be called by a derived class if the collection of <xref:System.Web.UI.WebControls.WebParts.CatalogPart> controls in the zone changes for some programmatic reason, and the derived class needs to recreate the collection. The <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.LoadPostData%2A> method loads the previously existing state for the check boxes next to the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls in the catalog, whenever the page is posted back to the server; conversely, the <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SaveControlState%2A> method saves the state of the check boxes. Finally, the <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RenderCatalogPartLinks%2A> method provides all the rendering for the links to each <xref:System.Web.UI.WebControls.WebParts.CatalogPart> control contained in the zone.  
  
   
  
## 例  
 The following code example demonstrates several declarative and programmatic uses of the <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> class. Because the class is abstract, the code examples use the derived <xref:System.Web.UI.WebControls.WebParts.CatalogZone> class that ships with the Web Parts control set, demonstrating the properties and methods that it inherits from the <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> class.  
  
 The code example has four parts:  
  
-   A user control that enables you to change display modes on the Web page.  
  
-   A Web page that contains a reference to a <xref:System.Web.UI.WebControls.WebParts.CatalogZone> control, and some code that demonstrates usage of some key <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> class members.  
  
-   A custom <xref:System.Web.UI.WebControls.WebParts.WebPart> control that is added to the custom <xref:System.Web.UI.WebControls.WebParts.CatalogZone> control.  
  
-   A description of how the example works in a browser.  
  
 The first part of this code example is the user control that enables you to change display modes on the page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](http://msdn.microsoft.com/ja-jp/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-csharp[WebParts\_CatalogZoneBase\_Overview\#8](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/displaymodemenucs.ascx#8)]
 [!code-vb[WebParts\_CatalogZoneBase\_Overview\#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/displaymodemenuvb.ascx#8)]  
  
 The second part of the code example is a Web page that contains a declarative reference to a <xref:System.Web.UI.WebControls.WebParts.CatalogZone> control. Near the top of the page are two **languageKeyword tag is not supported!!!!**  
 directives\-\-one for the user control, and one for the custom <xref:System.Web.UI.WebControls.WebParts.WebPart> control. Notice that below the **languageKeyword tag is not supported!!!!**  
 element is an **languageKeyword tag is not supported!!!!**  
 element that contains declarative references to the custom <xref:System.Web.UI.WebControls.WebParts.WebPart> control, and to an ASP.NET <xref:System.Web.UI.WebControls.Calendar> control. The zone also has a variety of tags and properties set to determine its appearance and behavior. Between the **languageKeyword tag is not supported!!!!**  
 tags in the page is a variety of event\-handling code, most of which demonstrates the various programmatic uses of the <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> members.  
  
 [!code-csharp[WebParts\_CatalogZoneBase\_Overview\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#1)]
 [!code-vb[WebParts\_CatalogZoneBase\_Overview\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#1)]  
  
 The third part of the code example is the custom <xref:System.Web.UI.WebControls.WebParts.WebPart> control named `TextDisplayWebPart`. It is declared within the zone, and an end user can add it from the catalog to the page. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App\_Code folder, where it will be dynamically compiled at run time. For a demonstration of both methods of compiling, see [Walkthrough: Developing and Using a Custom Server Control](http://msdn.microsoft.com/ja-jp/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts\_CatalogZoneBase\_Overview\#9](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/textdisplaywebpart.cs#9)]
 [!code-vb[WebParts\_CatalogZoneBase\_Overview\#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/textdisplaywebpart.vb#9)]  
  
 Note that for the code example to work, there is a setting you must add in the Web.config file to enable exporting Web Parts description files. Ensure that you have a Web.config file in the same directory as the Web page for this code example. Within the **languageKeyword tag is not supported!!!!**  
 section, make sure there is a **languageKeyword tag is not supported!!!!**  
 element with an **languageKeyword tag is not supported!!!!**  
 attribute set to **languageKeyword tag is not supported!!!!**  
, as in the following markup.  
  
 `<webParts enableExport="true">`  
  
 `...`  
  
 `</webParts>`  
  
 When you load the page in a browser, you can select **ui tag is not supported!!!!**  
 from the drop\-down list box to switch to catalog display mode. When the catalog is visible, you can see the two server controls that can be added from the catalog to the page, and you can also note in the UI the effects of the declarative and programmatic uses of the <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> class members.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>If you want to develop a custom zone for hosting <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> controls, you must determine whether you want to provide zone template support. A zone template is created by types that implement the <see cref="T:System.Web.UI.ITemplate" /> interface, and is necessary if you want to enable page developers using your custom zone to reference <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> controls within your zone in the declarative markup of a Web page. If you need zone template support, you should inherit from the <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" /> class. In contrast, if your custom zone and its <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> controls are going to be self-contained, and they will be created programmatically without any options for page developers to specify controls declaratively in a zone template, then you can inherit directly from the <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> class. If you inherit from the <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> class, you must override the <see cref="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogParts" /> method, and add the <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or other server controls you want in your catalog to a <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection" /> object.</para>
    </block>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CatalogZoneBase ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>継承クラス インスタンスによって使用されるクラスを初期化します。 このコンストラクターは、継承クラスによってのみ呼び出すことができます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The constructor is called when a derived class is initialized, such as the <xref:System.Web.UI.WebControls.WebParts.CatalogZone> class provided with the Web Parts control set. The base <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.%23ctor%2A> constructor helps prepare the page to display the Web Parts catalog user interface \(UI\), by passing the appropriate <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> object to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. Specifically, the constructor passes a <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode> object.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddVerb">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.WebPartVerb AddVerb { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartVerb AddVerb" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.CatalogZoneBase.AddVerb" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartVerb</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>参照を取得、 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartVerb" /> カタログから Web パーツ ページにコントロールを追加するエンドユーザーを有効にするオブジェクト。</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartVerb" /> エンドユーザーが、カタログから Web ページにコントロールを追加します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 によって、add verb が参照される、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.AddVerb%2A> から派生したコントロールのプロパティ、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> クラスです。 Add 動詞は、Web ページに、カタログでエンドユーザーが選択したコントロールを追加します。 、、Add verb に通常表示されるユーザー インターフェイス \(UI\) として、 <xref:System.Web.UI.WebControls.Button> もかまいませんリンクやイメージを制御します。  
  
 Add 動詞は、ゾーン レベルのコントロールをいくつかありますが <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 、カタログ内のコントロール、add verb は、ユーザーが選択したすべてのコントロールに適用され、選択されたゾーンに追加します。  
  
   
  
## 例  
 次のコード例は、アクセスする方法を説明、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.AddVerb%2A> プロパティ宣言とプログラムを使用しています。 例を実行するために必要な完全なコードの例」のセクションを参照してください、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> クラスの概要です。  
  
 このコード例の最初の部分にアクセスする方法を示しています、 <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.ApplyVerb%2A> Web ページで、宣言します。 この例では、動詞のテキストをカスタマイズします。  
  
 [!code-csharp[WebParts\_CatalogZoneBase\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#2)]
 [!code-vb[WebParts\_CatalogZoneBase\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#2)]  
  
 この例の 2 番目の部分にアクセスする方法を示しています、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.AddVerb%2A> プロパティを有効または無効にすること、トグル ボタンを使用してプログラムでします。  
  
 [!code-csharp[WebParts\_CatalogZoneBase\_Overview\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#3)]
 [!code-vb[WebParts\_CatalogZoneBase\_Overview\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#3)]  
  
 ブラウザーでページを読み込むときに選択できます **カタログ** カタログ表示モードに切り替えるドロップ ダウン リストからです。 カタログが表示されているときに独自のテキストを調べることができます、 <xref:System.Web.UI.WebControls.Button> 、add verb のコントロールがクリックしてできる、 **を有効または無効にする動詞** apply 動詞をプログラムでアクセスできることを示すためにボタンをクリックします。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartVerb" />
      </Docs>
    </Member>
    <Member MemberName="CatalogPartChrome">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.CatalogPartChrome CatalogPartChrome { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.CatalogPartChrome CatalogPartChrome" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CatalogPartChrome" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.CatalogPartChrome</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>インスタンスへの参照を取得、 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartChrome" /> クラスに関連付けられている、 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> ゾーンです。</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartChrome" /> ゾーンに関連付けられています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogPartChrome%2A> メソッドが呼び出されると、1 つのインスタンスを作成、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartChrome> とこのインスタンスとクラスを使用してすべての周辺機器のユーザー インターフェイス \(UI\) 要素 \(クロムとも呼ばれます\) をレンダリングする <xref:System.Web.UI.WebControls.WebParts.CatalogPart> ゾーン内のコントロールです。  
  
 個々 の chrome 要素 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロールが、枠線とタイトルのテキストが含まれます。<xref:System.Web.UI.WebControls.WebParts.CatalogPart> Web パーツ コントロール セットに付属するコントロールでは、既定では、ヘッダーの動詞はありません。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogPartChrome" />
      </Docs>
    </Member>
    <Member MemberName="CatalogParts">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.CatalogPartCollection CatalogParts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.CatalogPartCollection CatalogParts" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CatalogParts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.CatalogPartCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>すべてのコレクションを取得、 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> に含まれるコントロール、 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> ゾーンです。</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection" /> を含むすべての個人 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> ゾーン内のコントロールです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CatalogParts%2A> プロパティはすべてのコレクションへの参照を提供、 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> ゾーン内のコントロールです。 両方を参照して、 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> Web パーツ コントロール セット、および任意のカスタム コントロール <xref:System.Web.UI.WebControls.WebParts.CatalogPart> をゾーンに追加されたコントロール。  
  
 別のメソッドにアクセスするときに最初に、コレクションが作成、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CatalogParts%2A> プロパティ、およびプロパティの呼び出し、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogParts%2A> メソッドです。  
  
> [!NOTE]
>  注意してください <xref:System.Web.UI.WebControls.WebParts.CatalogPart> のコレクションに追加されている <xref:System.Web.UI.WebControls.WebParts.CatalogPart> の実装内のコントロール、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogParts%2A> メソッドには、ID プロパティに割り当てられている値が必要です。、、コレクションに割り当てるときに例外がスローされるそれ以外の場合、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CatalogParts%2A> プロパティです。  
  
   
  
## 例  
 次のコード例は、アクセスする方法を説明、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CatalogParts%2A> プロパティ プログラムを使用しています。 例を実行するために必要な完全なコードの例」のセクションを参照してください、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> クラスの概要です。  
  
 このコード例へのアクセス方法を示しています、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CatalogParts%2A> プロパティをコレクションを反復処理し、すべての Id の一覧表示、 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> ゾーン内のコントロールです。  
  
 [!code-csharp[WebParts\_CatalogZoneBase\_Overview\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#4)]
 [!code-vb[WebParts\_CatalogZoneBase\_Overview\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#4)]  
  
 ブラウザーでページを読み込むときに選択できます **カタログ** カタログ表示モードに切り替えるドロップ ダウン リストからです。 カタログが表示されている場合は、クリックして、 **されたら** を示すためにボタン方法、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CatalogParts%2A> プロパティにアクセスすることができます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">A <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 、ID プロパティに割り当てられた値をしなかった、コレクションに追加されます。</exception>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="protected override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.Close" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>カタログの表示モードから通常のブラウズ モードの Web ページに切り替えます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.Close%2A> メソッドは、カタログ内の現在選択されているコントロールを無視します。 呼び出すだけ、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> コントロールを Web ページをブラウズ モードを返します。  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode" />
        <altmember cref="F:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode" />
      </Docs>
    </Member>
    <Member MemberName="CloseVerb">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.WebPartVerb CloseVerb { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartVerb CloseVerb" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CloseVerb" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartVerb</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>参照を取得、 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartVerb" /> カタログ ユーザー インターフェイス \(UI\) を閉じて、ページを通常のブラウズ モードに戻しますにエンドユーザーを有効にするオブジェクト。</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartVerb" /> エンドユーザーが Web ページ上のカタログの UI を閉じます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Close 動詞がによって参照される、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CloseVerb%2A> から派生したコントロールのプロパティ、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> クラスです。  
  
 ユーザーは、ゾーンのフッターに close 動詞をクリックできます。 ユーザーがクリックすると、close 動詞、 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 、ユーザーが選択したコントロールは無視される、UI を閉じると、カタログ、およびページは、通常のブラウズ モードに戻ります。  
  
 Close 動詞は、ゾーン全体のレベルでのアクションが適用されることを意味する、ゾーン レベル コントロールです。 ユーザーには、close 動詞がクリックするは、選択されてがページに追加していないすべてのコントロールは無視され、カタログを閉じると、ページは、ブラウズ モードに戻ります。  
  
   
  
## 例  
 次のコード例は、アクセスする方法を説明、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CloseVerb%2A> プロパティ宣言とプログラムを使用しています。 例を実行するために必要な完全なコードの例」のセクションを参照してください、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> クラスの概要です。  
  
 このコード例の最初の部分にアクセスする方法を示しています、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CloseVerb%2A> Web ページで、宣言します。 この例をカスタマイズ、 <xref:System.Web.UI.WebControls.WebParts.WebPartVerb.Description%2A> 動詞のプロパティです。  
  
 [!code-csharp[WebParts\_CatalogZoneBase\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#2)]
 [!code-vb[WebParts\_CatalogZoneBase\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#2)]  
  
 この例の 2 番目の部分にアクセスする方法を示しています、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CloseVerb%2A> プロパティを有効または無効にすること、トグル ボタンを使用してプログラムでします。  
  
 [!code-csharp[WebParts\_CatalogZoneBase\_Overview\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#3)]
 [!code-vb[WebParts\_CatalogZoneBase\_Overview\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#3)]  
  
 ブラウザーでページを読み込むときに選択できます **カタログ** カタログ表示モードに切り替えるドロップ ダウン リストからです。 カタログを表示、上にマウス ポインターを置くことによって、 **閉じる** ボタン、ツールヒントにその説明のテキストを確認できます。 クリックすることも、 **を有効または無効にする動詞** close 動詞をプログラムでアクセスできることを示すためにボタンをクリックします。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartVerb" />
      </Docs>
    </Member>
    <Member MemberName="CreateCatalogPartChrome">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.WebParts.CatalogPartChrome CreateCatalogPartChrome ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.CatalogPartChrome CreateCatalogPartChrome() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogPartChrome" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.CatalogPartChrome</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>インスタンスを作成、 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartChrome" /> 周辺機器のユーザー インターフェイス \(UI\) 要素のレンダリングに使用されるオブジェクト <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> ゾーン内のコントロールです。</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartChrome" /> ゾーンの周辺機器の UI 要素を表示します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogPartChrome%2A> メソッドは <xref:System.Web.UI.WebControls.WebParts.CatalogPartChrome> オブジェクトを返します。 個々 の chrome 要素 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロールが、枠線とタイトルのテキストが含まれます。<xref:System.Web.UI.WebControls.WebParts.CatalogPart> Web パーツ コントロール セットに付属するコントロールでは、既定では、ヘッダーの動詞はありません。 ただし、設定することは、 <xref:System.Web.UI.WebControls.WebParts.Part.ChromeState%2A> のプロパティ、 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロールを最小化し、必要に応じて、コントロールをプログラムで復元することができます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartChrome" />
      </Docs>
    </Member>
    <Member MemberName="CreateCatalogParts">
      <MemberSignature Language="C#" Value="protected abstract System.Web.UI.WebControls.WebParts.CatalogPartCollection CreateCatalogParts ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.CatalogPartCollection CreateCatalogParts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogParts" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.CatalogPartCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>提供の作成の詳細を処理するゾーンを派生する基本メソッド宣言をオーバーライドできます、 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> ゾーンに含まれるコントロール。</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection" /> のコレクションを含む <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> ゾーンに関連付けられているコントロール。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogParts%2A> メソッドは実装を提供します。 派生クラスで実装するためのものでは、コレクションのインスタンスを作成するために使用する必要があります <xref:System.Web.UI.WebControls.WebParts.CatalogPart> ホストする Web ページがカタログ モードになったときに、ゾーンに含まれるコントロール。<xref:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts%2A?displayProperty=fullName> メソッドの実装の 1 つの例には、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogParts%2A> メソッドです。  
  
> [!NOTE]
>  注意してください <xref:System.Web.UI.WebControls.WebParts.CatalogPart> のコレクションに追加されている <xref:System.Web.UI.WebControls.WebParts.CatalogPart> の実装内のコントロール、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogParts%2A> メソッドには、ID プロパティに割り当てられている値が必要です。、、コレクションに割り当てるときに例外がスローされるそれ以外の場合、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CatalogParts%2A> プロパティです。  
  
 このメソッドを作成できます、 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> いくつかのソースからのコントロール: 内に永続化形式で宣言されているコントロール、 <xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart> コントロール、または XML ファイルやデータベースなどのさまざまなストレージ メカニズムに保存されているコントロール。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Developers who create custom <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> controls should inherit from the <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> or <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" /> classes, and override this method if they want to create a custom <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartChrome" /> object to render their custom <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> controls.</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts" />
      </Docs>
    </Member>
    <Member MemberName="CreateChildControls">
      <MemberSignature Language="C#" Value="protected override void CreateChildControls ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void CreateChildControls() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateChildControls" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>子のセットに関連付けられたコントロールを作成、 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> ゾーンです。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EmptyZoneText">
      <MemberSignature Language="C#" Value="public override string EmptyZoneText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EmptyZoneText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.CatalogZoneBase.EmptyZoneText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ゾーンにコントロールが含まれないときに表示されるメッセージを取得または設定します。</summary>
        <value>空のゾーンに表示されるメッセージを含む文字列。 カルチャ固有の既定の文字列は、.NET Framework によって提供されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The string value of the <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.EmptyZoneText%2A> property is displayed when a Web page enters catalog mode, if the <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> zone contains no <xref:System.Web.UI.WebControls.WebParts.CatalogPart> controls.  
  
   
  
## 例  
 The following code example demonstrates how to use the <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.EmptyZoneText%2A> property declaratively. For the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> class overview.  
  
 Notice that the code example declares two **languageKeyword tag is not supported!!!!**  
 elements, and the second one does not declare any <xref:System.Web.UI.WebControls.WebParts.CatalogPart> controls, though it does assign a value to the <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.EmptyZoneText%2A> property.  
  
 [!code-csharp[WebParts\_CatalogZoneBase\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#2)]
 [!code-vb[WebParts\_CatalogZoneBase\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#2)]  
  
 When you load the page in a browser, you can select **ui tag is not supported!!!!**  
 from the drop\-down list to switch to catalog display mode. When the catalog is visible, notice that below the first zone, which contains two <xref:System.Web.UI.WebControls.WebParts.CatalogPart> controls, the second zone appears, and displays the contents of the <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.EmptyZoneText%2A> property because it contains no controls.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebZone.EmptyZoneText" />
      </Docs>
    </Member>
    <Member MemberName="HeaderText">
      <MemberSignature Language="C#" Value="public override string HeaderText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HeaderText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.CatalogZoneBase.HeaderText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ゾーンのヘッダー領域のテキストを取得または設定します。</summary>
        <value>ゾーンのヘッダー テキストを含む文字列。 カルチャ固有の既定の文字列は、.NET Framework によって提供されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 文字列値、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.HeaderText%2A> のヘッダー領域にプロパティを表示、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> されるゾーン、ゾーンの最上部には、です。 テキスト、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.HeaderText%2A> カタログ モードに入ると、ページとカタログのユーザー インターフェイス \(UI\) が表示されるプロパティが表示されます。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.HeaderText%2A> プロパティ宣言またはプログラムによって。 例を実行するために必要な完全なコードの例」のセクションを参照してください、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> クラスの概要です。  
  
 コード例に、2 つを宣言することを確認 `<asp:catalogzone>` 要素。 2 番目の例で宣言されていない <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 、コントロールが、両方の値を宣言、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.HeaderText%2A> プロパティです。  
  
 [!code-csharp[WebParts\_CatalogZoneBase\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#2)]
 [!code-vb[WebParts\_CatalogZoneBase\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#2)]  
  
 値のコード例の 2 番目の部分で、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.HeaderText%2A> 最初のゾーン内のプロパティが別の値に割り当てられたプログラムを使用しています。  
  
 [!code-csharp[WebParts\_CatalogZoneBase\_Overview\#5](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#5)]
 [!code-vb[WebParts\_CatalogZoneBase\_Overview\#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#5)]  
  
 ブラウザーでページを読み込むときに選択できます **カタログ** カタログ表示モードに切り替えるドロップ ダウン リストからです。 カタログが表示されている場合は、それぞれの値に注意してください <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.HeaderText%2A> 各ゾーンのヘッダー領域にプロパティが表示されます。 クリックすることができます、 **ゾーン テキストのプロパティの設定** ボタン、および <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.HeaderText%2A> 上のゾーンのプロパティが、コードでそれに割り当てられた値に設定します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebZone.HeaderText" />
      </Docs>
    </Member>
    <Member MemberName="InstructionText">
      <MemberSignature Language="C#" Value="public override string InstructionText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InstructionText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.CatalogZoneBase.InstructionText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはエンドユーザーの指示を提供するゾーンのテキストを設定します。</summary>
        <value>エンドユーザーの指示を格納する文字列。 既定では、カルチャ固有の文字列は、Web パーツ コントロール セットによって提供されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 文字列値、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.InstructionText%2A> のヘッダー領域のすぐ下にプロパティが表示される、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> ゾーンです。 テキスト、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.InstructionText%2A> カタログ モードに入ると、ページとカタログのユーザー インターフェイス \(UI\) が表示されるプロパティが表示されます。  
  
 目的、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.InstructionText%2A> プロパティは、カタログの UI が表示されるときの動作に関する一般的な手順をユーザーに提供します。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.InstructionText%2A> プロパティ宣言またはプログラムによって。 例を実行するために必要な完全なコードの例」のセクションを参照してください、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> クラスの概要です。  
  
 コード例に、2 つを宣言することを確認 `<asp:catalogzone>` 要素、および 1 つ目の値を宣言して、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.InstructionText%2A> プロパティです。  
  
 [!code-csharp[WebParts\_CatalogZoneBase\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#2)]
 [!code-vb[WebParts\_CatalogZoneBase\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#2)]  
  
 値のコード例の 2 番目の部分で、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.InstructionText%2A> 最初のゾーン内のプロパティが別の値に割り当てられたプログラムを使用しています。  
  
 [!code-csharp[WebParts\_CatalogZoneBase\_Overview\#5](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#5)]
 [!code-vb[WebParts\_CatalogZoneBase\_Overview\#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#5)]  
  
 ブラウザーでページを読み込むときに選択できます **カタログ** カタログ表示モードに切り替えるドロップ ダウン リストからです。 カタログが表示されているときの値に注意してください、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.InstructionText%2A> 各ゾーンのヘッダー領域にプロパティが表示されます。 クリックすることができます、 **ゾーン テキストのプロパティの設定** ボタン、および <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.InstructionText%2A> 上のゾーンのプロパティが、コードでそれに割り当てられた値に設定します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ToolZone.InstructionText" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateCatalogParts">
      <MemberSignature Language="C#" Value="protected void InvalidateCatalogParts ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvalidateCatalogParts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.InvalidateCatalogParts" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コレクションを破棄 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> コントロールに関連付けられている、 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> ゾーンです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.InvalidateCatalogParts%2A> 場合、派生クラスでメソッドを呼び出すことができる一連の <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロールに関連付けられている、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> いくつかの理由から、ゾーンが変更され、派生クラスの更新の一覧を取得する必要が <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロールです。 派生クラスが最初に呼び出す必要があります <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.InvalidateCatalogParts%2A> 、現在のコレクションとし、基本クラスを破棄するを呼び出す <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogParts%2A> 更新済みのコレクションを作成するために必要とします。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogParts" />
      </Docs>
    </Member>
    <Member MemberName="LoadControlState">
      <MemberSignature Language="C#" Value="protected override void LoadControlState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void LoadControlState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.LoadControlState(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">以前に保存された状態データ。</param>
        <summary>コントロールのビュー ステートが無効になっていても、ポストバック間で永続化する必要がありますコントロールのプロパティの前回のページ要求の状態を読み込みます。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="savedState" /> 制御が有効な状態ではありません。</exception>
        <altmember cref="M:System.Web.UI.Control.LoadControlState(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="LoadPostData">
      <MemberSignature Language="C#" Value="protected virtual bool LoadPostData (string postDataKey, System.Collections.Specialized.NameValueCollection postCollection);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LoadPostData(string postDataKey, class System.Collections.Specialized.NameValueCollection postCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="postDataKey" Type="System.String" />
        <Parameter Name="postCollection" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="postDataKey">コントロールのキー識別子。</param>
        <param name="postCollection">サーバーにポスト名前\/値ペアのコレクションです。</param>
        <summary>プロセスのチェック ボックスをオンの状態、 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> ページがサーバーにポストされたときに、カタログ内のコントロールです。</summary>
        <returns>オーバーライドされる基本メソッドとは異なり、このメソッドは常に返します <see langword="false" />, クラスが変更イベントを公開しないためです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、のコレクションを反復処理 <xref:System.Web.UI.WebControls.CheckBox> 決定するためのコントロール <xref:System.Web.UI.WebControls.WebParts.WebPart> カタログの他のサーバー コントロールは、ユーザーが選択されているか。 選択した項目は、Web ページに対応するコントロールを追加し、処理は、内部の配列に割り当てられます。  
  
 このメソッドは、コードから呼び出せる設計されていませんWeb パーツ コントロール セットによって内部的に使用されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.IPostBackDataHandler.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.LoadViewState(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">以前に保存された状態データ。</param>
        <summary>以前に保存したゾーンの状態情報を読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、主に、.NET Framework インフラストラクチャによって使用され、コードから直接使用するものではありません。 ただし、カスタム サーバー コントロールがそのビューステートを復元する方法を指定するには、このメソッドをオーバーライドすることができます。 詳細については、「[ASP.NET State Management Overview](http://msdn.microsoft.com/ja-jp/0218d965-5d30-445b-b6a6-8870e70e63ce)」を参照してください。  
  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.LoadViewState%2A> メソッドが最初に、既存の状態情報を読み込む基本メソッドを呼び出します。 次に、add verb、close 動詞に関する状態情報を格納しているビュー ステート データ オブジェクトを追加、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.PartLinkStyle%2A> オブジェクト、および <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectedPartLinkStyle%2A> オブジェクトです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">サイズ、 <paramref name="savedState" /> オブジェクトが、現在のビュー ステートのサイズと等しくないです。</exception>
        <altmember cref="M:System.Web.UI.Control.LoadViewState(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.OnInit(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>ページがコントロールの状態を要求ページ オブジェクトを登録します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.OnPreRender(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>発生させる、 <see cref="E:System.Web.UI.Control.PreRender" /> イベントとポストバックが要求されるように、ページがオブジェクトのレジスタ。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PartLinkStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.Style PartLinkStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.Style PartLinkStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.CatalogZoneBase.PartLinkStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>スタイル属性を含むオブジェクトを取得、 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> ゾーンで現在選択されていないコントロールです。</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.Style" /> 現在選択されていないコントロールのスタイル属性を格納しています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 、ゾーンの種類ごとにリンクが表示されます <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロール: <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>, 、<xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart>, 、および <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>です。 ユーザーが、対応するリンクのいずれかの <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロールが、選択したコントロールになるし、その選択したコントロールに含まれる子コントロールが表示されます。  
  
 <xref:System.Web.UI.WebControls.Style> によって参照されるオブジェクト、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.PartLinkStyle%2A> プロパティのスタイル属性を格納する、 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 現在選択されていないコントロールです。 プロパティによって参照されるオブジェクトは、読み取り専用はそのまま使用する、選択されていないの基になるスタイルの特性を設定する <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロールです。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.PartLinkStyle%2A> プロパティ宣言またはプログラムによって。 例を実行するために必要な完全なコードの例」のセクションを参照してください、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> クラスの概要です。  
  
 コード例の最初の部分を宣言して 2 つのことに注意してください。 `<asp:catalogzone>` 要素、および 1 つ目の値を宣言して、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.PartLinkStyle%2A> プロパティです。  
  
 [!code-csharp[WebParts\_CatalogZoneBase\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#2)]
 [!code-vb[WebParts\_CatalogZoneBase\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#2)]  
  
 選択されていないテキストの色をコード例の 2 番目の部分で <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロールが別の値に設定します。  
  
 [!code-csharp[WebParts\_CatalogZoneBase\_Overview\#7](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#7)]
 [!code-vb[WebParts\_CatalogZoneBase\_Overview\#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#7)]  
  
 ブラウザーでページを読み込むときに選択できます **カタログ** カタログ表示モードに切り替えるドロップ ダウン リストからです。 カタログが表示されている場合は、選択されていないのスタイル属性に注意してください <xref:System.Web.UI.WebControls.WebParts.CatalogPart> ゾーン内のコントロールが表示されている \(既定では、選択した <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロールは、 <xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart> コントロール\)。 クリックすることができます、 **一部のリンクのスタイルを変更する** 選択されていないコントロールのテキストの色を変更するボタンをクリックします。 また、コントロールが選択したときのスタイル属性の変化を確認、選択されていないコントロールのリンクをクリックします。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="RaisePostBackEvent">
      <MemberSignature Language="C#" Value="protected override void RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RaisePostBackEvent(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">A <see cref="T:System.String" /> イベントの引数を格納しています。</param>
        <summary>ゾーン動詞のいずれかに関連付けられているアクションを実行するか、サーバーへのポストバック イベントが発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 `eventArgument` ことは、add verb または close 動詞がクリックされた、パラメーターのデータを示します、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RaisePostBackEvent%2A> メソッドを追加するなどの動詞に関連付けられたアクションが実行 <xref:System.Web.UI.WebControls.WebParts.WebPart> \] ページで、またはカタログを終了するコントロール。 そのメソッドは、その他の何らかの理由で呼び出されるが場合、は、サーバーにポストバック イベントを生成する基本のメソッドが呼び出されます。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>If you want to add custom verbs to a <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> zone, you need to override the <see cref="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RaisePostBackEvent(System.String)" /> method to handle the event if a user clicks a custom verb.</para>
        </block>
        <altmember cref="M:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.Web.UI.HtmlTextWriter" /> 、ゾーンの内容を受け取る。</param>
        <summary>指定したゾーンをレンダリング <see cref="T:System.Web.UI.HtmlTextWriter" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.Render%2A> メソッドから基本メソッドをオーバーライドして、 <xref:System.Web.UI.WebControls.WebControl> クラスを呼び出して、 <xref:System.Web.UI.Page.VerifyRenderingInServerForm%2A> メソッドで、実行時に、ゾーンのコントロールの HTML フォームが表示されることを確認します。 検証後、メソッドは、ゾーンの残りの内容を表示します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartZoneBase.Render(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="RenderBody">
      <MemberSignature Language="C#" Value="protected override void RenderBody (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RenderBody(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RenderBody(System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.Web.UI.HtmlTextWriter" /> 、ゾーンの本文の内容を受け取る。</param>
        <summary>派生したゾーンの本体領域をレンダリングする基本メソッドをオーバーライドして、 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> クラスです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RenderBody%2A> メソッドの本体領域の表示、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> ゾーンでは、ヘッダーおよびフッター領域間でのメイン コンテンツ領域は、含む <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロールです。  
  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RenderBody%2A> メソッドで基本メソッドをオーバーライドして、 <xref:System.Web.UI.WebControls.WebParts.WebZone> レイアウトとスタイルに対応する特殊な表示属性を提供するクラスがのみに適用 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> ゾーンです。 メソッドは、本文の内容全体を含むテーブルを出力し、そのテーブル内に設定など、さまざまな状態に応じて別の属性の値数 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロールは、ゾーンにします。 複数ある場合 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロール、リンクが作成された各コントロールについて、および現在選択されているコントロールの内容のみが表示されます。 特別なスタイル属性が設定されている、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CatalogPartChrome%2A> 、選択したプロパティ <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロールは、現在選択されていないものとします。  
  
 ある場合ない <xref:System.Web.UI.WebControls.WebParts.CatalogPart> ゾーンでは、コントロール、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RenderBody%2A> メソッドの値を表示する、 <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.EmptyZoneText%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.EditorZoneBase.RenderBody(System.Web.UI.HtmlTextWriter)" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebZone.RenderBody(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="RenderCatalogPartLinks">
      <MemberSignature Language="C#" Value="protected virtual void RenderCatalogPartLinks (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RenderCatalogPartLinks(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RenderCatalogPartLinks(System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.Web.UI.HtmlTextWriter" /> ゾーンのコントロールへのリンクの内容を受け取る。</param>
        <summary>リンクを個別にレンダリング <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> コントロールで、 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> ゾーンです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RenderCatalogPartLinks%2A> メソッドでは、リンクを表示する個々 の <xref:System.Web.UI.WebControls.WebParts.CatalogPart> が複数ある場合、ゾーン内の制御 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロールです。  
  
 現在選択されているリンク <xref:System.Web.UI.WebControls.WebParts.CatalogPart> から選択されていないコントロールできるように、コントロールが異なる方法で表示します。 開発者を使用してコントロールを選択し、選択されていないリンクのスタイル属性を設定することができます、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectedPartLinkStyle%2A> と <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.PartLinkStyle%2A> プロパティそれぞれします。  
  
 リンク、 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> はゾーン内のコントロールがナビゲーションではないコントロールのユーザー インターフェイス \(UI\) を表示するためです。 コントロールへのリンクをクリックすると、他の表示されているコントロールの UI が表示されていない、選択したコントロールの UI が表示されます。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>If you create a custom class that inherits from the <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> class, you can optionally override the <see cref="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RenderCatalogPartLinks(System.Web.UI.HtmlTextWriter)" /> method. This method gives you programmatic control over how the links to <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> controls in your zone are rendered.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RenderFooter">
      <MemberSignature Language="C#" Value="protected override void RenderFooter (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RenderFooter(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RenderFooter(System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.Web.UI.HtmlTextWriter" /> ゾーンのフッター領域を表示します。</param>
        <summary>フッター領域をレンダリングする <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> ゾーンです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 フッター、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> ゾーンは、add verb と閉じる動詞などゾーン レベルの動詞を含むゾーンの下の領域です。 基になるマークアップでは、フッターは、HTML テーブルのセルだけです。  
  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RenderFooter%2A> メソッドは、最初に、フッターにスタイル属性を作成しを呼び出して、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RenderVerbs%2A> メソッドは、追加のレンダリングを動詞を閉じます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RenderVerbs(System.Web.UI.HtmlTextWriter)" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebZone.RenderFooter(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="RenderVerbs">
      <MemberSignature Language="C#" Value="protected override void RenderVerbs (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RenderVerbs(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RenderVerbs(System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.Web.UI.HtmlTextWriter" /> ゾーンの動詞を表示します。</param>
        <summary>レンダリングの動詞のフッター領域に、 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> ゾーンです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RenderVerbs%2A> メソッドは、add verb とのフッター領域内で閉じる動詞を表示、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> ゾーンです。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>The <see cref="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RenderVerbs(System.Web.UI.HtmlTextWriter)" /> method does not handle the rendering for any custom <see cref="T:System.Web.UI.WebControls.WebParts.WebPartVerb" /> objects that a developer adds to a custom <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> zone. If you want to add custom verbs to a <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> class, you must inherit from the <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> class, and override the <see cref="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RenderVerbs(System.Web.UI.HtmlTextWriter)" /> method, which you can use to render the custom verbs for your zone. You must also override the <see cref="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RaisePostBackEvent(System.String)" /> method to handle the event when a custom verb is clicked by a user.</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.ToolZone.RenderVerbs(System.Web.UI.HtmlTextWriter)" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RaisePostBackEvent(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SaveControlState">
      <MemberSignature Language="C#" Value="protected override object SaveControlState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance object SaveControlState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SaveControlState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>すべての変更を保存、 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> Web ページがサーバーにポストされた後に発生するコントロールの状態。</summary>
        <returns>
          <see cref="T:System.Object" /> コントロールの状態データが含まれています。 メソッドが戻るかどうかがない状態の変更、 <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SaveControlState%2A> メソッドは、状態データを \(インデックスまたはキーワードの場合\) などのコントロールの操作に不可欠であり、コントロールのビュー ステート データとは別に関係します。  
  
 メソッドは、まず、コントロールの既存の状態データを保存する基本メソッドを呼び出します。 次と判断したかどうか、 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> をチェックして、ゾーン内のコントロールは現在選択するかどうか、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectedCatalogPartID%2A> 値を持つプロパティです。 選択したコントロールがある場合、このメソッドは、選択したコントロールの状態データで既存の状態データを更新し、すべての状態データを返します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>You can optionally override the <see cref="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SaveControlState" /> method in a derived class so that you can update the saved control state for other custom objects in the zone.</para>
        </block>
        <altmember cref="M:System.Web.UI.Control.SaveControlState" />
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SaveViewState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ページがサーバーにポスト バックされた後で発生したビューステートの変更を保存します。</summary>
        <returns>ゾーン コントロールの現在のビュー ステートを返します。 このメソッドが戻るかどうかビューステートがゾーンに関連付けられていない、 <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SaveViewState%2A> メソッドに関連付けられたビューステートを保存する基本メソッドを呼び出す、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> ゾーンです。 次に、追加したり、閉じる動詞のビューステートを保存、 <xref:System.Web.UI.WebControls.Style> オブジェクトに関連付けられている、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.PartLinkStyle%2A> と <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectedPartLinkStyle%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Control.SaveViewState" />
      </Docs>
    </Member>
    <Member MemberName="SelectedCatalogPartID">
      <MemberSignature Language="C#" Value="public string SelectedCatalogPartID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectedCatalogPartID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectedCatalogPartID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在選択されている識別子としての文字列の設定を取得または <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> ゾーン内のコントロールです。</summary>
        <value>現在選択されているコントロールの識別子として機能する文字列。 既定のコントロールの値は <see cref="P:System.Web.UI.Control.ID" /> プロパティです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectedCatalogPartID%2A> プロパティでは、現在選択されている任意の識別子を設定できます。 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロールです。 これは、コントロールは変更されません <xref:System.Web.UI.Control.ID%2A> プロパティの値、プログラムの目的に合わせてこのプロパティを使用できるようにします。 たとえば、常にする必要がある場合の遂行で現在選択されているプログラムで操作 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロールでは、このプロパティで事前に設定する既知の値をそのコントロールにアクセスできます。  
  
 テーマまたはスタイル シートのテーマでは、このプロパティを設定できません。 詳細については、<xref:System.Web.UI.ThemeableAttribute> および [ASP.NET Themes Overview](http://msdn.microsoft.com/ja-jp/5df3ebbd-d46c-4502-9406-02f9df4ef2c3) を参照してください。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectedCatalogPartID%2A> プロパティ宣言またはプログラムによって。 例を実行するために必要な完全なコードの例」のセクションを参照してください、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> クラスの概要です。  
  
 コード例の最初の部分を宣言して 2 つのことに注意してください。 `<asp:catalogzone>` 要素、および 1 つ目の値を宣言して、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectedCatalogPartID%2A> プロパティです。  
  
 [!code-csharp[WebParts\_CatalogZoneBase\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#2)]
 [!code-vb[WebParts\_CatalogZoneBase\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#2)]  
  
 コード例の 2 番目の部分では、テキスト、値の <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectedCatalogPartID%2A> 現在選択されているコントロールのプロパティが表示されます。  
  
 [!code-csharp[WebParts\_CatalogZoneBase\_Overview\#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#6)]
 [!code-vb[WebParts\_CatalogZoneBase\_Overview\#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#6)]  
  
 ブラウザーでページを読み込むときに選択できます **カタログ** カタログ表示モードに切り替えるドロップ ダウン リストからです。 カタログが表示されている場合は、いずれかへのリンクのクリックして、 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロールを選択します。 をクリックし、 **選択 CatalogPart ID を表示する** プロパティ値を表示するボタンをクリックします。 プロパティの値は、ゾーンの宣言によって設定された値であることを確認します。 もう一方を選択した場合 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> ゾーン内のコントロールを同じ値の値になります、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectedCatalogPartID%2A> を選択すると、各コントロールのプロパティです。 値が設定されていない場合、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectedCatalogPartID%2A> プロパティには、既定値は、の値では常に、 <xref:System.Web.UI.Control.ID%2A> 現在選択されているコントロールのプロパティです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedPartLinkStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.Style SelectedPartLinkStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.Style SelectedPartLinkStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectedPartLinkStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>スタイル属性を含むオブジェクトを取得、 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> ゾーンで現在選択されているコントロール。</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.Style" /> 現在選択されているコントロールのスタイル属性を格納しています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 、ゾーンの種類ごとにリンクが表示されます <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロール: <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>, 、<xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart>, 、および <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>です。 ユーザーが、対応するリンクのいずれかの <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロールが、選択したコントロールになるし、その選択したコントロールに含まれる子コントロールが表示されます。  
  
 <xref:System.Web.UI.WebControls.Style> によって参照されるオブジェクト、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectedPartLinkStyle%2A> プロパティへのリンクのスタイル属性を格納する、 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 現在選択されているコントロール。 プロパティによって参照されるオブジェクトは、読み取り専用はそのまま使用する、選択した基になるスタイルの特性を設定する <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロールです。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectedPartLinkStyle%2A> プロパティ宣言またはプログラムによって。 例を実行するために必要な完全なコードの例」のセクションを参照してください、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> クラスの概要です。  
  
 コード例の最初の部分を宣言して 2 つのことに注意してください。 `<asp:catalogzone>` 要素、および 1 つ目の値を宣言して、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectedPartLinkStyle%2A> プロパティです。  
  
 [!code-csharp[WebParts\_CatalogZoneBase\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#2)]
 [!code-vb[WebParts\_CatalogZoneBase\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#2)]  
  
 コード例の 2 番目の部分で、テキストの色、選択した <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロールが別の値に設定されています。  
  
 [!code-csharp[WebParts\_CatalogZoneBase\_Overview\#7](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#7)]
 [!code-vb[WebParts\_CatalogZoneBase\_Overview\#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#7)]  
  
 ブラウザーでページを読み込むときに選択できます **カタログ** カタログ表示モードに切り替えるドロップ ダウン リストからです。 カタログが表示されている、一覧内のいずれかのリンクをクリックして <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロール、および選択したコントロールのスタイル属性に注意してください。 クリックすることができます、 **一部のリンクのスタイルを変更する** を選択したコントロールのテキストの色を変更するボタンをクリックします。 また、コントロールが選択したときのスタイル属性の変化を確認、選択されていないコントロールのリンクをクリックします。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="SelectTargetZoneText">
      <MemberSignature Language="C#" Value="public virtual string SelectTargetZoneText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectTargetZoneText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectTargetZoneText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはコントロールの横のテキストをユーザーに選択したコントロールを追加するには、どのゾーンを選択できるようにカタログ ユーザー インターフェイス \(UI\) に設定します。</summary>
        <value>ゾーンの選択コントロールの横に表示するテキストを含む文字列です。 カルチャ固有の既定の文字列は、.NET Framework によって提供されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ユーザーがいずれかを選択できます、カタログの UI が最初に表示されたときに、 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> などのコントロール <xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart>, 、格納している <xref:System.Web.UI.WebControls.WebParts.WebPart> または Web ページに追加できるその他のサーバー コントロール。 ユーザーが 1 つまたは複数のコントロールを選択しを使用して、 <xref:System.Web.UI.WebControls.DropDownList> カタログのフッター領域で管理しを選択し、 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> \] ページで選択したサーバー コントロールの配置先となるコントロール。 テキスト値、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectTargetZoneText%2A> の横にプロパティを表示、 <xref:System.Web.UI.WebControls.DropDownList> 単純な命令と同様に制御します。  
  
 このプロパティの値を設定すると、デザイナーのツールを使用してリソース ファイルに自動的に保存できます。 詳細については、<xref:System.ComponentModel.LocalizableAttribute> および [ASP.NET Globalization and Localization](http://msdn.microsoft.com/ja-jp/8ef3838e-9d05-4236-9dd0-ceecff9df80d) を参照してください。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectTargetZoneText%2A> プロパティ宣言またはプログラムによって。 例を実行するために必要な完全なコードの例」のセクションを参照してください、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> クラスの概要です。  
  
 コード例の最初の部分を宣言して 2 つのことに注意してください。 `<asp:catalogzone>` 要素、および 1 つ目の値を宣言して、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectTargetZoneText%2A> プロパティです。  
  
 [!code-csharp[WebParts\_CatalogZoneBase\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#2)]
 [!code-vb[WebParts\_CatalogZoneBase\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#2)]  
  
 値のコード例の 2 番目の部分で、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectTargetZoneText%2A> プロパティをプログラムで変更します。  
  
 [!code-csharp[WebParts\_CatalogZoneBase\_Overview\#5](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#5)]
 [!code-vb[WebParts\_CatalogZoneBase\_Overview\#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#5)]  
  
 ブラウザーでページを読み込むときに選択できます **カタログ** カタログ表示モードに切り替えるドロップ ダウン リストからです。 カタログが表示されている場合は、横に表示するテキストに注意してください、 <xref:System.Web.UI.WebControls.DropDownList> カタログのフッター内のコントロールです。 クリックして、 **ゾーン テキストのプロパティの設定** プロパティのテキスト値を変更するボタンをクリックします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowCatalogIcons">
      <MemberSignature Language="C#" Value="public virtual bool ShowCatalogIcons { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowCatalogIcons" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.CatalogZoneBase.ShowCatalogIcons" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはカタログ内のサーバー コントロールがカタログに対応するアイコンを表示するかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" /> カタログ内のサーバー コントロールに関連付けられたアイコンを表示する場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールおよびその他のサーバー コントロールとしてラップされている <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> 実行時にコントロールがある、 <xref:System.Web.UI.WebControls.WebParts.WebPart.CatalogIconImageUrl%2A> プロパティです。 このプロパティの値は、コントロールのカタログ内のコントロールを表すために、アイコンとして使用するイメージの URL です。  
  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.ShowCatalogIcons%2A> プロパティは、アイコンに関連付けられているかどうかを示す <xref:System.Web.UI.WebControls.WebParts.WebPart> され、カタログの他のサーバー コントロールが表示されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.CatalogIconImageUrl" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackDataHandler.LoadPostData">
      <MemberSignature Language="C#" Value="bool IPostBackDataHandler.LoadPostData (string postDataKey, System.Collections.Specialized.NameValueCollection postCollection);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, class System.Collections.Specialized.NameValueCollection postCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.System#Web#UI#IPostBackDataHandler#LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="postDataKey" Type="System.String" />
        <Parameter Name="postCollection" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="postDataKey">コントロールのキー識別子。</param>
        <param name="postCollection">サーバーにポスト名前\/値ペアのコレクションです。</param>
        <summary>実装して、 <see cref="M:System.Web.UI.IPostBackDataHandler.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" /> メソッドを呼び出して、 <see cref="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" /> のメソッド、 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> クラスです。</summary>
        <returns>
          <see langword="true" /> データが変更されたことを示すために、イベントを発生させる場合それ以外の場合 <see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> のインスタンスが <xref:System.Web.UI.IPostBackDataHandler> インターフェイスにキャストされる場合にのみ、使用できます。 メソッドは単を呼び出して、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.LoadPostData%2A> メソッドを <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> クラスは、さらに、カタログ内のサーバー コントロールに対応するカタログのチェック ボックスの状態を処理します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent">
      <MemberSignature Language="C#" Value="void IPostBackDataHandler.RaisePostDataChangedEvent ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.System#Web#UI#IPostBackDataHandler#RaisePostDataChangedEvent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="M:System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent" />」を参照してください。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> のインスタンスが <xref:System.Web.UI.IPostBackDataHandler> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.TrackViewState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ゾーン コントロールのビューステートの変更を追跡します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.TrackViewState%2A> メソッドは最初基本メソッドを呼び出して、 <xref:System.Web.UI.WebControls.WebParts.ToolZone> ビュー ステートを追跡するためにクラスに関連付けられている、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> ゾーンです。 次に、メソッドはまず add と閉じる動詞は、ビュー ステートを追跡だけでなく、 <xref:System.Web.UI.WebControls.Style> オブジェクトに関連付けられている、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.PartLinkStyle%2A> と <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectedPartLinkStyle%2A> プロパティです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>