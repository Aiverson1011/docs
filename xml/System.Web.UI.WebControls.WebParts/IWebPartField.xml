<Type Name="IWebPartField" FullName="System.Web.UI.WebControls.WebParts.IWebPartField">
  <TypeSignature Language="C#" Value="public interface IWebPartField" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWebPartField" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.IWebPartField" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>単一のデータ フィールドを使用して 2 つのサーバー コントロールを接続するためのプロバイダー インターフェイスを定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 Web パーツの接続に使用するのには、このインターフェイスは設計されています。 Web パーツの接続に存在する 2 つのサーバー コントロールで、 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> ゾーンは、コンシューマーとして機能する 1 つのコントロールおよびプロバイダーとして機能する他のコントロールを含む接続と共有のデータを確立します。 Web パーツの接続でデータを共有するしくみは、コールバック メソッドを使用して、プロバイダーがコンシューマーには機能インターフェイスのインスタンスです。 接続を確立するには、コンシューマーとプロバイダー行う必要が両方と同じインターフェイス型データを共有します。 トランスフォーマーを使用して、コントロールを接続することは可能では、コンシューマーがプロバイダーによって送信インターフェイスの種類を認識しない場合 \(、 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> オブジェクト\) にコンシューマーによって認識される型プロバイダーによって送信インターフェイスのインスタンスを意味します。 接続の詳細については、「 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> と [Web Parts Connections Overview](http://msdn.microsoft.com/ja-jp/d98cfd0f-ebd6-4871-89d5-abbd2cdef67b)です。  
  
 <xref:System.Web.UI.WebControls.WebParts.IWebPartField> インターフェイスは、Web パーツ コントロールのデータ フィールドに基づく接続を作成するための標準インターフェイスとしてセットに含まれているプロバイダーのインターフェイスです。 Web パーツの接続で使用するカスタム インターフェイスを作成することもできますが、多くのデータ ドリブンの Web アプリケーション、共通の行に基づいて接続を作成すると便利です \(詳細については、次を参照してください。、 <xref:System.Web.UI.WebControls.WebParts.IWebPartRow> インターフェイス\)、テーブル \(詳細については、「、 <xref:System.Web.UI.WebControls.WebParts.IWebPartTable> インターフェイス\)、またはデータからフィールドを使用して、ソース、 <xref:System.Web.UI.WebControls.WebParts.IWebPartField> インターフェイスです。 一般的な接続で、 <xref:System.Web.UI.WebControls.WebParts.WebPart> プロバイダーを実装して、機能を制御、 <xref:System.Web.UI.WebControls.WebParts.IWebPartField> インターフェイスし、特殊なコールバック メソッドのコンシューマーにインターフェイスのインスタンスを提供します。 たとえば、プロバイダーを実装する <xref:System.Web.UI.WebControls.WebParts.IWebPartField> を Web ユーザーの郵便番号データを含む、ユーザー情報テーブル内のフィールドのインターフェイスです。 もう 1 つ <xref:System.Web.UI.WebControls.WebParts.WebPart> 機能を制御、コンシューマーは、インターフェイス インスタンスが表示されるとでしたし、郵便番号データを抽出しを検索し、郵便番号に基づく天気情報の表示、特殊なメソッドを定義します。  
  
 <xref:System.Web.UI.WebControls.WebParts.IWebPartField> インターフェイスが公開されている 2 つのメンバーです。<xref:System.Web.UI.WebControls.WebParts.IWebPartField.Schema%2A> プロパティにカプセル化されたデータ フィールドに関するスキーマ情報を返す、 <xref:System.ComponentModel.PropertyDescriptor> オブジェクトです。<xref:System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue%2A> メソッドを実装する側 \(プロバイダー コントロール\) などを使用してコールバック メソッドが呼び出されたときに、インターフェイス インスタンスのフィールドのデータを取得するメソッドを宣言しています。  
  
   
  
## 例  
 次のコード例を使用して 2 つのコントロール間の静的な接続を作成する方法を示しています、 <xref:System.Web.UI.WebControls.WebParts.IWebPartField> インターフェイスです。 このコード例には、3 つの部分があります。  
  
-   ソース コードを 2 つのカスタムの <xref:System.Web.UI.WebControls.WebParts.WebPart> を使用して接続を構成できる、 <xref:System.Web.UI.WebControls.WebParts.IWebPartField> プロバイダーでは、コンシューマーとして機能する 1 つのコントロールとのインターフェイスです。  
  
-   コントロールをホストし、永続化の形式で静的な接続を宣言する Web ページ。  
  
-   内容の説明については、例を実行したときに発生します。  
  
 このコード例の最初の部分では、2 つのカスタム コントロールのソース コードを示します。 実装するプロバイダーのコードは、まず、 <xref:System.Web.UI.WebControls.WebParts.IWebPartField> インターフェイスです。 例でわかりやすくするため、プロバイダーは、データベースに接続するのではなく、一部のデータ テーブルを作成します。`GetConnectionInterface` メソッドは、プロバイダーの接続ポイントをコンシューマーにインターフェイスのインスタンスを返すコールバック メソッドとして機能します。 という名前のメソッドで、プロバイダーからインターフェイスのインスタンスを取得、コンシューマーの場合と `SetConnectionInterface`, でマークされている、 `ConnectionConsumer` 属性です。 インターフェイスは、コンシューマーのインスタンスを取得した後、 `OnPreRender` メソッドの実装を呼び出す、 <xref:System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue%2A> メソッドではプロバイダーで、実際のデータを取得します。  
  
 このコード例を実行するには、このソース コードをコンパイルする必要があります。 明示的にコンパイルし、Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに、生成されたアセンブリを配置できます。 また、ここで、動的にコンパイル実行時に、サイトの App\_Code フォルダーにソース コードを配置することができます。 このコード例では、動的なコンパイルを使用します。 コンパイルする方法について説明するチュートリアルは、次を参照してください。 [Walkthrough: Developing and Using a Custom Server Control](http://msdn.microsoft.com/ja-jp/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。  
  
 [!code-csharp[WebParts\_IWebPartField\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IWebPartField_Overview/CS/IFieldSample.cs#2)]
 [!code-vb[WebParts\_IWebPartField\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IWebPartField_Overview/VB/IFieldSample.vb#2)]  
  
 コード例の 2 番目の部分は、静的な接続とホスト コントロールを宣言する Web ページです。 ページの上部には、 `Register` ディレクティブ App\_Code ディレクトリに含まれるソース コードの名前空間を宣言します。 使用して接続を宣言、 `<asp:webpartconnection>` 要素。 カスタムのコンシューマーおよびプロバイダーのコントロールが宣言されている、 `<zonetemplate>` 内の要素、 `<asp:webpartzone>` 接続できるようにするに必要な要素 \(から継承するゾーン内に存在する必要がありますが、 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> クラス\)。  
  
 [!code-csharp[WebParts\_IWebPartField\_Overview\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IWebPartField_Overview/CS/defaultcs.aspx#1)]
 [!code-vb[WebParts\_IWebPartField\_Overview\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IWebPartField_Overview/VB/Defaultvb.aspx#1)]  
  
 ブラウザーでページを読み込みます。 コンシューマー コントロールのインスタンスで、プロバイダーが、指定したフィールドから提供されるデータを表示、 <xref:System.Web.UI.WebControls.WebParts.IWebPartField> インターフェイスです。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.IWebPartRow" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.IWebPartTable" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
  </Docs>
  <Members>
    <Member MemberName="GetFieldValue">
      <MemberSignature Language="C#" Value="public void GetFieldValue (System.Web.UI.WebControls.WebParts.FieldCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetFieldValue(class System.Web.UI.WebControls.WebParts.FieldCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue(System.Web.UI.WebControls.WebParts.FieldCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Web.UI.WebControls.WebParts.FieldCallback" />
      </Parameters>
      <Docs>
        <param name="callback">A <see cref="T:System.Web.UI.WebControls.WebParts.FieldCallback" /> データを受け取るメソッドのアドレスを格納しているデリゲート。</param>
        <summary>インターフェイスによって 2 つの接続の基礎として使用されているフィールドの値を返します <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> コントロールです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用すると、インターフェイスによって渡されるデータ フィールドの値を取得できます。  
  
   
  
## 例  
 次のコード例の実装との使用を示しています、 <xref:System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue%2A> メソッドです。 クラスの概要で完全な例が示すように、 <xref:System.Web.UI.WebControls.WebParts.IWebPartField> インターフェイスです。 プロバイダーのコントロールを実装して、 <xref:System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue%2A> データ テーブル内の特定のフィールドの値を返すメソッド。 コンシューマー コントロールの呼び出し、 <xref:System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue%2A> メソッドにその `OnPreRender` メソッド、データの値をページに書き込むことができるようにします。  
  
 [!code-csharp[WebParts\_IWebPartField\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IWebPartField_Overview/CS/IFieldSample.cs#2)]
 [!code-vb[WebParts\_IWebPartField\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IWebPartField_Overview/VB/IFieldSample.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Schema">
      <MemberSignature Language="C#" Value="public System.ComponentModel.PropertyDescriptor Schema { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.PropertyDescriptor Schema" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.IWebPartField.Schema" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>2 つのデータを共有するために使用されるデータ フィールドのスキーマ情報を取得 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> コントロールです。</summary>
        <value>A <see cref="T:System.ComponentModel.PropertyDescriptor" /> データ フィールドのスキーマ情報を説明します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、インターフェイスによって渡されたデータのプロパティ情報を提供します。 Transformer およびコンシューマー コントロールがコンテンツの種類に関する情報を取得するには、このプロパティのクエリを実行しに含まれているフィールドの他の詳細、 <xref:System.Web.UI.WebControls.WebParts.IWebPartField> プロバイダーによって送信されたインターフェイスのインスタンス。  
  
   
  
## 例  
 次のコード例の実装との使用を示しています、 <xref:System.Web.UI.WebControls.WebParts.IWebPartField.Schema%2A> プロパティです。 クラスの概要で完全な例が示すように、 <xref:System.Web.UI.WebControls.WebParts.IWebPartField> インターフェイスです。 プロバイダーのコントロールを実装して、 <xref:System.Web.UI.WebControls.WebParts.IWebPartField.Schema%2A> プロパティです。 次に、その `GetFieldValue` メソッド、プロパティを使用して、フィールドの値を取得します。  
  
 [!code-csharp[WebParts\_IWebPartField\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IWebPartField_Overview/CS/IFieldSample.cs#2)]
 [!code-vb[WebParts\_IWebPartField\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IWebPartField_Overview/VB/IFieldSample.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.PropertyDescriptor" />
      </Docs>
    </Member>
  </Members>
</Type>