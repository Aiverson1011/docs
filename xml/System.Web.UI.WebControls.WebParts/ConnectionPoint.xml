<Type Name="ConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ConnectionPoint">
  <TypeSignature Language="C#" Value="public abstract class ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ConnectionPoint extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>接続を定義するための基本クラスとしての役割を果たし、コンシューマー コントロールとプロバイダー コントロールにデータを共有する Web パーツの接続を有効にするオブジェクトをポイントします。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 すべての Web パーツ接続は、データを共有する 2 つのサーバー コントロールで構成されています。 1 つのコントロールは、コンシューマーで、もう 1 つは、プロバイダーです。 Web パーツの接続および接続オブジェクト自体の不可欠なコンポーネントの詳細については、次を参照してください。、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> クラスの概要です。 すべての Web パーツ接続には、接続ポイントが必要です。 プロバイダーとコンシューマー コントロールそれぞれが必要には、少なくとも 1 つの定義 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 方法、コントロールに接続できる別のコントロールとデータの種類に詳細が含まれます \(それぞれのオプションが複数のコネクション ポイント\) のオブジェクトを共有できます。 実際の接続のプロバイダーは、接続ポイント オブジェクトの独自の型を持つ \(ベースから派生した <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> クラス\)、 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> インスタンス、およびコンシューマーが独自のオブジェクト、 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> インスタンス。  
  
 プロバイダー接続ポイントを作成するには、開発者は、プロバイダーをコンシューマーに実装されるインターフェイスのインスタンスを返すコールバック メソッドを追加する必要があります。 ソース コードとのコールバック メソッドをマークする必要があります、 `ConnectionProvider` コード属性 \(を参照してください、 <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> クラス\)。 同様に、コンシューマー接続ポイントを作成する開発者は、インターフェイスのインスタンスを受け取ることがコンシューマーにメソッドを追加する必要があり、そのメソッドをマークする必要があります、 `ConnectionConsumer` 属性 \(を参照してください、 <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> クラス\)。  
  
 開発者は、Web ページ上の接続を作成するときに、静的または動的な接続として作成できます。 静的な接続は、Web ページのマークアップで宣言されます。 静的な接続が宣言されると、開発者がどの接続ポイントを使用コンシューマーとプロバイダーの両方に値を代入して、指定することができます、 `ProviderConnectionPointID` と `ConsumerConnectionPointID` 内の属性、 `<asp:webpartconnection>` 要素タグ。 この方法は、接続に使用するには、どの接続ポイントを識別するために静的な接続を有効にするためのコンシューマーとプロバイダーのコントロール内で定義されている複数の接続ポイントがある場合に特に便利です。  
  
 動的接続はプログラムを使用して、開発者のコードかによって提供されるユーザー インターフェイス \(UI\) を使用してユーザーが作成、 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> コントロールです。 コードで接続を作成する開発者がのインスタンスを取得する必要があります、 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> オブジェクトを呼び出して、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> メソッドを <xref:System.Web.UI.WebControls.WebParts.WebPartManager> コントロールです。 このメソッドを呼び出して、前に、開発者は、コンシューマーとプロバイダー サーバー コントロールと、それぞれのコネクション ポイントのオブジェクトへの参照が必要です。 開発者の最初の呼び出しに、プロバイダーとコンシューマー コントロールのコネクション ポイントへの参照を取得する、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> と <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> のメソッド、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> コントロールです。 これらのメソッドは、point オブジェクトは、さらに、接続を作成するメソッドに渡すことが適切な接続を返します。  
  
 プロバイダーとコンシューマーの接続ポイント オブジェクトの両方と同じインターフェイスの型、それらと互換性がデータを共有に直接接続を形成することができます。 同一のインターフェイス型に解決しない場合、 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> オブジェクトを使用して、コンシューマーが使用できる型に、プロバイダーからインターフェイスのインスタンスに変換する必要があります。  
  
 抽象 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> クラスは、コンシューマーとプロバイダーの両方のコントロールによって共有されている接続ポイントの基本の詳細を提供します。 いくつかのプロパティには、これらの詳細が含まれています。<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> プロパティは、接続ポイントが、一度に 1 つ以上の接続に参加できるかどうかを示します。 既定では、プロバイダー接続ポイントは、複数の接続に参加できるし、コンシューマー接続ポイントのことはできません。<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A> プロパティは、接続ポイントに関連付けられたサーバー コントロールの種類を示します。 そのだけでなくに注意してください <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールは、接続を構成できる; 任意のサーバー コントロールでは、ASP.NET コントロール、カスタム コントロールまたはユーザー コントロールかどうかできるように配置されている場合、接続に参加する <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> ゾーンです。<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> プロパティは接続を作成しているユーザーを支援するために UI に表示できる接続ポイントのフレンドリ名を提供します。<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> プロパティは、接続ポイント オブジェクト自体の文字列識別子として機能します。<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> プロパティは、接続ポイントを理解してインターフェイスのインスタンスの種類を示します。 指定したコネクション ポイントを提供またはそのインターフェイスのインスタンスを利用するかどうかがあるかどうかによって決まります、 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> または <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> オブジェクトです。  
  
 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> クラスには 1 つの方法です。<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A> メソッドは、接続ポイントが現在の接続に参加できないかどうかを示すブール値を返します。  
  
 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> クラスに 1 つのパブリック フィールドもあります <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>します。 このフィールドには、接続の既定の接続ポイントを識別するために使用される値が含まれています。  
  
> [!NOTE]
>  メソッドには、1 つだけの必要なパラメーターが含まれている接続ポイントを指定する属性 `displayName`, ため、ID を指定することがなく既定の接続ポイントの属性を作成することは、 このような場合、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> フィールドが使用する基本の値を提供します。  
  
   
  
## 例  
 次のコード例を含む、必要な Web パーツの接続の作成を示しています <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> オブジェクトです。<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> クラスは抽象基本クラス、その子クラスのインスタンス<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> と <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>\-実際のオブジェクトの接続を構成するために使用します。  
  
 この例では、4 つの部分があります。  
  
-   Web パーツを変更することができますユーザー コントロールは、ページのモードを表示します。  
  
-   インターフェイスと 2 つのコードをソース <xref:System.Web.UI.WebControls.WebParts.WebPart> プロバイダーと接続のコンシューマーとしての動作を制御します。  
  
-   すべてのコントロールをホストし、コード例を実行する Web ページ。  
  
-   ページの例を実行する方法の説明です。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるユーザー コントロールです。 割り当てられているファイル名を付けます .ascx ファイルに次のソース コードを保存、 `Src` の属性、 `Register` ホストする Web ページの上部にあるディレクティブは、このユーザー コントロールをします。 詳細については、このコントロールのモードとソース コードの説明を表示、参照してください [Walkthrough: Changing Display Modes on a Web Parts Page](http://msdn.microsoft.com/ja-jp/24e42f74-82dc-4c13-8574-130398985fc0)します。  
  
 [!code-csharp[WebParts\_ConnectionPoint\_Overview\#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-vb[WebParts\_ConnectionPoint\_Overview\#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 コード例の 2 番目の部分では、インターフェイスとコントロールのソース コードを示します。 ソース ファイルには、という名前の単純なインターフェイスが含まれています。 `IZipCode`します。<xref:System.Web.UI.WebControls.WebParts.WebPart> という名前のクラス `ZipCodeWebPart` インターフェイスを実装であり、プロバイダー コントロールとして機能します。 その `ProvideIZipCode` メソッドは、インターフェイスの唯一のメンバーを実装するコールバック メソッド。 メソッドは、単に、インターフェイスのインスタンスを返します。 メソッドが表示されているメモ、 `ConnectionProvider` メタデータ内の属性です。 これは、プロバイダーの接続ポイントのコールバック メソッドとしてメソッドを識別するためのメカニズムです。 他の <xref:System.Web.UI.WebControls.WebParts.WebPart> クラスの名前は `WeatherWebPart`, 、接続のコンシューマーとして機能するとします。 このクラスはという名前のメソッドを持つ `GetZipCode` のインスタンスを取得する、 `IZipCode` プロバイダー コントロールからのインターフェイスです。 このメソッドとコンシューマーのコネクション ポイントのメソッドとしてマークされることに注意してください、 `ConnectionConsumer` メタデータ内の属性です。 これは、コンシューマー コントロールに接続ポイント メソッドを識別するためのメカニズムです。  
  
 このコード例を実行するには、このソース コードをコンパイルする必要があります。 明示的にコンパイルし、Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに、生成されたアセンブリを配置できます。 また、ここで、動的にコンパイル実行時に、サイトの App\_Code フォルダーにソース コードを配置することができます。 このコード例では、動的なコンパイルを使用します。 コンパイルする方法について説明するチュートリアルは、次を参照してください。 [Walkthrough: Developing and Using a Custom Server Control](http://msdn.microsoft.com/ja-jp/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。  
  
 [!code-csharp[WebParts\_ConnectionPoint\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts\_ConnectionPoint\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 コード例の 3 番目の部分は、Web ページです。 上部にある、 `Register` 、接続を構成するカスタム コントロール、および変更できるように、ユーザー コントロールに登録するためのディレクティブは、モードをページに表示します。 接続が内に宣言によって作成された、 `<staticconnections>` ページ上の要素。 プログラムで接続を作成することもできます。これを行うためのコードが含まれている、 `Button1_Click` メソッドです。 宣言またはプログラムによって、接続が作成されるかどうかコネクション ポイントは、コンシューマーとプロバイダーの常に指定する必要があります。`Button2_Click` メソッドへのアクセス、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 、コンシューマーとプロバイダーの両方のオブジェクトし、そのプロパティ値の一部をページ内のラベルに書き込みます。  
  
 [!code-csharp[WebParts\_ConnectionPoint\_Overview\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-vb[WebParts\_ConnectionPoint\_Overview\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ブラウザーでページを読み込んだ後、 **コネクション ポイントの詳細** \] ボタンをクリックします。 宣言型の接続で確立されたプロバイダーとコンシューマー接続ポイントに関する情報が表示されます。 次に、使用、 **表示モード** 接続モードのドロップダウン コントロールをページに切り替えます。 いずれかの動詞メニューを開き、 <xref:System.Web.UI.WebControls.WebParts.WebPart> \(タイトル バーの下向きの矢印で表される\) のコントロールは、connect 動詞をクリックします。 UI が表示されたら、接続がによって自動的に作成された、 `<asp:connectionszone>` コントロール、ページで宣言します。 クリックして、 **切断** を既存の接続を終了する\] ボタンをクリックします。 使用して、 **表示モード** ページをブラウズ モードを返すときにします。 次に、クリックして、 **動的接続** プログラムを使用して接続を作成する\] ボタンをクリックします。 クリックして、 **接続ポイントの詳細** \] を 2 つの接続ポイントのオブジェクトに関する詳細を示すために再度します。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
  </Docs>
  <Members>
    <Member MemberName="AllowsMultipleConnections">
      <MemberSignature Language="C#" Value="public bool AllowsMultipleConnections { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowsMultipleConnections" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>接続ポイントが複数の同時接続をサポートしているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 接続ポイントが複数の接続をサポートしている場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> オブジェクトが、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> プロパティ値に設定 `true` \(によって、 <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> クラス\)、既定で設定する Web パーツ コントロール プロバイダー接続ポイントに複数のコンシューマー接続を作成することができます。  
  
 これに対し、 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> オブジェクトがその <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> プロパティ値に設定 `false` \(によって、 <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> クラス\) 既定で設定する Web パーツ コントロールがコンシューマー接続を許可しているので、一度に 1 つのプロバイダーへの接続を確立するためにポイントします。  
  
 複数の異なる値を割り当てることで複数の接続に関連する既定の動作を変更することができます、 <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A?displayProperty=fullName> プロパティ \(プロバイダー\)、または <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A?displayProperty=fullName> プロパティ \(コンシューマー\)、2 つの <xref:System.Attribute> 接続属性に使用されるクラスです。 同時に複数のプロバイダーに接続するコンシューマー接続ポイントを有効にした場合、コードは、結果として得られる同期に関する問題に対処する必要があります。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> プロパティの両方で <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> と <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> オブジェクトです。 このコード例は、プロパティにアクセスするコードを含む Web ページのみを示しています。例を実行するために必要な完全なコードの例」のセクションを参照してください、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> クラスの概要です。  
  
 内のコード、 `Button2_Click` Web ページへのアクセス方法、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> 各接続ポイントのプロパティがオブジェクトし、各値のラベルを書き込みます。 クリックして、コードを実行、 **コネクション ポイントの詳細** ページがブラウザーに読み込まれた後のボタンをクリックします。  
  
 [!code-csharp[WebParts\_ConnectionPoint\_Overview\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-vb[WebParts\_ConnectionPoint\_Overview\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
      </Docs>
    </Member>
    <Member MemberName="ControlType">
      <MemberSignature Language="C#" Value="public Type ControlType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ControlType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Type" /> 接続ポイントが関連付けられているサーバー コントロールのです。</summary>
        <value>A <see cref="T:System.Type" /> コントロールの種類を表します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A> プロパティは、多くの場合、 <xref:System.Web.UI.WebControls.WebParts.WebPart> 型です。 ただし、正しく有効化および配置の場合、接続にユーザー コントロールやサーバー コントロールの任意の型が参加できるため、 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> ゾーン、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A> プロパティは、その他のサーバー コントロールの種類ものいずれかを返すことができます。  
  
 サーバーが制御されている <xref:System.Web.UI.WebControls.WebParts.WebPart> に配置されたコントロール、 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> でラップされるゾーン、 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> として機能させることができますので、実行時にオブジェクト <xref:System.Web.UI.WebControls.WebParts.WebPart> を制御し、接続に参加します。 \[接続\] でこのようなコントロールが含まれている場合は、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A> プロパティの値を返さない、 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> ; を入力の型が返されます、 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> これは、サーバーまたはユーザー コントロールの種類のオブジェクトの子コントロール。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A> プロパティの両方で <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> と <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> オブジェクトです。 このコード例は、プロパティにアクセスするコードを含む Web ページのみを示しています。例を実行するために必要な完全なコードの例」のセクションを参照してください、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> クラスの概要です。  
  
 内のコード、 `Button2_Click` Web ページへのアクセス方法、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A> 各接続ポイントのプロパティがオブジェクトし、各値のラベルを書き込みます。 クリックして、コードを実行、 **コネクション ポイントの詳細** ページがブラウザーに読み込まれた後のボタンをクリックします。  
  
 [!code-csharp[WebParts\_ConnectionPoint\_Overview\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-vb[WebParts\_ConnectionPoint\_Overview\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
    <Member MemberName="DefaultID">
      <MemberSignature Language="C#" Value="public static readonly string DefaultID;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string DefaultID" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サーバー コントロールに関連付けられた接続ポイントのコレクション内の既定の接続ポイントを識別するために使用される文字列を表します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コンシューマーまたはプロバイダーのソース コードでのコネクション ポイントの ID を指定することは、接続ポイントが作成されると、 <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールを使用して、 <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> または <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> 属性です。 ただし、属性が加わった時点をソース コードでの接続ポイント、 `ID` パラメーターは省略可能です。 属性には、ID が指定されていない場合、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> フィールドが既定の接続ポイントを識別するために使用される文字列を提供します。  
  
 コンシューマーまたはプロバイダーのコントロールでは、複数のコネクション ポイントが定義されている、接続を作成するときに、接続ポイントを識別できるようにこれは、各接続ポイントに ID を指定する必要です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザー インターフェイス \(UI\) での接続ポイントを表す表示名として使用される文字列を取得します。</summary>
        <value>わかりやすい表示名を格納する文字列、 <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" /> オブジェクトです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Web パーツの接続を作成するには、接続のプロバイダーとコンシューマー コントロールする必要がありますをそれぞれ指定に少なくとも 1 つのコネクション ポイントを通信およびデータを共有できるようにするメソッドです。 これらの接続ポイント メソッドを識別するのには、開発者は、選択したメソッドの属性を指定します。 はプロバイダーで、 `ConnectionProvider` 属性が設定されて、選択したコールバック メソッド、および、コンシューマー、 `ConnectionConsumer` プロバイダーからのデータを格納しているインターフェイスのインスタンスを受け取るメソッドに属性を設定します。 どのオーバー ロードは、属性を作成する宣言に関係なく、必要では常に 1 つのパラメーターは、これらの属性の両方、 `displayName` パラメーター。 開発者は、接続ポイントの表示名として使用する文字列を割り当てる必要があり、その文字列の値になります、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> プロパティです。  
  
 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> ユーザーが接続を作成するときに、Web ページの UI にプロパティ値が表示されます。 たとえば、ときに、 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> コントロールはユーザー コントロール間の接続を作成するための UI を作成して、ページに追加します。 ユーザーが接続の表示モードを切り替え、connect 動詞をクリックすると、 <xref:System.Web.UI.WebControls.WebParts.WebPart> を制御する接続の UI が表示されます。 接続に参加できる各コントロールでは、UI では、一覧表示され、各コントロールの横には、使用可能な接続ポイントのフレンドリ名を表示するドロップダウン リスト コントロール。 ユーザーには、接続を確立するには、少なくとも 1 つの接続ポイントを選択する必要があります。 コネクション ポイントの一覧に表示される値から取得、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> プロパティです。 開発者は、接続を作成するカスタム UI をビルドを使用して、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> プロパティと同様の方法で、接続ポイントを表すフレンドリ名を指定します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetEnabled">
      <MemberSignature Language="C#" Value="public virtual bool GetEnabled (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetEnabled(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> または接続ポイントに関連付けられているその他のサーバー コントロール。</param>
        <summary>接続ポイントが、接続に参加できるかどうかを示す値を返します。</summary>
        <returns>
          <see langword="true" /> コントロールは、接続に参加するための接続ポイントを作成できる場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A> 、ベースのメソッドに <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> クラスを返します。 では常に `true`, 、派生クラスがを返すメソッドをオーバーライドできますが、 `true` または `false` の状態に基づいて、異なる時刻で `control`します。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A> メソッドの両方で <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> と <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> オブジェクトです。 このコード例は、プロパティにアクセスするコードを含む Web ページのみを示しています。例を実行するために必要な完全なコードの例」のセクションを参照してください、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> クラスの概要です。  
  
 内のコード、 `Button2_Click` Web ページへのアクセス方法、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A> の接続ポイントの各メソッドは、オブジェクトをし、各値のラベルを書き込みます。 クリックして、コードを実行、 **コネクション ポイントの詳細** ページがブラウザーに読み込まれた後のボタンをクリックします。  
  
 [!code-csharp[WebParts\_ConnectionPoint\_Overview\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-vb[WebParts\_ConnectionPoint\_Overview\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public string ID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>接続ポイントの識別子を表す文字列を取得します。</summary>
        <value>接続ポイントの識別子を表す文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 開発者を宣言すると、 <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> または <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> 属性でコントロールのソース コード内のメソッド、メソッドは、接続ポイントとして使用できるようにする必要はありませんを宣言する、 `ID` 接続ポイントの属性のパラメーターです。 唯一の必須の属性は、 `displayName` パラメーター。 値を使用して接続ポイントには既定の ID が割り当てられた、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> フィールドです。  
  
 接続ポイントとして使用されているコントロールに 1 つのメソッドがある場合、接続ポイントに ID を指定する必要はありません。 接続ポイントとして指定されている複数のメソッドがある場合は、各に ID を指定する必要があります。それ以外の場合、例外がスローされます。 各接続ポイントを ID を割り当ててをまたなります Web ページでの結合を宣言またはコードに作成するときに使用するには、どの接続ポイントを指定することです。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> プロパティの両方で <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> と <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> オブジェクトです。 このコード例は、プロパティにアクセスするコードを含む Web ページのみを示しています。例を実行するために必要な完全なコードの例」のセクションを参照してください、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> クラスの概要です。  
  
 内のコード、 `Button2_Click` Web ページへのアクセス方法、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> 各接続ポイントのプロパティがオブジェクトし、各値のラベルを書き込みます。 クリックして、コードを実行、 **コネクション ポイントの詳細** ページがブラウザーに読み込まれた後のボタンをクリックします。  
  
 [!code-csharp[WebParts\_ConnectionPoint\_Overview\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-vb[WebParts\_ConnectionPoint\_Overview\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID" />
      </Docs>
    </Member>
    <Member MemberName="InterfaceType">
      <MemberSignature Language="C#" Value="public Type InterfaceType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type InterfaceType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>接続ポイントによって使用されるインターフェイスの型を取得します。</summary>
        <value>A <see cref="T:System.Type" /> 提供またはコントロールによって使用される、インターフェイス型に対応します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> プロパティは、接続ポイントが使用するインターフェイスのタイプを示します。 これは、2 つのコントロールが互換性があり、接続を構成できるかを確認に役立ちます。 場合、プロバイダー接続ポイントの <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> コンシューマー接続ポイントのとは異なる <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>, 、2 つのコントロールは互換性がありませんし、\(つまり、できない接続すること直接トランスフォーマーなし\)、および <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> オブジェクトは、接続を確立するために使用する必要があります。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> プロパティの両方で <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> と <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> オブジェクトです。 このコード例は、プロパティにアクセスするコードを含む Web ページのみを示しています。例を実行するために必要な完全なコードの例」のセクションを参照してください、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> クラスの概要です。  
  
 内のコード、 `Button2_Click` Web ページへのアクセス方法、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> 各接続ポイントのプロパティがオブジェクトし、各値のラベルを書き込みます。 クリックして、コードを実行、 **コネクション ポイントの詳細** ページがブラウザーに読み込まれた後のボタンをクリックします。  
  
 [!code-csharp[WebParts\_ConnectionPoint\_Overview\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-vb[WebParts\_ConnectionPoint\_Overview\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
  </Members>
</Type>