<Type Name="EditorPartCollection" FullName="System.Web.UI.WebControls.WebParts.EditorPartCollection">
  <TypeSignature Language="C#" Value="public sealed class EditorPartCollection : System.Collections.ReadOnlyCollectionBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EditorPartCollection extends System.Collections.ReadOnlyCollectionBase" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.EditorPartCollection" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Collections.ReadOnlyCollectionBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> コントロールのプロパティ、レイアウト、外観、および動作の編集に使用される <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> コントロールのコレクションを含みます。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection> class is a read\-only collection of <xref:System.Web.UI.WebControls.WebParts.EditorPart> controls, typically used by an <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> zone to track the set of <xref:System.Web.UI.WebControls.WebParts.EditorPart> controls contained by the zone.  
  
 When a Web Parts page enters edit mode, and a user selects a control to edit, the editing process begins. The zone creates a new <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection> object consisting of the <xref:System.Web.UI.WebControls.WebParts.EditorPart> controls contained by the zone. At various phases in the editing process, the zone accesses the <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection> object to save or retrieve property values between the <xref:System.Web.UI.WebControls.WebParts.EditorPart> controls in the collection and the <xref:System.Web.UI.WebControls.WebParts.WebPart> control currently being edited.  
  
 You can create an <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection> collection of controls for your own programmatic use if, for example, you need to perform some mass operation on a set of <xref:System.Web.UI.WebControls.WebParts.EditorPart> controls. Even though the <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection> object is read\-only, you can make programmatic changes to the properties of the underlying controls referenced in the collection.  
  
   
  
## 例  
 The following code example demonstrates several uses of the <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection> class. There are four parts to this code example:  
  
-   A user control that enables you to change display modes on a Web Parts page.  
  
-   A class for a custom <xref:System.Web.UI.WebControls.WebParts.WebPart> control named `TextDisplayWebPart`, which is referenced in the Web page and is edited by the <xref:System.Web.UI.WebControls.WebParts.EditorPart> controls.  
  
-   A Web page that references the `TextDisplayWebPart` control, contains an <xref:System.Web.UI.WebControls.WebParts.EditorZone> control with several of the <xref:System.Web.UI.WebControls.WebParts.EditorPart> controls from the Web Parts control set declared in the zone, and contains some event\-driven code to create and manipulate an <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection> object.  
  
-   An explanation of how the code example works when you load it in a browser.  
  
 The first part of this code example is the user control that enables users to change display modes on a Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](http://msdn.microsoft.com/ja-jp/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-csharp[WebParts\_EditorPartCollection\_Overview\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_EditorPartCollection_Overview/CS/displaymodecs.ascx#4)]
 [!code-vb[WebParts\_EditorPartCollection\_Overview\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_EditorPartCollection_Overview/VB/displaymodevb.ascx#4)]  
  
 The second part of the code example is the `TextDisplayWebPart` control. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App\_Code folder, where it will be dynamically compiled at run time. For a walkthrough that demonstrates both methods of compiling, see [Walkthrough: Developing and Using a Custom Server Control](http://msdn.microsoft.com/ja-jp/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 Note that the control has a property named `ContentText`; this property holds the value that the user enters in the text box. This custom property can be edited when the control is in edit mode, along with the standard <xref:System.Web.UI.WebControls.WebParts.WebPart> control properties.  
  
 [!code-csharp[WebParts\_EditorPartCollection\_Overview\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_EditorPartCollection_Overview/CS/textdisplaywebpart.cs#3)]
 [!code-vb[WebParts\_EditorPartCollection\_Overview\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_EditorPartCollection_Overview/VB/textdisplaywebpart.vb#3)]  
  
 The third part of the code example is the Web page. Notice that the **languageKeyword tag is not supported!!!!**  
 element for the page contains declarations for three <xref:System.Web.UI.WebControls.WebParts.EditorPart> controls. Two of these controls become part of a custom <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection> object that is created when the `Button1_Click` method executes.  
  
 [!code-csharp[WebParts\_EditorPartCollection\_Overview\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_EditorPartCollection_Overview/CS/editorpartcollectioncs.aspx#1)]
 [!code-vb[WebParts\_EditorPartCollection\_Overview\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_EditorPartCollection_Overview/VB/editorpartcollectionvb.aspx#1)]  
  
 When you load the page in a browser, you can switch the page into edit mode by selecting **ui tag is not supported!!!!**  
 in the **ui tag is not supported!!!!**  
 drop\-down list control. You can click the verbs menu \(the downward arrow\) in the title bar of the `TextDisplayWebPart` control, and click **ui tag is not supported!!!!**  
 to edit the control. When the editing user interface \(UI\) is visible, you can see all the <xref:System.Web.UI.WebControls.WebParts.EditorPart> controls. You click the **ui tag is not supported!!!!**  
 button to see the effects on the <xref:System.Web.UI.WebControls.WebParts.EditorPart> controls that are created by the code that is manipulating the <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection> object. Also, notice that the <xref:System.Web.UI.WebControls.WebParts.PropertyGridEditorPart> control allows you to edit the custom `TextDisplayWebPart.ContentText` property. This is possible because the property is marked with a **languageKeyword tag is not supported!!!!**  
 attribute in the source code for the control. If you update the property value in the editing UI, you must return the page to normal browse mode to see the effect of updating the `TextDisplayWebPart.ContentText` property.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.EditorPart" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EditorPartCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.EditorPartCollection.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>空の新しいインスタンスを初期化、 <see cref="T:System.Web.UI.WebControls.WebParts.EditorPartCollection" /> クラスです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection.%23ctor%2A> コンス トラクターの空のインスタンスを初期化します、 <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection> クラスです。 このコンス トラクターのオーバー ロードが内部で使用、 <xref:System.Web.UI.WebControls.WebParts.EditorZone> クラスの <xref:System.Web.UI.WebControls.WebParts.EditorZone.CreateEditorParts%2A> 空のコレクション オブジェクトを作成します。 ゾーンのすべてのインスタンスを作成し、 <xref:System.Web.UI.WebControls.WebParts.EditorPart> コントロールの子ゾーンのテンプレートで宣言されているし、内部のメソッドを使用して、コレクションに追加します。  
  
 このオーバー ロードを使用することはできません、 <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection.%23ctor%2A> の新しいインスタンスを作成するコンス トラクター <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection> 追加 <xref:System.Web.UI.WebControls.WebParts.EditorPart> コントロールをします。 他のオーバー ロードのいずれかを使用する必要があります、 <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection.%23ctor%2A> コンス トラクター代わりにします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EditorPartCollection (System.Collections.ICollection editorParts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.ICollection editorParts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.EditorPartCollection.#ctor(System.Collections.ICollection)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="editorParts" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="editorParts">
          <see cref="T:System.Collections.ICollection" /> の <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> コントロールです。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.UI.WebControls.WebParts.EditorPartCollection" /> クラスを渡すことによって、 <see cref="T:System.Collections.ICollection" /> のコレクション <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> コントロールです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection.%23ctor%2A> コンス トラクターのインスタンスを初期化します、 <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection> クラスとパスのコレクションの <xref:System.Web.UI.WebControls.WebParts.EditorPart> コントロールです。 これは、1 つのオーバー ロード、 <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection.%23ctor%2A> を新規に作成に使用できるコンス トラクター <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection> オブジェクトを追加 <xref:System.Web.UI.WebControls.WebParts.EditorPart> コントロールをします。  
  
 にもかかわらず、 <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection> コンス トラクターによって作成されたインスタンスが読み取り専用で、アクセスするには、個人 <xref:System.Web.UI.WebControls.WebParts.EditorPart> プログラムを使用して、コレクション内を制御し、そのプロパティおよびメソッドの呼び出しです。  
  
 1 つの一般的なシナリオを使用するため、 <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection.%23ctor%2A> コンス トラクターは、上のセット全体で、バッチ処理を実行するかどうかでしょう <xref:System.Web.UI.WebControls.WebParts.EditorPart> コンテンツ、外観、またはそれらの関連するグループの位置を変更するなどのコントロールです。  
  
 別の一般的なシナリオを使用するため、 <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection.%23ctor%2A> コンス トラクターは、カスタムの開発 <xref:System.Web.UI.WebControls.WebParts.EditorPart> ユーザーがコントロールのカスタム プロパティを編集できるように、サーバー コントロールに関連付けるコントロール。 このシナリオでは、サーバー コントロールを実装する必要があります、 <xref:System.Web.UI.WebControls.WebParts.IWebEditable> インターフェイス、およびそのタスクの一環として、これを実装する必要があります、 <xref:System.Web.UI.WebControls.WebParts.IWebEditable.CreateEditorParts%2A> メソッドです。 このメソッドは、ユーザー設定を有効にするに <xref:System.Web.UI.WebControls.WebParts.EditorPart> コントロールを追加する必要があります、サーバー コントロールを編集する、 <xref:System.Web.UI.WebControls.WebParts.EditorPart> コントロールを <xref:System.Collections.ICollection> インスタンスなど、 <xref:System.Collections.ArrayList> オブジェクトです。 コレクションを渡すことができますし、 <xref:System.Web.UI.WebControls.WebParts.EditorPart> コントロールを <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection.%23ctor%2A> コンス トラクターを新規に作成 <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection> するオブジェクト、 <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> ゾーンを使用してすべてのコントロールを設定し、編集のプロセスを開始します。  
  
   
  
## 例  
 次のコード例では、カスタム作成 <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection> し、読み取り専用ですが、コレクションは、個々 の変更のバッチ操作を行って <xref:System.Web.UI.WebControls.WebParts.EditorPart> コレクション内のコントロールです。 例を実行するために必要な完全なコードの例」のセクションを参照してください、 <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection> クラスの概要です。  
  
 内のコード、 `Button1_Click` イベントを作成、 <xref:System.Collections.ArrayList> オブジェクト、3 つの 2 つ追加 <xref:System.Web.UI.WebControls.WebParts.EditorPart> 、オブジェクトのページを制御し、新たに作成し、 <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection> オブジェクトを使用して、 <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection.%23ctor%2A> コンス トラクターです。 基になる変更を加える方法も示します <xref:System.Web.UI.WebControls.WebParts.EditorPart> コレクションが読み取り専用であるにもかかわらずを制御します。  
  
 [!code-csharp[WebParts\_EditorPartCollection\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_EditorPartCollection_Overview/CS/editorpartcollectioncs.aspx#2)]
 [!code-vb[WebParts\_EditorPartCollection\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_EditorPartCollection_Overview/VB/editorpartcollectionvb.aspx#2)]  
  
 ブラウザーでページの読み込みやを選択して、ページを編集モードに切り替えることができます **編集** で、 **表示モード** ドロップダウン リスト コントロールです。 タイトル バーの \[動詞\] メニュー \(下向きの矢印\) をクリックすることができます、 `TextDisplayWebPart` を制御して、クリックして **編集** コントロールを編集します。 編集のユーザー インターフェイス \(UI\) が表示されている場合は、すべてを表示、 <xref:System.Web.UI.WebControls.WebParts.EditorPart> コントロールです。 クリックする、 **作成 EditorPartCollection** \] ボタンをクリックして、2 つの効果を確認する <xref:System.Web.UI.WebControls.WebParts.EditorPart> コントロールに追加される、 <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection> オブジェクトです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.IWebEditable" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.EditorZoneBase.EditorParts" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EditorPartCollection (System.Web.UI.WebControls.WebParts.EditorPartCollection existingEditorParts, System.Collections.ICollection editorParts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.WebControls.WebParts.EditorPartCollection existingEditorParts, class System.Collections.ICollection editorParts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.EditorPartCollection.#ctor(System.Web.UI.WebControls.WebParts.EditorPartCollection,System.Collections.ICollection)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="existingEditorParts" Type="System.Web.UI.WebControls.WebParts.EditorPartCollection" />
        <Parameter Name="editorParts" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="existingEditorParts">
          <see cref="T:System.Collections.ICollection" /> 既存の <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> ゾーン内のコントロールです。</param>
        <param name="editorParts">
          <see cref="T:System.Collections.ICollection" /> の <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> 、ゾーンではなくコントロールは、プログラムで作成します。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.UI.WebControls.WebParts.EditorPartCollection" /> クラスを渡すことによって、 <see cref="T:System.Web.UI.WebControls.WebParts.EditorPartCollection" /> のコレクション <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> コントロール、および <see cref="T:System.Collections.ICollection" /> 追加のコレクション <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> コントロールです。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Web.UI.WebControls.WebParts.EditorPart editorPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Web.UI.WebControls.WebParts.EditorPart editorPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.EditorPartCollection.Contains(System.Web.UI.WebControls.WebParts.EditorPart)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="editorPart" Type="System.Web.UI.WebControls.WebParts.EditorPart" />
      </Parameters>
      <Docs>
        <param name="editorPart">
          <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> コレクションのメンバーとしてその状態をテストします。</param>
        <summary>特定のコントロールがコレクション内にあるかどうかを示す値を返します。</summary>
        <returns>示すブール値かどうか、 <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> コレクションに存在します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection.Contains%2A> メソッドは、特定のかどうかを判定 <xref:System.Web.UI.WebControls.WebParts.EditorPart> コントロールは既に、 <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection> オブジェクトです。  
  
   
  
## 例  
 次のコード例を特定するかどうかを確認する方法を示しています <xref:System.Web.UI.WebControls.WebParts.EditorPart> コントロールが、 <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection> オブジェクトです。 例を実行するために必要な完全なコードの例」のセクションを参照してください、 <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection> クラスの概要です。  
  
 内のコード、 `Button1_Click` イベントが追加されません、 `LayoutEditorPart1` への制御、 <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection> オブジェクトの他のコントロールを追加する場合。 確認するため、 `LayoutEditorPart1` コントロールが非コレクションに、コードを使用して、 <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection.Contains%2A> メソッドです。  
  
 [!code-csharp[WebParts\_EditorPartCollection\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_EditorPartCollection_Overview/CS/editorpartcollectioncs.aspx#2)]
 [!code-vb[WebParts\_EditorPartCollection\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_EditorPartCollection_Overview/VB/editorpartcollectionvb.aspx#2)]  
  
 ブラウザーでページを読み込むと、編集モードのページをスイッチを選択して **編集** で、 **表示モード** ドロップダウン リスト コントロールです。 タイトル バーの \[動詞\] メニュー \(下向きの矢印\) をクリックすることができます、 `TextDisplayWebPart` を制御して、クリックして **編集** コントロールを編集します。 編集のユーザー インターフェイス \(UI\) が表示されている場合は、すべてを確認できます、 <xref:System.Web.UI.WebControls.WebParts.EditorPart> コントロールです。 クリックすると、 **作成 EditorPartCollection** ボタン、ことがわかりますの背景色、 `LayoutEditorPart1` コントロールとは異なるその他のコントロールではないための一部では、 <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection> オブジェクトです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Web.UI.WebControls.WebParts.EditorPart[] array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Web.UI.WebControls.WebParts.EditorPart[] array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.EditorPartCollection.CopyTo(System.Web.UI.WebControls.WebParts.EditorPart[],System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Web.UI.WebControls.WebParts.EditorPart[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> コントロールのコピー元のコレクションを格納します。</param>
        <param name="index">コレクションの内容を格納する配列内の開始位置。</param>
        <summary>コレクションの配列にコピーします <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> コントロールです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [CopyTo メソッド \(EditorPart\<xref:System.Web.UI.WebControls.WebParts.EditorPartCollection.CopyTo%2A> メソッドは含めることができるカスタムの配列を作成するときに、 [CopyTo メソッド \(EditorPart\<xref:System.Web.UI.WebControls.WebParts.EditorPart> コントロールで、 [CopyTo メソッド \(EditorPart\<xref:System.Web.UI.WebControls.WebParts.EditorPartCollection> オブジェクトは、これらのコントロールのサブセットまたはそれらのコントロールのスーパー セットです。  
  
   
  
## 例  
 次のコード例では、使用して、 [CopyTo メソッド \(EditorPart\<xref:System.Web.UI.WebControls.WebParts.EditorPartCollection.CopyTo%2A> メソッドのカスタムの配列を作成する [CopyTo メソッド \(EditorPart\<xref:System.Web.UI.WebControls.WebParts.EditorPart> コントロールです。 例を実行するために必要な完全なコードの例」のセクションを参照してください、 [CopyTo メソッド \(EditorPart\<xref:System.Web.UI.WebControls.WebParts.EditorPartCollection> クラスの概要です。  
  
 内のコード、 `Button1_Click` イベントの配列を作成する [CopyTo メソッド \(EditorPart\<xref:System.Web.UI.WebControls.WebParts.EditorPart> コントロールで、追加、 `LayoutEditorPart1` 配列、および、使用してコントロールを [CopyTo メソッド \(EditorPart\<xref:System.Web.UI.WebControls.WebParts.EditorPartCollection.CopyTo%2A> からコントロールをコピーする方法、 [CopyTo メソッド \(EditorPart\<xref:System.Web.UI.WebControls.WebParts.EditorPartCollection> オブジェクトを配列にします。  
  
 [!code-csharp[WebParts\_EditorPartCollection\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_EditorPartCollection_Overview/CS/editorpartcollectioncs.aspx#2)]
 [!code-vb[WebParts\_EditorPartCollection\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_EditorPartCollection_Overview/VB/editorpartcollectionvb.aspx#2)]  
  
 ブラウザーでページを読み込むと、編集モードのページをスイッチを選択して **編集** で、 **表示モード** ドロップダウン リスト コントロールです。 タイトル バーの \[動詞\] メニュー \(下向きの矢印\) をクリックすることができます、 `TextDisplayWebPart` を制御して、クリックして **編集** コントロールを編集します。 編集のユーザー インターフェイス \(UI\) が表示されている場合は、すべてを表示、 [CopyTo メソッド \(EditorPart\<xref:System.Web.UI.WebControls.WebParts.EditorPart> コントロールです。 クリックすると、 **作成 EditorPartCollection** \] ボタンが表示されます、ページの下部にあるカスタムの配列内のすべてのコントロールのタイトルが表示されることです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static readonly System.Web.UI.WebControls.WebParts.EditorPartCollection Empty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Web.UI.WebControls.WebParts.EditorPartCollection Empty" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.WebParts.EditorPartCollection.Empty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.EditorPartCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コレクションの静的な読み取り専用、空のインスタンスを参照します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 静的な読み取り専用、空のインスタンス <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection> メソッドから、適切なオブジェクトの種類を返すか、別のオブジェクト インスタンスと比較する空のコレクション インスタンスを作成するは、インスタンスにメンバーを追加する必要はない場合にメモリ使用量を削減します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.Web.UI.WebControls.WebParts.EditorPart editorPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.Web.UI.WebControls.WebParts.EditorPart editorPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.EditorPartCollection.IndexOf(System.Web.UI.WebControls.WebParts.EditorPart)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="editorPart" Type="System.Web.UI.WebControls.WebParts.EditorPart" />
      </Parameters>
      <Docs>
        <param name="editorPart">
          <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> コレクションのメンバーであります。</param>
        <summary>コレクションの特定のメンバーの位置を返します。</summary>
        <returns>整数のインデックスに対応する、 <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> コレクション内のコントロールです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection.IndexOf%2A> メソッドが複数ある場合に使用 <xref:System.Web.UI.WebControls.WebParts.EditorPart> Web パーツ ページ上のコントロールは、コレクション内で特定のコントロールを検索する必要があります。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection.IndexOf%2A> を探す方法、 <xref:System.Web.UI.WebControls.WebParts.EditorPart> の制御、 <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection> オブジェクトです。 例を実行するために必要な完全なコードの例」のセクションを参照してください、 <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection> クラスの概要です。  
  
 内のコード、 `Button1_Click` イベントを作成、 <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection> オブジェクト、および、使用、 <xref:System.Web.UI.WebControls.WebParts.EditorPartCollection.IndexOf%2A> を探す方法、 `PropertyGridEditorPart1` 、コレクション内の制御し、設定、 <xref:System.Web.UI.WebControls.WebParts.Part.ChromeType%2A> プロパティです。  
  
 [!code-csharp[WebParts\_EditorPartCollection\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_EditorPartCollection_Overview/CS/editorpartcollectioncs.aspx#2)]
 [!code-vb[WebParts\_EditorPartCollection\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_EditorPartCollection_Overview/VB/editorpartcollectionvb.aspx#2)]  
  
 ブラウザーでページを読み込むと、編集モードのページをスイッチを選択して **編集** で、 **表示モード** ドロップダウン リスト コントロールです。 タイトル バーの \[動詞\] メニュー \(下向きの矢印\) をクリックすることができます、 `TextDisplayWebPart` を制御して、クリックして **編集** コントロールを編集します。 編集のユーザー インターフェイス \(UI\) が表示されている場合は、すべてを表示、 <xref:System.Web.UI.WebControls.WebParts.EditorPart> コントロールです。 クリックすると、 **作成 EditorPartCollection** ボタン、ことがわかります、 `PropertyGridEditorPart1` 、ページの下部の近くにあるコントロールは、タイトル、境界線なし。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.EditorPart this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.EditorPart Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.EditorPartCollection.Item(System.Int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.EditorPart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">特定のインデックス <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> コレクションにします。</param>
        <summary>一意の識別子に基づいてコレクションの特定のメンバーを返します。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> コレクション内の指定したインデックス位置。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.WebParts.EditorPartCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>