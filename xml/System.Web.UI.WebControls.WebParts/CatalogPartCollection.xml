<Type Name="CatalogPartCollection" FullName="System.Web.UI.WebControls.WebParts.CatalogPartCollection">
  <TypeSignature Language="C#" Value="public sealed class CatalogPartCollection : System.Collections.ReadOnlyCollectionBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CatalogPartCollection extends System.Collections.ReadOnlyCollectionBase" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Collections.ReadOnlyCollectionBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>エンド ユーザーが Web ページに追加できる Web サーバー コントロールのカタログを提供する <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> コントロールのコレクションを格納します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> class is a read\-only collection of <xref:System.Web.UI.WebControls.WebParts.CatalogPart> controls, typically used by a <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> zone to track the set of <xref:System.Web.UI.WebControls.WebParts.CatalogPart> controls contained by the zone.  
  
 When a Web Parts page enters catalog mode, the zone creates a new <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> object consisting of the <xref:System.Web.UI.WebControls.WebParts.CatalogPart> controls. Each <xref:System.Web.UI.WebControls.WebParts.CatalogPart> control in the collection can contain references to zero or more Web server controls, which are displayed in the form of a catalog of available server controls.  
  
 You can create a <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> collection of controls for your own programmatic use if, for example, you need to perform some mass operation on a set of <xref:System.Web.UI.WebControls.WebParts.CatalogPart> controls. Even though the <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> object is read\-only, you can make programmatic changes to the underlying controls referenced in the collection.  
  
   
  
## 例  
 The following code example demonstrates several uses of the <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> class. There are four parts to this code example:  
  
-   A user control that enables you to change display modes on a Web Parts page.  
  
-   A class for a custom <xref:System.Web.UI.WebControls.WebParts.WebPart> control named `TextDisplayWebPart`, which is referenced in the Web page and is contained in one of the <xref:System.Web.UI.WebControls.WebParts.CatalogPart> controls.  
  
-   A Web page that references the `TextDisplayWebPart` control, contains a <xref:System.Web.UI.WebControls.WebParts.CatalogZone> control with two of the <xref:System.Web.UI.WebControls.WebParts.CatalogPart> controls from the Web Parts control set declared in the zone, and contains event\-driven code to create and manipulate a <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> object.  
  
-   An explanation of how the code example works when you load it in a browser.  
  
 The first part of the code example is the user control. The source code for the user control comes from another topic. For this code example to work, you need to obtain the .ascx file for the user control from the [Walkthrough: Changing Display Modes on a Web Parts Page](http://msdn.microsoft.com/ja-jp/24e42f74-82dc-4c13-8574-130398985fc0) topic, and place the file in the same folder as the .aspx page in this code example.  
  
 The second part of the code example is the `TextDisplayWebPart` control. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App\_Code folder, where it will be dynamically compiled at run time. For a walkthrough that demonstrates both methods of compiling, see [Walkthrough: Developing and Using a Custom Server Control](http://msdn.microsoft.com/ja-jp/6d90782a-a1a4-45a6-b2d4-cf6362b83b08). Note that the control has a property named `ContentText`; this property holds the value that the user enters in the text box.  
  
 [!code-csharp[WebParts\_CatalogPartCollection\_Overview\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogPartCollection_Overview/CS/textdisplaywebpart.cs#3)]
 [!code-vb[WebParts\_CatalogPartCollection\_Overview\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogPartCollection_Overview/VB/textdisplaywebpart.vb#3)]  
  
 The third part of the code example is the Web page. Notice that the **languageKeyword tag is not supported!!!!**  
 element for the page contains declarations for two <xref:System.Web.UI.WebControls.WebParts.CatalogPart> controls. These controls become part of a custom <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> object that is created when the `Button1_Click` method executes. The <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> control contains Web server controls that have been previously closed by a user at run time. Controls in the <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> control can be added back to a page. The <xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart> control contains a declaration of the custom `TextDisplayWebPart` control. When the page is in catalog mode, a user can add the `TextDisplayWebPart` control to the page so that it can be used in normal browse mode.  
  
 [!code-csharp[WebParts\_CatalogPartCollection\_Overview\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogPartCollection_Overview/CS/catalogpartcollectioncs.aspx#1)]
 [!code-vb[WebParts\_CatalogPartCollection\_Overview\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogPartCollection_Overview/VB/catalogpartcollectionvb.aspx#1)]  
  
 When you load the page in a browser, you can switch the page into catalog mode by selecting **ui tag is not supported!!!!**  
 in the **ui tag is not supported!!!!**  
 drop\-down list control. You can add the custom <xref:System.Web.UI.WebControls.WebParts.WebPart> control to the page by selecting the check box next to it and clicking **ui tag is not supported!!!!**  
. Click **ui tag is not supported!!!!**  
 to return the page to browse mode. On the control you just added, if you click the verbs menu \(the down arrow that appears in the title bar\) and then click **ui tag is not supported!!!!**  
, the control is removed from the page and added to the <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> control. Return the page to catalog mode, and click the **ui tag is not supported!!!!**  
 link to view the contents of the <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> control. Notice that the control you closed now appears there. Clicking the **ui tag is not supported!!!!**  
 button accesses the <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> object and displays certain properties of the contained <xref:System.Web.UI.WebControls.WebParts.CatalogPart> controls.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> を含んでいるゾーン <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロールが作成するコントロールでは通常、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> オブジェクトを通じて、 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogParts%2A> メソッドです。 ただし、作成することも、独自 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> の他のプログラムで目的のオブジェクト。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CatalogPartCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogPartCollection.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>新しい空のインスタンスを初期化、 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection" /> クラスです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.%23ctor%2A> コンス トラクターの空のインスタンスを初期化します、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> クラスです。 このコンス トラクターのオーバー ロードが内部で使用、 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> クラスの <xref:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts%2A> 空のコレクション オブジェクトを作成します。 ゾーンのすべてのインスタンスを作成し、 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロールは、子ゾーンのテンプレートで宣言されに追加するコレクションの内部メソッドを使用します。  
  
 このオーバー ロードを使用することはできません、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.%23ctor%2A> の新しいインスタンスを作成するコンス トラクター、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> 追加 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロールをします。 他のオーバー ロードのいずれかを使用する必要があります、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.%23ctor%2A> コンス トラクター代わりにします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CatalogPartCollection (System.Collections.ICollection catalogParts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.ICollection catalogParts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogPartCollection.#ctor(System.Collections.ICollection)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="catalogParts" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="catalogParts">
          <see cref="T:System.Collections.ICollection" /> の <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> コントロールです。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection" /> クラスを渡すことによって、 <see cref="T:System.Collections.ICollection" /> のコレクション <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> コントロールです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.%23ctor%2A> コンス トラクターのインスタンスを初期化します、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> クラスとパスのコレクションの <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロールです。 これは、1 つのオーバー ロード、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.%23ctor%2A> を新規に作成に使用できるコンス トラクター <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> オブジェクトを追加 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロールをします。  
  
 ですが、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> 、コンス トラクターによって作成されたインスタンスが読み取り専用で、アクセスするには、個人 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> プログラムを使用して、コレクション内を制御し、そのプロパティおよびメソッドの呼び出しです。  
  
 このコンス トラクターを使用するための 1 つの一般的なシナリオは、上のセット全体で、バッチ処理を実行するかどうかでしょう <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コンテンツ、外観、または関連する項目のグループの位置を変更するなどのコントロールです。  
  
   
  
## 例  
 次のコード例では、カスタムを作成する方法を示します <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection>, 、個々 の変更のバッチ操作を実行して <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 読み取り専用である場合でも、コレクション内で制御します。 例を実行するために必要な完全なコードの例」のセクションを参照してください、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> クラスの概要に関するトピック。  
  
 内のコード、 `Button1_Click` メソッドは、作成、 <xref:System.Collections.ArrayList> オブジェクト、2 つの追加 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 、オブジェクトのページを制御し、新たに作成し、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> オブジェクトを使用して、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.%23ctor%2A> コンス トラクターです。 バッチの変更を加える、基にする方法も示します <xref:System.Web.UI.WebControls.WebParts.CatalogPart> を制御する場合でも、コレクション自体は読み取り専用です。 ループして、コレクションの更新、 <xref:System.Web.UI.WebControls.WebParts.Part.Description%2A> 各コントロールのプロパティです。  
  
 [!code-csharp[WebParts\_CatalogPartCollection\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogPartCollection_Overview/CS/catalogpartcollectioncs.aspx#2)]
 [!code-vb[WebParts\_CatalogPartCollection\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogPartCollection_Overview/VB/catalogpartcollectionvb.aspx#2)]  
  
 ブラウザーでページを読み込むときにすることができます、ページ モードに切り替えてカタログを選択して **カタログ** で、 **表示モード** ドロップダウン リスト コントロールです。 クリックすると、 **表示 CatalogPart プロパティ** ボタンへのアクセス、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> オブジェクトおよび格納されているの特定のプロパティを表示 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロールです。 また、タイトル テキストの境界内で上にマウス ポインターを配置するかどうか、 <xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart> コントロール \(説明はツールヒントに表示されます\)\] ボタンをクリックしたときに、コントロールに追加された新しい説明テキストを表示できます。 クリックすると、 **ページ カタログ** 表示へのリンク、 <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> コントロールも説明が更新されている検索されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CatalogPartCollection (System.Web.UI.WebControls.WebParts.CatalogPartCollection existingCatalogParts, System.Collections.ICollection catalogParts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.WebControls.WebParts.CatalogPartCollection existingCatalogParts, class System.Collections.ICollection catalogParts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogPartCollection.#ctor(System.Web.UI.WebControls.WebParts.CatalogPartCollection,System.Collections.ICollection)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="existingCatalogParts" Type="System.Web.UI.WebControls.WebParts.CatalogPartCollection" />
        <Parameter Name="catalogParts" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="existingCatalogParts">
          <see cref="T:System.Collections.ICollection" /> 既存の <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> ゾーン内のコントロールです。</param>
        <param name="catalogParts">
          <see cref="T:System.Collections.ICollection" /> 追加の <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> コントロールです。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection" /> クラスを渡すことによって、 <see cref="T:System.Collections.ICollection" /> 、既存のコレクション <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> ゾーン、およびコントロールの追加のコレクション内のコントロールです。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Web.UI.WebControls.WebParts.CatalogPart catalogPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Web.UI.WebControls.WebParts.CatalogPart catalogPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogPartCollection.Contains(System.Web.UI.WebControls.WebParts.CatalogPart)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalogPart" Type="System.Web.UI.WebControls.WebParts.CatalogPart" />
      </Parameters>
      <Docs>
        <param name="catalogPart">A <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> は、チェックをコレクション内にあるかどうかを判断します。</param>
        <summary>コレクション内の特定のコントロールが存在するかどうかを示す値を返します。</summary>
        <returns>特定のコントロールがコレクション内にあるかどうかを示すブール値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.Contains%2A> メソッドでは、特定のかどうかを確認できます。 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> の一部は、オブジェクト、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> オブジェクトです。  
  
   
  
## 例  
 次のコード例を特定する方法を示して かどうか、特定 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロールのメンバーである、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> オブジェクトです。 例を実行するために必要な完全なコードの例」のセクションを参照してください、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> クラスの概要に関するトピック。  
  
 内のコード、 `Button1_Click` メソッドが、新たに作成 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> という名前のオブジェクト `myParts`します。 メソッドを使用して、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.Contains%2A> メソッドを呼び出せば確認するかどうか、 `PageCatalogPart1` コントロールが存在し場合は、コントロールを取得し、プロパティ値を変更します。  
  
 [!code-csharp[WebParts\_CatalogPartCollection\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogPartCollection_Overview/CS/catalogpartcollectioncs.aspx#2)]
 [!code-vb[WebParts\_CatalogPartCollection\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogPartCollection_Overview/VB/catalogpartcollectionvb.aspx#2)]  
  
 ブラウザーでページを読み込むときにすることができます、ページ モードに切り替えてカタログを選択して **カタログ** で、 **表示モード** ドロップダウン リスト コントロールです。 ユーザー設定の追加 <xref:System.Web.UI.WebControls.WebParts.WebPart> 隣のチェック ボックスを選択し、クリックして、ページにコントロール **追加**します。 クリックして **閉じる** ブラウズ モードをページに戻ります。 コントロールに、追加した場合は、動詞メニュー \(タイトル バーに表示される下向きの矢印\) をクリックし、クリックして **閉じる**, 、コントロールがページから削除されに追加、 <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> コントロールです。 ページをカタログ モードに戻り、クリックして、 **ページ カタログ** の内容を表示するリンク、 <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> コントロールです。 閉じられたコントロールに追加されたことに注意してください。 クリックすると、 **表示 CatalogPart プロパティ** ボタンへのアクセス、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> オブジェクトおよび格納されているの特定のプロパティを表示 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロールです。 含まれるサーバー コントロールの横にあるチェック ボックスをオンに、 <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> をクリックして、制御 **追加** ページに移動して追加し、クリックする **閉じる** ブラウズ モードをページに戻ります。 もう一度コントロール動詞メニューをクリックし、閉じる動詞が消えたことを確認します。 内のコードによって削除された、 `Button1_Click` メソッドを使用する場合、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.Contains%2A> をチェックするメソッド `PageCatalogPart1`, 、し、設定、 <xref:System.Web.UI.WebControls.WebParts.WebPart.AllowClose%2A> プロパティを `false`します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.IList.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Web.UI.WebControls.WebParts.CatalogPart[] array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Web.UI.WebControls.WebParts.CatalogPart[] array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogPartCollection.CopyTo(System.Web.UI.WebControls.WebParts.CatalogPart[],System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Web.UI.WebControls.WebParts.CatalogPart[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">配列 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> コピーされたコレクションを格納するオブジェクト。</param>
        <param name="index">コレクションの内容を格納する配列内の開始位置。</param>
        <summary>コレクションの配列にコピーします <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [CopyTo メソッド \(CatalogPart\<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.CopyTo%2A> メソッドは含めることができるカスタムの配列を構築するときに、 [CopyTo メソッド \(CatalogPart\<xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロールで、 [CopyTo メソッド \(CatalogPart\<xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> オブジェクト、またはそれらのコントロールのサブセットです。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static readonly System.Web.UI.WebControls.WebParts.CatalogPartCollection Empty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Web.UI.WebControls.WebParts.CatalogPartCollection Empty" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.WebParts.CatalogPartCollection.Empty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.CatalogPartCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コレクションの静的な読み取り専用、空のインスタンスを参照します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 静的な読み取り専用、空のインスタンス <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> メソッドから、適切なオブジェクトの種類を返すか、別のオブジェクト インスタンスと比較する空のコレクション インスタンスを作成するは、インスタンスにメンバーを追加する必要はない場合にメモリ使用量を削減します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.Web.UI.WebControls.WebParts.CatalogPart catalogPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.Web.UI.WebControls.WebParts.CatalogPart catalogPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogPartCollection.IndexOf(System.Web.UI.WebControls.WebParts.CatalogPart)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalogPart" Type="System.Web.UI.WebControls.WebParts.CatalogPart" />
      </Parameters>
      <Docs>
        <param name="catalogPart">A <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> コレクションのメンバーであります。</param>
        <summary>コレクションの特定のメンバーの位置を返します。</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> のメンバーである、 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.IndexOf%2A> メソッドが複数ある場合に使用 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> Web パーツ ページ上のコントロールは、コレクション内で特定のコントロールを検索する必要があります。  
  
   
  
## 例  
 次のコード例では、メンバーの位置を特定する方法を示しています、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> を使用してコレクションの <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.IndexOf%2A> プロパティです。 例を実行するために必要な完全なコードの例」のセクションを参照してください、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> クラスの概要に関するトピック。  
  
 内のコード、 `Button1_Click` メソッドが、新たに作成 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> という名前のオブジェクト `myParts`します。 メソッドを使用して、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.IndexOf%2A> の位置を取得するプロパティを <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> を制御して、コントロールのプロパティの値に変更します。  
  
 [!code-csharp[WebParts\_CatalogPartCollection\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogPartCollection_Overview/CS/catalogpartcollectioncs.aspx#2)]
 [!code-vb[WebParts\_CatalogPartCollection\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogPartCollection_Overview/VB/catalogpartcollectionvb.aspx#2)]  
  
 ブラウザーでページを読み込みの後にすることができます、ページ モードに切り替えてカタログを選択して **カタログ** で、 **表示モード** ドロップダウン リスト コントロールです。 クリックすると、 **表示 CatalogPart プロパティ** ボタンへのアクセス、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> オブジェクトおよび格納されているの特定のプロパティを表示 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロールです。 クリックして、 **ページ カタログ** の内容を表示するリンク、 <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> コントロールです。 あります、タイトルのみと、境界線のためその <xref:System.Web.UI.WebControls.WebParts.WebPart.ChromeType%2A> プロパティの値に変更されました <xref:System.Web.UI.WebControls.WebParts.PartChromeType.TitleOnly> ために使用するコードで、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.IndexOf%2A> コントロールを取得するプロパティです。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.IList.IndexOf(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.CatalogPart this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.CatalogPart Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.CatalogPartCollection.Item(System.Int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.CatalogPart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">特定のインデックス <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> コレクションにします。</param>
        <summary>取得またはコレクション内での位置に基づいて、コレクションのメンバーを設定します。</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> コレクション内の指定したインデックス位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.Item%2A> インデクサーを使用すると、基になるアクセス <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロールで、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> をインデックスでオブジェクトしそのプロパティ値を変更またはメソッドを呼び出します。  
  
   
  
## 例  
 次のコード例では、メンバーにアクセスする方法を示しています、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> オブジェクトのインデックスを使用します。 例を実行するために必要な完全なコードの例」のセクションを参照してください、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> クラスの概要に関するトピック。  
  
 内のコード、 `Button1_Click` メソッドが、新たに作成 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> という名前のオブジェクト `myParts`します。 メソッドを使用している、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.Item%2A> コレクションの最初のメンバーから情報を取得するためのインデクサーです。  
  
 [!code-csharp[WebParts\_CatalogPartCollection\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogPartCollection_Overview/CS/catalogpartcollectioncs.aspx#2)]
 [!code-vb[WebParts\_CatalogPartCollection\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogPartCollection_Overview/VB/catalogpartcollectionvb.aspx#2)]  
  
 ブラウザーでページを読み込むときにすることができます、ページ モードに切り替えてカタログを選択して **カタログ** で、 **表示モード** ドロップダウン リスト コントロールです。 クリックすると、 **表示 CatalogPart プロパティ** ボタンへのアクセス、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> オブジェクトおよび格納されているの特定のプロパティを表示 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロールです。 内の利用可能なサーバー コントロールの数、 <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> を使用してコントロールを取得、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.Item%2A> でインデクサー、 `Button1_Click` メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.CatalogPart this[string id] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.CatalogPart Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.CatalogPartCollection.Item(System.String)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.CatalogPart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">特定の一意識別子 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> コレクションにします。</param>
        <summary>一意の文字列識別子に基づいてコレクションのメンバーを返します。</summary>
        <value>最初の <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> ID を持つコレクション内の値に等しい <paramref name="id" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.Item%2A> インデクサーを使用すると、基になるアクセス <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロールで、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> 文字列識別子を使用してオブジェクトです。 ただし、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> オブジェクトは読み取り専用には、プロパティ値を変更またはインデクサーがアクセスする基になるコントロールのメソッドを呼び出すことができます。  
  
   
  
## 例  
 次のコード例では、メンバーにアクセスする方法を示しています、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> オブジェクトの文字列 ID 値を使用しています。 例を実行するために必要な完全なコードの例」のセクションを参照してください、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> クラスの概要に関するトピック。  
  
 内のコード、 `Button1_Click` メソッドが、新たに作成 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> という名前のオブジェクト `myParts`します。 メソッドを使用して、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.Item%2A> に関する情報を取得するためのインデクサー、 <xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart> コレクションの 2 番目のメンバーであるコントロール。  
  
 [!code-csharp[WebParts\_CatalogPartCollection\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogPartCollection_Overview/CS/catalogpartcollectioncs.aspx#2)]
 [!code-vb[WebParts\_CatalogPartCollection\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogPartCollection_Overview/VB/catalogpartcollectionvb.aspx#2)]  
  
 ブラウザーでページを読み込むときにすることができます、ページ モードに切り替えてカタログを選択して **カタログ** で、 **表示モード** ドロップダウン リスト コントロールです。 クリックすると、 **表示 CatalogPart プロパティ** ボタンへのアクセス、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection> オブジェクトおよび格納されているの特定のプロパティを表示 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> コントロールです。 内の利用可能なサーバー コントロールの数、 <xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart> を使用してコントロールを取得、 <xref:System.Web.UI.WebControls.WebParts.CatalogPartCollection.Item%2A> インデクサー、 `Button1_Click` メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>特定の位置または一意の識別子に基づいてコレクションのメンバーを返します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>