<Type Name="EditorZone" FullName="System.Web.UI.WebControls.WebParts.EditorZone">
  <TypeSignature Language="C#" Value="public class EditorZone : System.Web.UI.WebControls.WebParts.EditorZoneBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EditorZone extends System.Web.UI.WebControls.WebParts.EditorZoneBase" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.EditorZone" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.EditorZoneBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.WebParts.EditorZoneDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.SupportsEventValidation</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Web ページ上の <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> コントロールをホストするための、Web パーツ コントロール セットの主なコントロールとして機能します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 Within the Web Parts control set, a zone is a composite control that covers a defined region on a Web page and contains server controls. The primary functions of a zone are to lay out the controls it contains, and to provide a common user interface \(UI\) for those controls. For general information about zones and how they are used in Web Parts applications, see the reference documentation for the base <xref:System.Web.UI.WebControls.WebParts.WebZone> class, and [Web Parts Control Set Overview](http://msdn.microsoft.com/ja-jp/ff0149e4-695a-401a-8cda-53df6d7d2668).  
  
 The <xref:System.Web.UI.WebControls.WebParts.EditorZone> control is one of the fundamental controls in the Web Parts control set. A key feature of Web Parts is the ability of end users to modify \(or personalize\) Web pages according to their preferences, and save their personalized settings for future browser sessions. One aspect of modifying Web Parts pages includes editing; users can edit the appearance, layout, behavior, and other properties of the visible <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. Several controls in the Web Parts control set provide the editing features, including the <xref:System.Web.UI.WebControls.WebParts.EditorZone> control.  
  
 An <xref:System.Web.UI.WebControls.WebParts.EditorZone> control becomes visible when a Web Parts page enters edit mode, and it makes available various <xref:System.Web.UI.WebControls.WebParts.EditorPart> controls that can be used to personalize <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The <xref:System.Web.UI.WebControls.WebParts.EditorZone> control is very similar to its parent, the <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> class, with one key difference: The <xref:System.Web.UI.WebControls.WebParts.EditorZone> control provides a zone template, referenced in its <xref:System.Web.UI.WebControls.WebParts.EditorZone.ZoneTemplate%2A> property. The zone template adds the ability to declare content in the page persistence format. Page developers can place an <xref:System.Web.UI.WebControls.WebParts.EditorZone> control in the declarative markup of a Web page, add a child **languageKeyword tag is not supported!!!!**  
 element, and within the **languageKeyword tag is not supported!!!!**  
 element, add declarative references to <xref:System.Web.UI.WebControls.WebParts.EditorPart> controls.  
  
 The <xref:System.Web.UI.WebControls.WebParts.EditorZone> control also has a method, <xref:System.Web.UI.WebControls.WebParts.EditorZone.CreateEditorParts%2A>, which overrides a base method in the <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> class. This method is necessary so that an <xref:System.Web.UI.WebControls.WebParts.EditorZone> control can create the zone template to contain any <xref:System.Web.UI.WebControls.WebParts.EditorPart> controls that are added to the zone declaratively.  
  
> [!NOTE]
>  The buttons in the <xref:System.Web.UI.WebControls.WebParts.EditorZone> UI require client\-side scripting in order to work correctly. If scripting is disabled in the browser, the user will not be able to perform actions through the <xref:System.Web.UI.WebControls.WebParts.EditorZone> UI.  
  
## Accessibility  
 The markup rendered by default for this control might not conform to accessibility standards such as the Web Content Accessibility Guidelines 1.0 \(WCAG\) priority 1 guidelines. For details about accessibility support for this control, see [ASP.NET Controls and Accessibility](http://msdn.microsoft.com/ja-jp/847a37e3-ce20-41da-b0d3-7dfb0fdae9a0).  
  
   
  
## 例  
 The following code example demonstrates several declarative and programmatic uses of the <xref:System.Web.UI.WebControls.WebParts.EditorZone> class. The example creates a custom editor zone that inherits from the <xref:System.Web.UI.WebControls.WebParts.EditorZone> class, and uses it in a Web Parts page.  
  
 The code example has three parts:  
  
-   A user control that enables you to change display modes on the Web page.  
  
-   A Web page that references the custom <xref:System.Web.UI.WebControls.WebParts.EditorZone> control.  
  
-   An explanation of how the example works.  
  
 The first part of this code example is the user control that enables users to change display modes on a Web page. For more details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](http://msdn.microsoft.com/ja-jp/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-csharp[WebParts\_EditorZone\_Overview\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_EditorZone_Overview/CS/displaymodecs.ascx#4)]
 [!code-vb[WebParts\_EditorZone\_Overview\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_EditorZone_Overview/VB/displaymodevb.ascx#4)]  
  
 The second part of the code example is a Web page. Near the top of the page is a **languageKeyword tag is not supported!!!!**  
 directive for the user control. The user control tag is declared in the page with a **languageKeyword tag is not supported!!!!**  
 prefix for the element. Notice that below the **languageKeyword tag is not supported!!!!**  
 element is an **languageKeyword tag is not supported!!!!**  
 element that contains several <xref:System.Web.UI.WebControls.WebParts.EditorPart> controls, with some tags and properties set to determine its appearance and behavior. There are also a number of methods that access various members of the <xref:System.Web.UI.WebControls.WebParts.EditorZone> control programmatically.  
  
 [!code-csharp[WebParts\_EditorZone\_Overview\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_EditorZone_Overview/CS/editorzonecs.aspx#1)]
 [!code-vb[WebParts\_EditorZone\_Overview\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_EditorZone_Overview/VB/editorzonevb.aspx#1)]  
  
 When you load the page in a browser, you can select **ui tag is not supported!!!!**  
 in the drop\-down list to switch to edit mode. To display the editing UI, you can click the verbs menu \(the downward arrow\) in the title bar of one of the two controls, and click **ui tag is not supported!!!!**  
 to edit the control. With the editing UI visible, you can see the effects of the declarative and programmatic uses of the <xref:System.Web.UI.WebControls.WebParts.EditorZone> class members.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>If you want to create a custom <see cref="T:System.Web.UI.WebControls.WebParts.EditorZone" /> zone to gain greater control over the rendering of the editing UI, you can inherit directly from the <see cref="T:System.Web.UI.WebControls.WebParts.EditorZoneBase" /> class, as long as you do not need to provide zone template support for page developers to add <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> controls to your zone declaratively. In such a case, you would add all <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> controls to a zone programmatically. If you want to provide zone template support, you should inherit from the <see cref="T:System.Web.UI.WebControls.WebParts.EditorZone" /> class.</para>
    </block>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.EditorPart" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EditorZone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.EditorZone.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.WebParts.EditorZone" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEditorParts">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.WebParts.EditorPartCollection CreateEditorParts ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.WebParts.EditorPartCollection CreateEditorParts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.EditorZone.CreateEditorParts" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.EditorPartCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>すべてを作成、 <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> コントロールがページの永続化の形式でゾーンのテンプレート内で宣言します。</summary>
        <returns>
          <see cref="T:System.Web.UI.WebControls.WebParts.EditorPartCollection" /> すべてへの参照を含む、 <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> ゾーンのテンプレート内で宣言されたコントロール。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.EditorZone.CreateEditorParts%2A> メソッドのみを作成する基本メソッドをオーバーライドして、 <xref:System.Web.UI.WebControls.WebParts.EditorPart> ゾーンのテンプレート内で宣言されているコントロール。 その他の <xref:System.Web.UI.WebControls.WebParts.EditorPart> ゾーンに追加されたコントロールをプログラムで追加する必要があります。 これは、ため、たとえば、実装することによって、 <xref:System.Web.UI.WebControls.WebParts.IWebEditable> インターフェイスで、 <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロールです。 次に、オーバーライドされた <xref:System.Web.UI.WebControls.WebParts.IWebEditable.CreateEditorParts%2A> メソッド、ユーザー設定のコレクションを追加する <xref:System.Web.UI.WebControls.WebParts.EditorPart> をゾーンにコントロールできます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">現在 <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> コントロールには、ID はありません。</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.IWebEditable.CreateEditorParts" />
      </Docs>
    </Member>
    <Member MemberName="ZoneTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate ZoneTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate ZoneTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.EditorZone.ZoneTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.WebParts.EditorZone))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateInstance(System.Web.UI.TemplateInstance.Single)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>内の子コントロールを格納するテンプレートが用意されて、 <see cref="T:System.Web.UI.WebControls.WebParts.EditorZone" /> ページ永続化の形式で制御します。</summary>
        <value>
          <see cref="T:System.Web.UI.ITemplate" /> のゾーンで子コントロールのコンテナーとして機能するゾーンのテンプレートです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.EditorZone.ZoneTemplate%2A> プロパティは、主な違い、 <xref:System.Web.UI.WebControls.WebParts.EditorZone> クラスとベース <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> クラスです。 ゾーンのテンプレートのサポートを追加することで、 <xref:System.Web.UI.WebControls.WebParts.EditorZone> クラスにより、ページ開発者は、子に配置 <xref:System.Web.UI.WebControls.WebParts.EditorPart> 内で制御、 <xref:System.Web.UI.WebControls.WebParts.EditorZone> コントロールを Web ページの宣言型マークアップです。 ゾーンのテンプレートは、子コントロールのコンテナーとして機能します。  
  
> [!NOTE]
>  Set アクセサー、 <xref:System.Web.UI.WebControls.WebParts.EditorZone.ZoneTemplate%2A> プロパティの呼び出し、 <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.InvalidateEditorParts%2A> メソッドのコレクションを強制的に <xref:System.Web.UI.WebControls.WebParts.EditorPart> 再作成するテンプレートで宣言されたコントロール。 これにより、認識されるようにテンプレートの内容ですべての変更が原因です。  
  
 宣言内でゾーンのテンプレートを使用する、 <xref:System.Web.UI.WebControls.WebParts.EditorZone> のペアを追加するコントロール、 `<zonetemplate>` タグ、および参照 <xref:System.Web.UI.WebControls.WebParts.EditorPart> タグの間のコントロールです。 インスタンスごとに 1 つだけのゾーンのテンプレートがレンダリングされる、 <xref:System.Web.UI.WebControls.WebParts.EditorZone> コントロール \(そのため、複数追加する必要はありません `<zonetemplate>` 要素を <xref:System.Web.UI.WebControls.WebParts.EditorZone> コントロール\)。 ゾーンのテンプレートも、 <xref:System.Web.UI.WebControls.WebParts.EditorZone> コントロールから派生した一部のコントロールのみを含めることができます、 <xref:System.Web.UI.WebControls.WebParts.EditorPart> クラスです。  
  
   
  
## 例  
 次のコード例では宣言型使用、 <xref:System.Web.UI.WebControls.WebParts.EditorZone.ZoneTemplate%2A> プロパティです。 例」のセクションの例では、完全なコードがある、 <xref:System.Web.UI.WebControls.WebParts.EditorZone> クラスの概要です。  
  
 コード例を示す方法 <xref:System.Web.UI.WebControls.WebParts.EditorPart> にコントロールを配置できる、 `<zonetemplate>` 内の要素、 <xref:System.Web.UI.WebControls.WebParts.EditorZone> コントロールです。  
  
 [!code-csharp[WebParts\_EditorZone\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_EditorZone_Overview/CS/editorzonecs.aspx#2)]
 [!code-vb[WebParts\_EditorZone\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_EditorZone_Overview/VB/editorzonevb.aspx#2)]  
  
 ブラウザーでページを読み込むときに選択できます **編集モードの** 編集モードに切り替えるにドロップダウン リストにします。 編集のユーザー インターフェイス \(UI\) を表示するには、2 つのコントロールのいずれかのタイトル バーに動詞メニュー \(下向きの矢印\) をクリックし、\] をクリックして **編集** コントロールを編集します。 表示されている編集の UI で、いくつかを確認できます <xref:System.Web.UI.WebControls.WebParts.EditorPart> 内で宣言されているコントロール、 `<zonetemplate>` 要素。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartZone.ZoneTemplate" />
        <altmember cref="T:System.Web.UI.ITemplate" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.EditorZoneBase.InvalidateEditorParts" />
      </Docs>
    </Member>
  </Members>
</Type>