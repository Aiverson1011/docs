<Type Name="ProviderConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint">
  <TypeSignature Language="C#" Value="public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ProviderConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>プロバイダーがコンシューマーとの接続を構成するプロバイダーとして機能するサーバー コントロールを有効にする接続ポイント オブジェクトを定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 すべての Web パーツには、2 つのサーバー コントロールの間の接続が、各コントロールは、その他のコントロールへの接続とを指定するか、プロバイダーまたは接続のコンシューマーと、コントロールが指定されているかどうかに応じて、データを使用できるようにするに関連付けられた接続ポイント オブジェクトの中でその他の要件\) が必要です。 A <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> オブジェクトには一般に他のコントロールと共有できるデータの種類にコントロールを接続する方法の詳細が含まれています。 接続でプロバイダーとして機能するコントロール、その接続ポイントがある必要があります、 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> オブジェクトです。 詳細については、Web パーツ接続と接続ポイントは、下にある「参照」セクションのトピックを参照してください。  
  
 作成する、 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> オブジェクトのいくつかの手順が必要。  
  
1.  インターフェイスを作成します。 プロバイダーがコンシューマーとプロバイダーの共有データをするときにこれは、インターフェイスのインスタンスを取得し、消費者にそのインスタンスを返すことで。  
  
2.  プロバイダーのインターフェイスを実装します。 A <xref:System.Web.UI.WebControls.WebParts.WebPart> またはその他のサーバー コントロール \(任意の種類でのサーバー コントロールの <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> ゾーンを使用できます\) を付ける、プロバイダーは、最初の手順で作成されたインターフェイスを実装する必要があります。  
  
3.  コールバック メソッドを識別します。 プロバイダーのメソッドは、接続を確立するコールバック メソッドとして識別する必要があります。 このメソッドは、コンシューマーに実装されたインターフェイスのインスタンスを返します。 プロバイダーのコールバック メソッドを識別するための Web パーツのアプローチは、追加する、 `ConnectionProvider` メタデータ属性 \(によって定義された、 <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> クラス\) をインターフェイスのインスタンスを返すメソッドにします。 属性が追加されると、プロバイダー接続ポイントとして使用する表示名は唯一の必須パラメーターです。 コネクション ポイントの ID などは、省略可能なパラメーターが追加されるもできます。  
  
 プロバイダーとして機能するコントロールが与えられて後、は、コントロールが \(コンシューマー コントロールに装備され使用可能なが同様にあると仮定\) の接続に参加できます。 Web ページのマークアップで、宣言型の静的な接続を作成する開発者が使用できる、 `<asp:webpartconnection>` 要素。 場合、 `ConnectionProvider` コールバック メソッドを識別するプロバイダーのソース コード内の属性は、接続ポイントに ID を指定し、その値を割り当てる必要があります、 `ProviderConnectionPointID` 属性、 `<asp:webpartconnection>` ページの要素。 開発者がプロバイダーの接続ポイントの ID を指定する 1 つの理由は、プロバイダー コントロールに複数のコネクション ポイントがあるかどうかです。 割り当てられる値がないプロバイダー コントロールでのプロバイダー接続ポイントの ID を指定しない場合、 `ProviderConnectionPointID` から取得した既定値を使用して、接続が作成するためのページで、属性、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> フィールドです。  
  
 コード内の接続を作成するには、開発者を新規に作成する必要があります <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> オブジェクトを呼び出して、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> メソッドと ID または定義済のインデックスと共に、プロバイダー コントロールの ID を渡す <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> プロバイダー コントロール内のオブジェクト。 返された <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> プロバイダー コントロールへの参照と共に、コンシューマー コントロールと、対応するへの参照をオブジェクト <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> オブジェクトはすべてに渡される、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> を新規に作成メソッド <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> オブジェクトです。  
  
 開発者は、宣言やプログラムによって接続の確立の一部として、プロバイダー接続ポイントを使用できますが、ユーザーもユーザー インターフェイス \(UI\) を介して接続を確立するプロバイダー接続ポイントと対話できます。 開発者は、宣言する場合、 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> コントロール、Web ページ上の接続を作成するランタイムの UI を提供します。 ユーザーをクリックして、接続を確立するための開始点として、コンシューマー コントロールを選択する場合、connect 動詞 \(プロバイダーを選択することも、確立された接続に違いはありません\)、使用可能なプロバイダー接続ポイント \(またはポイントが複数の場合\) の表示名のドロップダウン リスト コントロールが UI に表示されます。 ユーザーは、接続を作成するプロバイダー接続ポイントを選択する必要があります。  
  
 A <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> オブジェクトは、特定のプロバイダーのコントロールを直接関連付けます、基本から継承プロパティでの接続に関する詳細情報が格納 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> クラスです。 などで、継承された <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> プロパティには、プロバイダー接続ポイントが、プロバイダーによって返されるインターフェイスの型を保持します。 プロバイダーとコンシューマー両方が扱う同じ接続では、インターフェイスの種類、コントロールを設定するは互換性のあるおよび対応の直接接続を構成するのです。 互換性がありませんし、使用する必要がありますと同じインターフェイス型プロバイダーとコンシューマーが機能できない場合、 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> プロバイダー接続ポイントを変換するオブジェクト <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> 、コンシューマーが使用できる型に値です。 もう 1 つの重要な継承されたプロパティは、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> をプロバイダーの接続を選択するユーザーの UI に表示する表示名を提供するプロパティが接続を作成するときにポイントします。 開発者は、追加すると、表示名は必須パラメーター、 `ConnectionProvider` 属性をプロバイダー コントロールのコールバック メソッド。 継承された <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> プロパティはプロバイダーが複数の接続ポイントを持つこと、プロバイダーの接続ポイントの一意の識別子を提供しているため、上記の説明に従って、便利です。 プロバイダーでは複数 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> オブジェクトで定義されていますが、ここでは開発者の追加と、 `ConnectionProvider` 属性をメソッドに各接続ポイントを区別するために ID 値を指定する必要があります。 他の注目すべき継承されたプロパティは 1 つは、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> プロパティで、プロバイダー接続ポイントが複数のコンシューマーに同時に接続できるかどうかを示します。 このプロパティの値が `true` 既定では、プロバイダー接続ポイント \(既定値は、 `false` コンシューマー接続ポイント\)。  
  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 固有のいくつかのメソッドを追加するクラスから継承してメンバーに、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> クラスです。<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> メソッドは、コールバック メソッドをコンシューマーに返すインターフェイスのインスタンスを取得します。<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> メソッドが既存の接続の一部である追加の消費者のインターフェイスを取得しますが、インターフェイスではない接続を確立するために使用します。  
  
   
  
## 例  
 次のコード例では、宣言によって、接続を作成、プログラム、または UI の各ケースでは、プロバイダー接続ポイントを使用する簡単な方法を示します。  
  
 この例では、4 つの部分があります。  
  
-   Web パーツを変更することができますユーザー コントロールは、ページのモードを表示します。  
  
-   インターフェイスと 2 つのコードをソース <xref:System.Web.UI.WebControls.WebParts.WebPart> プロバイダーと接続のコンシューマーとしての動作を制御します。  
  
-   すべてのコントロールをホストし、コード例を実行する Web ページ。  
  
-   ページの例を実行する方法の説明です。  
  
 このコード例の最初の部分は、ユーザーが Web ページの表示モードを変更できるユーザー コントロールです。 割り当てられているファイル名を付けます .ascx ファイルに次のソース コードを保存、 `Src` の属性、 `Register` ホストする Web ページの上部にあるディレクティブは、このユーザー コントロールをします。 詳細については、このコントロールのモードとソース コードの説明を表示、参照してください [Walkthrough: Changing Display Modes on a Web Parts Page](http://msdn.microsoft.com/ja-jp/24e42f74-82dc-4c13-8574-130398985fc0)します。  
  
 [!code-csharp[WebParts\_ConnectionPoint\_Overview\#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-vb[WebParts\_ConnectionPoint\_Overview\#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 コード例の 2 番目の部分では、インターフェイスとコントロールのソース コードを示します。 ソース ファイルには、という名前の単純なインターフェイスが含まれています。 `IZipCode`します。<xref:System.Web.UI.WebControls.WebParts.WebPart> という名前のクラス `ZipCodeWebPart` インターフェイスを実装であり、プロバイダー コントロールとして機能します。 その `ProvideIZipCode` メソッドは、インターフェイスの唯一のメンバーを実装するコールバック メソッド。 メソッドは、単に、インターフェイスのインスタンスを返します。 メソッドが表示されているメモ、 `ConnectionProvider` メタデータ内の属性です。 これは、プロバイダーの接続ポイントのコールバック メソッドとしてメソッドを識別するためのメカニズムです。 他の <xref:System.Web.UI.WebControls.WebParts.WebPart> クラスの名前は `WeatherWebPart`, 、接続のコンシューマーとして機能するとします。 このクラスはという名前のメソッドを持つ `GetZipCode` のインスタンスを取得する、 `IZipCode` プロバイダー コントロールからのインターフェイスです。 このメソッドとコンシューマーのコネクション ポイントのメソッドとしてマークされることに注意してください、 `ConnectionConsumer` メタデータ内の属性です。 これは、コンシューマー コントロールに接続ポイント メソッドを識別するためのメカニズムです。  
  
 このコード例を実行するには、このソース コードをコンパイルする必要があります。 明示的にコンパイルし、Web サイトの Bin フォルダーまたはグローバル アセンブリ キャッシュに、生成されたアセンブリを配置できます。 また、ここで、動的にコンパイル実行時に、サイトの App\_Code フォルダーにソース コードを配置することができます。 このコード例では、動的なコンパイルを使用します。 コンパイルする方法について説明するチュートリアルは、次を参照してください。 [Walkthrough: Developing and Using a Custom Server Control](http://msdn.microsoft.com/ja-jp/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)します。  
  
 [!code-csharp[WebParts\_ConnectionPoint\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts\_ConnectionPoint\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 コード例の 3 番目の部分は、Web ページです。 上部にある、 `Register` 、接続を構成するカスタム コントロール、および変更できるように、ユーザー コントロールに登録するためのディレクティブは、モードをページに表示します。 接続が内に宣言によって作成された、 `<staticconnections>` ページ上の要素。 これは、接続を作成する 1 つの方法\-メモ、 `ProviderConnectionPointID` 属性、 `<asp:webpartconnection>` 要素。 プログラムで接続を作成することもできます。これを行うためのコードは、 `Button1_Click` メソッドです。 ここで、 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> オブジェクトが作成され、実際の接続を作成するメソッドに渡されます。 宣言またはプログラムによって、接続が作成されるかどうかコネクション ポイントは、コンシューマーとプロバイダーの常に指定する必要があります。`Button2_Click` メソッドへのアクセス、 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 、コンシューマーとプロバイダーの両方のオブジェクトし、そのプロパティ値の一部をページ内のラベルに書き込みます。  
  
 [!code-csharp[WebParts\_ConnectionPoint\_Overview\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-vb[WebParts\_ConnectionPoint\_Overview\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ブラウザーでページを読み込んだ後、 **コネクション ポイントの詳細** \] ボタンをクリックします。 宣言型の接続で確立されたプロバイダーとコンシューマー接続ポイントに関する情報が表示されます。 次に、使用、 **表示モード** 接続モードのドロップダウン コントロールをページに切り替えます。 動詞メニューを開き、 **郵便コンシューマー**<xref:System.Web.UI.WebControls.WebParts.WebPart> コントロール \(タイトル バーの下向きの矢印で表される\)、connect 動詞をクリックします。 UI が表示されたら、接続がによって自動的に作成された、 `<asp:connectionszone>` コントロール、ページで宣言します。 これは、既に説明した宣言型およびプログラムによる方法と共に \(UI\) を経由して接続を作成する別の方法です。 クリックして、 **切断** を既存の静的な接続を終了する\] ボタンをクリックします。 クリックして、 **プロバイダーへの接続を作成する** リンクします。 UI では、プロバイダー接続ポイントの表示名を一覧表示するドロップダウン コントロールが表示されます。 ドロップダウン リストで、接続ポイントを選択し、クリックして **接続** 、接続を完了します。 次に、クリックして **切断** 再度します。 クリックして、 **動的接続** プログラムを使用して接続を作成する\] ボタンをクリックします。 使用して、 **表示モード** ページをブラウズ モードを返すときにします。 クリックして、 **接続ポイントの詳細** \] をもう一度プロバイダー接続ポイントのオブジェクトに関する詳細情報を示すために再度します。  
  
 この例では接続を確立して、次の 3 つの方法でプロバイダー接続ポイントを使用してを示しました Web ページのマークアップで宣言された静的な接続。使用するコードで作成した接続、 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> オブジェクト、およびユーザー接続の UI を使って作成された接続。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod">接続を確立するコンシューマーにインターフェイスのインスタンスを返すプロバイダー コントロールのメソッド。</param>
        <param name="interfaceType">
          <see cref="T:System.Type" /> のプロバイダーがコンシューマーに提供するインターフェイスです。</param>
        <param name="controlType">
          <see cref="T:System.Type" /> のプロバイダー接続ポイントが関連付けられているプロバイダー コントロールです。</param>
        <param name="displayName">接続のユーザー インターフェイス \(UI\) 内のユーザーに表示されるプロバイダー接続ポイントの表示名。</param>
        <param name="id">プロバイダー接続ポイントの一意の識別子。</param>
        <param name="allowsMultipleConnections">プロバイダー接続ポイントがコンシューマーと複数の同時接続を保持できるかどうかを示すブール値。</param>
        <summary>
          <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> のコンス トラクター、 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> クラスが基本のコンス トラクターのさまざまなパラメーターを渡すと、基本クラスの初期化を呼び出すだけです。  
  
 基本クラス コンス トラクターでは、接続ポイントのパラメーターの数を確認し、いくつかの例外をスローすることができます。 可能性のある例外の一覧は、例外を参照してください。  
  
 呼び出すことができます、 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> のインスタンスを作成するコンス トラクター、 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> クラスです。 ただし、単に接続が確立され、クラスを拡張しないお住まいの場合を呼び出す必要があります、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> プロバイダーの既存の接続ポイント オブジェクトを返します。  
  
   
  
## 例  
 派生する次のコード例には、 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> カスタム プロバイダー接続ポイントを作成するクラス。  
  
 このコード例には、3 つの部分があります。  
  
-   プロバイダーを含むソース ファイル <xref:System.Web.UI.WebControls.WebParts.WebPart> を制御するコンシューマー <xref:System.Web.UI.WebControls.WebParts.WebPart> 制御、およびカスタム <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> オブジェクトです。  
  
-   静的な接続のコントロールをホストする Web ページ。  
  
-   コード例を実行する方法の説明です。  
  
 このコード例の最初の部分は、プロバイダーとコンシューマーのソース <xref:System.Web.UI.WebControls.WebParts.WebPart> コントロール、およびカスタム <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> という名前のクラス `TableProviderConnectionPoint`します。 なおのコンス トラクター、 `TableProviderConnectionPoint` クラスは、必須のパラメーターを渡すパラメーター セクションに示されていると、基本コンス トラクターを呼び出します。 注意してください、 `TableProviderWebPart` クラス、 `GetConnectionInterface` メソッドは、接続のコールバック メソッドとして指定し、 `ConnectionProvider` 属性宣言、カスタム `TableProviderConnectionPoint` をパラメーターとして。 これは、カスタム プロバイダー接続ポイントを作成し、それをプロバイダー コントロールに関連付ける方法を示しています。 この例では、ソース コードがコンパイルが動的に、Web アプリケーションの App\_Code サブフォルダーにソース コード ファイルを配置する必要があります。  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 コード例の 2 番目の部分は、静的な Web パーツ接続でカスタム コントロールをホストする Web ページです。 ページの上部には、 `Register` ディレクティブで使用すると、プレフィックスとカスタム コントロールの名前空間を宣言します。 使用して、接続が宣言されている、 `<asp:webpartconnection>` 要素、およびプロバイダーとコンシューマーのコントロールは、内で宣言、 `<asp:webpartzone>` 要素。  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 ブラウザーでページを読み込みます。 既にコントロール間の接続が存在し、ページの静的な接続として接続が宣言されているために、コンシューマーが、プロバイダーからデータを表示します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callbackMethod" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="interfaceType" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="controlType" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="displayName" /> <see langword="null" /> または空の文字列 \(""\) です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="controlType " />プロバイダー コントロールと同じ型ではありません \(またはそこから派生した有効なクラス\)。</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Web パーツの接続でプロバイダーとして機能するコントロール。</param>
        <summary>コンシューマーに返すインターフェイス インスタンスを取得する、プロバイダー コントロールでのコールバック メソッドを呼び出します。</summary>
        <returns>
          <see cref="T:System.Object" /> は接続を確立するコンシューマーにプロバイダーのインターフェイスのインスタンスを返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、接続を確立するために使用されるインターフェイスのインスタンスは、プロバイダー コントロールからオブジェクトを返します。 オブジェクトの型は、実装済みインターフェイスの型になります。 たとえば、2 つのインターフェイス コントロール セットには Web パーツの接続に対して実装される <xref:System.Web.UI.WebControls.WebParts.IWebPartField> と <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>です。 ときに、 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> メソッドが、 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> オブジェクト、関連付けられているプロバイダーでは、これらのインターフェイスを実装して、返されたオブジェクトで、同じ種類のなります。  
  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> メソッドによって呼び出されます <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> オブジェクトの接続をアクティブ化時にします。 これは、実際には接続を開始し、2 つのコントロールでデータを共有できるようにする処理を開始する重要なステップです。  
  
 接続のコンシューマー コントロールは、プロバイダーと同じ型のインターフェイスを使用できる必要があります。 コントロールとの互換性がない場合はそうでないと、 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> オブジェクトは、接続を確立するために使用する必要があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSecondaryInterfaces">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Web パーツの接続でプロバイダーとして機能するコントロール。</param>
        <summary>プロバイダー接続ポイントによるサポート可能なセカンダリのインターフェイスのオプションのコレクションを取得します。</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" /> プロバイダーとして機能するコントロールによって提供されるインターフェイスが追加されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プロバイダー接続ポイントのオブジェクトは、常にコンシューマーとの接続を確立するために使用される既定のインターフェイスを持ちます。 既定のインターフェイスのインスタンスを呼び出すことによって取得、 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> メソッドを <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> オブジェクトです。  
  
 ただし、一部のプロバイダー コントロールは、接続文字列の一部としてコンシューマーに提供する複数のインターフェイスを実装します。 これらのインターフェイスでは、既定の接続を確立するために使用するものではないは、セカンダリ インターフェイスと呼ばれます。<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> メソッドと同様にセカンダリ インターフェイスへの参照のコレクションを返す方法を提供する、 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> メソッドは、既定のインターフェイスへの参照を返します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>The <see cref="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" /> method in the <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> class contains no implementation; it returns an empty collection of secondary interfaces. To implement this method, you must inherit from the <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> class, and override this method, returning from it a specific set of secondary interfaces.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>