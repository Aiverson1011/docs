<Type Name="HttpListenerResponse" FullName="System.Net.HttpListenerResponse">
  <TypeSignature Language="C#" Value="public sealed class HttpListenerResponse : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpListenerResponse extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.HttpListenerResponse" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.HttpListener</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>によって処理される要求に応答を表す、 <see cref="T:System.Net.HttpListener" /> オブジェクトです。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 によって処理される場合は、クライアントがリソースの要求、 <xref:System.Net.HttpListener> オブジェクトで、アプリケーションで利用できる要求と応答、 <xref:System.Net.HttpListenerContext> オブジェクトです。 要求がによって表される、 <xref:System.Net.HttpListenerRequest> オブジェクトし、なる、 <xref:System.Net.HttpListenerContext.Request%2A?displayProperty=fullName> プロパティです。 応答がによって表される、 <xref:System.Net.HttpListenerResponse> オブジェクトし、が含まれて、 <xref:System.Net.HttpListenerContext.Response%2A?displayProperty=fullName> プロパティです。  
  
 など、さまざまなプロパティを設定して、応答をカスタマイズする <xref:System.Net.HttpListenerResponse.StatusCode%2A>, 、<xref:System.Net.HttpListenerResponse.StatusDescription%2A>, 、および <xref:System.Net.HttpListenerResponse.Cookies%2A>です。 使用して、 <xref:System.Net.HttpListenerResponse.OutputStream%2A?displayProperty=fullName> を取得するプロパティ、 <xref:System.IO.Stream> インスタンスが応答にデータを書き込むことができます。 最後に、呼び出すことによって応答データをクライアントに送信、 <xref:System.Net.HttpListenerResponse.Close%2A> メソッドです。  
  
   
  
## 例  
 次のコード例では、クライアント要求に応答を示しています。  
  
 [!code-csharp[Net\_Listener\_Basic\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Net.HttpListener" />
    <altmember cref="T:System.Net.HttpListenerContext" />
    <altmember cref="T:System.Net.HttpListenerRequest" />
  </Docs>
  <Members>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerResponse.Abort" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>応答を送信せず、クライアントへの接続を閉じます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドが既に閉じられているオブジェクトを呼び出しても効果はありません。 このメソッドは、および関連付けられた閉じます応答が終了されていない場合 <xref:System.Net.HttpListenerRequest> と <xref:System.Net.HttpListenerContext> オブジェクトです。 クライアントへの接続が終了したかに関係なくはも、 <xref:System.Net.HttpListenerRequest.KeepAlive%2A> クライアント要求のプロパティの値。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="AddHeader">
      <MemberSignature Language="C#" Value="public void AddHeader (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHeader(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerResponse.AddHeader(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">設定する HTTP ヘッダーの名前。</param>
        <param name="value">値、 <c>name</c> ヘッダー。</param>
        <summary>この応答の HTTP ヘッダーに指定されたヘッダーと値を追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを呼び出すことは、呼び出すことと同じ、 <xref:System.Net.WebHeaderCollection.Set%2A> メソッドによって返されるコレクションを <xref:System.Net.HttpListenerResponse.Headers%2A> プロパティです。  
  
 ヘッダーで指定されている場合は、 `name` が存在しないこのメソッドに新しいヘッダーを挿入する、 <xref:System.Net.HttpListenerResponse.Headers%2A> プロパティのコレクション。 場合 `name` は既存の値をこのメソッドの置換、コレクション内にある `value`です。 既存の値を置き換えることがなく、既存のヘッダーに値を追加するには、使用、 <xref:System.Net.HttpListenerResponse.AppendHeader%2A> メソッドです。  
  
   
  
## 例  
 次のコード例では、このプロパティを使用してヘッダーの追加を示します。  
  
 [!code-csharp[Net\_Listener\_Basic\#26](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> <see langword="null" /> または空の文字列 \(""\) です。</exception>
        <exception cref="T:System.ArgumentException">指定したヘッダーの値を指定することはできません。  
  
 または  
  
 <paramref name="name" /> または <paramref name="value" /> 無効な文字が含まれています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">長さ <paramref name="value" /> 65,535 文字よりも大きいです。</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
        <altmember cref="T:System.Net.WebHeaderCollection" />
      </Docs>
    </Member>
    <Member MemberName="AppendCookie">
      <MemberSignature Language="C#" Value="public void AppendCookie (System.Net.Cookie cookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendCookie(class System.Net.Cookie cookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerResponse.AppendCookie(System.Net.Cookie)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cookie" Type="System.Net.Cookie" />
      </Parameters>
      <Docs>
        <param name="cookie">この応答で送信されるコレクションに追加する <see cref="T:System.Net.Cookie" />。</param>
        <summary>指定した <see cref="T:System.Net.Cookie" /> をこの応答のクッキーのコレクションに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Calling this method is equivalent to calling the <xref:System.Net.CookieCollection.Add%2A> method on the collection returned by the <xref:System.Net.HttpListenerResponse.Cookies%2A> property.  
  
 If the specified cookie does not exist in the <xref:System.Net.HttpListenerResponse.Cookies%2A> property's collection, **parameterReference tag is not supported!!!!**  
 is added. If the cookie exists in the collection, **parameterReference tag is not supported!!!!**  
 replaces it.  
  
   
  
## 例  
 The following code example demonstrates adding a cookie to a response  
  
 [!code-csharp[Net\_Listener\_Basic\#20](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="cookie" /> は <see langword="null" /> です。</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="AppendHeader">
      <MemberSignature Language="C#" Value="public void AppendHeader (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendHeader(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerResponse.AppendHeader(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">追加する HTTP ヘッダーの名前 <c>value</c> にします。</param>
        <param name="value">追加する値、 <c>name</c> ヘッダー。</param>
        <summary>この応答で送信される指定した HTTP ヘッダーに値を追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを呼び出すことは、呼び出すことと同じ、 <xref:System.Net.WebHeaderCollection.Add%2A> メソッドによって返されるコレクションを <xref:System.Net.HttpListenerResponse.Headers%2A> プロパティです。  
  
 ヘッダーで指定されている場合は、 `header` が存在しないこのメソッドに新しいヘッダーを挿入する、 <xref:System.Net.HttpListenerResponse.Headers%2A> プロパティのコレクション。 場合 `header` はこのメソッドを追加、コレクション内にある `value` 既存の値にします。 既存のヘッダーの値を置き換えるを使用して、 <xref:System.Net.HttpListenerResponse.AddHeader%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> <see langword="null" /> または空の文字列 \(""\) です。  
  
 または  
  
 指定したヘッダーの値を指定することはできません。  
  
 または  
  
 <paramref name="name" /> または <paramref name="value" /> 無効な文字が含まれています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">長さ <paramref name="value" /> 65,535 文字よりも大きいです。</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerResponse.Close" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>クライアントに応答を送信し、これによって保持されているリソースを解放 <see cref="T:System.Net.HttpListenerResponse" /> インスタンス。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、応答ストリームを閉じ、 <xref:System.Net.HttpListenerRequest> 応答に関連付けられています。  
  
   
  
## 例  
 次のコード例では、送信するには、このメソッドを呼び出す方法を示します、 <xref:System.Net.HttpStatusCode.Forbidden> \(403\)、クライアントに応答します。  
  
 [!code-csharp[NclListener\#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLListener/CS/sample.cs#5)]
 [!code-vb[NclListener\#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLListener/vb/sample.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close (byte[] responseEntity, bool willBlock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close(unsigned int8[] responseEntity, bool willBlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerResponse.Close(System.Byte[],System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="responseEntity" Type="System.Byte[]" />
        <Parameter Name="willBlock" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="responseEntity">A <see cref="T:System.Byte" /> 、クライアントに送信する応答を格納する配列。</param>
        <param name="willBlock">
          <see langword="true" /> クライアントにストリームのフラッシュ中に実行をブロックするにはそれ以外の場合、 <see langword="false" />です。</param>
        <summary>指定したバイト配列をクライアントに返し、これによって保持されているリソースを解放 <see cref="T:System.Net.HttpListenerResponse" /> インスタンス。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 として送信するこのメソッドを使用するには、応答本文のデータを送信する場合、 [Close メソッド \(Byte\<xref:System.Byte> 配列を本文データを記述する代わりに、 [Close メソッド \(Byte\<xref:System.Net.HttpListenerResponse.OutputStream%2A> プロパティと呼び出し、 [Close メソッド \(Byte\<xref:System.Net.HttpListenerResponse.Close%2A> メソッドです。  
  
 このメソッドは、応答ストリームを閉じ、 [Close メソッド \(Byte\<xref:System.Net.HttpListenerRequest> 応答に関連付けられています。  
  
   
  
## 例  
 次のコード例では、このメソッドを呼び出す方法を示します。  
  
 [!code-csharp[Net\_Listener\_Basic\#24](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="responseEntity" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられました。</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="ContentEncoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding ContentEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding ContentEncoding" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerResponse.ContentEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、 <see cref="T:System.Text.Encoding" /> この応答の <see cref="P:System.Net.HttpListenerResponse.OutputStream" />です。</summary>
        <value>
          <see cref="T:System.Text.Encoding" /> オブジェクト内のデータで使用するのに適した、 <see cref="P:System.Net.HttpListenerResponse.OutputStream" /> プロパティ、または <see langword="null" /> エンコーディングが指定されていない場合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.Encoding> バイト シーケンスを文字セット \(コード ページ\) と文字をバイト シーケンスに変換するオブジェクトを使用できます。  
  
   
  
## 例  
 次のコード例では、このプロパティの使用方法を示します。  
  
 [!code-csharp[NclListener\#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLListener/CS/sample.cs#5)]
 [!code-vb[NclListener\#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLListener/vb/sample.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="ContentLength64">
      <MemberSignature Language="C#" Value="public long ContentLength64 { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ContentLength64" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerResponse.ContentLength64" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または応答に含まれる本文データのバイト数を設定します。</summary>
        <value>応答の値 <see langword="Content-Length" /> ヘッダー。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `Content-Length` ヘッダーが応答の本文データの長さをバイト単位で表されます。 チャンクは、データを送信しない形式を使用して生、設定することも必要があります、 <xref:System.Net.HttpListenerResponse.ContentLength64%2A> プロパティです。 そうしない場合、 <xref:System.Net.HttpListener> 応答データを送信しません。  
  
 応答ヘッダーの完全な一覧については、 <xref:System.Net.HttpResponseHeader> 列挙します。  
  
   
  
## 例  
 次のコード例では、このプロパティの値の設定を示します。  
  
 [!code-csharp[Net\_Listener\_Basic\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作は指定された値が 0 未満です。</exception>
        <exception cref="T:System.InvalidOperationException">応答は既に送信されています。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられました。</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="ContentType">
      <MemberSignature Language="C#" Value="public string ContentType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContentType" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerResponse.ContentType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または返されるコンテンツの MIME の種類を設定します。</summary>
        <value>A <see cref="T:System.String" /> 、応答のテキストを含むインスタンス <see langword="Content-Type" /> ヘッダー。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 以外の任意のコンテンツ タイプを返すときにこのプロパティを設定する Web ブラウザーを使って通信するときに明示的にする必要があります `text/html`します。  
  
 応答ヘッダーの完全な一覧については、 <xref:System.Net.HttpResponseHeader> 列挙します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作に指定された値は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">設定操作は、空の文字列に指定された値 \(""\) です。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられました。</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="Cookies">
      <MemberSignature Language="C#" Value="public System.Net.CookieCollection Cookies { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.CookieCollection Cookies" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerResponse.Cookies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.CookieCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または応答で返されたクッキーのコレクションを設定します。</summary>
        <value>A <see cref="T:System.Net.CookieCollection" /> 応答を伴うクッキーを格納しています。 コレクションは、応答に cookie が追加されていない場合は、空です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Cookie とは、ローカル \(クライアント\) コンピューターに保存されている Web サーバーからの名前と値のテキスト データです。 以下の cookie の形式がサポートされています: Netscape、RFC 2109 および RFC 2965 します。 Netscape の cookie の仕様は http:\/\/wp.netscape.com\/newsref\/std\/cookie\_spec.html;RFC ドキュメントは、「 [http:\/\/www.rfc\-editor.org](http://www.rfc-editor.org)します。  
  
   
  
## 例  
 次のコード例では、クッキーの要求をチェックし、要求ではいずれもがない場合は、応答と共に新しいクッキーを返します。  
  
 [!code-csharp[Net\_Listener\_Basic\#20](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="CopyFrom">
      <MemberSignature Language="C#" Value="public void CopyFrom (System.Net.HttpListenerResponse templateResponse);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFrom(class System.Net.HttpListenerResponse templateResponse) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerResponse.CopyFrom(System.Net.HttpListenerResponse)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="templateResponse" Type="System.Net.HttpListenerResponse" />
      </Parameters>
      <Docs>
        <param name="templateResponse">
          <see cref="T:System.Net.HttpListenerResponse" /> コピー対象のインスタンス。</param>
        <summary>指定された対象からプロパティをコピー <see cref="T:System.Net.HttpListenerResponse" /> この応答にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 新しい値の固定セットに、既定値から定期的に多くのプロパティを変更する場合は、使用すると便利な <xref:System.Net.HttpListenerResponse> をテンプレートとしてのインスタンス。 1 回、それぞれの応答を個別に構成する代わりに、テンプレートの応答をカスタマイズ、呼び出し、 <xref:System.Net.HttpListenerResponse.CopyFrom%2A> テンプレート応答内のプロパティ値に基づいて、新しい応答を構成する方法です。  
  
 次のプロパティからコピーされる `templateResponse` 現在のインスタンスにします。  
  
-   <xref:System.Net.HttpListenerResponse.Headers%2A>  
  
-   <xref:System.Net.HttpListenerResponse.ContentLength64%2A>  
  
-   <xref:System.Net.HttpListenerResponse.StatusCode%2A>  
  
-   <xref:System.Net.HttpListenerResponse.StatusDescription%2A>  
  
-   <xref:System.Net.HttpListenerResponse.KeepAlive%2A>  
  
-   <xref:System.Net.HttpListenerResponse.ProtocolVersion%2A>  
  
   
  
## 例  
 次のコード例では、テンプレートの応答をコピーして、応答の作成を示します。  
  
 [!code-csharp[NCLListener\#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLListener/CS/sample.cs#5)]
 [!code-vb[NCLListener\#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLListener/vb/sample.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="Headers">
      <MemberSignature Language="C#" Value="public System.Net.WebHeaderCollection Headers { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.WebHeaderCollection Headers" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerResponse.Headers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebHeaderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはサーバーによって返されるヘッダーの名前\/値ペアのコレクションを設定します。</summary>
        <value>A <see cref="T:System.Net.WebHeaderCollection" /> インスタンスすべてを含む、応答に含まれる HTTP ヘッダーを明示的に設定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 応答ヘッダーには、日付と、応答時間、応答側のサーバーと、応答本文に含まれるデータの MIME の種類の id などのメタデータ情報が格納します。  
  
 応答ヘッダーの完全な一覧については、 <xref:System.Net.HttpResponseHeader> 列挙します。  
  
> [!NOTE]
>  コンテンツ長を設定しようとする場合、転送エンコード Keep Alive WWW 認証ヘッダーをヘッダー プロパティの例外を使用してがスローされます。 使用して、 <xref:System.Net.HttpListenerResponse.KeepAlive%2A> または <xref:System.Net.HttpListenerResponse.ContentLength64%2A> プロパティをこれらのヘッダーを設定します。 転送エンコードまたは WWW 認証ヘッダーを手動で設定することはできません。  
  
   
  
## 例  
 含まれるヘッダーを表示するコード例を次に示します、 <xref:System.Net.WebHeaderCollection>です。  
  
 [!code-csharp[Net\_Listener\_Basic\#23](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Net.WebHeaderCollection" /> 設定操作が応答を無効に指定したインスタンス。</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="KeepAlive">
      <MemberSignature Language="C#" Value="public bool KeepAlive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeepAlive" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerResponse.KeepAlive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはサーバーが永続的な接続を要求するかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" /> サーバーは、永続的な接続を要求する場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合は、HTTP クライアントとサーバー、短時間で複数回データを交換する、永続的な接続、通信速度を各メッセージ用の TCP 接続を開いたり、閉じたりするために必要なオーバーヘッドを回避することを目指しています。 現在の Web ブラウザーと Web サーバー間の通信で広範囲に使用中の永続的な接続されます。  
  
 永続的な接続が RTF Editor の Web サイトで利用可能な http\/1.1 プロトコル仕様 \(RFC 2616\) で詳しく説明されている \([http:\/\/www.rfc\-editor.org](http://www.rfc-editor.org)\)。  
  
   
  
## 例  
 次のコード例では、このプロパティの値の設定を示します。  
  
 [!code-csharp[NclListener\#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLListener/CS/sample.cs#7)]
 [!code-vb[NclListener\#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLListener/vb/sample.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられました。</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="OutputStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream OutputStream { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream OutputStream" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerResponse.OutputStream" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.IO.Stream" /> オブジェクトを応答を書き込むことができます。</summary>
        <value>A <see cref="T:System.IO.Stream" /> オブジェクトを応答を書き込むことができます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.HttpListenerResponse.ContentLength64%2A> プロパティは、返されたに書き込む前に明示的に設定する必要があります <xref:System.IO.Stream> オブジェクトです。  
  
> [!NOTE]
>  要求を終了しても、このプロパティによって返されるストリームは閉じられません。 ストリームが不要になったときに、Close メソッドを呼び出すことで閉じる必要があります。  
  
   
  
## 例  
 次のコード例では、このメソッドを呼び出す方法を示します。  
  
 [!code-csharp[Net\_Listener\_Basic\#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられました。</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="ProtocolVersion">
      <MemberSignature Language="C#" Value="public Version ProtocolVersion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Version ProtocolVersion" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerResponse.ProtocolVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または応答に使用する HTTP バージョンを設定します。</summary>
        <value>A <see cref="T:System.Version" /> HTTP クライアントに応答する場合の使用のバージョンを示すオブジェクト。 このプロパティは使われているに注意してください。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 HTTP は異なるバージョンの機能は、http:\/\/www.ietf.org で利用できるドキュメントで指定されます。  
  
   
  
## 例  
 次のコード例では、このプロパティの値の設定を示します。  
  
 [!code-csharp[NclListener\#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLListener/CS/sample.cs#5)]
 [!code-vb[NclListener\#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLListener/vb/sample.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作に指定された値は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">設定操作がある指定された値、 <see cref="P:System.Version.Major" /> プロパティが 1 に設定かがない、 <see cref="P:System.Version.Minor" /> プロパティが 0 または 1 に設定します。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられました。</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="Redirect">
      <MemberSignature Language="C#" Value="public void Redirect (string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Redirect(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerResponse.Redirect(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">この URL は、クライアントが要求されたリソースの検出に使用する必要があります。</param>
        <summary>指定した URL に、クライアントをリダイレクトする応答を構成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.HttpListenerResponse.Redirect%2A> メソッドを使用してリソースの新しい場所にクライアントをリダイレクトします。 このメソッドは、応答を設定 `Location` ヘッダーを `url`, 、 <xref:System.Net.HttpListenerResponse.StatusCode%2A> プロパティを <xref:System.Net.HttpStatusCode.Redirect>, 、および <xref:System.Net.HttpListenerResponse.StatusDescription%2A> プロパティを「不明」にします。  
  
   
  
## 例  
 次のコード例では、このメソッドを呼び出す方法を示します。  
  
 [!code-csharp[Net\_Listener\_Basic\#27](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#27)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="RedirectLocation">
      <MemberSignature Language="C#" Value="public string RedirectLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RedirectLocation" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerResponse.RedirectLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>HTTP の値を取得または <see langword="Location" /> この応答のヘッダー。</summary>
        <value>A <see cref="T:System.String" /> でクライアントに送信される絶対 URL を表す、 <see langword="Location" /> ヘッダー。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `Location` ヘッダーは、クライアントが要求されたリソースを見つける宛ての URL を指定します。  
  
> [!NOTE]
>  このプロパティは自動的に設定されていない設定、 <xref:System.Net.HttpListenerResponse.StatusCode%2A> プロパティです。  
  
   
  
## 例  
 次のコード例では、このプロパティの設定を示します。  
  
 [!code-csharp[Net\_Listener\_Basic\#25](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">設定操作は、空の文字列に指定された値 \(""\) です。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられました。</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="SendChunked">
      <MemberSignature Language="C#" Value="public bool SendChunked { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SendChunked" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerResponse.SendChunked" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または、応答でチャンク転送エンコードが使用するかどうかを設定します。</summary>
        <value>
          <see langword="true" /> チャンク転送エンコード; を使用する応答が設定されている場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 チャンク メッセージの本文は、一連のチャンクで構成されます。 各チャンクは、2 つの部分は構成されています: チャンク データと実際のデータのサイズ。 設定すると、応答を true を使用して送信はチャンク転送エンコードです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCookie">
      <MemberSignature Language="C#" Value="public void SetCookie (System.Net.Cookie cookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCookie(class System.Net.Cookie cookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerResponse.SetCookie(System.Net.Cookie)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cookie" Type="System.Net.Cookie" />
      </Parameters>
      <Docs>
        <param name="cookie">A <see cref="T:System.Net.Cookie" /> この応答をします。</param>
        <summary>追加または更新、 <see cref="T:System.Net.Cookie" /> この応答で送信されたクッキーのコレクション。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 2 つの cookie は場合でも同じと見なされるの値、 <xref:System.Net.Cookie.Name%2A>, 、<xref:System.Net.Cookie.Domain%2A>, と <xref:System.Net.Cookie.Path%2A> プロパティは同じです。 これら 3 つの情報が同じ場合は、メソッドは、cookie を更新しようとします。 名前とドメインの比較、大文字と小文字を区別はありませんパス比較では、大文字小文字を区別します。  
  
   
  
## 例  
 次のコード例では、このメソッドを呼び出す方法を示します。  
  
 [!code-csharp[Net\_Listener\_Basic\#28](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="cookie" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">クッキーは既にコレクションに存在し、置き換えられませんでした。</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="StatusCode">
      <MemberSignature Language="C#" Value="public int StatusCode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 StatusCode" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerResponse.StatusCode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはクライアントに返される HTTP ステータス コードを設定します。</summary>
        <value>
          <see cref="T:System.Int32" /> 、要求されたリソースの HTTP ステータス コードを指定する値。 既定値は <see cref="F:System.Net.HttpStatusCode.OK" />, 、サーバーが正常にクライアントの要求を処理し、応答本文で要求されたリソースが含まれていることを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 クライアントは、続行するのに方法を決定するのに、サーバーによって返されるステータス コードを使用します。 値 <xref:System.Net.HttpStatusCode.OK> 、サーバーが正常にクライアントの要求を処理し、応答本文で要求されたリソースが含まれていることを示します。 その他の一般的なステータス コードを含める <xref:System.Net.HttpStatusCode.NotFound>, 、サーバーで、要求されたリソースが見つからなかったことを示すと <xref:System.Net.HttpStatusCode.NotModified>, が最新では、クライアントには、リソースのコピーがキャッシュされているために、応答本文で要求されたリソースを返す必要がないことを示します。  
  
 可能なステータス コードの一覧については、次を参照してください。、 <xref:System.Net.HttpStatusCode> 列挙します。  
  
   
  
## 例  
 次のコード例では、このプロパティの値の設定を示します。  
  
 [!code-csharp[Net\_Listener\_Basic\#7](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられました。</exception>
        <exception cref="T:System.Net.ProtocolViolationException">セット操作に指定された値が正しくありません。 有効な値は、100 ~ 999 の範囲です。</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="StatusDescription">
      <MemberSignature Language="C#" Value="public string StatusDescription { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StatusDescription" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerResponse.StatusDescription" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはクライアントに返される HTTP ステータス コードのテキストの説明を設定します。</summary>
        <value>クライアントに返される HTTP ステータス コードのテキスト説明します。 既定値は RFC 2616 の説明、 <see cref="P:System.Net.HttpListenerResponse.StatusCode" /> プロパティの値、または空の文字列 \(""\)、RFC 2616 説明が存在しない場合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ステータスの説明が通常を説明する詳細情報を提供、 <xref:System.Net.HttpListenerResponse.StatusCode%2A> 値。  
  
   
  
## 例  
 次のコード例では、このプロパティの値の設定を示します。  
  
 [!code-csharp[NclListener\#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLListener/CS/sample.cs#7)]
 [!code-vb[NclListener\#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLListener/vb/sample.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作に指定された値は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">セット操作に指定された値には、印刷できない文字が含まれています。</exception>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerResponse.System#IDisposable#Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Net.HttpListenerResponse" /> によって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Net.HttpListenerResponse.Close%2A> 、応答を送信し、保持しているリソースを解放する方法、 <xref:System.Net.HttpListenerResponse>です。 応答を破棄し、このインスタンスによって保持されているリソースを解放を使用して、 <xref:System.Net.HttpListenerResponse.Abort%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerContext" />
        <altmember cref="T:System.Net.HttpListenerRequest" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Close">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>クライアントに応答を送信し、これによって保持されているリソースを解放 <see cref="T:System.Net.HttpListenerResponse" /> インスタンス。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>