<Type Name="ICredentialPolicy" FullName="System.Net.ICredentialPolicy">
  <TypeSignature Language="C#" Value="public interface ICredentialPolicy" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICredentialPolicy" />
  <TypeSignature Language="DocId" Value="T:System.Net.ICredentialPolicy" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.Requests</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>使用して作成されるリソースの要求に使用する資格情報のポリシー定義 <see cref="T:System.Net.WebRequest" /> とその派生クラスです。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 資格情報のポリシーが送信するときに、資格情報を送信するかどうかを決定する <xref:System.Net.WebRequest> の Web ページのコンテンツなどのネットワーク リソース。 資格情報が送信される場合をクライアントの認証を必要とするサーバーは、クライアントの資格情報が必要であるかを示す応答を送信する代わりに、要求が受信したときに、クライアントの認証に試行できます。 これによりサーバーへのラウンド トリップを削減できますが、このパフォーマンスの向上をネットワーク経由で資格情報を送信する際に固有のセキュリティ リスクに対する分散する必要があります。 移行先サーバーにクライアント認証が必要としない場合に資格情報を送信しないことをお勧めします。  
  
> [!NOTE]
>  <xref:System.Net.ICredentialPolicy> ポリシーが呼び出される場合にのみ、 <xref:System.Net.WebRequest> または <xref:System.Net.WebProxy> 関連付けられている要求を持つ資格情報を `null`します。 このポリシーを設定しても、資格情報が指定されていない要求への影響はありません。  
  
 使用して、 <xref:System.Net.AuthenticationManager.CredentialPolicy%2A?displayProperty=fullName> プロパティを設定、 <xref:System.Net.ICredentialPolicy> ポリシーです。<xref:System.Net.IAuthenticationModule> 要求の認証を処理するを呼び出す、 <xref:System.Net.ICredentialPolicy.ShouldSendCredential%2A> 認証を実行する前にメソッドです。 メソッドが返す場合 `false`, 、認証は実行されません。  
  
 <xref:System.Net.ICredentialPolicy> ポリシーのすべてのインスタンスに影響を与えます <xref:System.Net.WebRequest> 現在のアプリケーション ドメイン内の null 以外の資格情報を使用します。 ポリシーは、個別の要求ではオーバーライドできません。  
  
   
  
## 例  
 次のコード例では、特定のホストを対象とする要求に対してのみ送信する資格情報を可能にするこのインターフェイスの実装を示します。  
  
 [!code-cpp[NclCredPolicy\#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCredPolicy/CPP/NCLCredPolicy.cpp#3)]
 [!code-csharp[NclCredPolicy\#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCredPolicy/CS/websample.cs#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ShouldSendCredential">
      <MemberSignature Language="C#" Value="public bool ShouldSendCredential (Uri challengeUri, System.Net.WebRequest request, System.Net.NetworkCredential credential, System.Net.IAuthenticationModule authenticationModule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldSendCredential(class System.Uri challengeUri, class System.Net.WebRequest request, class System.Net.NetworkCredential credential, class System.Net.IAuthenticationModule authenticationModule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.ICredentialPolicy.ShouldSendCredential(System.Uri,System.Net.WebRequest,System.Net.NetworkCredential,System.Net.IAuthenticationModule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="challengeUri" Type="System.Uri" />
        <Parameter Name="request" Type="System.Net.WebRequest" />
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="authenticationModule" Type="System.Net.IAuthenticationModule" />
      </Parameters>
      <Docs>
        <param name="challengeUri">
          <see cref="T:System.Uri" /> 要求を受信します。 詳細については、「解説」を参照してください。</param>
        <param name="request">
          <see cref="T:System.Net.WebRequest" /> 要求されているリソースを表します。</param>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> をこのメソッドが返された場合、要求と一緒に送信する、 <see langword="true" />です。</param>
        <param name="authenticationModule">
          <see cref="T:System.Net.IAuthenticationModule" /> 認証が必要な場合、認証が実行されます。</param>
        <summary>返します。、 <see cref="T:System.Boolean" /> のインスタンスを使用したリソースの要求でクライアントの資格情報が送信されるかどうかを示す、 <see cref="T:System.Net.WebRequest" /> クラスです。</summary>
        <returns>
          <see langword="true" /> 資格情報が要求と共に送信される場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 後に、 <xref:System.Net.ICredentialPolicy> を設定してポリシーが指定されている、 <xref:System.Net.AuthenticationManager.CredentialPolicy%2A?displayProperty=fullName> プロパティには、 <xref:System.Net.IAuthenticationModule> の認証を処理する、 <xref:System.Net.WebRequest> を呼び出す、 <xref:System.Net.ICredentialPolicy.ShouldSendCredential%2A> 認証を実行する前にメソッドです。 このメソッドが戻る場合 `false`, 、認証は実行されません。  
  
 元の要求がリダイレクトされているまたはプロキシ認証が必要な場合、によって識別されるリソース `challengeUri` 、要求されたリソースで指定されているとは異なっていてもかまいません <xref:System.Net.WebRequest.RequestUri%2A?displayProperty=fullName>します。 場合、リダイレクト `challengeUri` 、実際の終点を含む <xref:System.Uri>します。 プロキシ認証が必要な場合、 `challengeUri` クライアント認証が必要なプロキシ サーバーのアドレスが含まれています。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>