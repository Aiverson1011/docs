<Type Name="HttpListener" FullName="System.Net.HttpListener">
  <TypeSignature Language="C#" Value="public sealed class HttpListener : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpListener extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.HttpListener" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.HttpListener</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>単純で、プログラムによって制御できる HTTP プロトコル リスナーを提供します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 Using the <xref:System.Net.HttpListener> class, you can create a simple HTTP protocol listener that responds to HTTP requests. The listener is active for the lifetime of the <xref:System.Net.HttpListener> object and runs within your application with its permissions.  
  
> [!NOTE]
>  This class is available only on computers running the Windows XP SP2 or Windows Server 2003 operating systems. If you attempt to create an <xref:System.Net.HttpListener> object on a computer that is running an earlier operating system, the constructor throws a <xref:System.PlatformNotSupportedException> exception.  
  
 To use <xref:System.Net.HttpListener>, create a new instance of the class using the <xref:System.Net.HttpListener> constructor and use the <xref:System.Net.HttpListener.Prefixes%2A> property to gain access to the collection that holds the strings that specify which Uniform Resource Identifier \(URI\) prefixes the <xref:System.Net.HttpListener> should process.  
  
 A URI prefix string is composed of a scheme \(http or https\), a host, an optional port, and an optional path. An example of a complete prefix string is "`http://www.contoso.com:8080/customerData``/`". Prefixes must end in a forward slash \("\/"\). The <xref:System.Net.HttpListener> object with the prefix that most closely matches a requested URI responds to the request. Multiple <xref:System.Net.HttpListener> objects cannot add the same prefix; a <xref:System.ComponentModel.Win32Exception> exception is thrown if a <xref:System.Net.HttpListener> adds a prefix that is already in use.  
  
 When a port is specified, the host element can be replaced with "\*" to indicate that the <xref:System.Net.HttpListener> accepts requests sent to the port if the requested URI does not match any other prefix. For example, to receive all requests sent to port 8080 when the requested URI is not handled by any <xref:System.Net.HttpListener>, the prefix is "`http://*:8080``/`". Similarly, to specify that the <xref:System.Net.HttpListener> accepts all requests sent to a port, replace the host element with the "\+" character, "`https://+:8080`". The "\*" and "\+" characters can be present in prefixes that include paths.  
  
 Starting with .NET 4.5.3 and Windows 10, wildcard subdomains are supported in URI prefixes that are managed by an <xref:System.Net.HttpListener> object. To specify a wildcard subdomain, use the "\*" character as part of the hostname in a URI prefix: for example, `http://*.foo.com/`, and pass this as the argument to the HttpListenerPrefixCollection.Add method. This will work on .NET 4.5.3 and Windows 10; in earlier versions, this would generate an <xref:System.Net.HttpListenerException>  
  
 To begin listening for requests from clients, add the URI prefixes to the collection and call the <xref:System.Net.HttpListener.Start%2A> method. <xref:System.Net.HttpListener> offers both synchronous and asynchronous models for processing client requests. Requests and their associated responses are accessed using the <xref:System.Net.HttpListenerContext> object returned by the <xref:System.Net.HttpListener.GetContext%2A> method or its asynchronous counterparts, the <xref:System.Net.HttpListener.BeginGetContext%2A> and <xref:System.Net.HttpListener.EndGetContext%2A> methods.  
  
 The synchronous model is appropriate if your application should block while waiting for a client request and if you want to process only one request at a time. Using the synchronous model, call the <xref:System.Net.HttpListener.GetContext%2A> method, which waits for a client to send a request. The method returns an <xref:System.Net.HttpListenerContext> object to you for processing when one occurs.  
  
 In the more complex asynchronous model, your application does not block while waiting for requests and each request is processed in its own execution thread. Use the <xref:System.Net.HttpListener.BeginGetContext%2A> method to specify an application\-defined method to be called for each incoming request. Within that method, call the <xref:System.Net.HttpListener.EndGetContext%2A> method to obtain the request, process it, and respond.  
  
 In either model, incoming requests are accessed using the <xref:System.Net.HttpListenerContext.Request%2A?displayProperty=fullName> property and are represented by <xref:System.Net.HttpListenerRequest> objects. Similarly, responses are accessed using the <xref:System.Net.HttpListenerContext.Response%2A?displayProperty=fullName> property and are represented by <xref:System.Net.HttpListenerResponse> objects. These objects share some functionality with the <xref:System.Net.HttpWebRequest> and <xref:System.Net.HttpWebResponse> objects, but the latter objects cannot be used in conjunction with <xref:System.Net.HttpListener> because they implement client, not server, behaviors.  
  
 An <xref:System.Net.HttpListener> can require client authentication. You can either specify a particular scheme to use for authentication, or you can specify a delegate that determines the scheme to use. You must require some form of authentication to obtain information about the client's identity. For additional information, see the <xref:System.Net.HttpListenerContext.User%2A>, <xref:System.Net.HttpListener.AuthenticationSchemes%2A>, and <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> properties.  
  
> [!NOTE]
>  If you create an <xref:System.Net.HttpListener> using https, you must select a Server Certificate for that listener. Otherwise, an <xref:System.Net.HttpWebRequest> query of this <xref:System.Net.HttpListener> will fail with an unexpected close of the connection.  
  
> [!NOTE]
>  You can configure Server Certificates and other listener options by using HttpCfg.exe. See [http:\/\/msdn.microsoft.com\/library\/default.asp?url\=\/library\/en\-us\/http\/http\/httpcfg\_exe.asp](http://msdn.microsoft.com/library/default.asp?url=/library/http/http/httpcfg_exe.asp) for more details. The executable is shipped with Windows Server 2003, or can be built from source code available in the Platform SDK.  
  
> [!NOTE]
>  If you specify multiple authentication schemes for the <xref:System.Net.HttpListener>, the listener will challenge clients in the following order: **languageKeyword tag is not supported!!!!**  
> , **languageKeyword tag is not supported!!!!**  
> , **languageKeyword tag is not supported!!!!**  
> , and then **languageKeyword tag is not supported!!!!**  
> .  
  
   
  
## 例  
 The following code example demonstrates using a <xref:System.Net.HttpListener>.  
  
 [!code-csharp[Net\_Listener\_Basic\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Net.HttpListener" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターによって返されるインスタンスを使用する前に呼び出す必要があります、 <xref:System.Net.HttpListener.Start%2A> メソッドです。  
  
   
  
## 例  
 次のコード例では、使用方法を示します、 <xref:System.Net.HttpListener> コンス トラクターを新規に作成 <xref:System.Net.HttpListener> オブジェクトです。 完全な例については、 <xref:System.Net.HttpListener> クラスに関するトピック。  
  
 [!code-csharp[Net\_listener\_Basic\#9](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">このクラスは、現在のオペレーティング システムでは使用できません。 このクラスのインスタンスを使用するには、Windows Server 2003 または Windows XP SP2 が必要です。</exception>
        <block subset="none" type="usage">
          <para>Note: This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.Abort" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>すぐに <see cref="T:System.Net.HttpListener" /> オブジェクトをシャットダウンし、現在キューに置かれているすべての要求を破棄します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、このリスナーで保持されているすべてのリソースを破棄します。 保留中の要求が完了することができます。  
  
 このメソッドを呼び出した後にお届け、 <xref:System.ObjectDisposedException> このツールを使用しようとすると <xref:System.Net.HttpListener>です。  
  
   
  
## 例  
 次のコード例では、このメソッドを呼び出す方法を示します。  
  
 [!code-csharp[Net\_Listener\_Basic\#11](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#11)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="AuthenticationSchemes">
      <MemberSignature Language="C#" Value="public System.Net.AuthenticationSchemes AuthenticationSchemes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.AuthenticationSchemes AuthenticationSchemes" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.AuthenticationSchemes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.AuthenticationSchemes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クライアントの認証に使用する方式を取得または設定します。</summary>
        <value>クライアントの認証方法を示す <see cref="T:System.Net.AuthenticationSchemes" /> 列挙値のビットごとの組み合わせ。 既定値は <see cref="F:System.Net.AuthenticationSchemes.Anonymous" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.HttpListener> 、指定されたスキームを使用してすべての着信要求を認証します。<xref:System.Net.HttpListener.GetContext%2A> と <xref:System.Net.HttpListener.EndGetContext%2A> メソッドが、受信クライアント要求を返す場合にのみ、 <xref:System.Net.HttpListener> が正常に要求を認証します。  
  
 使用して正常に認証されたクライアントの id を問い合わせること、 <xref:System.Net.HttpListenerContext.User%2A?displayProperty=fullName> プロパティです。  
  
 場合は、 <xref:System.Net.HttpListener> 、受け取った要求の特性に基づいて、異なる認証メカニズムを使用するオブジェクト \(たとえば、要求の <xref:System.Net.HttpListenerRequest.Url%2A> または <xref:System.Net.HttpListenerRequest.UserHostName%2A> プロパティ\)、認証スキームを選択する方法を実装する必要があります。 これを行う方法の詳細については、次を参照してください。、 <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> プロパティの説明。  
  
> [!NOTE]
>  ダイジェストを有効にするには、このプロパティを設定するには、NTLM、またはネゴシエートが必要です、 <xref:System.Security.Permissions.SecurityPermission>, 、<xref:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal>です。  
  
   
  
## 例  
 次のコード例では、使用方法を示します、 <xref:System.Net.HttpListener.AuthenticationSchemes%2A> 認証スキームを指定するプロパティです。  
  
 [!code-csharp[Net\_listener\_Basic\#14](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
      </Docs>
    </Member>
    <Member MemberName="AuthenticationSchemeSelectorDelegate">
      <MemberSignature Language="C#" Value="public System.Net.AuthenticationSchemeSelector AuthenticationSchemeSelectorDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.AuthenticationSchemeSelector AuthenticationSchemeSelectorDelegate" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.AuthenticationSchemeSelector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クライアントの認証に使用するプロトコルを確認するために呼び出されるデリゲートを取得または設定します。</summary>
        <value>認証プロトコルの選択に使用されるメソッドを呼び出す <see cref="T:System.Net.AuthenticationSchemeSelector" /> デリゲート。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  場合は、同じ認証プロトコルの特定のインスタンスによって処理されるすべての要求に使用する <xref:System.Net.HttpListener>, 、このプロパティを設定する必要はありません。 すべてのクライアント要求に使用するプロトコルを指定するには、使用、 <xref:System.Net.HttpListener.AuthenticationSchemes%2A> プロパティです。  
  
 クライアントがそのヘッダーに認証情報を指定していない場合、 <xref:System.Net.HttpListener> を判断するには、存在する場合がクライアントの認証に使用するプロトコル認証されていない受信要求ごとに指定したデリゲートを呼び出します。<xref:System.Net.HttpListener.GetContext%2A> と <xref:System.Net.HttpListener.EndGetContext%2A> メソッドは、着信要求場合にのみを返す、 <xref:System.Net.HttpListener> 要求を正常に認証します。 要求を認証できない場合、 <xref:System.Net.HttpListener> 401 の応答を送信が自動的にバックアップします。 使用して正常に認証されたクライアントの id を取得できます、 <xref:System.Web.HttpRequest.LogonUserIdentity%2A?displayProperty=fullName> プロパティです。  
  
 アプリケーション固有のメソッドを認証プロトコルの選択を委任することのインスタンスを作成する場合に役立ちます。 <xref:System.Net.HttpListener> 、受け取った要求の特性に応じてさまざまな認証プロトコルを使用して \(たとえば、要求の <xref:System.Net.HttpListenerRequest.Url%2A> または <xref:System.Net.HttpListenerRequest.UserHostAddress%2A> プロパティ\)。  
  
> [!NOTE]
>  ダイジェストを有効にするには、このプロパティを設定するには、NTLM、またはネゴシエートが必要です、 <xref:System.Security.Permissions.SecurityPermission>, 、<xref:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal>です。  
  
   
  
## 例  
 次のコード例では、このプロパティの値を設定します。  
  
 [!code-csharp[NclListener\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLListener/CS/sample.cs#2)]
 [!code-vb[NclListener\#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLListener/vb/sample.vb#2)]  
  
 次のコード例で呼び出されたメソッドの実装を提供する、 <xref:System.Net.AuthenticationSchemeSelector> を委任します。  
  
 [!code-csharp[NclListener\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLListener/CS/sample.cs#1)]
 [!code-vb[NclListener\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLListener/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginGetContext">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginGetContext (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginGetContext(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">クライアント要求が使用可能なときに呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
        <param name="state">操作に関する情報を格納するユーザー定義のオブジェクト。 このオブジェクトは、操作の完了時に <c>callback</c> デリゲートに渡されます。</param>
        <summary>受信要求の非同期の取得を開始します。</summary>
        <returns>非同期操作のステータスを示す <see cref="T:System.IAsyncResult" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.HttpListener.BeginGetContext%2A> メソッドが入ってくるクライアント要求を受信する非同期 \(非ブロック\) の呼び出しを開始します。 このメソッドを呼び出す前に呼び出す必要があります、 <xref:System.Net.HttpListener.Start%2A> メソッドのために、URI 文字列を追加することでリッスンするには、少なくとも 1 つの Uniform Resource Identifier \(URI\) プレフィックスを追加し、 <xref:System.Net.HttpListenerPrefixCollection> によって返される、 <xref:System.Net.HttpListener.Prefixes%2A> プロパティです。  
  
 呼び出して、非同期操作を完了する必要があります、 <xref:System.Net.HttpListener.EndGetContext%2A> メソッドです。 通常、このメソッドはによって、 `callback` を委任します。  
  
 このメソッドは、操作が完了するまでにはブロックされません。 操作が完了するまでに、着信要求とブロックを取得する、 <xref:System.Net.HttpListener.GetContext%2A> メソッドです。  
  
 非同期プログラミング モデルの使用に関する詳細については、次を参照してください。 [Asynchronous Programming Overview](http://msdn.microsoft.com/ja-jp/41972034-92ed-450a-9664-ab93fcc6f1fb)  
  
   
  
## 例  
 次のコード例では、使用方法を示します、 <xref:System.Net.HttpListener.BeginGetContext%2A> は入ってくるクライアント要求を処理するコールバック メソッドを指定します。  
  
 [!code-csharp[Net\_Listener\_Basic\#12](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#12)]  
  
 次のコード例では、コールバック メソッドを実装します。  
  
 [!code-csharp[Net\_Listener\_Basic\#13](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.HttpListenerException">Win32 関数の呼び出しが失敗しました。 例外を確認して <see cref="P:System.Net.HttpListenerException.ErrorCode" /> プロパティを例外の原因を特定します。</exception>
        <exception cref="T:System.InvalidOperationException">このオブジェクトは、開始されていないか、現在停止しています。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられました。</exception>
        <block subset="none" type="usage">
          <para>This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.Close" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Net.HttpListener" /> をシャットダウンします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを呼び出した後は今後使用しない、 <xref:System.Net.HttpListener> オブジェクトです。 一時的に停止、 <xref:System.Net.HttpListener> オブジェクトを使用して、 <xref:System.Net.HttpListener.Stop%2A> メソッドです。  
  
 このメソッドがシャット ダウン、 <xref:System.Net.HttpListener> キューに置かれた要求を処理することがなくオブジェクトです。 保留中の要求が完了することができます。  
  
   
  
## 例  
 次のコード例では、このメソッドを呼び出す方法を示します。  
  
 [!code-csharp[Net\_Listener\_Basic\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="DefaultServiceNames">
      <MemberSignature Language="C#" Value="public System.Security.Authentication.ExtendedProtection.ServiceNameCollection DefaultServiceNames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Authentication.ExtendedProtection.ServiceNameCollection DefaultServiceNames" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.DefaultServiceNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Authentication.ExtendedProtection.ServiceNameCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>登録済みプレフィックスによって決定される既定のサービス プロバイダー名 \(SPN: Service Provider Name\) の一覧を取得します。</summary>
        <value>SPN の一覧を格納している <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Net.HttpListener.DefaultServiceNames%2A> property is used with integrated Windows authentication to provide extended protection. The list of SPNs is initialized from the <xref:System.Net.HttpListener.Prefixes%2A> property when accessed and cleared when new prefixes are added to the <xref:System.Net.HttpListener.Prefixes%2A> property.  
  
 The <xref:System.Net.HttpListener.DefaultServiceNames%2A> property is used if an application doesn't set the <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames%2A> property on its extended protection policy.  
  
 The <xref:System.Security.Authentication.ExtendedProtection.ServiceNameCollection> that is retrieved with the <xref:System.Net.HttpListener.DefaultServiceNames%2A> property is built from the <xref:System.Net.HttpListener.Prefixes%2A> property according to the following rules:  
  
1.  If the hostname is "\+", "\*", or an IPv4 or IPv6 literal \(equivalent to "\*" but restricted to a specific local interface\), the following SPN is added:  
  
 `"HTTP/"` plus the fully qualified domain name of the computer.  
  
1.  If the hostname contains no dots \(no domains or subdomains\), an attempt is made to resolve the fully\-qualified domain name using DNS \(the same behavior used by <xref:System.Net.HttpWebRequest>\). If the fully\-qualified domain name can be resolved, the following SPNs are added:  
  
 `"HTTP/"` plus the hostname \(the short name\).  
  
 `"HTTP/"` plus the fully qualified domain name for the hostname.  
  
1.  If the hostname contains not dots \(no domains or subdomains\) and a fully\-qualified domain name can't be resolved, the following SPN is added:  
  
 `"HTTP/"` plus the hostname.  
  
1.  If the hostname contains dots \(domains or subdomains\), the following SPN is added:  
  
 `"HTTP/"` plus the hostname.  
  
 The <xref:System.Net.HttpListener.DefaultServiceNames%2A> property can be used by an application to review the list of default SPNs which will be used for authentication if no custom list is supplied. If other SPNs are needed, an application can add them using one of the <xref:System.Security.Authentication.ExtendedProtection.ServiceNameCollection.Merge%2A> methods.  
  
 It is not safe when using extended protection to make policy decisions based on the requested URL, since this can be spoofed. Rather, applications should rely on the <xref:System.Net.HttpListenerRequest.LocalEndPoint%2A> or <xref:System.Net.HttpListenerRequest.RemoteEndPoint%2A> properties to make such policy decisions.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" />
        <altmember cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" />
        <altmember cref="T:System.Net.HttpListener.ExtendedProtectionSelector" />
        <altmember cref="N:System.Security.Authentication.ExtendedProtection" />
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="EndGetContext">
      <MemberSignature Language="C#" Value="public System.Net.HttpListenerContext EndGetContext (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.HttpListenerContext EndGetContext(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.EndGetContext(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.HttpListenerContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">非同期操作の開始時に取得した <see cref="T:System.IAsyncResult" /> オブジェクト。</param>
        <summary>受信クライアント要求を取得する非同期操作を完了します。</summary>
        <returns>クライアント要求を表す <see cref="T:System.Net.HttpListenerContext" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.HttpListener.EndGetContext%2A> メソッドは、通常取得のデリゲートが呼び出されるアプリケーション定義のコールバック メソッド内で、 <xref:System.Net.HttpListenerContext> 、受信クライアント要求とその関連する応答を含むオブジェクト。 このメソッドを呼び出して以前に開始された操作が完了すると、 <xref:System.Net.HttpListener.BeginGetContext%2A> メソッドです。 操作が完了していない場合、このメソッドは、これはまでブロックします。  
  
 呼び出すため、 <xref:System.Net.HttpListener.EndGetContext%2A> メソッドが必要です、 <xref:System.Net.HttpListener> オブジェクトに渡される状態オブジェクトを使用してコールバック メソッドにこのオブジェクトが渡される通常、 <xref:System.Net.HttpListener.BeginGetContext%2A> メソッドです。 使用して、この状態オブジェクトを取得できます、 <xref:System.IAsyncResult.AsyncState%2A> のプロパティ、 `asyncResult` オブジェクトです。  
  
 非同期プログラミング モデルの使用に関する詳細については、次を参照してください。 [Asynchronous Programming Overview](http://msdn.microsoft.com/ja-jp/41972034-92ed-450a-9664-ab93fcc6f1fb)  
  
   
  
## 例  
 次のコード例を呼び出すコールバック メソッドの実装を示しています、 <xref:System.Net.HttpListener.EndGetContext%2A> メソッドです。  
  
 [!code-csharp[Net\_Listener\_Basic\#13](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> 呼び出すことによって取得できなかった、 <see cref="M:System.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)" /> メソッドです。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Net.HttpListener.EndGetContext(System.IAsyncResult)" /> メソッドが既に呼び出されて、指定された <paramref name="asyncResult" /> オブジェクトです。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられました。</exception>
        <block subset="none" type="usage">
          <para>This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ExtendedProtectionPolicy">
      <MemberSignature Language="C#" Value="public System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy ExtendedProtectionPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy ExtendedProtectionPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.ExtendedProtectionPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("not used anywhere in the implementation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セッションの拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> を取得または設定します。</summary>
        <value>拡張保護に使用するポリシーを指定する <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A> プロパティは拡張保護を提供する統合 Windows 認証で使用します。<xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A> プロパティでは、全体の拡張保護ポリシーの構成 <xref:System.Net.HttpListener> セッションです。<xref:System.Net.HttpListener.ExtendedProtectionSelectorDelegate%2A> プロパティが個々 の要求の拡張保護ポリシーの構成を許可します。  
  
 <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding%2A> プロパティである必要があります `null`します。<xref:System.Net.HttpListener> インスタンスが 1 つを使用する必要がある場合に、独自の TLS セッションから直接、チャネル バインディング トークン \(CBT\) を取得します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">設定しようとしましたが、 <see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> プロパティが、 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> プロパティがなかった <see langword="null" />します。</exception>
        <exception cref="T:System.ArgumentNullException">設定しようとしましたが、 <see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> プロパティを <see langword="null" />します。</exception>
        <exception cref="T:System.InvalidOperationException">設定しようとした、 <see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> 後プロパティ、 <see cref="M:System.Net.HttpListener.Start" /> メソッドが既に呼び出されています。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられました。</exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement" /> プロパティに設定されました <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> 拡張保護をサポートしていないプラットフォームにします。</exception>
        <altmember cref="P:System.Net.HttpListener.DefaultServiceNames" />
        <altmember cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" />
        <altmember cref="T:System.Net.HttpListener.ExtendedProtectionSelector" />
        <altmember cref="N:System.Security.Authentication.ExtendedProtection" />
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="ExtendedProtectionSelectorDelegate">
      <MemberSignature Language="C#" Value="public System.Net.HttpListener.ExtendedProtectionSelector ExtendedProtectionSelectorDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.HttpListener/ExtendedProtectionSelector ExtendedProtectionSelectorDelegate" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.HttpListener+ExtendedProtectionSelector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>各要求に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> を決定するために呼び出すデリゲートを取得または設定します。</summary>
        <value>拡張保護に使用するポリシーを指定する <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A> プロパティは拡張保護を提供する統合 Windows 認証で使用します。<xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A> プロパティでは、全体の拡張保護ポリシーの構成 <xref:System.Net.HttpListener> セッションです。<xref:System.Net.HttpListener.ExtendedProtectionSelectorDelegate%2A> プロパティが個々 の要求ごとの拡張保護ポリシーの構成を許可します。  
  
 <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding%2A> プロパティである必要があります `null`します。<xref:System.Net.HttpListener> インスタンスが 1 つを使用する必要がある場合に、独自の TLS セッションから直接、チャネル バインディング トークン \(CBT\) を取得します。  
  
 要求ごとにデリゲートできます設定を選択する、 <xref:System.Net.HttpListener> インスタンスを使用して拡張保護を提供します。  
  
 デリゲートが返された場合 `null` このプロパティを表します、 <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy> を <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> プロパティに設定 <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">設定しようとした、 <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> プロパティが、 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> プロパティである必要があります <see langword="null" />します。</exception>
        <exception cref="T:System.ArgumentNullException">設定しようとしましたが、 <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> プロパティを <see langword="null" />します。</exception>
        <exception cref="T:System.InvalidOperationException">設定しようとした、 <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> 後プロパティ、 <see cref="M:System.Net.HttpListener.Start" /> メソッドが既に呼び出されています。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられました。</exception>
        <exception cref="T:System.PlatformNotSupportedException">設定しようとしましたが、 <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> 拡張保護をサポートしていないプラットフォームでのプロパティです。</exception>
        <altmember cref="P:System.Net.HttpListener.DefaultServiceNames" />
        <altmember cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" />
        <altmember cref="T:System.Net.HttpListener.ExtendedProtectionSelector" />
        <altmember cref="N:System.Security.Authentication.ExtendedProtection" />
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="GetContext">
      <MemberSignature Language="C#" Value="public System.Net.HttpListenerContext GetContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.HttpListenerContext GetContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.GetContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.HttpListenerContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>受信要求を待機し、受信するとその要求を返します。</summary>
        <returns>クライアント要求を表す <see cref="T:System.Net.HttpListenerContext" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを呼び出す前に呼び出す必要があります、 <xref:System.Net.HttpListener.Start%2A> メソッドに URI 文字列を追加することでリッスンするには、少なくとも 1 つの URI プレフィックスを追加し、 <xref:System.Net.HttpListenerPrefixCollection> によって返される、 <xref:System.Net.HttpListener.Prefixes%2A> プロパティです。 プレフィックスの詳細については、次を参照してください。、 <xref:System.Net.HttpListener> クラスの概要です。  
  
 受信要求の待機中に、このメソッドはブロックします。 受信要求をアプリケーションがブロックされないように、非同期的に \(別のスレッド\) で処理する場合を使用して、 <xref:System.Net.HttpListener.BeginGetContext%2A> メソッドです。  
  
   
  
## 例  
 次のコード例では、このメソッドを呼び出す方法を示します。  
  
 [!code-csharp[Net\_Listener\_Basic\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.HttpListenerException">Win32 関数の呼び出しが失敗しました。 例外を確認して <see cref="P:System.Net.HttpListenerException.ErrorCode" /> プロパティを例外の原因を特定します。</exception>
        <exception cref="T:System.InvalidOperationException">このオブジェクトは、開始されていないか、現在停止しています。  
  
 または  
  
 <see cref="T:System.Net.HttpListener" /> に応答する統一リソース識別子 \(URI\) のプレフィックスはありません。 「解説」を参照してください。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられました。</exception>
        <block subset="none" type="usage">
          <para>This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetContextAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.HttpListenerContext&gt; GetContextAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.HttpListenerContext&gt; GetContextAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.GetContextAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.HttpListenerContext&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>非同期操作として受信要求を待ちます。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。 タスク オブジェクトの <see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティは、クライアント要求を表す <see cref="T:System.Net.HttpListenerContext" /> オブジェクトを返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、受信要求を受け取った場合に、完了します。  
  
 このメソッドを呼び出す前に呼び出す必要があります、 <xref:System.Net.HttpListener.Start%2A> メソッドに URI 文字列を追加することでリッスンするには、少なくとも 1 つの URI プレフィックスを追加し、 <xref:System.Net.HttpListenerPrefixCollection> によって返される、 <xref:System.Net.HttpListener.Prefixes%2A> プロパティです。 プレフィックスの詳細については、次を参照してください。、 <xref:System.Net.HttpListener> クラスの概要です。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListenerContext" />
      </Docs>
    </Member>
    <Member MemberName="IgnoreWriteExceptions">
      <MemberSignature Language="C#" Value="public bool IgnoreWriteExceptions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreWriteExceptions" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.IgnoreWriteExceptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Net.HttpListener" /> がクライアントに応答を送信したときに発生する例外をアプリケーションで受信するかどうかを指定する <see cref="T:System.Boolean" /> 値を取得または設定します。</summary>
        <value>この <see cref="T:System.Net.HttpListener" /> が、クライアントに応答を送信したときに発生する例外を返さない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを設定 `true` かどうかは、アプリケーションが必要ない、応答が各クライアントに正常に送信されることです。  
  
   
  
## 例  
 次のコード例では、このプロパティの設定を示します。  
  
 [!code-csharp[Net\_Listener\_Basic\#14](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsListening">
      <MemberSignature Language="C#" Value="public bool IsListening { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsListening" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.IsListening" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Net.HttpListener" /> が開始されているかどうかを示す値を取得します。</summary>
        <value>
          <see cref="T:System.Net.HttpListener" /> が開始されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 開始する、 <xref:System.Net.HttpListener>, を呼び出す、 <xref:System.Net.HttpListener.Start%2A> メソッドです。  
  
   
  
## 例  
 次のコード例では、このプロパティを使用して、インスタンスの待機状態を判断を示します。  
  
 [!code-csharp[Net\_Listener\_Basic\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSupported">
      <MemberSignature Language="C#" Value="public static bool IsSupported { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsSupported" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.IsSupported" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のオペレーティング システムで <see cref="T:System.Net.HttpListener" /> を使用できるかどうかを示す値を取得します。</summary>
        <value>
          <see cref="T:System.Net.HttpListener" /> がサポートされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスは、Windows XP SP2 または Windows Server 2003 オペレーティング システムを実行しているコンピューターでのみ使用できます。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.Net.HttpListener.IsSupported%2A> プロパティを検出するかどうか、 <xref:System.Net.HttpListener> オブジェクトは、現在のオペレーティング システムで使用できます。  
  
 [!code-csharp[Net\_Listener\_Basic\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefixes">
      <MemberSignature Language="C#" Value="public System.Net.HttpListenerPrefixCollection Prefixes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.HttpListenerPrefixCollection Prefixes" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.Prefixes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.HttpListenerPrefixCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Net.HttpListener" /> オブジェクトによって処理される URI \(Uniform Resource Identifier\) プレフィックスを取得します。</summary>
        <value>この <see cref="T:System.Net.HttpListener" /> オブジェクトで処理するように構成されている URI プレフィックスが格納された <see cref="T:System.Net.HttpListenerPrefixCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プレフィックスは、正規の形式です。 プレフィックスの詳細については、次を参照してください。、 <xref:System.Net.HttpListener> クラスの概要です。  
  
   
  
## 例  
 次のコード例では、使用方法を示します、 <xref:System.Net.HttpListener.Prefixes%2A> プロパティを取得し、処理される URI プレフィックスを出力します。  
  
 [!code-csharp[Net\_Listener\_Basic\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Realm">
      <MemberSignature Language="C#" Value="public string Realm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Realm" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.Realm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Net.HttpListener" /> オブジェクトに関連付けられているレルム \(リソース パーティション\) を取得または設定します。</summary>
        <value>
          <see cref="T:System.Net.HttpListener" /> オブジェクトに関連付けられているレルムの名前が格納された <see cref="T:System.String" /> 値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 サーバーでは、領域を使用して、保護されたリソースをパーティション分割各パーティションは、独自の認証方式と承認データベースを設定できます。 レルムは、基本認証およびダイジェスト認証だけに使用されます。 クライアントが正常に認証されると、その認証は特定のレルムのすべてのリソースに対して有効となります。 レルムの詳細についてでの RFC 2617 を参照してください。 [http:\/\/www.ietf.org](http://www.ietf.org)します。  
  
 インスタンス <xref:System.Net.HttpListener> が関連付けられている領域の 1 つだけです。  
  
   
  
## 例  
 設定を次のコード例に示します、 <xref:System.Net.HttpListener.Realm%2A> プロパティです。  
  
 [!code-csharp[Net\_Listener\_Basic\#10](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.Start" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスが受信要求を受信できるようにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す前に、このメソッドを呼び出す必要があります、 <xref:System.Net.HttpListener.GetContext%2A> または <xref:System.Net.HttpListener.BeginGetContext%2A> メソッドです。  
  
 起動した後、 <xref:System.Net.HttpListener> オブジェクトを使用することができます、 <xref:System.Net.HttpListener.Stop%2A> メソッドを停止します。  
  
> [!NOTE]
>  このリスナー インスタンスは、https を使用している場合は、インストールしてサーバー証明書を選択する必要があります。 それ以外の場合、 <xref:System.Net.HttpWebRequest> このクエリ <xref:System.Net.HttpListener> 接続の予期しない終了が失敗します。 HttpCfg.exe を使用して、サーバー証明書とその他のリスナー オプションを構成できます。 参照してください [http:\/\/msdn.microsoft.com\/library\/default.asp?url\=\/library\/http\/http\/httpcfg\_exe.asp](http://msdn.microsoft.com/library/default.asp?url=/library/http/http/httpcfg_exe.asp) 詳細です。  
  
   
  
## 例  
 次のコード例では、使用方法を示します、 <xref:System.Net.HttpListener.Start%2A> メソッド要求の処理を開始します。  
  
 [!code-csharp[Net\_Listener\_Basic\#12](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.HttpListenerException">Win32 関数の呼び出しが失敗しました。 例外を確認して <see cref="P:System.Net.HttpListenerException.ErrorCode" /> プロパティを例外の原因を特定します。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられました。</exception>
        <block subset="none" type="usage">
          <para>This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.Stop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスの受信要求の受信を停止します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このインスタンスが既に停止している場合は、このメソッドを呼び出しても効果はありません。  
  
 停止した後、 <xref:System.Net.HttpListener> オブジェクトを使用することができます、 <xref:System.Net.HttpListener.Start%2A> を再開する方法です。  
  
   
  
## 例  
 次のコード例では、使用方法を示します、 <xref:System.Net.HttpListener.Stop%2A> 受信要求の処理を停止するメソッドです。  
  
 [!code-csharp[Net\_Listener\_Basic\#12](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
        <block subset="none" type="usage">
          <para>This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.System#IDisposable#Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Net.HttpListener" /> オブジェクトに保持されているリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アプリケーションが使用する、 <xref:System.Net.HttpListener.Close%2A> メソッドの代わりに、このメソッドを呼び出すことです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeoutManager">
      <MemberSignature Language="C#" Value="public System.Net.HttpListenerTimeoutManager TimeoutManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.HttpListenerTimeoutManager TimeoutManager" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.TimeoutManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.HttpListenerTimeoutManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Net.HttpListener" /> インスタンスのタイムアウト マネージャーです。</summary>
        <value>
          <see cref="T:System.Net.HttpListenerTimeoutManager" /> を返します。  
  
 この <see cref="T:System.Net.HttpListener" /> インスタンスのタイムアウト マネージャーです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 タイムアウト マネージャーは、この接続のタイムアウト制限を定義 <xref:System.Net.HttpListener> インスタンス。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnsafeConnectionNtlmAuthentication">
      <MemberSignature Language="C#" Value="public bool UnsafeConnectionNtlmAuthentication { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UnsafeConnectionNtlmAuthentication" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.UnsafeConnectionNtlmAuthentication" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Support for NTLM needs some loving.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>NTLM が使用されているときに、同じ TCP \(Transmission Control Protocol\) 接続を使用した別の要求を認証する必要があるかどうかを制御する <see cref="T:System.Boolean" /> 値を取得または設定します。</summary>
        <value>最初の要求の <see cref="T:System.Security.Principal.IIdentity" /> が同じ接続でなされる後続の要求に使用される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを設定すると `true` と NTLM を使用して、特定の TCP 接続経由の最初の要求が認証されて、認証情報を使用して、同じ TCP 接続経由で後続の要求が処理されます \(<xref:System.Security.Principal.IIdentity>\) の最初の要求。  
  
 NTLM が認証プロトコルではない場合、このプロパティは無効です。 認証プロトコルとしてネゴシエートを指定すると、NTLM が認証に使用される実際のプロトコルである場合にのみ、このプロパティは効果を持ちます。  
  
> [!NOTE]
>  このプロパティを設定中に `true` ためパフォーマンスの向上、 <xref:System.Net.HttpListener> いない送信追加の NTLM 認証チャレンジは、セキュリティ上のリスク内のすべての要求が認証情報を指定する必要がないです。 パフォーマンスの向上がリスクよりも重要であるかどうかを判断する必要があります。  
  
   
  
## 例  
 次のコード例では、このプロパティの設定を示します。  
  
 [!code-csharp[Net\_Listener\_Basic\#14](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
      </Docs>
    </Member>
  </Members>
</Type>