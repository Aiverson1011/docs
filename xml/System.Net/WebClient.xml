<Type Name="WebClient" FullName="System.Net.WebClient">
  <TypeSignature Language="C#" Value="public class WebClient : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebClient extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Net.WebClient" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.WebClient</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>データを送信し、URI によって識別されるリソースからデータを受信側の共通のメソッドを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.WebClient> クラスには共通のメソッドのデータを送信するか、ローカル、イントラネット、または URI で指定されたインターネット リソースからデータを受信します。  
  
 <xref:System.Net.WebClient> クラスは、 <xref:System.Net.WebRequest> リソースへのアクセスを提供するクラス。<xref:System.Net.WebClient> インスタンスがいずれかを持つデータにアクセスできる <xref:System.Net.WebRequest> に登録されている子孫、 <xref:System.Net.WebRequest.RegisterPrefix%2A?displayProperty=fullName> メソッドです。  
  
> [!NOTE]
>  既定では、.NET Framework で始まる Uri をサポートしています。 `http:`, 、`https:`, 、ftp:、および `file:` スキームの識別子。  
  
 次の表 <xref:System.Net.WebClient> リソースにデータをアップロードするためのメソッドです。  
  
|メソッド|説明|  
|----------|--------|  
|<xref:System.Net.WebClient.OpenWrite%2A>|取得、 <xref:System.IO.Stream> リソースにデータを送信するために使用します。|  
|<xref:System.Net.WebClient.OpenWriteAsync%2A>|取得、 <xref:System.IO.Stream> 呼び出し元のスレッドをブロックすることがなく、リソースにデータを送信するために使用します。|  
|<xref:System.Net.WebClient.UploadData%2A>|バイト配列をリソースに送信して戻ります、 <xref:System.Byte> のすべての応答を含む配列。|  
|<xref:System.Net.WebClient.UploadDataAsync%2A>|送信、 <xref:System.Byte> 呼び出し元のスレッドをブロックすることがなく、リソースへの配列。|  
|<xref:System.Net.WebClient.UploadFile%2A>|ローカル ファイルをリソースに送信して戻ります、 <xref:System.Byte> のすべての応答を含む配列。|  
|<xref:System.Net.WebClient.UploadFileAsync%2A>|呼び出し元のスレッドをブロックすることがなく、ローカルのファイルをリソースに送信します。|  
|<xref:System.Net.WebClient.UploadValues%2A>|送信、 <xref:System.Collections.Specialized.NameValueCollection> リソースを返す、 <xref:System.Byte> のすべての応答を含む配列。|  
|<xref:System.Net.WebClient.UploadValuesAsync%2A>|送信、 <xref:System.Collections.Specialized.NameValueCollection> リソースを返す、 <xref:System.Byte> 呼び出し元のスレッドをブロックすることがなくすべての応答を含む配列。|  
|<xref:System.Net.WebClient.UploadString%2A>|送信、 <xref:System.String> 呼び出し元のスレッドをブロックすることがなく、リソースにします。|  
|<xref:System.Net.WebClient.UploadStringAsync%2A>|送信、 <xref:System.String> 呼び出し元のスレッドをブロックすることがなく、リソースにします。|  
  
 次の表 <xref:System.Net.WebClient> をリソースからデータをダウンロードする方法です。  
  
|メソッド|説明|  
|----------|--------|  
|<xref:System.Net.WebClient.OpenRead%2A>|リソースとして、データを返す、 <xref:System.IO.Stream>です。|  
|<xref:System.Net.WebClient.OpenReadAsync%2A>|呼び出し元のスレッドをブロックすることがなく、リソースからデータを返します。|  
|<xref:System.Net.WebClient.DownloadData%2A>|リソースからデータをダウンロードし、返します、 <xref:System.Byte> 配列。|  
|<xref:System.Net.WebClient.DownloadDataAsync%2A>|リソースからデータをダウンロードし、返します、 <xref:System.Byte> 呼び出し元のスレッドをブロックすることがなく、配列。|  
|<xref:System.Net.WebClient.DownloadFile%2A>|リソースからデータをローカル ファイルにダウンロードします。|  
|<xref:System.Net.WebClient.DownloadFileAsync%2A>|呼び出し元のスレッドをブロックすることがなく、データをリソースからローカル ファイルにダウンロードします。|  
|<xref:System.Net.WebClient.DownloadString%2A>|ダウンロード、 <xref:System.String> からリソースを返す、 <xref:System.String>です。|  
|<xref:System.Net.WebClient.DownloadStringAsync%2A>|ダウンロード、 <xref:System.String> 呼び出し元のスレッドをブロックすることがなく、リソースからです。|  
  
 使用することができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドを完了していない非同期操作をキャンセルします。  
  
 A <xref:System.Net.WebClient> インスタンスは既定では省略可能な HTTP ヘッダーを送信しません。 要求は、省略可能なヘッダーを必要とする場合は、ヘッダーを追加する必要があります、 <xref:System.Net.WebClient.Headers%2A> コレクションです。 たとえば、応答にクエリを保持するユーザー エージェント ヘッダーを追加する必要があります。 また、サーバーは、ユーザー エージェント ヘッダーが見つからない場合、500 \(内部サーバー エラー\) を返す可能性があります。  
  
 <xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A> 設定されている `true` で <xref:System.Net.WebClient> インスタンス。  
  
   
  
## 例  
 次のコード例は、リソースの URI を使用、これを取得し、応答を表示します。  
  
 [!code-cpp[NCLWebClientUserAgent\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientUserAgent/CPP/useragent.cpp#1)]
 [!code-csharp[NCLWebClientUserAgent\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientUserAgent/CS/useragent.cs#1)]
 [!code-vb[NCLWebClientUserAgent\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientUserAgent/VB/useragent.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Net.WebPermission">to access the requested URI or any URI that the request is redirected to. Associated enumeration: <see cref="F:System.Net.NetworkAccess.Connect" />.</permission>
    <block subset="none" type="overrides">
      <para>Derived classes should call the base class implementation of <see cref="T:System.Net.WebClient" /> to ensure the derived class works as expected.</para>
    </block>
    <altmember cref="T:System.Net.WebRequest" />
    <altmember cref="T:System.Net.WebResponse" />
    <altmember cref="T:System.Net.HttpWebRequest" />
    <altmember cref="T:System.Net.HttpWebResponse" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Net.WebClient" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定のコンス トラクターの新しいインスタンスを作成する、 <xref:System.Net.WebClient> クラスです。 既定の HTTP メソッドは GET です。 既定の FTP メソッドは、RETR です。 既定値 <xref:System.Net.WebClient.Encoding%2A> は <xref:System.Text.Encoding.Default%2A> です。<xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A> の既定値は `true` です。  
  
   
  
## 例  
 次のコード例を作成、 <xref:System.Net.WebClient> をインスタンス化し、オブジェクトを使用してサーバーからデータをダウンロードして、システム コンソールに表示するサーバーからデータをダウンロードしたり、ファイルに書き込むとフォーム値をサーバーにアップロードし、応答を受信します。  
  
 [!code-cpp[WebClient\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient/CPP/webclient.cpp#1)]
 [!code-csharp[WebClient\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient/CS/webclient.cs#1)]
 [!code-vb[WebClient\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient/VB/webclient.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowReadStreamBuffering">
      <MemberSignature Language="C#" Value="public bool AllowReadStreamBuffering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowReadStreamBuffering" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.AllowReadStreamBuffering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定については、インターネット リソースから読み取られたデータをバッファーするかどうかを示す値を <see cref="T:System.Net.WebClient" /> インスタンス。</summary>
        <value>
          <see cref="T:System.Boolean" /> を返します。  
  
 インターネット リソースから受信したデータのバッファリングを有効にする場合は <see langword="true" />。バッファリングを無効にする場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、 <xref:System.Net.WebClient.AllowReadStreamBuffering%2A> プロパティは、 `true`, 、アプリケーションで読み取ることができるので、データがメモリにバッファリングされています。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowWriteStreamBuffering">
      <MemberSignature Language="C#" Value="public bool AllowWriteStreamBuffering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowWriteStreamBuffering" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.AllowWriteStreamBuffering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定のインターネット リソースに書き込まれたデータをバッファーするかどうかを示す値を <see cref="T:System.Net.WebClient" /> インスタンス。</summary>
        <value>
          <see cref="T:System.Boolean" /> を返します。  
  
 <see langword="true" /> インターネット リソースに書き込まれたデータのバッファリングを有効にするには <see langword="false" /> バッファリングを無効にします。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、 <xref:System.Net.WebClient.AllowWriteStreamBuffering%2A> プロパティは、 `true`, 、大きなまとまりでインターネット リソースをより効率的に記述できますので、データがメモリにバッファリングされています。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseAddress">
      <MemberSignature Language="C#" Value="public string BaseAddress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseAddress" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.BaseAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定によって行われる要求のベース URI、 <see cref="T:System.Net.WebClient" />です。</summary>
        <value>A <see cref="T:System.String" /> による要求のベース URI を含む、 <see cref="T:System.Net.WebClient" /> または <see cref="F:System.String.Empty" /> ベース アドレスが指定されていない場合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.WebClient.BaseAddress%2A> プロパティには、相対アドレスと組み合わせて使用するベース URI が含まれています。 アップロードするか、データをダウンロードするメソッドを呼び出すときに、 <xref:System.Net.WebClient> オブジェクトでは、このベース URI を組み合わせたメソッドの呼び出しで指定した相対アドレスを使用します。 場合は、絶対 URI を指定する <xref:System.Net.WebClient> 使用しない、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティの値。  
  
 以前の設定を削除する値には、このプロパティを設定 `null` または空の文字列 \(""\) です。  
  
   
  
## 例  
 次のコード例では、インターネット サーバーからデータをダウンロードし、コンソールに表示します。 \(Http:\/\/www.contoso.com など\)、サーバーのアドレスがであると想定して `hostUri` こと \(\/default.htm\) などのリソースへのパスが `uriSuffix`です。  
  
 [!code-cpp[WebClient\_BaseAddress\_ResponseHeaders\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/CPP/webclient_baseaddress_responseheaders.cpp#1)]
 [!code-csharp[WebClient\_BaseAddress\_ResponseHeaders\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/CS/webclient_baseaddress_responseheaders.cs#1)]
 [!code-vb[WebClient\_BaseAddress\_ResponseHeaders\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/VB/webclient_baseaddress_responseheaders.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Net.WebClient.BaseAddress" /> 無効な URI に設定されます。 内部例外、エラーを特定するのに役立つ情報があります。</exception>
      </Docs>
    </Member>
    <Member MemberName="CachePolicy">
      <MemberSignature Language="C#" Value="public System.Net.Cache.RequestCachePolicy CachePolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Cache.RequestCachePolicy CachePolicy" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.CachePolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Cache.RequestCachePolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この WebClient のインスタンスを使用して取得したすべてのリソースについて、アプリケーションのキャッシュ ポリシーの設定を取得または <see cref="T:System.Net.WebRequest" /> オブジェクトです。</summary>
        <value>A <see cref="T:System.Net.Cache.RequestCachePolicy" /> のキャッシュ要件をアプリケーションを表すオブジェクト。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.CancelAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>保留中の非同期操作をキャンセルします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 If an operation is pending, this method calls <xref:System.Net.WebRequest.Abort%2A> on the underlying <xref:System.Net.WebRequest>.  
  
 When you call <xref:System.Net.WebClient.CancelAsync%2A>, your application still receives the completion event associated with the operation. For example, when you call <xref:System.Net.WebClient.CancelAsync%2A> to cancel a <xref:System.Net.WebClient.DownloadStringAsync%2A> operation, if you have specified an event handler for the <xref:System.Net.WebClient.DownloadStringCompleted> event, your event handler receives notification that the operation has ended. To learn whether the operation completed successfully, check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property on the base class of <xref:System.Net.DownloadDataCompletedEventArgs> in the event data object passed to the event handler.  
  
 If no asynchronous operation is in progress, this method does nothing.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public System.Net.ICredentials Credentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ICredentials Credentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.Credentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.ICredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはホストに送信され、要求を認証するために使用されるネットワーク資格情報を設定します。</summary>
        <value>
          <see cref="T:System.Net.ICredentials" /> 要求の認証資格情報を格納します。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.WebClient.Credentials%2A> プロパティには、ホスト上のリソースにアクセスするために使用する認証資格情報が含まれています。 ほとんどのクライアント側のシナリオで使用する必要があります、 <xref:System.Net.CredentialCache.DefaultCredentials%2A>, 、現在ログオン中のユーザーの資格情報であります。 これを行うには、設定、 <xref:System.Net.WebClient.UseDefaultCredentials%2A> プロパティを `true` このプロパティを設定する代わりにします。  
  
 場合、 <xref:System.Net.WebClient> クラスは、ASP.NET アプリケーションなどの中間層アプリケーションで使用されている、 <xref:System.Net.CredentialCache.DefaultCredentials%2A> ASP ページ \(サーバー側の資格情報\) を実行しているアカウントに属しています。 通常の代わりに、要求が行われるクライアントの資格情報をこのプロパティを設定します。  
  
   
  
## 例  
 次のコード例では、ユーザーのシステム資格情報を使用して、要求を認証します。  
  
 [!code-cpp[WebClientAuthentication\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClientAuthentication/CPP/webclientauth.cpp#1)]
 [!code-csharp[WebClientAuthentication\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClientAuthentication/CS/webclientauth.cs#1)]
 [!code-vb[WebClientAuthentication\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClientAuthentication/VB/webclientauth.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="P:System.Net.WebRequest.Credentials" />
      </Docs>
    </Member>
    <Member MemberName="DownloadData">
      <MemberSignature Language="C#" Value="public byte[] DownloadData (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] DownloadData(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadData(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">データのダウンロード元の URI。</param>
        <summary>としてリソースをダウンロード、 <see cref="T:System.Byte" /> 指定された URI からの配列。</summary>
        <returns>A <see cref="T:System.Byte" /> ダウンロードしたリソースを含む配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.WebClient.DownloadData%2A> メソッドで指定された URI にリソースをダウンロードする、 `address` パラメーター。 リソースのダウンロード中に、このメソッドはブロックします。 リソースをダウンロードして、サーバーの応答を待機中に実行の継続のいずれかの操作を使用して、 <xref:System.Net.WebClient.DownloadDataAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、RETR コマンドを使用して FTP リソースをダウンロードします。 HTTP リソースでは、GET メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
   
  
## 例  
 次のコード例では、サーバーからデータを要求し、返されるデータを表示します。 みなされる `remoteUri` 、要求されたデータに有効な URI が含まれています。  
  
 [!code-cpp[WebClient\_DownloadData\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_DownloadData/CPP/webclient_downloaddata.cpp#1)]
 [!code-csharp[WebClient\_DownloadData\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_DownloadData/CS/webclient_downloaddata.cs#1)]
 [!code-vb[WebClient\_DownloadData\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_DownloadData/VB/webclient_downloaddata.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 データのダウンロード中にエラーが発生しました。</exception>
        <exception cref="T:System.NotSupportedException">このメソッドが同時に複数のスレッドで呼び出されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadData">
      <MemberSignature Language="C#" Value="public byte[] DownloadData (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] DownloadData(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadData(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">によって表される URI、 <see cref="T:System.Uri" /> データをダウンロードする元のオブジェクト。</param>
        <summary>としてリソースをダウンロード、 <see cref="T:System.Byte" /> 指定された URI からの配列。</summary>
        <returns>A <see cref="T:System.Byte" /> ダウンロードしたリソースを含む配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.WebClient.DownloadData%2A> メソッドで指定された URI にリソースをダウンロードする、 `address` パラメーター。 リソースのダウンロード中に、このメソッドはブロックします。 リソースをダウンロードして、サーバーの応答を待機中に実行の継続のいずれかの操作を使用して、 <xref:System.Net.WebClient.DownloadDataAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、RETR コマンドを使用して FTP リソースをダウンロードします。 HTTP リソースでは、GET メソッドを使用します。  
  
 **注** このメンバーは、アプリケーションでネットワーク トレースを有効にした場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadDataAsync">
      <MemberSignature Language="C#" Value="public void DownloadDataAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadDataAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadDataAsync(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">A <see cref="T:System.Uri" /> をダウンロードする URI を格納します。</param>
        <summary>としてリソースをダウンロード、 <see cref="T:System.Byte" /> 非同期操作として指定された URI からの配列。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドで指定した URI スキームに関連付けられているプロトコルの既定のメソッドを使用して、指定されたリソースを取得する `address`です。 データは、スレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期にダウンロードされます。  
  
 このメソッドは、リソースのダウンロード中に呼び出し元のスレッドをブロックしません。 サーバーの応答を待機中に、リソースとブロックをダウンロードするには、いずれかを使用、 <xref:System.Net.WebClient.DownloadData%2A> メソッドです。 ダウンロードが完了したら、 <xref:System.Net.WebClient.DownloadDataCompleted> イベントが発生します。 アプリケーションでは、通知を受信するには、このイベントを処理する必要があります。 ダウンロードされたデータが含まれている、 <xref:System.Net.DownloadDataCompletedEventArgs.Result%2A> プロパティです。  
  
 使用することができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドを完了していない非同期操作をキャンセルします。  
  
 このメソッドでは、RETR コマンドを使用して FTP リソースをダウンロードします。 HTTP リソースでは、GET メソッドを使用します。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 リソースのダウンロード中にエラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadDataAsync">
      <MemberSignature Language="C#" Value="public void DownloadDataAsync (Uri address, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadDataAsync(class System.Uri address, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadDataAsync(System.Uri,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">A <see cref="T:System.Uri" /> をダウンロードする URI を格納します。</param>
        <param name="userToken">非同期操作が完了したときに呼び出されるメソッドに渡されるユーザー定義のオブジェクト。</param>
        <summary>としてリソースをダウンロード、 <see cref="T:System.Byte" /> 非同期操作として指定された URI からの配列。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドで指定した URI スキームに関連付けられているプロトコルの既定のメソッドを使用して、指定されたリソースを取得する `address`です。 データは、スレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期にダウンロードされます。  
  
 このメソッドは、リソースのダウンロード中に呼び出し元のスレッドをブロックしません。 サーバーの応答を待機中に、リソースとブロックをダウンロードするには、いずれかを使用、 <xref:System.Net.WebClient.DownloadData%2A> メソッドです。 ダウンロードが完了したら、 <xref:System.Net.WebClient.DownloadDataCompleted> イベントが発生します。 アプリケーションでは、通知を受信するには、このイベントを処理する必要があります。 ダウンロードされたデータが含まれている、 <xref:System.Net.DownloadDataCompletedEventArgs.Result%2A> プロパティです。  
  
 使用することができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドを完了していない非同期操作をキャンセルします。  
  
 このメソッドでは、RETR コマンドを使用して FTP リソースをダウンロードします。 HTTP リソースでは、GET メソッドを使用します。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 リソースのダウンロード中にエラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadDataCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.DownloadDataCompletedEventHandler DownloadDataCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.DownloadDataCompletedEventHandler DownloadDataCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.DownloadDataCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.DownloadDataCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期のデータのダウンロード操作が完了したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、データの非同期ダウンロード操作が完了するたびにでは発生します。 呼び出して非同期データのダウンロードが開始された、 <xref:System.Net.WebClient.DownloadDataAsync%2A> メソッドです。  
  
 <xref:System.Net.DownloadDataCompletedEventHandler> はこのイベントのデリゲート。<xref:System.Net.DownloadDataCompletedEventArgs> クラスには、イベント データを持つイベント ハンドラーが用意されています。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このイベントのイベント ハンドラーの設定を示します。  
  
 [!code-cpp[NCLWebClientAsync\#21](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#21)]
 [!code-csharp[NCLWebClientAsync\#21](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#21)]
 [!code-vb[NCLWebClientAsync\#21](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DownloadDataTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; DownloadDataTaskAsync (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; DownloadDataTaskAsync(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadDataTaskAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">ダウンロードするリソースの URI。</param>
        <summary>としてリソースをダウンロード、 <see cref="T:System.Byte" /> タスク オブジェクトを使用して非同期操作として指定された URI からの配列。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。<see cref="P:System.Threading.Tasks.Task`1.Result" /> タスク オブジェクトのプロパティを返します、 <see cref="T:System.Byte" /> ダウンロードしたリソースを含む配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、データのリソースがダウンロードした後に完了します。  
  
 このメソッドで指定した URI スキームに関連付けられているプロトコルの既定のメソッドを使用して、指定されたリソースの取得、 `address` パラメーター。 データは、スレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期にダウンロードされます。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、RETR コマンドを使用して FTP リソースをダウンロードします。 HTTP リソースでは、GET メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 次のコード例では、サーバーからデータを要求し、返されるデータを表示します。 みなされる `remoteUri` 、要求されたデータに有効な URI が含まれています。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 リソースのダウンロード中にエラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadDataTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; DownloadDataTaskAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; DownloadDataTaskAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadDataTaskAsync(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">ダウンロードするリソースの URI。</param>
        <summary>としてリソースをダウンロード、 <see cref="T:System.Byte" /> タスク オブジェクトを使用して非同期操作として指定された URI からの配列。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。<see cref="P:System.Threading.Tasks.Task`1.Result" /> タスク オブジェクトのプロパティを返します、 <see cref="T:System.Byte" /> ダウンロードしたリソースを含む配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、データのリソースがダウンロードした後に完了します。  
  
 このメソッドで指定した URI スキームに関連付けられているプロトコルの既定のメソッドを使用して、指定されたリソースの取得、 `address` パラメーター。 データは、スレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期にダウンロードされます。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、RETR コマンドを使用して FTP リソースをダウンロードします。 HTTP リソースでは、GET メソッドを使用します。  
  
 **注** このメンバーは、アプリケーションでネットワーク トレースを有効にした場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 リソースのダウンロード中にエラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadFile">
      <MemberSignature Language="C#" Value="public void DownloadFile (string address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadFile(string address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadFile(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">データのダウンロード元の URI。</param>
        <param name="fileName">データを受信するローカル ファイルの名前。</param>
        <summary>ローカル ファイルには、指定した URI にリソースをダウンロードします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.WebClient.DownloadFile%2A> メソッドは内で指定された URI からローカル ファイルのデータをダウンロード、 `address` パラメーター。 リソースのダウンロード中に、このメソッドはブロックします。 リソースをダウンロードして、サーバーの応答を待機中に実行の継続のいずれかの操作を使用して、 <xref:System.Net.WebClient.DownloadFileAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、RETR コマンドを使用して FTP リソースをダウンロードします。 HTTP リソースでは、GET メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ASP.NET ページなどの中間層アプリケーションでこのメソッドを使用する場合、アプリケーションを実行するアカウントには、ファイルにアクセスする権限がない場合、エラーが表示されます。  
  
   
  
## 例  
 次のコード例では、ローカルのハード ドライブに http:\/\/www.contoso.com からファイルをダウンロードします。  
  
 [!code-cpp[WebClient\_DownloadFile\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_DownloadFile/CPP/webclient_downloadfile.cpp#1)]
 [!code-csharp[WebClient\_DownloadFile\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_DownloadFile/CS/webclient_downloadfile.cs#1)]
 [!code-vb[WebClient\_DownloadFile\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_DownloadFile/VB/webclient_downloadfile.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 <paramref name="filename" /> は <see langword="null" /> または <see cref="F:System.String.Empty" /> です。  
  
 または  
  
 ファイルが存在しません。  
  
 または、データのダウンロード中にエラーが発生しました。</exception>
        <exception cref="T:System.NotSupportedException">このメソッドが同時に複数のスレッドで呼び出されました。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">to write the file **parameterReference tag is not supported!!!!**  
. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="DownloadFile">
      <MemberSignature Language="C#" Value="public void DownloadFile (Uri address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadFile(class System.Uri address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadFile(System.Uri,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">として指定された URI、 <see cref="T:System.String" />, 、元のデータをダウンロードします。</param>
        <param name="fileName">データを受信するローカル ファイルの名前。</param>
        <summary>ローカル ファイルには、指定した URI にリソースをダウンロードします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.WebClient.DownloadFile%2A> メソッドは内で指定された URI からローカル ファイルのデータをダウンロード、 `address` パラメーター。 リソースのダウンロード中に、このメソッドはブロックします。 リソースをダウンロードして、サーバーの応答を待機中に実行の継続のいずれかの操作を使用して、 <xref:System.Net.WebClient.DownloadFileAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、RETR コマンドを使用して FTP リソースをダウンロードします。 HTTP リソースでは、GET メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ASP.NET ページなどの中間層アプリケーションでこのメソッドを使用する場合、アプリケーションを実行するアカウントには、ファイルにアクセスする権限がない場合、エラーが表示されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="fileName" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 <paramref name="filename" /> は <see langword="null" /> または <see cref="F:System.String.Empty" /> です。  
  
 または  
  
 ファイルが存在しません。  
  
 または  
  
 データのダウンロード中にエラーが発生しました。</exception>
        <exception cref="T:System.NotSupportedException">このメソッドが同時に複数のスレッドで呼び出されました。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">to write the file **parameterReference tag is not supported!!!!**  
. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="DownloadFileAsync">
      <MemberSignature Language="C#" Value="public void DownloadFileAsync (Uri address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadFileAsync(class System.Uri address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadFileAsync(System.Uri,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">ダウンロードするリソースの URI。</param>
        <param name="fileName">ローカル コンピューターに配置されるファイルの名前。</param>
        <summary>指定した URI にリソースをローカル ファイルにダウンロードします。 このメソッドは、呼び出し元のスレッドをブロックしません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッド内で指定された uri のリソースのダウンロード、 `address` パラメーター。 ダウンロードしたファイルの名前は、ダウンロードが正常に完了すると、 `fileName` 、ローカル コンピューターです。 非同期的に、スレッド プールから自動的に割り当てられているスレッド リソースを使用して、ファイルがダウンロードされます。 ファイルが使用可能な場合に通知を受信するには、イベント ハンドラーを追加、 <xref:System.Net.WebClient.DownloadFileCompleted> イベントです。  
  
 このメソッドは、リソースのダウンロード中に、呼び出し元のスレッドをブロックしません。 ダウンロードが完了するを待機中にブロックするには、いずれかを使用、 <xref:System.Net.WebClient.DownloadFile%2A> メソッドです。  
  
 使用することができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドを完了していない非同期操作をキャンセルします。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI で指定されていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、RETR コマンドを使用して FTP リソースをダウンロードします。 HTTP リソースでは、GET メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 このメソッドを ASP.NET ページを使用する場合で、ページが実行されるアカウントがローカル ファイルにアクセスする権限を持たない場合にエラーを受け取ります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="fileName" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 リソースのダウンロード中にエラーが発生しました。</exception>
        <exception cref="T:System.InvalidOperationException">指定されたローカル ファイル <paramref name="fileName" /> 別のスレッドによって使用されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadFileAsync">
      <MemberSignature Language="C#" Value="public void DownloadFileAsync (Uri address, string fileName, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadFileAsync(class System.Uri address, string fileName, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadFileAsync(System.Uri,System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">ダウンロードするリソースの URI。</param>
        <param name="fileName">ローカル コンピューターに配置されるファイルの名前。</param>
        <param name="userToken">非同期操作が完了したときに呼び出されるメソッドに渡されるユーザー定義のオブジェクト。</param>
        <summary>指定した URI にリソースをローカル ファイルにダウンロードします。 このメソッドは、呼び出し元のスレッドをブロックしません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッド内で指定された uri のリソースのダウンロード、 `address` パラメーター。 ダウンロードしたファイルの名前は、ダウンロードが正常に完了すると、 `fileName` 、ローカル コンピューターです。 非同期的に、スレッド プールから自動的に割り当てられているスレッド リソースを使用して、ファイルがダウンロードされます。 ファイルが使用可能な場合に通知を受信するには、イベント ハンドラーを追加、 <xref:System.Net.WebClient.DownloadFileCompleted> イベントです。  
  
 このメソッドは、リソースのダウンロード中に、呼び出し元のスレッドをブロックしません。 ダウンロードが完了するを待機中にブロックするには、いずれかを使用、 <xref:System.Net.WebClient.DownloadFile%2A> メソッドです。  
  
 使用することができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドを完了していない非同期操作をキャンセルします。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI で指定されていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、RETR コマンドを使用して FTP リソースをダウンロードします。 HTTP リソースでは、GET メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 このメソッドを ASP.NET ページを使用する場合で、ページが実行されるアカウントがローカル ファイルにアクセスする権限を持たない場合にエラーを受け取ります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="fileName" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 リソースのダウンロード中にエラーが発生しました。</exception>
        <exception cref="T:System.InvalidOperationException">指定されたローカル ファイル <paramref name="fileName" /> 別のスレッドによって使用されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadFileCompleted">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.AsyncCompletedEventHandler DownloadFileCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.AsyncCompletedEventHandler DownloadFileCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.DownloadFileCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期のファイルのダウンロード操作が完了したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、非同期のファイルのダウンロード操作が完了するたびにでは発生します。 呼び出して非同期のファイルのダウンロードが開始された、 <xref:System.Net.WebClient.DownloadFileAsync%2A> メソッドです。  
  
 <xref:System.ComponentModel.AsyncCompletedEventHandler> はこのイベントのデリゲート。<xref:System.ComponentModel.AsyncCompletedEventArgs> クラスには、イベント データを持つイベント ハンドラーが用意されています。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このイベントのイベント ハンドラーの設定を示します。  
  
 [!code-cpp[NCLWebClientAsync\#19](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#19)]
 [!code-csharp[NCLWebClientAsync\#19](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#19)]
 [!code-vb[NCLWebClientAsync\#19](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DownloadFileTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DownloadFileTaskAsync (string address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task DownloadFileTaskAsync(string address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadFileTaskAsync(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">ダウンロードするリソースの URI。</param>
        <param name="fileName">ローカル コンピューターに配置されるファイルの名前。</param>
        <summary>タスク オブジェクトを使用して非同期操作として、ローカル ファイルに指定したリソースをダウンロードします。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task> オブジェクトは、データのリソースがダウンロードした後に完了します。  
  
 このメソッド内で指定された uri のリソースのダウンロード、 `address` パラメーター。 ダウンロードしたファイルの名前は、ダウンロードが正常に完了すると、 `fileName` 、ローカル コンピューターです。 非同期的に、スレッド プールから自動的に割り当てられているスレッド リソースを使用して、ファイルがダウンロードされます。  
  
 使用することができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドを完了していない非同期操作をキャンセルします。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI で指定されていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、RETR コマンドを使用して FTP リソースをダウンロードします。 HTTP リソースでは、GET メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 このメソッドを ASP.NET ページを使用する場合で、ページが実行されるアカウントがローカル ファイルにアクセスする権限を持たない場合にエラーを受け取ります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="fileName" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 リソースのダウンロード中にエラーが発生しました。</exception>
        <exception cref="T:System.InvalidOperationException">指定されたローカル ファイル <paramref name="fileName" /> 別のスレッドによって使用されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadFileTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DownloadFileTaskAsync (Uri address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task DownloadFileTaskAsync(class System.Uri address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadFileTaskAsync(System.Uri,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">ダウンロードするリソースの URI。</param>
        <param name="fileName">ローカル コンピューターに配置されるファイルの名前。</param>
        <summary>タスク オブジェクトを使用して非同期操作として、ローカル ファイルに指定したリソースをダウンロードします。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task> オブジェクトは、データのリソースがダウンロードした後に完了します。  
  
 このメソッド内で指定された uri のリソースのダウンロード、 `address` パラメーター。 ダウンロードしたファイルの名前は、ダウンロードが正常に完了すると、 `fileName` 、ローカル コンピューターです。 非同期的に、スレッド プールから自動的に割り当てられているスレッド リソースを使用して、ファイルがダウンロードされます。  
  
 使用することができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドを完了していない非同期操作をキャンセルします。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI で指定されていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、RETR コマンドを使用して FTP リソースをダウンロードします。 HTTP リソースでは、GET メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 このメソッドを ASP.NET ページを使用する場合で、ページが実行されるアカウントがローカル ファイルにアクセスする権限を持たない場合にエラーを受け取ります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="fileName" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 リソースのダウンロード中にエラーが発生しました。</exception>
        <exception cref="T:System.InvalidOperationException">指定されたローカル ファイル <paramref name="fileName" /> 別のスレッドによって使用されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadProgressChanged">
      <MemberSignature Language="C#" Value="public event System.Net.DownloadProgressChangedEventHandler DownloadProgressChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.DownloadProgressChangedEventHandler DownloadProgressChanged" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.DownloadProgressChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.DownloadProgressChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>一部またはすべてのデータの非同期ダウンロード操作が正常に転送するときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、非同期のダウンロードが進行するたびにでは発生します。 次のいずれかを使用してダウンロードが開始されたときに、このイベントが発生します。  
  
|メソッド|説明|  
|----------|--------|  
|<xref:System.Net.WebClient.DownloadDataAsync%2A>|リソースからデータをダウンロードし、返します、 <xref:System.Byte> 呼び出し元のスレッドをブロックすることがなく、配列。|  
|<xref:System.Net.WebClient.DownloadFileAsync%2A>|呼び出し元のスレッドをブロックすることがなく、データをリソースからローカル ファイルにダウンロードします。|  
|<xref:System.Net.WebClient.OpenReadAsync%2A>|呼び出し元のスレッドをブロックすることがなく、リソースからデータを返します。|  
  
 <xref:System.Net.DownloadProgressChangedEventHandler> はこのイベントのデリゲート。<xref:System.Net.DownloadProgressChangedEventArgs> クラスには、イベント データを持つイベント ハンドラーが用意されています。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
> [!NOTE]
>  パッシブ FTP ファイル転送では、サーバーがファイルのサイズが送信されていませんので、進行状況はゼロは常に表示します。 進行状況を表示することができますを変更する FTP 接続をアクティブにオーバーライドすることで、 <xref:System.Net.WebClient.GetWebRequest%2A> 仮想メソッド。  
  
```  
internal class MyWebClient:WebClient{  
        protected override WebRequest GetWebRequest(Uri address) {  
            FtpWebRequest req = (FtpWebRequest)base.GetWebRequest(address);  
            req.UsePassive = false;  
            return req;  
        }  
    }  
```  
  
   
  
## 例  
 次のコード例では、このイベントのイベント ハンドラーの設定を示します。  
  
 [!code-cpp[NCLWebClientAsync\#19](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#19)]
 [!code-csharp[NCLWebClientAsync\#19](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#19)]
 [!code-vb[NCLWebClientAsync\#19](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#19)]  
  
 次のコード例では、このイベントのハンドラーの実装を示します。  
  
 [!code-cpp[NCLWebClientAsync\#42](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#42)]
 [!code-csharp[NCLWebClientAsync\#42](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#42)]
 [!code-vb[NCLWebClientAsync\#42](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#42)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DownloadString">
      <MemberSignature Language="C#" Value="public string DownloadString (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string DownloadString(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadString(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">A <see cref="T:System.String" /> をダウンロードする URI を格納します。</param>
        <summary>要求されたリソースとしてのダウンロード、 <see cref="T:System.String" />です。 としてダウンロードするリソースが指定されている、 <see cref="T:System.String" /> URI を格納します。</summary>
        <returns>A <see cref="T:System.String" /> 、要求されたリソースを格納しています。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、指定したリソースを取得します。 指定されたエンコーディング メソッドを使用して、リソース、ダウンロードした後、 <xref:System.Net.WebClient.Encoding%2A> にリソースを変換するプロパティ、 <xref:System.String>です。 リソースのダウンロード中に、このメソッドはブロックします。 リソースをダウンロードして、サーバーの応答を待機中に実行の継続のいずれかの操作を使用して、 <xref:System.Net.WebClient.DownloadStringAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、RETR コマンドを使用して FTP リソースをダウンロードします。 HTTP リソースでは、GET メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
   
  
## 例  
 次のコード例では、このメソッドを呼び出す方法を示します。  
  
 [!code-cpp[NCLWebClientAsync\#25](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#25)]
 [!code-csharp[NCLWebClientAsync\#25](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#25)]
 [!code-vb[NCLWebClientAsync\#25](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 リソースのダウンロード中にエラーが発生しました。</exception>
        <exception cref="T:System.NotSupportedException">このメソッドが同時に複数のスレッドで呼び出されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadString">
      <MemberSignature Language="C#" Value="public string DownloadString (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string DownloadString(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadString(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">A <see cref="T:System.Uri" /> をダウンロードする URI を含むオブジェクト。</param>
        <summary>要求されたリソースとしてのダウンロード、 <see cref="T:System.String" />です。 としてダウンロードするリソースが指定されている、 <see cref="T:System.Uri" />です。</summary>
        <returns>A <see cref="T:System.String" /> 、要求されたリソースを格納しています。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、指定したリソースを取得します。 指定されたエンコーディング メソッドを使用して、リソース、ダウンロードした後、 <xref:System.Net.WebClient.Encoding%2A> にリソースを変換するプロパティ、 <xref:System.String>です。 リソースのダウンロード中に、このメソッドはブロックします。 リソースをダウンロードして、サーバーの応答を待機中に実行の継続のいずれかの操作を使用して、 <xref:System.Net.WebClient.DownloadStringAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、RETR コマンドを使用して FTP リソースをダウンロードします。 HTTP リソースでは、GET メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 リソースのダウンロード中にエラーが発生しました。</exception>
        <exception cref="T:System.NotSupportedException">このメソッドが同時に複数のスレッドで呼び出されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadStringAsync">
      <MemberSignature Language="C#" Value="public void DownloadStringAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadStringAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadStringAsync(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">A <see cref="T:System.Uri" /> をダウンロードする URI を格納します。</param>
        <summary>として指定されたリソースをダウンロード、 <see cref="T:System.Uri" />です。 このメソッドは、呼び出し元のスレッドをブロックしません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 リソースは、スレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期にダウンロードされます。  
  
 このメソッドに指定されたエンコーディングを使用、リソースをダウンロードした後、 <xref:System.Net.WebClient.Encoding%2A> にリソースを変換するプロパティ、 <xref:System.String>です。 このメソッドは、リソースのダウンロード中に呼び出し元のスレッドをブロックしません。 サーバーの応答を待機中に、リソースとブロックをダウンロードするには、使用、 <xref:System.Net.WebClient.DownloadString%2A> メソッドです。 ダウンロードが完了したら、 <xref:System.Net.WebClient.DownloadStringCompleted> イベントが発生します。 アプリケーションでは、通知を受信するには、このイベントを処理する必要があります。 ダウンロードされた文字列が含まれている、 <xref:System.Net.DownloadStringCompletedEventArgs.Result%2A> プロパティです。  
  
 使用することができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドを完了していない非同期操作をキャンセルします。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、RETR コマンドを使用して FTP リソースをダウンロードします。 HTTP リソースでは、GET メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 リソースのダウンロード中にエラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadStringAsync">
      <MemberSignature Language="C#" Value="public void DownloadStringAsync (Uri address, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadStringAsync(class System.Uri address, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadStringAsync(System.Uri,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">A <see cref="T:System.Uri" /> をダウンロードする URI を格納します。</param>
        <param name="userToken">非同期操作が完了したときに呼び出されるメソッドに渡されるユーザー定義のオブジェクト。</param>
        <summary>指定されたリソースに指定した文字列をダウンロードします。 このメソッドは、呼び出し元のスレッドをブロックしません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 リソースは、スレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期にダウンロードされます。  
  
 このメソッドに指定されたエンコーディングを使用、リソースをダウンロードした後、 <xref:System.Net.WebClient.Encoding%2A> にリソースを変換するプロパティ、 <xref:System.String>です。 このメソッドは、リソースのダウンロード中に呼び出し元のスレッドをブロックしません。 サーバーの応答を待機中に、リソースとブロックをダウンロードするには、使用、 <xref:System.Net.WebClient.DownloadString%2A> メソッドです。 ダウンロードが完了したら、 <xref:System.Net.WebClient.DownloadStringCompleted> イベントが発生します。 アプリケーションでは、通知を受信するには、このイベントを処理する必要があります。 ダウンロードされた文字列が含まれている、 <xref:System.Net.DownloadStringCompletedEventArgs.Result%2A> プロパティです。  
  
 使用することができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドを完了していない非同期操作をキャンセルします。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、RETR コマンドを使用して FTP リソースをダウンロードします。 HTTP リソースでは、GET メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 リソースのダウンロード中にエラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadStringCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.DownloadStringCompletedEventHandler DownloadStringCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.DownloadStringCompletedEventHandler DownloadStringCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.DownloadStringCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.DownloadStringCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>リソースの非同期ダウンロード操作が完了すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、リソースを文字列としてダウンロードする非同期操作が完了するたびにでは発生します。 これらの操作は呼び出すことによって、 <xref:System.Net.WebClient.DownloadStringAsync%2A> メソッドです。  
  
 <xref:System.Net.DownloadStringCompletedEventHandler> はこのイベントのデリゲート。<xref:System.Net.DownloadStringCompletedEventArgs> クラスには、イベント データを持つイベント ハンドラーが用意されています。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このイベントのイベント ハンドラーの設定を示します。  
  
 [!code-cpp[NCLWebClientAsync\#28](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#28)]
 [!code-csharp[NCLWebClientAsync\#28](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#28)]
 [!code-vb[NCLWebClientAsync\#28](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DownloadStringTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; DownloadStringTaskAsync (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; DownloadStringTaskAsync(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadStringTaskAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">ダウンロードするリソースの URI。</param>
        <summary>としてリソースをダウンロード、 <see cref="T:System.String" /> タスク オブジェクトを使用して非同期操作として指定された URI からです。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。<see cref="P:System.Threading.Tasks.Task`1.Result" /> タスク オブジェクトのプロパティを返します、 <see cref="T:System.Byte" /> ダウンロードしたリソースを含む配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、データのリソースがダウンロードした後に完了します。  リソースは、スレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期にダウンロードされます。  
  
 このメソッドに指定されたエンコーディングを使用、リソースをダウンロードした後、 <xref:System.Net.WebClient.Encoding%2A> にリソースを変換するプロパティ、 <xref:System.String>です。 このメソッドは、リソースのダウンロード中に呼び出し元のスレッドをブロックしません。  
  
 使用することができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドを完了していない非同期操作をキャンセルします。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、RETR コマンドを使用して FTP リソースをダウンロードします。 HTTP リソースでは、GET メソッドを使用します。  
  
 このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 リソースのダウンロード中にエラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadStringTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; DownloadStringTaskAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; DownloadStringTaskAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadStringTaskAsync(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">ダウンロードするリソースの URI。</param>
        <summary>としてリソースをダウンロード、 <see cref="T:System.String" /> タスク オブジェクトを使用して非同期操作として指定された URI からです。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。<see cref="P:System.Threading.Tasks.Task`1.Result" /> タスク オブジェクトのプロパティを返します、 <see cref="T:System.Byte" /> ダウンロードしたリソースを含む配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、データのリソースがダウンロードした後に完了します。 リソースは、スレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期にダウンロードされます。  
  
 このメソッドに指定されたエンコーディングを使用、リソースをダウンロードした後、 <xref:System.Net.WebClient.Encoding%2A> にリソースを変換するプロパティ、 <xref:System.String>です。 このメソッドは、リソースのダウンロード中に呼び出し元のスレッドをブロックしません。  
  
 使用することができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドを完了していない非同期操作をキャンセルします。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、RETR コマンドを使用して FTP リソースをダウンロードします。 HTTP リソースでは、GET メソッドを使用します。  
  
 このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 リソースのダウンロード中にエラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得および設定、 <see cref="T:System.Text.Encoding" /> のアップロードし、文字列をダウンロードするために使用します。</summary>
        <value>A <see cref="T:System.Text.Encoding" /> 文字列をエンコードするために使用されます。 このプロパティの既定値は、エンコードによって返される <see cref="P:System.Text.Encoding.Default" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.WebClient.UploadString%2A> と <xref:System.Net.WebClient.UploadStringAsync%2A> メソッドは、指定した文字列に変換するこのプロパティを使用して、 <xref:System.Byte> 文字列をアップロードする前に配列。 詳細については、次を参照してください。、 <xref:System.Text.Encoding.GetBytes%2A> メソッドです。  
  
 使用して文字列をダウンロードすると、 <xref:System.Net.WebClient.DownloadString%2A> または <xref:System.Net.WebClient.DownloadStringAsync%2A> メソッド、 <xref:System.Net.WebClient> を使用して、 <xref:System.Text.Encoding> 、ダウンロードしたに変換するこれによって返される <xref:System.Byte> 文字列の配列。 詳細については、次を参照してください。、 <xref:System.Text.Encoding.GetString%2A> メソッドです。  
  
   
  
## 例  
 次のコード例では、このプロパティの値の設定を示します。  
  
 [!code-cpp[NCLWebClientAsync\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#1)]
 [!code-csharp[NCLWebClientAsync\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#1)]
 [!code-vb[NCLWebClientAsync\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWebRequest">
      <MemberSignature Language="C#" Value="protected virtual System.Net.WebRequest GetWebRequest (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Net.WebRequest GetWebRequest(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.GetWebRequest(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">A <see cref="T:System.Uri" /> を要求するリソースを識別します。</param>
        <summary>返します。、 <see cref="T:System.Net.WebRequest" /> 指定されたリソース オブジェクトです。</summary>
        <returns>新しい <see cref="T:System.Net.WebRequest" /> 指定されたリソース オブジェクトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは既存のコピー <xref:System.Net.WebClient.Headers%2A>, 、<xref:System.Net.WebClient.Credentials%2A>, 、新しく作成してメソッドを <xref:System.Net.WebRequest> オブジェクトです。  
  
 このメソッドから継承するクラスによってのみ呼び出すことができる <xref:System.Net.WebClient>です。 これは、基になる継承元がアクセスできるようにする用意されて <xref:System.Net.WebRequest> オブジェクトです。 派生クラスの基本クラス実装を呼び出す必要があります <xref:System.Net.WebClient.GetWebRequest%2A> を予期したとおり、メソッドの動作を確認します。  
  
   
  
## 例  
 次のコード例から派生するクラスがカスタマイズできるこのメソッドの実装を示しています。 <xref:System.Net.WebClient>します。  
  
 [!code-cpp[NCLCustomWebClient\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#1)]
 [!code-csharp[NCLCustomWebClient\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWebResponse">
      <MemberSignature Language="C#" Value="protected virtual System.Net.WebResponse GetWebResponse (System.Net.WebRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Net.WebResponse GetWebResponse(class System.Net.WebRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.GetWebResponse(System.Net.WebRequest)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.WebRequest" />
      </Parameters>
      <Docs>
        <param name="request">A <see cref="T:System.Net.WebRequest" /> 応答を取得するために使用されます。</param>
        <summary>指定した <see cref="T:System.Net.WebResponse" /> の <see cref="T:System.Net.WebRequest" /> を返します。</summary>
        <returns>A <see cref="T:System.Net.WebResponse" /> 、指定された応答を含む <see cref="T:System.Net.WebRequest" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドによって返されるオブジェクトが呼び出すことによって取得、 <xref:System.Net.WebRequest.GetResponse%2A> メソッドを指定した <xref:System.Net.WebRequest> オブジェクトです。  
  
 このメソッドから継承するクラスによってのみ呼び出すことができる <xref:System.Net.WebClient>です。 これは、基になる継承元がアクセスできるようにする用意されて <xref:System.Net.WebResponse> オブジェクトです。  
  
   
  
## 例  
 次のコード例から派生するクラスがカスタマイズできるこのメソッドの実装を示しています。 <xref:System.Net.WebClient>します。  
  
 [!code-cpp[NCLCustomWebClient\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#2)]
 [!code-csharp[NCLCustomWebClient\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWebResponse">
      <MemberSignature Language="C#" Value="protected virtual System.Net.WebResponse GetWebResponse (System.Net.WebRequest request, IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Net.WebResponse GetWebResponse(class System.Net.WebRequest request, class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.WebRequest" />
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="request">A <see cref="T:System.Net.WebRequest" /> 応答を取得するために使用されます。</param>
        <param name="result">
          <see cref="T:System.IAsyncResult" /> オブジェクトを取得する前の呼び出しから <see cref="M:System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> します。</param>
        <summary>返します。、 <see cref="T:System.Net.WebResponse" /> 、指定された <see cref="T:System.Net.WebRequest" /> 指定して <see cref="T:System.IAsyncResult" />します。</summary>
        <returns>A <see cref="T:System.Net.WebResponse" /> 、指定された応答を含む <see cref="T:System.Net.WebRequest" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドによって返されるオブジェクトが呼び出すことによって取得、 <xref:System.Net.WebRequest.EndGetResponse%2A> メソッドを指定した <xref:System.Net.WebRequest> オブジェクトです。  
  
 このメソッドから継承するクラスによってのみ呼び出すことができる <xref:System.Net.WebClient>です。 これは、基になる継承元がアクセスできるようにする用意されて <xref:System.Net.WebResponse> オブジェクトです。  
  
   
  
## 例  
 次のコード例から派生するクラスがカスタマイズできるこのメソッドの実装を示しています。 <xref:System.Net.WebClient>します。  
  
 [!code-cpp[NCLCustomWebClient\#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#3)]
 [!code-csharp[NCLCustomWebClient\#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Headers">
      <MemberSignature Language="C#" Value="public System.Net.WebHeaderCollection Headers { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.WebHeaderCollection Headers" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.Headers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebHeaderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または要求に関連付けられているヘッダーの名前\/値ペアのコレクションを設定します。</summary>
        <value>A <see cref="T:System.Net.WebHeaderCollection" /> この要求に関連付けられているヘッダーの名前\/値ペアを格納します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.WebClient.Headers%2A> プロパティを含む、 <xref:System.Net.WebHeaderCollection> プロトコル ヘッダーを含むインスタンスを <xref:System.Net.WebClient> 要求と共に送信します。  
  
 いくつかの一般的なヘッダーは制限されていると、システムによって保護されているとことはできません設定または変更と見なされます、 <xref:System.Net.WebHeaderCollection> オブジェクトです。 これらの制限付きヘッダーのいずれかを設定しようとすると、 <xref:System.Net.WebHeaderCollection> オブジェクトに関連付けられている、 <xref:System.Net.WebClient> オブジェクトを送信しようとしました。 後で例外がスローされます、 <xref:System.Net.WebClient> 要求します。  
  
 システムによって保護されている制限付きのヘッダーに含めるは、以下に制限。  
  
-   日付  
  
-   Host  
  
 さらに、その他のいくつかのヘッダーも制限を使用する場合、 <xref:System.Net.WebClient> オブジェクトです。 これらの制限付きヘッダーなどが、次に限定されません。  
  
-   そのまま使用します。  
  
-   接続  
  
-   コンテンツ長  
  
-   予想される \(に値を設定すると"100\-続行"  
  
-   If\-変更\-以降  
  
-   範囲  
  
-   転送エンコード  
  
 <xref:System.Net.HttpWebRequest> クラス上のヘッダーの一部を設定するためのプロパティがあります。 アプリケーションがこれらのヘッダーを設定する必要がある場合、 <xref:System.Net.HttpWebRequest> の代わりにクラスを使用する必要があります、 <xref:System.Net.WebRequest> クラスです。  
  
 Web サーバーとキャッシュが変更または Web 要求にヘッダーを追加するためにヘッダーの値を変更されていないはままことを想定しないでください。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Net.WebClient.Headers%2A> を HTTP に設定するコレクション `Content-Type` ヘッダーを `application/x-www-form-urlencoded,` 、投稿へのデータを形成するサーバーが接続に通知します。  
  
 [!code-cpp[WebClient\_UpLoadData\_Headers\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/CPP/webclient_uploaddata_headers.cpp#2)]
 [!code-csharp[WebClient\_UpLoadData\_Headers\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/CS/webclient_uploaddata_headers.cs#2)]
 [!code-vb[WebClient\_UpLoadData\_Headers\#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/VB/webclient_uploaddata_headers.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.WebRequest.Headers" />
        <altmember cref="P:System.Net.HttpWebRequest.Headers" />
      </Docs>
    </Member>
    <Member MemberName="IsBusy">
      <MemberSignature Language="C#" Value="public bool IsBusy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBusy" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.IsBusy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Web 要求を処理するかどうかを取得します。</summary>
        <value>
          <see langword="true" /> Web 要求が実行中の場合それ以外の場合 <see langword="false" />します。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDownloadDataCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnDownloadDataCompleted (System.Net.DownloadDataCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDownloadDataCompleted(class System.Net.DownloadDataCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnDownloadDataCompleted(System.Net.DownloadDataCompletedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.DownloadDataCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Net.DownloadDataCompletedEventArgs" /> イベント データを格納するオブジェクト。</param>
        <summary>
          <see cref="E:System.Net.WebClient.DownloadDataCompleted" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスから継承するクラスがこれをオーバーライド メソッドを追加するときの操作、 <xref:System.Net.WebClient.DownloadDataCompleted> イベントが発生します。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)。  
  
 <xref:System.Net.WebClient.OnDownloadDataCompleted%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例から派生するクラスがカスタマイズできるこのメソッドの実装を示しています。 <xref:System.Net.WebClient>します。  
  
 [!code-cpp[NCLCustomWebClient\#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#4)]
 [!code-csharp[NCLCustomWebClient\#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Net.WebClient.OnDownloadDataCompleted(System.Net.DownloadDataCompletedEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Net.WebClient.OnDownloadDataCompleted(System.Net.DownloadDataCompletedEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDownloadFileCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnDownloadFileCompleted (System.ComponentModel.AsyncCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDownloadFileCompleted(class System.ComponentModel.AsyncCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnDownloadFileCompleted(System.ComponentModel.AsyncCompletedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.AsyncCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> イベント データを格納するオブジェクト。</param>
        <summary>
          <see cref="E:System.Net.WebClient.DownloadFileCompleted" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスから継承するクラスがこれをオーバーライド メソッドを追加するときの操作、 <xref:System.Net.WebClient.DownloadFileCompleted> イベントが発生します。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Net.WebClient.OnDownloadFileCompleted%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例から派生するクラスがカスタマイズできるこのメソッドの実装を示しています。 <xref:System.Net.WebClient>します。  
  
 [!code-cpp[NCLCustomWebClient\#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#5)]
 [!code-csharp[NCLCustomWebClient\#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Net.WebClient.OnDownloadFileCompleted(System.ComponentModel.AsyncCompletedEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Net.WebClient.OnDownloadFileCompleted(System.ComponentModel.AsyncCompletedEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDownloadProgressChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnDownloadProgressChanged (System.Net.DownloadProgressChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDownloadProgressChanged(class System.Net.DownloadProgressChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnDownloadProgressChanged(System.Net.DownloadProgressChangedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.DownloadProgressChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Net.DownloadProgressChangedEventArgs" /> イベント データを格納するオブジェクト。</param>
        <summary>
          <see cref="E:System.Net.WebClient.DownloadProgressChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスから継承するクラスがこれをオーバーライド メソッドを追加するときの操作、 <xref:System.Net.WebClient.DownloadProgressChanged> イベントが発生します。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Net.WebClient.OnDownloadProgressChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例から派生するクラスがカスタマイズできるこのメソッドの実装を示しています。 <xref:System.Net.WebClient>します。  
  
 [!code-cpp[NCLCustomWebClient\#12](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#12)]
 [!code-csharp[NCLCustomWebClient\#12](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Net.WebClient.OnDownloadProgressChanged(System.Net.DownloadProgressChangedEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Net.WebClient.OnDownloadProgressChanged(System.Net.DownloadProgressChangedEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDownloadStringCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnDownloadStringCompleted (System.Net.DownloadStringCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDownloadStringCompleted(class System.Net.DownloadStringCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnDownloadStringCompleted(System.Net.DownloadStringCompletedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.DownloadStringCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Net.DownloadStringCompletedEventArgs" /> イベント データを格納するオブジェクト。</param>
        <summary>
          <see cref="E:System.Net.WebClient.DownloadStringCompleted" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスから継承するクラスがこれをオーバーライド メソッドを追加するときの操作、 <xref:System.Net.WebClient.DownloadStringCompleted> イベントが発生します。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Net.WebClient.OnDownloadStringCompleted%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例から派生するクラスがカスタマイズできるこのメソッドの実装を示しています。 <xref:System.Net.WebClient>します。  
  
 [!code-cpp[NCLCustomWebClient\#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#6)]
 [!code-csharp[NCLCustomWebClient\#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#6)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Net.WebClient.OnDownloadStringCompleted(System.Net.DownloadStringCompletedEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Net.WebClient.OnDownloadStringCompleted(System.Net.DownloadStringCompletedEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnOpenReadCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnOpenReadCompleted (System.Net.OpenReadCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnOpenReadCompleted(class System.Net.OpenReadCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnOpenReadCompleted(System.Net.OpenReadCompletedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.OpenReadCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Net.OpenReadCompletedEventArgs" /> イベント データを格納するオブジェクト。</param>
        <summary>
          <see cref="E:System.Net.WebClient.OpenReadCompleted" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスから継承するクラスがこれをオーバーライド メソッドを追加するときの操作、 <xref:System.Net.WebClient.OpenReadCompleted> イベントが発生します。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Net.WebClient.OnOpenReadCompleted%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例から派生するクラスがカスタマイズできるこのメソッドの実装を示しています。 <xref:System.Net.WebClient>します。  
  
 [!code-cpp[NCLCustomWebClient\#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#7)]
 [!code-csharp[NCLCustomWebClient\#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#7)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Net.WebClient.OnOpenReadCompleted(System.Net.OpenReadCompletedEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Net.WebClient.OnOpenReadCompleted(System.Net.OpenReadCompletedEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnOpenWriteCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnOpenWriteCompleted (System.Net.OpenWriteCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnOpenWriteCompleted(class System.Net.OpenWriteCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnOpenWriteCompleted(System.Net.OpenWriteCompletedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.OpenWriteCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Net.OpenWriteCompletedEventArgs" /> イベント データを格納するオブジェクト。</param>
        <summary>
          <see cref="E:System.Net.WebClient.OpenWriteCompleted" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスから継承するクラスがこれをオーバーライド メソッドを追加するときの操作、 <xref:System.Net.WebClient.OpenWriteCompleted> イベントが発生します。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Net.WebClient.OnOpenWriteCompleted%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例から派生するクラスがカスタマイズできるこのメソッドの実装を示しています。 <xref:System.Net.WebClient>します。  
  
 [!code-cpp[NCLCustomWebClient\#8](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#8)]
 [!code-csharp[NCLCustomWebClient\#8](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#8)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Net.WebClient.OnOpenWriteCompleted(System.Net.OpenWriteCompletedEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Net.WebClient.OnOpenWriteCompleted(System.Net.OpenWriteCompletedEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnUploadDataCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnUploadDataCompleted (System.Net.UploadDataCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUploadDataCompleted(class System.Net.UploadDataCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnUploadDataCompleted(System.Net.UploadDataCompletedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.UploadDataCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Net.UploadDataCompletedEventArgs" /> イベント データを格納するオブジェクト。</param>
        <summary>
          <see cref="E:System.Net.WebClient.UploadDataCompleted" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスから継承するクラスがこれをオーバーライド メソッドを追加するときの操作、 <xref:System.Net.WebClient.UploadDataCompleted> イベントが発生します。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Net.WebClient.OnUploadDataCompleted%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例から派生するクラスがカスタマイズできるこのメソッドの実装を示しています。 <xref:System.Net.WebClient>します。  
  
 [!code-cpp[NCLCustomWebClient\#9](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#9)]
 [!code-csharp[NCLCustomWebClient\#9](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#9)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Net.WebClient.OnUploadDataCompleted(System.Net.UploadDataCompletedEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Net.WebClient.OnUploadDataCompleted(System.Net.UploadDataCompletedEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnUploadFileCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnUploadFileCompleted (System.Net.UploadFileCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUploadFileCompleted(class System.Net.UploadFileCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnUploadFileCompleted(System.Net.UploadFileCompletedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.UploadFileCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Net.UploadFileCompletedEventArgs" /> イベント データを格納するオブジェクト。</param>
        <summary>
          <see cref="E:System.Net.WebClient.UploadFileCompleted" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスから継承するクラスがこれをオーバーライド メソッドを追加するときの操作、 <xref:System.Net.WebClient.UploadFileCompleted> イベントが発生します。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Net.WebClient.OnUploadFileCompleted%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例から派生するクラスがカスタマイズできるこのメソッドの実装を示しています。 <xref:System.Net.WebClient>します。  
  
 [!code-cpp[NCLCustomWebClient\#10](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#10)]
 [!code-csharp[NCLCustomWebClient\#10](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#10)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Net.WebClient.OnUploadFileCompleted(System.Net.UploadFileCompletedEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Net.WebClient.OnUploadFileCompleted(System.Net.UploadFileCompletedEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnUploadProgressChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnUploadProgressChanged (System.Net.UploadProgressChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUploadProgressChanged(class System.Net.UploadProgressChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnUploadProgressChanged(System.Net.UploadProgressChangedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.UploadProgressChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Net.UploadProgressChangedEventArgs" /> イベント データを格納するオブジェクト。</param>
        <summary>
          <see cref="E:System.Net.WebClient.UploadProgressChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスから継承するクラスがこれをオーバーライド メソッドを追加するときの操作、 <xref:System.Net.WebClient.UploadProgressChanged> イベントが発生します。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Net.WebClient.OnUploadProgressChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例から派生するクラスがカスタマイズできるこのメソッドの実装を示しています。 <xref:System.Net.WebClient>します。  
  
 [!code-cpp[NCLCustomWebClient\#13](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#13)]
 [!code-csharp[NCLCustomWebClient\#13](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#13)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Net.WebClient.OnUploadProgressChanged(System.Net.UploadProgressChangedEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Net.WebClient.OnUploadProgressChanged(System.Net.UploadProgressChangedEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnUploadStringCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnUploadStringCompleted (System.Net.UploadStringCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUploadStringCompleted(class System.Net.UploadStringCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnUploadStringCompleted(System.Net.UploadStringCompletedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.UploadStringCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Net.UploadStringCompletedEventArgs" /> イベント データを格納するオブジェクト。</param>
        <summary>
          <see cref="E:System.Net.WebClient.UploadStringCompleted" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスから継承するクラスがこれをオーバーライド メソッドを追加するときの操作、 <xref:System.Net.WebClient.UploadStringCompleted> イベントが発生します。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Net.WebClient.OnUploadStringCompleted%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例から派生するクラスがカスタマイズできるこのメソッドの実装を示しています。 <xref:System.Net.WebClient>します。  
  
 [!code-cpp[NCLCustomWebClient\#11](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#11)]
 [!code-csharp[NCLCustomWebClient\#11](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#11)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Net.WebClient.OnUploadStringCompleted(System.Net.UploadStringCompletedEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Net.WebClient.OnUploadStringCompleted(System.Net.UploadStringCompletedEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnUploadValuesCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnUploadValuesCompleted (System.Net.UploadValuesCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUploadValuesCompleted(class System.Net.UploadValuesCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnUploadValuesCompleted(System.Net.UploadValuesCompletedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.UploadValuesCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Net.UploadValuesCompletedEventArgs" /> イベント データを格納するオブジェクト。</param>
        <summary>
          <see cref="E:System.Net.WebClient.UploadValuesCompleted" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスから継承するクラスがこれをオーバーライド メソッドを追加するときの操作、 <xref:System.Net.WebClient.UploadValuesCompleted> イベントが発生します。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Net.WebClient.OnUploadValuesCompleted%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例から派生するクラスがカスタマイズできるこのメソッドの実装を示しています。 <xref:System.Net.WebClient>します。  
  
 [!code-cpp[NCLCustomWebClient\#14](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#14)]
 [!code-csharp[NCLCustomWebClient\#14](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#14)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Net.WebClient.OnUploadValuesCompleted(System.Net.UploadValuesCompletedEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Net.WebClient.OnUploadValuesCompleted(System.Net.UploadValuesCompletedEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnWriteStreamClosed">
      <MemberSignature Language="C#" Value="protected virtual void OnWriteStreamClosed (System.Net.WriteStreamClosedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWriteStreamClosed(class System.Net.WriteStreamClosedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnWriteStreamClosed(System.Net.WriteStreamClosedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.WriteStreamClosedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Net.WriteStreamClosedEventArgs" /> イベント データを格納するオブジェクト。</param>
        <summary>
          <see cref="E:System.Net.WebClient.WriteStreamClosed" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenRead">
      <MemberSignature Language="C#" Value="public System.IO.Stream OpenRead (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream OpenRead(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenRead(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">として指定された URI、 <see cref="T:System.String" /> 元となるデータをダウンロードします。</param>
        <summary>として指定した URI 用にリソースからダウンロードされたデータの読み取り可能なストリームが開き、 <see cref="T:System.String" />です。</summary>
        <returns>A <see cref="T:System.IO.Stream" /> リソースからデータを読み取るために使用します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.WebClient.OpenRead%2A> メソッドは、作成、 <xref:System.IO.Stream> で指定されたリソースの内容を読み取るために使用されるインスタンス、 `address` パラメーター。 ストリームを開くときに、このメソッドはブロックします。 ストリームの待機中に実行を続行するには、いずれかを使用、 <xref:System.Net.WebClient.OpenReadAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは使用されません `null`, に追加されます `address`します。  
  
 このメソッドでは、RETR コマンドを使用して FTP リソースをダウンロードします。 HTTP リソースでは、GET メソッドを使用します。  
  
> [!NOTE]
>  呼び出す必要があります <xref:System.IO.Stream.Close%2A?displayProperty=fullName> の使用が終わったら、 <xref:System.IO.Stream> システム リソースの不足を回避します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
   
  
## 例  
 次のコード例は、によって識別されるリソースを開きます `uriString` し、システム コンソールに結果を表示します。 なお、 <xref:System.IO.Stream> によって返される <xref:System.Net.WebClient.OpenRead%2A> データが読み取られた場合は、終了します。  
  
 [!code-cpp[WebClient\_OpenRead\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_OpenRead/CPP/webclient_openread.cpp#1)]
 [!code-csharp[WebClient\_OpenRead\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_OpenRead/CS/webclient_openread.cs#1)]
 [!code-vb[WebClient\_OpenRead\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_OpenRead/VB/webclient_openread.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" />, 、<paramref name="address" /> が無効です。  
  
 または  
  
 データのダウンロード中にエラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenRead">
      <MemberSignature Language="C#" Value="public System.IO.Stream OpenRead (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream OpenRead(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenRead(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">として指定された URI、 <see cref="T:System.Uri" /> 元となるデータをダウンロードします。</param>
        <summary>として指定した URI 用にリソースからダウンロードされたデータの読み取り可能なストリームが開き、 <see cref="T:System.Uri" /></summary>
        <returns>A <see cref="T:System.IO.Stream" /> リソースからデータを読み取るために使用します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.WebClient.OpenRead%2A> メソッドは、作成、 <xref:System.IO.Stream> で指定されたリソースの内容を読み取るために使用されるインスタンス、 `address` パラメーター。 ストリームを開くときに、このメソッドはブロックします。 ストリームの待機中に実行を続行するには、いずれかを使用、 <xref:System.Net.WebClient.OpenReadAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは使用されません `null`, に追加されます `address`します。  
  
 このメソッドでは、RETR コマンドを使用して FTP リソースをダウンロードします。 HTTP リソースでは、GET メソッドを使用します。  
  
> [!NOTE]
>  呼び出す必要があります <xref:System.IO.Stream.Close%2A?displayProperty=fullName> の使用が終わったら、 <xref:System.IO.Stream> システム リソースの不足を回避します。  
  
 **注** このメンバーは、アプリケーションでネットワーク トレースを有効にした場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" />, 、<paramref name="address" /> が無効です。  
  
 または  
  
 データのダウンロード中にエラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenReadAsync">
      <MemberSignature Language="C#" Value="public void OpenReadAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OpenReadAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenReadAsync(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">取得するリソースの URI。</param>
        <summary>指定したリソースを格納している読み取り可能なストリームを開きます。 このメソッドは、呼び出し元のスレッドをブロックしません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、取得、 <xref:System.IO.Stream> で指定されたリソースへのアクセスに使用するインスタンス、 `address` パラメーター。 ストリームは、スレッド プールから自動的に割り当てられているスレッド リソースを使用して取得されます。 ストリームが使用可能な場合に通知を受信するイベント ハンドラーを追加、 <xref:System.Net.WebClient.OpenReadCompleted> イベントです。  
  
> [!NOTE]
>  呼び出す必要があります <xref:System.IO.Stream.Close%2A?displayProperty=fullName> 使用が終了したら、 <xref:System.IO.Stream> システム リソースの不足を回避します。  
  
 このメソッドは、ストリームを開くときに、呼び出し元のスレッドをブロックしません。 ストリームの待機中にブロックを使用して、 <xref:System.Net.WebClient.OpenReadAsync%2A> メソッドです。  
  
 使用して完了していない非同期操作を取り消すことができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI で指定されていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたリソースの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは使用されません `null`, に追加されます `address`します。  
  
 このメソッドでは、RETR コマンドを使用して FTP リソースをダウンロードします。 HTTP リソースでは、GET メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> 、アドレスが無効です。  
  
 または  
  
 リソースのダウンロード中にエラーが発生しました。  
  
 または  
  
 ストリームを開くときにエラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenReadAsync">
      <MemberSignature Language="C#" Value="public void OpenReadAsync (Uri address, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OpenReadAsync(class System.Uri address, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenReadAsync(System.Uri,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">取得するリソースの URI。</param>
        <param name="userToken">非同期操作が完了したときに呼び出されるメソッドに渡されるユーザー定義のオブジェクト。</param>
        <summary>指定したリソースを格納している読み取り可能なストリームを開きます。 このメソッドは、呼び出し元のスレッドをブロックしません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、取得、 <xref:System.IO.Stream> で指定されたリソースへのアクセスに使用するインスタンス、 `address` パラメーター。 ストリームは、スレッド プールから自動的に割り当てられているスレッド リソースを使用して取得されます。 ストリームが使用可能な場合に通知を受信するイベント ハンドラーを追加、 <xref:System.Net.WebClient.OpenReadCompleted> イベントです。  
  
> [!NOTE]
>  呼び出す必要があります <xref:System.IO.Stream.Close%2A?displayProperty=fullName> 使用が終了したら、 <xref:System.IO.Stream> システム リソースの不足を回避します。  
  
 このメソッドは、ストリームを開くときに、呼び出し元のスレッドをブロックしません。 ストリームの待機中にブロックを使用して、 <xref:System.Net.WebClient.OpenRead%2A> メソッドです。  
  
 使用して完了していない非同期操作を取り消すことができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI で指定されていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたリソースの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは使用されません `null`, に追加されます `address`します。  
  
 このメソッドでは、RETR コマンドを使用して FTP リソースをダウンロードします。 HTTP リソースでは、GET メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> 、アドレスが無効です。  
  
 または  
  
 リソースのダウンロード中にエラーが発生しました。  
  
 または  
  
 ストリームを開くときにエラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenReadCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.OpenReadCompletedEventHandler OpenReadCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.OpenReadCompletedEventHandler OpenReadCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.OpenReadCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.OpenReadCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>リソースを含むストリームを開く非同期操作の完了時に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、リソースを含むストリームを開く非同期操作が完了するたびにでは発生します。 これらの操作は呼び出すことによって、 <xref:System.Net.WebClient.OpenReadAsync%2A> メソッドです。  
  
 <xref:System.Net.OpenReadCompletedEventHandler> はこのイベントのデリゲート。<xref:System.Net.OpenReadCompletedEventArgs> クラスには、イベント データを持つイベント ハンドラーが用意されています。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このイベントのイベント ハンドラーの設定を示します。  
  
 [!code-cpp[NCLWebClientAsync\#30](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#30)]
 [!code-csharp[NCLWebClientAsync\#30](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#30)]
 [!code-vb[NCLWebClientAsync\#30](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenReadTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; OpenReadTaskAsync (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; OpenReadTaskAsync(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenReadTaskAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">取得するリソースの URI。</param>
        <summary>タスク オブジェクトを使用して非同期操作として、指定されたリソースを格納している読み取り可能なストリームを開きます。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。<see cref="P:System.Threading.Tasks.Task`1.Result" /> タスク オブジェクトのプロパティの取得、 <see cref="T:System.IO.Stream" /> リソースからデータを読み取るために使用します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、完了した後、データ リソースに読み取り可能なストリームが開かれました。 このメソッドは、ストリームを開くときに、呼び出し元のスレッドをブロックしません。  
  
 このメソッドは、取得、 <xref:System.IO.Stream> で指定されたリソースへのアクセスに使用するインスタンス、 `address` パラメーター。 ストリームは、スレッド プールから自動的に割り当てられているスレッド リソースを使用して取得されます。  
  
> [!NOTE]
>  呼び出す必要があります <xref:System.IO.Stream.Close%2A?displayProperty=fullName> 使用が終了したら、 <xref:System.IO.Stream> システム リソースの不足を回避します。  
  
 使用して完了していない非同期操作を取り消すことができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI で指定されていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたリソースの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは使用されません `null`, に追加されます `address`します。  
  
 このメソッドでは、RETR コマンドを使用して FTP リソースをダウンロードします。 HTTP リソースでは、GET メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> 、アドレスが無効です。  
  
 または  
  
 リソースのダウンロード中にエラーが発生しました。  
  
 または  
  
 ストリームを開くときにエラーが発生しました。</exception>
        <altmember cref="T:System.IO.Stream" />
      </Docs>
    </Member>
    <Member MemberName="OpenReadTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; OpenReadTaskAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; OpenReadTaskAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenReadTaskAsync(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">取得するリソースの URI。</param>
        <summary>タスク オブジェクトを使用して非同期操作として、指定されたリソースを格納している読み取り可能なストリームを開きます。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。<see cref="P:System.Threading.Tasks.Task`1.Result" /> タスク オブジェクトのプロパティの取得、 <see cref="T:System.IO.Stream" /> リソースからデータを読み取るために使用します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、完了した後、データ リソースに読み取り可能なストリームが開かれました。 このメソッドは、ストリームを開くときに、呼び出し元のスレッドをブロックしません。  
  
 このメソッドは、取得、 <xref:System.IO.Stream> で指定されたリソースへのアクセスに使用するインスタンス、 `address` パラメーター。 ストリームは、スレッド プールから自動的に割り当てられているスレッド リソースを使用して取得されます。  
  
> [!NOTE]
>  呼び出す必要があります <xref:System.IO.Stream.Close%2A?displayProperty=fullName> 使用が終了したら、 <xref:System.IO.Stream> システム リソースの不足を回避します。  
  
 使用して完了していない非同期操作を取り消すことができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI で指定されていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたリソースの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは使用されません `null`, に追加されます `address`します。  
  
 このメソッドでは、RETR コマンドを使用して FTP リソースをダウンロードします。 HTTP リソースでは、GET メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> 、アドレスが無効です。  
  
 または  
  
 リソースのダウンロード中にエラーが発生しました。  
  
 または  
  
 ストリームを開くときにエラーが発生しました。</exception>
        <altmember cref="T:System.IO.Stream" />
      </Docs>
    </Member>
    <Member MemberName="OpenWrite">
      <MemberSignature Language="C#" Value="public System.IO.Stream OpenWrite (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream OpenWrite(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWrite(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">データを受信する、リソースの URI。</param>
        <summary>指定されたリソースにデータを書き込むためのストリームを開きます。</summary>
        <returns>A <see cref="T:System.IO.Stream" /> リソースにデータを書き込むために使用します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.WebClient.OpenWrite%2A> メソッドは、データをリソースに送信するために使用する書き込み可能なストリームを返します。 ストリームを開くときに、このメソッドはブロックします。 ストリームの待機中に実行を続行するには、いずれかを使用、 <xref:System.Net.WebClient.OpenWriteAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、ストレージ コマンドを使用して、FTP リソースをアップロードします。 HTTP リソースでは、POST メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
   
  
## 例  
 次のコード例は、コマンドラインからデータを読み取り、使用して <xref:System.Net.WebClient.OpenWrite%2A> データを書き込むためのストリームを取得します。<xref:System.IO.Stream> によって返される <xref:System.Net.WebClient.OpenWrite%2A> データが送信された後に終了します。  
  
 [!code-cpp[WebClient\_OpenWrite2\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_OpenWrite2/CPP/webclient_openwrite2.cpp#1)]
 [!code-csharp[WebClient\_OpenWrite2\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_OpenWrite2/CS/webclient_openwrite2.cs#1)]
 [!code-vb[WebClient\_OpenWrite2\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_OpenWrite2/VB/webclient_openwrite2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" />, 、および <paramref name="address" /> が無効です。  
  
 または  
  
 ストリームを開くときにエラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWrite">
      <MemberSignature Language="C#" Value="public System.IO.Stream OpenWrite (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream OpenWrite(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWrite(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">データを受信する、リソースの URI。</param>
        <summary>指定されたリソースにデータを書き込むためのストリームを開きます。</summary>
        <returns>A <see cref="T:System.IO.Stream" /> リソースにデータを書き込むために使用します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.WebClient.OpenWrite%2A> メソッドは、データをリソースに送信するために使用する書き込み可能なストリームを返します。 ストリームを開くときに、このメソッドはブロックします。 ストリームの待機中に実行を続行するには、いずれかを使用、 <xref:System.Net.WebClient.OpenWriteAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、ストレージ コマンドを使用して、FTP リソースをアップロードします。 HTTP リソースでは、POST メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" />, 、および <paramref name="address" /> が無効です。  
  
 または  
  
 ストリームを開くときにエラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWrite">
      <MemberSignature Language="C#" Value="public System.IO.Stream OpenWrite (string address, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream OpenWrite(string address, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWrite(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">データを受信する、リソースの URI。</param>
        <param name="method">リソースにデータを送信するために使用するメソッド。 Null の場合、既定値は http に保存し POST ftp 用には。</param>
        <summary>指定したメソッドを使用して、指定されたリソースにデータを書き込むためのストリームを開きます。</summary>
        <returns>A <see cref="T:System.IO.Stream" /> リソースにデータを書き込むために使用します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.WebClient.OpenWrite%2A> メソッドは、データをリソースに送信するために使用する書き込み可能なストリームを返します。 基になる要求を行うで指定されたメソッドと、 `method` パラメーター。 データは、ストリームを閉じるときに、サーバーに送信されます。 ストリームを開くときに、このメソッドはブロックします。 ストリームの待機中に実行を続行するには、いずれかを使用、 <xref:System.Net.WebClient.OpenWriteAsync%2A> メソッドです。  
  
 場合、 `method` パラメータが認識されないサーバーによって、基になるプロトコル クラスが発生する内容を決定する方法を指定します。 通常、 <xref:System.Net.WebException> と共にスローされます、 <xref:System.Net.WebException.Status%2A> はエラーを示すプロパティを設定します。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対アドレスを指定しない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
   
  
## 例  
 次のコード例は、コマンドラインからデータを読み取り、使用して <xref:System.Net.WebClient.OpenWrite%2A> データの書き込みに使用されるストリームを取得します。 なお、 <xref:System.IO.Stream> によって返される <xref:System.Net.WebClient.OpenWrite%2A> データを送信する閉じる必要があります。  
  
 [!code-cpp[WebClient\_OpenWrite\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_OpenWrite/CPP/webclient_openwrite.cpp#1)]
 [!code-csharp[WebClient\_OpenWrite\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_OpenWrite/CS/webclient_openwrite.cs#1)]
 [!code-vb[WebClient\_OpenWrite\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_OpenWrite/VB/webclient_openwrite.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" />, 、および <paramref name="address" /> が無効です。  
  
 または  
  
 ストリームを開くときにエラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWrite">
      <MemberSignature Language="C#" Value="public System.IO.Stream OpenWrite (Uri address, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream OpenWrite(class System.Uri address, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWrite(System.Uri,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">データを受信する、リソースの URI。</param>
        <param name="method">リソースにデータを送信するために使用するメソッド。 Null の場合、既定値は http に保存し POST ftp 用には。</param>
        <summary>指定したメソッドを使用して、指定されたリソースにデータを書き込むためのストリームを開きます。</summary>
        <returns>A <see cref="T:System.IO.Stream" /> リソースにデータを書き込むために使用します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.WebClient.OpenWrite%2A> メソッドは、データをリソースに送信するために使用する書き込み可能なストリームを返します。 ストリームを開くときに、このメソッドはブロックします。 ストリームの待機中に実行を続行するには、いずれかを使用、 <xref:System.Net.WebClient.OpenWriteAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" />, 、および <paramref name="address" /> が無効です。  
  
 または  
  
 ストリームを開くときにエラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWriteAsync">
      <MemberSignature Language="C#" Value="public void OpenWriteAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OpenWriteAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWriteAsync(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">データを受信する、リソースの URI。</param>
        <summary>指定されたリソースにデータを書き込むためのストリームを開きます。 このメソッドは、呼び出し元のスレッドをブロックしません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、データをリソースに送信するために使用する書き込み可能なストリームを取得します。 ストリームは、スレッド プールから自動的に割り当てられているスレッド リソースを使用して取得します。 ストリームが使用可能な場合に通知を受信するイベント ハンドラーを追加、 <xref:System.Net.WebClient.OpenWriteCompleted> イベントです。 要求が送信されるまで、スレッドがブロックを閉じると、ストリーム、 `address` し、応答を受信します。  
  
 このメソッドは、ストリームが開いているときに、呼び出し元のスレッドをブロックされません。 ストリームの待機中にブロックするには、いずれかを使用、 <xref:System.Net.WebClient.OpenWrite%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、ストレージ コマンドを使用して、FTP リソースをアップロードします。 HTTP リソースでは、POST メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWriteAsync">
      <MemberSignature Language="C#" Value="public void OpenWriteAsync (Uri address, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OpenWriteAsync(class System.Uri address, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWriteAsync(System.Uri,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">データを受信する、リソースの URI。</param>
        <param name="method">リソースにデータを送信するために使用するメソッド。 Null の場合、既定値は http に保存し POST ftp 用には。</param>
        <summary>指定されたリソースにデータを書き込むためのストリームを開きます。 このメソッドは、呼び出し元のスレッドをブロックしません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、データをリソースに送信するために使用する書き込み可能なストリームを取得します。 ストリームは、スレッド プールから自動的に割り当てられているスレッド リソースを使用して取得します。 ストリームが使用可能な場合に通知を受信するイベント ハンドラーを追加、 <xref:System.Net.WebClient.OpenWriteCompleted> イベントです。 要求が送信されるまで、スレッドがブロックを閉じると、ストリーム、 `address` し、応答を受信します。  
  
 このメソッドは、ストリームが開いているときに、呼び出し元のスレッドをブロックされません。 ストリームの待機中にブロックするには、いずれかを使用、 <xref:System.Net.WebClient.OpenWrite%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWriteAsync">
      <MemberSignature Language="C#" Value="public void OpenWriteAsync (Uri address, string method, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OpenWriteAsync(class System.Uri address, string method, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWriteAsync(System.Uri,System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">データを受信する、リソースの URI。</param>
        <param name="method">リソースにデータを送信するために使用するメソッド。 Null の場合、既定値は POST http および保存し"ftp"です。</param>
        <param name="userToken">非同期操作が完了したときに呼び出されるメソッドに渡されるユーザー定義のオブジェクト</param>
        <summary>指定したメソッドを使用して、指定されたリソースにデータを書き込むためのストリームを開きます。 このメソッドは、呼び出し元のスレッドをブロックしません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、データをリソースに送信するために使用する書き込み可能なストリームを取得します。 ストリームは、スレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期で取得します。 ストリームが使用可能な場合に通知を受信するイベント ハンドラーを追加、 <xref:System.Net.WebClient.OpenWriteCompleted> イベントです。 ストリームの内容は、ストリームを閉じるときに、サーバーに送信されます。  
  
 場合、 `method` パラメータが認識されないサーバーによって、基になるプロトコル クラスが発生する内容を決定する方法を指定します。 通常、 <xref:System.Net.WebException> と共にスローされます、 <xref:System.Net.WebException.Status%2A> はエラーを示すプロパティを設定します。  
  
 使用して完了していない非同期操作を取り消すことができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 このメソッドは、ストリームが開いているときに、呼び出し元のスレッドをブロックされません。 ストリームの待機中にブロックするには、いずれかを使用、 <xref:System.Net.WebClient.OpenWrite%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 ストリームを開くときにエラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWriteCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.OpenWriteCompletedEventHandler OpenWriteCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.OpenWriteCompletedEventHandler OpenWriteCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.OpenWriteCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.OpenWriteCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>リソースにデータを書き込むストリームを開く非同期操作の完了時に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、リソースへのデータの送信に使用されるストリームを開く非同期操作が完了するたびにでは発生します。 これらの操作は呼び出すことによって、 <xref:System.Net.WebClient.OpenWriteAsync%2A> メソッドです。  
  
 <xref:System.Net.OpenWriteCompletedEventHandler> はこのイベントのデリゲート。<xref:System.Net.OpenWriteCompletedEventArgs> クラスには、イベント データを持つイベント ハンドラーが用意されています。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このイベントのイベント ハンドラーの設定を示します。  
  
 [!code-cpp[NCLWebClientAsync\#14](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#14)]
 [!code-csharp[NCLWebClientAsync\#14](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#14)]
 [!code-vb[NCLWebClientAsync\#14](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenWriteTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; OpenWriteTaskAsync (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; OpenWriteTaskAsync(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWriteTaskAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">データを受信する、リソースの URI。</param>
        <summary>タスク オブジェクトを使用して非同期操作として、指定されたリソースにデータを書き込むためのストリームを開きます。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。<see cref="P:System.Threading.Tasks.Task`1.Result" /> タスク オブジェクトのプロパティを返します、 <see cref="T:System.IO.Stream" /> リソースにデータを書き込むために使用します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、完了した後、データ リソースへの書き込み可能なストリームが開いています。 このメソッドは、ストリームを開くときに、呼び出し元のスレッドをブロックしません。  
  
 このメソッドは、取得、 <xref:System.IO.Stream> で指定されたリソースへのデータの書き込みに使用するインスタンス、 `address` パラメーター。 ストリームは、スレッド プールから自動的に割り当てられているスレッド リソースを使用して取得されます。  
  
> [!NOTE]
>  呼び出す必要があります <xref:System.IO.Stream.Close%2A?displayProperty=fullName> 使用が終了したら、 <xref:System.IO.Stream> システム リソースの不足を回避します。  
  
 使用して完了していない非同期操作を取り消すことができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、ストレージ コマンドを使用して、FTP リソースをアップロードします。 HTTP リソースでは、POST メソッドを使用します。  
  
 このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 ストリームを開くときにエラーが発生しました。</exception>
        <altmember cref="T:System.IO.Stream" />
      </Docs>
    </Member>
    <Member MemberName="OpenWriteTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; OpenWriteTaskAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; OpenWriteTaskAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWriteTaskAsync(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">データを受信する、リソースの URI。</param>
        <summary>タスク オブジェクトを使用して非同期操作として、指定されたリソースにデータを書き込むためのストリームを開きます。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。<see cref="P:System.Threading.Tasks.Task`1.Result" /> タスク オブジェクトのプロパティを返します、 <see cref="T:System.IO.Stream" /> リソースにデータを書き込むために使用します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、完了した後、データ リソースへの書き込み可能なストリームが開いています。 このメソッドは、ストリームを開くときに、呼び出し元のスレッドをブロックしません。  
  
 このメソッドは、取得、 <xref:System.IO.Stream> で指定されたリソースへのデータの書き込みに使用するインスタンス、 `address` パラメーター。 ストリームは、スレッド プールから自動的に割り当てられているスレッド リソースを使用して取得されます。  
  
> [!NOTE]
>  呼び出す必要があります <xref:System.IO.Stream.Close%2A?displayProperty=fullName> 使用が終了したら、 <xref:System.IO.Stream> システム リソースの不足を回避します。  
  
 使用して完了していない非同期操作を取り消すことができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、ストレージ コマンドを使用して、FTP リソースをアップロードします。 HTTP リソースでは、POST メソッドを使用します。  
  
 このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 ストリームを開くときにエラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWriteTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; OpenWriteTaskAsync (string address, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; OpenWriteTaskAsync(string address, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWriteTaskAsync(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">データを受信する、リソースの URI。</param>
        <param name="method">リソースにデータを送信するために使用するメソッド。 Null の場合、既定値は http に保存し POST ftp 用には。</param>
        <summary>タスク オブジェクトを使用して非同期操作として、指定されたリソースにデータを書き込むためのストリームを開きます。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。<see cref="P:System.Threading.Tasks.Task`1.Result" /> タスク オブジェクトのプロパティを返します、 <see cref="T:System.IO.Stream" /> リソースにデータを書き込むために使用します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、完了した後、データ リソースへの書き込み可能なストリームが開いています。 このメソッドは、ストリームを開くときに、呼び出し元のスレッドをブロックしません。  
  
 このメソッドは、取得、 <xref:System.IO.Stream> で指定されたリソースへのデータの書き込みに使用するインスタンス、 `address` パラメーター。 ストリームは、スレッド プールから自動的に割り当てられているスレッド リソースを使用して取得されます。  
  
> [!NOTE]
>  呼び出す必要があります <xref:System.IO.Stream.Close%2A?displayProperty=fullName> 使用が終了したら、 <xref:System.IO.Stream> システム リソースの不足を回避します。  
  
 場合、 `method` パラメータが認識されないサーバーによって、基になるプロトコル クラスが発生する内容を決定する方法を指定します。 通常、 <xref:System.Net.WebException> と共にスローされます、 <xref:System.Net.WebException.Status%2A> はエラーを示すプロパティを設定します。  
  
 使用して完了していない非同期操作を取り消すことができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、ストレージ コマンドを使用して、FTP リソースをアップロードします。 HTTP リソースでは、POST メソッドを使用します。  
  
 このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 ストリームを開くときにエラーが発生しました。</exception>
        <altmember cref="T:System.IO.Stream" />
      </Docs>
    </Member>
    <Member MemberName="OpenWriteTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; OpenWriteTaskAsync (Uri address, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; OpenWriteTaskAsync(class System.Uri address, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWriteTaskAsync(System.Uri,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">データを受信する、リソースの URI。</param>
        <param name="method">リソースにデータを送信するために使用するメソッド。 Null の場合、既定値は http に保存し POST ftp 用には。</param>
        <summary>タスク オブジェクトを使用して非同期操作として、指定されたリソースにデータを書き込むためのストリームを開きます。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。<see cref="P:System.Threading.Tasks.Task`1.Result" /> タスク オブジェクトのプロパティを返します、 <see cref="T:System.IO.Stream" /> リソースにデータを書き込むために使用します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、完了した後、データ リソースへの書き込み可能なストリームが開いています。 このメソッドは、ストリームを開くときに、呼び出し元のスレッドをブロックしません。  
  
 このメソッドは、取得、 <xref:System.IO.Stream> で指定されたリソースへのデータの書き込みに使用するインスタンス、 `address` パラメーター。 ストリームは、スレッド プールから自動的に割り当てられているスレッド リソースを使用して取得されます。  
  
> [!NOTE]
>  呼び出す必要があります <xref:System.IO.Stream.Close%2A?displayProperty=fullName> 使用が終了したら、 <xref:System.IO.Stream> システム リソースの不足を回避します。  
  
 場合、 `method` パラメータが認識されないサーバーによって、基になるプロトコル クラスが発生する内容を決定する方法を指定します。 通常、 <xref:System.Net.WebException> と共にスローされます、 <xref:System.Net.WebException.Status%2A> はエラーを示すプロパティを設定します。  
  
 使用して完了していない非同期操作を取り消すことができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、ストレージ コマンドを使用して、FTP リソースをアップロードします。 HTTP リソースでは、POST メソッドを使用します。  
  
 このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 ストリームを開くときにエラーが発生しました。</exception>
        <altmember cref="T:System.IO.Stream" />
      </Docs>
    </Member>
    <Member MemberName="Proxy">
      <MemberSignature Language="C#" Value="public System.Net.IWebProxy Proxy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.IWebProxy Proxy" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.Proxy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IWebProxy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定で使用されるプロキシ <see cref="T:System.Net.WebClient" /> オブジェクトです。</summary>
        <value>
          <see cref="T:System.Net.IWebProxy" /> インスタンス要求を送信するために使用します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.WebClient.Proxy%2A> プロパティを識別、 <xref:System.Net.IWebProxy> これの代わりに、リモート サーバーと通信するインスタンス <xref:System.Net.WebClient> オブジェクトです。 プロキシは、構成ファイルおよび Internet Explorer のローカル エリア ネットワーク設定を使用して、システムによって設定されます。 プロキシを使用しないことを指定する、 <xref:System.Net.WebClient.Proxy%2A> プロパティによって返されるプロキシ インスタンスを <xref:System.Net.GlobalProxySelection.GetEmptyWebProxy%2A> メソッドです。  
  
 自動プロキシ検出については、次を参照してください。 [Automatic Proxy Detection](http://msdn.microsoft.com/ja-jp/fcd9c3bd-93de-4c92-8ff3-837327ad18de)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.Net.WebClient.Proxy" /> が <see langword="null" /> に設定されます。</exception>
        <permission cref="T:System.Net.WebPermission">that is unrestricted. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Net.WebRequest" />
        <altmember cref="T:System.Net.WebResponse" />
        <altmember cref="T:System.Net.HttpWebRequest" />
        <altmember cref="T:System.Net.HttpWebResponse" />
        <altmember cref="T:System.Net.FtpWebRequest" />
        <altmember cref="T:System.Net.FtpWebResponse" />
        <altmember cref="T:System.Net.GlobalProxySelection" />
        <altmember cref="T:System.Net.WebProxy" />
      </Docs>
    </Member>
    <Member MemberName="QueryString">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.NameValueCollection QueryString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.NameValueCollection QueryString" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.QueryString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameValueCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または要求に関連付けられているクエリの名前\/値ペアのコレクションを設定します。</summary>
        <value>A <see cref="T:System.Collections.Specialized.NameValueCollection" /> 要求に関連付けられているクエリの名前\/値ペアを格納します。 値は、空の組が要求に関連付けられていない場合は、 <see cref="T:System.Collections.Specialized.NameValueCollection" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.WebClient.QueryString%2A> プロパティを含む、 <xref:System.Collections.Specialized.NameValueCollection> クエリ文字列として URI に追加する名前\/値ペアを含むインスタンス。 内容、 <xref:System.Net.WebClient.QueryString%2A> プロパティを疑問符 \(?\) で始めること名前\/値ペアで区切りを互いにアンパサンド \(&\)。  
  
   
  
## 例  
 次のコード例のユーザー入力を受け取り、コマンドラインからビルド、 <xref:System.Collections.Specialized.NameValueCollection> に割り当てられている、 <xref:System.Net.WebClient.QueryString%2A> プロパティです。 ダウンロード、応答、サーバーからローカル ファイルになります。  
  
 [!code-cpp[WebClient\_QueryString\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_QueryString/CPP/webclient_querystring.cpp#1)]
 [!code-csharp[WebClient\_QueryString\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_QueryString/CS/webclient_querystring.cs#1)]
 [!code-vb[WebClient\_QueryString\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_QueryString/VB/webclient_querystring.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResponseHeaders">
      <MemberSignature Language="C#" Value="public System.Net.WebHeaderCollection ResponseHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.WebHeaderCollection ResponseHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.ResponseHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebHeaderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>応答に関連付けられているヘッダーの名前\/値ペアのコレクションを取得します。</summary>
        <value>A <see cref="T:System.Net.WebHeaderCollection" /> 、応答に関連付けられているヘッダーの名前\/値ペアを含むまたは <see langword="null" /> 応答が受信されていない場合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.WebClient.ResponseHeaders%2A> プロパティを含む、 <xref:System.Net.WebHeaderCollection> ヘッダー情報を含むインスタンス、 <xref:System.Net.WebClient> では、応答を受信します。  
  
   
  
## 例  
 次のコード例をダウンロードし、表示、 <xref:System.Net.WebClient.ResponseHeaders%2A> サーバーによって返されます。  
  
 [!code-cpp[WebClient\_BaseAddress\_ResponseHeaders\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/CPP/webclient_baseaddress_responseheaders.cpp#2)]
 [!code-csharp[WebClient\_BaseAddress\_ResponseHeaders\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/CS/webclient_baseaddress_responseheaders.cs#2)]
 [!code-vb[WebClient\_BaseAddress\_ResponseHeaders\#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/VB/webclient_baseaddress_responseheaders.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadData">
      <MemberSignature Language="C#" Value="public byte[] UploadData (string address, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadData(string address, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadData(System.String,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">データを受信する、リソースの URI。</param>
        <param name="data">リソースに送信するデータのバッファー。</param>
        <summary>URI で識別されるリソースへのデータ バッファーをアップロードします。</summary>
        <returns>A <see cref="T:System.Byte" /> リソースからの応答の本文を含む配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.WebClient.UploadData%2A> メソッドは、リソースにデータ バッファーを送信します。  
  
 このメソッドでは、ストレージ コマンドを使用して、FTP リソースをアップロードします。 HTTP リソースでは、POST メソッドを使用します。 基になる要求がサーバーによって認識されない、基になるプロトコル クラスはどうなるかを決定します。 通常、 <xref:System.Net.WebException> と共にスローされます、 <xref:System.Net.WebException.Status%2A> はエラーを示すプロパティを設定します。  
  
 <xref:System.Net.WebClient.UploadData%2A> メソッドの内容を送信する `data` エンコードなしでサーバーにします。 データのアップロード中に、このメソッドはブロックします。 続けるには、サーバーの応答を待機中に実行するのいずれかの操作を使用して、 <xref:System.Net.WebClient.UploadDataAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
   
  
## 例  
 次のコード例は、コンソールから入力した文字列を変換、 <xref:System.Byte> 配列を使用して、指定したサーバーに配列を投稿 <xref:System.Net.WebClient.UploadData%2A>します。 サーバーからの応答はコンソールに表示されます。  
  
 [!code-cpp[WebClient\_UpLoadData2\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UpLoadData2/CPP/webclient_uploaddata2.cpp#1)]
 [!code-csharp[WebClient\_UpLoadData2\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UpLoadData2/CS/webclient_uploaddata2.cs#1)]
 [!code-vb[WebClient\_UpLoadData2\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UpLoadData2/VB/webclient_uploaddata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" />, 、および <paramref name="address" /> が無効です。  
  
 または  
  
 <paramref name="data" /> は <see langword="null" /> です。  
  
 または  
  
 データの送信中にエラーが発生しました。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadData">
      <MemberSignature Language="C#" Value="public byte[] UploadData (Uri address, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadData(class System.Uri address, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadData(System.Uri,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">データを受信する、リソースの URI。</param>
        <param name="data">リソースに送信するデータのバッファー。</param>
        <summary>URI で識別されるリソースへのデータ バッファーをアップロードします。</summary>
        <returns>A <see cref="T:System.Byte" /> リソースからの応答の本文を含む配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.WebClient.UploadData%2A> メソッドは、リソースにデータ バッファーを送信します。  
  
 このメソッドでは、ストレージ コマンドを使用して、FTP リソースをアップロードします。 HTTP リソースでは、POST メソッドを使用します。 基になる要求がサーバーによって認識されない、基になるプロトコル クラスはどうなるかを決定します。 通常、 <xref:System.Net.WebException> と共にスローされます、 <xref:System.Net.WebException.Status%2A> はエラーを示すプロパティを設定します。  
  
 <xref:System.Net.WebClient.UploadData%2A> メソッドの内容を送信する `data` エンコードなしでサーバーにします。 データのアップロード中に、このメソッドはブロックします。 続けるには、サーバーの応答を待機中に実行するのいずれかの操作を使用して、 <xref:System.Net.WebClient.UploadDataAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" />, 、および <paramref name="address" /> が無効です。  
  
 または  
  
 <paramref name="data" /> は <see langword="null" /> です。  
  
 または  
  
 データの送信中にエラーが発生しました。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadData">
      <MemberSignature Language="C#" Value="public byte[] UploadData (string address, string method, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadData(string address, string method, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadData(System.String,System.String,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">データを受信する、リソースの URI。</param>
        <param name="method">リソースにデータを送信するために使用する HTTP メソッド。 Null の場合、既定値は POST http および保存し"ftp"です。</param>
        <param name="data">リソースに送信するデータのバッファー。</param>
        <summary>指定したメソッドを使用して、指定されたリソースへのデータ バッファーをアップロードします。</summary>
        <returns>A <see cref="T:System.Byte" /> リソースからの応答の本文を含む配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.WebClient.UploadData%2A> メソッドで指定された HTTP メソッドを使用してリソースへのデータ バッファーの送信、 `method` パラメーター、サーバーからの応答を返します。 データのアップロード中に、このメソッドはブロックします。 続けるには、サーバーの応答を待機中に実行するのいずれかの操作を使用して、 <xref:System.Net.WebClient.UploadDataAsync%2A> メソッドです。  
  
 <xref:System.Net.WebClient.UploadData%2A> メソッドの内容を送信する `data` エンコードなしでサーバーにします。  
  
 場合、 `method` が認識されないサーバーによって、基になるプロトコル クラスが発生する内容を決定する動詞を指定します。 通常、 <xref:System.Net.WebException> と共にスローされます、 <xref:System.Net.WebException.Status%2A> はエラーを示すプロパティを設定します。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
   
  
## 例  
 次のコード例は、バイト配列に、コンソールから入力した文字列に変換し、配列の指定されたサーバーを使用して、 <xref:System.Net.WebClient.UploadData%2A>です。 サーバーからの応答はコンソールに表示されます。  
  
 [!code-cpp[WebClient\_UpLoadData\_Headers\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/CPP/webclient_uploaddata_headers.cpp#2)]
 [!code-csharp[WebClient\_UpLoadData\_Headers\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/CS/webclient_uploaddata_headers.cs#2)]
 [!code-vb[WebClient\_UpLoadData\_Headers\#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/VB/webclient_uploaddata_headers.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" />, 、および <paramref name="address" /> が無効です。  
  
 または  
  
 <paramref name="data" /> は <see langword="null" /> です。  
  
 または  
  
 データのアップロード中にエラーが発生しました。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadData">
      <MemberSignature Language="C#" Value="public byte[] UploadData (Uri address, string method, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadData(class System.Uri address, string method, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadData(System.Uri,System.String,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">データを受信する、リソースの URI。</param>
        <param name="method">リソースにデータを送信するために使用する HTTP メソッド。 Null の場合、既定値は http に保存し POST ftp 用には。</param>
        <param name="data">リソースに送信するデータのバッファー。</param>
        <summary>指定したメソッドを使用して、指定されたリソースへのデータ バッファーをアップロードします。</summary>
        <returns>A <see cref="T:System.Byte" /> リソースからの応答の本文を含む配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.WebClient.UploadData%2A> メソッドで指定された HTTP メソッドを使用してリソースへのデータ バッファーの送信、 `method` パラメーター、サーバーからの応答を返します。 データのアップロード中に、このメソッドはブロックします。 続けるには、サーバーの応答を待機中に実行するのいずれかの操作を使用して、 <xref:System.Net.WebClient.UploadDataAsync%2A> メソッドです。  
  
 <xref:System.Net.WebClient.UploadData%2A> メソッドの内容を送信する `data` エンコードなしでサーバーにします。  
  
 場合、 `method` が認識されないサーバーによって、基になるプロトコル クラスが発生する内容を決定する動詞を指定します。 通常、 <xref:System.Net.WebException> と共にスローされます、 <xref:System.Net.WebException.Status%2A> はエラーを示すプロパティを設定します。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" />, 、および <paramref name="address" /> が無効です。  
  
 または  
  
 <paramref name="data" /> は <see langword="null" /> です。  
  
 または  
  
 データのアップロード中にエラーが発生しました。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadDataAsync">
      <MemberSignature Language="C#" Value="public void UploadDataAsync (Uri address, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadDataAsync(class System.Uri address, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadDataAsync(System.Uri,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">データを受信する、リソースの URI。</param>
        <param name="data">リソースに送信するデータのバッファー。</param>
        <summary>POST メソッドを使用して、URI で識別されたリソースへのデータ バッファーをアップロードします。 このメソッドは、呼び出し元のスレッドをブロックしません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、リソースへのデータ バッファーを送信します。 データ バッファーは、スレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期に送信されます。 データがエンコードされていません。 データのアップロードが完了したときに通知を受信するには、イベント ハンドラーを追加、 <xref:System.Net.WebClient.UploadDataCompleted> イベントです。  
  
 このメソッドは、データの送信中に、呼び出し元のスレッドをブロックしません。 サーバーの応答を待機中にデータとブロックを送信するのいずれかの操作を使用して、 <xref:System.Net.WebClient.UploadData%2A> メソッドです。  
  
 使用して完了していない非同期操作を取り消すことができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\)、および `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、ストレージ コマンドを使用して、FTP リソースをアップロードします。 HTTP リソースでは、POST メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 ストリームを開くときにエラーが発生しました。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadDataAsync">
      <MemberSignature Language="C#" Value="public void UploadDataAsync (Uri address, string method, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadDataAsync(class System.Uri address, string method, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadDataAsync(System.Uri,System.String,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">データを受信する、リソースの URI。</param>
        <param name="method">リソースにデータを送信するために使用するメソッド。 場合 <see langword="null" />, 、既定では POST の http および保存し ftp 用です。</param>
        <param name="data">リソースに送信するデータのバッファー。</param>
        <summary>指定したメソッドを使用して、URI で識別されたリソースへのデータ バッファーをアップロードします。 このメソッドは、呼び出し元のスレッドをブロックしません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、リソースへのデータ バッファーを送信します。 データ バッファーは、スレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期に送信されます。 データがエンコードされていません。 データのアップロードが完了したときに通知を受信するには、イベント ハンドラーを追加、 <xref:System.Net.WebClient.UploadDataCompleted> イベントです。  
  
 このメソッドは、データの送信中に、呼び出し元のスレッドをブロックしません。 サーバーの応答を待機中にデータとブロックを送信するのいずれかの操作を使用して、 <xref:System.Net.WebClient.UploadData%2A> メソッドです。  
  
 使用して完了していない非同期操作を取り消すことができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\)、および `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 ストリームを開くときにエラーが発生しました。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadDataAsync">
      <MemberSignature Language="C#" Value="public void UploadDataAsync (Uri address, string method, byte[] data, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadDataAsync(class System.Uri address, string method, unsigned int8[] data, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadDataAsync(System.Uri,System.String,System.Byte[],System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">データを受信する、リソースの URI。</param>
        <param name="method">リソースにデータを送信するために使用するメソッド。 場合 <see langword="null" />, 、既定では POST の http および保存し ftp 用です。</param>
        <param name="data">リソースに送信するデータのバッファー。</param>
        <param name="userToken">非同期操作が完了したときに呼び出されるメソッドに渡されるユーザー定義のオブジェクト。</param>
        <summary>データ バッファーを指定したメソッドを使用して、トークンを識別する URI で識別されるリソースにアップロードします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、リソースへのデータ バッファーを送信します。 データ バッファーは、スレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期に送信されます。 データがエンコードされていません。 データのアップロードが完了したときに通知を受信するには、イベント ハンドラーを追加、 [UploadDataAsync メソッド \(Uri, String, Byte\<xref:System.Net.WebClient.UploadDataCompleted> イベントです。  
  
 このメソッドは、データの送信中に、呼び出し元のスレッドをブロックしません。 サーバーの応答を待機中にデータとブロックを送信するのいずれかの操作を使用して、 [UploadDataAsync メソッド \(Uri, String, Byte\<xref:System.Net.WebClient.UploadData%2A> メソッドです。  
  
 使用して完了していない非同期操作を取り消すことができます、 [UploadDataAsync メソッド \(Uri, String, Byte\<xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 場合、 [UploadDataAsync メソッド \(Uri, String, Byte\<xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\)、および `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません [UploadDataAsync メソッド \(Uri, String, Byte\<xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 [UploadDataAsync メソッド \(Uri, String, Byte\<xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 ストリームを開くときにエラーが発生しました。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadDataCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.UploadDataCompletedEventHandler UploadDataCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.UploadDataCompletedEventHandler UploadDataCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.UploadDataCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.UploadDataCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データの非同期アップロード操作が完了すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、非同期のデータのアップロード処理が完了するたびにでは発生します。 呼び出して非同期データ アップロードが開始された、 <xref:System.Net.WebClient.UploadDataAsync%2A> メソッドです。  
  
 <xref:System.Net.UploadDataCompletedEventHandler> はこのイベントのデリゲート。<xref:System.Net.UploadDataCompletedEventArgs> クラスには、イベント データを持つイベント ハンドラーが用意されています。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このイベントのイベント ハンドラーの設定を示します。  
  
 [!code-cpp[NCLWebClientAsync\#36](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#36)]
 [!code-csharp[NCLWebClientAsync\#36](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#36)]
 [!code-vb[NCLWebClientAsync\#36](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#36)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadDataTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadDataTaskAsync (string address, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadDataTaskAsync(string address, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadDataTaskAsync(System.String,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">データを受信する、リソースの URI。</param>
        <param name="data">リソースに送信するデータのバッファー。</param>
        <summary>含むデータ バッファーをアップロード、 <see cref="T:System.Byte" /> タスク オブジェクトを使用して非同期操作として指定された URI の配列。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。<see cref="P:System.Threading.Tasks.Task`1.Result" /> タスク オブジェクトのプロパティの取得、 <see cref="T:System.Byte" /> データ バッファーがアップロードしたときに、リソースから受信した応答の本文を含む配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、後に完了する、データ バッファーは、リソースにアップロードされました。  
  
 このメソッドは、リソースへのデータ バッファーを送信します。 データ バッファーは、スレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期に送信されます。 データがエンコードされていません。  
  
 使用して完了していない非同期操作を取り消すことができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\)、および `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、ストレージ コマンドを使用して、FTP リソースをアップロードします。 HTTP リソースでは、POST メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 ストリームを開くときにエラーが発生しました。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadDataTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadDataTaskAsync (Uri address, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadDataTaskAsync(class System.Uri address, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadDataTaskAsync(System.Uri,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">データを受信する、リソースの URI。</param>
        <param name="data">リソースに送信するデータのバッファー。</param>
        <summary>含むデータ バッファーをアップロード、 <see cref="T:System.Byte" /> タスク オブジェクトを使用して非同期操作として指定された URI の配列。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。<see cref="P:System.Threading.Tasks.Task`1.Result" /> タスク オブジェクトのプロパティの取得、 <see cref="T:System.Byte" /> データ バッファーがアップロードしたときに、リソースから受信した応答の本文を含む配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、後に完了する、データ バッファーは、リソースにアップロードされました。  
  
 このメソッドは、リソースへのデータ バッファーを送信します。 データ バッファーは、スレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期に送信されます。 データがエンコードされていません。  
  
 使用して完了していない非同期操作を取り消すことができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\)、および `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、ストレージ コマンドを使用して、FTP リソースをアップロードします。 HTTP リソースでは、POST メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 ストリームを開くときにエラーが発生しました。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadDataTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadDataTaskAsync (string address, string method, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadDataTaskAsync(string address, string method, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadDataTaskAsync(System.String,System.String,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">データを受信する、リソースの URI。</param>
        <param name="method">リソースにデータを送信するために使用するメソッド。 場合 <see langword="null" />, 、既定では POST の http および保存し ftp 用です。</param>
        <param name="data">リソースに送信するデータのバッファー。</param>
        <summary>含むデータ バッファーをアップロード、 <see cref="T:System.Byte" /> タスク オブジェクトを使用して非同期操作として指定された URI の配列。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。<see cref="P:System.Threading.Tasks.Task`1.Result" /> タスク オブジェクトのプロパティの取得、 <see cref="T:System.Byte" /> データ バッファーがアップロードしたときに、リソースから受信した応答の本文を含む配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、後に完了する、データ バッファーは、リソースにアップロードされました。  
  
 このメソッドは、リソースへのデータ バッファーを送信します。 データ バッファーは、スレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期に送信されます。 データがエンコードされていません。  
  
 使用して完了していない非同期操作を取り消すことができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\)、および `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 ストリームを開くときにエラーが発生しました。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadDataTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadDataTaskAsync (Uri address, string method, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadDataTaskAsync(class System.Uri address, string method, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadDataTaskAsync(System.Uri,System.String,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">データを受信する、リソースの URI。</param>
        <param name="method">リソースにデータを送信するために使用するメソッド。 場合 <see langword="null" />, 、既定では POST の http および保存し ftp 用です。</param>
        <param name="data">リソースに送信するデータのバッファー。</param>
        <summary>含むデータ バッファーをアップロード、 <see cref="T:System.Byte" /> タスク オブジェクトを使用して非同期操作として指定された URI の配列。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。<see cref="P:System.Threading.Tasks.Task`1.Result" /> タスク オブジェクトのプロパティの取得、 <see cref="T:System.Byte" /> データ バッファーがアップロードしたときに、リソースから受信した応答の本文を含む配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、後に完了する、データ バッファーは、リソースにアップロードされました。  
  
 このメソッドは、リソースへのデータ バッファーを送信します。 データ バッファーは、スレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期に送信されます。 データがエンコードされていません。  
  
 使用して完了していない非同期操作を取り消すことができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\)、および `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 ストリームを開くときにエラーが発生しました。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public byte[] UploadFile (string address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadFile(string address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFile(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">ファイルを受信するリソースの URI。 たとえば、ftp:\/\/localhost\/samplefile.txt です。</param>
        <param name="fileName">リソースに送信するファイルです。 たとえば、"」「samplefile.txt」"です。</param>
        <summary>指定した URI をリソースに指定したローカル ファイルをアップロードします。</summary>
        <returns>A <see cref="T:System.Byte" /> リソースからの応答の本文を含む配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.WebClient.UploadFile%2A> メソッドは、ローカル ファイルをリソースに送信します。 このメソッドでは、ストレージ コマンドを使用して、FTP リソースをアップロードします。 HTTP リソースでは、POST メソッドを使用します。  
  
 ファイルのアップロード中に、このメソッドはブロックします。 続けるには、サーバーの応答を待機中に実行するのいずれかの操作を使用して、 <xref:System.Net.WebClient.UploadFileAsync%2A> メソッドです。  
  
 `POST` メソッドが HTTP で定義されています。 基になる要求が HTTP を使用しない場合、 `POST` が認識されないサーバーによって、基になるプロトコル クラスが発生する内容を決定します。 通常、 <xref:System.Net.WebException> と共にスローされます、 <xref:System.Net.WebException.Status%2A> はエラーを示すプロパティを設定します。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
   
  
## 例  
 次のコード例を使用して指定された URI に指定したファイルをアップロード <xref:System.Net.WebClient.UploadFile%2A>します。 サーバーによって返されるすべての応答はコンソールに表示されます。  
  
 [!code-cpp[WebClient\_UpLoadFile\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UpLoadFile/CPP/webclient_uploadfile.cpp#1)]
 [!code-csharp[WebClient\_UpLoadFile\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UpLoadFile/CS/webclient_uploadfile.cs#1)]
 [!code-vb[WebClient\_UpLoadFile\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UpLoadFile/VB/webclient_uploadfile.vb#1)]  
  
 次のコード例の受け取りが可能な ASP.NET ページは、ファイルをポストされたを示していますで使用するのに適した、 <xref:System.Net.WebClient.UploadFile%2A> メソッドです。 ページは、Web サーバー上に存在する必要があります。 そのアドレスの値を提供する、 `address` のパラメーター、 <xref:System.Net.WebClient.UploadFile%2A> メソッドです。  
  
 [!code-csharp[NCLWebClientAsp\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsp/CS/fileuploadercs.aspx#1)]
 [!code-vb[NCLWebClientAsp\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsp/VB/fileuploadervb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="fileName" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" />, 、および <paramref name="address" /> が無効です。  
  
 または  
  
 <paramref name="fileName" /> <see langword="null" />, は <see cref="F:System.String.Empty" />, 、無効な文字が含まれるか、存在しません。  
  
 または  
  
 ファイルのアップロード中にエラーが発生しました。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。  
  
 または  
  
 <see langword="Content-type" /> ヘッダーが始まる <see langword="multipart" />します。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">to access the local file. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public byte[] UploadFile (Uri address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadFile(class System.Uri address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFile(System.Uri,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">ファイルを受信するリソースの URI。 たとえば、ftp:\/\/localhost\/samplefile.txt です。</param>
        <param name="fileName">リソースに送信するファイルです。 たとえば、"」「samplefile.txt」"です。</param>
        <summary>指定した URI をリソースに指定したローカル ファイルをアップロードします。</summary>
        <returns>A <see cref="T:System.Byte" /> リソースからの応答の本文を含む配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.WebClient.UploadFile%2A> メソッドは、ローカル ファイルをリソースに送信します。 このメソッドでは、ストレージ コマンドを使用して、FTP リソースをアップロードします。 HTTP リソースでは、POST メソッドを使用します。  
  
 ファイルのアップロード中に、このメソッドはブロックします。 続けるには、サーバーの応答を待機中に実行するのいずれかの操作を使用して、 <xref:System.Net.WebClient.UploadFileAsync%2A> メソッドです。  
  
 `POST` メソッドが HTTP で定義されています。 基になる要求が HTTP を使用しない場合、 `POST` が認識されないサーバーによって、基になるプロトコル クラスが発生する内容を決定します。 通常、 <xref:System.Net.WebException> と共にスローされます、 <xref:System.Net.WebException.Status%2A> はエラーを示すプロパティを設定します。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="fileName" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" />, 、および <paramref name="address" /> が無効です。  
  
 または  
  
 <paramref name="fileName" /> <see langword="null" />, は <see cref="F:System.String.Empty" />, 、無効な文字が含まれるか、存在しません。  
  
 または  
  
 ファイルのアップロード中にエラーが発生しました。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。  
  
 または  
  
 <see langword="Content-type" /> ヘッダーが始まる <see langword="multipart" />します。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">to access the local file. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public byte[] UploadFile (string address, string method, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadFile(string address, string method, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFile(System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">ファイルを受信するリソースの URI。</param>
        <param name="method">ファイルをリソースに送信するために使用するメソッド。 場合 <see langword="null" />, 、既定では POST の http および保存し ftp 用です。</param>
        <param name="fileName">リソースに送信するファイルです。</param>
        <summary>指定したメソッドを使用して、指定されたリソースに指定したローカル ファイルをアップロードします。</summary>
        <returns>A <see cref="T:System.Byte" /> リソースからの応答の本文を含む配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アドレスが HTTP リソースを指定すると、 <xref:System.Net.WebClient.UploadFile%2A> メソッドで指定された HTTP メソッドを使用してリソースへのローカル ファイルの送信、 `method` パラメーターをサーバーからの応答を返します。 ファイルのアップロード中に、このメソッドはブロックします。 続けるには、サーバーの応答を待機中に実行するのいずれかの操作を使用して、 <xref:System.Net.WebClient.UploadFileAsync%2A> メソッドです。  
  
 場合、 `method` パラメーターは、サーバーによって認識されません動詞を指定する、または `address` リソース、基になるプロトコル クラスが発生する内容を決定します。 通常、 <xref:System.Net.WebException> と共にスローされます、 <xref:System.Net.WebException.Status%2A> はエラーを示すプロパティを設定します。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
   
  
## 例  
 次のコード例を使用して指定された URI に指定したファイルをアップロード <xref:System.Net.WebClient.UploadFile%2A>します。 サーバーによって返されるすべての応答はコンソールに表示されます。  
  
 [!code-cpp[WebClient\_UpLoadFile2\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UpLoadFile2/CPP/webclient_uploadfile2.cpp#1)]
 [!code-csharp[WebClient\_UpLoadFile2\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UpLoadFile2/CS/webclient_uploadfile2.cs#1)]
 [!code-vb[WebClient\_UpLoadFile2\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UpLoadFile2/VB/webclient_uploadfile2.vb#1)]  
  
 次のコード例の受け取りが可能な ASP.NET ページは、ファイルをポストされたを示していますで使用するのに適した、 <xref:System.Net.WebClient.UploadFile%2A> メソッドです。 ページは、Web サーバー上に存在する必要があります。 そのアドレスの値を提供する、 `address` のパラメーター、 <xref:System.Net.WebClient.UploadFile%2A> メソッドです。  
  
 [!code-csharp[NCLWebClientAsp\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsp/CS/fileuploadercs.aspx#1)]
 [!code-vb[NCLWebClientAsp\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsp/VB/fileuploadervb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="fileName" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" />, 、および <paramref name="address" /> が無効です。  
  
 または  
  
 <paramref name="fileName" /> <see langword="null" />, は <see cref="F:System.String.Empty" />, 、無効な文字が含まれるか、存在しません。  
  
 または  
  
 ファイルのアップロード中にエラーが発生しました。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。  
  
 または  
  
 <see langword="Content-type" /> ヘッダーが始まる <see langword="multipart" />します。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">to access the local file. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public byte[] UploadFile (Uri address, string method, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadFile(class System.Uri address, string method, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFile(System.Uri,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">ファイルを受信するリソースの URI。</param>
        <param name="method">ファイルをリソースに送信するために使用するメソッド。 場合 <see langword="null" />, 、既定では POST の http および保存し ftp 用です。</param>
        <param name="fileName">リソースに送信するファイルです。</param>
        <summary>指定したメソッドを使用して、指定されたリソースに指定したローカル ファイルをアップロードします。</summary>
        <returns>A <see cref="T:System.Byte" /> リソースからの応答の本文を含む配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アドレスが HTTP リソースを指定すると、 <xref:System.Net.WebClient.UploadFile%2A> メソッドで指定された HTTP メソッドを使用してリソースへのローカル ファイルの送信、 `method` パラメーターをサーバーからの応答を返します。 ファイルのアップロード中に、このメソッドはブロックします。 続けるには、サーバーの応答を待機中に実行するのいずれかの操作を使用して、 <xref:System.Net.WebClient.UploadFileAsync%2A> メソッドです。  
  
 場合、 `method` パラメーターは、サーバーによって認識されません動詞を指定する、または `address` リソース、基になるプロトコル クラスが発生する内容を決定します。 通常、 <xref:System.Net.WebException> と共にスローされます、 <xref:System.Net.WebException.Status%2A> はエラーを示すプロパティを設定します。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="fileName" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" />, 、および <paramref name="address" /> が無効です。  
  
 または  
  
 <paramref name="fileName" /> <see langword="null" />, は <see cref="F:System.String.Empty" />, 、無効な文字が含まれるか、存在しません。  
  
 または  
  
 ファイルのアップロード中にエラーが発生しました。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。  
  
 または  
  
 <see langword="Content-type" /> ヘッダーが始まる <see langword="multipart" />します。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">to access the local file. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <Member MemberName="UploadFileAsync">
      <MemberSignature Language="C#" Value="public void UploadFileAsync (Uri address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadFileAsync(class System.Uri address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFileAsync(System.Uri,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">ファイルを受信するリソースの URI。 HTTP リソースの場合は、この URI は、スクリプトや ASP ページなどの POST メソッドを使用して送信された要求を受け入れることができるリソースを識別する必要があります。</param>
        <param name="fileName">リソースに送信するファイルです。</param>
        <summary>POST メソッドを使用して、指定されたリソースに指定したローカル ファイルをアップロードします。 このメソッドは、呼び出し元のスレッドをブロックしません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ファイルは、スレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期に送信されます。 ファイルのアップロードが完了したときに通知を受信するには、イベント ハンドラーを追加、 <xref:System.Net.WebClient.UploadFileCompleted> イベントです。  
  
 このメソッドは、ファイルの送信中に、呼び出し元のスレッドをブロックしません。 サーバーの応答を待機中にファイルとブロックを送信するのいずれかの操作を使用して、 <xref:System.Net.WebClient.UploadFile%2A> メソッドです。  
  
 使用して完了していない非同期操作を取り消すことができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\)、 `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、ストレージ コマンドを使用して、FTP リソースをアップロードします。 HTTP リソースでは、POST メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="fileName" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 <paramref name="fileName" /> <see langword="null" />, は <see cref="F:System.String.Empty" />, 、無効な文字が含まれていますか、ファイルに指定されたパスが存在しません。  
  
 または  
  
 ストリームを開くときにエラーが発生しました。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。  
  
 または  
  
 <see langword="Content-type" /> ヘッダーが始まる <see langword="multipart" />します。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">to access the local file. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="UploadFileAsync">
      <MemberSignature Language="C#" Value="public void UploadFileAsync (Uri address, string method, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadFileAsync(class System.Uri address, string method, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFileAsync(System.Uri,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">ファイルを受信するリソースの URI。 HTTP リソースの場合は、この URI は、スクリプトや ASP ページなどの POST メソッドを使用して送信された要求を受け入れることができるリソースを識別する必要があります。</param>
        <param name="method">リソースにデータを送信するために使用するメソッド。 場合 <see langword="null" />, 、既定では POST の http および保存し ftp 用です。</param>
        <param name="fileName">リソースに送信するファイルです。</param>
        <summary>POST メソッドを使用して、指定されたリソースに指定したローカル ファイルをアップロードします。 このメソッドは、呼び出し元のスレッドをブロックしません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ファイルは、スレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期に送信されます。 ファイルのアップロードが完了したときに通知を受信するには、イベント ハンドラーを追加、 <xref:System.Net.WebClient.UploadFileCompleted> イベントです。  
  
 このメソッドは、ファイルの送信中に、呼び出し元のスレッドをブロックしません。 サーバーの応答を待機中にファイルとブロックを送信するのいずれかの操作を使用して、 <xref:System.Net.WebClient.UploadFile%2A> メソッドです。  
  
 使用して完了していない非同期操作を取り消すことができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\)、 `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、ストレージ コマンドを使用して、FTP リソースをアップロードします。 HTTP リソースでは、POST メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="fileName" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 <paramref name="fileName" /> <see langword="null" />, は <see cref="F:System.String.Empty" />, 、無効な文字が含まれていますか、ファイルに指定されたパスが存在しません。  
  
 または  
  
 ストリームを開くときにエラーが発生しました。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。  
  
 または  
  
 <see langword="Content-type" /> ヘッダーが始まる <see langword="multipart" />します。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">to access the local file. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="UploadFileAsync">
      <MemberSignature Language="C#" Value="public void UploadFileAsync (Uri address, string method, string fileName, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadFileAsync(class System.Uri address, string method, string fileName, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFileAsync(System.Uri,System.String,System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">ファイルを受信するリソースの URI。 HTTP リソースの場合は、この URI は、スクリプトや ASP ページなどの POST メソッドを使用して送信された要求を受け入れることができるリソースを識別する必要があります。</param>
        <param name="method">リソースにデータを送信するために使用するメソッド。 場合 <see langword="null" />, 、既定では POST の http および保存し ftp 用です。</param>
        <param name="fileName">リソースに送信するファイルです。</param>
        <param name="userToken">非同期操作が完了したときに呼び出されるメソッドに渡されるユーザー定義のオブジェクト。</param>
        <summary>POST メソッドを使用して、指定されたリソースに指定したローカル ファイルをアップロードします。 このメソッドは、呼び出し元のスレッドをブロックしません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ファイルは、スレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期に送信されます。 ファイルのアップロードが完了したときに通知を受信するには、イベント ハンドラーを追加、 <xref:System.Net.WebClient.UploadFileCompleted> イベントです。  
  
 このメソッドは、ファイルの送信中に、呼び出し元のスレッドをブロックしません。 サーバーの応答を待機中にファイルとブロックを送信するのいずれかの操作を使用して、 <xref:System.Net.WebClient.UploadFile%2A> メソッドです。  
  
 使用して完了していない非同期操作を取り消すことができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\)、 `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、ストレージ コマンドを使用して、FTP リソースをアップロードします。 HTTP リソースでは、POST メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="fileName" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 <paramref name="fileName" /> <see langword="null" />, は <see cref="F:System.String.Empty" />, 、無効な文字が含まれていますか、ファイルに指定されたパスが存在しません。  
  
 または  
  
 ストリームを開くときにエラーが発生しました。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。  
  
 または  
  
 <see langword="Content-type" /> ヘッダーが始まる <see langword="multipart" />します。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">to access the local file. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="UploadFileCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.UploadFileCompletedEventHandler UploadFileCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.UploadFileCompletedEventHandler UploadFileCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.UploadFileCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.UploadFileCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期のファイル アップロード操作が完了すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、非同期のファイルのアップロード操作が完了するたびにでは発生します。 呼び出して非同期のファイルのアップロードが開始された、 <xref:System.Net.WebClient.UploadFileAsync%2A> メソッドです。  
  
 <xref:System.Net.UploadFileCompletedEventHandler> はこのイベントのデリゲート。<xref:System.Net.UploadFileCompletedEventArgs> クラスには、イベント データを持つイベント ハンドラーが用意されています。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このイベントのイベント ハンドラーの設定を示します。  
  
 [!code-cpp[NCLWebClientAsync\#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#4)]
 [!code-csharp[NCLWebClientAsync\#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#4)]
 [!code-vb[NCLWebClientAsync\#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFileTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadFileTaskAsync (string address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadFileTaskAsync(string address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFileTaskAsync(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">ファイルを受信するリソースの URI。 HTTP リソースの場合は、この URI は、スクリプトや ASP ページなどの POST メソッドを使用して送信された要求を受け入れることができるリソースを識別する必要があります。</param>
        <param name="fileName">リソースに送信するローカル ファイルです。</param>
        <summary>タスク オブジェクトを使用して非同期操作として、リソースに指定したローカル ファイルをアップロードします。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。<see cref="P:System.Threading.Tasks.Task`1.Result" /> タスク オブジェクトのプロパティの取得、 <see cref="T:System.Byte" /> ファイルがアップロードしたときに、リソースから受信した応答の本文を含む配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、リソースに、ファイルがアップロードされた後に完了します。 ファイルは、スレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期に送信されます。  
  
 使用して完了していない非同期操作を取り消すことができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\)、 `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、ストレージ コマンドを使用して、FTP リソースをアップロードします。 HTTP リソースでは、POST メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="fileName" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 <paramref name="fileName" /> <see langword="null" />, は <see cref="F:System.String.Empty" />, 、無効な文字が含まれていますか、ファイルに指定されたパスが存在しません。  
  
 または  
  
 ストリームを開くときにエラーが発生しました。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。  
  
 または  
  
 <see langword="Content-type" /> ヘッダーが始まる <see langword="multipart" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadFileTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadFileTaskAsync (Uri address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadFileTaskAsync(class System.Uri address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFileTaskAsync(System.Uri,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">ファイルを受信するリソースの URI。 HTTP リソースの場合は、この URI は、スクリプトや ASP ページなどの POST メソッドを使用して送信された要求を受け入れることができるリソースを識別する必要があります。</param>
        <param name="fileName">リソースに送信するローカル ファイルです。</param>
        <summary>タスク オブジェクトを使用して非同期操作として、リソースに指定したローカル ファイルをアップロードします。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。<see cref="P:System.Threading.Tasks.Task`1.Result" /> タスク オブジェクトのプロパティの取得、 <see cref="T:System.Byte" /> ファイルがアップロードしたときに、リソースから受信した応答の本文を含む配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、リソースに、ファイルがアップロードされた後に完了します。 ファイルは、スレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期に送信されます。  
  
 使用して完了していない非同期操作を取り消すことができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\)、 `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、ストレージ コマンドを使用して、FTP リソースをアップロードします。 HTTP リソースでは、POST メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="fileName" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 <paramref name="fileName" /> <see langword="null" />, は <see cref="F:System.String.Empty" />, 、無効な文字が含まれていますか、ファイルに指定されたパスが存在しません。  
  
 または  
  
 ストリームを開くときにエラーが発生しました。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。  
  
 または  
  
 <see langword="Content-type" /> ヘッダーが始まる <see langword="multipart" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadFileTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadFileTaskAsync (string address, string method, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadFileTaskAsync(string address, string method, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFileTaskAsync(System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">ファイルを受信するリソースの URI。 HTTP リソースの場合は、この URI は、スクリプトや ASP ページなどの POST メソッドを使用して送信された要求を受け入れることができるリソースを識別する必要があります。</param>
        <param name="method">リソースにデータを送信するために使用するメソッド。 場合 <see langword="null" />, 、既定では POST の http および保存し ftp 用です。</param>
        <param name="fileName">リソースに送信するローカル ファイルです。</param>
        <summary>タスク オブジェクトを使用して非同期操作として、リソースに指定したローカル ファイルをアップロードします。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。<see cref="P:System.Threading.Tasks.Task`1.Result" /> タスク オブジェクトのプロパティの取得、 <see cref="T:System.Byte" /> ファイルがアップロードしたときに、リソースから受信した応答の本文を含む配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、リソースに、ファイルがアップロードされた後に完了します。 ファイルは、スレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期に送信されます。  
  
 使用して完了していない非同期操作を取り消すことができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\)、 `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 既定では、このメソッドは、FTP リソースをアップロードするのにストレージ コマンドを使用します。 HTTP リソースでは、POST メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="fileName" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 <paramref name="fileName" /> <see langword="null" />, は <see cref="F:System.String.Empty" />, 、無効な文字が含まれていますか、ファイルに指定されたパスが存在しません。  
  
 または  
  
 ストリームを開くときにエラーが発生しました。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。  
  
 または  
  
 <see langword="Content-type" /> ヘッダーが始まる <see langword="multipart" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadFileTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadFileTaskAsync (Uri address, string method, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadFileTaskAsync(class System.Uri address, string method, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFileTaskAsync(System.Uri,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">ファイルを受信するリソースの URI。 HTTP リソースの場合は、この URI は、スクリプトや ASP ページなどの POST メソッドを使用して送信された要求を受け入れることができるリソースを識別する必要があります。</param>
        <param name="method">リソースにデータを送信するために使用するメソッド。 場合 <see langword="null" />, 、既定では POST の http および保存し ftp 用です。</param>
        <param name="fileName">リソースに送信するローカル ファイルです。</param>
        <summary>タスク オブジェクトを使用して非同期操作として、リソースに指定したローカル ファイルをアップロードします。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。<see cref="P:System.Threading.Tasks.Task`1.Result" /> タスク オブジェクトのプロパティの取得、 <see cref="T:System.Byte" /> ファイルがアップロードしたときに、リソースから受信した応答の本文を含む配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、リソースに、ファイルがアップロードされた後に完了します。 ファイルは、スレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期に送信されます。  
  
 使用して完了していない非同期操作を取り消すことができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\)、 `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 既定では、このメソッドは、FTP リソースをアップロードするのにストレージ コマンドを使用します。 HTTP リソースでは、POST メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="fileName" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 <paramref name="fileName" /> <see langword="null" />, は <see cref="F:System.String.Empty" />, 、無効な文字が含まれていますか、ファイルに指定されたパスが存在しません。  
  
 または  
  
 ストリームを開くときにエラーが発生しました。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。  
  
 または  
  
 <see langword="Content-type" /> ヘッダーが始まる <see langword="multipart" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadProgressChanged">
      <MemberSignature Language="C#" Value="public event System.Net.UploadProgressChangedEventHandler UploadProgressChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.UploadProgressChangedEventHandler UploadProgressChanged" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.UploadProgressChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.UploadProgressChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>一部またはすべてのデータの非同期アップロード操作が正常に転送するときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、非同期のアップロードの進行状況は、毎回では発生します。 このイベントは、次のいずれかを使用してアップロードが開始されたときに発生します。  
  
|メソッド|説明|  
|----------|--------|  
|<xref:System.Net.WebClient.UploadDataAsync%2A>|送信、 <xref:System.Byte> 呼び出し元のスレッドをブロックすることがなく、リソースへの配列。|  
|<xref:System.Net.WebClient.UploadFileAsync%2A>|呼び出し元のスレッドをブロックすることがなく、ローカルのファイルをリソースに送信します。|  
|<xref:System.Net.WebClient.UploadValuesAsync%2A>|送信、 <xref:System.Collections.Specialized.NameValueCollection> リソースを返す、 <xref:System.Byte> 呼び出し元のスレッドをブロックすることがなくすべての応答を含む配列。|  
  
 <xref:System.Net.UploadProgressChangedEventHandler> はこのイベントのデリゲート。<xref:System.Net.UploadProgressChangedEventArgs> クラスには、イベント データを持つイベント ハンドラーが用意されています。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このイベントのイベント ハンドラーの設定を示します。  
  
 [!code-cpp[NCLWebClientAsync\#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#4)]
 [!code-csharp[NCLWebClientAsync\#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#4)]
 [!code-vb[NCLWebClientAsync\#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#4)]  
  
 次のコード例では、このイベントのハンドラーの実装を示します。  
  
 [!code-cpp[NCLWebClientAsync\#42](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#42)]
 [!code-csharp[NCLWebClientAsync\#42](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#42)]
 [!code-vb[NCLWebClientAsync\#42](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#42)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadString">
      <MemberSignature Language="C#" Value="public string UploadString (string address, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UploadString(string address, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadString(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">文字列を取得するリソースの URI。 Http リソースの場合は、この URI は、スクリプトや ASP ページなどの POST メソッドを使用して送信された要求を受け入れることができるリソースを識別する必要があります。</param>
        <param name="data">アップロードする文字列。</param>
        <summary>POST メソッドを使用して、指定したリソースを指定した文字列をアップロードします。</summary>
        <returns>A <see cref="T:System.String" /> 、サーバーから送信された応答を格納します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドでは、文字列をアップロードする前に変換して、 <xref:System.Byte> 配列に指定されたエンコーディングを使用して、 <xref:System.Net.WebClient.Encoding%2A> プロパティです。 このメソッドは、文字列の送信中にブロックします。 文字列を送信し、サーバーの応答を待機中に実行を継続してのいずれかの操作を使用して、 <xref:System.Net.WebClient.UploadStringAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\)、および `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、ストレージ コマンドを使用して、FTP リソースをアップロードします。 HTTP リソースでは、POST メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
   
  
## 例  
 次のコード例では、このメソッドを呼び出す方法を示します。  
  
 [!code-cpp[NCLWebClientAsync\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#1)]
 [!code-csharp[NCLWebClientAsync\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#1)]
 [!code-vb[NCLWebClientAsync\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="data" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadString">
      <MemberSignature Language="C#" Value="public string UploadString (Uri address, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UploadString(class System.Uri address, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadString(System.Uri,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">文字列を取得するリソースの URI。 Http リソースの場合は、この URI は、スクリプトや ASP ページなどの POST メソッドを使用して送信された要求を受け入れることができるリソースを識別する必要があります。</param>
        <param name="data">アップロードする文字列。</param>
        <summary>POST メソッドを使用して、指定したリソースを指定した文字列をアップロードします。</summary>
        <returns>A <see cref="T:System.String" /> 、サーバーから送信された応答を格納します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドでは、文字列をアップロードする前に変換して、 <xref:System.Byte> 配列に指定されたエンコーディングを使用して、 <xref:System.Net.WebClient.Encoding%2A> プロパティです。 このメソッドは、文字列の送信中にブロックします。 文字列を送信し、サーバーの応答を待機中に実行を継続してのいずれかの操作を使用して、 <xref:System.Net.WebClient.UploadStringAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\)、および `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、ストレージ コマンドを使用して、FTP リソースをアップロードします。 HTTP リソースでは、POST メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="data" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadString">
      <MemberSignature Language="C#" Value="public string UploadString (string address, string method, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UploadString(string address, string method, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadString(System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">文字列を取得するリソースの URI。 この URI に送信された要求を受け入れることができるリソースを識別する必要があります、 <c>method</c> メソッドです。</param>
        <param name="method">リソースに文字列を送信するために使用する HTTP メソッド。 Null の場合、既定値は POST http および保存し"ftp"です。</param>
        <param name="data">アップロードする文字列。</param>
        <summary>指定したメソッドを使用して、指定したリソースを指定した文字列をアップロードします。</summary>
        <returns>A <see cref="T:System.String" /> 、サーバーから送信された応答を格納します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドでは、文字列をアップロードする前に変換して、 <xref:System.Byte> 配列に指定されたエンコーディングを使用して、 <xref:System.Net.WebClient.Encoding%2A> プロパティです。 このメソッドは、文字列の送信中にブロックします。 文字列を送信し、サーバーの応答を待機中に実行を継続してのいずれかの操作を使用して、 <xref:System.Net.WebClient.UploadStringAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
   
  
## 例  
 次のコード例では、このメソッドを呼び出す方法を示します。  
  
 [!code-cpp[NCLWebClientAsync\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#2)]
 [!code-csharp[NCLWebClientAsync\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#2)]
 [!code-vb[NCLWebClientAsync\#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="data" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。  
  
 または  
  
 <paramref name="method" /> コンテンツを送信するのには使用できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadString">
      <MemberSignature Language="C#" Value="public string UploadString (Uri address, string method, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UploadString(class System.Uri address, string method, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadString(System.Uri,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">文字列を取得するリソースの URI。 この URI に送信された要求を受け入れることができるリソースを識別する必要があります、 <c>method</c> メソッドです。</param>
        <param name="method">リソースに文字列を送信するために使用する HTTP メソッド。 Null の場合、既定値は http に保存し POST ftp 用には。</param>
        <param name="data">アップロードする文字列。</param>
        <summary>指定したメソッドを使用して、指定したリソースを指定した文字列をアップロードします。</summary>
        <returns>A <see cref="T:System.String" /> 、サーバーから送信された応答を格納します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドでは、文字列をアップロードする前に変換して、 <xref:System.Byte> 配列に指定されたエンコーディングを使用して、 <xref:System.Net.WebClient.Encoding%2A> プロパティです。 このメソッドは、文字列の送信中にブロックします。 文字列を送信し、サーバーの応答を待機中に実行を継続してのいずれかの操作を使用して、 <xref:System.Net.WebClient.UploadStringAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="data" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。  
  
 または  
  
 <paramref name="method" /> コンテンツを送信するのには使用できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadStringAsync">
      <MemberSignature Language="C#" Value="public void UploadStringAsync (Uri address, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadStringAsync(class System.Uri address, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">文字列を取得するリソースの URI。 HTTP リソースの場合は、この URI は、スクリプトや ASP ページなどの POST メソッドを使用して送信された要求を受け入れることができるリソースを識別する必要があります。</param>
        <param name="data">アップロードする文字列。</param>
        <summary>指定した文字列を指定されたリソースにアップロードします。 このメソッドは、呼び出し元のスレッドをブロックしません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、文字列をリソースに送信します。 文字列は、スレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期に送信されます。 このメソッドでは、文字列をアップロードする前に変換して、 <xref:System.Byte> 配列に指定されたエンコーディングを使用して、 <xref:System.Net.WebClient.Encoding%2A> プロパティです。 文字列のアップロードが完了したときに通知を受信するイベント ハンドラーを追加することができます、 <xref:System.Net.WebClient.UploadStringCompleted> イベントです。  
  
 このメソッドは、文字列の送信中に、呼び出し元のスレッドをブロックしません。 サーバーの応答を待機中に文字列とブロックを送信するのいずれかの操作を使用して、 <xref:System.Net.WebClient.UploadString%2A> メソッドです。  
  
 使用して完了していない非同期操作を取り消すことができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、ストレージ コマンドを使用して、FTP リソースをアップロードします。 HTTP リソースでは、POST メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースを有効にすると、トレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="data" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadStringAsync">
      <MemberSignature Language="C#" Value="public void UploadStringAsync (Uri address, string method, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadStringAsync(class System.Uri address, string method, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">文字列を取得するリソースの URI。 HTTP リソースの場合は、この URI は、スクリプトや ASP ページなどの POST メソッドを使用して送信された要求を受け入れることができるリソースを識別する必要があります。</param>
        <param name="method">ファイルをリソースに送信するために使用する HTTP メソッド。 Null の場合、既定値は http に保存し POST ftp 用には。</param>
        <param name="data">アップロードする文字列。</param>
        <summary>指定した文字列を指定されたリソースにアップロードします。 このメソッドは、呼び出し元のスレッドをブロックしません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、文字列をリソースに送信します。 文字列は、スレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期に送信されます。 このメソッドでは、文字列をアップロードする前に変換して、 <xref:System.Byte> 配列に指定されたエンコーディングを使用して、 <xref:System.Net.WebClient.Encoding%2A> プロパティです。 文字列のアップロードが完了したときに通知を受信するイベント ハンドラーを追加することができます、 <xref:System.Net.WebClient.UploadStringCompleted> イベントです。  
  
 このメソッドは、文字列の送信中に、呼び出し元のスレッドをブロックしません。 サーバーの応答を待機中に文字列とブロックを送信するのいずれかの操作を使用して、 <xref:System.Net.WebClient.UploadString%2A> メソッドです。  
  
 使用して完了していない非同期操作を取り消すことができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースを有効にすると、トレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="data" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 <paramref name="method" /> コンテンツを送信するのには使用できません。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadStringAsync">
      <MemberSignature Language="C#" Value="public void UploadStringAsync (Uri address, string method, string data, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadStringAsync(class System.Uri address, string method, string data, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">文字列を取得するリソースの URI。 HTTP リソースの場合は、この URI は、スクリプトや ASP ページなどの POST メソッドを使用して送信された要求を受け入れることができるリソースを識別する必要があります。</param>
        <param name="method">ファイルをリソースに送信するために使用する HTTP メソッド。 Null の場合、既定値は POST http および保存し"ftp"です。</param>
        <param name="data">アップロードする文字列。</param>
        <param name="userToken">非同期操作が完了したときに呼び出されるメソッドに渡されるユーザー定義のオブジェクト。</param>
        <summary>指定した文字列を指定されたリソースにアップロードします。 このメソッドは、呼び出し元のスレッドをブロックしません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、文字列をリソースに送信します。 文字列は、スレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期に送信されます。 このメソッドでは、文字列をアップロードする前に変換して、 <xref:System.Byte> 配列に指定されたエンコーディングを使用して、 <xref:System.Net.WebClient.Encoding%2A> プロパティです。 文字列のアップロードが完了したときに通知を受信するイベント ハンドラーを追加することができます、 <xref:System.Net.WebClient.UploadStringCompleted> イベントです。  
  
 このメソッドは、文字列の送信中に、呼び出し元のスレッドをブロックしません。 サーバーの応答を待機中に文字列とブロックを送信するのいずれかの操作を使用して、 <xref:System.Net.WebClient.UploadString%2A> メソッドです。  
  
 使用して完了していない非同期操作を取り消すことができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースを有効にすると、トレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="data" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 <paramref name="method" /> コンテンツを送信するのには使用できません。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadStringCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.UploadStringCompletedEventHandler UploadStringCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.UploadStringCompletedEventHandler UploadStringCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.UploadStringCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.UploadStringCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期の文字列アップロード操作が完了すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、文字列の非同期アップロード操作が完了するたびにでは発生します。 呼び出して非同期の文字列のアップロードが開始された、 <xref:System.Net.WebClient.UploadStringAsync%2A> メソッドです。  
  
 <xref:System.Net.UploadStringCompletedEventHandler> はこのイベントのデリゲート。<xref:System.Net.UploadStringCompletedEventArgs> クラスには、イベント データを持つイベント ハンドラーが用意されています。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、このイベントのイベント ハンドラーの設定を示します。  
  
 [!code-cpp[NCLWebClientAsync\#38](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#38)]
 [!code-csharp[NCLWebClientAsync\#38](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#38)]
 [!code-vb[NCLWebClientAsync\#38](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#38)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadStringTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; UploadStringTaskAsync (string address, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; UploadStringTaskAsync(string address, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadStringTaskAsync(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">文字列を取得するリソースの URI。 HTTP リソースの場合は、この URI は、スクリプトや ASP ページなどの POST メソッドを使用して送信された要求を受け入れることができるリソースを識別する必要があります。</param>
        <param name="data">アップロードする文字列。</param>
        <summary>タスク オブジェクトを使用して非同期操作として、指定した文字列を指定されたリソースにアップロードします。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。<see cref="P:System.Threading.Tasks.Task`1.Result" /> タスク オブジェクトのプロパティを返します、 <see cref="T:System.String" /> 、サーバーから送信された応答を格納します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、文字列がリソースにアップロードされた後、完了します。 文字列は、スレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期に送信されます。  
  
 使用して完了していない非同期操作を取り消すことができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 このメソッドでは、文字列をアップロードする前に変換して、 <xref:System.Byte> 配列に指定されたエンコーディングを使用して、 <xref:System.Net.WebClient.Encoding%2A> プロパティです。 このメソッドは、文字列の送信中にブロックします。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="data" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadStringTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; UploadStringTaskAsync (Uri address, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; UploadStringTaskAsync(class System.Uri address, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadStringTaskAsync(System.Uri,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">文字列を取得するリソースの URI。 HTTP リソースの場合は、この URI は、スクリプトや ASP ページなどの POST メソッドを使用して送信された要求を受け入れることができるリソースを識別する必要があります。</param>
        <param name="data">アップロードする文字列。</param>
        <summary>タスク オブジェクトを使用して非同期操作として、指定した文字列を指定されたリソースにアップロードします。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。<see cref="P:System.Threading.Tasks.Task`1.Result" /> タスク オブジェクトのプロパティを返します、 <see cref="T:System.String" /> 、サーバーから送信された応答を格納します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、文字列がリソースにアップロードされた後、完了します。 文字列は、スレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期に送信されます。  
  
 使用して完了していない非同期操作を取り消すことができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 このメソッドでは、文字列をアップロードする前に変換して、 <xref:System.Byte> 配列に指定されたエンコーディングを使用して、 <xref:System.Net.WebClient.Encoding%2A> プロパティです。 このメソッドは、文字列の送信中にブロックします。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="data" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadStringTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; UploadStringTaskAsync (string address, string method, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; UploadStringTaskAsync(string address, string method, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadStringTaskAsync(System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">文字列を取得するリソースの URI。 HTTP リソースの場合は、この URI は、スクリプトや ASP ページなどの POST メソッドを使用して送信された要求を受け入れることができるリソースを識別する必要があります。</param>
        <param name="method">ファイルをリソースに送信するために使用する HTTP メソッド。 Null の場合、既定値は http に保存し POST ftp 用には。</param>
        <param name="data">アップロードする文字列。</param>
        <summary>タスク オブジェクトを使用して非同期操作として、指定した文字列を指定されたリソースにアップロードします。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。<see cref="P:System.Threading.Tasks.Task`1.Result" /> タスク オブジェクトのプロパティを返します、 <see cref="T:System.String" /> 、サーバーから送信された応答を格納します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、文字列がリソースにアップロードされた後、完了します。 文字列は、スレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期に送信されます。  
  
 使用して完了していない非同期操作を取り消すことができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 このメソッドでは、文字列をアップロードする前に変換して、 <xref:System.Byte> 配列に指定されたエンコーディングを使用して、 <xref:System.Net.WebClient.Encoding%2A> プロパティです。 このメソッドは、文字列の送信中にブロックします。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="data" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 <paramref name="method" /> コンテンツを送信するのには使用できません。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadStringTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; UploadStringTaskAsync (Uri address, string method, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; UploadStringTaskAsync(class System.Uri address, string method, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadStringTaskAsync(System.Uri,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">文字列を取得するリソースの URI。 HTTP リソースの場合は、この URI は、スクリプトや ASP ページなどの POST メソッドを使用して送信された要求を受け入れることができるリソースを識別する必要があります。</param>
        <param name="method">ファイルをリソースに送信するために使用する HTTP メソッド。 Null の場合、既定値は http に保存し POST ftp 用には。</param>
        <param name="data">アップロードする文字列。</param>
        <summary>タスク オブジェクトを使用して非同期操作として、指定した文字列を指定されたリソースにアップロードします。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。<see cref="P:System.Threading.Tasks.Task`1.Result" /> タスク オブジェクトのプロパティを返します、 <see cref="T:System.String" /> 、サーバーから送信された応答を格納します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、文字列がリソースにアップロードされた後、完了します。 文字列は、スレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期に送信されます。  
  
 使用して完了していない非同期操作を取り消すことができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 このメソッドでは、文字列をアップロードする前に変換して、 <xref:System.Byte> 配列に指定されたエンコーディングを使用して、 <xref:System.Net.WebClient.Encoding%2A> プロパティです。 このメソッドは、文字列の送信中にブロックします。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="data" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 <paramref name="method" /> コンテンツを送信するのには使用できません。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValues">
      <MemberSignature Language="C#" Value="public byte[] UploadValues (string address, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadValues(string address, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValues(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">コレクションを受信する、リソースの URI。</param>
        <param name="data">
          <see cref="T:System.Collections.Specialized.NameValueCollection" /> 、リソースに送信します。</param>
        <summary>指定された URI で識別されるリソースに指定した名前\/値コレクションをアップロードします。</summary>
        <returns>A <see cref="T:System.Byte" /> リソースからの応答の本文を含む配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.WebClient.UploadValues%2A> メソッドの送信、 <xref:System.Collections.Specialized.NameValueCollection> サーバーにします。 データのアップロード中に、このメソッドはブロックします。 続けるには、サーバーの応答を待機中に実行するのいずれかの操作を使用して、 <xref:System.Net.WebClient.UploadValuesAsync%2A> メソッドです。  
  
 基になる要求がサーバーによって認識されない、基になるプロトコル クラスはどうなるかを決定します。 通常、 <xref:System.Net.WebException> と共にスローされます、 <xref:System.Net.WebException.Status%2A> はエラーを示すプロパティを設定します。  
  
 Content\-type ヘッダーがある場合 `null`, 、 <xref:System.Net.WebClient.UploadValues%2A> メソッドにより"アプリケーション\/x\-www\-form\-urlencoded"に設定します。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、ストレージ コマンドを使用して、FTP リソースをアップロードします。 HTTP リソースでは、POST メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
   
  
## 例  
 次のコード例は、\(名前、年齢、およびアドレス\) のユーザーから情報を収集し、その値を使用してサーバーを <xref:System.Net.WebClient.UploadValues%2A>します。 サーバーからの応答はコンソールに表示されます。  
  
 [!code-cpp[WebClient\_UploadValues\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UploadValues/CPP/webclient_uploadvalues.cpp#1)]
 [!code-csharp[WebClient\_UploadValues\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UploadValues/CS/webclient_uploadvalues.cs#1)]
 [!code-vb[WebClient\_UploadValues\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UploadValues/VB/webclient_uploadvalues.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="data" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" />, 、および <paramref name="address" /> が無効です。  
  
 または  
  
 <paramref name="data" /> は <see langword="null" /> です。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。  
  
 または  
  
 ストリームを開くときにエラーが発生しました。  
  
 または  
  
 <see langword="Content-type" /> ヘッダーが <see langword="null" /> または"アプリケーション\/x\-www\-form\-urlencoded"です。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValues">
      <MemberSignature Language="C#" Value="public byte[] UploadValues (Uri address, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadValues(class System.Uri address, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValues(System.Uri,System.Collections.Specialized.NameValueCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">コレクションを受信する、リソースの URI。</param>
        <param name="data">
          <see cref="T:System.Collections.Specialized.NameValueCollection" /> 、リソースに送信します。</param>
        <summary>指定された URI で識別されるリソースに指定した名前\/値コレクションをアップロードします。</summary>
        <returns>A <see cref="T:System.Byte" /> リソースからの応答の本文を含む配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.WebClient.UploadValues%2A> メソッドの送信、 <xref:System.Collections.Specialized.NameValueCollection> サーバーにします。 データのアップロード中に、このメソッドはブロックします。 続けるには、サーバーの応答を待機中に実行するのいずれかの操作を使用して、 <xref:System.Net.WebClient.UploadValuesAsync%2A> メソッドです。  
  
 基になる要求がサーバーによって認識されない、基になるプロトコル クラスはどうなるかを決定します。 通常、 <xref:System.Net.WebException> と共にスローされます、 <xref:System.Net.WebException.Status%2A> はエラーを示すプロパティを設定します。  
  
 Content\-type ヘッダーがある場合 `null`, 、 <xref:System.Net.WebClient.UploadValues%2A> メソッドにより"アプリケーション\/x\-www\-form\-urlencoded"に設定します。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、ストレージ コマンドを使用して、FTP リソースをアップロードします。 HTTP リソースでは、POST メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="data" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" />, 、および <paramref name="address" /> が無効です。  
  
 または  
  
 <paramref name="data" /> は <see langword="null" /> です。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。  
  
 または  
  
 ストリームを開くときにエラーが発生しました。  
  
 または  
  
 <see langword="Content-type" /> ヘッダーが <see langword="null" /> または"アプリケーション\/x\-www\-form\-urlencoded"です。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValues">
      <MemberSignature Language="C#" Value="public byte[] UploadValues (string address, string method, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadValues(string address, string method, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValues(System.String,System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">コレクションを受信する、リソースの URI。</param>
        <param name="method">ファイルをリソースに送信するために使用する HTTP メソッド。 Null の場合、既定値は http に保存し POST ftp 用には。</param>
        <param name="data">
          <see cref="T:System.Collections.Specialized.NameValueCollection" /> 、リソースに送信します。</param>
        <summary>指定したメソッドを使用して、指定された URI で識別されるリソースに指定した名前\/値コレクションをアップロードします。</summary>
        <returns>A <see cref="T:System.Byte" /> リソースからの応答の本文を含む配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.WebClient.UploadValues%2A> メソッドの送信、 <xref:System.Collections.Specialized.NameValueCollection> で指定されたメソッドを使用してリソースに、 `method` パラメーターをサーバーからの応答を返します。 データのアップロード中に、このメソッドはブロックします。 続けるには、サーバーの応答を待機中に実行するのいずれかの操作を使用して、 <xref:System.Net.WebClient.UploadValuesAsync%2A> メソッドです。  
  
 場合、 `Content-type` ヘッダーが `null`, 、 <xref:System.Net.WebClient.UploadValues%2A> メソッドによりに設定 `application/x-www-form-urlencoded`します。  
  
 場合、 `method` が認識されないサーバーによって、基になるプロトコル クラスが発生する内容を決定する動詞を指定します。 通常、 <xref:System.Net.WebException> と共にスローされます、 <xref:System.Net.WebException.Status%2A> はエラーを示すプロパティを設定します。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
   
  
## 例  
 次のコード例は、\(名前、年齢、およびアドレス\) のユーザーから情報を収集し、その値を使用してサーバーを <xref:System.Net.WebClient.UploadValues%2A>します。 サーバーからの応答はコンソールに表示されます。  
  
 [!code-cpp[WebClient\_UploadValues2\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UploadValues2/CPP/webclient_uploadvalues2.cpp#1)]
 [!code-csharp[WebClient\_UploadValues2\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UploadValues2/CS/webclient_uploadvalues2.cs#1)]
 [!code-vb[WebClient\_UploadValues2\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UploadValues2/VB/webclient_uploadvalues2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="data" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" />, 、および <paramref name="address" /> が無効です。  
  
 または  
  
 <paramref name="data" /> は <see langword="null" /> です。  
  
 または  
  
 ストリームを開くときにエラーが発生しました。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。  
  
 または  
  
 <see langword="Content-type" /> ヘッダーの値が <see langword="null" /> となって <see langword="application/x-www-form-urlencoded" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValues">
      <MemberSignature Language="C#" Value="public byte[] UploadValues (Uri address, string method, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadValues(class System.Uri address, string method, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValues(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">コレクションを受信する、リソースの URI。</param>
        <param name="method">ファイルをリソースに送信するために使用する HTTP メソッド。 Null の場合、既定値は http に保存し POST ftp 用には。</param>
        <param name="data">
          <see cref="T:System.Collections.Specialized.NameValueCollection" /> 、リソースに送信します。</param>
        <summary>指定したメソッドを使用して、指定された URI で識別されるリソースに指定した名前\/値コレクションをアップロードします。</summary>
        <returns>A <see cref="T:System.Byte" /> リソースからの応答の本文を含む配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.WebClient.UploadValues%2A> メソッドの送信、 <xref:System.Collections.Specialized.NameValueCollection> で指定されたメソッドを使用してリソースに、 `method` パラメーターをサーバーからの応答を返します。 データのアップロード中に、このメソッドはブロックします。 続けるには、サーバーの応答を待機中に実行するのいずれかの操作を使用して、 <xref:System.Net.WebClient.UploadValuesAsync%2A> メソッドです。  
  
 場合、 `Content-type` ヘッダーが `null`, 、 <xref:System.Net.WebClient.UploadValues%2A> メソッドによりに設定 `application/x-www-form-urlencoded`します。  
  
 場合、 `method` が認識されないサーバーによって、基になるプロトコル クラスが発生する内容を決定する動詞を指定します。 通常、 <xref:System.Net.WebException> と共にスローされます、 <xref:System.Net.WebException.Status%2A> はエラーを示すプロパティを設定します。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="data" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" />, 、および <paramref name="address" /> が無効です。  
  
 または  
  
 <paramref name="data" /> は <see langword="null" /> です。  
  
 または  
  
 ストリームを開くときにエラーが発生しました。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。  
  
 または  
  
 <see langword="Content-type" /> ヘッダーの値が <see langword="null" /> となって <see langword="application/x-www-form-urlencoded" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValuesAsync">
      <MemberSignature Language="C#" Value="public void UploadValuesAsync (Uri address, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadValuesAsync(class System.Uri address, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValuesAsync(System.Uri,System.Collections.Specialized.NameValueCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">コレクションを受信する、リソースの URI。 この URI は、既定のメソッドを使用して送信された要求を受け入れることができるリソースを識別する必要があります。 「解説」を参照してください。</param>
        <param name="data">
          <see cref="T:System.Collections.Specialized.NameValueCollection" /> 、リソースに送信します。</param>
        <summary>指定された URI で識別されるリソースに指定した名前\/値コレクション内のデータをアップロードします。 このメソッドは、呼び出し元のスレッドをブロックしません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、文字列をリソースに送信します。 文字列は、スレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期に送信されます。 このメソッドでは、文字列をアップロードする前に変換して、 <xref:System.Byte> 配列に指定されたエンコーディングを使用して、 <xref:System.Net.WebClient.Encoding%2A> プロパティです。 文字列のアップロードが完了したときに通知を受信するイベント ハンドラーを追加することができます、 <xref:System.Net.WebClient.UploadStringCompleted> イベントです。  
  
 このメソッドは、文字列の送信中に、呼び出し元のスレッドをブロックしません。 サーバーの応答を待機中に文字列とブロックを送信するのいずれかの操作を使用して、 <xref:System.Net.WebClient.UploadString%2A> メソッドです。  
  
 使用して完了していない非同期操作を取り消すことができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、ストレージ コマンドを使用して、FTP リソースをアップロードします。 HTTP リソースでは、POST メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースを有効にすると、トレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="data" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValuesAsync">
      <MemberSignature Language="C#" Value="public void UploadValuesAsync (Uri address, string method, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadValuesAsync(class System.Uri address, string method, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">コレクションを受信する、リソースの URI。 この URI に送信された要求を受け入れることができるリソースを識別する必要があります、 <c>method</c> メソッドです。</param>
        <param name="method">リソースに文字列を送信するために使用するメソッド。 Null の場合、既定値は POST http および保存し"ftp"です。</param>
        <param name="data">
          <see cref="T:System.Collections.Specialized.NameValueCollection" /> 、リソースに送信します。</param>
        <summary>指定したメソッドを使用して、指定された URI で識別されるリソースに指定した名前\/値コレクション内のデータをアップロードします。 このメソッドは、呼び出し元のスレッドをブロックしません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドに含まれるデータの送信、 <xref:System.Collections.Specialized.NameValueCollection> に、 `address` リソースです。 このメソッドを使用して、フォーム データを処理するための URI に送信します。 フォーム エンコード media type を使用してデータを送信します。Content\-type ヘッダーの値は、"アプリケーション\/x\-www\-form\-urlencoded"に設定する必要があります。 既定では、ヘッダーが正しく設定します。<xref:System.Net.WebClient.UploadValuesAsync%2A> メソッドをスローする、 <xref:System.Net.WebException> で異なるコンテンツ タイプ ヘッダーの値セットを含む、このメソッドを呼び出す場合、 <xref:System.Net.WebClient.Headers%2A> コレクションです。  
  
 場合、 `method` メソッドが認識されないサーバーによって、基になるプロトコル クラスが発生する内容を決定します。 通常、 <xref:System.Net.WebException> と共にスローされます、 <xref:System.Net.WebException.Status%2A> はエラーを示すプロパティを設定します。  
  
 <xref:System.Collections.Specialized.NameValueCollection> スレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期に送信します。 アップロード操作の完了時に通知を受信するには、イベント ハンドラーを追加、 <xref:System.Net.WebClient.UploadValuesCompleted> イベントです。  
  
 このメソッドは、文字列の送信中に、呼び出し元のスレッドをブロックしません。 サーバーの応答を待機中に文字列とブロックを送信するのいずれかの操作を使用して、 <xref:System.Net.WebClient.UploadValues%2A> メソッドです。  
  
 使用して完了していない非同期操作を取り消すことができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティが空ではありませんが、末尾に追加 `address`します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="data" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。  
  
 または  
  
 <paramref name="method" /> コンテンツを送信するのには使用できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValuesAsync">
      <MemberSignature Language="C#" Value="public void UploadValuesAsync (Uri address, string method, System.Collections.Specialized.NameValueCollection data, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadValuesAsync(class System.Uri address, string method, class System.Collections.Specialized.NameValueCollection data, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">コレクションを受信する、リソースの URI。 この URI に送信された要求を受け入れることができるリソースを識別する必要があります、 <c>method</c> メソッドです。</param>
        <param name="method">リソースに文字列を送信するために使用する HTTP メソッド。 Null の場合、既定値は http に保存し POST ftp 用には。</param>
        <param name="data">
          <see cref="T:System.Collections.Specialized.NameValueCollection" /> 、リソースに送信します。</param>
        <param name="userToken">非同期操作が完了したときに呼び出されるメソッドに渡されるユーザー定義のオブジェクト。</param>
        <summary>指定したメソッドを使用して、指定された URI で識別されるリソースに指定した名前\/値コレクション内のデータをアップロードします。 このメソッドは、呼び出し元のスレッドをブロックしませんし、オブジェクトを渡し、操作が完了したときに呼び出されるメソッドを呼び出し元を開きます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドに含まれるデータの送信、 <xref:System.Collections.Specialized.NameValueCollection> に、 `address` リソースです。 このメソッドを使用して、フォーム データを処理するための URI に送信します。 フォーム エンコード media type を使用してデータを送信します。Content\-type ヘッダーの値は、"アプリケーション\/x\-www\-form\-urlencoded"に設定する必要があります。 既定では、ヘッダーが正しく設定します。<xref:System.Net.WebClient.UploadValuesAsync%2A> メソッドをスローする、 <xref:System.Net.WebException> で異なるコンテンツ タイプ ヘッダーの値セットを含む、このメソッドを呼び出す場合、 <xref:System.Net.WebClient.Headers%2A> コレクションです。  
  
 場合、 `method` メソッドが認識されないサーバーによって、基になるプロトコル クラスが発生する内容を決定します。 通常、 <xref:System.Net.WebException> と共にスローされます、 <xref:System.Net.WebException.Status%2A> はエラーを示すプロパティを設定します。  
  
 <xref:System.Collections.Specialized.NameValueCollection> スレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期に送信します。 アップロード操作の完了時に通知を受信するには、イベント ハンドラーを追加、 <xref:System.Net.WebClient.UploadValuesCompleted> イベントです。  
  
 このメソッドは、文字列の送信中に、呼び出し元のスレッドをブロックしません。 サーバーの応答を待機中に文字列とブロックを送信するのいずれかの操作を使用して、 <xref:System.Net.WebClient.UploadValues%2A> メソッドです。  
  
 使用して完了していない非同期操作を取り消すことができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティが空ではありませんが、末尾に追加 `address`します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="data" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" /> と <paramref name="address" /> が無効です。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。  
  
 または  
  
 <paramref name="method" /> コンテンツを送信するのには使用できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValuesCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.UploadValuesCompletedEventHandler UploadValuesCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.UploadValuesCompletedEventHandler UploadValuesCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.UploadValuesCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.UploadValuesCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>名前\/値コレクションの非同期アップロードが完了したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、非同期のアップロードのたびに、 <xref:System.Collections.Specialized.NameValueCollection> オブジェクトのデータが完了します。 これらのアップロードは呼び出すことによって、 <xref:System.Net.WebClient.UploadValuesAsync%2A> メソッドです。  
  
 <xref:System.Net.UploadValuesCompletedEventHandler> はこのイベントのデリゲート。<xref:System.Net.UploadValuesCompletedEventArgs> クラスには、イベント データを持つイベント ハンドラーが用意されています。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadValuesTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadValuesTaskAsync (string address, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadValuesTaskAsync(string address, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValuesTaskAsync(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">コレクションを受信する、リソースの URI。</param>
        <param name="data">
          <see cref="T:System.Collections.Specialized.NameValueCollection" /> 、リソースに送信します。</param>
        <summary>タスク オブジェクトを使用して非同期操作として指定された URI で識別されるリソースに指定した名前\/値コレクションをアップロードします。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。<see cref="P:System.Threading.Tasks.Task`1.Result" /> タスク オブジェクトのプロパティを返します、 <see cref="T:System.Byte" /> 、サーバーから送信された応答を含む配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、名前\/値のコレクションがリソースにアップロードされた後に完了します。 名前\/値コレクションはスレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期に送信されます。  
  
 使用して完了していない非同期操作を取り消すことができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 基になる要求がサーバーによって認識されない、基になるプロトコル クラスはどうなるかを決定します。 通常、 <xref:System.Net.WebException> と共にスローされます、 <xref:System.Net.WebException.Status%2A> はエラーを示すプロパティを設定します。  
  
 Content\-type ヘッダーがある場合 `null`, 、このメソッドにより"アプリケーション\/x\-www\-form\-urlencoded"に設定します。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、ストレージ コマンドを使用して、FTP リソースをアップロードします。 HTTP リソースでは、POST メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="data" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" />, 、および <paramref name="address" /> が無効です。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。  
  
 または  
  
 ストリームを開くときにエラーが発生しました。  
  
 または  
  
 <see langword="Content-type" /> ヘッダーが <see langword="null" /> または"アプリケーション\/x\-www\-form\-urlencoded"です。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValuesTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadValuesTaskAsync (Uri address, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadValuesTaskAsync(class System.Uri address, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValuesTaskAsync(System.Uri,System.Collections.Specialized.NameValueCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">コレクションを受信する、リソースの URI。</param>
        <param name="data">
          <see cref="T:System.Collections.Specialized.NameValueCollection" /> 、リソースに送信します。</param>
        <summary>タスク オブジェクトを使用して非同期操作として指定された URI で識別されるリソースに指定した名前\/値コレクションをアップロードします。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。<see cref="P:System.Threading.Tasks.Task`1.Result" /> タスク オブジェクトのプロパティを返します、 <see cref="T:System.Byte" /> 、サーバーから送信された応答を含む配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、名前\/値のコレクションがリソースにアップロードされた後に完了します。 名前\/値コレクションはスレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期に送信されます。  
  
 使用して完了していない非同期操作を取り消すことができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 基になる要求がサーバーによって認識されない、基になるプロトコル クラスはどうなるかを決定します。 通常、 <xref:System.Net.WebException> と共にスローされます、 <xref:System.Net.WebException.Status%2A> はエラーを示すプロパティを設定します。  
  
 Content\-type ヘッダーがある場合 `null`, 、このメソッドにより"アプリケーション\/x\-www\-form\-urlencoded"に設定します。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、ストレージ コマンドを使用して、FTP リソースをアップロードします。 HTTP リソースでは、POST メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="data" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" />, 、および <paramref name="address" /> が無効です。  
  
 または  
  
 ストリームを開くときにエラーが発生しました。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。  
  
 または  
  
 <see langword="Content-type" /> ヘッダーの値が <see langword="null" /> となって <see langword="application/x-www-form-urlencoded" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValuesTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadValuesTaskAsync (string address, string method, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadValuesTaskAsync(string address, string method, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValuesTaskAsync(System.String,System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">コレクションを受信する、リソースの URI。</param>
        <param name="method">リソースにコレクションを送信するために使用する HTTP メソッド。 Null の場合、既定値は http に保存し POST ftp 用には。</param>
        <param name="data">
          <see cref="T:System.Collections.Specialized.NameValueCollection" /> 、リソースに送信します。</param>
        <summary>タスク オブジェクトを使用して非同期操作として指定された URI で識別されるリソースに指定した名前\/値コレクションをアップロードします。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。<see cref="P:System.Threading.Tasks.Task`1.Result" /> タスク オブジェクトのプロパティを返します、 <see cref="T:System.Byte" /> 、サーバーから送信された応答を含む配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、名前\/値のコレクションがリソースにアップロードされた後に完了します。 名前\/値コレクションはスレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期に送信されます。  
  
 使用して完了していない非同期操作を取り消すことができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 基になる要求がサーバーによって認識されない、基になるプロトコル クラスはどうなるかを決定します。 通常、 <xref:System.Net.WebException> と共にスローされます、 <xref:System.Net.WebException.Status%2A> はエラーを示すプロパティを設定します。  
  
 Content\-type ヘッダーがある場合 `null`, 、このメソッドにより"アプリケーション\/x\-www\-form\-urlencoded"に設定します。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、ストレージ コマンドを使用して、FTP リソースをアップロードします。 HTTP リソースでは、POST メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="data" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" />, 、および <paramref name="address" /> が無効です。  
  
 または  
  
 <paramref name="method" /> コンテンツを送信するのには使用できません。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。  
  
 または  
  
 ストリームを開くときにエラーが発生しました。  
  
 または  
  
 <see langword="Content-type" /> ヘッダーが <see langword="null" /> または"アプリケーション\/x\-www\-form\-urlencoded"です。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValuesTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadValuesTaskAsync (Uri address, string method, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadValuesTaskAsync(class System.Uri address, string method, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValuesTaskAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">コレクションを受信する、リソースの URI。</param>
        <param name="method">リソースにコレクションを送信するために使用する HTTP メソッド。 Null の場合、既定値は http に保存し POST ftp 用には。</param>
        <param name="data">
          <see cref="T:System.Collections.Specialized.NameValueCollection" /> 、リソースに送信します。</param>
        <summary>タスク オブジェクトを使用して非同期操作として指定された URI で識別されるリソースに指定した名前\/値コレクションをアップロードします。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。<see cref="P:System.Threading.Tasks.Task`1.Result" /> タスク オブジェクトのプロパティを返します、 <see cref="T:System.Byte" /> 、サーバーから送信された応答を含む配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、名前\/値のコレクションがリソースにアップロードされた後に完了します。 名前\/値コレクションはスレッド プールから自動的に割り当てられているスレッド リソースを使用して非同期に送信されます。  
  
 使用して完了していない非同期操作を取り消すことができます、 <xref:System.Net.WebClient.CancelAsync%2A> メソッドです。  
  
 基になる要求がサーバーによって認識されない、基になるプロトコル クラスはどうなるかを決定します。 通常、 <xref:System.Net.WebException> と共にスローされます、 <xref:System.Net.WebException.Status%2A> はエラーを示すプロパティを設定します。  
  
 Content\-type ヘッダーがある場合 `null`, 、このメソッドにより"アプリケーション\/x\-www\-form\-urlencoded"に設定します。  
  
 場合、 <xref:System.Net.WebClient.BaseAddress%2A> プロパティは空の文字列ではありません \(""\) と `address` 、絶対 URI が含まれていない `address` と組み合わせる相対 URI でなければなりません <xref:System.Net.WebClient.BaseAddress%2A> を要求されたデータの絶対 URI を形成します。 場合、 <xref:System.Net.WebClient.QueryString%2A> プロパティは空の文字列ではありませんが、末尾に追加 `address`します。  
  
 このメソッドでは、ストレージ コマンドを使用して、FTP リソースをアップロードします。 HTTP リソースでは、POST メソッドを使用します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="data" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.WebException">結合することで、URI が形成される <see cref="P:System.Net.WebClient.BaseAddress" />, 、および <paramref name="address" /> が無効です。  
  
 または  
  
 <paramref name="method" /> コンテンツを送信するのには使用できません。  
  
 または  
  
 リソースをホストするサーバーから応答がありませんでした。  
  
 または  
  
 ストリームを開くときにエラーが発生しました。  
  
 または  
  
 <see langword="Content-type" /> ヘッダーが <see langword="null" /> または"アプリケーション\/x\-www\-form\-urlencoded"です。</exception>
      </Docs>
    </Member>
    <Member MemberName="UseDefaultCredentials">
      <MemberSignature Language="C#" Value="public bool UseDefaultCredentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseDefaultCredentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.UseDefaultCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、 <see cref="T:System.Boolean" /> 値を制御するのかどうか、 <see cref="P:System.Net.CredentialCache.DefaultCredentials" /> 要求と共に送信します。</summary>
        <value>既定の資格情報を使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを設定 `true` この要求が行われるときに <xref:System.Net.WebClient> オブジェクト場合は、サーバーから要求された認証を行うか、現在ログオンしているユーザーの既定の資格情報を使用します。 クライアント アプリケーションでは、ほとんどのシナリオでは、目的の動作です。 このプロパティを使用する代わりに、ASP.NET アプリケーションなどの中間層アプリケーションは通常設定、 <xref:System.Net.WebClient.Credentials%2A> プロパティが代わりに、要求が行われるクライアントの資格情報をします。  
  
   
  
## 例  
 次のコード例では、このプロパティの設定を示します。  
  
 [!code-cpp[NCLWebClientAsync\#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#3)]
 [!code-csharp[NCLWebClientAsync\#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#3)]
 [!code-vb[NCLWebClientAsync\#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteStreamClosed">
      <MemberSignature Language="C#" Value="public event System.Net.WriteStreamClosedEventHandler WriteStreamClosed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.WriteStreamClosedEventHandler WriteStreamClosed" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.WriteStreamClosed" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.WriteStreamClosedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>書き込みストリームを使用してリソースにデータを書き込む非同期操作が閉じられたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、書き込みストリームを使用してリソースにデータを書き込むために使用する非同期操作を閉じるたびにでは発生します。 これらの操作の結果への呼び出しから、 <xref:System.Net.WebClient.OpenWriteTaskAsync%2A> メソッドです。  
  
 <xref:System.Net.WriteStreamClosedEventHandler> はこのイベントのデリゲート。<xref:System.Net.WriteStreamClosedEventArgs> クラスには、イベント データを持つイベント ハンドラーが用意されています。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadFileTaskAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>タスク オブジェクトを使用して非同期操作として、リソースに指定したローカル ファイルをアップロードします。 これらのメソッドでは、呼び出し元のスレッドはブロックされません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="UploadValuesAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された URI で識別されるリソースに指定した名前\/値コレクションをアップロードします。 これらのメソッドでは、呼び出し元のスレッドはブロックされません。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetWebResponse">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した <see cref="T:System.Net.WebResponse" /> の <see cref="T:System.Net.WebRequest" /> を返します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="UploadValuesTaskAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>タスク オブジェクトを使用して非同期操作として指定された URI で識別されるリソースに指定した名前\/値コレクションをアップロードします。 これらのメソッドでは、呼び出し元のスレッドはブロックされません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="OpenWriteAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定されたリソースにデータを書き込むためのストリームを開きます。 これらのメソッドでは、呼び出し元のスレッドはブロックされません。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="UploadDataTaskAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>含むデータ バッファーをアップロード、 <see cref="T:System.Byte" /> タスク オブジェクトを使用して非同期操作として指定された URI の配列。  これらのメソッドでは、呼び出し元のスレッドはブロックされません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="UploadStringTaskAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>タスク オブジェクトを使用して非同期操作として、指定した文字列を指定されたリソースにアップロードします。 これらのメソッドでは、呼び出し元のスレッドはブロックされません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="DownloadFileTaskAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>タスク オブジェクトを使用して非同期操作として、ローカル ファイルに指定したリソースをダウンロードします。 これらのメソッドでは、呼び出し元のスレッドはブロックされません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="DownloadString">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>要求されたリソースとしてのダウンロード、 <see cref="T:System.String" />です。 いずれかとして指定できるは、リソースをダウンロードする <see cref="T:System.String" /> URI を含む、または <see cref="T:System.Uri" />です。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="OpenReadTaskAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>タスク オブジェクトを使用して非同期操作として、指定されたリソースを格納している読み取り可能なストリームを開きます。 これらのメソッドでは、呼び出し元のスレッドはブロックされません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="UploadFileAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定されたリソースに指定したローカル ファイルをアップロードします。 これらのメソッドでは、呼び出し元のスレッドはブロックされません。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="UploadString">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した文字列を指定されたリソースにアップロードします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="DownloadFileAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>非同期操作としてのローカル ファイルに指定したリソースをダウンロードし、タスク オブジェクトを返します。 これらのメソッドでは、呼び出し元のスレッドはブロックされません。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="UploadValues">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した URI をリソースに名前\/値コレクションをアップロードします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="DownloadDataAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>としてリソースをダウンロード、 <see cref="T:System.Byte" /> 非同期操作として指定された URI からの配列。 これらのメソッドでは、呼び出し元のスレッドはブロックされません。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="UploadStringAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した文字列を指定されたリソースにアップロードします。 これらのメソッドでは、呼び出し元のスレッドはブロックされません。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="UploadData">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した URI を持つリソースへのデータ バッファーをアップロードします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="UploadDataAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>URI で識別されるリソースへのデータ バッファーをアップロードします。 このメソッドは、呼び出し元のスレッドをブロックしません。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="OpenWriteTaskAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>タスク オブジェクトを使用して非同期操作として、指定されたリソースにデータを書き込むためのストリームを開きます。 これらのメソッドでは、呼び出し元のスレッドはブロックされません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="UploadFile">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した URI をリソースには、ローカル ファイルをアップロードします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="OpenRead">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した URI をリソースからダウンロードしたデータの読み取り可能なストリームを開きます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="DownloadStringAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>として指定されたリソースをダウンロード、 <see cref="T:System.String" /> または <see cref="T:System.Uri" />です。 これらのメソッドでは、呼び出し元のスレッドはブロックされません。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="DownloadStringTaskAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>としてリソースをダウンロード、 <see cref="T:System.String" /> タスク オブジェクトを使用して非同期操作として指定された URI からです。  これらのメソッドでは、呼び出し元のスレッドはブロックされません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="DownloadFile">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ローカル ファイルには、指定した URI にリソースをダウンロードします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="DownloadDataTaskAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>としてリソースをダウンロード、 <see cref="T:System.Byte" /> タスク オブジェクトを使用して非同期操作として指定された URI からの配列。 これらのメソッドでは、呼び出し元のスレッドはブロックされません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="DownloadData">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>としてリソースをダウンロード、 <see cref="T:System.Byte" /> 指定された URI からの配列。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="OpenReadAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したリソースを格納している読み取り可能なストリームを開きます。 これらのメソッドでは、呼び出し元のスレッドはブロックされません。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="OpenWrite">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した URI を持つリソースへのデータを書き込むためのストリームを開きます。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>