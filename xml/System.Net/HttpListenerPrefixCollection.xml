<Type Name="HttpListenerPrefixCollection" FullName="System.Net.HttpListenerPrefixCollection">
  <TypeSignature Language="C#" Value="public class HttpListenerPrefixCollection : System.Collections.Generic.ICollection&lt;string&gt;, System.Collections.Generic.IEnumerable&lt;string&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HttpListenerPrefixCollection extends System.Object implements class System.Collections.Generic.ICollection`1&lt;string&gt;, class System.Collections.Generic.IEnumerable`1&lt;string&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Net.HttpListenerPrefixCollection" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.HttpListener</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;System.String&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.String&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>用の統一リソース識別子 \(URI\) のプレフィックスを格納するために使用するコレクションを表す <see cref="T:System.Net.HttpListener" /> オブジェクトです。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.HttpListener.Prefixes%2A> プロパティは、このコレクションのインスタンスを返します。  
  
   
  
## 例  
 次のコード例を作成、 <xref:System.Net.HttpListener> し、ユーザーが指定したプレフィックスを追加、 <xref:System.Net.HttpListenerPrefixCollection>です。  
  
 [!code-csharp[Net\_Listener\_Basic\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string uriPrefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(string uriPrefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerPrefixCollection.Add(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uriPrefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uriPrefix">受信要求で比較される URI 情報を識別する <see cref="T:System.String" />。 プレフィックスはスラッシュ \("\/"\) で終わる必要があります。</param>
        <summary>URI \(Uniform Resource Identifier\) プレフィックスをコレクションに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method adds a URI prefix to the set of prefixes managed by the associated <xref:System.Net.HttpListener> object. When checking **parameterReference tag is not supported!!!!**  
 to ensure it is valid, case is ignored.  
  
 A URI prefix string is composed of a scheme \(http or https\), a host, an optional port, and an optional path, for example, "`http://www.contoso.com:8080/customerData``/`". The prefix must be terminated with a forward slash \("\/"\). The <xref:System.Net.HttpListener> with the prefix that most closely matches a requested URI responds to the request. Multiple <xref:System.Net.HttpListener> objects cannot add the same prefix. An <xref:System.Net.HttpListenerException> exception is thrown if an <xref:System.Net.HttpListener> adds a prefix that is already in use.  
  
 When a port is specified, the host element can be replaced with "`*`" to indicate that the <xref:System.Net.HttpListener> accepts requests sent to the port if the requested URI does not match any other prefix. For example, to receive all requests sent to port 8080 when the requested URI is not handled by any other <xref:System.Net.HttpListener>, the prefix is "`http://*:8080``/`". Similarly, to specify that the <xref:System.Net.HttpListener> accepts all requests sent to a port, replace the host element with the "`+`" character, "`https://+:8080`\/". The "`*`" and "`+`" characters can be present in prefixes that include paths.  
  
 Starting with .NET 4.5.3 and Windows 10, wildcard subdomains are supported in URI prefixes that are managed by an <xref:System.Net.HttpListener> object. To specify a wildcard subdomain, use the "\*" character as part of the hostname in a URI prefix: for example, `http://*.foo.com/`, and pass this as the argument to the HttpListenerPrefixCollection.Add method. This will work on .NET 4.5.3 and Windows 10; in earlier versions, this would generate an <xref:System.Net.HttpListenerException>  
  
   
  
## 例  
 The following code example creates an <xref:System.Net.HttpListener> and adds user\-specified prefixes to its <xref:System.Net.HttpListenerPrefixCollection>.  
  
 [!code-csharp[Net\_Listener\_Basic\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="uriPrefix" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="uriPrefix" /> は、http:\/\/ や https:\/\/ スキームを使用しません。 これらのスキームは <see cref="T:System.Net.HttpListener" /> オブジェクトでのみサポートされています。  
  
 または  
  
 <paramref name="uriPrefix" /> は正しい形式の URI プレフィックスではありません。 文字列が "\/" で終わっていることを確認してください。</exception>
        <exception cref="T:System.ObjectDisposedException">このコレクションに関連付けられた <see cref="T:System.Net.HttpListener" /> は終了しています。</exception>
        <exception cref="T:System.Net.HttpListenerException">Windows の関数呼び出しが失敗しました。 例外の <see cref="P:System.Net.HttpListenerException.ErrorCode" /> プロパティを調べて、例外の原因を確認します。 この例外は、別の <see cref="T:System.Net.HttpListener" /> が既にプレフィックス <paramref name="uriPrefix" /> を追加している場合にスローされます。</exception>
        <permission cref="T:System.Net.WebPermission">To accept network connections. Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" /></permission>
        <altmember cref="T:System.Net.HttpListener" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerPrefixCollection.Clear" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コレクションからすべての Uniform Resource Identifier \(URI\) プレフィックスを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを呼び出した後に起動できない場合、関連付けられている <xref:System.Net.HttpListener> 新しいプレフィックスを追加することがなく、このようにしようとする場合、例外がスローされます。  
  
   
  
## 例  
 次のコード例のすべてのプレフィックスを削除する、 <xref:System.Net.HttpListenerPrefixCollection>です。  
  
 [!code-csharp[Net\_Listener\_Basic\#6](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.HttpListenerException">Windows の関数呼び出しが失敗しました。 例外を確認して <see cref="P:System.Net.HttpListenerException.ErrorCode" /> プロパティを例外の原因を特定します。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.HttpListener" /> に関連付けられたコレクションが終了します。</exception>
        <block subset="none" type="usage">
          <para>This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</para>
        </block>
        <altmember cref="T:System.Net.HttpListener" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string uriPrefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(string uriPrefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerPrefixCollection.Contains(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uriPrefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uriPrefix">A <see cref="T:System.String" /> をテストする Uniform Resource Identifier \(URI\) のプレフィックスを格納しています。</param>
        <summary>返します。、 <see cref="T:System.Boolean" /> を指定したプレフィックスが、コレクションに含まれるかどうかを示す値。</summary>
        <returns>
          <see langword="true" /> このコレクションで指定されたプレフィックスが含まれている場合 <paramref name="uriPrefix" />。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定したプレフィックスでは、既存の値を正確に一致する必要があります。  
  
   
  
## 例  
 次のコード例のプレフィックスのコレクションにユーザーが指定したプレフィックスが含まれるかどうかを参照してくださいチェック、 <xref:System.Net.HttpListener>です。  
  
 [!code-csharp[Net\_Listener\_Basic\#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="uriPrefix" /> は <see langword="null" /> です。</exception>
        <altmember cref="T:System.Net.HttpListener" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>内容をコピー、 <see cref="T:System.Net.HttpListenerPrefixCollection" /> 指定した配列にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 配列は、文字列を格納できる必要があり、多次元にすることはできません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Array array, int32 offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerPrefixCollection.CopyTo(System.Array,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">1 次元 <see cref="T:System.Array" /> Uniform Resource Identifier \(URI\) のプレフィックス文字列をこのコレクションを受け取る。</param>
        <param name="offset">コピーの開始位置とする <c>array</c> のインデックス \(0 から始まる\)。</param>
        <summary>内容をコピー、 <see cref="T:System.Net.HttpListenerPrefixCollection" /> 指定した配列にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 配列は、文字列を格納できる必要があり、多次元にすることはできません。  
  
   
  
## 例  
 次のコード例をコピーの接頭番号、 <xref:System.Net.HttpListenerPrefixCollection>です。  
  
 [!code-csharp[Net\_Listener\_Basic\#7](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="array" /> 1 つ以上のディメンションを持ちます。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">このコレクションに格納できる量よりも多くの要素が含まれています <paramref name="array" /> 開始位置として <paramref name="offset" />します。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.HttpListener" /> に関連付けられたコレクションが終了します。</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="array" /> 文字列の値を格納することはできません。</exception>
        <altmember cref="T:System.Net.HttpListener" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (string[] array, int offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(string[] array, int32 offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerPrefixCollection.CopyTo(System.String[],System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.String[]" />
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">このコレクションの統一リソース識別子 \(URI\) のプレフィックス文字列を受け取る 1 つの次元の文字列配列。</param>
        <param name="offset">コピーの開始位置とする <c>array</c> のインデックス \(0 から始まる\)。</param>
        <summary>内容をコピー、 <see cref="T:System.Net.HttpListenerPrefixCollection" /> を指定した文字列配列。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 配列は、文字列を格納できる必要があり、多次元にすることはできません。  
  
   
  
## 例  
 次のコード例をコピーの接頭番号、 [CopyTo メソッド \(String\<xref:System.Net.HttpListenerPrefixCollection>です。  
  
 [!code-csharp[Net\_Listener\_Basic\#7](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="array" /> 1 つ以上のディメンションを持ちます。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">このコレクションに格納できる量よりも多くの要素が含まれています <paramref name="array" /> 開始位置として <paramref name="offset" />します。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.HttpListener" /> に関連付けられたコレクションが終了します。</exception>
        <altmember cref="T:System.Net.HttpListener" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerPrefixCollection.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コレクションに含まれるプレフィックスの数を取得します。</summary>
        <value>
          <see cref="T:System.Int32" /> このコレクション内のプレフィックスの数を格納します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例では、コレクションの中に、プレフィックスが表示されます。  
  
 [!code-csharp[Net\_Listener\_Basic\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;string&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;string&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerPrefixCollection.GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コレクションを反復処理するために使用できるオブジェクトを返します。</summary>
        <returns>実装するオブジェクト、 <see cref="T:System.Collections.IEnumerator" /> インターフェイスし、このコレクション内の文字列へのアクセスを提供します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドによって返されるオブジェクトは最初に、このコレクションの最初の要素の前に位置付けられます。 呼び出す必要があります、 <xref:System.Collections.IEnumerator.MoveNext%2A> メソッドの最初の要素にアクセスできるようにします。 現在の位置にある要素にアクセスするには、呼び出し、 <xref:System.Collections.IEnumerator.Current%2A> プロパティです。  
  
 列挙子の使用中にコレクションを変更しないでください。 列挙子の中にコレクションが変更された場合を使用して、呼び出すことによって、位置を設定しようとすると、 <xref:System.Collections.IEnumerator.MoveNext%2A> または <xref:System.Collections.IEnumerator.Reset%2A> により、 <xref:System.InvalidOperationException>です。  
  
 列挙子の詳細については、ドキュメントを参照して、 <xref:System.Collections.IEnumerator> クラスおよび <xref:System.Collections.IEnumerable.GetEnumerator%2A> メソッドです。  
  
   
  
## 例  
 次のコード例では、コレクションの列挙を示しています。 Visual Basic および c\# の例が、列挙子を取得する代わりにコレクションを列挙する言語固有のステートメントを使用することに注意してください。  
  
 [!code-csharp[Net\_Listener\_Basic\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerPrefixCollection.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コレクションへのアクセスは読み取り専用であるかどうかを示す値を取得します。</summary>
        <value>常に <see langword="false" /> を返します。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerPrefixCollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コレクションへのアクセスが同期されている \(スレッド セーフである\) かどうかを示す値を取得します。</summary>
        <value>このプロパティは常に <see langword="false" /> を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。 コレクションの同期がとられている場合でも、別のスレッドによってそのコレクションを変更できるため、変更の結果として列挙子は例外をスローします。 列挙処理中のスレッドの安全性を確保するには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更に起因する例外をキャッチすることができます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (string uriPrefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(string uriPrefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerPrefixCollection.Remove(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uriPrefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uriPrefix">A <see cref="T:System.String" /> を削除する URI プレフィックスを格納しています。</param>
        <summary>によって処理されるプレフィックスの一覧から、指定した識別子 URI \(Uniform Resource\) を削除、 <see cref="T:System.Net.HttpListener" /> オブジェクトです。</summary>
        <returns>
          <see langword="true" /> 場合、 <paramref name="uriPrefix" /> で見つかりました、 <see cref="T:System.Net.HttpListenerPrefixCollection" /> 削除されているそれ以外の場合と <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 `uriPrefix` は、このメソッドでは、コレクションではなくは何も行われません。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="uriPrefix" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.HttpListenerException">Windows の関数呼び出しが失敗しました。 例外の原因を判断するには、例外のエラー コードを確認します。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.HttpListener" /> に関連付けられたコレクションが終了します。</exception>
        <block subset="none" type="usage">
          <para>This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</para>
        </block>
        <altmember cref="T:System.Net.HttpListener" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerPrefixCollection.System#Collections#IEnumerable#GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コレクションを反復処理するために使用できるオブジェクトを返します。</summary>
        <returns>実装するオブジェクト、 <see cref="T:System.Collections.IEnumerator" /> インターフェイスし、このコレクション内の文字列へのアクセスを提供します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドによって返されるオブジェクトは最初に、このコレクションの最初の要素の前に位置付けられます。 呼び出す必要があります、 <xref:System.Collections.IEnumerator.MoveNext%2A> メソッドの最初の要素にアクセスできるようにします。 現在の位置にある要素にアクセスするには、呼び出し、 <xref:System.Collections.IEnumerator.Current%2A> プロパティです。  
  
 列挙子の使用中にコレクションを変更しないでください。 列挙子の中にコレクションが変更された場合を使用して、呼び出すことによって、位置を設定しようとすると、 <xref:System.Collections.IEnumerator.MoveNext%2A> または <xref:System.Collections.IEnumerator.Reset%2A> により、 <xref:System.InvalidOperationException>です。  
  
 列挙子の詳細については、ドキュメントを参照して、 <xref:System.Collections.IEnumerator> クラスおよび <xref:System.Collections.IEnumerable.GetEnumerator%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
      </Docs>
    </Member>
  </Members>
</Type>