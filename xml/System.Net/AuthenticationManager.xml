<Type Name="AuthenticationManager" FullName="System.Net.AuthenticationManager">
  <TypeSignature Language="C#" Value="public class AuthenticationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AuthenticationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.AuthenticationManager" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.Requests</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>クライアントの認証プロセス中に呼び出される認証モジュールを管理します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.AuthenticationManager> アプリケーションで使用する認証モジュールを管理する静的クラスです。 要求が実行されると保護されたリソース、 <xref:System.Net.AuthenticationManager> 呼び出し、 <xref:System.Net.AuthenticationManager.Authenticate%2A> 取得するメソッド、 <xref:System.Net.Authorization> 以降の要求で使用するインスタンス。  
  
 <xref:System.Net.AuthenticationManager> を呼び出して各登録されている認証モジュールのクエリを実行、 <xref:System.Net.IAuthenticationModule.Authenticate%2A?displayProperty=fullName> 各モジュールのメソッドです。 返す 1 つ目の認証モジュール、 <xref:System.Net.Authorization> のインスタンスが要求の認証に使用します。  
  
 基本認証、ダイジェストを提供するモジュールのネゴシエート、NTLM、および Kerberos 認証の種類に登録されている、 <xref:System.Net.AuthenticationManager> 既定です。 実装する追加の認証モジュール、 <xref:System.Net.IAuthenticationModule> インターフェイスを使用して追加することができます、 <xref:System.Net.AuthenticationManager.Register%2A> メソッドです。 一覧に追加された順序では、認証モジュールが呼び出されます。  
  
> [!NOTE]
>  Kerberos のネゴシエーションと認証の種類が Windows 95\/98 または Windows NT 4.0 でサポートされていません。  
  
   
  
## 例  
 [!code-cpp[System.Net.Authentication\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Authentication/CPP/custombasicauthentication.cpp#1)]
 [!code-csharp[System.Net.Authentication\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Authentication/CS/custombasicauthentication.cs#1)]
 [!code-vb[System.Net.Authentication\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Authentication/VB/custombasicauthentication.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Authenticate">
      <MemberSignature Language="C#" Value="public static System.Net.Authorization Authenticate (string challenge, System.Net.WebRequest request, System.Net.ICredentials credentials);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Authorization Authenticate(string challenge, class System.Net.WebRequest request, class System.Net.ICredentials credentials) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.AuthenticationManager.Authenticate(System.String,System.Net.WebRequest,System.Net.ICredentials)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Authorization</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="challenge" Type="System.String" />
        <Parameter Name="request" Type="System.Net.WebRequest" />
        <Parameter Name="credentials" Type="System.Net.ICredentials" />
      </Parameters>
      <Docs>
        <param name="challenge">インターネット リソースから返された課題です。</param>
        <param name="request">
          <see cref="T:System.Net.WebRequest" /> は認証チャレンジを開始します。</param>
        <param name="credentials">
          <see cref="T:System.Net.ICredentials" /> この要求に関連付けられています。</param>
        <summary>認証要求に応答できる最初のモジュールを検索するには、各登録されている認証モジュールが呼び出されます。</summary>
        <returns>インスタンス、 <see cref="T:System.Net.Authorization" /> 認証の試行の結果を含むクラスです。 このメソッドが戻るかどうかは、チャレンジに応答する認証モジュールがない、 <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.AuthenticationManager.Authenticate%2A> メソッドの呼び出し、 <xref:System.Net.IAuthenticationModule.Authenticate%2A?displayProperty=fullName> メソッドで、モジュールのいずれかが応答するまでは、各登録されている認証モジュールを <xref:System.Net.Authorization> インスタンス。  
  
 最初の <xref:System.Net.Authorization> 返されたインスタンスは、要求を認証に使用します。 認証モジュールが、要求を認証しない場合、 <xref:System.Net.AuthenticationManager.Authenticate%2A> メソッドが返す `null`します。  
  
 認証モジュールが呼び出されると登録されている順序、 <xref:System.Net.AuthenticationManager>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="challenge" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="request" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="credentials" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="CredentialPolicy">
      <MemberSignature Language="C#" Value="public static System.Net.ICredentialPolicy CredentialPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Net.ICredentialPolicy CredentialPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Net.AuthenticationManager.CredentialPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.ICredentialPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を使用して行われるリソースの要求に使用する資格情報ポリシー、 <see cref="T:System.Net.HttpWebRequest" /> クラスです。</summary>
        <value>実装するオブジェクト、 <see cref="T:System.Net.ICredentialPolicy" /> 資格情報が要求と共に送信されるかどうかを決定するインターフェイスです。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 資格情報のポリシーでは、Web ページのコンテンツなどのネットワーク リソースに対する要求を送信するときに、資格情報を送信するかどうかを決定します。 資格情報が送信された場合、クライアント認証を必要とするサーバーは、クライアントの資格情報が必要であることを示す応答を送信する代わりに、要求が受信したときに、クライアントの認証に試行できます。 これによりサーバーへのラウンド トリップを削減できますが、これが資格情報をネットワーク経由で送信する際に固有のセキュリティ リスクに対する分散する必要があります。 移行先サーバーにクライアント認証が必要としない場合は、資格情報を送信することをお勧めします。  
  
 資格情報を指定するか、使用する要求に対してのみ呼び出される資格情報ポリシー、 <xref:System.Net.WebProxy> 資格情報を指定するオブジェクト。  
  
   
  
## 例  
 次のコード例では、資格情報のポリシー設定を示しています。  
  
 [!code-cpp[NclCredPolicy\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCredPolicy/CPP/NCLCredPolicy.cpp#2)]
 [!code-csharp[NclCredPolicy\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCredPolicy/CS/websample.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomTargetNameDictionary">
      <MemberSignature Language="C#" Value="public static System.Collections.Specialized.StringDictionary CustomTargetNameDictionary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Specialized.StringDictionary CustomTargetNameDictionary" />
      <MemberSignature Language="DocId" Value="P:System.Net.AuthenticationManager.CustomTargetNameDictionary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Kerberos 認証を使用して行われる要求の中にホストを識別するために使用されるサービス プリンシパル名 \(Spn\) を含んでいるディクショナリを取得 <see cref="T:System.Net.WebRequest" /> とその派生クラスです。</summary>
        <value>書き込み可能な <see cref="T:System.Collections.Specialized.StringDictionary" /> ホスト情報のキーで構成されるは、SPN の値を含みます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 SPN は、クライアントを一意に識別するサービスまたは相互認証のためのサーバー上のアプリケーションのインスタンス名です。 既定では、相互認証が要求され、設定して要求できます <xref:System.Net.WebRequest.AuthenticationLevel%2A?displayProperty=fullName> に <xref:System.Net.Security.AuthenticationLevel.MutualAuthRequired> を要求します。  
  
 ときに、 <xref:System.Net.WebRequest> クライアントが、変換先を指定する必要があります、SPN の相互認証が必要です。 SPN がわかっている場合を追加、 <xref:System.Net.AuthenticationManager.CustomTargetNameDictionary%2A> から要求を送信します。 このディクショナリに SPN の情報を追加していない場合、 <xref:System.Net.AuthenticationManager> を使用して、 <xref:System.Net.WebRequest.RequestUri%2A> 最も可能性の高い SPN を作成するメソッドただし、これは、計算値であり適切でない可能性があります。 相互認証が試行され、失敗した場合は、計算の SPN を決定するディクショナリを確認できます。 コンソール アプリケーションは、認証プロトコルが相互認証をサポートしていない場合、ディクショナリに、\[SPN は入力されません。  
  
 このディクショナリに SPN の値を追加するには、使用、 <xref:System.Uri.AbsoluteUri%2A> の <xref:System.Net.WebRequest.RequestUri%2A> キーとして。 キーが含まれるように切り捨てが内部的には、 <xref:System.Uri.Scheme%2A>, 、<xref:System.Uri.Host%2A>, 、および <xref:System.Uri.Port%2A> 場合は、既定のポートではありません。  
  
> [!NOTE]
>  メソッドおよびプロパティへのアクセス、 <xref:System.Net.AuthenticationManager.CustomTargetNameDictionary%2A> が必要です無制限 <xref:System.Net.WebPermission>します。  
  
> [!NOTE]
>  プロキシ経由の Kerberos 認証が実行されると、プロキシと最終的なホスト名の両方を SPN に解決する必要があります。 プロキシの名前解決は、タイムアウトによって保護されています。 SPN を最終的なホスト名の解決に DNS 参照が必要ですし、この操作に直接関連付けられているタイムアウトが存在しません。 そのため同期操作は、タイムアウトを長くかかる場合があります。 この問題を解決するには、SPN キャッシュに対して要求を行う前に、最終的なホストの URI プレフィックスを追加します。  
  
 Version 3.5 SP1 NTLM \(NT LAN Manager\) 認証での SPN で要求の URL で使用される既定値は、ホスト名を指定するようになりました交換するときに、 <xref:System.Net.AuthenticationManager.CustomTargetNameDictionary%2A> プロパティが設定されていません。 要求 URL で使用するホスト名がで指定されたホスト ヘッダーを異なる可能性があります、 <xref:System.Net.HttpRequestHeader?displayProperty=fullName> クライアント要求にします。 要求 URL で使用するホスト名は、サーバーの実際のホスト名、サーバー、コンピューターの IP アドレス、またはループバック アドレスのコンピューター名を異なる可能性があります。 このような場合は、Windows には、認証要求は失敗します。 問題に対処するには、ホスト名が使用される Windows に通知する必要があります \("contoso"など\) の要求が実際には、ローカル コンピューターの代替名をクライアントに要求の URL をします。  
  
   
  
## 例  
 内容を表示するコード例を次に示します、 <xref:System.Net.AuthenticationManager.CustomTargetNameDictionary%2A>です。  
  
 [!code-cpp[NclCredPolicy\#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCredPolicy/CPP/NCLCredPolicy.cpp#5)]
 [!code-csharp[NclCredPolicy\#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCredPolicy/CS/websample.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreAuthenticate">
      <MemberSignature Language="C#" Value="public static System.Net.Authorization PreAuthenticate (System.Net.WebRequest request, System.Net.ICredentials credentials);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Authorization PreAuthenticate(class System.Net.WebRequest request, class System.Net.ICredentials credentials) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.AuthenticationManager.PreAuthenticate(System.Net.WebRequest,System.Net.ICredentials)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Authorization</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.WebRequest" />
        <Parameter Name="credentials" Type="System.Net.ICredentials" />
      </Parameters>
      <Docs>
        <param name="request">A <see cref="T:System.Net.WebRequest" /> インターネット リソースにします。</param>
        <param name="credentials">
          <see cref="T:System.Net.ICredentials" /> 要求に関連付けられています。</param>
        <summary>事前認証要求を行います。</summary>
        <returns>インスタンス、 <see cref="T:System.Net.Authorization" /> クラスの事前認証済みでない場合は、要求が表示できる場合 <see langword="null" />します。<paramref name="credentials" /> が <see langword="null" /> の場合、このメソッドは <see langword="null" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 認証モジュールが、要求を事前認証できる場合、 <xref:System.Net.AuthenticationManager.PreAuthenticate%2A> メソッドは、認証のインスタンスを返し、チャレンジを発行するためのリソースを待機する代わりに、プリエンプティブ サーバーに認証情報を送信します。 この動作が RFC 2617 のセクション 3.3 で説明されている \(HTTP 認証: Basic and Digest アクセス Authentication\)。 事前認証をサポートする認証モジュールでは、認証チャレンジから生じる余分なラウンド トリップを回避することで、サーバーの効率を向上させるためにクライアントを許可します。  
  
 事前認証できる認証モジュールを要求セット、 <xref:System.Net.IAuthenticationModule.CanPreAuthenticate%2A?displayProperty=fullName> プロパティを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="request" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static void Register (System.Net.IAuthenticationModule authenticationModule);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Register(class System.Net.IAuthenticationModule authenticationModule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.AuthenticationManager.Register(System.Net.IAuthenticationModule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authenticationModule" Type="System.Net.IAuthenticationModule" />
      </Parameters>
      <Docs>
        <param name="authenticationModule">
          <see cref="T:System.Net.IAuthenticationModule" /> 認証マネージャーに登録します。</param>
        <summary>認証マネージャーでの認証モジュールを登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.AuthenticationManager.Register%2A> メソッドによって呼び出されるモジュールの一覧の最後に認証モジュールを追加する、 <xref:System.Net.AuthenticationManager.Authenticate%2A> メソッドです。 一覧に追加された順序では、認証モジュールが呼び出されます。 場合では、同じモジュール <xref:System.Net.IAuthenticationModule.AuthenticationType%2A> は既に登録されている、このメソッドは登録されているモジュールを削除し、追加 `authenticationModule` 、リストの末尾にします。  
  
   
  
## 例  
 次の例は、認証マネージャーでの認証モジュールを登録します。 完全な例を参照してください、 <xref:System.Net.AuthenticationManager> クラスです。  
  
 [!code-cpp[System.Net.Sockets.Authentication\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Authentication/CPP/custombasicauthentication.cpp#2)]
 [!code-csharp[System.Net.Sockets.Authentication\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Authentication/CS/custombasicauthentication.cs#2)]
 [!code-vb[System.Net.Sockets.Authentication\#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.Authentication/VB/custombasicauthentication.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="authenticationModule" /> は <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for executing unmanaged code. Associated enumeration: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="RegisteredModules">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerator RegisteredModules { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.IEnumerator RegisteredModules" />
      <MemberSignature Language="DocId" Value="P:System.Net.AuthenticationManager.RegisteredModules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>認証マネージャーに登録されている認証モジュールの一覧を取得します。</summary>
        <value>
          <see cref="T:System.Collections.IEnumerator" /> 読み取られる登録済みの認証モジュールをできるようにします。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.AuthenticationManager.RegisteredModules%2A> プロパティでは、 <xref:System.Collections.IEnumerator> インスタンスの一覧をできるようにするには、読み取られる認証モジュールが登録されています。<xref:System.Net.AuthenticationManager.Register%2A> メソッドは、一覧にモジュールを追加し、 <xref:System.Net.AuthenticationManager.Unregister%2A> メソッドは、そこからモジュールを削除します。  
  
   
  
## 例  
 次の例では、 <xref:System.Net.AuthenticationManager.RegisteredModules%2A> 認証マネージャーに登録されている認証モジュールの一覧を取得するプロパティです。 完全な例を参照してください、 <xref:System.Net.AuthenticationManager> クラスです。  
  
 [!code-cpp[System.Net.Authentication\#8](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Authentication/CPP/custombasicauthentication.cpp#8)]
 [!code-csharp[System.Net.Authentication\#8](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Authentication/CS/custombasicauthentication.cs#8)]
 [!code-vb[System.Net.Authentication\#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Authentication/VB/custombasicauthentication.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unregister">
      <MemberSignature Language="C#" Value="public static void Unregister (System.Net.IAuthenticationModule authenticationModule);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unregister(class System.Net.IAuthenticationModule authenticationModule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.AuthenticationManager.Unregister(System.Net.IAuthenticationModule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authenticationModule" Type="System.Net.IAuthenticationModule" />
      </Parameters>
      <Docs>
        <param name="authenticationModule">
          <see cref="T:System.Net.IAuthenticationModule" /> 登録されているモジュールの一覧から削除します。</param>
        <summary>登録されているモジュールの一覧から、指定した認証モジュールを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.AuthenticationManager.Unregister%2A> メソッド呼び出される認証モジュールの一覧から、指定した認証モジュールを削除する、 <xref:System.Net.AuthenticationManager.Authenticate%2A> メソッドです。 モジュールを使用してリストに追加する必要があります、 <xref:System.Net.AuthenticationManager.Register%2A> メソッドの一覧から削除する前にします。  
  
   
  
## 例  
 次の例では、 <xref:System.Net.AuthenticationManager.Unregister%2A> 登録されているモジュールの一覧から、指定した認証モジュールを削除する方法です。 完全な例を参照してください、 <xref:System.Net.AuthenticationManager> クラスです。  
  
 [!code-cpp[System.Net.Sockets.Authentication\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Authentication/CPP/custombasicauthentication.cpp#2)]
 [!code-csharp[System.Net.Sockets.Authentication\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Authentication/CS/custombasicauthentication.cs#2)]
 [!code-vb[System.Net.Sockets.Authentication\#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.Authentication/VB/custombasicauthentication.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="authenticationModule" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">指定した <see cref="T:System.Net.IAuthenticationModule" /> が登録されていません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for executing unmanaged code. Associated enumeration: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="Unregister">
      <MemberSignature Language="C#" Value="public static void Unregister (string authenticationScheme);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unregister(string authenticationScheme) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.AuthenticationManager.Unregister(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authenticationScheme" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="authenticationScheme">削除するモジュールの認証スキームです。</param>
        <summary>登録されているモジュールの一覧から、指定された認証方式の認証モジュールを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.AuthenticationManager.Unregister%2A> メソッド呼び出される認証モジュールの一覧から指定された認証方式で認証モジュールを削除する、 <xref:System.Net.AuthenticationManager.Authenticate%2A> メソッドです。 モジュールを使用してリストに追加する必要があります、 <xref:System.Net.AuthenticationManager.Register%2A> メソッドの一覧から削除する前にします。  
  
   
  
## 例  
 次の例では、 <xref:System.Net.AuthenticationManager.Unregister%2A> 登録されているモジュールの一覧から指定された認証方式で認証モジュールを削除する方法です。  
  
 [!code-cpp[AuthenticationManager\_UnRegister2\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/AuthenticationManager_UnRegister2/CPP/authenticationmanager_unregister2.cpp#2)]
 [!code-csharp[AuthenticationManager\_UnRegister2\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/AuthenticationManager_UnRegister2/CS/authenticationmanager_unregister2.cs#2)]
 [!code-vb[AuthenticationManager\_UnRegister2\#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/AuthenticationManager_UnRegister2/VB/authenticationmanager_unregister2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="authenticationScheme" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">この認証方式は、モジュールが登録されていません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for executing unmanaged code. Associated enumeration: <see cref="T:System.Security.Permissions.SecurityPermissionFlag" />.</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Unregister">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>登録されているモジュールの一覧からの認証モジュールを削除します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>