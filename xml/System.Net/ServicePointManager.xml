<Type Name="ServicePointManager" FullName="System.Net.ServicePointManager">
  <TypeSignature Language="C#" Value="public class ServicePointManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ServicePointManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.ServicePointManager" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.ServicePoint</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see cref="T:System.Net.ServicePoint" /> オブジェクトのコレクションを管理します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.ServicePointManager>作成、保守、およびのインスタンスを削除するための静的クラスには、<xref:System.Net.ServicePoint>クラスです。  
  
 アプリケーションがインターネット リソースの識別子 URI \(Uniform Resource\) への接続を要求するときに経由、<xref:System.Net.ServicePointManager>オブジェクト、<xref:System.Net.ServicePointManager>が返されます、<xref:System.Net.ServicePoint>スキーム URI で識別される、ホストの接続情報を格納しているオブジェクト。 既に存在する場合<xref:System.Net.ServicePoint>そのホストおよびパーティション構成のオブジェクト、<xref:System.Net.ServicePointManager>既存のオブジェクトを返します<xref:System.Net.ServicePoint>オブジェクト。 それ以外の場合、<xref:System.Net.ServicePointManager>新しいオブジェクトを作成<xref:System.Net.ServicePoint>オブジェクト。  
  
 .NET Framework 4.6 には、安全性の低い暗号およびハッシュ アルゴリズムの接続をブロックする新しいセキュリティ機能が含まれています。 HttpClient や HttpWebRequest を FTPClient を SmtpClient を SslStream などなどの Api 経由の TLS と SSL を使用して、.NET Framework 4.6 を対象とするアプリケーションでは、既定でセキュリティが強化された動作を取得します。  
  
 開発者は、既存 SSL3 サービスまたは TLS で RC4 サービスと相互運用性を維持するために、この動作を除外する必要あります。[This article](https://support.microsoft.com/kb/3069494)新しい動作を無効にするように、コードを変更する方法について説明します。  
  
   
  
## 例  
 次のコード例を作成、 <xref:System.Net.ServicePoint> URI www.contoso.com への接続オブジェクトです。  
  
 [!code-cpp[Classic ServicePoint Example\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic ServicePoint Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ServicePoint Example\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic ServicePoint Example/CS/source.cs#1)]
 [!code-vb[Classic ServicePoint Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic ServicePoint Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Net.ServicePoint" />
  </Docs>
  <Members>
    <Member MemberName="CertificatePolicy">
      <MemberSignature Language="C#" Value="public static System.Net.ICertificatePolicy CertificatePolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Net.ICertificatePolicy CertificatePolicy" />
      <MemberSignature Language="DocId" Value="P:System.Net.ServicePointManager.CertificatePolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use ServerCertificateValidationCallback instead", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.ICertificatePolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サーバーの証明書ポリシーを取得または設定します。</summary>
        <value>
          <see cref="T:System.Net.ICertificatePolicy" /> インターフェイスを実装するオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 When the <xref:System.Net.ServicePointManager.CertificatePolicy%2A> property is set to an <xref:System.Net.ICertificatePolicy> interface object, the <xref:System.Net.ServicePointManager> object uses the certificate policy defined in that instance instead of the default certificate policy.  
  
 The default certificate policy allows valid certificates and valid certificates that have expired.  
  
   
  
## 例  
 The following code example shows how to catch a certificate policy exception for a custom certificate policy. It assumes that the certificate policy object has been defined, that the Uniform Resource Identifier \(URI\) for the Web resource is contained in the variable `myUri`, and that there is a method named `ProcessResponse` that performs the work of the application.  
  
 [!code-cpp[Classic ServicePointManager.CertificatePolicy Example\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic ServicePointManager.CertificatePolicy Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ServicePointManager.CertificatePolicy Example\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic ServicePointManager.CertificatePolicy Example/CS/source.cs#1)]
 [!code-vb[Classic ServicePointManager.CertificatePolicy Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic ServicePointManager.CertificatePolicy Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">To set the <see cref="P:System.Net.ServicePointManager.CertificatePolicy" /> property. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="T:System.Net.ServicePoint" />
        <altmember cref="T:System.Security.Permissions.SecurityPermission" />
      </Docs>
    </Member>
    <Member MemberName="CheckCertificateRevocationList">
      <MemberSignature Language="C#" Value="public static bool CheckCertificateRevocationList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CheckCertificateRevocationList" />
      <MemberSignature Language="DocId" Value="P:System.Net.ServicePointManager.CheckCertificateRevocationList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.ServicePoint</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("CRL checks not implemented")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>証明書が証明機関の失効リストに対して照合されるかどうかを示す <see cref="T:System.Boolean" /> 値を取得または設定します。</summary>
        <value>証明書失効リストが照合される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 When the <xref:System.Net.ServicePointManager.CheckCertificateRevocationList%2A> is **languageKeyword tag is not supported!!!!**  
, the certificate is checked against the certificate authority revocation list, as part of the certificate validation process. Its default value is **languageKeyword tag is not supported!!!!**  
.  
  
   
  
## 例  
 The following code example sets this property.  
  
 [!code-cpp[System.Net.ServicePoint\#10](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.ServicePoint/CPP/servicepoint.cpp#10)]
 [!code-csharp[System.Net.ServicePoint\#10](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.ServicePoint/CS/servicepoint.cs#10)]
 [!code-vb[System.Net.ServicePoint\#10](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.ServicePoint/VB/servicepoint.vb#10)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">To set this property. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="T:System.Net.ServicePoint" />
        <altmember cref="T:System.Security.Permissions.SecurityPermission" />
      </Docs>
    </Member>
    <Member MemberName="ClientCipherSuitesCallback">
      <MemberSignature Language="C#" Value="public static System.Net.CipherSuitesCallback ClientCipherSuitesCallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Net.CipherSuitesCallback ClientCipherSuitesCallback" />
      <MemberSignature Language="DocId" Value="P:System.Net.ServicePointManager.ClientCipherSuitesCallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API is no longer supported.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.CipherSuitesCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultConnectionLimit">
      <MemberSignature Language="C#" Value="public static int DefaultConnectionLimit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 DefaultConnectionLimit" />
      <MemberSignature Language="DocId" Value="P:System.Net.ServicePointManager.DefaultConnectionLimit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.ServicePoint</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Net.ServicePoint" /> オブジェクトで許可される同時接続の最大数を取得または設定します。</summary>
        <value>
          <see cref="T:System.Net.ServicePoint" /> オブジェクトで許可されている同時接続の最大数。 既定値は 2 です。 アプリが ASP.NET ホストとして実行されている場合、autoConfig プロパティが <see langword="true" /> に設定されていると、構成ファイルからこのプロパティの値を変更することはできません。 ただし、autoConfig プロパティが <see langword="true" /> であれば、プログラムで値を変更できます。 AppDomain の読み込み時に、目的の値を 1 回だけ設定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Net.ServicePointManager.DefaultConnectionLimit%2A> property sets the default maximum number of concurrent connections that the <xref:System.Net.ServicePointManager> object assigns to the <xref:System.Net.ServicePoint.ConnectionLimit%2A> property when creating <xref:System.Net.ServicePoint> objects.  
  
 Changing the <xref:System.Net.ServicePointManager.DefaultConnectionLimit%2A> property has no effect on existing <xref:System.Net.ServicePoint> objects; it affects only <xref:System.Net.ServicePoint> objects that are initialized after the change. If the value of this property has not been set either directly or through configuration, the value defaults to the constant <xref:System.Net.ServicePointManager.DefaultPersistentConnectionLimit>.  
  
> [!NOTE]
>  Any changes to the <xref:System.Net.ServicePointManager.DefaultConnectionLimit%2A> property affect both HTTP 1.0 and HTTP 1.1 connections. It is not possible to separately alter the connection limit for HTTP 1.0 and HTTP 1.1 protocols. When used in the server environment \(ASP.NET\) <xref:System.Net.ServicePointManager.DefaultConnectionLimit%2A> defaults to higher number of connections, which is 10.  
  
   
  
## 例  
 The following code example sets this property.  
  
 [!code-cpp[System.Net.ServicePoint\#10](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.ServicePoint/CPP/servicepoint.cpp#10)]
 [!code-csharp[System.Net.ServicePoint\#10](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.ServicePoint/CS/servicepoint.cs#10)]
 [!code-vb[System.Net.ServicePoint\#10](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.ServicePoint/VB/servicepoint.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.Net.ServicePointManager.DefaultConnectionLimit" /> が 0 以下です。</exception>
        <permission cref="T:System.Net.WebPermission">for unrestricted Web permissions. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Net.ServicePoint" />
        <altmember cref="T:System.Net.WebPermission" />
      </Docs>
    </Member>
    <Member MemberName="DefaultNonPersistentConnectionLimit">
      <MemberSignature Language="C#" Value="public const int DefaultNonPersistentConnectionLimit = 4;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 DefaultNonPersistentConnectionLimit = (4)" />
      <MemberSignature Language="DocId" Value="F:System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.ServicePoint</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>HTTP\/1.0 以降のサーバーに接続される <see cref="T:System.Net.ServicePoint" /> オブジェクトで許可する非永続的な接続の既定の数 \(4\)。 このフィールドは定数ですが、.NET Framework 2.0 では使用されなくなりました。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultPersistentConnectionLimit">
      <MemberSignature Language="C#" Value="public const int DefaultPersistentConnectionLimit = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 DefaultPersistentConnectionLimit = (2)" />
      <MemberSignature Language="DocId" Value="F:System.Net.ServicePointManager.DefaultPersistentConnectionLimit" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.ServicePoint</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>HTTP\/1.1 以降のサーバーに接続される <see cref="T:System.Net.ServicePoint" /> オブジェクトで許可する永続的な接続の既定の数 \(2\)。 このフィールドは定数であり、<see cref="P:System.Net.ServicePointManager.DefaultConnectionLimit" /> プロパティの値が直接にも構成によっても設定されていない場合に <see cref="P:System.Net.ServicePointManager.DefaultConnectionLimit" /> プロパティを初期化するために使用されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 The following code example sets the <xref:System.Net.ServicePointManager.DefaultConnectionLimit%2A> property using this field.  
  
 [!code-cpp[System.Net.ServicePoint\#10](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.ServicePoint/CPP/servicepoint.cpp#10)]
 [!code-csharp[System.Net.ServicePoint\#10](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.ServicePoint/CS/servicepoint.cs#10)]
 [!code-vb[System.Net.ServicePoint\#10](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.ServicePoint/VB/servicepoint.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DnsRefreshTimeout">
      <MemberSignature Language="C#" Value="public static int DnsRefreshTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 DnsRefreshTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.ServicePointManager.DnsRefreshTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.ServicePoint</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ドメイン ネーム サービス \(DNS: Domain Name Service\) 解決が有効と見なされる期間を示す値を取得または設定します。</summary>
        <value>タイムアウト値 \(ミリ秒\)。 値が \-1 の場合は、タイムアウト期間が無限であることを示します。 既定値は 120,000 ミリ秒 \(2 分\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 The following code example sets this property.  
  
 [!code-cpp[System.Net.ServicePointWhidbey\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.ServicePointWhidbey/cpp/servicepoint.cpp#1)]
 [!code-csharp[System.Net.ServicePointWhidbey\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.ServicePointWhidbey/CS/servicepoint.cs#1)]
 [!code-vb[System.Net.ServicePointWhidbey\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.ServicePointWhidbey/VB/servicepoint.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.ServicePoint" />
      </Docs>
    </Member>
    <Member MemberName="EnableDnsRoundRobin">
      <MemberSignature Language="C#" Value="public static bool EnableDnsRoundRobin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool EnableDnsRoundRobin" />
      <MemberSignature Language="DocId" Value="P:System.Net.ServicePointManager.EnableDnsRoundRobin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.ServicePoint</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ドメイン ネーム サービス \(DNS\) 解決で、適用可能なインターネット プロトコル \(IP\) アドレスが順番に使用されるかどうかを示す値を取得または設定します。</summary>
        <value>DNS 解決によって常に特定のホストの最初の IP アドレスが返される場合は <see langword="false" />。それ以外の場合は <see langword="true" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 When more than one IP address is associated with a host name, a DNS resolution normally returns only the first IP address. If you set this property to **languageKeyword tag is not supported!!!!**  
, then subsequent DNS resolutions will cycle through all available IP addresses for a particular host. This option is useful when a service uses DNS as a load balancing mechanism between servers or server clusters.  
  
   
  
## 例  
 The following code example sets this property.  
  
 [!code-cpp[System.Net.ServicePointWhidbey\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.ServicePointWhidbey/cpp/servicepoint.cpp#1)]
 [!code-csharp[System.Net.ServicePointWhidbey\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.ServicePointWhidbey/CS/servicepoint.cs#1)]
 [!code-vb[System.Net.ServicePointWhidbey\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.ServicePointWhidbey/VB/servicepoint.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.ServicePoint" />
      </Docs>
    </Member>
    <Member MemberName="EncryptionPolicy">
      <MemberSignature Language="C#" Value="public static System.Net.Security.EncryptionPolicy EncryptionPolicy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Net.Security.EncryptionPolicy EncryptionPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Net.ServicePointManager.EncryptionPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.ServicePoint</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Always returns EncryptionPolicy.RequireEncryption.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Security.EncryptionPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Net.ServicePointManager" /> インスタンスの <see cref="T:System.Net.Security.EncryptionPolicy" /> を取得します。</summary>
        <value>この <see cref="T:System.Net.ServicePointManager" /> のインスタンスに使用する暗号化ポリシー。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 構成ファイルで値が指定されていない場合、 <xref:System.Net.ServicePointManager.EncryptionPolicy%2A> プロパティの既定値 <xref:System.Net.Security.EncryptionPolicy.RequireEncryption?displayProperty=fullName>です。 これが、これで、SSL\/TLS セッションに適用される <xref:System.Net.ServicePointManager> インスタンス。  
  
 暗号化ポリシーを設定すると Null 暗号の使用する必要が <xref:System.Net.Security.EncryptionPolicy.NoEncryption?displayProperty=fullName>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.ServicePoint" />
        <altmember cref="P:System.Net.Configuration.ServicePointManagerElement.EncryptionPolicy" />
        <altmember cref="T:System.Net.Security.EncryptionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="Expect100Continue">
      <MemberSignature Language="C#" Value="public static bool Expect100Continue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool Expect100Continue" />
      <MemberSignature Language="DocId" Value="P:System.Net.ServicePointManager.Expect100Continue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.ServicePoint</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>100\-Continue 動作を使用するかどうかを決定する <see cref="T:System.Boolean" /> 値を取得または設定します。</summary>
        <value>100\-Continue 動作を有効にする場合は <see langword="true" />。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 When this property is set to **languageKeyword tag is not supported!!!!**  
, 100\-Continue behavior is used. Client requests that use the **languageKeyword tag is not supported!!!!**  
 and **languageKeyword tag is not supported!!!!**  
 methods will add an Expect header to the request if the <xref:System.Net.ServicePointManager.Expect100Continue%2A> property is **languageKeyword tag is not supported!!!!**  
 and <xref:System.Net.HttpWebRequest.ContentLength%2A> property is greater than zero or the <xref:System.Net.HttpWebRequest.SendChunked%2A> property is true. The client will expect to receive a 100\-Continue response from the server to indicate that the client should send the data to be posted. This mechanism allows clients to avoid sending large amounts of data over the network when the server, based on the request headers, intends to reject the request.  
  
 For example, assume the <xref:System.Net.ServicePointManager.Expect100Continue%2A> property is **languageKeyword tag is not supported!!!!**  
. When the request is sent to the server, it includes the data. If, after reading the request headers, the server requires authentication and must send a 401 response, the client must resend the data with proper authentication headers.  
  
 If this property is **languageKeyword tag is not supported!!!!**  
, the request headers are sent to the server. If the server has not rejected the request, it sends a 100\-Continue response signaling that the data can be transmitted. If, as in the preceding example, the server requires authentication, it sends the 401 response and the client has not unnecessarily transmitted the data.  
  
 Changing the value of this property does not affect existing <xref:System.Net.ServicePoint> objects. Only new <xref:System.Net.ServicePoint> objects created after the change are affected.  
  
 The 100\-Continue behavior is not used for HTTP 1.0 requests even if this property is set to **languageKeyword tag is not supported!!!!**  
.  
  
 The Expect 100\-Continue behavior is fully described in IETF RFC 2616 Section 10.1.1.  
  
   
  
## 例  
 The following code example sets this property.  
  
 [!code-cpp[System.Net.ServicePoint\#10](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.ServicePoint/CPP/servicepoint.cpp#10)]
 [!code-csharp[System.Net.ServicePoint\#10](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.ServicePoint/CS/servicepoint.cs#10)]
 [!code-vb[System.Net.ServicePoint\#10](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.ServicePoint/VB/servicepoint.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.ServicePoint" />
      </Docs>
    </Member>
    <Member MemberName="FindServicePoint">
      <MemberSignature Language="C#" Value="public static System.Net.ServicePoint FindServicePoint (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.ServicePoint FindServicePoint(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.ServicePointManager.FindServicePoint(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.ServicePoint</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.ServicePoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">接続先のインターネット リソースの <see cref="T:System.Uri" /> オブジェクト。</param>
        <summary>指定した <see cref="T:System.Uri" /> オブジェクトとの通信を管理するには、既存の <see cref="T:System.Net.ServicePoint" /> オブジェクトを検出するか、新しい <see cref="T:System.Net.ServicePoint" /> オブジェクトを作成します。</summary>
        <returns>要求を処理するための通信を管理する <see cref="T:System.Net.ServicePoint" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.ServicePointManager.FindServicePoint%2A> メソッドが返される、 <xref:System.Net.ServicePoint> 、指定されたインターネット ホスト名に関連付けられているオブジェクト。 ない場合 <xref:System.Net.ServicePoint> 、そのホスト オブジェクトが存在する、 <xref:System.Net.ServicePointManager> オブジェクトでは、1 つを作成します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">最大数 <see cref="T:System.Net.ServicePoint" /> で定義されたオブジェクト <see cref="P:System.Net.ServicePointManager.MaxServicePoints" /> に達しています。</exception>
        <altmember cref="T:System.Net.ServicePoint" />
      </Docs>
    </Member>
    <Member MemberName="FindServicePoint">
      <MemberSignature Language="C#" Value="public static System.Net.ServicePoint FindServicePoint (string uriString, System.Net.IWebProxy proxy);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.ServicePoint FindServicePoint(string uriString, class System.Net.IWebProxy proxy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.ServicePointManager.FindServicePoint(System.String,System.Net.IWebProxy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.ServicePoint</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.ServicePoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uriString" Type="System.String" />
        <Parameter Name="proxy" Type="System.Net.IWebProxy" />
      </Parameters>
      <Docs>
        <param name="uriString">接続先のインターネット リソースの URI。</param>
        <param name="proxy">この要求に対して使用するプロキシ データ。</param>
        <summary>指定した URI \(Uniform Resource Identifier\) との通信を管理するには、既存の <see cref="T:System.Net.ServicePoint" /> オブジェクトを検出するか、新しい <see cref="T:System.Net.ServicePoint" /> オブジェクトを作成します。</summary>
        <returns>要求を処理するための通信を管理する <see cref="T:System.Net.ServicePoint" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.ServicePointManager.FindServicePoint%2A> メソッドが返される、 <xref:System.Net.ServicePoint> 、指定されたインターネット ホスト名に関連付けられているオブジェクト。 ない場合 <xref:System.Net.ServicePoint> 、そのホスト オブジェクトが存在する、 <xref:System.Net.ServicePointManager> オブジェクトでは、1 つを作成します。  
  
   
  
## 例  
 次のコード例にアクセスするには、このメソッドを呼び出す方法を示します、 <xref:System.Net.ServicePoint> オブジェクトです。  
  
 [!code-cpp[System.Net.ServicePoint\#7](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.ServicePoint/CPP/servicepoint.cpp#7)]
 [!code-csharp[System.Net.ServicePoint\#7](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.ServicePoint/CS/servicepoint.cs#7)]
 [!code-vb[System.Net.ServicePoint\#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.ServicePoint/VB/servicepoint.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UriFormatException">URI で指定 <paramref name="uriString" /> が無効です。</exception>
        <exception cref="T:System.InvalidOperationException">最大数 <see cref="T:System.Net.ServicePoint" /> で定義されたオブジェクト <see cref="P:System.Net.ServicePointManager.MaxServicePoints" /> に達しています。</exception>
        <altmember cref="T:System.Uri" />
        <altmember cref="T:System.Net.ServicePoint" />
      </Docs>
    </Member>
    <Member MemberName="FindServicePoint">
      <MemberSignature Language="C#" Value="public static System.Net.ServicePoint FindServicePoint (Uri address, System.Net.IWebProxy proxy);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.ServicePoint FindServicePoint(class System.Uri address, class System.Net.IWebProxy proxy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.ServicePointManager.FindServicePoint(System.Uri,System.Net.IWebProxy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.ServicePoint</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.ServicePoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="proxy" Type="System.Net.IWebProxy" />
      </Parameters>
      <Docs>
        <param name="address">接続先のインターネット リソースのアドレスを格納している <see cref="T:System.Uri" /> オブジェクト。</param>
        <param name="proxy">この要求に対して使用するプロキシ データ。</param>
        <summary>指定した <see cref="T:System.Uri" /> オブジェクトとの通信を管理するには、既存の <see cref="T:System.Net.ServicePoint" /> オブジェクトを検出するか、新しい <see cref="T:System.Net.ServicePoint" /> オブジェクトを作成します。</summary>
        <returns>要求を処理するための通信を管理する <see cref="T:System.Net.ServicePoint" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.ServicePointManager.FindServicePoint%2A> メソッドが返される、 <xref:System.Net.ServicePoint> 、指定されたインターネット ホスト名に関連付けられているオブジェクト。 ない場合 <xref:System.Net.ServicePoint> 、そのホスト オブジェクトが存在する、 <xref:System.Net.ServicePointManager> オブジェクトでは、1 つを作成します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">最大数 <see cref="T:System.Net.ServicePoint" /> で定義されたオブジェクト <see cref="P:System.Net.ServicePointManager.MaxServicePoints" /> に達しています。</exception>
        <altmember cref="T:System.Net.ServicePoint" />
      </Docs>
    </Member>
    <Member MemberName="MaxServicePointIdleTime">
      <MemberSignature Language="C#" Value="public static int MaxServicePointIdleTime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaxServicePointIdleTime" />
      <MemberSignature Language="DocId" Value="P:System.Net.ServicePointManager.MaxServicePointIdleTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.ServicePoint</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Net.ServicePoint" /> オブジェクトの最大アイドル時間を取得または設定します。</summary>
        <value>
          <see cref="T:System.Net.ServicePoint" /> オブジェクトのミリ秒単位の最大アイドル時間。 既定値は 100,000 ミリ秒 \(100 秒\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.ServicePointManager.MaxServicePointIdleTime%2A> プロパティの設定の最大アイドル時間、 <xref:System.Net.ServicePointManager> オブジェクトに割り当てます、 <xref:System.Net.ServicePoint.MaxIdleTime%2A> プロパティの作成時に <xref:System.Net.ServicePoint> オブジェクトです。 この値を変更にのみに影響する <xref:System.Net.ServicePoint> 値が変更された後に初期化されるオブジェクト。  
  
 後に、 <xref:System.Net.ServicePoint> で指定された時間アイドル状態オブジェクトになった <xref:System.Net.ServicePoint.MaxIdleTime%2A>, 、ガベージ コレクションの対象であります。 A <xref:System.Net.ServicePoint> 接続の一覧に関連付けられている場合は、オブジェクトがアイドル状態、 <xref:System.Net.ServicePoint> オブジェクトは空です。  
  
   
  
## 例  
 次のコード例では、このプロパティを設定します。  
  
 [!code-cpp[System.Net.ServicePoint\#8](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.ServicePoint/CPP/servicepoint.cpp#8)]
 [!code-csharp[System.Net.ServicePoint\#8](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.ServicePoint/CS/servicepoint.cs#8)]
 [!code-vb[System.Net.ServicePoint\#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.ServicePoint/VB/servicepoint.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.Net.ServicePointManager.MaxServicePointIdleTime" /> が <see cref="F:System.Threading.Timeout.Infinite" /> より小さいか、<see cref="F:System.Int32.MaxValue" /> より大きいです。</exception>
        <permission cref="T:System.Net.WebPermission">For unrestricted Web permissions. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Net.ServicePoint" />
        <altmember cref="T:System.Net.WebPermission" />
      </Docs>
    </Member>
    <Member MemberName="MaxServicePoints">
      <MemberSignature Language="C#" Value="public static int MaxServicePoints { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaxServicePoints" />
      <MemberSignature Language="DocId" Value="P:System.Net.ServicePointManager.MaxServicePoints" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.ServicePoint</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>同時に維持される <see cref="T:System.Net.ServicePoint" /> オブジェクトの最大数を取得または設定します。</summary>
        <value>維持される <see cref="T:System.Net.ServicePoint" /> オブジェクトの最大数。 既定値は 0 です。これは <see cref="T:System.Net.ServicePoint" /> オブジェクトの数に制限がないことを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 小さくと、 <xref:System.Net.ServicePointManager.MaxServicePoints%2A> プロパティの数未満 <xref:System.Net.ServicePoint> 存在、現在のオブジェクト、 <xref:System.Net.ServicePointManager> を削除、 <xref:System.Net.ServicePoint> アイドル時間が最長の時間を持つオブジェクト。 場合数 <xref:System.Net.ServicePoint> アクティブな接続を持つオブジェクトがの値より大きい <xref:System.Net.ServicePointManager.MaxServicePoints%2A>, 、 <xref:System.Net.ServicePointManager> オブジェクトの削除、 <xref:System.Net.ServicePoint> 、アイドル状態になるオブジェクトします。  
  
   
  
## 例  
 次のコード例では、このプロパティを設定します。  
  
 [!code-cpp[System.Net.ServicePoint\#8](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.ServicePoint/CPP/servicepoint.cpp#8)]
 [!code-csharp[System.Net.ServicePoint\#8](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.ServicePoint/CS/servicepoint.cs#8)]
 [!code-vb[System.Net.ServicePoint\#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.ServicePoint/VB/servicepoint.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.Net.ServicePointManager.MaxServicePoints" /> が 0 未満であるか、または <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
        <permission cref="T:System.Net.WebPermission">for unrestricted Web permissions. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Net.ServicePoint" />
        <altmember cref="T:System.Net.WebPermission" />
      </Docs>
    </Member>
    <Member MemberName="ReusePort">
      <MemberSignature Language="C#" Value="public static bool ReusePort { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool ReusePort" />
      <MemberSignature Language="DocId" Value="P:System.Net.ServicePointManager.ReusePort" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.ServicePoint</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このプロパティの値を <see langword="true" /> に設定すると、HttpWebRequest からのすべての発信 TCP 接続において、ソケットでネイティブ ソケット オプション SO\_REUSE\_UNICASTPORT が使用されます。 これにより、基になる発信ポートが共有されます。 これは、多数の発信接続が短時間で作成される場合や、アプリにポート不足の危険がある場合に役立ちます。</summary>
        <value>
          <see cref="T:System.Boolean" /> を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定値は `false` です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SecurityProtocol">
      <MemberSignature Language="C#" Value="public static System.Net.SecurityProtocolType SecurityProtocol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Net.SecurityProtocolType SecurityProtocol" />
      <MemberSignature Language="DocId" Value="P:System.Net.ServicePointManager.SecurityProtocol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.ServicePoint</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.SecurityProtocolType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>その <see cref="T:System.Net.ServicePointManager" /> オブジェクトが管理する <see cref="T:System.Net.ServicePoint" /> オブジェクトで使用されるセキュリティ プロトコルを取得または設定します。</summary>
        <value>
          <see cref="T:System.Net.SecurityProtocolType" /> 列挙値に定義されている値の 1 つ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、セキュリティで保護されたハイパー テキスト転送プロトコル \(HTTPS\) スキームの場合のみです。 を使用する新しい接続を使用する Secure Sockets Layer \(SSL\) またはトランスポート層セキュリティ \(TLS\) プロトコルのバージョンを選択します。既存の接続は変更されません。  
  
 既定値が表示されていないこのプロパティの目的で注意してください。 セキュリティの概要は、常に、変更し、既定のプロトコル、保護レベルは、既知の脆弱性を回避するために時間の経過と共に変更されます。 既定値は個別のマシンの構成によって異なります、パッチが適用されている必要のあるソフトウェアがインストールされているとします。  
  
 コードは必要がありますを使用して特定の保護レベル、または特定のセキュリティ レベルが既定で使用されていることを前提として決して暗黙的に依存します。 アプリは、特定のセキュリティ レベルの使用に依存する場合は、そのレベルを明示的に指定し、内にある実際に確立された接続で使用することを確認する、確認する必要があります。 さらに、プロトコルがサポートされている変更発生した場合に強固でコードを設計すること、ような多くの場合、変更されるほとんどの事前通知と新たな脅威を軽減するためにします。  
  
 .NET Framework 4.6 には、安全性の低い暗号およびハッシュ アルゴリズムの接続をブロックする新しいセキュリティ機能が含まれています。 HttpClient、HttpWebRequest、FTPClient、SmtpClient、SslStream などの api には、TLS\/SSL を使用して、.NET Framework 4.6 を対象とするアプリケーションでは、既定では、セキュリティが強化された動作を取得します。  
  
 開発者は、既存 SSL3 サービスまたは TLS で RC4 サービスと相互運用性を維持するためにこの動作しないことをする可能性があります。[This article](https://support.microsoft.com/kb/3069494)新しい動作を無効にするように、コードを変更する方法について説明します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">プロパティを設定するために指定された値が有効な <see cref="T:System.Net.SecurityProtocolType" /> 列挙値ではありません。</exception>
        <altmember cref="T:System.Net.ServicePoint" />
        <altmember cref="T:System.Net.SecurityProtocolType" />
      </Docs>
    </Member>
    <Member MemberName="ServerCertificateValidationCallback">
      <MemberSignature Language="C#" Value="public static System.Net.Security.RemoteCertificateValidationCallback ServerCertificateValidationCallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Net.Security.RemoteCertificateValidationCallback ServerCertificateValidationCallback" />
      <MemberSignature Language="DocId" Value="P:System.Net.ServicePointManager.ServerCertificateValidationCallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.ServicePoint</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Security.RemoteCertificateValidationCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サーバー証明書を検証するコールバックを取得または設定します。</summary>
        <value>
          <see cref="T:System.Net.Security.RemoteCertificateValidationCallback" /> 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アプリケーションを設定でき、 <xref:System.Net.ServicePointManager.ServerCertificateValidationCallback%2A> プロパティをサーバー証明書のクライアントがカスタムの検証に使用するメソッドです。 カスタム検証を実施する際に、 `sender` に渡されるパラメーター、 <xref:System.Net.Security.RemoteCertificateValidationCallback> から派生したオブジェクトまたはホスト文字列名であることができます <xref:System.Net.WebRequest> \(<xref:System.Net.HttpWebRequest>, など\) に応じて、 <xref:System.Net.ServicePointManager.CertificatePolicy%2A> プロパティです。  
  
 カスタム検証を使用しない場合は、証明書の名前が、要求の作成に使用するホスト名と比較されます。 たとえば場合、 <xref:System.Net.WebRequest.Create%28System.String%29> パラメーターが渡されました"https:\/\/www.contoso.com\/default.hmtl"の既定の動作、クライアントは www.contoso.com に対して証明書を確認します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">to set the <see cref="P:System.Net.ServicePointManager.ServerCertificateValidationCallback" /> property. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure" />.</permission>
        <altmember cref="T:System.Net.ServicePoint" />
        <altmember cref="T:System.Security.Permissions.SecurityPermission" />
      </Docs>
    </Member>
    <Member MemberName="ServerCipherSuitesCallback">
      <MemberSignature Language="C#" Value="public static System.Net.CipherSuitesCallback ServerCipherSuitesCallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Net.CipherSuitesCallback ServerCipherSuitesCallback" />
      <MemberSignature Language="DocId" Value="P:System.Net.ServicePointManager.ServerCipherSuitesCallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API is no longer supported.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.CipherSuitesCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTcpKeepAlive">
      <MemberSignature Language="C#" Value="public static void SetTcpKeepAlive (bool enabled, int keepAliveTime, int keepAliveInterval);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetTcpKeepAlive(bool enabled, int32 keepAliveTime, int32 keepAliveInterval) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.ServicePointManager.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.ServicePoint</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enabled" Type="System.Boolean" />
        <Parameter Name="keepAliveTime" Type="System.Int32" />
        <Parameter Name="keepAliveInterval" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="enabled">true に設定すると、指定された <c>keepAliveTime</c>  値および <c>keepAliveInterval</c> 値を使用して、TCP 接続の TCP keep\-alive オプションが有効になります。  
  
 false に設定すると、TCP keep\-alive オプションが無効になり、残りのパラメーターは無視されます。  
  
 既定値は false です。</param>
        <param name="keepAliveTime">最初の keep\-alive パケットが送信されるまでアクティビティを行わないタイムアウト値をミリ秒単位で指定します。  
  
 値は 0 よりも大きくする必要があります。  0 またはそれより小さい値が渡されると、<see cref="T:System.ArgumentOutOfRangeException" /> がスローされます。</param>
        <param name="keepAliveInterval">受信確認が受信されない場合に、連続する keep\-alive パケットが送信されるときの間隔をミリ秒単位で指定します。  
  
 値は 0 よりも大きくする必要があります。  0 またはそれより小さい値が渡されると、<see cref="T:System.ArgumentOutOfRangeException" /> がスローされます。</param>
        <summary>TCP 接続での keep\-alive オプションを有効または無効にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アプリケーションでは、TCP\/IP プロバイダーが、TCP 接続の keep alive パケットの使用を有効にすることを要求できます。 既定では、TCP 接続の keep alive パケットの使用が無効になっています。  
  
 TCP ソケットときの既定の設定は、2 時間にセット keep alive タイムアウトと keep alive 間隔を 1 秒に初期化されます。`keepAliveTime` パラメーターが反応のない最初の keep\-alive パケットが送信されるまでのミリ秒単位のタイムアウトを指定します。`keepAliveInterval` パラメーターを指定の間隔 \(ミリ秒単位\) 間で受信確認が受信されない場合、連続する keep\-alive パケットが送信されるとします。 Keep alive プローブの数は、変更することはできませんしは 10 に設定します。  
  
 Keep alive の結果として、TCP 接続が切断された場合、 <xref:System.Net.Sockets.SocketError> の <xref:System.Net.Sockets.SocketError.NetworkReset> 、ソケットに対する進行中のすべての呼び出しに返されますが、後続の呼び出しは失敗し、 <xref:System.Net.Sockets.SocketError> の <xref:System.Net.Sockets.SocketError.NotConnected>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定された値 <paramref name="keepAliveTime" /> または <paramref name="keepAliveInterval" /> パラメーターが 0 未満です。</exception>
        <altmember cref="T:System.Net.ServicePoint" />
      </Docs>
    </Member>
    <Member MemberName="UseNagleAlgorithm">
      <MemberSignature Language="C#" Value="public static bool UseNagleAlgorithm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool UseNagleAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Net.ServicePointManager.UseNagleAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.ServicePoint</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Net.ServicePointManager" /> オブジェクトが管理するサービス ポイントで Nagle アルゴリズムが使用されるかどうかを確認します。</summary>
        <value>Nagle アルゴリズムを使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Nagle アルゴリズムは小さなデータ パケットをバッファリングして、1 つのパケットとして送信することによってネットワーク トラフィックの削減に使用されます。 このプロセスは「ナグリング」; と別名します。転送されたパケットの数が減るために広く使用し、パケットごとのオーバーヘッドを削減します。  
  
 このプロパティの値を変更するには影響しません既存 <xref:System.Net.ServicePoint> オブジェクトです。 変更後に作成された新しいサービス ポイントのみが影響を受けます。  
  
 Nagle アルゴリズムは、IETF RFC 896 完全に説明されています。  
  
   
  
## 例  
 次のコード例では、このプロパティを設定します。  
  
 [!code-cpp[System.Net.ServicePoint\#10](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.ServicePoint/CPP/servicepoint.cpp#10)]
 [!code-csharp[System.Net.ServicePoint\#10](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.ServicePoint/CS/servicepoint.cs#10)]
 [!code-vb[System.Net.ServicePoint\#10](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.ServicePoint/VB/servicepoint.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.ServicePoint" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindServicePoint">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>要求を処理するための通信を管理するには、既存の <see cref="T:System.Net.ServicePoint" /> オブジェクトを検出するか、新しい <see cref="T:System.Net.ServicePoint" /> オブジェクトを作成します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>