<Type Name="HttpWebRequest" FullName="System.Net.HttpWebRequest">
  <TypeSignature Language="C#" Value="public class HttpWebRequest : System.Net.WebRequest, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable HttpWebRequest extends System.Net.WebRequest implements class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Net.HttpWebRequest" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Requests</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Net.WebRequest</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <see cref="T:System.Net.WebRequest" /> クラスの HTTP 固有の実装を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.HttpWebRequest>クラスは、プロパティのサポートを提供し、メソッド内で定義<xref:System.Net.WebRequest>および追加のプロパティと HTTP を使用するサーバーと直接対話するユーザーを有効にするメソッド。  
  
 使用しないで、<xref:System.Net.HttpWebRequest.%23ctor%2A>コンス トラクターです。 使用して、<xref:System.Net.WebRequest.Create%2A?displayProperty=fullName>新しい初期化するメソッドを<xref:System.Net.HttpWebRequest>オブジェクト。 かどうか、パターンの Uniform Resource Identifier \(\) は`http://`または`https://`、<xref:System.Net.WebRequest.Create%2A>を返します、<xref:System.Net.HttpWebRequest>オブジェクト。  
  
 <xref:System.Net.HttpWebRequest.GetResponse%2A>メソッドに同期要求で指定されたリソースを<xref:System.Net.HttpWebRequest.RequestUri%2A>プロパティを返す、<xref:System.Net.HttpWebResponse>応答オブジェクトを格納しています。 によって返されたストリームを使用して、応答データが受信される<xref:System.Net.HttpWebResponse.GetResponseStream%2A>です。 応答オブジェクトまたは応答のストリームを閉じると、残りのデータが失われます。 残りのデータが消耗して、次の条件が保持される場合に、応答オブジェクトまたはストリームを閉じるときに、ソケットが後続の要求を再度使用する: は keep alive またはパイプライン処理要求を少量のデータのみを受信する必要がありますまたは短い時間間隔で残りのデータを受信します。 保持に説明した条件に該当しないか、ドレインの時間がしきい値を超過、ソケットは閉じられます。 Keep alive またはパイプラインの接続、アプリケーションが EOF までストリームを読み取ることを強くお勧めします。 これは、結果、ソケットの結果としてパフォーマンスが向上しより少ないリソースを使用する後続の要求用に再利用されます。  
  
 リソースにデータを送信するときに、<xref:System.Net.HttpWebRequest.GetRequestStream%2A>メソッドを返します、<xref:System.IO.Stream>データ送信に使用するオブジェクト。<xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A>と<xref:System.Net.HttpWebRequest.EndGetRequestStream%2A>メソッドは、送信データ ストリームに非同期アクセスを提供します。  
  
 クライアントでの認証<xref:System.Net.HttpWebRequest>、クライアント証明書をインストールする必要があります、現在のユーザーの My 証明書ストア。  
  
 <xref:System.Net.HttpWebRequest>クラスがスローされます、<xref:System.Net.WebException>リソースへのアクセス中にエラーが発生します。<xref:System.Net.WebException.Status%2A?displayProperty=fullName>プロパティが含まれています、<xref:System.Net.WebExceptionStatus>エラーの原因を示す値。 ときに<xref:System.Net.WebException.Status%2A?displayProperty=fullName>は<xref:System.Net.WebExceptionStatus.ProtocolError?displayProperty=fullName>、<xref:System.Net.WebException.Response%2A>プロパティが含まれています、<xref:System.Net.HttpWebResponse>リソースから受信しました。  
  
 <xref:System.Net.HttpWebRequest>一般的な HTTP ヘッダーの値のプロパティとして、インターネット リソースに送信される、メソッド、によって設定するか、システムによって設定を公開します。次の表には、完全な一覧が含まれています。 その他のヘッダーを設定することができます、<xref:System.Net.HttpWebRequest.Headers%2A>名前\/値のペアとしてプロパティです。 あるサーバーおよびキャッシュは、変更または要求時にヘッダーを追加に注意してください。  
  
 次の表は、プロパティ、メソッド、またはシステムのいずれかに設定されている HTTP ヘッダーを示します。  
  
|ヘッダー|によってを設定します。|  
|----------|-----------------|  
|同意する|によって設定、<xref:System.Net.HttpWebRequest.Accept%2A>プロパティです。|  
|接続|によって設定、<xref:System.Net.HttpWebRequest.Connection%2A>プロパティ、<xref:System.Net.HttpWebRequest.KeepAlive%2A>プロパティです。|  
|コンテンツの長さ|によって設定、<xref:System.Net.HttpWebRequest.ContentLength%2A>プロパティです。|  
|コンテンツの種類|によって設定、<xref:System.Net.HttpWebRequest.ContentType%2A>プロパティです。|  
|期待|によって設定、<xref:System.Net.HttpWebRequest.Expect%2A>プロパティです。|  
|日付|現在の日付にシステムによって設定されます。|  
|Host|現在のホスト情報をシステムによって設定されます。|  
|場合の変更\-以降|によって設定、<xref:System.Net.HttpWebRequest.IfModifiedSince%2A>プロパティです。|  
|範囲|によって設定、<xref:System.Net.HttpWebRequest.AddRange%2A>メソッドです。|  
|参照元|によって設定、<xref:System.Net.HttpWebRequest.Referer%2A>プロパティです。|  
|転送エンコード|によって設定、<xref:System.Net.HttpWebRequest.TransferEncoding%2A>プロパティ \(、<xref:System.Net.HttpWebRequest.SendChunked%2A>プロパティである必要があります`true`\)。|  
|ユーザー エージェント|によって設定、<xref:System.Net.HttpWebRequest.UserAgent%2A>プロパティです。|  
  
> [!NOTE]
>  <xref:System.Net.HttpWebRequest>自動的に登録されます。 呼び出す必要はありません、<xref:System.Net.WebRequest.RegisterPrefix%2A>メソッドを登録する<xref:System.Net.HttpWebRequest?displayProperty=fullName>Uri を使用する前に始まる`http://`または`https://`です。  
  
 ローカル コンピューターまたはアプリケーション構成ファイルが既定のプロキシを使用することを指定します。 場合、<xref:System.Net.HttpWebRequest.Proxy%2A>プロパティを指定するからプロキシ設定し、<xref:System.Net.HttpWebRequest.Proxy%2A>プロパティは、ローカル コンピューターまたはアプリケーション構成ファイルを上書きし、<xref:System.Net.HttpWebRequest>インスタンスが指定したプロキシ設定を使用します。 プロキシが構成ファイルに指定されていない場合、<xref:System.Net.HttpWebRequest.Proxy%2A>プロパティは指定しません、<xref:System.Net.HttpWebRequest>クラスは、ローカル コンピューターで Internet Explorer から継承されたプロキシ設定を使用します。 Internet Explorer のプロキシ設定がない場合、要求は、サーバーに直接送信されます。  
  
 <xref:System.Net.HttpWebRequest>クラスがワイルドカード文字を Internet Explorer で直接バイパス リストが解析されるよりも異なる方法で Internet Explorer から継承プロキシ バイ パスの一覧を解析します。 たとえば、<xref:System.Net.HttpWebRequest>クラスでは「nt \*」Internet Explorer からのバイパス一覧を解析の正規表現として"nt。 $"です。 これは、Internet Explorer のネイティブの動作とは異なります。 などの URL"`http://intxxxxx`"バイパスを使用して、プロキシ、<xref:System.Net.HttpWebRequest>クラスが、Internet Explorer を使用してプロキシをバイパスできません。  
  
> [!NOTE]
>  フレームワークでは、SSL セッションを作成するときはキャッシュ、可能であれば、新しい要求のキャッシュされているセッションを再利用しようとします。 最初の要素をフレームワークで使用するときに、SSL セッションを再利用する、 <xref:System.Net.HttpWebRequest.ClientCertificates%2A> \(かどうかがある 1 つ\)、または匿名のセッションを再利用しようと<xref:System.Net.HttpWebRequest.ClientCertificates%2A>が空です。  
  
> [!NOTE]
>  セキュリティ上の理由、cookie は、既定で無効にします。 Cookie を使用する場合は、使用、 <xref:System.Net.HttpWebRequest.CookieContainer%2A> cookie を有効にするプロパティです。  
  
 .NET Framework 4.6 には、安全性の低い暗号およびハッシュ アルゴリズムの接続をブロックする新しいセキュリティ機能が含まれています。 HttpClient、HttpWebRequest、FTPClient、SmtpClient、SslStream などの Api を介した TLS と SSL を使用して、.NET Framework 4.6 を対象とするアプリケーションでは、既定では、セキュリティが強化された動作を取得します。  
  
 開発者は、既存 SSL3 サービスまたは TLS で RC4 サービスと相互運用性を維持するために、この動作を除外する必要あります。[This article](https://support.microsoft.com/kb/3069494)新しい動作を無効にするように、コードを変更する方法について説明します。  
  
   
  
## 例  
 次のコード例を作成、 <xref:System.Net.HttpWebRequest> URI http:\/\/www.contoso.com\/ をします。  
  
 [!code-cpp[Classic HttpWebRequest Example\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic HttpWebRequest Example/CPP/source.cpp#1)]
 [!code-csharp[Classic HttpWebRequest Example\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpWebRequest Example/CS/source.cs#1)]
 [!code-vb[Classic HttpWebRequest Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpWebRequest Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Net.WebPermission">to access the requested URI or any URI that the request is redirected to. Associated enumeration: <see cref="F:System.Net.NetworkAccess.Connect" /></permission>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpWebRequest ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Net.HttpWebRequest" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpWebRequest (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.#ctor(System.Uri)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected HttpWebRequest (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo serializationInfo, valuetype System.Runtime.Serialization.StreamingContext streamingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Serialization is obsoleted for this type", false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="serializationInfo" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="streamingContext" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="serializationInfo">新しい <see cref="T:System.Net.HttpWebRequest" /> オブジェクトをシリアル化するために必要な情報を格納する <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
        <param name="streamingContext">新しい <see cref="T:System.Net.HttpWebRequest" /> オブジェクトに関連付けられているシリアル化ストリームの転送元および転送先を格納する <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクト。</param>
        <summary>
          <see cref="T:System.Runtime.Serialization.SerializationInfo" /> クラスと <see cref="T:System.Runtime.Serialization.StreamingContext" /> クラスの指定したインスタンスから、<see cref="T:System.Net.HttpWebRequest" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アプリケーションは、シリアル化を使用する場合、完全な信頼モードで実行する必要があります。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Net.WebPermission">for unrestricted access to network resources. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public override void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.Abort" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>インターネット リソースへの要求を取り消します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.HttpWebRequest.Abort%2A> メソッドは、リソースへの要求をキャンセルします。 要求が取り消されると後の呼び出し、 <xref:System.Net.HttpWebRequest.GetResponse%2A>, 、<xref:System.Net.HttpWebRequest.BeginGetResponse%2A>, 、<xref:System.Net.HttpWebRequest.EndGetResponse%2A>, 、<xref:System.Net.HttpWebRequest.GetRequestStream%2A>, 、<xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A>, 、または <xref:System.Net.HttpWebRequest.EndGetRequestStream%2A> メソッド、 <xref:System.Net.WebException> で、 <xref:System.Net.WebException.Status%2A> プロパティに設定 <xref:System.Net.WebExceptionStatus.RequestCanceled>します。  
  
 <xref:System.Net.HttpWebRequest.Abort%2A> メソッドは、指定されたコールバックを実行して同期的に、 <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A> または <xref:System.Net.HttpWebRequest.BeginGetResponse%2A> メソッド場合、 <xref:System.Net.HttpWebRequest.Abort%2A> 未処理はこれらの操作のいずれかのメソッドが呼び出されます。 これは、潜在的なデッドロックの問題につながります。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[Network Tracing](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
   
  
## 例  
 非同期要求の場合は、タイムアウト メカニズムを実装するクライアント アプリケーションの役割を勧めします。 次のコード例では、これを行う方法を示します。  
  
 [!code-cpp[System.Net.HttpWebRequest.BeginGetResponse\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.HttpWebRequest.BeginGetResponse/CPP/begingetresponse.cpp#1)]
 [!code-csharp[System.Net.HttpWebRequest.BeginGetResponse\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.HttpWebRequest.BeginGetResponse/CS/begingetresponse.cs#1)]
 [!code-vb[System.Net.HttpWebRequest.BeginGetResponse\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.HttpWebRequest.BeginGetResponse/VB/begingetresponse.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="public string Accept { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Accept" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Accept" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="Accept" /> HTTP ヘッダーの値を取得または設定します。</summary>
        <value>
          <see langword="Accept" /> HTTP ヘッダーの値。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オフにする、 `Accept` HTTP ヘッダーを設定、 <xref:System.Net.HttpWebRequest.Accept%2A> プロパティを `null`します。  
  
> [!NOTE]
>  このプロパティの値が格納されている <xref:System.Net.WebHeaderCollection>します。 WebHeaderCollection が設定されている場合、プロパティ値は失われます。  
  
   
  
## 例  
 次のコード例、 <xref:System.Net.HttpWebRequest.Accept%2A> プロパティです。  
  
 [!code-cpp[HttpWebRequest\_Accept\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_Accept/CPP/httpwebrequest_accept.cpp#1)]
 [!code-csharp[HttpWebRequest\_Accept\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_Accept/CS/httpwebrequest_accept.cs#1)]
 [!code-vb[HttpWebRequest\_Accept\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_Accept/VB/httpwebrequest_accept.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddRange">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>要求に範囲ヘッダーを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 HTTP のすべてのエンティティがバイトのシーケンスとして HTTP メッセージに示されるので、バイトの範囲の概念は、任意の HTTP エンティティの有効です。 ただし、すべてのクライアントとサーバーは、バイト範囲の操作をサポートする必要があります。  
  
 要求に範囲ヘッダーは、のみ必要である HTTP エンティティ内の指定したバイト範囲の一部の受信を要求するクライアントを使用します。 サーバーは、範囲ヘッダーの要求をサポートする必要はありません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (int range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(int32 range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.AddRange(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="range">範囲の先頭または末尾。</param>
        <summary>要求されたデータの先頭または末尾からの特定の範囲の要求にバイト範囲ヘッダーを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Net.HttpWebRequest.AddRange%2A?displayProperty=fullName> method adds a byte range header to the request.  
  
 If **parameterReference tag is not supported!!!!**  
 is positive, the **parameterReference tag is not supported!!!!**  
 parameter specifies the starting point of the range. The server should start sending data from the **parameterReference tag is not supported!!!!**  
 parameter specified to the end of the data in the HTTP entity.  
  
 If **parameterReference tag is not supported!!!!**  
 is negative, the **parameterReference tag is not supported!!!!**  
 parameter specifies the ending point of the range. The server should start sending data from the start of the data in the HTTP entity to the **parameterReference tag is not supported!!!!**  
 parameter specified.  
  
 Since all HTTP entities are represented in HTTP messages as sequences of bytes, the concept of a byte range is meaningful for any HTTP entity. However, not all clients and servers need to support byte\-range operations.  
  
 The Range header on a request allows a client to request that it only wants to receive some part of the specified range of bytes in an HTTP entity. Servers are not required to support Range header requests.  
  
 An example of a Range header in an HTTP protocol request that requests the server send the first 100 bytes \(from the start to byte position 99\) would be the following:  
  
 `Range: bytes=0-99\r\n\r\n`  
  
 For this example, the **parameterReference tag is not supported!!!!**  
 parameter would be \-99.  
  
 A HTTP server indicates support for Range headers with the Accept\-Ranges header. An example of the Accept\-Ranges header from a server that supports byte\-ranges would be as follows:  
  
 `Accept-Ranges: bytes\r\n\r\n`  
  
 If an Accept\-Ranges header is not received in the header of the response from the server, then the server does not support Range headers. An example of the Accept\-Ranges header from a server that does not support ranges, but recognizes the Accept\-Ranges header, would be as follows:  
  
 `Accept-Ranges: none\r\n\r\n`  
  
 When receiving the response from a range request, only the HTTP headers associated with the entire request are parsed and made available via properties on the <xref:System.Net.HttpWebResponse> class. Headers associated with each range are returned in the response.  
  
   
  
## 例  
 The following code example adds a range header to the request.  
  
 [!code-cpp[System.Net.HttpWebRequest.AddRange\#1](~/samples/snippets/cpp/VS_Snippets_Misc/system.net.httpwebrequest.addrange/cpp/source.cpp#1)]
 [!code-csharp[System.Net.HttpWebRequest.AddRange\#1](~/samples/snippets/csharp/VS_Snippets_Misc/system.net.httpwebrequest.addrange/cs/source.cs#1)]
 [!code-vb[System.Net.HttpWebRequest.AddRange\#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/system.net.httpwebrequest.addrange/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="rangeSpecifier" /> が正しくありません。</exception>
        <exception cref="T:System.InvalidOperationException">範囲ヘッダーを追加できませんでした。</exception>
        <altmember cref="Overload:System.Net.HttpWebRequest.AddRange" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (long range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(int64 range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.AddRange(System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="range">範囲の先頭または末尾。</param>
        <summary>要求されたデータの先頭または末尾からの特定の範囲の要求にバイト範囲ヘッダーを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.HttpWebRequest.AddRange%2A?displayProperty=fullName> メソッドによって、要求にバイト範囲ヘッダーを追加します。  
  
 場合 `range` が正の値、 `range` パラメーターが範囲の開始位置を指定します。 サーバーはからのデータの送信を開始する必要があります、 `range` HTTP エンティティのデータの末尾に指定されたパラメーター。  
  
 場合 `range` が負の場合、 `range` パラメーターが範囲の終了位置を指定します。 サーバーが HTTP のエンティティにデータの先頭からのデータの送信を開始する必要があります、 `range` パラメーターを指定します。  
  
 HTTP のすべてのエンティティがバイトのシーケンスとして HTTP メッセージに示されるので、バイトの範囲の概念は、任意の HTTP エンティティの有効です。 ただし、すべてのクライアントとサーバーは、バイト範囲の操作をサポートする必要があります。  
  
 要求に範囲ヘッダーは、のみ必要である HTTP エンティティ内の指定したバイト範囲の一部の受信を要求するクライアントを使用します。 サーバーは、範囲ヘッダーの要求をサポートする必要はありません。  
  
 以下になります \(99 のバイト位置を先頭\) から最初の 100 バイトの送信をサーバーが要求する HTTP プロトコル要求に範囲ヘッダーの例:  
  
 `Range: bytes=0-99\r\n\r\n`  
  
 この例で、 `range` パラメーター\-99 になります。  
  
 HTTP サーバーでは、Accept\-ranges ヘッダーに範囲ヘッダーのサポートを示します。 バイト範囲をサポートしているサーバーから Accept\-ranges ヘッダーの例に次のようになります。  
  
 `Accept-Ranges: bytes\r\n\r\n`  
  
 Accept\-ranges ヘッダーがサーバーからの応答のヘッダーに受信しなかった場合、サーバーはサポートしていません範囲ヘッダー。 範囲をサポートしていませんが、Accept\-ranges ヘッダーを認識しているサーバーから Accept\-ranges ヘッダーの例に次のようになります。  
  
 `Accept-Ranges: none\r\n\r\n`  
  
 要求全体に関連付けられている HTTP ヘッダーだけが解析され、プロパティを使用してできる範囲の要求から応答を受信するときに、 <xref:System.Net.HttpWebResponse> クラスです。 それぞれの範囲に関連付けられたヘッダーが応答で返されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="rangeSpecifier" /> が正しくありません。</exception>
        <exception cref="T:System.InvalidOperationException">範囲ヘッダーを追加できませんでした。</exception>
        <altmember cref="Overload:System.Net.HttpWebRequest.AddRange" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (int from, int to);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(int32 from, int32 to) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.AddRange(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.Int32" />
        <Parameter Name="to" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="from">データの送信を開始する位置。</param>
        <param name="to">データの送信を終了する位置。</param>
        <summary>指定した範囲の要求にバイト範囲ヘッダーを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Net.HttpWebRequest.AddRange%2A?displayProperty=fullName> method adds a byte range header to the request.  
  
 Since all HTTP entities are represented in HTTP messages as sequences of bytes, the concept of a byte range is meaningful for any HTTP entity. However, not all clients and servers need to support byte\-range operations.  
  
 The Range header on a request allows a client to request that it only wants to receive some part of the specified range of bytes in an HTTP entity. Servers are not required to support Range header requests.  
  
 An example of a Range header in an HTTP protocol request that requests the first 100 bytes would be would be the following:  
  
 `Range: bytes=0-99\r\n\r\n`  
  
 For this example, the **parameterReference tag is not supported!!!!**  
 parameter would be specified as 0 and the **parameterReference tag is not supported!!!!**  
 parameter would be specified as 99. The range specifier is automatically set as "bytes" by this method.  
  
 A HTTP server indicates support for Range headers with the Accept\-Ranges header. An example of the Accept\-Ranges header from a server that supports byte\-ranges would be as follows:  
  
 `Accept-Ranges: bytes\r\n\r\n`  
  
 If an Accept\-Ranges header is not received in the header of the response from the server, then the server does not support Range headers. An example of the Accept\-Ranges header from a server that does not support ranges, but recognizes the Accept\-Ranges header, would be as follows:  
  
 `Accept-Ranges: none\r\n\r\n`  
  
 When receiving the response from a range request, only the HTTP headers associated with the entire request are parsed and made available via properties on the <xref:System.Net.HttpWebResponse> class. Headers associated with each range are returned in the response.  
  
   
  
## 例  
 The following code example adds a range header to the request.  
  
 [!code-cpp[System.Net.HttpWebRequest.AddRange2\#1](~/samples/snippets/cpp/VS_Snippets_Misc/system.net.httpwebrequest.addrange2/cpp/source.cpp#1)]
 [!code-csharp[System.Net.HttpWebRequest.AddRange2\#1](~/samples/snippets/csharp/VS_Snippets_Misc/system.net.httpwebrequest.addrange2/cs/source.cs#1)]
 [!code-vb[System.Net.HttpWebRequest.AddRange2\#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/system.net.httpwebrequest.addrange2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="rangeSpecifier" /> が正しくありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="from" /> は <paramref name="to" /> より大きい  
  
 または  
  
 <paramref name="from" /> または <paramref name="to" /> が 0 未満です。</exception>
        <exception cref="T:System.InvalidOperationException">範囲ヘッダーを追加できませんでした。</exception>
        <altmember cref="Overload:System.Net.HttpWebRequest.AddRange" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (long from, long to);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(int64 from, int64 to) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.AddRange(System.Int64,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.Int64" />
        <Parameter Name="to" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="from">データの送信を開始する位置。</param>
        <param name="to">データの送信を終了する位置。</param>
        <summary>指定した範囲の要求にバイト範囲ヘッダーを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.HttpWebRequest.AddRange%2A?displayProperty=fullName> メソッドによって、要求にバイト範囲ヘッダーを追加します。  
  
 HTTP のすべてのエンティティがバイトのシーケンスとして HTTP メッセージに示されるので、バイトの範囲の概念は、任意の HTTP エンティティの有効です。 ただし、すべてのクライアントとサーバーは、バイト範囲の操作をサポートする必要があります。  
  
 要求に範囲ヘッダーは、のみ必要である HTTP エンティティ内の指定したバイト範囲の一部の受信を要求するクライアントを使用します。 サーバーは、範囲ヘッダーの要求をサポートする必要はありません。  
  
 最初の 100 バイトの要求になる HTTP プロトコル要求に範囲ヘッダーの例は、次になります。  
  
 `Range: bytes=0-99\r\n\r\n`  
  
 この例で、 `from` パラメーターは 0 として指定し、 `to` パラメーターは 99 として指定します。 範囲指定子は、このメソッドによって自動的に「バイトを」として設定されます。  
  
 HTTP サーバーでは、Accept\-ranges ヘッダーに範囲ヘッダーのサポートを示します。 バイト範囲をサポートしているサーバーから Accept\-ranges ヘッダーの例に次のようになります。  
  
 `Accept-Ranges: bytes\r\n\r\n`  
  
 Accept\-ranges ヘッダーがサーバーからの応答のヘッダーに受信しなかった場合、サーバーはサポートしていません範囲ヘッダー。 範囲をサポートしていませんが、Accept\-ranges ヘッダーを認識しているサーバーから Accept\-ranges ヘッダーの例に次のようになります。  
  
 `Accept-Ranges: none\r\n\r\n`  
  
 要求全体に関連付けられている HTTP ヘッダーだけが解析され、プロパティを使用してできる範囲の要求から応答を受信するときに、 <xref:System.Net.HttpWebResponse> クラスです。 それぞれの範囲に関連付けられたヘッダーが応答で返されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="rangeSpecifier" /> が正しくありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="from" /> は <paramref name="to" /> より大きい  
  
 または  
  
 <paramref name="from" /> または <paramref name="to" /> が 0 未満です。</exception>
        <exception cref="T:System.InvalidOperationException">範囲ヘッダーを追加できませんでした。</exception>
        <altmember cref="Overload:System.Net.HttpWebRequest.AddRange" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (string rangeSpecifier, int range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(string rangeSpecifier, int32 range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.AddRange(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rangeSpecifier" Type="System.String" />
        <Parameter Name="range" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rangeSpecifier">範囲の説明。</param>
        <param name="range">範囲の先頭または末尾。</param>
        <summary>要求されたデータの先頭または末尾からの特定の範囲の要求に Range ヘッダーを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.HttpWebRequest.AddRange%2A?displayProperty=fullName> メソッドは、要求に範囲ヘッダーを追加します。  
  
 場合 `range` が正の値、 `range` パラメーターが範囲の開始位置を指定します。 サーバーはからのデータの送信を開始する必要があります、 `range` HTTP エンティティのデータの末尾に指定されたパラメーター。  
  
 場合 `range` が負の場合、 `range` パラメーターが範囲の終了位置を指定します。 サーバーが HTTP のエンティティにデータの先頭からのデータの送信を開始する必要があります、 `range` パラメーターを指定します。  
  
 HTTP のすべてのエンティティがバイトのシーケンスとして HTTP メッセージに示されるので、バイトの範囲の概念は、任意の HTTP エンティティの有効です。 ただし、すべてのクライアントとサーバーは、バイト範囲の操作をサポートする必要があります。  
  
 要求に範囲ヘッダーは、のみ必要である HTTP エンティティ内の指定したバイト範囲の一部の受信を要求するクライアントを使用します。 サーバーは、範囲ヘッダーの要求をサポートする必要はありません。  
  
 `rangeSpecifier` ので、これは、ほとんどの HTTP サーバーによって認識される唯一の範囲指定子はパラメーター"bytes"として指定するとは通常です。 設定、 `rangeSpecifier` を他のなんらかの文字列パラメーターがバイト数 \(バイトの範囲指定子では、IETF RFC 2616 で定義された\) 以外のユーザー設定の範囲指定子のサポートを使用します。  
  
 最初の 100 バイトの要求になる HTTP プロトコル要求に範囲ヘッダーの例は、次になります。  
  
 `Range: bytes=-99\r\n\r\n`  
  
 この例で、 `rangeSpecifier` "bytes"としてパラメーターを指定すると、 `range` パラメーター\-99 になります。  
  
 HTTP サーバーでは、応答で Accept\-ranges ヘッダーに範囲ヘッダーのサポートを示します。 バイト範囲をサポートしているサーバーから Accept\-ranges ヘッダーの例に次のようになります。  
  
 `Accept-Ranges: bytes\r\n\r\n`  
  
 Accept\-ranges ヘッダーがサーバーからの応答のヘッダーに受信しなかった場合、サーバーはサポートしていません範囲ヘッダー。 範囲をサポートしていませんが、Accept\-ranges ヘッダーを認識しているサーバーから Accept\-ranges ヘッダーの例に次のようになります。  
  
 `Accept-Ranges: none\r\n\r\n`  
  
 要求全体に関連付けられている HTTP ヘッダーだけが解析され、プロパティを使用してできる範囲の要求から応答を受信するときに、 <xref:System.Net.HttpWebResponse> クラスです。 それぞれの範囲に関連付けられたヘッダーが応答で返されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rangeSpecifier" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="rangeSpecifier" /> が正しくありません。</exception>
        <exception cref="T:System.InvalidOperationException">範囲ヘッダーを追加できませんでした。</exception>
        <altmember cref="Overload:System.Net.HttpWebRequest.AddRange" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (string rangeSpecifier, long range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(string rangeSpecifier, int64 range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.AddRange(System.String,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rangeSpecifier" Type="System.String" />
        <Parameter Name="range" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="rangeSpecifier">範囲の説明。</param>
        <param name="range">範囲の先頭または末尾。</param>
        <summary>要求されたデータの先頭または末尾からの特定の範囲の要求に Range ヘッダーを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.HttpWebRequest.AddRange%2A?displayProperty=fullName> メソッドは、要求に範囲ヘッダーを追加します。  
  
 場合 `range` が正の値、 `range` パラメーターが範囲の開始位置を指定します。 サーバーはからのデータの送信を開始する必要があります、 `range` HTTP エンティティのデータの末尾に指定されたパラメーター。  
  
 場合 `range` が負の場合、 `range` パラメーターが範囲の終了位置を指定します。 サーバーが HTTP のエンティティにデータの先頭からのデータの送信を開始する必要があります、 `range` パラメーターを指定します。  
  
 HTTP のすべてのエンティティがバイトのシーケンスとして HTTP メッセージに示されるので、バイトの範囲の概念は、任意の HTTP エンティティの有効です。 ただし、すべてのクライアントとサーバーは、バイト範囲の操作をサポートする必要があります。  
  
 要求に範囲ヘッダーは、のみ必要である HTTP エンティティ内の指定したバイト範囲の一部の受信を要求するクライアントを使用します。 サーバーは、範囲ヘッダーの要求をサポートする必要はありません。  
  
 `rangeSpecifier` ので、これは、ほとんどの HTTP サーバーによって認識される唯一の範囲指定子はパラメーター"bytes"として指定するとは通常です。 設定、 `rangeSpecifier` を他のなんらかの文字列パラメーターがバイト数 \(バイトの範囲指定子では、IETF RFC 2616 で定義された\) 以外のユーザー設定の範囲指定子のサポートを使用します。  
  
 最初の 100 バイトの要求になる HTTP プロトコル要求に範囲ヘッダーの例は、次になります。  
  
 `Range: bytes=-99\r\n\r\n`  
  
 この例で、 `rangeSpecifier` "bytes"としてパラメーターを指定すると、 `range` パラメーター\-99 になります。  
  
 HTTP サーバーでは、応答で Accept\-ranges ヘッダーに範囲ヘッダーのサポートを示します。 バイト範囲をサポートしているサーバーから Accept\-ranges ヘッダーの例に次のようになります。  
  
 `Accept-Ranges: bytes\r\n\r\n`  
  
 Accept\-ranges ヘッダーがサーバーからの応答のヘッダーに受信しなかった場合、サーバーはサポートしていません範囲ヘッダー。 範囲をサポートしていませんが、Accept\-ranges ヘッダーを認識しているサーバーから Accept\-ranges ヘッダーの例に次のようになります。  
  
 `Accept-Ranges: none\r\n\r\n`  
  
 要求全体に関連付けられている HTTP ヘッダーだけが解析され、プロパティを使用してできる範囲の要求から応答を受信するときに、 <xref:System.Net.HttpWebResponse> クラスです。 それぞれの範囲に関連付けられたヘッダーが応答で返されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rangeSpecifier" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="rangeSpecifier" /> が正しくありません。</exception>
        <exception cref="T:System.InvalidOperationException">範囲ヘッダーを追加できませんでした。</exception>
        <altmember cref="Overload:System.Net.HttpWebRequest.AddRange" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (string rangeSpecifier, int from, int to);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(string rangeSpecifier, int32 from, int32 to) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.AddRange(System.String,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rangeSpecifier" Type="System.String" />
        <Parameter Name="from" Type="System.Int32" />
        <Parameter Name="to" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rangeSpecifier">範囲の説明。</param>
        <param name="from">データの送信を開始する位置。</param>
        <param name="to">データの送信を終了する位置。</param>
        <summary>指定した範囲の要求に範囲ヘッダーを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.HttpWebRequest.AddRange%2A?displayProperty=fullName> メソッドは、要求に範囲ヘッダーを追加します。  
  
 HTTP のすべてのエンティティがバイトのシーケンスとして HTTP メッセージに示されるので、バイトの範囲の概念は、任意の HTTP エンティティの有効です。 ただし、すべてのクライアントとサーバーは、バイト範囲の操作をサポートする必要があります。  
  
 要求に範囲ヘッダーは、のみ必要である HTTP エンティティ内の指定したバイト範囲の一部の受信を要求するクライアントを使用します。 サーバーは、範囲ヘッダーの要求をサポートする必要はありません。  
  
 `rangeSpecifier` ので、これは、ほとんどの HTTP サーバーによって認識される唯一の範囲指定子はパラメーター"bytes"として指定するとは通常です。 設定、 `rangeSpecifier` を他のなんらかの文字列パラメーターがバイト数 \(バイトの範囲指定子では、IETF RFC 2616 で定義された\) 以外のユーザー設定の範囲指定子のサポートを使用します。  
  
 最初の 100 バイトの要求になる HTTP プロトコル要求に範囲ヘッダーの例は、次になります。  
  
 `Range: bytes=0-99\r\n\r\n`  
  
 この例で、 `rangeSpecifier` "bytes"としてパラメーターを指定すると、 `from` パラメーターは 0 を指定し、 `to` パラメーターは 99 になります。  
  
 HTTP サーバーでは、応答で Accept\-ranges ヘッダーに範囲ヘッダーのサポートを示します。 バイト範囲をサポートしているサーバーから Accept\-ranges ヘッダーの例に次のようになります。  
  
 `Accept-Ranges: bytes\r\n\r\n`  
  
 Accept\-ranges ヘッダーに指定された文字列は、範囲指定子内で指定される、 `rangeSpecifier` このメソッドのパラメーターです。  
  
 Accept\-ranges ヘッダーがサーバーからの応答のヘッダーに受信しなかった場合、サーバーはサポートしていません範囲ヘッダー。 範囲をサポートしていませんが、Accept\-ranges ヘッダーを認識しているサーバーから Accept\-ranges ヘッダーの例に次のようになります。  
  
 `Accept-Ranges: none\r\n\r\n`  
  
 要求全体に関連付けられている HTTP ヘッダーだけが解析され、プロパティを使用してできる範囲の要求から応答を受信するときに、 <xref:System.Net.HttpWebResponse> クラスです。 それぞれの範囲に関連付けられたヘッダーが応答で返されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rangeSpecifier" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="from" /> は <paramref name="to" /> より大きい  
  
 または  
  
 <paramref name="from" /> または <paramref name="to" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="rangeSpecifier" /> が正しくありません。</exception>
        <exception cref="T:System.InvalidOperationException">範囲ヘッダーを追加できませんでした。</exception>
        <altmember cref="Overload:System.Net.HttpWebRequest.AddRange" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (string rangeSpecifier, long from, long to);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(string rangeSpecifier, int64 from, int64 to) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.AddRange(System.String,System.Int64,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rangeSpecifier" Type="System.String" />
        <Parameter Name="from" Type="System.Int64" />
        <Parameter Name="to" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="rangeSpecifier">範囲の説明。</param>
        <param name="from">データの送信を開始する位置。</param>
        <param name="to">データの送信を終了する位置。</param>
        <summary>指定した範囲の要求に範囲ヘッダーを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.HttpWebRequest.AddRange%2A?displayProperty=fullName> メソッドは、要求に範囲ヘッダーを追加します。  
  
 HTTP のすべてのエンティティがバイトのシーケンスとして HTTP メッセージに示されるので、バイトの範囲の概念は、任意の HTTP エンティティの有効です。 ただし、すべてのクライアントとサーバーは、バイト範囲の操作をサポートする必要があります。  
  
 要求に範囲ヘッダーは、のみ必要である HTTP エンティティ内の指定したバイト範囲の一部の受信を要求するクライアントを使用します。 サーバーは、範囲ヘッダーの要求をサポートする必要はありません。  
  
 `rangeSpecifier` ので、これは、ほとんどの HTTP サーバーによって認識される唯一の範囲指定子はパラメーター"bytes"として指定するとは通常です。 設定、 `rangeSpecifier` を他のなんらかの文字列パラメーターがバイト数 \(バイトの範囲指定子では、IETF RFC 2616 で定義された\) 以外のユーザー設定の範囲指定子のサポートを使用します。  
  
 最初の 100 バイトの要求になる HTTP プロトコル要求に範囲ヘッダーの例は、次になります。  
  
 `Range: bytes=0-99\r\n\r\n`  
  
 この例で、 `rangeSpecifier` "bytes"としてパラメーターを指定すると、 `from` パラメーターは 0 を指定し、 `to` パラメーターは 99 になります。  
  
 HTTP サーバーでは、応答で Accept\-ranges ヘッダーに範囲ヘッダーのサポートを示します。 バイト範囲をサポートしているサーバーから Accept\-ranges ヘッダーの例に次のようになります。  
  
 `Accept-Ranges: bytes\r\n\r\n`  
  
 Accept\-ranges ヘッダーに指定された文字列は、範囲指定子内で指定される、 `rangeSpecifier` このメソッドのパラメーターです。  
  
 Accept\-ranges ヘッダーがサーバーからの応答のヘッダーに受信しなかった場合、サーバーはサポートしていません範囲ヘッダー。 範囲をサポートしていませんが、Accept\-ranges ヘッダーを認識しているサーバーから Accept\-ranges ヘッダーの例に次のようになります。  
  
 `Accept-Ranges: none\r\n\r\n`  
  
 要求全体に関連付けられている HTTP ヘッダーだけが解析され、プロパティを使用してできる範囲の要求から応答を受信するときに、 <xref:System.Net.HttpWebResponse> クラスです。 それぞれの範囲に関連付けられたヘッダーが応答で返されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rangeSpecifier" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="from" /> は <paramref name="to" /> より大きい  
  
 または  
  
 <paramref name="from" /> または <paramref name="to" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="rangeSpecifier" /> が正しくありません。</exception>
        <exception cref="T:System.InvalidOperationException">範囲ヘッダーを追加できませんでした。</exception>
        <altmember cref="Overload:System.Net.HttpWebRequest.AddRange" />
      </Docs>
    </Member>
    <Member MemberName="Address">
      <MemberSignature Language="C#" Value="public Uri Address { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Address" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Address" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求に実際に応答するインターネット リソースの URI \(Uniform Resource Identifier\) を取得します。</summary>
        <value>要求に実際に応答するインターネット リソースを識別する <see cref="T:System.Uri" />。 既定値は、<see cref="M:System.Net.WebRequest.Create(System.String)" /> メソッドが要求を初期化するために使用する URI です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.HttpWebRequest.Address%2A> プロパティは、要求時に発生するすべてのリダイレクトが完了した後、URI に設定されています。  
  
 元の要求の URI を保持、 <xref:System.Net.HttpWebRequest.RequestUri%2A> プロパティです。  
  
   
  
## 例  
 次のコード例は、 <xref:System.Net.HttpWebRequest> オブジェクト `req` の値を設定は、要求を実行する別の場所にリダイレクトされ、 `hasChanged` 変数を `true` 要求がリダイレクトされた以外の場合 `hasChanged` に設定されている `false`します。  
  
 [!code-cpp[Classic HttpWebRequest.RequestUri Example\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic HttpWebRequest.RequestUri Example/CPP/source.cpp#1)]
 [!code-csharp[Classic HttpWebRequest.RequestUri Example\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpWebRequest.RequestUri Example/CS/source.cs#1)]
 [!code-vb[Classic HttpWebRequest.RequestUri Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpWebRequest.RequestUri Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowAutoRedirect">
      <MemberSignature Language="C#" Value="public virtual bool AllowAutoRedirect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowAutoRedirect" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.AllowAutoRedirect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求がリダイレクト応答に従うかどうかを示す値を取得または設定します。</summary>
        <value>要求がインターネット リソースからのリダイレクト応答に自動的に従う場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Set <xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A> to **languageKeyword tag is not supported!!!!**  
 if you want the request to automatically follow HTTP redirection headers to the new location of the resource. The maximum number of redirections to follow is set by the <xref:System.Net.HttpWebRequest.MaximumAutomaticRedirections%2A> property.  
  
 If <xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A> is set to **languageKeyword tag is not supported!!!!**  
, all responses with an HTTP status code from 300 to 399 is returned to the application.  
  
 The Authorization header is cleared on auto\-redirects and <xref:System.Net.HttpWebRequest> automatically tries to re\-authenticate to the redirected location. In practice, this means that an application can't put custom authentication information into the Authorization header if it is possible to encounter redirection. Instead, the application must implement and register a custom authentication module. The <xref:System.Net.AuthenticationManager?displayProperty=fullName> and related class are used to implement a custom authentication module. The <xref:System.Net.AuthenticationManager.Register%2A?displayProperty=fullName> method registers a custom authentication module.  
  
   
  
## 例  
 The following code example uses the <xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A> property to allow the request to follow redirection responses.  
  
 [!code-cpp[HttpWebRequest\_AllowAutoRedirect\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_AllowAutoRedirect/CPP/httpwebrequest_allowautoredirect.cpp#2)]
 [!code-csharp[HttpWebRequest\_AllowAutoRedirect\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_AllowAutoRedirect/CS/httpwebrequest_allowautoredirect.cs#2)]
 [!code-vb[HttpWebRequest\_AllowAutoRedirect\#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_AllowAutoRedirect/VB/httpwebrequest_allowautoredirect.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowReadStreamBuffering">
      <MemberSignature Language="C#" Value="public virtual bool AllowReadStreamBuffering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowReadStreamBuffering" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.AllowReadStreamBuffering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>インターネット リソースから受け取ったデータをバッファリングするかどうかを示す値を取得または設定します。</summary>
        <value>インターネット リソースから受け取ったデータをバッファリングする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  
  
 インターネット リソースから受信したデータのバッファリングを有効にする場合は <see langword="true" />。バッファリングを無効にする場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowWriteStreamBuffering">
      <MemberSignature Language="C#" Value="public virtual bool AllowWriteStreamBuffering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowWriteStreamBuffering" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>インターネット リソースに送信するデータをバッファリングするかどうかを示す値を取得または設定します。</summary>
        <value>インターネット リソースに送信するデータのバッファリングを有効にする場合は <see langword="true" />。バッファリングを無効にする場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.HttpWebRequest.AllowWriteStreamBuffering%2A> は `true`, 、要求のリダイレクトまたは認証の発生時に再送信する準備ができたので、データがメモリにバッファリングされています。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Net.HttpWebRequest.AllowWriteStreamBuffering%2A> プロパティをデータのバッファリングを無効にします。  
  
 [!code-cpp[HttpWebRequest\_AllowWriteStreamBuffering\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_AllowWriteStreamBuffering/CPP/httpwebrequest_allowwritestreambuffering.cpp#1)]
 [!code-csharp[HttpWebRequest\_AllowWriteStreamBuffering\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_AllowWriteStreamBuffering/CS/httpwebrequest_allowwritestreambuffering.cs#1)]
 [!code-vb[HttpWebRequest\_AllowWriteStreamBuffering\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_AllowWriteStreamBuffering/VB/httpwebrequest_allowwritestreambuffering.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>設定 <see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering" /> に <see langword="true" /> データ バッファーが使用可能なメモリを使用するために、大規模なデータセットをアップロードするときにパフォーマンスの問題が発生する可能性があります。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="AutomaticDecompression">
      <MemberSignature Language="C#" Value="public System.Net.DecompressionMethods AutomaticDecompression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.DecompressionMethods AutomaticDecompression" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.AutomaticDecompression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.DecompressionMethods</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>使用される圧縮解除の種類を取得または設定します。</summary>
        <value>使用される圧縮解除の種類を示す T:System.Net.DecompressionMethods オブジェクト。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">オブジェクトの現在の状態では、このプロパティを設定できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginGetRequestStream">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginGetRequestStream (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginGetRequestStream(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
          <see cref="T:System.AsyncCallback" /> デリゲート。</param>
        <param name="state">この要求に対して使用する状態オブジェクト。</param>
        <summary>データを書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクトの非同期要求を開始します。</summary>
        <returns>非同期の要求を参照する <see cref="T:System.IAsyncResult" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A> method starts an asynchronous request for a stream used to send data for the <xref:System.Net.HttpWebRequest>. The asynchronous callback method uses the <xref:System.Net.HttpWebRequest.EndGetRequestStream%2A> method to return the actual stream.  
  
 The <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A> method requires some synchronous setup tasks to complete \(DNS resolution, proxy detection, and TCP socket connection, for example\) before this method becomes asynchronous. As a result, this method should never be called on a user interface \(UI\) thread because it might take considerable time \(up to several minutes depending on network settings\) to complete the initial synchronous setup tasks before an exception for an error is thrown or the method succeeds.  
  
 To learn more about the thread pool, see [&#91;\<topic:\/\/cpconthreadpooling\>&#93;](http://msdn.microsoft.com/ja-jp/2be05b06-a42e-4c9d-a739-96c21d673927).  
  
> [!NOTE]
>  Your application cannot mix synchronous and asynchronous methods for a particular request. If you call the <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A> method, you must use the <xref:System.Net.HttpWebRequest.BeginGetResponse%2A> method to retrieve the response.  
  
> [!NOTE]
>  This member outputs trace information when you enable network tracing in your application. For more information, see [&#91;\<topic:\/\/conUsingNetworkTracing\>&#93;](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804).  
  
   
  
## 例  
 The following code example uses the <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A> method to make an asynchronous request for a stream instance.  
  
 [!code-cpp[HttpWebRequest\_BeginGetRequestStream\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_BeginGetRequestStream/CPP/httpwebrequest_begingetrequeststream.cpp#2)]
 [!code-csharp[HttpWebRequest\_BeginGetRequestStream\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_BeginGetRequestStream/CS/httpwebrequest_begingetrequeststream.cs#2)]
 [!code-vb[HttpWebRequest\_BeginGetRequestStream\#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_BeginGetRequestStream/VB/httpwebrequest_begingetrequeststream.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.ProtocolViolationException">
          <see cref="P:System.Net.HttpWebRequest.Method" /> プロパティは GET または HEAD です。  
  
 \-または\-  
  
 <see cref="P:System.Net.HttpWebRequest.KeepAlive" /> が <see langword="true" />、<see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering" /> が <see langword="false" />、<see cref="P:System.Net.HttpWebRequest.ContentLength" /> が \-1、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> で、<see cref="P:System.Net.HttpWebRequest.Method" /> が POST か PUT です。</exception>
        <exception cref="T:System.InvalidOperationException">前回の <see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" /> への呼び出しでストリームが使用中です。  
  
 または  
  
 <see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> が値に設定されており、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> です。  
  
 または  
  
 スレッド プールは、スレッドを使い切りました。</exception>
        <exception cref="T:System.NotSupportedException">要求キャッシュの検証コントロールは、この要求に対する応答がキャッシュから提供されることを示していますが、データを書き込む要求ではキャッシュを使用してはなりません。 正しく実装されていないカスタム キャッシュの検証コントロールを使用すると、この例外が発生する場合があります。</exception>
        <exception cref="T:System.Net.WebException">
          <see cref="M:System.Net.HttpWebRequest.Abort" /> は以前に呼び出されました。</exception>
        <exception cref="T:System.ObjectDisposedException">.NET Compact Framework アプリケーションでコンテンツの長さが 0 の要求ストリームが取得されず、正しく閉じられませんでした。 コンテンツの長さが 0 の要求の処理の詳細については、「[.NET Compact Framework でのネットワーク プログラミング](https://msdn.microsoft.com/subscriptions/downloads/1afx2b0f\(v=vs.80\).aspx)」をご覧ください。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginGetResponse">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginGetResponse (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginGetResponse(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
          <see cref="T:System.AsyncCallback" /> デリゲート。</param>
        <param name="state">この要求に対して使用する状態オブジェクト。</param>
        <summary>インターネット リソースへの非同期要求を開始します。</summary>
        <returns>応答の非同期要求を参照する <see cref="T:System.IAsyncResult" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.HttpWebRequest.BeginGetResponse%2A> メソッドは、インターネット リソースからの応答の非同期要求を開始します。 非同期コールバック メソッドを使用して、 <xref:System.Net.HttpWebRequest.EndGetResponse%2A> 実績を返すメソッドを <xref:System.Net.WebResponse>します。  
  
 A <xref:System.Net.ProtocolViolationException> プロパティの設定の場合に、いくつかのケースでスローされる、 <xref:System.Net.HttpWebRequest> クラスが競合しています。 アプリケーションを設定する場合、この例外が発生した、 <xref:System.Net.HttpWebRequest.ContentLength%2A> プロパティおよび <xref:System.Net.HttpWebRequest.SendChunked%2A> プロパティを `true`, 、し、HTTP GET 要求を送信します。 この例外は、アプリケーションは、ここではサポートされていない HTTP 1.0 プロトコルのみをサポートするサーバーにチャンクを送信しようとした場合に発生します。 アプリケーションが設定されていないデータを送信しようとする場合、この例外が発生した、 <xref:System.Net.HttpWebRequest.ContentLength%2A> プロパティまたは <xref:System.Net.HttpWebRequest.SendChunked%2A> は `false` バッファリングを無効にして、キープア ライブ接続で \(、 <xref:System.Net.HttpWebRequest.KeepAlive%2A> プロパティは `true`\)`.`  
  
 場合、 <xref:System.Net.WebException> がスローされるを使用して、 <xref:System.Net.WebException.Response%2A> と <xref:System.Net.WebException.Status%2A> サーバーからの応答を決定する例外のプロパティです。  
  
 <xref:System.Net.HttpWebRequest.BeginGetResponse%2A> 方法がいくつかの同期のセットアップ タスクをこのメソッドが非同期状態にする前に、\(DNS の解決、プロキシの検出、および例については、TCP ソケット接続\) を完了する必要があります。 その結果、このメソッド呼び出さないでユーザー インターフェイス \(UI\) スレッドでエラーの例外がスローまたはメソッドが成功する前に、初期同期のセットアップ タスクを完了する \(ネットワークの設定によっては数分\) までのかなりの時間がかかる場合がありますので。  
  
 スレッド プールに関する詳細については、「 [&#91;\<topic:\/\/cpconthreadpooling\>&#93;](http://msdn.microsoft.com/ja-jp/2be05b06-a42e-4c9d-a739-96c21d673927)します。  
  
> [!NOTE]
>  アプリケーションは、特定の要求の同期および非同期のメソッドを組み合わせることはできません。 呼び出した場合、 <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A> メソッドが使用する必要があります、 <xref:System.Net.HttpWebRequest.BeginGetResponse%2A> 応答を取得します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[&#91;\<topic:\/\/conUsingNetworkTracing\>&#93;](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Net.HttpWebRequest.BeginGetResponse%2A> をインターネット リソースへの非同期要求を作成するメソッドです。  
  
> [!NOTE]
>  非同期要求の場合は、タイムアウト メカニズムを実装するクライアント アプリケーションの役割を勧めします。 次のコード例では、これを行う方法を示します。  
  
 [!code-cpp[System.Net.HttpWebRequest.BeginGetResponse\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.HttpWebRequest.BeginGetResponse/CPP/begingetresponse.cpp#1)]
 [!code-csharp[System.Net.HttpWebRequest.BeginGetResponse\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.HttpWebRequest.BeginGetResponse/CS/begingetresponse.cs#1)]
 [!code-vb[System.Net.HttpWebRequest.BeginGetResponse\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.HttpWebRequest.BeginGetResponse/VB/begingetresponse.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">前回の <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> への呼び出しでストリームが既に使用中です。  
  
 または  
  
 <see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> が値に設定されており、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> です。  
  
 または  
  
 スレッド プールは、スレッドが不足しています。</exception>
        <exception cref="T:System.Net.ProtocolViolationException">
          <see cref="P:System.Net.HttpWebRequest.Method" /> が GET または HEAD で、<see cref="P:System.Net.HttpWebRequest.ContentLength" /> が 0 以上であるか <see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="true" />です。  
  
 または  
  
 <see cref="P:System.Net.HttpWebRequest.KeepAlive" /> が <see langword="true" />、<see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering" /> が <see langword="false" />、<see cref="P:System.Net.HttpWebRequest.ContentLength" /> が \-1、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> で、<see cref="P:System.Net.HttpWebRequest.Method" /> が POST か PUT です。  
  
 または  
  
 <see cref="T:System.Net.HttpWebRequest" /> にはエンティティ本体がありますが、<see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" /> メソッドを呼び出さずに <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> メソッドが呼び出されています。  
  
 \-または\-  
  
 <see cref="P:System.Net.HttpWebRequest.ContentLength" /> が 0 よりも大きい値に設定されていますが、アプリケーションは保証されたデータをすべては書き込みません。</exception>
        <exception cref="T:System.Net.WebException">
          <see cref="M:System.Net.HttpWebRequest.Abort" /> は以前に呼び出されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="ClientCertificates">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.ClientCertificates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509CertificateCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この要求に関連付けられているセキュリティ証明書のコレクションを取得または設定します。</summary>
        <value>この要求に関連付けられているセキュリティ証明書を格納している <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 An application can add a certificate to a collection, but might not have access rights to it. To use a certificate contained in the collection, the application must have the same access rights as the entity that issued the certificate.  
  
> [!NOTE]
>  The Framework caches SSL sessions as they are created and attempts to reuse a cached session for a new request, if possible. When attempting to reuse an SSL session, the Framework uses the first element of <xref:System.Net.HttpWebRequest.ClientCertificates%2A> \(if there is one\), or tries to reuse an anonymous sessions if <xref:System.Net.HttpWebRequest.ClientCertificates%2A> is empty.  
  
> [!NOTE]
>  For performance reasons, you shouldn't add a client certificate to a <xref:System.Net.HttpWebRequest> unless you know the server will ask for it.  
>   
>  For a code example illustrating how to enumerate the certificates in the client certificate store, see the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2Collection> class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作に指定された値は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public string Connection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Connection" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Connection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="Connection" /> HTTP ヘッダーの値を取得または設定します。</summary>
        <value>
          <see langword="Connection" /> HTTP ヘッダーの値。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 要求の送信、 <xref:System.Net.HttpWebRequest.Connection%2A> としてインターネット リソースへのプロパティ、 `Connection` HTTP ヘッダー。 場合の値、 <xref:System.Net.HttpWebRequest.KeepAlive%2A> プロパティは、 `true`, の末尾に"Keep alive"の値が付加されて、 `Connection` ヘッダー。  
  
 オフにする、 `Connection` HTTP ヘッダーを設定、 <xref:System.Net.HttpWebRequest.Connection%2A> プロパティを `null`します。  
  
 変更する、 <xref:System.Net.HttpWebRequest.Connection%2A> プロパティを呼び出して、要求が開始された後、 <xref:System.Net.HttpWebRequest.GetRequestStream%2A>, 、<xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A>, 、<xref:System.Net.HttpWebRequest.GetResponse%2A>, 、または <xref:System.Net.HttpWebRequest.BeginGetResponse%2A> メソッドでのスロー、 <xref:System.InvalidOperationException>です。  
  
> [!NOTE]
>  このプロパティの値が格納されている <xref:System.Net.WebHeaderCollection>します。 WebHeaderCollection が設定されている場合、プロパティ値は失われます。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Net.HttpWebRequest.Connection%2A> 接続 HTTP ヘッダーの値を設定するプロパティです。  
  
 [!code-cpp[HttpWebRequest\_Connection\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_Connection/CPP/httpwebrequest_connection.cpp#1)]
 [!code-csharp[HttpWebRequest\_Connection\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_Connection/CS/httpwebrequest_connection.cs#1)]
 [!code-vb[HttpWebRequest\_Connection\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_Connection/VB/httpwebrequest_connection.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Net.HttpWebRequest.Connection" /> の値を Keep\-alive または Close に設定します。</exception>
      </Docs>
    </Member>
    <Member MemberName="ConnectionGroupName">
      <MemberSignature Language="C#" Value="public override string ConnectionGroupName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConnectionGroupName" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.ConnectionGroupName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求に対して使用する接続グループの名前を取得または設定します。</summary>
        <value>この要求に対して使用する接続グループの名前。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Net.HttpWebRequest.ConnectionGroupName%2A> property enables you to associate a request with a connection group. This is useful when your application makes requests to one server for different users, such as a Web site that retrieves customer information from a database server.  
  
   
  
## 例  
 The following code example show how to use user information to form a connection group, assuming that the variables **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, and **parameterReference tag is not supported!!!!**  
 are set by the application before this code is called.  
  
 [!code-cpp[Classic HttpWebRequest.ConnectionGroupName Example\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic HttpWebRequest.ConnectionGroupName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic HttpWebRequest.ConnectionGroupName Example\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpWebRequest.ConnectionGroupName Example/CS/source.cs#1)]
 [!code-vb[Classic HttpWebRequest.ConnectionGroupName Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpWebRequest.ConnectionGroupName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Each connection group creates additional connections for a server. This may result in exceeding the number of connections set by the <see cref="P:System.Net.ServicePoint.ConnectionLimit" /> property for that server.</para>
        </block>
        <altmember cref="P:System.Net.Configuration.ConnectionManagementElement.MaxConnection" />
        <altmember cref="P:System.Net.WebRequest.ConnectionGroupName" />
      </Docs>
    </Member>
    <Member MemberName="ContentLength">
      <MemberSignature Language="C#" Value="public override long ContentLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ContentLength" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.ContentLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="Content-length" /> HTTP ヘッダーを取得または設定します。</summary>
        <value>インターネット リソースに送信するデータのバイト数。 既定値は \-1 です。このプロパティが設定されていないこと、および送信する要求データが存在しないことを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Net.HttpWebRequest.ContentLength%2A> property contains the value to send as the **languageKeyword tag is not supported!!!!**  
 HTTP header with the request.  
  
 Any value other than \-1 in the <xref:System.Net.HttpWebRequest.ContentLength%2A> property indicates that the request uploads data and that only methods that upload data are allowed to be set in the <xref:System.Net.HttpWebRequest.Method%2A> property.  
  
 After the <xref:System.Net.HttpWebRequest.ContentLength%2A> property is set to a value, that number of bytes must be written to the request stream that is returned by calling the <xref:System.Net.HttpWebRequest.GetRequestStream%2A> method or both the <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A> and the <xref:System.Net.HttpWebRequest.EndGetRequestStream%2A> methods.  
  
> [!NOTE]
>  The value for this property is stored in <xref:System.Net.WebHeaderCollection>. If WebHeaderCollection is set, the property value is lost.  
  
   
  
## 例  
 The following code example sets the <xref:System.Net.HttpWebRequest.ContentLength%2A> property to the length of the string being posted.  
  
 [!code-cpp[HttpWebRequest\_ContentLength\#4](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_ContentLength/CPP/httpwebrequest_contentlength.cpp#4)]
 [!code-csharp[HttpWebRequest\_ContentLength\#4](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_ContentLength/CS/httpwebrequest_contentlength.cs#4)]
 [!code-vb[HttpWebRequest\_ContentLength\#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_ContentLength/VB/httpwebrequest_contentlength.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Net.HttpWebRequest.GetRequestStream" />、<see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />、<see cref="M:System.Net.HttpWebRequest.GetResponse" />、または <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> メソッドを呼び出すことにより要求が開始されました。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">新規 <see cref="P:System.Net.HttpWebRequest.ContentLength" /> 値が 0 未満です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ContentType">
      <MemberSignature Language="C#" Value="public override string ContentType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContentType" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.ContentType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="Content-type" /> HTTP ヘッダーの値を取得または設定します。</summary>
        <value>
          <see langword="Content-type" /> HTTP ヘッダーの値。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Net.HttpWebRequest.ContentType%2A> property contains the media type of the request. Values assigned to the <xref:System.Net.HttpWebRequest.ContentType%2A> property replace any existing contents when the request sends the **languageKeyword tag is not supported!!!!**  
 HTTP header.  
  
 To clear the **languageKeyword tag is not supported!!!!**  
 HTTP header, set the <xref:System.Net.HttpWebRequest.ContentType%2A> property to **languageKeyword tag is not supported!!!!**  
.  
  
> [!NOTE]
>  The value for this property is stored in <xref:System.Net.WebHeaderCollection> . If <xref:System.Net.WebHeaderCollection> is set, the property value is lost.  
  
   
  
## 例  
 The following code example sets the <xref:System.Net.HttpWebRequest.ContentType%2A> property.  
  
 [!code-cpp[HttpWebRequest\_ContentLength\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_ContentLength/CPP/httpwebrequest_contentlength.cpp#1)]
 [!code-csharp[HttpWebRequest\_ContentLength\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_ContentLength/CS/httpwebrequest_contentlength.cs#1)]
 [!code-vb[HttpWebRequest\_ContentLength\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_ContentLength/VB/httpwebrequest_contentlength.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContinueDelegate">
      <MemberSignature Language="C#" Value="public System.Net.HttpContinueDelegate ContinueDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.HttpContinueDelegate ContinueDelegate" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.ContinueDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.HttpContinueDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>インターネット リソースから HTTP 100\-continue 応答を受信したときに呼び出されるデリゲート メソッドを取得または設定します。</summary>
        <value>インターネット リソースから HTTP Continue 応答が返されたときに実行されるコールバック メソッドを実装するデリゲート。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Net.HttpWebRequest.ContinueDelegate%2A> property specifies the callback method to call when the client receives a 100\-Continue response.  
  
 When the <xref:System.Net.HttpWebRequest.ContinueDelegate%2A> property is set, the client calls the delegate whenever protocol responses of type <xref:System.Net.HttpStatusCode.Continue?displayProperty=fullName> \(100\) are received. This is useful if you want the client to display the status of the data being received from the Internet resource.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Configuration.HttpWebRequestElement.MaximumUnauthorizedUploadLength" />
      </Docs>
    </Member>
    <Member MemberName="ContinueTimeout">
      <MemberSignature Language="C#" Value="public int ContinueTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ContinueTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.ContinueTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>100 回の続行まで待機するミリ秒単位のタイムアウト値をサーバーから取得または設定します。</summary>
        <value>100 回の続行まで待機するミリ秒単位のタイムアウト値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合は、100\-タイムアウトになると、エンティティ本体を送信する前に、応答を受信しました。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookieContainer">
      <MemberSignature Language="C#" Value="public virtual System.Net.CookieContainer CookieContainer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.CookieContainer CookieContainer" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.CookieContainer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.CookieContainer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求に関連付けられているクッキーを取得または設定します。</summary>
        <value>この要求に関連付けられているクッキーを格納している <see cref="T:System.Net.CookieContainer" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Net.HttpWebRequest.CookieContainer%2A> property provides an instance of the <xref:System.Net.CookieContainer> class that contains the cookies associated with this request.  
  
 <xref:System.Net.HttpWebRequest.CookieContainer%2A> is `null` by default. You must assign a <xref:System.Net.CookieContainer> object to the property to have cookies returned in the <xref:System.Net.HttpWebResponse.Cookies%2A> property of the <xref:System.Net.HttpWebResponse> returned by the <xref:System.Net.HttpWebRequest.GetResponse%2A> method.  
  
> [!NOTE]
>  For security reasons, cookies are disabled by default. If you want to use cookies, use the <xref:System.Net.HttpWebRequest.CookieContainer%2A> property to enable cookies.  
  
   
  
## 例  
 The following code example sends a request to a URL and displays the cookies returned in the response.  
  
 [!code-cpp[NCLCookies\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCookies/CPP/cookiessnippets.cpp#1)]
 [!code-csharp[NCLCookies\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCookies/CS/cookiessnippets.cs#1)]
 [!code-vb[NCLCookies\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLCookies/VB/cookiessnippets.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.CookieContainer" />
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public override System.Net.ICredentials Credentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ICredentials Credentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Credentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.ICredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求に対して使用する認証情報を取得または設定します。</summary>
        <value>要求と関連付けられた認証資格情報を格納する <see cref="T:System.Net.ICredentials" />。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Net.HttpWebRequest.Credentials%2A> property contains authentication information to identify the maker of the request. The <xref:System.Net.HttpWebRequest.Credentials%2A> property can be either a <xref:System.Net.NetworkCredential>, in which case the user, password, and domain information contained in the <xref:System.Net.NetworkCredential> object is used to authenticate the request, or it can be a <xref:System.Net.CredentialCache>, in which case the Uniform Resource Identifier \(URI\) of the request is used to determine the user, password, and domain information to use to authenticate the request.  
  
 In most client scenarios, you should use the <xref:System.Net.CredentialCache.DefaultCredentials%2A> property, which contains the credentials of the currently logged on user. To do this, set the <xref:System.Net.WebClient.UseDefaultCredentials%2A> property to **languageKeyword tag is not supported!!!!**  
 instead of setting this property.  
  
 If the <xref:System.Net.HttpWebRequest> class is being used in a middle\-tier application, such as an ASP.NET application, the credentials in the <xref:System.Net.CredentialCache.DefaultCredentials%2A> property belong to the account running the ASP page \(the server\-side credentials\). Typically, you would set this property to the credentials of the client on whose behalf the request is made.  
  
> [!NOTE]
>  The NTLM authentication scheme cannot be used to impersonate another user. Kerberos must be specially configured to support impersonation.  
  
 To restrict HttpWebRequest to one or more authentication methods, use the <xref:System.Net.CredentialCache> class and bind your credentials to one or more authentication schemes  
  
 Supported authentication schemes include Digest, Negotiate, Kerberos, NTLM, and Basic.  
  
   
  
## 例  
 The following code example sets the credentials for a request.  
  
 [!code-cpp[NCLResponse1\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLResponse1/CPP/httpwebrequest1.cpp#1)]
 [!code-csharp[NCLResponse1\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLResponse1/CS/httpwebrequest1.cs#1)]
 [!code-vb[NCLResponse1\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLResponse1/VB/httpwebrequest1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>HTTP 要求で使用する <see langword="Date" /> HTTP ヘッダー値を取得または設定します。</summary>
        <value>HTTP 要求の Date ヘッダーの値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 If the Date header is **languageKeyword tag is not supported!!!!**  
, then the return value will be set to <xref:System.DateTime.MinValue?displayProperty=fullName>.  
  
 The <xref:System.Net.HttpWebRequest.Date%2A> property is a standard <xref:System.DateTime?displayProperty=fullName> object and can contain a <xref:System.DateTimeKind?displayProperty=fullName> field of <xref:System.DateTimeKind.Local?displayProperty=fullName>, <xref:System.DateTimeKind.Utc?displayProperty=fullName>, or <xref:System.DateTimeKind.Unspecified?displayProperty=fullName>. Any kind of time can be set when using the <xref:System.Net.HttpWebRequest.Date%2A> property. If <xref:System.DateTimeKind.Unspecified?displayProperty=fullName> is set or retrieved, the <xref:System.Net.HttpWebRequest.Date%2A> property is assumed to be <xref:System.DateTimeKind.Local?displayProperty=fullName> \(local time\).  
  
 The classes in the <xref:System.Net> namespace always write it out the <xref:System.Net.HttpWebRequest.Date%2A> property on the wire during transmission in standard form using GMT \(Utc\) format.  
  
 If the <xref:System.Net.HttpWebRequest.Date%2A> property is set to <xref:System.DateTime.MinValue?displayProperty=fullName>, then the **languageKeyword tag is not supported!!!!**  
 HTTP header is removed from the <xref:System.Net.HttpWebRequest.Headers%2A> property and the <xref:System.Net.WebHeaderCollection>.  
  
 If the <xref:System.Net.HttpWebRequest.Date%2A> property is <xref:System.DateTime.MinValue?displayProperty=fullName>, this indicates that the **languageKeyword tag is not supported!!!!**  
 HTTP header is not included in the <xref:System.Net.HttpWebRequest.Headers%2A> property and the <xref:System.Net.WebHeaderCollection>.  
  
> [!NOTE]
>  The value for this property is stored in <xref:System.Net.WebHeaderCollection>. If WebHeaderCollection is set, the property value is lost.  
  
 If the <xref:System.Net.HttpWebRequest.Date%2A> is set and an attempt is made to send a <xref:System.Net.HttpWebRequest> with no body, then a <xref:System.Net.ProtocolViolationException?displayProperty=fullName> will be thrown by the <xref:System.Net.HttpWebRequest.BeginGetResponse%2A>, <xref:System.Net.HttpWebRequest.GetResponse%2A>, and <xref:System.Net.HttpWebRequest.EndGetResponse%2A> methods.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultCachePolicy">
      <MemberSignature Language="C#" Value="public static System.Net.Cache.RequestCachePolicy DefaultCachePolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Net.Cache.RequestCachePolicy DefaultCachePolicy" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.DefaultCachePolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Cache.RequestCachePolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この要求の既定のキャッシュ ポリシーを取得または設定します。</summary>
        <value>他のポリシーが適用できない場合に、この要求で有効なキャッシュ ポリシーを指定する <see cref="T:System.Net.Cache.HttpRequestCachePolicy" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Setting this property registers the specified policy for the HTTP and HTTPS schemes. This policy is used for this request if:  
  
 There is no <xref:System.Net.WebRequest.CachePolicy%2A?displayProperty=fullName> property specified for this request.  
  
 \- or \-  
  
 The machine and application configuration files do not specify a cache policy that is applicable to the Uniform Resource Identifier \(URI\) used to create this request.  
  
 The cache policy determines whether the requested resource can be taken from a cache instead of sending the request to the resource host computer.  
  
 A copy of a resource is only added to the cache if the response stream for the resource is retrieved and read to the end of the stream. So another request for the same resource could use a cached copy, depending on the cache policy level for this request.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Net.WebPermission">for unrestricted access to network resources. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Net.Cache.RequestCachePolicy" />
        <altmember cref="T:System.Net.Cache.HttpRequestCacheLevel" />
        <altmember cref="T:System.Net.Cache.RequestCacheLevel" />
        <altmember cref="P:System.Net.WebRequest.CachePolicy" />
      </Docs>
    </Member>
    <Member MemberName="DefaultMaximumErrorResponseLength">
      <MemberSignature Language="C#" Value="public static int DefaultMaximumErrorResponseLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 DefaultMaximumErrorResponseLength" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.DefaultMaximumErrorResponseLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>HTTP エラー応答の既定の最大長を取得または設定します。</summary>
        <value>HTTP エラー応答の既定の最大長。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">値は 0 より小さく、\-1 とは異なっています。</exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultMaximumResponseHeadersLength">
      <MemberSignature Language="C#" Value="public static int DefaultMaximumResponseHeadersLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 DefaultMaximumResponseHeadersLength" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Use this")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Net.HttpWebRequest.MaximumResponseHeadersLength" /> プロパティの既定値を取得または設定します。</summary>
        <value>受信した応答ヘッダーの KB \(1024 バイト\) 単位の既定の最大長。 既定の構成ファイルは、この値を 64 KB に設定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The length of the response header received the response status line and any extra control characters that are received as part of HTTP protocol. A value of \-1 means no limit is imposed on the response headers received; a value of 0 means that all requests fail.  
  
 This value can also be changed in the configuration file. The impact of this property can be overridden by setting the <xref:System.Net.HttpWebRequest.MaximumResponseHeadersLength%2A> property on an instance of the <xref:System.Net.HttpWebRequest> class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">値は \-1 と等しくなく、0 未満です。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndGetRequestStream">
      <MemberSignature Language="C#" Value="public override System.IO.Stream EndGetRequestStream (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IO.Stream EndGetRequestStream(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.EndGetRequestStream(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">ストリームの保留中の要求。</param>
        <summary>データを書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクトの非同期要求を終了します。</summary>
        <returns>要求データを書き込むために使用する <see cref="T:System.IO.Stream" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Net.HttpWebRequest.EndGetRequestStream%2A> method completes an asynchronous request for a stream that was started by the <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A> method. After the <xref:System.IO.Stream> object has been returned, you can send data with the <xref:System.Net.HttpWebRequest> by using the <xref:System.IO.Stream.Write%2A?displayProperty=fullName> method.  
  
> [!NOTE]
>  You must set the value of the <xref:System.Net.HttpWebRequest.ContentLength%2A> property before writing data to the stream.  
  
> [!CAUTION]
>  You must call the <xref:System.IO.Stream.Close%2A?displayProperty=fullName> method to close the stream and release the connection for reuse. Failure to close the stream causes your application to run out of connections.  
  
> [!NOTE]
>  This member outputs trace information when you enable network tracing in your application. For more information, see [&#91;\<topic:\/\/conUsingNetworkTracing\>&#93;](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804).  
  
   
  
## 例  
 The following code example uses the <xref:System.Net.HttpWebRequest.EndGetRequestStream%2A> method to end an asynchronous request for a stream instance.  
  
 [!code-cpp[HttpWebRequest\_BeginGetRequestStream\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_BeginGetRequestStream/CPP/httpwebrequest_begingetrequeststream.cpp#2)]
 [!code-csharp[HttpWebRequest\_BeginGetRequestStream\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_BeginGetRequestStream/CS/httpwebrequest_begingetrequeststream.cs#2)]
 [!code-vb[HttpWebRequest\_BeginGetRequestStream\#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_BeginGetRequestStream/VB/httpwebrequest_begingetrequeststream.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.IOException">要求が完了しませんでした。使用できるストリームはありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> は、<see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" /> の呼び出しから現在のインスタンスにより返されたものではありません。</exception>
        <exception cref="T:System.InvalidOperationException">このメソッドは以前に <paramref name="asyncResult" /> を使用して呼び出されました。</exception>
        <exception cref="T:System.Net.WebException">
          <see cref="M:System.Net.HttpWebRequest.Abort" /> は以前に呼び出されました。  
  
 または  
  
 この要求の処理中にエラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndGetRequestStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream EndGetRequestStream (IAsyncResult asyncResult, out System.Net.TransportContext transportContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream EndGetRequestStream(class System.IAsyncResult asyncResult, class System.Net.TransportContext transportContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.EndGetRequestStream(System.IAsyncResult,System.Net.TransportContext@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="context" Type="System.Net.TransportContext&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="asyncResult">ストリームの保留中の要求。</param>
        <param name="transportContext">To be added.</param>
        <summary>データを書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクトに対する非同期要求を終了し、そのストリームに関連付けられている <see cref="T:System.Net.TransportContext" /> を出力します。</summary>
        <returns>要求データを書き込むために使用する <see cref="T:System.IO.Stream" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Net.HttpWebRequest.EndGetRequestStream%2A> method completes an asynchronous request for a stream that was started by the <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A> method and outputs the <xref:System.Net.TransportContext> associated with the stream. After the <xref:System.IO.Stream> object has been returned, you can send data with the <xref:System.Net.HttpWebRequest> by using the <xref:System.IO.Stream.Write%2A?displayProperty=fullName> method.  
  
 Some applications that use integrated Windows authentication with extended protection may need to be able to query the transport layer used by <xref:System.Net.HttpWebRequest> in order to retrieve the channel binding token \(CBT\) from the underlying TLS channel. The <xref:System.Net.HttpWebRequest.GetRequestStream%2A> method provides access to this information for HTTP methods which have a request body \(**languageKeyword tag is not supported!!!!**  
 and **languageKeyword tag is not supported!!!!**  
 requests\). This is only needed if the application is implementing its own authentication and needs access to the CBT.  
  
> [!NOTE]
>  If an application needs to set the value of the <xref:System.Net.HttpWebRequest.ContentLength%2A> property, then this must be done before retrieving the stream and writing data to it.  
  
> [!CAUTION]
>  You must call the <xref:System.IO.Stream.Close%2A?displayProperty=fullName> method to close the stream and release the connection for reuse. Failure to close the stream causes your application to run out of connections.  
  
> [!NOTE]
>  This member outputs trace information when you enable network tracing in your application. For more information, see [&#91;\<topic:\/\/conUsingNetworkTracing\>&#93;](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804).  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">呼び出しから <see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" /> まで、<paramref name="asyncResult" /> は現在のインスタンスにより返されませんでした。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">このメソッドは以前に <paramref name="asyncResult" /> を使用して呼び出されました。</exception>
        <exception cref="T:System.IO.IOException">要求が完了しませんでした。使用できるストリームはありません。</exception>
        <exception cref="T:System.Net.WebException">
          <see cref="M:System.Net.HttpWebRequest.Abort" /> は以前に呼び出されました。  
  
 または  
  
 この要求の処理中にエラーが発生しました。</exception>
        <altmember cref="T:System.Net.TransportContext" />
        <altmember cref="M:System.Net.TransportContext.GetChannelBinding(System.Security.Authentication.ExtendedProtection.ChannelBindingKind)" />
        <altmember cref="N:System.Security.Authentication.ExtendedProtection" />
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <Member MemberName="EndGetResponse">
      <MemberSignature Language="C#" Value="public override System.Net.WebResponse EndGetResponse (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Net.WebResponse EndGetResponse(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.EndGetResponse(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">応答の保留中の要求。</param>
        <summary>インターネット リソースへの非同期要求を終了します。</summary>
        <returns>インターネット リソースからの応答を格納している <see cref="T:System.Net.WebResponse" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.HttpWebRequest.EndGetResponse%2A> メソッドの呼び出しによって開始されたインターネット リソースへの非同期要求を完了すると、 <xref:System.Net.HttpWebRequest.BeginGetResponse%2A> メソッドです。  
  
> [!CAUTION]
>  呼び出す必要があります、 <xref:System.Net.HttpWebResponse.Close%2A> メソッドは、ストリームを閉じ、接続を解放します。 そのためには障害の接続が不足するアプリケーションがあります。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[&#91;\<topic:\/\/conUsingNetworkTracing\>&#93;](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Net.HttpWebRequest.EndGetResponse%2A> メソッドをインターネット リソースへの非同期要求を終了します。  
  
 [!code-cpp[HttpWebRequest\_BeginGetResponse\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_BeginGetResponse/CPP/httpwebrequest_begingetresponse.cpp#2)]
 [!code-csharp[HttpWebRequest\_BeginGetResponse\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_BeginGetResponse/CS/httpwebrequest_begingetresponse.cs#2)]
 [!code-vb[HttpWebRequest\_BeginGetResponse\#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_BeginGetResponse/VB/httpwebrequest_begingetresponse.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">このメソッドは以前に <paramref name="asyncResult." /> を使用して呼び出されました。  
  
 または  
  
 <see cref="P:System.Net.HttpWebRequest.ContentLength" /> プロパティが 0 より大きいですが、要求ストリームにデータが書き込まれていません。</exception>
        <exception cref="T:System.Net.WebException">
          <see cref="M:System.Net.HttpWebRequest.Abort" /> は以前に呼び出されました。  
  
 または  
  
 この要求の処理中にエラーが発生しました。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> は、<see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> の呼び出しから現在のインスタンスにより返されたものではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Expect">
      <MemberSignature Language="C#" Value="public string Expect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Expect" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Expect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>HTTP <see langword="Expect" /> ヘッダーの値を取得または設定します。</summary>
        <value>
          <see langword="Expect" /> HTTP ヘッダーの内容。 既定値は <see langword="null" /> です。  
  
 <block subset="none" type="note">  
<para>  
 このプロパティの値が格納されている <see cref="T:System.Net.WebHeaderCollection" />します。 WebHeaderCollection が設定されている場合、プロパティ値は失われます。  
  
</para>  
</block></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">部分文字列として "100\-continue" を含む文字列に <see langword="Expect" /> が設定されます。</exception>
        <altmember cref="P:System.Net.Configuration.HttpWebRequestElement.MaximumUnauthorizedUploadLength" />
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="protected override void GetObjectData (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo serializationInfo, valuetype System.Runtime.Serialization.StreamingContext streamingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serializationInfo" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="streamingContext" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="serializationInfo">データの読み込み先となる <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
        <param name="streamingContext">このシリアル化の転送先を指定する <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
        <summary>
          <see cref="T:System.Runtime.Serialization.SerializationInfo" /> に、ターゲット オブジェクトをシリアル化するために必要なデータを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 含まれるすべてのオブジェクト、 <xref:System.Runtime.Serialization.SerializationInfo> 自動的に追跡され、フォーマッタによってシリアル化します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRequestStream">
      <MemberSignature Language="C#" Value="public override System.IO.Stream GetRequestStream ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IO.Stream GetRequestStream() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.GetRequestStream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>要求データを書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクトを取得します。</summary>
        <returns>要求データを書き込むために使用する <see cref="T:System.IO.Stream" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.HttpWebRequest.GetRequestStream%2A> メソッドを使用してデータを送信するストリームを返します、 <xref:System.Net.HttpWebRequest>です。 後に、 <xref:System.IO.Stream> オブジェクトが返された、使用してデータを送信する、 <xref:System.Net.HttpWebRequest> を使用して、 <xref:System.IO.Stream.Write%2A?displayProperty=fullName> メソッドです。  
  
 値を設定する必要がある場合、 <xref:System.Net.HttpWebRequest.ContentLength%2A> プロパティには、し、これは、ストリームを取得する前に行う必要があります。  
  
 呼び出す必要があります、 <xref:System.IO.Stream.Close%2A?displayProperty=fullName> メソッドは、ストリームを閉じ、再利用するための接続を解放します。 ストリームを閉じると、アプリケーションを接続から実行します。  
  
> [!NOTE]
>  アプリケーションは、特定の要求の同期および非同期のメソッドを組み合わせることはできません。 呼び出した場合、 <xref:System.Net.HttpWebRequest.GetRequestStream%2A> メソッドが使用する必要があります、 <xref:System.Net.HttpWebRequest.GetResponse%2A> 応答を取得します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[&#91;\<topic:\/\/conUsingNetworkTracing\>&#93;](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Net.HttpWebRequest.GetRequestStream%2A> ストリームのインスタンスを返します。  
  
 [!code-cpp[HttpWebRequest\_ContentLength\#4](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_ContentLength/CPP/httpwebrequest_contentlength.cpp#4)]
 [!code-csharp[HttpWebRequest\_ContentLength\#4](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_ContentLength/CS/httpwebrequest_contentlength.cs#4)]
 [!code-vb[HttpWebRequest\_ContentLength\#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_ContentLength/VB/httpwebrequest_contentlength.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.ProtocolViolationException">
          <see cref="P:System.Net.HttpWebRequest.Method" /> プロパティは GET または HEAD です。  
  
 \-または\-  
  
 <see cref="P:System.Net.HttpWebRequest.KeepAlive" /> が <see langword="true" />、<see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering" /> が <see langword="false" />、<see cref="P:System.Net.HttpWebRequest.ContentLength" /> が \-1、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> で、<see cref="P:System.Net.HttpWebRequest.Method" /> が POST か PUT です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Net.HttpWebRequest.GetRequestStream" /> メソッドが複数回呼び出されています。  
  
 \-または\-  
  
 <see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> が値に設定されており、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> です。</exception>
        <exception cref="T:System.NotSupportedException">要求キャッシュの検証コントロールは、この要求に対する応答がキャッシュから提供されたことを示していますが、データを書き込む要求ではキャッシュを使用してはなりません。 正しく実装されていないカスタム キャッシュの検証コントロールを使用すると、この例外が発生する場合があります。</exception>
        <exception cref="T:System.Net.WebException">
          <see cref="M:System.Net.HttpWebRequest.Abort" /> は以前に呼び出されました。  
  
 \-または\-  
  
 要求のタイムアウト期間の期限が切れました。  
  
 \-または\-  
  
 この要求の処理中にエラーが発生しました。</exception>
        <exception cref="T:System.ObjectDisposedException">.NET Compact Framework アプリケーションでコンテンツの長さが 0 の要求ストリームが取得されず、正しく閉じられませんでした。 コンテンツの長さがゼロ要求の処理の詳細については、次を参照してください。 [Network Programming in the .NET Compact Framework](https://msdn.microsoft.com/subscriptions/downloads/1afx2b0f\(v=vs.80\).aspx)します。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRequestStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream GetRequestStream (out System.Net.TransportContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream GetRequestStream(class System.Net.TransportContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.GetRequestStream(System.Net.TransportContext@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Net.TransportContext&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="context">
          <see cref="T:System.Net.TransportContext" /> の <see cref="T:System.IO.Stream" />。</param>
        <summary>要求データを書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクトを取得し、そのストリームに関連付けられている <see cref="T:System.Net.TransportContext" /> を出力します。</summary>
        <returns>要求データを書き込むために使用する <see cref="T:System.IO.Stream" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.HttpWebRequest.GetRequestStream%2A> メソッドを使用してデータを送信するストリームを返します、 <xref:System.Net.HttpWebRequest> し、出力、 <xref:System.Net.TransportContext> ストリームに関連付けられています。 後に、 <xref:System.IO.Stream> オブジェクトが返された、使用してデータを送信する、 <xref:System.Net.HttpWebRequest> を使用して、 <xref:System.IO.Stream.Write%2A?displayProperty=fullName> メソッドです。  
  
 拡張保護付き統合 Windows 認証を使用して一部のアプリケーションをで使用されるトランスポート層をクエリできるようにする必要がある <xref:System.Net.HttpWebRequest> 基になる TLS チャネルからチャネル バインディング トークン \(CBT\) を取得するためです。<xref:System.Net.HttpWebRequest.GetRequestStream%2A> メソッドは要求本文の HTTP メソッドのこの情報へのアクセスを提供する \(`POST` と `PUT` 要求\)。 これは、アプリケーションが独自の認証を実装する、CBT へのアクセスを必要がある場合のみ必要です。  
  
 値を設定する必要がある場合、 <xref:System.Net.HttpWebRequest.ContentLength%2A> プロパティには、し、これは、ストリームを取得する前に行う必要があります。  
  
 呼び出す必要があります、 <xref:System.IO.Stream.Close%2A?displayProperty=fullName> メソッドは、ストリームを閉じ、再利用するための接続を解放します。 ストリームを閉じると、アプリケーションを接続から実行します。  
  
> [!NOTE]
>  アプリケーションは、特定の要求の同期および非同期のメソッドを組み合わせることはできません。 呼び出した場合、 <xref:System.Net.HttpWebRequest.GetRequestStream%2A> メソッドが使用する必要があります、 <xref:System.Net.HttpWebRequest.GetResponse%2A> 応答を取得します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[&#91;\<topic:\/\/conUsingNetworkTracing\>&#93;](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">
          <see cref="M:System.Net.HttpWebRequest.GetRequestStream" /> メソッドが <see cref="T:System.IO.Stream" /> を取得できませんでした。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Net.HttpWebRequest.GetRequestStream" /> メソッドが複数回呼び出されています。  
  
 \-または\-  
  
 <see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> が値に設定されており、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> です。</exception>
        <exception cref="T:System.NotSupportedException">要求キャッシュの検証コントロールは、この要求に対する応答がキャッシュから提供されたことを示していますが、データを書き込む要求ではキャッシュを使用してはなりません。 正しく実装されていないカスタム キャッシュの検証コントロールを使用すると、この例外が発生する場合があります。</exception>
        <exception cref="T:System.Net.ProtocolViolationException">
          <see cref="P:System.Net.HttpWebRequest.Method" /> プロパティは GET または HEAD です。  
  
 \-または\-  
  
 <see cref="P:System.Net.HttpWebRequest.KeepAlive" /> が <see langword="true" />、<see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering" /> が <see langword="false" />、<see cref="P:System.Net.HttpWebRequest.ContentLength" /> が \-1、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> で、<see cref="P:System.Net.HttpWebRequest.Method" /> が POST か PUT です。</exception>
        <exception cref="T:System.Net.WebException">
          <see cref="M:System.Net.HttpWebRequest.Abort" /> は前に呼び出されました。  
  
 \-または\-  
  
 要求のタイムアウト期間の期限が切れました。  
  
 \-または\-  
  
 この要求の処理中にエラーが発生しました。</exception>
        <altmember cref="T:System.Net.TransportContext" />
        <altmember cref="M:System.Net.TransportContext.GetChannelBinding(System.Security.Authentication.ExtendedProtection.ChannelBindingKind)" />
        <altmember cref="N:System.Security.Authentication.ExtendedProtection" />
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <Member MemberName="GetResponse">
      <MemberSignature Language="C#" Value="public override System.Net.WebResponse GetResponse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Net.WebResponse GetResponse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.GetResponse" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebResponse</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>インターネット リソースからの応答を返します。</summary>
        <returns>インターネット リソースからの応答を格納している <see cref="T:System.Net.WebResponse" /> 。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.HttpWebRequest.GetResponse%2A> メソッドが返される、 <xref:System.Net.WebResponse> インターネット リソースからの応答を格納しているオブジェクト。 実際のインスタンスが返される、 <xref:System.Net.HttpWebResponse>, 、HTTP 固有のアクセスのプロパティには、そのクラスを型にキャストするとします。  
  
 A <xref:System.Net.ProtocolViolationException> プロパティの設定の場合に、いくつかのケースでスローされる、 <xref:System.Net.HttpWebRequest> クラスが競合しています。 アプリケーションを設定する場合、この例外が発生した、 <xref:System.Net.HttpWebRequest.ContentLength%2A> プロパティおよび <xref:System.Net.HttpWebRequest.SendChunked%2A> プロパティを `true`, 、し、HTTP GET 要求を送信します。 この例外は、アプリケーションは、ここではサポートされていない HTTP 1.0 プロトコルのみをサポートするサーバーにチャンクを送信しようとした場合に発生します。 アプリケーションが設定されていないデータを送信しようとする場合、この例外が発生した、 <xref:System.Net.HttpWebRequest.ContentLength%2A> プロパティまたは <xref:System.Net.HttpWebRequest.SendChunked%2A> は `false` バッファリングを無効にして、キープア ライブ接続で \(、 <xref:System.Net.HttpWebRequest.KeepAlive%2A> プロパティは `true`\)`.`  
  
> [!CAUTION]
>  呼び出す必要があります、 <xref:System.Net.HttpWebResponse.Close%2A> メソッドは、ストリームを閉じ、接続を解放します。 そのためには障害の接続が不足するアプリケーションがあります。  
  
 POST メソッドを使用する場合は、要求ストリームを取得して投稿されるデータを書き込むし、ストリームを閉じる必要があります。 このメソッドは、コンテンツの投稿までの待機をブロックします。タイムアウトが設定されていないコンテンツ、呼び出しスレッドは無期限にブロックを指定しない場合。  
  
> [!NOTE]
>  複数回呼び出す <xref:System.Net.HttpWebRequest.GetResponse%2A> 同じ応答オブジェクトを返す要求を再発行していません。  
  
> [!NOTE]
>  アプリケーションは、特定の要求の同期および非同期のメソッドを組み合わせることはできません。 呼び出した場合、 <xref:System.Net.HttpWebRequest.GetRequestStream%2A> メソッドが使用する必要があります、 <xref:System.Net.HttpWebRequest.GetResponse%2A> 応答を取得します。  
  
> [!NOTE]
>  場合、 <xref:System.Net.WebException> がスローされるを使用して、 <xref:System.Net.WebException.Response%2A> と <xref:System.Net.WebException.Status%2A> サーバーからの応答を決定する例外のプロパティです。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[&#91;\<topic:\/\/conUsingNetworkTracing\>&#93;](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
> [!NOTE]
>  セキュリティ上の理由は、cookie は既定で無効にします。 Cookie を使用する場合は、使用、 <xref:System.Net.HttpWebRequest.CookieContainer%2A> プロパティ cookie を有効にします。  
  
   
  
## 例  
 次のコード例では、要求に対する応答を取得します。  
  
 [!code-cpp[NCLResponse1\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLResponse1/CPP/httpwebrequest1.cpp#1)]
 [!code-csharp[NCLResponse1\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLResponse1/CS/httpwebrequest1.cs#1)]
 [!code-vb[NCLResponse1\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLResponse1/VB/httpwebrequest1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">前回の <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> への呼び出しでストリームが既に使用中です。  
  
 \-または\-  
  
 <see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> が値に設定されており、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" />です。</exception>
        <exception cref="T:System.Net.ProtocolViolationException">
          <see cref="P:System.Net.HttpWebRequest.Method" /> が GET または HEAD で、<see cref="P:System.Net.HttpWebRequest.ContentLength" /> が 0 以上であるか <see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="true" />です。  
  
 \-または\-  
  
 <see cref="P:System.Net.HttpWebRequest.KeepAlive" /> が <see langword="true" />、<see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering" /> が <see langword="false" />、<see cref="P:System.Net.HttpWebRequest.ContentLength" /> が \-1、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> で、<see cref="P:System.Net.HttpWebRequest.Method" /> が POST か PUT です。  
  
 \-または\-  
  
 <see cref="T:System.Net.HttpWebRequest" /> にはエンティティ本体がありますが、<see cref="M:System.Net.HttpWebRequest.GetRequestStream" /> メソッドを呼び出さずに <see cref="M:System.Net.HttpWebRequest.GetResponse" /> メソッドが 呼び出されています。  
  
 \-または\-  
  
 <see cref="P:System.Net.HttpWebRequest.ContentLength" /> は 0 よりも大きい値に設定されていますが、保証されたデータすべてをアプリケーションが書き込むことができません。</exception>
        <exception cref="T:System.NotSupportedException">要求キャッシュの検証コントロールは、この要求に対する応答がキャッシュから提供されたことを示していますが、この要求にはサーバーに送信されるデータが含まれています。 データを送信する要求には、キャッシュを使用できません。 正しく実装されていないカスタム キャッシュの検証コントロールを使用すると、この例外が発生する場合があります。</exception>
        <exception cref="T:System.Net.WebException">
          <see cref="M:System.Net.HttpWebRequest.Abort" /> は以前に呼び出されました。  
  
 \-または\-  
  
 要求のタイムアウト期間の期限が切れました。  
  
 \-または\-  
  
 この要求の処理中にエラーが発生しました。</exception>
        <altmember cref="P:System.Net.HttpWebRequest.Timeout" />
      </Docs>
    </Member>
    <Member MemberName="HaveResponse">
      <MemberSignature Language="C#" Value="public virtual bool HaveResponse { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HaveResponse" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.HaveResponse" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>インターネット リソースから応答が受信されたかどうかを示す値を取得します。</summary>
        <value>応答を受信した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例の確認、 <xref:System.Net.HttpWebRequest.HaveResponse%2A> プロパティのインターネット リソースから応答が受信されたかどうか。  
  
 [!code-cpp[Httpwebrequest\_HaveResponse\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Httpwebrequest_HaveResponse/CPP/httpwebrequest_haveresponse.cpp#1)]
 [!code-csharp[Httpwebrequest\_HaveResponse\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Httpwebrequest_HaveResponse/CS/httpwebrequest_haveresponse.cs#1)]
 [!code-vb[Httpwebrequest\_HaveResponse\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Httpwebrequest_HaveResponse/VB/httpwebrequest_haveresponse.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Headers">
      <MemberSignature Language="C#" Value="public override System.Net.WebHeaderCollection Headers { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.WebHeaderCollection Headers" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Headers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebHeaderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>HTTP ヘッダーを構成する名前と値のペアのコレクションを指定します。</summary>
        <value>HTTP 要求のヘッダーを構成する名前と値のペアを格納している <see cref="T:System.Net.WebHeaderCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Net.HttpWebRequest.Headers%2A> collection contains the protocol headers associated with the request. The following table lists the HTTP headers that are not stored in the <xref:System.Net.HttpWebRequest.Headers%2A> collection but are either set by the system or set by properties or methods.  
  
|Header|Set by|  
|------------|------------|  
|Accept|Set by the <xref:System.Net.HttpWebRequest.Accept%2A> property.|  
|Connection|Set by the <xref:System.Net.HttpWebRequest.Connection%2A> property and <xref:System.Net.HttpWebRequest.KeepAlive%2A> property.|  
|Content\-Length|Set by the <xref:System.Net.HttpWebRequest.ContentLength%2A> property.|  
|Content\-Type|Set by the <xref:System.Net.HttpWebRequest.ContentType%2A> property.|  
|Expect|Set by the <xref:System.Net.HttpWebRequest.Expect%2A> property.|  
|Date|Set by the <xref:System.Net.HttpWebRequest.Date%2A> property.|  
|Host|Set by the <xref:System.Net.HttpWebRequest.Host%2A> property.|  
|If\-Modified\-Since|Set by the <xref:System.Net.HttpWebRequest.IfModifiedSince%2A> property.|  
|Range|Set by the <xref:System.Net.HttpWebRequest.AddRange%2A> method.|  
|Referer|Set by the <xref:System.Net.HttpWebRequest.Referer%2A> property.|  
|Transfer\-Encoding|Set by the <xref:System.Net.HttpWebRequest.TransferEncoding%2A> property \(the <xref:System.Net.HttpWebRequest.SendChunked%2A> property must be true\).|  
|User\-Agent|Set by the <xref:System.Net.HttpWebRequest.UserAgent%2A> property.|  
  
 The <xref:System.Net.WebHeaderCollection.Add%2A> method throws an <xref:System.ArgumentException> if you try to set one of these protected headers.  
  
 Changing the <xref:System.Net.HttpWebRequest.Headers%2A> property after the request has been started by calling <xref:System.Net.HttpWebRequest.GetRequestStream%2A>, <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A>, <xref:System.Net.HttpWebRequest.GetResponse%2A>, or <xref:System.Net.HttpWebRequest.BeginGetResponse%2A> method throws an <xref:System.InvalidOperationException>.  
  
 You should not assume that the header values will remain unchanged, because Web servers and caches may change or add headers to a Web request.  
  
   
  
## 例  
 The following code example uses the <xref:System.Net.HttpWebRequest.Headers%2A> property to print the HTTP header name\/value pairs to the console.  
  
 [!code-cpp[HttpWebRequest\_Headers\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_Headers/CPP/httpwebrequest_headers.cpp#1)]
 [!code-csharp[HttpWebRequest\_Headers\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_Headers/CS/httpwebrequest_headers.cs#1)]
 [!code-vb[HttpWebRequest\_Headers\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_Headers/VB/httpwebrequest_headers.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Net.HttpWebRequest.GetRequestStream" />、<see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />、<see cref="M:System.Net.HttpWebRequest.GetResponse" />、または <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> メソッドを呼び出すことにより要求が開始されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Host">
      <MemberSignature Language="C#" Value="public string Host { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Host" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Host" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求 URI に依存しない HTTP 要求で使用する Host ヘッダー値を取得または設定します。</summary>
        <value>HTTP 要求の Host ヘッダーの値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.HttpWebRequest.Host%2A> 、ホストの要求 URI に依存しない HTTP 要求で使用するヘッダーの値を設定するプロパティを使用することができます。<xref:System.Net.HttpWebRequest.Host%2A> と省略可能なポート番号のホスト名のプロパティに含めることができます。 ポートの情報がない場合、ホスト ヘッダーでは、要求されたサービス \(ポート 80 の HTTP URL など\) の既定のポートを意味します。  
  
 ホストとポートを指定する形式は、IETF が発行する RFC2616 のセクション 14.23 の規則に従う必要があります。 次の値は 8080 のポートを指定するこれらの要件に準拠することなどがあります、 <xref:System.Net.HttpWebRequest.Host%2A> プロパティ。  
  
 `www.contoso.com:8080`  
  
 使用して、 <xref:System.Net.HttpWebRequest.Host%2A> カスタム ホスト ヘッダーの値を明示的に指定するプロパティは、キャッシュ領域、cookie、および認証にも影響します。 アプリケーションでは、特定の URI プレフィックスの資格情報を提供、URI で対象サーバーではなく、ホスト ヘッダーの値を含む URI を使用することを確認して、アプリケーション必要があります。 リソースをキャッシュする場合に使用されるキーは、要求 URI ではなく、ホスト ヘッダーの値を使用します。 Cookie に含まれて、 <xref:System.Net.CookieContainer> とサーバーのドメイン名によって論理的にグループ化します。 アプリケーションでは、ホスト ヘッダーを指定する場合、この値は、ドメインとして使用します。  
  
 場合、 <xref:System.Net.HttpWebRequest.Host%2A> プロパティが設定されていないし、要求 URI で HTTP 要求で使用する Host ヘッダーの値に基づきます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">ホスト ヘッダーを <see langword="null" /> に設定できません。</exception>
        <exception cref="T:System.ArgumentException">ホスト ヘッダーを無効な値には設定できません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Net.HttpWebRequest" /> の送信がすでに開始されている場合、ホスト ヘッダーを設定することはできません。</exception>
      </Docs>
    </Member>
    <Member MemberName="IfModifiedSince">
      <MemberSignature Language="C#" Value="public DateTime IfModifiedSince { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime IfModifiedSince" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.IfModifiedSince" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>HTTP <see langword="If-Modified-Since" /> ヘッダーの値を取得または設定します。</summary>
        <value>
          <see langword="If-Modified-Since" /> HTTP ヘッダーの内容を格納する <see cref="T:System.DateTime" />。 既定値は、現在の日付と時刻です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.HttpWebRequest.IfModifiedSince%2A> プロパティは、標準的な <xref:System.DateTime?displayProperty=fullName> オブジェクトを含めることができます、 <xref:System.DateTimeKind?displayProperty=fullName> フィールド <xref:System.DateTimeKind.Local?displayProperty=fullName>, 、<xref:System.DateTimeKind.Utc?displayProperty=fullName>, 、または <xref:System.DateTimeKind.Unspecified?displayProperty=fullName>です。 使用する場合、任意の種類の時間を設定できる、 <xref:System.Net.HttpWebRequest.IfModifiedSince%2A> プロパティです。 場合 <xref:System.DateTimeKind.Unspecified?displayProperty=fullName> を設定または取得するには、 <xref:System.Net.HttpWebRequest.IfModifiedSince%2A> プロパティがあると見なされます <xref:System.DateTimeKind.Local?displayProperty=fullName> \(ローカル時刻\)。  
  
 内のクラス、 <xref:System.Net> 名前空間常に書き出す前に、 <xref:System.Net.HttpWebRequest.IfModifiedSince%2A> GMT \(Utc\) 形式を使用して標準の形式で転送中にネットワーク上のプロパティです。  
  
 場合、 <xref:System.Net.HttpWebRequest.IfModifiedSince%2A> にプロパティが設定されている <xref:System.DateTime.MinValue?displayProperty=fullName>, 、 `If-Modified-Since` から HTTP ヘッダーが削除された、 <xref:System.Net.HttpWebRequest.Headers%2A> プロパティおよび <xref:System.Net.WebHeaderCollection>します。  
  
 場合、 <xref:System.Net.HttpWebRequest.IfModifiedSince%2A> プロパティは、 <xref:System.DateTime.MinValue?displayProperty=fullName>, 、ことを示します、 `If-Modified-Since` で HTTP ヘッダーが含まれていない、 <xref:System.Net.HttpWebRequest.Headers%2A> プロパティおよび <xref:System.Net.WebHeaderCollection>します。  
  
> [!NOTE]
>  このプロパティの値が格納されている <xref:System.Net.WebHeaderCollection>します。 WebHeaderCollection が設定されている場合、プロパティ値は失われます。  
  
   
  
## 例  
 次のコード例の確認、 <xref:System.Net.HttpWebRequest.IfModifiedSince%2A> プロパティです。  
  
 [!code-cpp[HttpWebRequest\_IfModifiedSince\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_IfModifiedSince/CPP/httpwebrequest_ifmodifiedsince.cpp#1)]
 [!code-csharp[HttpWebRequest\_IfModifiedSince\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_IfModifiedSince/CS/httpwebrequest_ifmodifiedsince.cs#1)]
 [!code-vb[HttpWebRequest\_IfModifiedSince\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_IfModifiedSince/VB/httpwebrequest_ifmodifiedsince.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepAlive">
      <MemberSignature Language="C#" Value="public bool KeepAlive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeepAlive" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.KeepAlive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>インターネット リソースへの永続的な接続を行うかどうかを示す値を取得または設定します。</summary>
        <value>値 Keep\-alive を持つ <see langword="Connection" /> HTTP ヘッダーをインターネット リソースへの要求に含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを設定 `true` を送信する、 `Connection` HTTP ヘッダーの keep\-alive の値を使用します。 アプリケーションを使用して <xref:System.Net.HttpWebRequest.KeepAlive%2A> に永続的な接続に対する設定を示します。 ときに、 <xref:System.Net.HttpWebRequest.KeepAlive%2A> プロパティは、 `true`, 、アプリケーションがそれらをサポートするサーバーへの永続的な接続を作成します。  
  
> [!NOTE]
>  Http\/1.1 を使用して、Keep Alive は既定でオンです。 設定 <xref:System.Net.HttpWebRequest.KeepAlive%2A> に `false` 送信する際に発生する可能性があります、 `Connection: Close` サーバーへのヘッダー。  
  
   
  
## 例  
 次のコード例、 <xref:System.Net.HttpWebRequest.KeepAlive%2A> プロパティを `false` インターネット リソースの永続的な接続を確立するようにします。  
  
 [!code-cpp[HttpWebRequest\_Connection\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_Connection/CPP/httpwebrequest_connection.cpp#1)]
 [!code-csharp[HttpWebRequest\_Connection\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_Connection/CS/httpwebrequest_connection.cs#1)]
 [!code-vb[HttpWebRequest\_Connection\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_Connection/VB/httpwebrequest_connection.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumAutomaticRedirections">
      <MemberSignature Language="C#" Value="public int MaximumAutomaticRedirections { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaximumAutomaticRedirections" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.MaximumAutomaticRedirections" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求によって実行されるリダイレクトの最大数を取得または設定します。</summary>
        <value>要求によって実行されるリダイレクト応答の最大数。 既定値は 50 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.HttpWebRequest.MaximumAutomaticRedirections%2A> プロパティを設定する場合は、次の要求のリダイレクトの最大数、 <xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A> プロパティは `true`です。  
  
   
  
## 例  
 次のコード例では、このプロパティの値を設定します。  
  
 [!code-cpp[NCLResponse1\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLResponse1/CPP/httpwebrequest1.cpp#1)]
 [!code-csharp[NCLResponse1\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLResponse1/CS/httpwebrequest1.cs#1)]
 [!code-vb[NCLResponse1\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLResponse1/VB/httpwebrequest1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">設定値が 0 以下です。</exception>
      </Docs>
    </Member>
    <Member MemberName="MaximumResponseHeadersLength">
      <MemberSignature Language="C#" Value="public int MaximumResponseHeadersLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaximumResponseHeadersLength" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.MaximumResponseHeadersLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Use this")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>応答ヘッダーの許容最大長を取得または設定します。</summary>
        <value>応答ヘッダーの長さ \(KB 単位、1 KB \= 1024 バイト\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 応答ヘッダーの長さには、応答のステータス行と HTTP プロトコルの一部として受信したすべての余分な制御文字が含まれています。 値の\-1 の場合は、応答ヘッダーの制限は適用されません。値 0 は、すべての要求が失敗することを意味します。  
  
 場合、 <xref:System.Net.HttpWebRequest.MaximumResponseHeadersLength%2A> プロパティが明示的に設定されていないの値に既定値、 <xref:System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength%2A> プロパティです。  
  
 受信した応答ヘッダーの長さの値を超えるかどうか、 <xref:System.Net.HttpWebRequest.MaximumResponseHeadersLength%2A> プロパティには、 <xref:System.Net.HttpWebRequest.EndGetResponse%2A> または <xref:System.Net.HttpWebRequest.GetResponse%2A> メソッドがスローされます、 <xref:System.Net.WebException> で、 <xref:System.Net.WebException.Status%2A> プロパティに設定 <xref:System.Net.WebExceptionStatus.MessageLengthLimitExceeded>します。  
  
   
  
## 例  
 次のコード例では、このプロパティの値を設定します。  
  
 [!code-cpp[NCLResponse1\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLResponse1/CPP/httpwebrequest1.cpp#1)]
 [!code-csharp[NCLResponse1\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLResponse1/CS/httpwebrequest1.cs#1)]
 [!code-vb[NCLResponse1\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLResponse1/VB/httpwebrequest1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">プロパティは、要求が送信された後に設定されます。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">値は 0 より小さく、\-1 とは異なっています。</exception>
      </Docs>
    </Member>
    <Member MemberName="MediaType">
      <MemberSignature Language="C#" Value="public string MediaType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MediaType" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.MediaType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求のメディア タイプを取得または設定します。</summary>
        <value>要求のメディア タイプ。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値、 <xref:System.Net.HttpWebRequest.MediaType%2A> プロパティに影響、 <xref:System.Net.HttpWebResponse.CharacterSet%2A> プロパティです。 設定すると、 <xref:System.Net.HttpWebRequest.MediaType%2A> 要求に対応するメディアの種類が、応答で返される文字セットの一覧から選択 `Content-type` HTTP ヘッダー。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Method">
      <MemberSignature Language="C#" Value="public override string Method { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Method" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Method" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求に対して使用するメソッドを取得または設定します。</summary>
        <value>インターネット リソースと通信するために使用する要求メソッド。 既定値は GET です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.HttpWebRequest.Method%2A> プロパティは、HTTP 1.1 プロトコル動詞のいずれかに設定することができます: GET、HEAD、POST、PUT、トレース\]、またはオプションを削除します。  
  
 場合、 <xref:System.Net.HttpWebRequest.ContentLength%2A> プロパティが\-1 以外の値に設定されている、 <xref:System.Net.HttpWebRequest.Method%2A> プロパティは、データをアップロードするプロトコルのプロパティに設定する必要があります。  
  
   
  
## 例  
 次のコード例、 <xref:System.Net.HttpWebRequest.Method%2A> プロパティを POST します。  
  
 [!code-cpp[HttpWebRequest\_ContentLength\#4](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_ContentLength/CPP/httpwebrequest_contentlength.cpp#4)]
 [!code-csharp[HttpWebRequest\_ContentLength\#4](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_ContentLength/CS/httpwebrequest_contentlength.cs#4)]
 [!code-vb[HttpWebRequest\_ContentLength\#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_ContentLength/VB/httpwebrequest_contentlength.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">メソッドが提供されていません。  
  
 または  
  
 メソッドの文字列に正しくない文字が含まれています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Pipelined">
      <MemberSignature Language="C#" Value="public bool Pipelined { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Pipelined" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Pipelined" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>インターネット リソースへの要求をパイプライン処理するかどうかを示す値を取得または設定します。</summary>
        <value>要求をパイプライン処理する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アプリケーションを使用して、 <xref:System.Net.HttpWebRequest.Pipelined%2A> プロパティがパイプライン接続に対する設定を示します。<xref:System.Net.HttpWebRequest.Pipelined%2A> は `true`, 、アプリケーションがそれらをサポートするサーバーへのパイプラインの接続を作成します。  
  
 パイプラインに接続する場合にのみ、 <xref:System.Net.HttpWebRequest.KeepAlive%2A> プロパティも `true`です。  
  
   
  
## 例  
 次のコード例の値を表示する、 <xref:System.Net.HttpWebRequest.Pipelined%2A> プロパティをコンソールにします。  
  
 [!code-cpp[HttpWebRequest\_PipeLined\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_PipeLined/CPP/httpwebrequest_pipelined.cpp#1)]
 [!code-csharp[HttpWebRequest\_PipeLined\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_PipeLined/CS/httpwebrequest_pipelined.cs#1)]
 [!code-vb[HttpWebRequest\_PipeLined\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_PipeLined/VB/httpwebrequest_pipelined.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreAuthenticate">
      <MemberSignature Language="C#" Value="public override bool PreAuthenticate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PreAuthenticate" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.PreAuthenticate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求で Authorization ヘッダーを送信するかどうかを示す値を取得または設定します。</summary>
        <value>認証が行われた後で、要求と共に HTTP Authorization ヘッダーを送信するには <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 特定のクライアント要求の後 <xref:System.Uri> が正常に認証された場合は <xref:System.Net.HttpWebRequest.PreAuthenticate%2A> は `true` 資格情報を渡すと、承認ヘッダーは、いずれかに各要求と一緒に送信される <xref:System.Uri> 、固有の仕様に一致する <xref:System.Uri> 最後のスラッシュの前までです。 特定のクライアント要求が正常に認証されている場合は <xref:System.Uri> を次が含まれています。  
  
 `http://www.contoso.com/firstpath/`  
  
 事前認証の承認ヘッダーは、次のいずれかを各要求と一緒に送信し、 <xref:System.Uri> インスタンス。  
  
 `http://www.contoso.com/firstpath/`  
  
 `http://www.contoso.com/firstpath/default`  
  
 `http://www.contoso.com/firstpath/default.html`  
  
 `http://www.contoso.com/firstpath/sample.html`  
  
 ただし、承認ヘッダーは要求と共に送信されません、次のいずれかに <xref:System.Uri> インスタンス。  
  
 `http://www.contoso.com/`  
  
 `http://www.contoso.com/firstpath`  
  
 `http://www.contoso.com/secondpath/`  
  
 クライアントを特定の要求と <xref:System.Uri> は要求では正常に認証されると、標準の認証手順。  
  
 最初の要求を除き、 <xref:System.Net.WebRequest.PreAuthenticate%2A> プロパティには、それ以降の要求の認証情報を送信するかどうかを示します、 <xref:System.Uri> 、固有の仕様に一致する <xref:System.Uri> サーバーが困難になることを待つことがなくスラッシュ最後までです。  
  
 クライアントとサーバー間の次のダイアログ ボックスは、このプロパティの効果を示しています。 ダイアログ ボックスでは、基本認証では使用を前提としています。  
  
 <xref:System.Net.HttpWebRequest.PreAuthenticate%2A> `false`:  
  
 クライアント: GET someUrl  
  
 サーバー: 401 WWW 認証 Basic  
  
 承認ヘッダーを含むクライアント: GET  
  
 サーバー: 200 OK  
  
 クライアント: GET someUrl  
  
 サーバー: 401 WWW 認証 Basic  
  
 承認ヘッダーを含むクライアント: GET  
  
 サーバー: 200 OK  
  
 <xref:System.Net.HttpWebRequest.PreAuthenticate%2A> `true`:  
  
 クライアント: GET someUrl  
  
 サーバー: 401 WWW 認証 Basic  
  
 承認ヘッダーを含むクライアント: GET  
  
 サーバー: 200 OK  
  
 クライアント: someUrl 承認ヘッダーを取得します。  
  
 認証スキームと事前認証は、このプロパティの値が無視されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtocolVersion">
      <MemberSignature Language="C#" Value="public Version ProtocolVersion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Version ProtocolVersion" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.ProtocolVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求に対して使用する HTTP バージョンを取得または設定します。</summary>
        <value>要求に対して使用する HTTP バージョン。 既定値は、<see cref="F:System.Net.HttpVersion.Version11" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.HttpWebRequest> クラスは、バージョン 1.0 および 1.1 の HTTP のみをサポートしています。 設定 <xref:System.Net.HttpWebRequest.ProtocolVersion%2A> を別のバージョンには、例外をスローします。  
  
> [!NOTE]
>  現在の要求の HTTP バージョンを設定するには、使用、 <xref:System.Net.HttpVersion.Version10> と <xref:System.Net.HttpVersion.Version11> のフィールド、 <xref:System.Net.HttpVersion> クラスです。  
  
   
  
## 例  
 次のコード例、 <xref:System.Net.HttpWebRequest.ProtocolVersion%2A> プロパティです。  
  
 [!code-cpp[HttpWebRequest\_ProtocolVersion\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_ProtocolVersion/CPP/httpwebrequest_protocolversion.cpp#1)]
 [!code-csharp[HttpWebRequest\_ProtocolVersion\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_ProtocolVersion/CS/httpwebrequest_protocolversion.cs#1)]
 [!code-vb[HttpWebRequest\_ProtocolVersion\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_ProtocolVersion/VB/httpwebrequest_protocolversion.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">HTTP バージョンが 1.0 または 1.1 以外の値に設定されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Proxy">
      <MemberSignature Language="C#" Value="public override System.Net.IWebProxy Proxy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.IWebProxy Proxy" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Proxy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IWebProxy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求に対して使用するプロキシ情報を取得または設定します。</summary>
        <value>要求に対するプロキシで使用する <see cref="T:System.Net.IWebProxy" /> オブジェクト。 既定値は <see cref="P:System.Net.GlobalProxySelection.Select" /> プロパティを呼び出して設定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.HttpWebRequest.Proxy%2A> プロパティを識別、 <xref:System.Net.WebProxy> を使用してインターネット リソースへの要求を処理するオブジェクト。 プロキシを使用しないことを指定する、 <xref:System.Net.HttpWebRequest.Proxy%2A> プロパティによって返されるプロキシ インスタンスを <xref:System.Net.GlobalProxySelection.GetEmptyWebProxy%2A?displayProperty=fullName> メソッドです。  
  
 ローカル コンピューターまたはアプリケーション構成ファイルが既定のプロキシを使用することを指定します。 場合、 <xref:System.Net.HttpWebRequest.Proxy%2A> プロパティが指定されてからプロキシ設定では、 <xref:System.Net.HttpWebRequest.Proxy%2A> プロパティは、ローカル コンピューターまたはアプリケーション構成ファイルを上書きし、 <xref:System.Net.HttpWebRequest> インスタンスが指定されたプロキシ設定を使用します。 構成ファイルにプロキシが指定されていない場合、 <xref:System.Net.HttpWebRequest.Proxy%2A> プロパティは指定されて、 <xref:System.Net.HttpWebRequest> クラスは、ローカル コンピューターで Internet Explorer から継承したプロキシ設定を使用します。 Internet Explorer のプロキシ設定がない場合、要求は、サーバーに直接送信します。  
  
 <xref:System.Net.HttpWebRequest> クラスを解析してワイルドカード文字を含むプロキシ バイ パス一覧から継承された Internet Explorer 同じバイパス リストは、Internet Explorer によって直接解析されるからです。 たとえば、 <xref:System.Net.HttpWebRequest> クラスは、"nt.\*"の正規表現として「nt \*」Internet Explorer からのバイパス リストを解析します。 したがっての URL"`http://nt.com`"を使用してプロキシを使用しないと、 <xref:System.Net.HttpWebRequest> クラスと Internet Explorer を使用します。  
  
 <xref:System.Net.HttpWebRequest> クラスには、ローカル プロキシ バイ パスがサポートしています。 クラスは、次の条件のいずれかが満たされた場合は、ローカルへのエクスポート先を検討します。  
  
-   先には、フラットな名前 \(URL にドットがない\) が含まれています。  
  
-   先には、ループバック アドレスが含まれています \(<xref:System.Net.IPAddress.Loopback> または <xref:System.Net.IPAddress.IPv6Loopback>\) または変換先が含まれている、 <xref:System.Net.IPAddress> 、ローカル コンピューターに割り当てられています。  
  
-   変換先のドメイン サフィックスには、ローカル コンピューターのドメイン サフィックスと一致する \(<xref:System.Net.NetworkInformation.IPGlobalProperties.DomainName%2A>\)。  
  
 変更する、 <xref:System.Net.HttpWebRequest.Proxy%2A> プロパティを呼び出して、要求が開始された後、 <xref:System.Net.HttpWebRequest.GetRequestStream%2A>, 、<xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A>, 、<xref:System.Net.HttpWebRequest.GetResponse%2A>, 、または <xref:System.Net.HttpWebRequest.BeginGetResponse%2A> メソッドでのスロー、 <xref:System.InvalidOperationException>です。 Proxy 要素に関する情報を参照してください。 [DefaultProxy Element \(Network Settings\)](http://msdn.microsoft.com/ja-jp/9d663c4b-07b4-4f6f-9b12-efbd3630354f)します。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Net.HttpWebRequest.Proxy%2A> 要求に対してプロキシ情報を取得します。  
  
 [!code-cpp[Httpwebrequest\_proxy\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Httpwebrequest_proxy/CPP/httpwebrequest_proxy.cpp#1)]
 [!code-csharp[Httpwebrequest\_proxy\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Httpwebrequest_proxy/CS/httpwebrequest_proxy.cs#1)]
 [!code-vb[Httpwebrequest\_proxy\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Httpwebrequest_proxy/VB/httpwebrequest_proxy.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.Net.HttpWebRequest.Proxy" /> が <see langword="null" /> に設定されます。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Net.HttpWebRequest.GetRequestStream" />、<see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />、<see cref="M:System.Net.HttpWebRequest.GetResponse" />、または <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> を呼び出すことにより要求が開始されました。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元には、要求された操作に対するアクセス許可がありません。</exception>
        <permission cref="T:System.Net.WebPermission">To get or set the <see cref="P:System.Net.HttpWebRequest.Proxy" /> property. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ReadWriteTimeout">
      <MemberSignature Language="C#" Value="public int ReadWriteTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadWriteTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.ReadWriteTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ストリームへの書き込み時またはストリームからの読み取り時のタイムアウト \(ミリ秒単位\) を取得または設定します。</summary>
        <value>書き込みまたは読み取りがタイムアウトするまでのミリ秒単位の時間。 既定値は、300,000 ミリ秒 \(5 分\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.HttpWebRequest.ReadWriteTimeout%2A> によって返されるストリームに書き込むときに、プロパティが使用される、 <xref:System.Net.HttpWebRequest.GetRequestStream%2A> メソッドまたはによって返されるストリームからの読み取り、 <xref:System.Net.HttpWebResponse.GetResponseStream%2A> メソッドです。  
  
 具体的には、 <xref:System.Net.HttpWebRequest.ReadWriteTimeout%2A> プロパティは、制御のタイムアウト、 <xref:System.IO.Stream.Read%2A> メソッドによって返されるストリームの読み取りに使用すると、 <xref:System.Net.HttpWebResponse.GetResponseStream%2A> メソッド、および、 <xref:System.IO.Stream.Write%2A> メソッドによって返されるストリームへの書き込みに使用すると、 <xref:System.Net.HttpWebRequest.GetRequestStream%2A> メソッドです。  
  
 要求が完了するまで待機する時間を指定するを使用して、 <xref:System.Net.HttpWebRequest.Timeout%2A> プロパティです。  
  
   
  
## 例  
 <xref:System.Net.HttpWebRequest.ReadWriteTimeout%2A> プロパティを設定する方法を次のコード例に示します。  
  
 [!code-csharp[Classic HttpWebRequest Example\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpWebRequest Example/CS/source.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">要求が既に送信されています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定の操作に指定された値が、0 以下で、<see cref="F:System.Threading.Timeout.Infinite" /> と等しくありません。</exception>
        <altmember cref="P:System.Net.HttpWebRequest.Timeout" />
      </Docs>
    </Member>
    <Member MemberName="Referer">
      <MemberSignature Language="C#" Value="public string Referer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Referer" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Referer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="Referer" /> HTTP ヘッダーの値を取得または設定します。</summary>
        <value>
          <see langword="Referer" /> HTTP ヘッダーの値。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A> プロパティは、 `true`, 、 <xref:System.Net.HttpWebRequest.Referer%2A> プロパティは、要求が別のサイトにリダイレクトされる場合に自動的に設定します。  
  
 オフにする、 `Referer` HTTP ヘッダーを設定、 <xref:System.Net.HttpWebRequest.Referer%2A> プロパティを `null`します。  
  
> [!NOTE]
>  このプロパティの値が格納されている <xref:System.Net.WebHeaderCollection>します。 WebHeaderCollection が設定されている場合、プロパティ値は失われます。  
  
   
  
## 例  
 次のコード例、 <xref:System.Net.HttpWebRequest.Referer%2A> プロパティです。  
  
 [!code-cpp[HttpWebRequest\_Referer\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_Referer/CPP/httpwebrequest_referer.cpp#1)]
 [!code-csharp[HttpWebRequest\_Referer\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_Referer/CS/httpwebrequest_referer.cs#1)]
 [!code-vb[HttpWebRequest\_Referer\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_Referer/VB/httpwebrequest_referer.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestUri">
      <MemberSignature Language="C#" Value="public override Uri RequestUri { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri RequestUri" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.RequestUri" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求の元の URI \(Uniform Resource Identifier\) を取得します。</summary>
        <value>
          <see cref="M:System.Net.WebRequest.Create(System.String)" /> メソッドに渡されたインターネット リソースの URI を格納している <see cref="T:System.Uri" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Uri> オブジェクトに渡される <xref:System.Net.HttpWebRequest> への呼び出しによって <xref:System.Net.WebRequest.Create%2A?displayProperty=fullName>します。  
  
 次のリダイレクト ヘッダー変わらないので、 <xref:System.Net.HttpWebRequest.RequestUri%2A> プロパティです。 要求に応答した実際の URI を取得するには、確認、 <xref:System.Net.HttpWebRequest.Address%2A> プロパティです。  
  
   
  
## 例  
 次のコード例は、 <xref:System.Net.HttpWebRequest> オブジェクト `req` の値を設定は、要求を実行する別の場所にリダイレクトされ、 `hasChanged` 変数を `true` 場合は、要求がリダイレクトされた以外の場合、 `hasChanged` に設定されている `false`します。  
  
 [!code-cpp[Classic HttpWebRequest.RequestUri Example\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic HttpWebRequest.RequestUri Example/CPP/source.cpp#1)]
 [!code-csharp[Classic HttpWebRequest.RequestUri Example\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpWebRequest.RequestUri Example/CS/source.cs#1)]
 [!code-vb[Classic HttpWebRequest.RequestUri Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpWebRequest.RequestUri Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendChunked">
      <MemberSignature Language="C#" Value="public bool SendChunked { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SendChunked" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.SendChunked" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>インターネット リソースへセグメント単位でデータを送信するかどうかを示す値を取得または設定します。</summary>
        <value>インターネット リソースへセグメント単位でデータを送信する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.HttpWebRequest.SendChunked%2A> は `true`, 、要求は、セグメント内のインターネット リソースにデータを送信します。 インターネット リソースは、チャンク データの受信をサポートする必要があります。  
  
 変更する、 <xref:System.Net.HttpWebRequest.SendChunked%2A> プロパティを呼び出して、要求が開始された後、 <xref:System.Net.HttpWebRequest.GetRequestStream%2A>, 、<xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A>, 、<xref:System.Net.HttpWebRequest.GetResponse%2A>, 、または <xref:System.Net.HttpWebRequest.BeginGetResponse%2A> メソッドでのスロー、 <xref:System.InvalidOperationException>です。  
  
   
  
## 例  
 次のコード例、 <xref:System.Net.HttpWebRequest.SendChunked%2A> プロパティを `true` インターネット リソースへセグメント単位でデータを送信できるようにします。  
  
 [!code-cpp[HttpWebRequest\_SendChunked\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_SendChunked/CPP/httpwebrequest_sendchunked.cpp#2)]
 [!code-csharp[HttpWebRequest\_SendChunked\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_SendChunked/CS/httpwebrequest_sendchunked.cs#2)]
 [!code-vb[HttpWebRequest\_SendChunked\#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_SendChunked/VB/httpwebrequest_sendchunked.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Net.HttpWebRequest.GetRequestStream" />、<see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />、<see cref="M:System.Net.HttpWebRequest.GetResponse" />、または <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> メソッドを呼び出すことにより要求が開始されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="ServerCertificateValidationCallback">
      <MemberSignature Language="C#" Value="public System.Net.Security.RemoteCertificateValidationCallback ServerCertificateValidationCallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Security.RemoteCertificateValidationCallback ServerCertificateValidationCallback" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.ServerCertificateValidationCallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Security.RemoteCertificateValidationCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サーバー証明書を検証するコールバック関数を取得または設定します。</summary>
        <value>サーバー証明書を検証するコールバック関数。  
  
 サーバー証明書を検証するコールバック関数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定値は、コールバック関数が設定されていないと、 <xref:System.Net.HttpWebRequest.ServerCertificateValidationCallback%2A> プロパティは `null`です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServicePoint">
      <MemberSignature Language="C#" Value="public System.Net.ServicePoint ServicePoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ServicePoint ServicePoint" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.ServicePoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.ServicePoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求に対して使用するサービス ポイントを取得します。</summary>
        <value>インターネット リソースへのネットワーク接続を表す <see cref="T:System.Net.ServicePoint" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.ServicePoint.Address%2A?displayProperty=fullName> プロパティが異なる場合があります <xref:System.Net.HttpWebRequest.Address%2A?displayProperty=fullName> 場合は、要求をリダイレクトします。  
  
   
  
## 例  
 [!code-cpp[System.Net.ServicePoint\#6](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.ServicePoint/CPP/servicepoint.cpp#6)]
 [!code-csharp[System.Net.ServicePoint\#6](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.ServicePoint/CS/servicepoint.cs#6)]
 [!code-vb[System.Net.ServicePoint\#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.ServicePoint/VB/servicepoint.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsCookieContainer">
      <MemberSignature Language="C#" Value="public virtual bool SupportsCookieContainer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsCookieContainer" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.SupportsCookieContainer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求が <see cref="T:System.Net.CookieContainer" /> をサポートするかどうかを示す値を取得します。</summary>
        <value>要求が <see cref="T:System.Net.CookieContainer" /> をサポートする場合は <see langword="true" />、それ以外の場合は <see langword="false" />。  
  
 <see cref="T:System.Net.CookieContainer" /> がサポートされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo serializationInfo, valuetype System.Runtime.Serialization.StreamingContext streamingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serializationInfo" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="streamingContext" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="serializationInfo">データの読み込み先となる <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
        <param name="streamingContext">このシリアル化の転送先を指定する <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
        <summary>
          <see cref="T:System.Runtime.Serialization.SerializationInfo" /> に、オブジェクトをシリアル化するために必要なデータを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 含まれるすべてのオブジェクト、 <xref:System.Runtime.Serialization.SerializationInfo> 自動的に追跡され、フォーマッタによってシリアル化します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public override int Timeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Timeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Timeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="M:System.Net.HttpWebRequest.GetResponse" /> メソッドと <see cref="M:System.Net.HttpWebRequest.GetRequestStream" /> メソッドのタイムアウト値 \(ミリ秒単位\) を取得または設定します。</summary>
        <value>要求がタイムアウトするまでのミリ秒単位の待機時間。 既定値は 100,000 ミリ秒 \(100 秒\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.HttpWebRequest.Timeout%2A> それ以降の同期要求が行われたミリ秒数には、 <xref:System.Net.HttpWebRequest.GetResponse%2A> メソッドは、応答の待機、 <xref:System.Net.HttpWebRequest.GetRequestStream%2A> メソッドは、ストリームの待機です。<xref:System.Net.HttpWebRequest.Timeout%2A> 全体の要求と応答にいないに個別に適用されます、 <xref:System.Net.HttpWebRequest.GetRequestStream%2A> と <xref:System.Net.HttpWebRequest.GetResponse%2A> メソッドの呼び出しです。 タイムアウト期間内にリソースが返されない場合、要求をスロー、 <xref:System.Net.WebException> で、 <xref:System.Net.WebException.Status%2A> プロパティに設定 <xref:System.Net.WebExceptionStatus.Timeout?displayProperty=fullName>します。  
  
 <xref:System.Net.HttpWebRequest.Timeout%2A> 前にプロパティを設定する必要があります、 <xref:System.Net.HttpWebRequest.GetRequestStream%2A> または <xref:System.Net.HttpWebRequest.GetResponse%2A> メソッドが呼び出されます。 変更する、 <xref:System.Net.HttpWebRequest.Timeout%2A> プロパティを呼び出した後、 <xref:System.Net.HttpWebRequest.GetRequestStream%2A> または <xref:System.Net.HttpWebRequest.GetResponse%2A> メソッドには影響を与えません  
  
 <xref:System.Net.HttpWebRequest.Timeout%2A> プロパティを使用した非同期の要求への影響を持たない、 <xref:System.Net.HttpWebRequest.BeginGetResponse%2A> または <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A> メソッドです。  
  
> [!CAUTION]
>  非同期要求の場合は、クライアント アプリケーションは、独自のタイムアウト メカニズムを実装します。 使用例を参照してください、 <xref:System.Net.HttpWebRequest.BeginGetResponse%2A> メソッドです。  
  
 待ってから、読み取りまたは書き込み操作がタイムアウトになる時間を指定する、 <xref:System.Net.HttpWebRequest.ReadWriteTimeout%2A> プロパティです。  
  
 ドメイン ネーム システム \(DNS\) クエリは、最大で 15 個の \(秒\) を返すかタイムアウトにかかる場合があります。 設定すると、要求には、解像度を必要とするホスト名が含まれています。 <xref:System.Net.FileWebRequest.Timeout%2A> 値より小さい 15 秒かかる場合があります 15 秒以上前に、 <xref:System.Net.WebException> 要求タイムアウトを示すためにスローされます。  
  
   
  
## 例  
 次のコード例、 <xref:System.Net.HttpWebRequest.Timeout%2A> のプロパティ、 <xref:System.Net.HttpWebRequest> オブジェクトです。  
  
 [!code-cpp[HttpWebRequest\_Timeout\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_Timeout/CPP/httpwebrequest_timeout.cpp#1)]
 [!code-csharp[HttpWebRequest\_Timeout\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_Timeout/CS/httpwebrequest_timeout.cs#1)]
 [!code-vb[HttpWebRequest\_Timeout\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_Timeout/VB/httpwebrequest_timeout.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定された値が 0 未満で、<see cref="F:System.Threading.Timeout.Infinite" /> ではありません。</exception>
        <altmember cref="P:System.Net.HttpWebRequest.ReadWriteTimeout" />
      </Docs>
    </Member>
    <Member MemberName="TransferEncoding">
      <MemberSignature Language="C#" Value="public string TransferEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TransferEncoding" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.TransferEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="Transfer-encoding" /> HTTP ヘッダーの値を取得または設定します。</summary>
        <value>
          <see langword="Transfer-encoding" /> HTTP ヘッダーの値。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 設定する前に、 <xref:System.Net.HttpWebRequest.TransferEncoding%2A> プロパティには、まず、設定、 <xref:System.Net.HttpWebRequest.SendChunked%2A> プロパティを `true`します。 オフにすると <xref:System.Net.HttpWebRequest.TransferEncoding%2A> に設定して `null` の値に影響を与えません <xref:System.Net.HttpWebRequest.SendChunked%2A>します。  
  
 割り当てられた値、 <xref:System.Net.HttpWebRequest.TransferEncoding%2A> プロパティは、既存の内容を置き換えます。  
  
> [!NOTE]
>  このプロパティの値が格納されている <xref:System.Net.WebHeaderCollection>します。 WebHeaderCollection が設定されている場合、プロパティ値は失われます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> は、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> である場合に設定されます。</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> は "Chunked" 値に設定されます。</exception>
      </Docs>
    </Member>
    <Member MemberName="UnsafeAuthenticatedConnectionSharing">
      <MemberSignature Language="C#" Value="public bool UnsafeAuthenticatedConnectionSharing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UnsafeAuthenticatedConnectionSharing" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>高速 NTLM 認証された接続共有を許可するかどうかを示す値を取得または設定します。</summary>
        <value>認証された接続を確立し続ける場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティの既定値は `false`, 、それが原因で現在の接続が、要求が完了した後に閉じられます。 新しい要求を発行するたびに、アプリケーションは認証シーケンスを処理しなければです。  
  
 このプロパティ設定されている場合 `true`, 、認証を行った後、応答を取得するための接続が開いたままです。 このプロパティを設定があることを要求他の場合、 `true` 再認証を行わず、接続を使用することがあります。 つまり、ユーザー A の接続が認証された場合ユーザー B 再利用ことは A の接続。ユーザー A の資格情報に基づいてユーザー B の要求が満たされる  
  
> [!CAUTION]
>  ない管理の脆弱性、システムでこのプロパティに設定する場合に必要があります、認証を受けていない接続を使用するアプリケーションなので `true`します。 アプリケーションが複数のユーザーの要求を送信する場合 \(複数のユーザー アカウントを偽装\) し、依存するリソースを保護する認証にこのプロパティを設定 `true` 以下に示すように、接続グループを使用する場合を除き、します。  
  
 場合に、このメカニズムを有効にすることを検討することも、パフォーマンスの問題が発生し、アプリケーションが統合 Windows 認証を使って Web サーバーで実行します。  
  
 この設定を有効にすると、セキュリティ リスクに対するシステムが開きます。 設定した場合、 <xref:System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing%2A> プロパティを `true` は次の予防措置を講じてください。  
  
-   使用して、 <xref:System.Net.HttpWebRequest.ConnectionGroupName%2A> プロパティをさまざまなユーザー接続を管理します。 認証されていないアプリケーションで、接続の潜在的な使用を回避できます。 たとえば、ユーザー A がユーザー B とは異なる一意の接続グループ名を持つ必要があります。これは、ユーザー アカウントごとに分離のレイヤーを提供します。  
  
-   だれも接続を避けるため、保護された環境でアプリケーションを実行します。  
  
 バック エンド サーバーを制御する場合別の方法としてお勧め認証の永続化をオフにします。 これほど、パフォーマンスが向上しますが、方が安全です。 詳細については、検索、MSDN ライブラリの「で AuthPersistence [http:\/\/msdn.microsoft.com\/library](http://msdn.microsoft.com/library)します。  
  
> [!NOTE]
>  両方 <xref:System.Net.WebRequest.PreAuthenticate%2A> と <xref:System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing%2A> に設定されている `true`, 、安全でないプールも承認ヘッダーを持つ接続を使用して各要求を送信します。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Net.WebPermission">Unrestricted Web permission is required to set this property.</permission>
      </Docs>
    </Member>
    <Member MemberName="UseDefaultCredentials">
      <MemberSignature Language="C#" Value="public override bool UseDefaultCredentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseDefaultCredentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.UseDefaultCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>既定の資格情報が要求と共に送信されるかどうかを制御する <see cref="T:System.Boolean" /> 値を取得または設定します。</summary>
        <value>既定の資格情報を使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを設定 `true` 要求がこのが作成した <xref:System.Net.HttpWebRequest> オブジェクト場合は、サーバーから要求された認証を行うか、現在ログオンしているユーザーの資格情報を使用します。 クライアント アプリケーションでは、ほとんどのシナリオでは、目的の動作です。 このプロパティを使用する代わりに、ASP.NET アプリケーションなどの中間層アプリケーションと設定する、 <xref:System.Net.HttpWebRequest.Credentials%2A> プロパティが代わりに、要求が行われるクライアントの資格情報をします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">要求の送信後に、このプロパティを設定しようとしました。</exception>
      </Docs>
    </Member>
    <Member MemberName="UserAgent">
      <MemberSignature Language="C#" Value="public string UserAgent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UserAgent" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.UserAgent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="User-agent" /> HTTP ヘッダーの値を取得または設定します。</summary>
        <value>
          <see langword="User-agent" /> HTTP ヘッダーの値。 既定値は <see langword="null" /> です。  
  
 <block subset="none" type="note">  
<para>  
 このプロパティの値が格納されている <see cref="T:System.Net.WebHeaderCollection" />します。 WebHeaderCollection が設定されている場合、プロパティ値は失われます。  
  
</para>  
</block></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例、 <xref:System.Net.HttpWebRequest.UserAgent%2A> プロパティです。  
  
 [!code-cpp[HttpWebRequest\_UserAgent\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_UserAgent/CPP/httpwebrequest_useragent.cpp#1)]
 [!code-csharp[HttpWebRequest\_UserAgent\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_UserAgent/CS/httpwebrequest_useragent.cs#1)]
 [!code-vb[HttpWebRequest\_UserAgent\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_UserAgent/VB/httpwebrequest_useragent.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetRequestStream">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>要求データを書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクトを取得します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="EndGetRequestStream">
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>データを書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクトの非同期要求を終了します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Net.HttpWebRequest" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>