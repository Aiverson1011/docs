<Type Name="ArrayList" FullName="System.Collections.ArrayList">
  <TypeSignature Language="C#" Value="public class ArrayList : ICloneable, System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit ArrayList extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.ArrayList" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.NonGeneric</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.ArrayList/ArrayListDebugView))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>必要に応じてサイズが動的に拡大される配列を使用して <see cref="T:System.Collections.IList" /> インターフェイスを実装します。  
  
 この型の .NET Framework ソース コードを参照するには、[参照ソース](http://referencesource.microsoft.com/#mscorlib/system/collections/arraylist.cs#3e3f6715773d6643)をご覧ください。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/collections/arraylist.cs#3e3f6715773d6643). You can browse through the source code online, download the reference for offline viewing, and step through the sources \(including patches and updates\) during debugging; see [instructions](http://referencesource.microsoft.com/).  
  
 The <xref:System.Collections.ArrayList> class is designed to hold heterogeneous collections of objects. However, it does not always offer the best performance. Instead, we recommend the following:  
  
-   For a heterogeneous collection of objects, use the **languageKeyword tag is not supported!!!!**  
     \(in C\#\) or **languageKeyword tag is not supported!!!!**  
     \(in Visual Basic\) type.  
  
-   For a homogeneous collection of objects, use the <xref:System.Collections.Generic.List%601> class.  
  
 See the "Performance Considerations" section in the <xref:System.Collections.Generic.List%601> reference topic for a discussion of the relative performance of these classes.  
  
 The <xref:System.Collections.ArrayList> is not guaranteed to be sorted.  You must sort the <xref:System.Collections.ArrayList> by calling its <xref:System.Collections.ArrayList.Sort%2A> method prior to performing operations \(such as <xref:System.Collections.ArrayList.BinarySearch%2A>\) that require the <xref:System.Collections.ArrayList> to be sorted. To maintain a collection that is automatically sorted as new elements are added, you can use the <xref:System.Collections.Generic.SortedSet%601> class.  
  
 The capacity of an <xref:System.Collections.ArrayList> is the number of elements the <xref:System.Collections.ArrayList> can hold. As elements are added to an <xref:System.Collections.ArrayList>, the capacity is automatically increased as required through reallocation. The capacity can be decreased by calling <xref:System.Collections.ArrayList.TrimToSize%2A> or by setting the <xref:System.Collections.ArrayList.Capacity%2A> property explicitly.  
  
 For very large <xref:System.Collections.ArrayList> objects, you can increase the maximum capacity to 2 billion elements on a 64\-bit system by setting the **languageKeyword tag is not supported!!!!**  
 attribute of the  configuration element to **languageKeyword tag is not supported!!!!**  
 in the run\-time environment.  
  
 Elements in this collection can be accessed using an integer index.  Indexes in this collection are zero\-based.  
  
 The <xref:System.Collections.ArrayList> collection accepts **languageKeyword tag is not supported!!!!**  
 as a valid value. It also allows duplicate elements.  
  
 Using multidimensional arrays as elements in an <xref:System.Collections.ArrayList> collection is not supported.  
  
   
  
## 例  
 The following code example shows how to create and initialize an <xref:System.Collections.ArrayList> and how to display its values.  
  
 [!code-cpp[Classic ArrayList Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ArrayList Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList Example/CS/source.cs#1)]
 [!code-vb[Classic ArrayList Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Public static \(**languageKeyword tag is not supported!!!!**  
 in Visual Basic\) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.  
  
 An <see cref="T:System.Collections.ArrayList" /> can support multiple readers concurrently, as long as the collection is not modified. To guarantee the thread safety of the <see cref="T:System.Collections.ArrayList" />, all operations must be done through the wrapper returned by the <see cref="M:System.Collections.ArrayList.Synchronized(System.Collections.IList)" /> method.  
  
 Enumerating through a collection is intrinsically not a thread\-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</threadsafe>
    <altmember cref="T:System.Collections.IList" />
    <altmember cref="T:System.Collections.Generic.List`1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArrayList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>空で、既定の初期量を備えた、<see cref="T:System.Collections.ArrayList" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 容量、 <xref:System.Collections.ArrayList> は要素の数を <xref:System.Collections.ArrayList> を保持できます。 要素が追加されると、 <xref:System.Collections.ArrayList>, 、容量が増加すると自動的に内部の配列を再割り当てすることで必要とします。  
  
 初期量を指定する、さまざまな要素を追加するときにサイズ変更操作を実行する必要があるコレクションのサイズを推定できる場合、 <xref:System.Collections.ArrayList>です。  
  
 このコンス トラクターは、o \(1\) 操作です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ArrayList.Capacity" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArrayList (System.Collections.ICollection c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.ICollection c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.#ctor(System.Collections.ICollection)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="c" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="c">新しいリストに要素がコピーされた <see cref="T:System.Collections.ICollection" />。</param>
        <summary>指定したコレクションからコピーした要素を格納し、コピーされる要素の数と同じ初期量を備えた、<see cref="T:System.Collections.ArrayList" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 容量、 <xref:System.Collections.ArrayList> は要素の数を <xref:System.Collections.ArrayList> を保持できます。 要素が追加されると、 <xref:System.Collections.ArrayList>, 、容量が増加すると自動的に内部の配列を再割り当てすることで必要とします。  
  
 初期量を指定する、さまざまな要素を追加するときにサイズ変更操作を実行する必要があるコレクションのサイズを推定できる場合、 <xref:System.Collections.ArrayList>です。  
  
 要素の上にコピー、 <xref:System.Collections.ArrayList> によって読み取られる順序と同じ順序で、 <xref:System.Collections.IEnumerator> の <xref:System.Collections.ICollection>です。  
  
 このコンス トラクターは、O \(`n`\) 操作の場合、 `n` 内の要素の数は、 `c`です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="c" /> は <see langword="null" /> です。</exception>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.ArrayList.Capacity" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArrayList (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.#ctor(System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity">新しいリストに格納できる要素の数。</param>
        <summary>空で、指定した初期量を備えた、<see cref="T:System.Collections.ArrayList" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The capacity of an <xref:System.Collections.ArrayList> is the number of elements that the <xref:System.Collections.ArrayList> can hold. As elements are added to an <xref:System.Collections.ArrayList>, the capacity is automatically increased as required by reallocating the internal array.  
  
 If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.ArrayList>.  
  
 This constructor is an O\(**parameterReference tag is not supported!!!!**  
\) operation, where **parameterReference tag is not supported!!!!**  
 is **parameterReference tag is not supported!!!!**  
.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="capacity" /> が 0 未満です。</exception>
        <altmember cref="P:System.Collections.ArrayList.Capacity" />
      </Docs>
    </Member>
    <Member MemberName="Adapter">
      <MemberSignature Language="C#" Value="public static System.Collections.ArrayList Adapter (System.Collections.IList list);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ArrayList Adapter(class System.Collections.IList list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.Adapter(System.Collections.IList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ArrayList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.IList" />
      </Parameters>
      <Docs>
        <param name="list">ラップする <see cref="T:System.Collections.IList" />。</param>
        <summary>特定の <see cref="T:System.Collections.IList" /> に関する <see cref="T:System.Collections.ArrayList" /> ラッパーを作成します。</summary>
        <returns>
          <see cref="T:System.Collections.IList" /> をラップする <see cref="T:System.Collections.ArrayList" /> ラッパー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.ArrayList.Adapter%2A> 内容をコピーしない <xref:System.Collections.IList>します。 代わりに、それを作成するだけ、 <xref:System.Collections.ArrayList> ラッパー <xref:System.Collections.IList>。 したがって、変更、 <xref:System.Collections.IList> にも影響、 <xref:System.Collections.ArrayList>です。  
  
 <xref:System.Collections.ArrayList> クラスには汎用 <xref:System.Collections.ArrayList.Reverse%2A>, 、<xref:System.Collections.ArrayList.BinarySearch%2A> と <xref:System.Collections.ArrayList.Sort%2A> メソッドです。 このラッパーはでこれらのメソッドを使用することを意味することができます <xref:System.Collections.IList>。 ただし、より上に直接適用される操作の効率が低下する可能性がありますラッパーを介してこれらの一般的な操作を実行する、 <xref:System.Collections.IList>です。  
  
 このメソッドは、o \(1\) 操作です。  
  
## バージョンの互換性  
 .NET framework version 1.0 および 1.1 では、呼び出し、 <xref:System.Collections.ArrayList.GetEnumerator%28System.Int32%2CSystem.Int32%29> メソッド オーバー ロード、 <xref:System.Collections.ArrayList> ラッパーには、カウントではなく、上限として、2 番目の引数を処理する列挙子が返されます。[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] 2 番目の引数が正しくカウントとして扱われます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="list" /> は <see langword="null" /> です。</exception>
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)" />
        <altmember cref="M:System.Collections.ArrayList.Reverse" />
        <altmember cref="M:System.Collections.ArrayList.Sort" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual int Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.Add(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Object" /> の末尾に追加する <see cref="T:System.Collections.ArrayList" />。 値として <see langword="null" /> を指定できます。</param>
        <summary>
          <see cref="T:System.Collections.ArrayList" /> の末尾にオブジェクトを追加します。</summary>
        <returns>
          <paramref name="value" /> が追加された位置の <see cref="T:System.Collections.ArrayList" /> インデックス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.ArrayList> accepts `null` as a valid value and allows duplicate elements.  
  
 If <xref:System.Collections.ArrayList.Count%2A> already equals <xref:System.Collections.ArrayList.Capacity%2A>, the capacity of the <xref:System.Collections.ArrayList> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.  
  
 If <xref:System.Collections.ArrayList.Count%2A> is less than <xref:System.Collections.ArrayList.Capacity%2A>, this method is an O\(1\) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O\(**parameterReference tag is not supported!!!!**  
\) operation, where **parameterReference tag is not supported!!!!**  
 is <xref:System.Collections.ArrayList.Count%2A>.  
  
   
  
## 例  
 The following code example shows how to add elements to the <xref:System.Collections.ArrayList>.  
  
 [!code-cpp[Classic ArrayList.Add Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.Add Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ArrayList.Add Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.Add Example/CS/source.cs#1)]
 [!code-vb[Classic ArrayList.Add Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.Add Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.Collections.ArrayList" /> は読み取り専用です。  
  
 \-または\-  
  
 <see cref="T:System.Collections.ArrayList" /> は固定サイズです。</exception>
        <altmember cref="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)" />
        <altmember cref="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)" />
        <altmember cref="M:System.Collections.ArrayList.Remove(System.Object)" />
        <altmember cref="P:System.Collections.ArrayList.Count" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public virtual void AddRange (System.Collections.ICollection c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRange(class System.Collections.ICollection c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="c">
          <see cref="T:System.Collections.ArrayList" /> の末尾に要素が追加される <see cref="T:System.Collections.ICollection" />。 コレクション自体を <see langword="null" /> にすることはできませんが、<see langword="null" /> である要素を格納することは可能です。</param>
        <summary>
          <see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Collections.ArrayList" /> の末尾に追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.ArrayList> 受け入れる `null` 有効な値としてでき、重複する要素。  
  
 内の要素の順序、 <xref:System.Collections.ICollection> に保持されますが、 <xref:System.Collections.ArrayList>です。  
  
 場合、新しい <xref:System.Collections.ArrayList.Count%2A> \(現在 <xref:System.Collections.ArrayList.Count%2A> さらに、コレクションのサイズ\) はより大きくなります <xref:System.Collections.ArrayList.Capacity%2A>, の容量、 <xref:System.Collections.ArrayList> が増加すると、新しい要素に対応する内部の配列を自動的に再割り当てによってし、新しい要素が追加される前に、既存の要素が新しい配列にコピーします。  
  
 場合、 <xref:System.Collections.ArrayList> を増やさずに新しい要素に対応することができます、 <xref:System.Collections.ArrayList.Capacity%2A>, 、このメソッドは O \(`n`\) 操作、ここで `n` 追加される要素の数です。 容量は、新しい要素を格納するためにする必要がある、このメソッドが O \(`n` \+ `m`\) 操作、 `n` を追加する要素の数と `m` は <xref:System.Collections.ArrayList.Count%2A>です。  
  
   
  
## 例  
 次のコード例は、要素を追加する方法を示しています、 <xref:System.Collections.ArrayList>です。  
  
 [!code-cpp[Classic ArrayList.Add Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.Add Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ArrayList.Add Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.Add Example/CS/source.cs#1)]
 [!code-vb[Classic ArrayList.Add Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.Add Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="c" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.Collections.ArrayList" /> は読み取り専用です。  
  
 \-または\-  
  
 <see cref="T:System.Collections.ArrayList" /> は固定サイズです。</exception>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.ArrayList.Capacity" />
        <altmember cref="P:System.Collections.ArrayList.Count" />
        <altmember cref="M:System.Collections.ArrayList.Add(System.Object)" />
        <altmember cref="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)" />
        <altmember cref="M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)" />
        <altmember cref="M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public virtual int BinarySearch (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 BinarySearch(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.BinarySearch(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">検索する <see cref="T:System.Object" />。 値として <see langword="null" /> を指定できます。</param>
        <summary>既定の比較子を使用して、並べ替えられた要素の <see cref="T:System.Collections.ArrayList" /> 全体を検索し、その要素の 0 から始まるインデックスを返します。</summary>
        <returns>
          <paramref name="value" /> が見つかった場合は、並べ替えられた <see cref="T:System.Collections.ArrayList" /> 内の <paramref name="value" /> の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="value" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Collections.ArrayList.Count" /> のビットごとの補数です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `value` パラメーターとの各要素、 <xref:System.Collections.ArrayList> を実装する必要があります、 <xref:System.IComparable> 比較に使用されるインターフェイスです。 要素、 <xref:System.Collections.ArrayList> によって定義された並べ替え順序に従って値を昇順に並べられていなければなりません既に、 <xref:System.IComparable> の実装です。 それ以外の場合、結果が正しくないあります。  
  
 比較する `null` 任意の種類では許可され、使用するとき、例外が生成しない <xref:System.IComparable>します。 ソート時 `null` より少ないその他のオブジェクトと見なされます。  
  
 場合、 <xref:System.Collections.ArrayList> だけが含まれて同じ値を持つ複数の要素には、メソッドが戻ると出現回数のいずれかの出現回数、必ずしも 1 つ目のいずれかを返す場合があります。  
  
 場合、 <xref:System.Collections.ArrayList> に指定した値が含まれていないメソッドは、負の整数を返します。 この負の整数値を検索する値を超える最初の要素のインデックスを取得するには、ビットごとの補数演算 \(~\) を適用できます。 値を挿入するときに、 <xref:System.Collections.ArrayList>, 、このインデックスは、並べ替え順序を維持するために、挿入ポイントとして使用する必要があります。  
  
 このメソッドは O\(log `n`\) 操作では、ここで `n` は <xref:System.Collections.ArrayList.Count%2A>です。  
  
   
  
## 例  
 次のコード例は、使用する方法を示しています。 <xref:System.Collections.ArrayList.BinarySearch%2A> の特定のオブジェクトを検索する、 <xref:System.Collections.ArrayList>です。  
  
 [!code-cpp[Classic ArrayList.BinarySearch1 Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.BinarySearch1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ArrayList.BinarySearch1 Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.BinarySearch1 Example/CS/source.cs#1)]
 [!code-vb[Classic ArrayList.BinarySearch1 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.BinarySearch1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> または <see cref="T:System.Collections.ArrayList" /> の要素のいずれも <see cref="T:System.IComparable" /> インターフェイスを実装していません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="value" /> は<see cref="T:System.Collections.ArrayList" /> の要素と同じ型ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public virtual int BinarySearch (object value, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 BinarySearch(object value, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="value">検索する <see cref="T:System.Object" />。 値として <see langword="null" /> を指定できます。</param>
        <param name="comparer">要素を比較する場合に使用する <see cref="T:System.Collections.IComparer" /> の実装。  
  
 \-または\-  
  
 各要素の <see cref="T:System.IComparable" /> 実装である既定の比較子を使用する場合は <see langword="null" />。</param>
        <summary>指定した比較子を使用して、並べ替えられた要素の <see cref="T:System.Collections.ArrayList" /> 全体を検索し、その要素の 0 から始まるインデックスを返します。</summary>
        <returns>
          <paramref name="value" /> が見つかった場合は、並べ替えられた <see cref="T:System.Collections.ArrayList" /> 内の <paramref name="value" /> の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="value" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Collections.ArrayList.Count" /> のビットごとの補数です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 比較演算子は、要素の比較方法をカスタマイズします。 たとえば、使用、 <xref:System.Collections.CaseInsensitiveComparer> 小文字を区別しない文字列の検索を実行する比較演算子とインスタンス。  
  
 場合 `comparer` が指定の要素、 <xref:System.Collections.ArrayList> 指定して、指定した値と比較 <xref:System.Collections.IComparer> 実装します。 要素、 <xref:System.Collections.ArrayList> によって定義された並べ替え順序に従って値を昇順に並べられていなければなりません既に `comparer`。 そうしないと、結果が正しくない可能性があります。  
  
 場合 `comparer` は `null`, 、比較が行われますを使用して、 <xref:System.IComparable> 要素自体、または指定した値によって提供された実装。 要素、 <xref:System.Collections.ArrayList> 既にによって定義された並べ替え順序に従って値を昇順に並べ替える必要があります、 <xref:System.IComparable> 実装。 それ以外の場合、結果が正しくないあります。  
  
 比較する `null` 任意の種類では許可され、使用するとき、例外が生成しない <xref:System.IComparable>します。 ソート時 `null` より少ないその他のオブジェクトと見なされます。  
  
 場合、 <xref:System.Collections.ArrayList> だけが含まれて同じ値を持つ複数の要素には、メソッドが戻ると出現回数のいずれかの出現回数、必ずしも 1 つ目のいずれかを返す場合があります。  
  
 場合、 <xref:System.Collections.ArrayList> に指定した値が含まれていないメソッドは、負の整数を返します。 この負の整数値を検索する値を超える最初の要素のインデックスを取得するには、ビットごとの補数演算 \(~\) を適用できます。 値を挿入するときに、 <xref:System.Collections.ArrayList>, 、このインデックスは、並べ替え順序を維持するために、挿入ポイントとして使用する必要があります。  
  
 このメソッドは O\(log `n`\) 操作では、ここで `n` は <xref:System.Collections.ArrayList.Count%2A>です。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Collections.ArrayList> 色付きの動物のです。 指定された <xref:System.Collections.IComparer> バイナリ サーチの文字列比較を実行します。 反復的な検索とバイナリ サーチの結果が表示されます。  
  
 [!code-cpp[Classic ArrayList.BinarySearch1 Example\#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.BinarySearch1 Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic ArrayList.BinarySearch1 Example\#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.BinarySearch1 Example/CS/source2.cs#2)]
 [!code-vb[Classic ArrayList.BinarySearch1 Example\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.BinarySearch1 Example/VB/source2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="comparer" /> は <see langword="null" /> であり、<paramref name="value" /> も <see cref="T:System.Collections.ArrayList" /> の要素も <see cref="T:System.IComparable" /> インターフェイスを実装していません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="comparer" /> は <see langword="null" /> であり、<paramref name="value" /> は<see cref="T:System.Collections.ArrayList" /> の要素と同じ型ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public virtual int BinarySearch (int index, int count, object value, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 BinarySearch(int32 index, int32 count, object value, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="index">検索範囲の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索する範囲の長さ。</param>
        <param name="value">検索する <see cref="T:System.Object" />。 値として <see langword="null" /> を指定できます。</param>
        <param name="comparer">要素を比較する場合に使用する <see cref="T:System.Collections.IComparer" /> の実装。  
  
 \-または\-  
  
 各要素の <see cref="T:System.IComparable" /> 実装である既定の比較子を使用する場合は <see langword="null" />。</param>
        <summary>指定した比較子を使用して、並べ替えられた要素の <see cref="T:System.Collections.ArrayList" /> の 1 つの要素の範囲を検索し、その要素の 0 から始まるインデックスを返します。</summary>
        <returns>
          <paramref name="value" /> が見つかった場合は、並べ替えられた <see cref="T:System.Collections.ArrayList" /> 内の <paramref name="value" /> の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="value" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Collections.ArrayList.Count" /> のビットごとの補数です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 比較演算子は、要素の比較方法をカスタマイズします。 たとえば、使用、 <xref:System.Collections.CaseInsensitiveComparer> 小文字を区別しない文字列の検索を実行する比較演算子とインスタンス。  
  
 場合 `comparer` が指定の要素、 <xref:System.Collections.ArrayList> 指定して、指定した値と比較 <xref:System.Collections.IComparer> 実装します。 要素、 <xref:System.Collections.ArrayList> によって定義された並べ替え順序に従って値を昇順に並べられていなければなりません既に `comparer`。 そうしないと、結果が正しくない可能性があります。  
  
 場合 `comparer` は `null`, 、比較が行われますを使用して、 <xref:System.IComparable> 要素自体、または指定した値によって提供された実装。 要素、 <xref:System.Collections.ArrayList> 既にによって定義された並べ替え順序に従って値を昇順に並べ替える必要があります、 <xref:System.IComparable> 実装。 それ以外の場合、結果が正しくないあります。  
  
 比較する `null` 任意の種類では許可され、使用するとき、例外が生成しない <xref:System.IComparable>します。 ソート時 `null` より少ないその他のオブジェクトと見なされます。  
  
 場合、 <xref:System.Collections.ArrayList> だけが含まれて同じ値を持つ複数の要素には、メソッドが戻ると出現回数のいずれかの出現回数、必ずしも 1 つ目のいずれかを返す場合があります。  
  
 場合、 <xref:System.Collections.ArrayList> に指定した値が含まれていないメソッドは、負の整数を返します。 この負の整数値を検索する値を超える最初の要素のインデックスを取得するには、ビットごとの補数演算 \(~\) を適用できます。 値を挿入するときに、 <xref:System.Collections.ArrayList>, 、このインデックスは、並べ替え順序を維持するために、挿入ポイントとして使用する必要があります。  
  
 このメソッドは O\(log `n`\) 操作では、ここで `n` は `count`です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> および <paramref name="count" /> は <see cref="T:System.Collections.ArrayList" /> において有効な範囲を表していません。  
  
 または  
  
 <paramref name="comparer" /> は <see langword="null" /> であり、<paramref name="value" /> または <see cref="T:System.Collections.ArrayList" /> の要素のいずれも <see cref="T:System.IComparable" /> インターフェイスを実装していません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="comparer" /> は <see langword="null" /> であり、<paramref name="value" /> は<see cref="T:System.Collections.ArrayList" /> の要素と同じ型ではありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  
  
 \-または\-  
  
 <paramref name="count" /> が 0 未満です。</exception>
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
    <Member MemberName="Capacity">
      <MemberSignature Language="C#" Value="public virtual int Capacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Capacity" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ArrayList.Capacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Collections.ArrayList" /> に格納できる要素の数を取得または設定します。</summary>
        <value>
          <see cref="T:System.Collections.ArrayList" /> に格納できる要素の数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.ArrayList.Capacity%2A> is the number of elements that the <xref:System.Collections.ArrayList> can store. <xref:System.Collections.ArrayList.Count%2A> is the number of elements that are actually in the <xref:System.Collections.ArrayList>.  
  
 <xref:System.Collections.ArrayList.Capacity%2A> is always greater than or equal to <xref:System.Collections.ArrayList.Count%2A>. If <xref:System.Collections.ArrayList.Count%2A> exceeds <xref:System.Collections.ArrayList.Capacity%2A> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.  
  
 The capacity can be decreased by calling <xref:System.Collections.ArrayList.TrimToSize%2A> or by setting the <xref:System.Collections.ArrayList.Capacity%2A> property explicitly. When the value of <xref:System.Collections.ArrayList.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity.  
  
 Retrieving the value of this property is an O\(1\) operation; setting the property is an O\(**parameterReference tag is not supported!!!!**  
\) operation, where **parameterReference tag is not supported!!!!**  
 is the new capacity.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.Collections.ArrayList.Capacity" /> は <see cref="P:System.Collections.ArrayList.Count" /> より小さい値に設定します。</exception>
        <exception cref="T:System.OutOfMemoryException">システムで使用可能なメモリが不足しています。</exception>
        <altmember cref="P:System.Collections.ArrayList.Count" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.Clear" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Collections.ArrayList" /> からすべての要素を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.ArrayList.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.  
  
 <xref:System.Collections.ArrayList.Capacity%2A> remains unchanged.  To reset the capacity of the <xref:System.Collections.ArrayList>, call <xref:System.Collections.ArrayList.TrimToSize%2A> or set the <xref:System.Collections.ArrayList.Capacity%2A> property directly. Trimming an empty <xref:System.Collections.ArrayList> sets the capacity of the <xref:System.Collections.ArrayList> to the default capacity.  
  
 This method is an O\(**parameterReference tag is not supported!!!!**  
\) operation, where **parameterReference tag is not supported!!!!**  
 is <xref:System.Collections.ArrayList.Count%2A>.  
  
   
  
## 例  
 The following code example shows how to trim the unused portions of the <xref:System.Collections.ArrayList> and how to clear the values of the <xref:System.Collections.ArrayList>.  
  
 [!code-cpp[Classic ArrayList.Clear Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.Clear Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ArrayList.Clear Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.Clear Example/CS/source.cs#1)]
 [!code-vb[Classic ArrayList.Clear Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.Clear Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.Collections.ArrayList" /> は読み取り専用です。  
  
 \-または\-  
  
 <see cref="T:System.Collections.ArrayList" /> は固定サイズです。</exception>
        <altmember cref="M:System.Collections.ArrayList.TrimToSize" />
        <altmember cref="P:System.Collections.ArrayList.Capacity" />
        <altmember cref="P:System.Collections.ArrayList.Count" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.Clone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Collections.ArrayList" /> の簡易コピーを作成します。</summary>
        <returns>
          <see cref="T:System.Collections.ArrayList" /> の簡易コピー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to. The references in the new collection point to the same objects that the references in the original collection point to.  
  
 In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.  
  
 This method is an O\(**parameterReference tag is not supported!!!!**  
\) operation, where **parameterReference tag is not supported!!!!**  
 is <xref:System.Collections.ArrayList.Count%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public virtual bool Contains (object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.Contains(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">
          <see cref="T:System.Collections.ArrayList" /> 内で検索される <see cref="T:System.Object" />。 値として <see langword="null" /> を指定できます。</param>
        <summary>ある要素が <see cref="T:System.Collections.ArrayList" /> 内に存在するかどうかを判断します。</summary>
        <returns>
          <see langword="true" /> が <paramref name="item" /> に存在する場合は <see cref="T:System.Collections.ArrayList" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.ArrayList.Count%2A>です。  
  
 このメソッドを呼び出すことで等しいかどうかを判断 <xref:System.Object.Equals%2A?displayProperty=fullName>します。  
  
 以降、.NET Framework 2.0 では、このメソッドを使用して、コレクションのオブジェクトの <xref:System.Object.Equals%2A> と <xref:System.IComparable.CompareTo%2A> メソッド `item` 項目が存在するかどうかを調べる。 .NET Framework の以前のバージョンでは、この判断を下しますを使用して行われた、 <xref:System.Object.Equals%2A> と <xref:System.IComparable.CompareTo%2A> のメソッド、 `item` コレクション内のオブジェクトのパラメーターです。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ArrayList.IndexOf(System.Object)" />
        <altmember cref="M:System.Collections.ArrayList.LastIndexOf(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public virtual void CopyTo (Array array);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.CopyTo(System.Array)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
      </Parameters>
      <Docs>
        <param name="array">
          <see cref="T:System.Collections.ArrayList" /> から要素がコピーされる 1 次元の <see cref="T:System.Array" />。<see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
        <summary>
          <see cref="T:System.Collections.ArrayList" /> 全体を互換性のある 1 次元の <see cref="T:System.Array" /> にコピーします。コピー操作は、コピー先の配列の先頭から始まります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The specified array must be of a compatible type.  
  
 This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.  
  
 The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.ArrayList>.  
  
 This method is an O\(**parameterReference tag is not supported!!!!**  
\) operation, where **parameterReference tag is not supported!!!!**  
 is <xref:System.Collections.ArrayList.Count%2A>.  
  
   
  
## 例  
 The following code example shows how to copy an <xref:System.Collections.ArrayList> into a one\-dimensional <xref:System.Array?displayProperty=fullName>.  
  
 [!code-cpp[Classic ArrayList.CopyTo Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.CopyTo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ArrayList.CopyTo Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.CopyTo Example/CS/source.cs#1)]
 [!code-vb[Classic ArrayList.CopyTo Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.CopyTo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="array" /> が多次元です。  
  
 または  
  
 コピー元の <see cref="T:System.Collections.ArrayList" /> の要素数が、コピー先 <paramref name="array" /> に含めることができる要素数を超えています。</exception>
        <exception cref="T:System.InvalidCastException">コピー元の <see cref="T:System.Collections.ArrayList" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public virtual void CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.CopyTo(System.Array,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.ArrayList" />。<see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
        <param name="arrayIndex">コピーの開始位置とする <c>array</c> のインデックス \(0 から始まる\)。</param>
        <summary>
          <see cref="T:System.Collections.ArrayList" /> 全体を、互換性のある 1 次元の <see cref="T:System.Array" /> にコピーします。コピー操作は、コピー先の配列の指定したインデックスから始まる部分に行います。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定された配列は、互換性のある型でなければなりません。  
  
 このメソッドを使用して <xref:System.Array.Copy%2A?displayProperty=fullName> 、要素をコピーします。  
  
 要素がコピーされた、 <xref:System.Array> を列挙子が反復処理する順序と同じ順序で、 <xref:System.Collections.ArrayList>です。  
  
 このメソッドは O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.ArrayList.Count%2A>です。  
  
   
  
## 例  
 次のコード例をコピーする方法を示しています、 <xref:System.Collections.ArrayList> 1 次元に <xref:System.Array?displayProperty=fullName>します。  
  
 [!code-cpp[Classic ArrayList.CopyTo1 Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.CopyTo1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ArrayList.CopyTo1 Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.CopyTo1 Example/CS/source.cs#1)]
 [!code-vb[Classic ArrayList.CopyTo1 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.CopyTo1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="arrayIndex" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="array" /> が多次元です。  
  
 または  
  
 ソース内の要素の数 <see cref="T:System.Collections.ArrayList" /> から使用可能な領域よりも大きい <paramref name="arrayIndex" /> 変換先の末尾に <paramref name="array" />します。</exception>
        <exception cref="T:System.InvalidCastException">ソースの種類 <see cref="T:System.Collections.ArrayList" /> 先の型に自動的にキャストできない <paramref name="array" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public virtual void CopyTo (int index, Array array, int arrayIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(int32 index, class System.Array array, int32 arrayIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">コピーを開始するコピー元の <see cref="T:System.Collections.ArrayList" /> 内の、0 から始まるインデックス。</param>
        <param name="array">
          <see cref="T:System.Array" /> からコピーされる要素のコピー先となる 1 次元の <see cref="T:System.Collections.ArrayList" />。<see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
        <param name="arrayIndex">コピーの開始位置とする <c>array</c> のインデックス \(0 から始まる\)。</param>
        <param name="count">コピーする要素の数。</param>
        <summary>要素の範囲を <see cref="T:System.Collections.ArrayList" /> から互換性のある 1 次元の <see cref="T:System.Array" /> にコピーします。コピー操作は、コピー先の配列の指定したインデックスから始まります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The specified array must be of a compatible type.  
  
 This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.  
  
 The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.ArrayList>.  
  
 This method is an O\(**parameterReference tag is not supported!!!!**  
\) operation, where **parameterReference tag is not supported!!!!**  
 is **parameterReference tag is not supported!!!!**  
.  
  
   
  
## 例  
 The following code example shows how to copy an <xref:System.Collections.ArrayList> into a one\-dimensional <xref:System.Array?displayProperty=fullName>.  
  
 [!code-cpp[Classic ArrayList.CopyTo1 Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.CopyTo1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ArrayList.CopyTo1 Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.CopyTo1 Example/CS/source.cs#1)]
 [!code-vb[Classic ArrayList.CopyTo1 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.CopyTo1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  
  
 \-または\-  
  
 <paramref name="arrayIndex" /> が 0 未満です。  
  
 \-または\-  
  
 <paramref name="count" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="array" /> が多次元です。  
  
 または  
  
 <paramref name="index" /> がコピー元の <see cref="T:System.Collections.ArrayList" /> の <see cref="P:System.Collections.ArrayList.Count" /> 以上です。  
  
 \-または\-  
  
 コピー元の <see cref="T:System.Collections.ArrayList" /> の <paramref name="index" /> から最後までの要素数が、コピー先の <paramref name="array" /> の <paramref name="arrayIndex" /> から最後までの使用可能な領域を超えています。</exception>
        <exception cref="T:System.InvalidCastException">コピー元の <see cref="T:System.Collections.ArrayList" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public virtual int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ArrayList.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>実際に含まれる要素の数を取得、 <see cref="T:System.Collections.ArrayList" />です。</summary>
        <value>実際に含まれる要素の数、 <see cref="T:System.Collections.ArrayList" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.ArrayList.Capacity%2A> 要素の数を <xref:System.Collections.ArrayList> を格納できます。<xref:System.Collections.ArrayList.Count%2A> 実際に含まれる要素の数が、 <xref:System.Collections.ArrayList>です。  
  
 <xref:System.Collections.ArrayList.Capacity%2A> 以上の値には、常に <xref:System.Collections.ArrayList.Count%2A>します。 場合 <xref:System.Collections.ArrayList.Count%2A> を超える <xref:System.Collections.ArrayList.Capacity%2A> 要素を追加するときに、容量は自動的に変更前の要素をコピーし、新しい要素を追加する前に、内部配列の再割り当てして増加します。  
  
 このプロパティ値を取得することは、O\(1\) 操作になります。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ArrayList.Capacity" />
      </Docs>
    </Member>
    <Member MemberName="FixedSize">
      <MemberSignature Language="C#" Value="public static System.Collections.ArrayList FixedSize (System.Collections.ArrayList list);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ArrayList FixedSize(class System.Collections.ArrayList list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ArrayList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.ArrayList" />
      </Parameters>
      <Docs>
        <param name="list">ラップする <see cref="T:System.Collections.ArrayList" />。</param>
        <summary>固定サイズの <see cref="T:System.Collections.ArrayList" /> ラッパーを返します。</summary>
        <returns>固定サイズの <see cref="T:System.Collections.ArrayList" /> ラッパー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このラッパーへの追加と、元の削除を防止するために使用できる <xref:System.Collections.ArrayList>です。 要素の変更または置き換えもできます。  
  
 固定サイズのコレクションは、コレクションの追加と要素の削除を防止するラッパーです。そのため、追加または削除、要素を含む、基になるコレクションに変更が加えられた場合、固定サイズ コレクションにはそれらの変更が反映されます。  
  
 このメソッドは、o \(1\) 操作です。  
  
   
  
## 例  
 次のコード例は、固定サイズのラッパーを作成する方法を示しています、 <xref:System.Collections.ArrayList>です。  
  
 [!code-cpp[Classic ArrayList.IsFixedSize Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.IsFixedSize Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ArrayList.IsFixedSize Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.IsFixedSize Example/CS/source.cs#1)]
 [!code-vb[Classic ArrayList.IsFixedSize Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.IsFixedSize Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="list" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FixedSize">
      <MemberSignature Language="C#" Value="public static System.Collections.IList FixedSize (System.Collections.IList list);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IList FixedSize(class System.Collections.IList list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.FixedSize(System.Collections.IList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.IList" />
      </Parameters>
      <Docs>
        <param name="list">ラップする <see cref="T:System.Collections.IList" />。</param>
        <summary>固定サイズの <see cref="T:System.Collections.IList" /> ラッパーを返します。</summary>
        <returns>固定サイズの <see cref="T:System.Collections.IList" /> ラッパー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このラッパーへの追加と、元の削除を防止するために使用できる <xref:System.Collections.IList>です。 要素の変更または置き換えもできます。  
  
 固定サイズのコレクションは、コレクションの追加と要素の削除を防止するラッパーです。そのため、追加または削除、要素を含む、基になるコレクションに変更が加えられた場合、固定サイズ コレクションにはそれらの変更が反映されます。  
  
 このメソッドは、o \(1\) 操作です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="list" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>全体の <see cref="T:System.Collections.ArrayList" /> の列挙子を返します。</summary>
        <returns>全体の <see cref="T:System.Collections.ArrayList" /> の <see cref="T:System.Collections.IEnumerator" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 C\# 言語の `foreach` ステートメント \(Visual Basic の場合は `for each`\) を使用することで列挙子の複雑さを回避できます。  したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。  
  
 列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。  
  
 最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。<xref:System.Collections.IEnumerator.Reset%2A> を実行した場合も、列挙子はこの位置に戻されます。  この位置では、<xref:System.Collections.IEnumerator.Current%2A> が未定義です。 そのため、<xref:System.Collections.IEnumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.IEnumerator.Current%2A> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。  
  
 <xref:System.Collections.IEnumerator.Current%2A> は、<xref:System.Collections.IEnumerator.MoveNext%2A> または <xref:System.Collections.IEnumerator.Reset%2A> が呼び出されるまでは同じオブジェクトを返します。<xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.IEnumerator.Current%2A> を次の要素に設定します。  
  
 場合 <xref:System.Collections.IEnumerator.MoveNext%2A> コレクション、列挙子の末尾が、コレクション内の最後の要素の後に配置されているパスと <xref:System.Collections.IEnumerator.MoveNext%2A> 返します `false`します。 列挙子があるときはこの位置にある場合、それ以降の呼び出しは、 <xref:System.Collections.IEnumerator.MoveNext%2A> を返すことも `false`です。 最後の呼び出しの場合 <xref:System.Collections.IEnumerator.MoveNext%2A> 返される `false`, 、<xref:System.Collections.IEnumerator.Current%2A> は定義されていません。<xref:System.Collections.IEnumerator.Current%2A> をコレクションの最初の要素にもう一度設定するには、<xref:System.Collections.IEnumerator.Reset%2A> を呼び出してから <xref:System.Collections.IEnumerator.MoveNext%2A> を呼び出します。  
  
 コレクションが変更されない限り、列挙子は有効です。 コレクションに対して変更 \(要素の追加、変更、削除など\) が行われると、列挙子は回復不可能な無効状態になり、その動作は未定義になります。  
  
 列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。  列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。  コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。  
  
 このメソッドは、o \(1\) 操作です。  
  
   
  
## 例  
 次の例の列挙子を取得する、 <xref:System.Collections.ArrayList>, 、および範囲の要素の列挙子、 <xref:System.Collections.ArrayList>です。  
  
 [!code-csharp[Collections.ArrayList.GetEnumerator\#1](~/samples/snippets/csharp/VS_Snippets_CLR/collections.arraylist.getenumerator/cs/program.cs#1)]
 [!code-vb[Collections.ArrayList.GetEnumerator\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/collections.arraylist.getenumerator/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetEnumerator (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">列挙子が参照する必要のある <see cref="T:System.Collections.ArrayList" /> セクションの開始位置を示す 0 から始まるインデックス番号。</param>
        <param name="count">列挙子が参照する必要のある <see cref="T:System.Collections.ArrayList" /> セクション内の要素の数。</param>
        <summary>
          <see cref="T:System.Collections.ArrayList" /> 内の要素の範囲の列挙子を返します。</summary>
        <returns>
          <see cref="T:System.Collections.ArrayList" /> 内の要素の指定した範囲の <see cref="T:System.Collections.IEnumerator" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `foreach` C\# 言語のステートメント \(`for each` Visual c で `For Each` Visual Basic\) 列挙子の複雑さを隠蔽します。  したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。  
  
 列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。  
  
 最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。<xref:System.Collections.IEnumerator.Reset%2A> を実行した場合も、列挙子はこの位置に戻されます。  この位置では、<xref:System.Collections.IEnumerator.Current%2A> が未定義です。 そのため、<xref:System.Collections.IEnumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.IEnumerator.Current%2A> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。  
  
 <xref:System.Collections.IEnumerator.Current%2A> は、<xref:System.Collections.IEnumerator.MoveNext%2A> または <xref:System.Collections.IEnumerator.Reset%2A> が呼び出されるまでは同じオブジェクトを返します。<xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.IEnumerator.Current%2A> を次の要素に設定します。  
  
 場合 <xref:System.Collections.IEnumerator.MoveNext%2A> コレクション、列挙子の末尾が、コレクション内の最後の要素の後に配置されているパスと <xref:System.Collections.IEnumerator.MoveNext%2A> 返します `false`します。 列挙子があるときはこの位置にある場合、それ以降の呼び出しは、 <xref:System.Collections.IEnumerator.MoveNext%2A> を返すことも `false`です。 最後の呼び出しの場合 <xref:System.Collections.IEnumerator.MoveNext%2A> 返される `false`, 、<xref:System.Collections.IEnumerator.Current%2A> は定義されていません。<xref:System.Collections.IEnumerator.Current%2A> をコレクションの最初の要素にもう一度設定するには、<xref:System.Collections.IEnumerator.Reset%2A> を呼び出してから <xref:System.Collections.IEnumerator.MoveNext%2A> を呼び出します。  
  
 コレクションが変更されない限り、列挙子は有効です。 コレクションに対して変更 \(要素の追加、変更、削除など\) が行われると、列挙子は回復不可能な無効状態になり、その動作は未定義になります。  
  
 列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。  列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。  コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。  
  
 このメソッドは、o \(1\) 操作です。  
  
## バージョンの互換性  
 .NET Framework version 1.0 および 1.1 では、列挙子、 <xref:System.Collections.ArrayList> ラッパーによって返される、 <xref:System.Collections.ArrayList.Adapter%2A> カウントではなく、上限として、メソッドが 2 番目の引数を処理します。[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] 2 番目の引数が正しくカウントとして扱われます。  
  
   
  
## 例  
 次の例の列挙子を取得する、 <xref:System.Collections.ArrayList>, 、および範囲の要素の列挙子、 <xref:System.Collections.ArrayList>です。  
  
 [!code-csharp[Collections.ArrayList.GetEnumerator\#1](~/samples/snippets/csharp/VS_Snippets_CLR/collections.arraylist.getenumerator/cs/program.cs#1)]
 [!code-vb[Collections.ArrayList.GetEnumerator\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/collections.arraylist.getenumerator/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  
  
 \-または\-  
  
 <paramref name="count" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> および <paramref name="count" /> は <see cref="T:System.Collections.ArrayList" /> において有効な範囲を指定していません。</exception>
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="GetRange">
      <MemberSignature Language="C#" Value="public virtual System.Collections.ArrayList GetRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.ArrayList GetRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ArrayList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">範囲が開始する位置の、0 から始まる <see cref="T:System.Collections.ArrayList" /> のインデックス番号。</param>
        <param name="count">範囲内の要素の数。</param>
        <summary>元の <see cref="T:System.Collections.ArrayList" /> 内の要素のサブセットを表す <see cref="T:System.Collections.ArrayList" /> を返します。</summary>
        <returns>元の <see cref="T:System.Collections.ArrayList" /> 内の要素のサブセットを表す <see cref="T:System.Collections.ArrayList" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、要素のコピーを作成できません。 新しい <xref:System.Collections.ArrayList> ソース ビュー ウィンドウのみ <xref:System.Collections.ArrayList>します。 ただし、後続の変更は、ソース <xref:System.Collections.ArrayList> このビュー ウィンドウで行う必要がある <xref:System.Collections.ArrayList>です。 ソースに直接変更が加えられた場合 <xref:System.Collections.ArrayList>, 、ビュー ウィンドウ <xref:System.Collections.ArrayList> が無効になってに対する操作が戻ると、 <xref:System.InvalidOperationException>です。  
  
 このメソッドは、o \(1\) 操作です。  
  
   
  
## 例  
 次のコード例を設定し、範囲の要素を取得する方法を示しています、 <xref:System.Collections.ArrayList>です。  
  
 [!code-cpp[Classic ArrayList.SetRange Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.SetRange Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ArrayList.SetRange Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.SetRange Example/CS/source.cs#1)]
 [!code-vb[Classic ArrayList.SetRange Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.SetRange Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  
  
 \-または\-  
  
 <paramref name="count" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> および <paramref name="count" /> は <see cref="T:System.Collections.ArrayList" /> において要素の有効な範囲を表していません。</exception>
        <altmember cref="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)" />
        <altmember cref="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)" />
        <altmember cref="M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.IndexOf(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Collections.ArrayList" /> 内で検索される <see cref="T:System.Object" />。 値として <see langword="null" /> を指定できます。</param>
        <summary>指定した <see cref="T:System.Object" /> を検索し、<see cref="T:System.Collections.ArrayList" /> 全体内で最初に見つかった位置の 0 から始まるインデックスを返します。</summary>
        <returns>
          <see cref="T:System.Collections.ArrayList" /> 全体を対象に <paramref name="value" /> を検索し、見つかった場合は、インデックス番号の最も小さい要素の 0 から始まるインデックス番号、それ以外の場合は \-1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.ArrayList> はフォワード最初の要素を起点と最後の要素で終わる検索します。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.ArrayList.Count%2A>です。  
  
 このメソッドを呼び出すことで等しいかどうかを判断 <xref:System.Object.Equals%2A?displayProperty=fullName>します。  
  
 以降、.NET Framework 2.0 では、このメソッドを使用して、コレクションのオブジェクトの <xref:System.Object.Equals%2A> と <xref:System.IComparable.CompareTo%2A> メソッド `item` 項目が存在するかどうかを調べる。 .NET Framework の以前のバージョンでは、この判断を下しますを使用して行われた、 <xref:System.Object.Equals%2A> と <xref:System.IComparable.CompareTo%2A> のメソッド、 `item` コレクション内のオブジェクトのパラメーターです。  
  
   
  
## 例  
 次のコード例では、指定した要素の最初に見つかった位置のインデックスを特定する方法を示します。  
  
 [!code-cpp[Classic ArrayList.IndexOf Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.IndexOf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ArrayList.IndexOf Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.IndexOf Example/CS/source.cs#1)]
 [!code-vb[Classic ArrayList.IndexOf Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.IndexOf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ArrayList.LastIndexOf(System.Object)" />
        <altmember cref="M:System.Collections.ArrayList.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (object value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(object value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Collections.ArrayList" /> 内で検索される <see cref="T:System.Object" />。 値として <see langword="null" /> を指定できます。</param>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。 空のリストでは 0 \(ゼロ\) は有効です。</param>
        <summary>指定した <see cref="T:System.Object" /> を検索し、指定したインデックスから最後の要素までの <see cref="T:System.Collections.ArrayList" /> 内の要素の範囲内で最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>
          <see cref="T:System.Collections.ArrayList" /> のうち、<paramref name="startIndex" /> から最後の要素までの要素範囲の中で <paramref name="value" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は \-1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.ArrayList> 転送を開始位置として検索 `startIndex` と最後の要素で終了します。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O \(`n`\) 操作の場合、 `n` から要素の数は、 `startIndex` の末尾に、 <xref:System.Collections.ArrayList>です。  
  
 このメソッドを呼び出すことで等しいかどうかを判断 <xref:System.Object.Equals%2A?displayProperty=fullName>します。  
  
 以降、.NET Framework 2.0 では、このメソッドを使用して、コレクションのオブジェクトの <xref:System.Object.Equals%2A> と <xref:System.IComparable.CompareTo%2A> メソッド `item` 項目が存在するかどうかを調べる。 .NET Framework の以前のバージョンでは、この判断を下しますを使用して行われた、 <xref:System.Object.Equals%2A> と <xref:System.IComparable.CompareTo%2A> のメソッド、 `item` コレクション内のオブジェクトのパラメーターです。  
  
   
  
## 例  
 次のコード例では、指定した要素の最初に見つかった位置のインデックスを特定する方法を示します。  
  
 [!code-cpp[Classic ArrayList.IndexOf Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.IndexOf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ArrayList.IndexOf Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.IndexOf Example/CS/source.cs#1)]
 [!code-vb[Classic ArrayList.IndexOf Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.IndexOf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <see cref="T:System.Collections.ArrayList" /> の有効なインデックスの範囲外です。</exception>
        <altmember cref="M:System.Collections.ArrayList.LastIndexOf(System.Object)" />
        <altmember cref="M:System.Collections.ArrayList.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (object value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(object value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Collections.ArrayList" /> 内で検索される <see cref="T:System.Object" />。 値として <see langword="null" /> を指定できます。</param>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。 空のリストでは 0 \(ゼロ\) は正しい値です。</param>
        <param name="count">検索するセクション内の要素数。</param>
        <summary>指定した <see cref="T:System.Object" /> を検索し、指定したインデックスから始まって指定した数の要素を格納する <see cref="T:System.Collections.ArrayList" /> 内の要素の範囲内で最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>
          <see cref="T:System.Collections.ArrayList" /> のうち、<paramref name="startIndex" /> から始まり、要素数が <paramref name="count" /> 個の要素範囲の中で <paramref name="value" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は \-1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.ArrayList> 転送を開始位置として検索 `startIndex` で終わる `startIndex` plus `count` 1 を引いた値場合 `count` が 0 より大きい。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O \(`n`\) 操作の場合、 `n` は `count`です。  
  
 このメソッドを呼び出すことで等しいかどうかを判断 <xref:System.Object.Equals%2A?displayProperty=fullName>します。  
  
 以降、.NET Framework 2.0 では、このメソッドを使用して、コレクションのオブジェクトの <xref:System.Object.Equals%2A> と <xref:System.IComparable.CompareTo%2A> メソッド `item` 項目が存在するかどうかを調べる。 .NET Framework の以前のバージョンでは、この判断を下しますを使用して行われた、 <xref:System.Object.Equals%2A> と <xref:System.IComparable.CompareTo%2A> のメソッド、 `item` コレクション内のオブジェクトのパラメーターです。  
  
   
  
## 例  
 次のコード例では、指定した要素の最初に見つかった位置のインデックスを特定する方法を示します。  
  
 [!code-cpp[Classic ArrayList.IndexOf Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.IndexOf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ArrayList.IndexOf Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.IndexOf Example/CS/source.cs#1)]
 [!code-vb[Classic ArrayList.IndexOf Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.IndexOf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <see cref="T:System.Collections.ArrayList" /> の有効なインデックスの範囲外です。  
  
 または  
  
 <paramref name="count" /> が 0 未満です。  
  
 または  
  
 <paramref name="startIndex" /> および <paramref name="count" /> が <see cref="T:System.Collections.ArrayList" /> 内の正しいセクションを指定していません。</exception>
        <altmember cref="M:System.Collections.ArrayList.LastIndexOf(System.Object)" />
        <altmember cref="M:System.Collections.ArrayList.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual void Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">
          <c>value</c> を挿入する位置の、0 から始まるインデックス。</param>
        <param name="value">挿入する <see cref="T:System.Object" />。 値として <see langword="null" /> を指定できます。</param>
        <summary>
          <see cref="T:System.Collections.ArrayList" /> 内の指定したインデックスの位置に要素を挿入します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.ArrayList> 受け入れる `null` 有効な値としてでき、重複する要素。  
  
 場合 <xref:System.Collections.ArrayList.Count%2A> と既に同じ <xref:System.Collections.ArrayList.Capacity%2A>, の容量、 <xref:System.Collections.ArrayList> が増加すると、内部の配列を自動的に再割り当てによって、新しい要素が追加される前に、新しい配列に既存の要素がコピーされたとします。  
  
 場合 `index` に等しい <xref:System.Collections.ArrayList.Count%2A>, 、`value` の末尾に追加された <xref:System.Collections.ArrayList>します。  
  
 リストなどの連続する要素のコレクションでは、新しい要素を挿入するために、挿入位置より後にある要素の位置が繰り下げられます。 コレクションにインデックスがある場合、移動した要素のインデックスも更新されます。 この動作は、要素が概念的にバケットにグループ化されているハッシュ テーブルなどのコレクションには適用されません。  
  
 このメソッドは O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.ArrayList.Count%2A>です。  
  
   
  
## 例  
 次のコード例に要素を挿入する方法を示しています、 <xref:System.Collections.ArrayList>です。  
  
 [!code-cpp[Classic ArrayList.Insert Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.Insert Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ArrayList.Insert Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.Insert Example/CS/source.cs#1)]
 [!code-vb[Classic ArrayList.Insert Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.Insert Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  
  
 または  
  
 <paramref name="index" /> が <see cref="P:System.Collections.ArrayList.Count" /> より大きくなっています。</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.Collections.ArrayList" /> は読み取り専用です。  
  
 \-または\-  
  
 <see cref="T:System.Collections.ArrayList" /> は固定サイズです。</exception>
        <altmember cref="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)" />
        <altmember cref="M:System.Collections.ArrayList.Add(System.Object)" />
        <altmember cref="M:System.Collections.ArrayList.Remove(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="InsertRange">
      <MemberSignature Language="C#" Value="public virtual void InsertRange (int index, System.Collections.ICollection c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertRange(int32 index, class System.Collections.ICollection c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="c" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="index">新しい要素が挿入される位置の 0 から始まるインデックス。</param>
        <param name="c">
          <see cref="T:System.Collections.ArrayList" /> に挿入される要素を持つ <see cref="T:System.Collections.ICollection" />。 コレクション自体を <see langword="null" /> にすることはできませんが、<see langword="null" /> である要素を格納することは可能です。</param>
        <summary>コレクションの要素を <see cref="T:System.Collections.ArrayList" /> 内の指定したインデックスの位置に挿入します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.ArrayList> 受け入れる `null` 有効な値としてでき、重複する要素。  
  
 場合、新しい <xref:System.Collections.ArrayList.Count%2A> \(現在 <xref:System.Collections.ArrayList.Count%2A> さらに、コレクションのサイズ\) はより大きくなります <xref:System.Collections.ArrayList.Capacity%2A>, の容量、 <xref:System.Collections.ArrayList> が増加すると、新しい要素に対応する内部の配列を自動的に再割り当てによってし、新しい要素が追加される前に、既存の要素が新しい配列にコピーします。  
  
 場合 `index` に等しい <xref:System.Collections.ArrayList.Count%2A>, の末尾に要素が追加された <xref:System.Collections.ArrayList>します。  
  
 内の要素の順序、 <xref:System.Collections.ICollection> に保持されますが、 <xref:System.Collections.ArrayList>です。  
  
 リストなどの連続する要素のコレクションでは、新しい要素を挿入するために、挿入位置より後にある要素の位置が繰り下げられます。 コレクションにインデックスがある場合、移動した要素のインデックスも更新されます。 この動作は、要素が概念的にバケットにグループ化されているハッシュ テーブルなどのコレクションには適用されません。  
  
 このメソッドは O \(`n` \+ `m`\) 操作、場所 `n` が追加される要素の数と `m` は <xref:System.Collections.ArrayList.Count%2A>です。  
  
   
  
## 例  
 次のコード例に要素を挿入する方法を示しています、 <xref:System.Collections.ArrayList>です。  
  
 [!code-cpp[Classic ArrayList.Insert Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.Insert Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ArrayList.Insert Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.Insert Example/CS/source.cs#1)]
 [!code-vb[Classic ArrayList.Insert Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.Insert Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="c" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  
  
 または  
  
 <paramref name="index" /> が <see cref="P:System.Collections.ArrayList.Count" /> より大きくなっています。</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.Collections.ArrayList" /> は読み取り専用です。  
  
 \-または\-  
  
 <see cref="T:System.Collections.ArrayList" /> は固定サイズです。</exception>
        <altmember cref="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)" />
        <altmember cref="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)" />
        <altmember cref="M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)" />
        <altmember cref="M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="IsFixedSize">
      <MemberSignature Language="C#" Value="public virtual bool IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ArrayList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Collections.ArrayList" /> が固定サイズかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> が固定サイズの場合は <see cref="T:System.Collections.ArrayList" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 固定サイズのコレクションでは、コレクションの作成後に要素の追加または削除はできませんが、既存の要素の変更はできます。  
  
 固定サイズのコレクションは、コレクションの追加と要素の削除を防止するラッパーです。そのため、追加または削除、要素を含む、基になるコレクションに変更が加えられた場合、固定サイズ コレクションにはそれらの変更が反映されます。  
  
 このプロパティ値を取得することは、O\(1\) 操作になります。  
  
   
  
## 例  
 次のコード例は、固定サイズのラッパーを作成する方法を示しています、 <xref:System.Collections.ArrayList>です。  
  
 [!code-cpp[Classic ArrayList.IsFixedSize Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.IsFixedSize Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ArrayList.IsFixedSize Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.IsFixedSize Example/CS/source.cs#1)]
 [!code-vb[Classic ArrayList.IsFixedSize Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.IsFixedSize Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public virtual bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ArrayList.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Collections.ArrayList" /> が読み取り専用かどうかを示す値を取得します。</summary>
        <value>
          <see cref="T:System.Collections.ArrayList" /> が読み取り専用である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 読み取り専用のコレクションでは、コレクション作成後に要素の追加、削除、または変更はできません。  
  
 読み取り専用であるコレクションは、コレクションのコレクションの変更を防止するラッパーです。そのため、基になるコレクションの変更が加えられた、読み取り専用コレクションはそれらの変更を反映します。  
  
 このプロパティ値を取得することは、O\(1\) 操作になります。  
  
   
  
## 例  
 次のコード例は、ラップする読み取り専用のラッパーを作成する方法を示しています、 <xref:System.Collections.ArrayList> かを判断する方法と、 <xref:System.Collections.ArrayList> は読み取り専用です。  
  
 [!code-cpp[Classic ArrayList.ReadOnly1 Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.ReadOnly1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ArrayList.ReadOnly1 Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.ReadOnly1 Example/CS/source.cs#1)]
 [!code-vb[Classic ArrayList.ReadOnly1 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.ReadOnly1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ArrayList.ReadOnly(System.Collections.IList)" />
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public virtual bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ArrayList.IsSynchronized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Collections.ArrayList" /> へのアクセスが同期されている \(スレッド セーフである\) かどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> へのアクセスが同期されている \(スレッド セーフである\) 場合は <see cref="T:System.Collections.ArrayList" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 スレッド セーフを確保する、 <xref:System.Collections.ArrayList>, 、によって返されるラッパーを通じて、すべての操作を行う必要があります、 <xref:System.Collections.ArrayList.Synchronized%2A> メソッドです。  
  
 コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。 コレクションの同期がとられている場合でも、別のスレッドによってそのコレクションを変更できるため、変更の結果として列挙子は例外をスローします。 列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。  
  
   
  
## 例  
 次のコード例を使用してコレクションをロックする方法を示しています、 <xref:System.Collections.ArrayList.SyncRoot%2A> 列挙中にします。  
  
 [!code-cpp[Classic ArrayList.IsSynchronized Example\#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.IsSynchronized Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic ArrayList.IsSynchronized Example\#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.IsSynchronized Example/CS/source2.cs#2)]
 [!code-vb[Classic ArrayList.IsSynchronized Example\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.IsSynchronized Example/VB/source2.vb#2)]  
  
 このプロパティ値を取得することは、O\(1\) 操作になります。  
  
 次のコード例を同期する方法を示しています、 <xref:System.Collections.ArrayList>, 、かどうか、 <xref:System.Collections.ArrayList> が同期され、同期を使用して <xref:System.Collections.ArrayList>します。  
  
 [!code-cpp[Classic ArrayList.IsSynchronized Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.IsSynchronized Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ArrayList.IsSynchronized Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.IsSynchronized Example/CS/source.cs#1)]
 [!code-vb[Classic ArrayList.IsSynchronized Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.IsSynchronized Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ArrayList.SyncRoot" />
        <altmember cref="M:System.Collections.ArrayList.Synchronized(System.Collections.IList)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual object this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ArrayList.Item(System.Int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">取得または設定する要素の、0 から始まるインデックス番号。</param>
        <summary>指定したインデックスにある要素を取得または設定します。</summary>
        <value>指定したインデックス位置にある要素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.ArrayList.Item%2A> 返します、 <xref:System.Object>, ので、操作するために、返された値を元の型をキャストする必要があります。 注意することが重要 <xref:System.Collections.ArrayList> 厳密に型指定されたコレクションではありません。 厳密に型指定の代わりには、次を参照してください。 <xref:System.Collections.Generic.List%601>します。  
  
 <xref:System.Collections.ArrayList> 受け入れる `null` 有効な値としてでき、重複する要素。  
  
 このプロパティでは、`myCollection[index]` という構文を使用して、コレクション内の特定の要素にアクセスできます。  
  
 C\# 言語キーワードを使用して実装する代わりに、インデクサーの定義、 <xref:System.Collections.ArrayList.Item%2A> プロパティです。 Visual Basic は、<xref:System.Collections.ArrayList.Item%2A> を既定のプロパティとして実装しており、同様のインデックス機能を提供します。  
  
 このプロパティの値を取得する場合は、o \(1\) 操作です。プロパティの設定も、o \(1\) 操作です。  
  
   
  
## 例  
 次のコード例を作成、 <xref:System.Collections.ArrayList> し、いくつかの項目を追加します。 アクセス中の要素をこの例は、 <xref:System.Collections.ArrayList.Item%2A> プロパティ \(c\# のインデクサー\) と要素を変更するために新しい値を割り当てることによって、 <xref:System.Collections.ArrayList.Item%2A> 指定したインデックスのプロパティです。 示していますが、 <xref:System.Collections.ArrayList.Item%2A> へのアクセスまたはリストの現在のサイズの外側にある要素の追加プロパティを使用できません。  
  
 [!code-cpp[System.Collections.ArrayList.Item\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.ArrayList.Item/cpp/source.cpp#1)]
 [!code-csharp[System.Collections.ArrayList.Item\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.ArrayList.Item/CS/source.cs#1)]
 [!code-vb[System.Collections.ArrayList.Item\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.ArrayList.Item/VB/source.vb#1)]  
  
 次の例では、 <xref:System.Collections.ArrayList.Item%2A> プロパティを明示的にリスト内の項目に値を代入します。 例では、継承するクラスを定義する、 <xref:System.Collections.ArrayList> メソッドを一覧の項目を暗号化するために追加します。  
  
 [!code-cpp[System.Collections.ArrayList.Item\#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.ArrayList.Item/cpp/source2.cpp#2)]
 [!code-csharp[System.Collections.ArrayList.Item\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.ArrayList.Item/CS/source2.cs#2)]
 [!code-vb[System.Collections.ArrayList.Item\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.ArrayList.Item/VB/source2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  
  
 または  
  
 <paramref name="index" /> が <see cref="P:System.Collections.ArrayList.Count" /> 以上になっています。</exception>
        <altmember cref="P:System.Collections.ArrayList.Count" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.LastIndexOf(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Collections.ArrayList" /> 内で検索する <see cref="T:System.Object" />。 値として <see langword="null" /> を指定できます。</param>
        <summary>指定した <see cref="T:System.Object" /> を検索し、<see cref="T:System.Collections.ArrayList" /> 全体で最後に見つかった位置の 0 から始まるインデックスを返します。</summary>
        <returns>
          <paramref name="value" /> が見つかった場合は、<see cref="T:System.Collections.ArrayList" /> 全体で最後に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は \-1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.ArrayList> は、最後の要素を起点と最初の要素の終了を逆方向検索します。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.ArrayList.Count%2A>です。  
  
 以降、.NET Framework 2.0 では、このメソッドを使用して、コレクションのオブジェクトの <xref:System.Object.Equals%2A> と <xref:System.IComparable.CompareTo%2A> メソッド `item` 項目が存在するかどうかを調べる。 .NET Framework の以前のバージョンでは、この判断を下しますを使用して行われた、 <xref:System.Object.Equals%2A> と <xref:System.IComparable.CompareTo%2A> のメソッド、 `item` コレクション内のオブジェクトのパラメーターです。  
  
   
  
## 例  
 次のコード例では、指定した要素の最後に見つかった位置のインデックスを特定する方法を示します。  
  
 [!code-cpp[Classic ArrayList.LastIndexOf Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.LastIndexOf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ArrayList.LastIndexOf Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.LastIndexOf Example/CS/source.cs#1)]
 [!code-vb[Classic ArrayList.LastIndexOf Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.LastIndexOf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ArrayList.IndexOf(System.Object)" />
        <altmember cref="M:System.Collections.ArrayList.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (object value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(object value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Collections.ArrayList" /> 内で検索される <see cref="T:System.Object" />。 値として <see langword="null" /> を指定できます。</param>
        <param name="startIndex">逆方向検索の開始位置を示す 0 から始まるインデックス。</param>
        <summary>指定した <see cref="T:System.Object" /> を検索し、最初の要素から、指定したインデックスまでの <see cref="T:System.Collections.ArrayList" /> 内の要素の範囲内で最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>
          <see cref="T:System.Collections.ArrayList" /> のうち、最初の要素から <paramref name="startIndex" /> までの要素範囲内で <paramref name="value" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は \-1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.ArrayList> 検索旧バージョンとを開始位置として、 `startIndex` 、その最初の要素で終了します。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O \(`n`\) 操作の場合、 `n` の先頭から要素の数は、 <xref:System.Collections.ArrayList> に `startIndex`します。  
  
 このメソッドを呼び出すことで等しいかどうかを判断 <xref:System.Object.Equals%2A?displayProperty=fullName>します。  
  
 以降、.NET Framework 2.0 では、このメソッドを使用して、コレクションのオブジェクトの <xref:System.Object.Equals%2A> と <xref:System.IComparable.CompareTo%2A> メソッド `item` 項目が存在するかどうかを調べる。 .NET Framework の以前のバージョンでは、この判断を下しますを使用して行われた、 <xref:System.Object.Equals%2A> と <xref:System.IComparable.CompareTo%2A> のメソッド、 `item` コレクション内のオブジェクトのパラメーターです。  
  
   
  
## 例  
 次のコード例では、指定した要素の最後に見つかった位置のインデックスを特定する方法を示します。  
  
 [!code-cpp[Classic ArrayList.LastIndexOf Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.LastIndexOf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ArrayList.LastIndexOf Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.LastIndexOf Example/CS/source.cs#1)]
 [!code-vb[Classic ArrayList.LastIndexOf Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.LastIndexOf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <see cref="T:System.Collections.ArrayList" /> の有効なインデックスの範囲外です。</exception>
        <altmember cref="M:System.Collections.ArrayList.IndexOf(System.Object)" />
        <altmember cref="M:System.Collections.ArrayList.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (object value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(object value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Collections.ArrayList" /> 内で検索される <see cref="T:System.Object" />。 値として <see langword="null" /> を指定できます。</param>
        <param name="startIndex">逆方向検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象の範囲内にある要素の数。</param>
        <summary>指定した <see cref="T:System.Object" /> を検索し、指定した数の要素を含み、かつ指定したインデックスで終了する <see cref="T:System.Collections.ArrayList" /> 内の要素の範囲内で最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>
          <paramref name="count" /> 個の要素を格納し、<paramref name="startIndex" /> の位置で終了する <see cref="T:System.Collections.ArrayList" /> 内の要素の範囲内で <paramref name="value" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は \-1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.ArrayList> 検索旧バージョンとを開始位置として、 `startIndex` で終わる `startIndex` マイナス `count` 1 を加えた場合 `count` が 0 より大きい。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O \(`n`\) 操作の場合、 `n` は `count`です。  
  
 このメソッドを呼び出すことで等しいかどうかを判断 <xref:System.Object.Equals%2A?displayProperty=fullName>します。  
  
 以降、.NET Framework 2.0 では、このメソッドを使用して、コレクションのオブジェクトの <xref:System.Object.Equals%2A> と <xref:System.IComparable.CompareTo%2A> メソッド `item` 項目が存在するかどうかを調べる。 .NET Framework の以前のバージョンでは、この判断を下しますを使用して行われた、 <xref:System.Object.Equals%2A> と <xref:System.IComparable.CompareTo%2A> のメソッド、 `item` コレクション内のオブジェクトのパラメーターです。  
  
   
  
## 例  
 次のコード例では、指定した要素の最後に見つかった位置のインデックスを特定する方法を示します。 注意 `LastIndexOf` は逆方向検索。 したがって、 `count` 以下にする必要があります `startIndex` \+ 1 です。  
  
 [!code-cpp[Classic ArrayList.LastIndexOf Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.LastIndexOf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ArrayList.LastIndexOf Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.LastIndexOf Example/CS/source.cs#1)]
 [!code-vb[Classic ArrayList.LastIndexOf Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.LastIndexOf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <see cref="T:System.Collections.ArrayList" /> の正しいインデックスの範囲外です。  
  
 または  
  
 <paramref name="count" /> が 0 未満です。  
  
 または  
  
 <paramref name="startIndex" /> および <paramref name="count" /> が <see cref="T:System.Collections.ArrayList" /> 内の正しいセクションを指定していません。</exception>
        <altmember cref="M:System.Collections.ArrayList.IndexOf(System.Object)" />
        <altmember cref="M:System.Collections.ArrayList.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public static System.Collections.ArrayList ReadOnly (System.Collections.ArrayList list);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ArrayList ReadOnly(class System.Collections.ArrayList list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ArrayList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.ArrayList" />
      </Parameters>
      <Docs>
        <param name="list">ラップする <see cref="T:System.Collections.ArrayList" />。</param>
        <summary>読み取り専用 <see cref="T:System.Collections.ArrayList" /> ラッパーを返します。</summary>
        <returns>
          <paramref name="list" /> をラップする読み取り専用の <see cref="T:System.Collections.ArrayList" /> ラッパー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 変更を防ぐために `list`, 、公開 `list` このラッパーを使用します。  
  
 読み取り専用であるコレクションは、コレクションの変更を防止するラッパー コレクションです。 基になるコレクション、変更が加えられた場合、読み取り専用コレクションには、これらの変更が反映されます。  
  
 このメソッドは、o \(1\) 操作です。  
  
   
  
## 例  
 次のコード例は、ラップする読み取り専用のラッパーを作成する方法を示しています、 <xref:System.Collections.ArrayList> かを判断する方法と、 <xref:System.Collections.ArrayList> は読み取り専用です。  
  
 [!code-cpp[Classic ArrayList.ReadOnly1 Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.ReadOnly1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ArrayList.ReadOnly1 Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.ReadOnly1 Example/CS/source.cs#1)]
 [!code-vb[Classic ArrayList.ReadOnly1 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.ReadOnly1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="list" /> は <see langword="null" /> です。</exception>
        <altmember cref="P:System.Collections.ArrayList.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public static System.Collections.IList ReadOnly (System.Collections.IList list);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IList ReadOnly(class System.Collections.IList list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.ReadOnly(System.Collections.IList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.IList" />
      </Parameters>
      <Docs>
        <param name="list">ラップする <see cref="T:System.Collections.IList" />。</param>
        <summary>読み取り専用 <see cref="T:System.Collections.IList" /> ラッパーを返します。</summary>
        <returns>
          <paramref name="list" /> をラップする読み取り専用の <see cref="T:System.Collections.IList" /> ラッパー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 変更を防ぐために `list`, 、公開 `list` このラッパーを使用します。  
  
 読み取り専用であるコレクションは、コレクションの変更を防止するラッパー コレクションです。 基になるコレクション、変更が加えられた場合、読み取り専用コレクションには、これらの変更が反映されます。  
  
 このメソッドは、o \(1\) 操作です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="list" /> は <see langword="null" /> です。</exception>
        <altmember cref="P:System.Collections.ArrayList.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual void Remove (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.Remove(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <see cref="T:System.Object" /> から削除する <see cref="T:System.Collections.ArrayList" />。 値として <see langword="null" /> を指定できます。</param>
        <summary>特定のオブジェクトで最初に出現したものを <see cref="T:System.Collections.ArrayList" /> から削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Collections.ArrayList> 指定したオブジェクトが含まれない、 <xref:System.Collections.ArrayList> は変更されません。 例外をスローすることはありません。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.ArrayList.Count%2A>です。  
  
 このメソッドを呼び出すことで等しいかどうかを判断 <xref:System.Object.Equals%2A?displayProperty=fullName>します。  
  
 リストなどの連続する要素のコレクションでは、空白になった位置を埋めるために、削除された要素の後にある要素の位置が繰り上げられます。 コレクションにインデックスがある場合、移動した要素のインデックスも更新されます。 この動作は、要素が概念的にバケットにグループ化されているハッシュ テーブルなどのコレクションには適用されません。  
  
   
  
## 例  
 次のコード例は、要素を削除する方法を示しています、 <xref:System.Collections.ArrayList>です。  
  
 [!code-cpp[Classic ArrayList.Remove Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.Remove Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ArrayList.Remove Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.Remove Example/CS/source.cs#1)]
 [!code-vb[Classic ArrayList.Remove Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.Remove Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.Collections.ArrayList" /> は読み取り専用です。  
  
 \-または\-  
  
 <see cref="T:System.Collections.ArrayList" /> のサイズが固定されています。</exception>
        <altmember cref="M:System.Collections.ArrayList.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.ArrayList.Add(System.Object)" />
        <altmember cref="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public virtual void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.RemoveAt(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">削除する要素の 0 から始まるインデックス。</param>
        <summary>
          <see cref="T:System.Collections.ArrayList" /> の指定したインデックスにある要素を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コレクションのサイズを調整する要素が削除された後の値、 <xref:System.Collections.ArrayList.Count%2A> プロパティが 1 ずつ減少します。  
  
 リストなどの連続する要素のコレクションでは、空白になった位置を埋めるために、削除された要素の後にある要素の位置が繰り上げられます。 コレクションにインデックスがある場合、移動した要素のインデックスも更新されます。 この動作は、要素が概念的にバケットにグループ化されているハッシュ テーブルなどのコレクションには適用されません。  
  
 このメソッドは O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.ArrayList.Count%2A>です。  
  
   
  
## 例  
 次のコード例は、要素を削除する方法を示しています、 <xref:System.Collections.ArrayList>です。  
  
 [!code-cpp[Classic ArrayList.Remove Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.Remove Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ArrayList.Remove Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.Remove Example/CS/source.cs#1)]
 [!code-vb[Classic ArrayList.Remove Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.Remove Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  
  
 または  
  
 <paramref name="index" /> が <see cref="P:System.Collections.ArrayList.Count" /> 以上になっています。</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.Collections.ArrayList" /> は読み取り専用です。  
  
 \-または\-  
  
 <see cref="T:System.Collections.ArrayList" /> のサイズが固定されています。</exception>
        <altmember cref="M:System.Collections.ArrayList.Remove(System.Object)" />
        <altmember cref="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.ArrayList.Add(System.Object)" />
        <altmember cref="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public virtual void RemoveRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">削除する要素の範囲の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">削除する要素の数を指定します。</param>
        <summary>
          <see cref="T:System.Collections.ArrayList" /> から要素の範囲を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 リストなどの連続する要素のコレクションでは、空白になった位置を埋めるために、削除された要素の後にある要素の位置が繰り上げられます。 コレクションにインデックスがある場合、移動した要素のインデックスも更新されます。 この動作は、要素が概念的にバケットにグループ化されているハッシュ テーブルなどのコレクションには適用されません。  
  
 このメソッドは O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.ArrayList.Count%2A>です。  
  
   
  
## 例  
 次のコード例は、要素を削除する方法を示しています、 <xref:System.Collections.ArrayList>です。  
  
 [!code-cpp[Classic ArrayList.Remove Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.Remove Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ArrayList.Remove Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.Remove Example/CS/source.cs#1)]
 [!code-vb[Classic ArrayList.Remove Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.Remove Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  
  
 \-または\-  
  
 <paramref name="count" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> および <paramref name="count" /> は <see cref="T:System.Collections.ArrayList" /> において要素の有効な範囲を表していません。</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.Collections.ArrayList" /> は読み取り専用です。  
  
 \-または\-  
  
 <see cref="T:System.Collections.ArrayList" /> のサイズが固定されています。</exception>
        <altmember cref="M:System.Collections.ArrayList.Remove(System.Object)" />
        <altmember cref="M:System.Collections.ArrayList.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)" />
        <altmember cref="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)" />
        <altmember cref="M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)" />
      </Docs>
    </Member>
    <Member MemberName="Repeat">
      <MemberSignature Language="C#" Value="public static System.Collections.ArrayList Repeat (object value, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ArrayList Repeat(object value, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.Repeat(System.Object,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ArrayList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">新しい <see cref="T:System.Collections.ArrayList" /> で複数回コピーする <see cref="T:System.Object" />。 値として <see langword="null" /> を指定できます。</param>
        <param name="count">
          <c>value</c> をコピーする回数。</param>
        <summary>指定した値のコピーである要素を持つ <see cref="T:System.Collections.ArrayList" /> を返します。</summary>
        <returns>
          <paramref name="count" /> 個の要素があり、その要素がすべて <paramref name="value" /> のコピーである <see cref="T:System.Collections.ArrayList" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.ArrayList> 受け入れる `null` 有効な値としてでき、重複する要素。  
  
 このメソッドは O \(`n`\) 操作の場合、 `n` は `count`です。  
  
   
  
## 例  
 次のコード例は、作成して、新しい初期化する方法を示しています。 <xref:System.Collections.ArrayList> と同じ値です。  
  
 [!code-cpp[Classic ArrayList.Repeat Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.Repeat Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ArrayList.Repeat Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.Repeat Example/CS/source.cs#1)]
 [!code-vb[Classic ArrayList.Repeat Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.Repeat Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="count" /> が 0 未満です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public virtual void Reverse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reverse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.Reverse" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Collections.ArrayList" /> 全体の要素の順序を反転させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して <xref:System.Array.Reverse%2A?displayProperty=fullName> 、要素の順序を反転させるように位置にある要素 <xref:System.Collections.ArrayList> \[i\], i は、範囲内のすべてのインデックスに移動 <xref:System.Collections.ArrayList> \[j\] j と等しい `index` \+ `index` \+ `count` \-i \- 1 です。  
  
 このメソッドは O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.ArrayList.Count%2A>です。  
  
   
  
## 例  
 次のコード例の値の並べ替え順序を反転する方法を示しています、 <xref:System.Collections.ArrayList>です。  
  
 [!code-cpp[Classic ArrayList.Reverse Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.Reverse Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ArrayList.Reverse Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.Reverse Example/CS/source.cs#1)]
 [!code-vb[Classic ArrayList.Reverse Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.Reverse Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.Collections.ArrayList" /> は読み取り専用です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public virtual void Reverse (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reverse(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.Reverse(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">反転させる範囲の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">反転させる範囲内にある要素の数。</param>
        <summary>指定した範囲の要素の順序を反転させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して <xref:System.Array.Reverse%2A?displayProperty=fullName> 、要素の順序を反転させるように位置にある要素 <xref:System.Collections.ArrayList> \[i\], i は、範囲内のすべてのインデックスに移動 <xref:System.Collections.ArrayList> \[j\] j と等しい `index` \+ `index` \+ `count` \-i \- 1 です。  
  
 このメソッドは O \(`n`\) 操作の場合、 `n` は `count`です。  
  
   
  
## 例  
 次のコード例は、内の要素の範囲の値の並べ替え順序を反転する方法を示しています、 <xref:System.Collections.ArrayList>です。  
  
 [!code-cpp[Classic ArrayList.Reverse1 Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.Reverse1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ArrayList.Reverse1 Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.Reverse1 Example/CS/source.cs#1)]
 [!code-vb[Classic ArrayList.Reverse1 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.Reverse1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  
  
 \-または\-  
  
 <paramref name="count" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> および <paramref name="count" /> は <see cref="T:System.Collections.ArrayList" /> において要素の有効な範囲を表していません。</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.Collections.ArrayList" /> は読み取り専用です。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetRange">
      <MemberSignature Language="C#" Value="public virtual void SetRange (int index, System.Collections.ICollection c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetRange(int32 index, class System.Collections.ICollection c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="c" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="index">
          <c>c</c> の要素のコピーを開始する位置を示す、0 から始まる <see cref="T:System.Collections.ArrayList" /> インデックス。</param>
        <param name="c">
          <see cref="T:System.Collections.ArrayList" /> にコピーする要素を持つ <see cref="T:System.Collections.ICollection" />。 コレクション自体を <see langword="null" /> にすることはできませんが、<see langword="null" /> である要素を格納することは可能です。</param>
        <summary>コレクションの要素を <see cref="T:System.Collections.ArrayList" /> 内の要素の範囲にコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.ArrayList> 受け入れる `null` 有効な値としてでき、重複する要素。  
  
 内の要素の順序、 <xref:System.Collections.ICollection> に保持されますが、 <xref:System.Collections.ArrayList>です。  
  
 このメソッドは O \(`n` \+ 1\) 操作の場合、 `n` は <xref:System.Collections.ArrayList.Count%2A>です。  
  
   
  
## 例  
 次のコード例を設定し、範囲の要素を取得する方法を示しています、 <xref:System.Collections.ArrayList>です。  
  
 [!code-cpp[Classic ArrayList.SetRange Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.SetRange Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ArrayList.SetRange Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.SetRange Example/CS/source.cs#1)]
 [!code-vb[Classic ArrayList.SetRange Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.SetRange Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  
  
 または  
  
 <paramref name="index" /> に <paramref name="c" /> 内の要素数を加算すると <see cref="P:System.Collections.ArrayList.Count" /> より大きい値になります。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="c" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.Collections.ArrayList" /> は読み取り専用です。</exception>
        <altmember cref="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)" />
        <altmember cref="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)" />
        <altmember cref="M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public virtual void Sort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Sort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.Sort" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Collections.ArrayList" /> 全体で要素を並べ替えます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して <xref:System.Array.Sort%2A?displayProperty=fullName>, 、クイック ソート アルゴリズムを使用します。 クイック ソート アルゴリズムは、比較 \(不安定な並べ替えとも呼ばれます\)、「未満またはと等しい」ことを意味する並べ替え比較操作では、最終的な並べ替えられた一覧の最初に現れる必要がありますが 2 つの要素のどれを判断します。 ただし、2 つの要素が等しい場合は、元の順序は維持されません可能性があります。 これに対し、安定した並べ替えが等しい要素の順序を保持します。 安定した並べ替えを実行するには、カスタムを実装する必要があります <xref:System.Collections.IComparer> でこのメソッドの他のオーバー ロードを使用するインターフェイスです。  
  
 平均すると、このメソッドは、O \(`n` ログ `n`\) 操作、 `n` は <xref:System.Collections.ArrayList.Count%2A>。 最悪の場合は、これは、O \(`n`^ 2\) 操作です。  
  
   
  
## 例  
 次のコード例の値を並べ替える方法を示しています、 <xref:System.Collections.ArrayList>です。  
  
 [!code-cpp[Classic ArrayList.Sort Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.Sort Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ArrayList.Sort Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.Sort Example/CS/source.cs#1)]
 [!code-vb[Classic ArrayList.Sort Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.Sort Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.Collections.ArrayList" /> は読み取り専用です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public virtual void Sort (System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Sort(class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.Sort(System.Collections.IComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="comparer">要素を比較する場合に使用する <see cref="T:System.Collections.IComparer" /> の実装。  
  
 \-または\-  
  
 各要素の <see cref="T:System.IComparable" /> 実装を使用するための null 参照 \(Visual Basic の場合は <see langword="Nothing" />\)。</param>
        <summary>指定した比較子を使用して、<see cref="T:System.Collections.ArrayList" /> 全体内の要素を並べ替えます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Collections.ArrayList.Sort%2A> メソッドを実装するカスタムの比較演算子でオブジェクトの一覧を並べ替える、 <xref:System.Collections.IComparer> インターフェイスです。 渡した場合 `null` の `comparer`, 、このメソッドを使用して、 <xref:System.IComparable> の各要素の実装です。 ここで行う必要があります、リストに含まれるオブジェクトを実装することを確認して、 <xref:System.Collections.IComparer> インターフェイス、または例外が発生します。  
  
 さらを使用して、 <xref:System.IComparable> 実装では、リスト \(不安定な並べ替えとも呼ばれます\) の比較による並べ替えを実行することを意味; は、2 つの要素が等しい場合は、その順序する可能性があります。 これに対し、安定した並べ替えが等しい要素の順序を保持します。 安定した並べ替えを実行するには、カスタムを実装する必要があります <xref:System.Collections.IComparer> インターフェイスです。  
  
 平均すると、このメソッドは、O \(`n` ログ `n`\) 操作、 `n` は <xref:System.Collections.ArrayList.Count%2A>。 最悪の場合は、これは、O \(`n`^ 2\) 操作です。  
  
   
  
## 例  
 次のコード例の値を並べ替える方法を示しています、 <xref:System.Collections.ArrayList> 既定の比較子と並べ替え順序を反転するカスタムの比較演算子を使用します。  
  
 [!code-cpp[System.Collections.ArrayList.Sort\_2\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.ArrayList.Sort_2/CPP/arraylist_sort2.cpp#1)]
 [!code-csharp[System.Collections.ArrayList.Sort\_2\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.ArrayList.Sort_2/CS/arraylist_sort2.cs#1)]
 [!code-vb[System.Collections.ArrayList.Sort\_2\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.ArrayList.Sort_2/VB/arraylist_sort2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.Collections.ArrayList" /> は読み取り専用です。</exception>
        <exception cref="T:System.InvalidOperationException">2 つの要素の比較中にエラーが発生しました。</exception>
        <exception cref="T:System.ArgumentException">
          <see langword="null" /> が <paramref name="comparer" /> として渡され、リスト内の要素が <see cref="T:System.IComparable" /> を実装していません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public virtual void Sort (int index, int count, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Sort(int32 index, int32 count, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="index">並べ替える範囲の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">並べ替える範囲の長さ。</param>
        <param name="comparer">要素を比較する場合に使用する <see cref="T:System.Collections.IComparer" /> の実装。  
  
 \-または\-  
  
 各要素の <see cref="T:System.IComparable" /> 実装を使用するための null 参照 \(Visual Basic の場合は <see langword="Nothing" />\)。</param>
        <summary>指定した比較子を使用して、<see cref="T:System.Collections.ArrayList" /> 内の要素の範囲内の要素を並べ替えます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 `comparer` に設定されている `null`, 、このメソッドが \(不安定な並べ替えとも呼ばれます\) の比較による並べ替えを実行します。 つまり、2 つの要素が等しい場合は、その順序する可能性があります。 これに対し、安定した並べ替えが等しい要素の順序を保持します。 安定した並べ替えを実行するには、カスタムを実装する必要があります <xref:System.Collections.IComparer> インターフェイスです。  
  
 平均すると、このメソッドは、O \(`n` ログ `n`\) 操作の場合、 `n` は `count`; 最悪のケースで O\(n^2\) 操作であります。  
  
   
  
## 例  
 次のコード例は、内の要素の範囲の値を並べ替える方法を示しています、 <xref:System.Collections.ArrayList> 既定の比較子と並べ替え順序を反転するカスタムの比較演算子を使用します。  
  
 [!code-cpp[System.Collections.ArrayList.Sort\_3\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.ArrayList.Sort_3/CPP/arraylist_sort3.cpp#1)]
 [!code-csharp[System.Collections.ArrayList.Sort\_3\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.ArrayList.Sort_3/CS/arraylist_sort3.cs#1)]
 [!code-vb[System.Collections.ArrayList.Sort\_3\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.ArrayList.Sort_3/VB/arraylist_sort3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  
  
 \-または\-  
  
 <paramref name="count" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> および <paramref name="count" /> は <see cref="T:System.Collections.ArrayList" /> において有効な範囲を指定していません。</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.Collections.ArrayList" /> は読み取り専用です。</exception>
        <exception cref="T:System.InvalidOperationException">2 つの要素の比較中にエラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Collections.ArrayList Synchronized (System.Collections.ArrayList list);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ArrayList Synchronized(class System.Collections.ArrayList list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ArrayList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.ArrayList" />
      </Parameters>
      <Docs>
        <param name="list">同期する <see cref="T:System.Collections.ArrayList" />。</param>
        <summary>同期されている \(スレッド セーフな\) <see cref="T:System.Collections.ArrayList" /> ラッパーを返します。</summary>
        <returns>同期されている \(スレッド セーフな\) <see cref="T:System.Collections.ArrayList" /> ラッパー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 スレッド セーフを確保する、 <xref:System.Collections.ArrayList>, 、このラッパーを通じて、すべての操作を行う必要があります。  
  
 コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。 コレクションの同期がとられている場合でも、別のスレッドによってそのコレクションを変更できるため、変更の結果として列挙子は例外をスローします。 列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。  
  
   
  
## 例  
 次のコード例を使用してコレクションをロックする方法を示しています、 <xref:System.Collections.ArrayList.SyncRoot%2A> 列挙中にします。  
  
 [!code-cpp[Classic ArrayList.IsSynchronized Example\#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.IsSynchronized Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic ArrayList.IsSynchronized Example\#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.IsSynchronized Example/CS/source2.cs#2)]
 [!code-vb[Classic ArrayList.IsSynchronized Example\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.IsSynchronized Example/VB/source2.vb#2)]  
  
 このメソッドは、o \(1\) 操作です。  
  
 次のコード例を同期する方法を示しています、 <xref:System.Collections.ArrayList>, 、かどうか、 <xref:System.Collections.ArrayList> が同期され、同期を使用して <xref:System.Collections.ArrayList>します。  
  
 [!code-cpp[Classic ArrayList.IsSynchronized Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.IsSynchronized Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ArrayList.IsSynchronized Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.IsSynchronized Example/CS/source.cs#1)]
 [!code-vb[Classic ArrayList.IsSynchronized Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.IsSynchronized Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="list" /> は <see langword="null" /> です。</exception>
        <altmember cref="P:System.Collections.ArrayList.SyncRoot" />
        <altmember cref="P:System.Collections.ArrayList.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Collections.IList Synchronized (System.Collections.IList list);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IList Synchronized(class System.Collections.IList list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.Synchronized(System.Collections.IList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.IList" />
      </Parameters>
      <Docs>
        <param name="list">同期する <see cref="T:System.Collections.IList" />。</param>
        <summary>同期されている \(スレッド セーフな\) <see cref="T:System.Collections.IList" /> ラッパーを返します。</summary>
        <returns>同期されている \(スレッド セーフな\) <see cref="T:System.Collections.IList" /> ラッパー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 スレッド セーフを確保する、 <xref:System.Collections.ArrayList>, 、このラッパーを通じて、すべての操作を行う必要があります。  
  
 コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。 コレクションの同期がとられている場合でも、別のスレッドによってそのコレクションを変更できるため、変更の結果として列挙子は例外をスローします。 列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。  
  
   
  
## 例  
 次のコード例を使用してコレクションをロックする方法を示しています、 <xref:System.Collections.ArrayList.SyncRoot%2A> 列挙中にします。  
  
 [!code-cpp[Classic ArrayList.IsSynchronized Example\#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.IsSynchronized Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic ArrayList.IsSynchronized Example\#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.IsSynchronized Example/CS/source2.cs#2)]
 [!code-vb[Classic ArrayList.IsSynchronized Example\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.IsSynchronized Example/VB/source2.vb#2)]  
  
 このメソッドは、o \(1\) 操作です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="list" /> は <see langword="null" /> です。</exception>
        <altmember cref="P:System.Collections.ArrayList.SyncRoot" />
        <altmember cref="P:System.Collections.ArrayList.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public virtual object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ArrayList.SyncRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Collections.ArrayList" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
        <value>
          <see cref="T:System.Collections.ArrayList" /> へのアクセスを同期するために使用できるオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 同期されたバージョンを作成する、 <xref:System.Collections.ArrayList>, を使用して、 <xref:System.Collections.ArrayList.Synchronized%2A> メソッドです。 ただし、派生クラスが備わっての同期バージョンを独自の <xref:System.Collections.ArrayList> を使用して、 <xref:System.Collections.ArrayList.SyncRoot%2A> プロパティです。 同期されたコードに対して操作を実行、 <xref:System.Collections.ArrayList.SyncRoot%2A> の <xref:System.Collections.ArrayList>, 、上で直接、 <xref:System.Collections.ArrayList>です。 これにより、他のオブジェクトから派生したコレクションを適切に操作できるようになります。 具体的には、同時に変更する可能性があるその他のスレッドと、正常な同期を維持、 <xref:System.Collections.ArrayList> オブジェクトです。  
  
 コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。 コレクションの同期がとられている場合でも、別のスレッドによってそのコレクションを変更できるため、変更の結果として列挙子は例外をスローします。 列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。  
  
   
  
## 例  
 次のコード例を使用してコレクションをロックする方法を示しています、 <xref:System.Collections.ArrayList.SyncRoot%2A> 列挙中にします。  
  
 [!code-cpp[Classic ArrayList.IsSynchronized Example\#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.IsSynchronized Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic ArrayList.IsSynchronized Example\#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.IsSynchronized Example/CS/source2.cs#2)]
 [!code-vb[Classic ArrayList.IsSynchronized Example\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.IsSynchronized Example/VB/source2.vb#2)]  
  
 このプロパティ値を取得することは、O\(1\) 操作になります。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ArrayList.IsSynchronized" />
        <altmember cref="M:System.Collections.ArrayList.Synchronized(System.Collections.IList)" />
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public virtual object[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.ToArray" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Collections.ArrayList" /> の要素を新しい <see cref="T:System.Object" /> 配列にコピーします。</summary>
        <returns>
          <see cref="T:System.Collections.ArrayList" /> の要素のコピーを格納する <see cref="T:System.Object" /> 配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 要素のコピーを使用して <xref:System.Array.Copy%2A?displayProperty=fullName>, 、これは、O \(`n`\) 操作、ここで `n` は <xref:System.Collections.ArrayList.Count%2A>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public virtual Array ToArray (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Array ToArray(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.ToArray(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">作成して要素をコピーする対象となる配列の要素 <see cref="T:System.Type" />。</param>
        <summary>
          <see cref="T:System.Collections.ArrayList" /> の要素を、指定した要素型の新しい配列にコピーします。</summary>
        <returns>
          <see cref="T:System.Collections.ArrayList" /> の要素のコピーを格納する、指定した要素型の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 すべてのオブジェクトの <xref:System.Collections.ArrayList> にオブジェクトをキャストは、 <xref:System.Type> で指定されている、 `type` パラメーター。  
  
 要素のコピーを使用して <xref:System.Array.Copy%2A?displayProperty=fullName>, 、これは、O \(`n`\) 操作、ここで `n` は <xref:System.Collections.ArrayList.Count%2A>です。  
  
   
  
## 例  
 コピーの例を次の要素をコピーする方法を示しています、 <xref:System.Collections.ArrayList> を文字列配列。  
  
 [!code-cpp[System.Collections.ArrayList.ToArray\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.ArrayList.ToArray/CPP/arraylist_toarray.cpp#1)]
 [!code-csharp[System.Collections.ArrayList.ToArray\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.ArrayList.ToArray/CS/arraylist_toarray.cs#1)]
 [!code-vb[System.Collections.ArrayList.ToArray\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.ArrayList.ToArray/VB/arraylist_toarray.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidCastException">ソース <see cref="T:System.Collections.ArrayList" /> の型を指定された型に自動的にキャストすることはできません。</exception>
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
    <Member MemberName="TrimToSize">
      <MemberSignature Language="C#" Value="public virtual void TrimToSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TrimToSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ArrayList.TrimToSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>容量を <see cref="T:System.Collections.ArrayList" /> 内にある実際の要素数に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、コレクションのメモリ オーバーヘッドを最小コレクションに新しい要素が追加されない場合に使用できます。  
  
 リセットする、 <xref:System.Collections.ArrayList> の初期状態を呼び出し、 <xref:System.Collections.ArrayList.Clear%2A> メソッドを呼び出す前に <xref:System.Collections.ArrayList.TrimToSize%2A>します。 空のトリミング <xref:System.Collections.ArrayList> のキャパシティを設定、 <xref:System.Collections.ArrayList> を既定の容量。  
  
 このメソッドは O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.ArrayList.Count%2A>です。  
  
   
  
## 例  
 次のコード例は、未使用の部分をトリミングする方法を示しています、 <xref:System.Collections.ArrayList> の値をクリアする方法と、 <xref:System.Collections.ArrayList>です。  
  
 [!code-cpp[Classic ArrayList.Clear Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ArrayList.Clear Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ArrayList.Clear Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ArrayList.Clear Example/CS/source.cs#1)]
 [!code-vb[Classic ArrayList.Clear Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ArrayList.Clear Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.Collections.ArrayList" /> は読み取り専用です。  
  
 \-または\-  
  
 <see cref="T:System.Collections.ArrayList" /> は固定サイズです。</exception>
        <altmember cref="M:System.Collections.ArrayList.Clear" />
        <altmember cref="P:System.Collections.ArrayList.Capacity" />
        <altmember cref="P:System.Collections.ArrayList.Count" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LastIndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Collections.ArrayList" /> 全体またはその一部において、最後に値が出現した位置のインデックス番号 \(0 から始まる\) を返します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="BinarySearch">
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>バイナリ サーチ アルゴリズムを使用して、並べ替えられた <see cref="T:System.Collections.ArrayList" /> 内の特定の要素またはその一部を検索します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="FixedSize">
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>固定サイズのリスト ラッパーを返します。要素を変更することはできますが、追加や削除はできません。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Reverse">
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Collections.ArrayList" /> またはその一部の要素の順序を反転させます。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ToArray">
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Collections.ArrayList" /> の要素を新しい配列にコピーします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Collections.ArrayList" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ReadOnly">
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>読み取り専用のリスト ラッパーを返します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Collections.ArrayList" /> またはその一部を 1 次元配列にコピーします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetEnumerator">
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Collections.ArrayList" /> を反復処理する列挙子を返します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="IndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Collections.ArrayList" /> 全体またはその一部において、最初に値が出現した位置のインデックス番号 \(0 から始まる\) を返します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Synchronized">
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>同期されている \(スレッド セーフな\) リスト ラッパーを返します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Sort">
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Collections.ArrayList" /> またはその一部の要素を並べ替えます。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>