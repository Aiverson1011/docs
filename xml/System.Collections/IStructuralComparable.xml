<Type Name="IStructuralComparable" FullName="System.Collections.IStructuralComparable">
  <TypeSignature Language="C#" Value="public interface IStructuralComparable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IStructuralComparable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.IStructuralComparable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>FSharp.Core</AssemblyName>
    <AssemblyVersion>2.3.98.1</AssemblyVersion>
    <AssemblyVersion>3.98.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>コレクション オブジェクトの構造比較をサポートします。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Collections.IStructuralComparable> interface enables you to implement customized comparisons for collection members. That is, you can define precisely what it means for one collection object to precede, follow, or occur in the same position in the sort order as a second collection object. You can then specify that this definition be used with a collection type that accepts the <xref:System.Collections.IStructuralComparable> interface.  
  
 The interface has a single member, <xref:System.Collections.IStructuralComparable.CompareTo%2A>, which determines whether the current collection object is less than, equal to, or greater than a second object in the sort order. The actual comparison of the members or elements in the current instance with those in a second object is performed by an <xref:System.Collections.IComparer> interface implementation, which contains the definition of your custom comparison.  
  
> [!NOTE]
>  The <xref:System.Collections.IStructuralComparable> interface supports only structural comparisons for sorting or ordering. The <xref:System.Collections.IStructuralEquatable> interface supports custom comparisons for structural equality.  
  
 The .NET Framework provides two default comparers. One is returned by the <xref:System.Collections.StructuralComparisons.StructuralComparer%2A?displayProperty=fullName> property; the other is returned by the <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> property.  
  
 The generic tuple classes \(<xref:System.Tuple%601>, <xref:System.Tuple%602>, <xref:System.Tuple%603>, and so on\) and the <xref:System.Array> class provide explicit implementations of the <xref:System.Collections.IStructuralComparable> interface. By casting \(in C\#\) or converting \(in Visual Basic\) the current instance of an array or tuple to an <xref:System.Collections.IStructuralComparable> interface value and providing your <xref:System.Collections.IComparer> implementation as an argument to the <xref:System.Collections.IStructuralComparable.CompareTo%2A> method, you can define a custom sort order for the array or collection. However, you do not call the <xref:System.Collections.IStructuralComparable.CompareTo%2A> method directly in most cases. Instead, the <xref:System.Collections.IStructuralComparable.CompareTo%2A> method is called by sorting methods such as <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29>. In this case, you define your <xref:System.Collections.IComparer> implementation and pass it as an argument to a sorting method or collection object's class constructor. The <xref:System.Collections.IStructuralComparable.CompareTo%2A> method with your custom comparer is then called automatically whenever the collection is sorted.  
  
   
  
## 例  
 The following example creates an array of <xref:System.Tuple%606> objects that contains population data for three U.S. cities from 1960 to 2000. The sextuple's first component is the city name. The remaining five components represent the population at ten\-year intervals from 1960 to 2000.  
  
 The `PopulationComparer` class provides an <xref:System.Collections.IComparer> implementation that allows the array of sextuples to be sorted by any one of its components. Two values are provided to the `PopulationComparer` class in its constructor: the position of the component that defines the sort order, and a Boolean value that indicates whether the tuple objects should be sorted in ascending or descending order.  
  
 The example then displays the elements in the array in unsorted order, sorts them by the third component \(the population in 1970\) and displays them, and then sorts them by the sixth component \(the population in 2000\) and displays them. Note that the example does not directly call the <xref:System.Collections.IStructuralComparable.CompareTo%2A> method. The method is called implicitly by the <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29> method for each tuple object in the array.  
  
 [!code-csharp[System.Tuple\`6.CompareTo\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`6.CompareTo\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.Collections.IStructuralEquatable" />
    <altmember cref="P:System.Collections.StructuralComparisons.StructuralComparer" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object other, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object other, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>FSharp.Core</AssemblyName>
        <AssemblyVersion>2.3.98.1</AssemblyVersion>
        <AssemblyVersion>3.98.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="other">現在のインスタンスと比較するオブジェクト。</param>
        <param name="comparer">オブジェクトの対応するメンバーと、現在のコレクションのメンバーが <c>other</c>です。</param>
        <summary>現在のコレクション オブジェクトの並べ替え順序での位置が、別のオブジェクトと比べて前か、後か、または同じかを判断します。</summary>
        <returns>現在のコレクション オブジェクトのリレーションシップを示す整数を <paramref name="other" />, 、次の表に示すようにします。  
  
 <list type="table">  
<listheader>  
<term> 戻り値  
  
 </term>  
<description> 説明  
  
 </description>  
</listheader>  
<item>  
<term> \-1  
  
 </term>  
<description> 現在のインスタンスの前に <paramref name="other" />します。  
  
 </description>  
</item>  
<item>  
<term> 0  
  
 </term>  
<description> 現在のインスタンスと <paramref name="other" /> が等しい。  
  
 </description>  
</item>  
<item>  
<term> 1  
  
 </term>  
<description> 現在のインスタンスに依存して <paramref name="other" />します。  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.IStructuralComparable.CompareTo%2A> メソッドは、配列と組のオブジェクトの並べ替えとカスタムの構造的な比較をサポートしています。<xref:System.Collections.IStructuralComparable.CompareTo%2A> メソッドの呼び出し、 `comparer` オブジェクトの <xref:System.Collections.IComparer.Compare%2A?displayProperty=fullName> 配列の各要素または組のコンポーネントを最初の要素またはコンポーネントを開始するのとを比較するメソッドです。 呼び出しを個々 の <xref:System.Collections.IComparer.Compare%2A?displayProperty=fullName> 終了と <xref:System.Collections.IStructuralComparable.CompareTo%2A> メソッドは、次の条件のいずれかが true になったときに値を返します。  
  
-   <xref:System.Collections.IComparer.Compare%2A?displayProperty=fullName> メソッドには、\-1 が返されます。  
  
-   <xref:System.Collections.IComparer.Compare%2A?displayProperty=fullName> メソッドは 1 を返します。  
  
-   <xref:System.Collections.IComparer.Compare%2A?displayProperty=fullName> 最後の要素またはコレクション オブジェクト内のコンポーネントのメソッドが呼び出されます。  
  
   
  
## 例  
 次の例の配列を作成する <xref:System.Tuple%606> 1960 年から 2000年への 3 つの米国都市の人口データが含まれているオブジェクト。 6 組の最初のコンポーネントは、市区町村名です。 残りの 5 つのコンポーネントでは、1960 年から 2000年までの 10 年間の間隔で人口を表します。  
  
 `PopulationComparer` クラスには、 <xref:System.Collections.IComparer> 実装をそのコンポーネントのいずれかのソートする 6 組の配列です。 次の 2 つの値が提供、 `PopulationComparer` コンス トラクター内のクラス: 並べ替え順序を定義するコンポーネントの位置と <xref:System.Boolean> 組オブジェクトを昇順または降順で並べ替える必要があるかどうかを示す値。  
  
 例では、し、並べ替えられていない順序で配列要素を表示、3 番目のコンポーネント \(1970 年のカタログ作成\) で並べ替えてとに表示されますし 6 番目のコンポーネント \(2000年のカタログ作成\) で並べ替えて、表示にします。 例では、直接呼び出しませんなお、 <xref:System.Collections.IStructuralComparable.CompareTo%2A?displayProperty=fullName> 実装します。 メソッドはによって暗黙的に、 <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29> 配列内の各タプル オブジェクトのメソッドです。  
  
 [!code-csharp[System.Tuple\`6.CompareTo\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`6.CompareTo\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">このインスタンスと <paramref name="other" /> 同じタイプではありません。</exception>
        <altmember cref="T:System.Collections.IComparer" />
      </Docs>
    </Member>
  </Members>
</Type>