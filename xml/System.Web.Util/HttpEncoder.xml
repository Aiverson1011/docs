<Type Name="HttpEncoder" FullName="System.Web.Util.HttpEncoder">
  <TypeSignature Language="C#" Value="public class HttpEncoder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi HttpEncoder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Util.HttpEncoder" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>エンコードおよびデコードのロジックを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 クラスには、エンコードとデコードなどのクラスのメソッドで使用するロジックが含まれています。 <xref:System.Web.HttpUtility>, 、<xref:System.Web.HttpServerUtility>, 、および <xref:System.Net.HttpResponseHeader>です。  
  
 継承することができます、 <xref:System.Web.Util.HttpEncoder> クラスし、既定値のエンコードとデコードの ASP.NET の動作をカスタマイズするには、次のように動作をオーバーライドします。 設定して、 <xref:System.Web.Configuration.HttpRuntimeSection.EncoderType%2A> のプロパティ、 <xref:System.Web.Configuration.HttpRuntimeSection> カスタム クラスを構成するクラス。  
  
 エンコードおよびデコードするためのカスタム クラスの派生元 <xref:System.Web.Util.HttpEncoder> 組み込み ASP.NET エンコードおよびデコードの動作をオーバーライドまたは変更のみの項目を選択しています。  
  
 置き換えたり、次のエンコーディングの動作を補足するための ASP.NET でのカスタム エンコードの種類を構成できます。  
  
-   HTML エンコーディング  
  
-   HTML 属性のエンコーディング  
  
-   URL エンコード  
  
-   URL パスのエンコード  
  
-   HTTP ヘッダー名とヘッダー値のエンコード  
  
 既定では、ASP.NET アプリケーションが使用するよう構成、 <xref:System.Web.Security.AntiXss.AntiXssEncoder> すべての出力エンコードを入力します。  
  
 次の例、アプリケーション レベルの Web.config ファイルの表示から方法、 <xref:System.Web.Security.AntiXss.AntiXssEncoder> の種類は、ASP.NET アプリケーションの設定。  
  
 `<httpRuntime requestValidationMode="4.5" encoderType="System.Web.Security.AntiXss.AntiXssEncoder, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"/>`  
  
 例のセットの構成設定、 <xref:System.Web.Security.AntiXss.AntiXssEncoder> すべてを実行するクラスが、アプリケーションでのエンコーディングを出力します。 詳細については、次を参照してください。、 <xref:System.Web.Security.AntiXss.AntiXssEncoder> クラスの概要です。  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>When you create a custom encoder class and override the base methods of the base class, the derived encoder might throw an exception from any of the overridden methods. However, in the following cases throwing such an exception could lead to unexpected behavior in ASP.NET:  
  
-   If ASP.NET is rendering an error page that is caused by an unhandled exception that was thrown from a custom encoder, ASP.NET does not attempt to encode its error output by calling into the custom encoder. This avoids recursive error conditions.  
  
-   When ASP.NET is sending HTTP headers to IIS, ASP.NET has no provision for unhandled exceptions. Therefore, the standard ASP.NET error page will be rendered (if configuration settings allows this page to be displayed).</para>
    </block>
    <altmember cref="T:System.Web.HttpUtility" />
    <altmember cref="T:System.Web.HttpServerUtility" />
    <altmember cref="T:System.Web.Configuration.HttpRuntimeSection" />
    <altmember cref="T:System.Web.Security.AntiXss.AntiXssEncoder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.Util.HttpEncoder" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Web.Util.HttpEncoder Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.HttpEncoder Current" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.HttpEncoder.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.HttpEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、 <see cref="T:System.Web.Util.HttpEncoder" /> アプリケーションで使用される型。</summary>
        <value>使用されるエンコーダー\/デコーダー型への参照。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 派生場合 <xref:System.Web.Util.HttpEncoder> 型が、構成ファイルで指定された、 <xref:System.Web.Util.HttpEncoder.Current%2A> プロパティは、カスタム型への参照を返します。 ただし、カスタム エンコーダーを使用していないプロパティは \[既定の ASP.NET への参照を返します <xref:System.Web.Util.HttpEncoder> インスタンス。  
  
 <xref:System.Web.Util.HttpEncoder.Current%2A> プロパティはスレッド セーフではありません。 アプリケーションのでのみこのプロパティを設定 `Application_Start` メソッド、ため `Application_Start` 1 つのスレッド上で実行されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">このプロパティに割り当てられているエンコーダーのインスタンスが <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Web.Util.HttpEncoder Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.HttpEncoder Default" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.HttpEncoder.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.HttpEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ASP.NET の既定のエンコーダーへの参照を取得します。</summary>
        <value>既定のエンコーダーへの参照。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 エンコードの一般的な問題は、既定の ASP.NET <xref:System.Web.Util.HttpEncoder.UrlEncode%2A> 動作に「\+」文字のスペースに変換します。 従来は、「\+」文字は、インターネットの規則より人間が判読できるように、URL 内の空白文字をエンコードするためにされました。 ただし、標準、に従って、空白文字になっての代わりに"%20"としてエンコードされる「\+」文字とします。 ASP.NET では、複数の標準準拠エンコード アルゴリズムを実装することができます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderNameValueEncode">
      <MemberSignature Language="C#" Value="protected virtual void HeaderNameValueEncode (string headerName, string headerValue, out string encodedHeaderName, out string encodedHeaderValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HeaderNameValueEncode(string headerName, string headerValue, string encodedHeaderName, string encodedHeaderValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HeaderNameValueEncode(System.String,System.String,System.String@,System.String@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="headerName" Type="System.String" />
        <Parameter Name="headerValue" Type="System.String" />
        <Parameter Name="encodedHeaderName" Type="System.String&amp;" RefType="out" />
        <Parameter Name="encodedHeaderValue" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="headerName">エンコードする HTTP ヘッダーの名前。</param>
        <param name="headerValue">エンコードする HTTP ヘッダーの値。</param>
        <param name="encodedHeaderName">このメソッドが戻るときに、HTTP ヘッダーに使用するエンコードされた名前が含まれています。 このパラメーターは初期化せずに渡されます。</param>
        <param name="encodedHeaderValue">このメソッドが戻るときに、HTTP ヘッダーとして使用するエンコードされた値が含まれています。 このパラメーターは初期化せずに渡されます。</param>
        <summary>ヘッダー名と値を HTTP ヘッダーとして使用できる文字列にエンコードします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A> メソッドからの入力文字列には、 `headerName` と `headerValue` パラメーターし、それらをエンコードします。 エンコードされた値は、出力パラメーターとして返されます。  
  
 <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A> メソッドでは、次のロジックを使用して、ヘッダーの名前と値をエンコードします。  
  
-   すべての文字が Unicode 値では、ASCII 文字、9 を除く ASCII 文字、32 より小さいの形式に URL エンコード `%NN` 場所、 `N` 文字は 16 進値を表します。  
  
-   9 \(水平タブ文字\) の ASCII 文字は、URL エンコードされません。  
  
-   ASCII 文字 127 としてエンコード `%7F`します。  
  
-   その他のすべての文字がエンコードされていません。  
  
    > [!NOTE]
    >  このメソッドは、Unicode 値を使用できますが、ASCII の範囲内の値は通常使用されます。  
  
 既定の実装、 <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A> メソッドの値を返す `headerValue` で `encodedHeaderValue` 場合 `headerValue` は `null` または空の文字列です。 同様に、既定の実装がの値を返す `headerName` で `encodedHeaderName` 場合 `headerName` は `null` または空の文字列です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlAttributeEncode">
      <MemberSignature Language="C#" Value="protected virtual void HtmlAttributeEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlAttributeEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">エンコードする文字列。</param>
        <param name="output">エンコードされた値を書き込むテキスト ライター。</param>
        <summary>受信した値を単一引用符または二重引用符を使用して区切られる HTML 属性を挿入する文字列にエンコードします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A> メソッドは、標準の HTML エンティティを使用して文字をエンコードします。 たとえば、 `<` としてエンコードされます \(左角かっこ\) `&lt;` と `\` \(円記号\) としてエンコード `&#92;`。  
  
 安全に使用 <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A> 内での単一引用符し、二重引用符のどちらの属性です。 値を引用符で囲む必要があります。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="output" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="HtmlDecode">
      <MemberSignature Language="C#" Value="protected virtual void HtmlDecode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlDecode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlDecode(System.String,System.IO.TextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">デコードする文字列。</param>
        <param name="output">デコードされた値を書き込むテキスト ライター。</param>
        <summary>HTML でエンコードされた文字列から値をデコードします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 次の表は、ASP.NET のデコード ロジックをデコードする文字のシーケンスを一覧表示します。  
  
|文字シーケンス|ルール|  
|-------------|---------|  
|`&#NNN;` \(ASCII 文字の 10 進コード\)。|指定された ASCII 文字とデコードされます。 文字シーケンスは、\# 文字の後に最初の桁から開始し、セミコロンで終了します。|  
|`&#xZZ;` \(ASCII 文字の 16 進コード\)。|指定された ASCII 文字とデコードされます。 エンコードされた形式では、10 進値ではなく 16 進数の文字を使用して、文字を指定します。 文字シーケンスは、\# 文字の後に最初の桁から開始し、セミコロンで終了します。|  
|HTML の名前付きエンティティです。|同等の ASCII 文字とデコードされます。|  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="output" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="protected virtual void HtmlEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlEncode(System.String,System.IO.TextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">エンコードする文字列。</param>
        <param name="output">エンコードされた値を書き込むテキスト ライター。</param>
        <summary>HTML エンコードされた文字列には、文字列をエンコードします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 次の表は、ASP.NET エンコード ロジックをデコードする文字のシーケンスを示します。  
  
|文字|としてエンコード|  
|--------|--------------|  
|`<` \(左山かっこ\)|`&lt;`|  
|`>` \(右の山かっこ\)|`&gt;`|  
|`"` \(二重引用符\)|`&quot;`|  
|`&` \(アンパサンド\)|`&amp;`|  
|`\` \(円記号\)|`&#92;`|  
|160 から 255 までの ASCII 文字|`&#NNN;`, 、、 `NNN` 3 桁の 10 進文字コードは、|  
  
 オーバーライドする場合、 <xref:System.Web.Util.HttpEncoder.HtmlEncode%2A> メソッド、二重引用符で囲まれた、または単一引用符の HTML 属性内で安全にもできる出力を生成する必要があります。 不確定のマークアップとコードを組み合わせてなど、Razor エンジンで解析 \< attr\="@value のタグを付ける"\> です。 さらに、@ 演算子はコンテキストを認識しない Razor エンジンによって処理されるときにそのため、呼び出す <xref:System.Web.Util.HttpEncoder.HtmlEncode%2A> なく <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="output" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="JavaScriptStringEncode">
      <MemberSignature Language="C#" Value="protected virtual string JavaScriptStringEncode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string JavaScriptStringEncode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.JavaScriptStringEncode(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">エンコードする文字列。</param>
        <summary>文字列をエンコードします。</summary>
        <returns>エンコードされた文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 URL エンコードは、すべてのブラウザーが URL 文字列のテキストを正しく送信されることを確認します。 疑問符 \(?\)、アンパサンド \(&\)、スラッシュ \(\/\)、およびスペースなどの文字は切り捨てやブラウザーによっては、破損している可能性があります。 そのため、これらの文字をエンコードする必要があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="protected virtual byte[] UrlEncode (byte[] bytes, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance unsigned int8[] UrlEncode(unsigned int8[] bytes, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.UrlEncode(System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">エンコードするバイトの配列。</param>
        <param name="offset">内の位置、 <c>bytes</c> エンコードを開始する配列。</param>
        <param name="count">内の項目数、 <c>bytes</c> エンコードする配列。</param>
        <summary>文字エン ティティに相当する 16 進数に、URL で許可されていない文字の配列をエンコードします。</summary>
        <returns>エンコードされた文字の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [UrlEncode メソッド \(Byte\<xref:System.Web.Util.HttpEncoder.UrlEncode%2A> で URL エンコードのいくつかのメソッド、メソッドを呼び出して、 [UrlEncode メソッド \(Byte\<xref:System.Web.HttpUtility> クラスです。  
  
 [UrlEncode メソッド \(Byte\<xref:System.Web.Util.HttpEncoder.UrlEncode%2A> メソッドは、URL エンコードではありません。 一連の ASCII 文字を任意の文字を URL セーフであると見なされます。 空白文字は、ASCII としてエンコード"`+"` 文字です。 URL の安全な ASCII 文字には、ASCI 文字が含まれます \(A ~ Z、z\)、数字 \(0 ~ 9\)、および一部の区切り記号。 次の表には、URL の安全な ASCII 文字と見なされる区切り記号が一覧表示します。  
  
|文字|説明|  
|--------|--------|  
|\-|ハイフン|  
|\_|アンダー スコア|  
|」を参照してください。|ピリオド \(ドット\)|  
|\!|感嘆符|  
|\*|アスタリスク \(アスタリスク\)|  
|\(|開きかっこを入力|  
|\)|閉じかっこ|  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> 0 以下の長さより大きい、 <paramref name="bytes" /> 配列。  
  
 または  
  
 <paramref name="count" /> 0 未満または <paramref name="count" /> plus <paramref name="offset" /> の長さより大きい、 <paramref name="bytes" /> 配列。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="UrlPathEncode">
      <MemberSignature Language="C#" Value="protected virtual string UrlPathEncode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string UrlPathEncode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.UrlPathEncode(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">エンコードする文字列。</param>
        <summary>URL のサブセクションをエンコードします。</summary>
        <returns>URL でエンコードされた文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Util.HttpEncoder.UrlPathEncode%2A> メソッドは、<xref:System.Web.HttpUtility.UrlPathEncode%2A> メソッドによって呼び出されます。<xref:System.Web.HttpUtility.UrlPathEncode%2A> メソッドは、次の手順を実行します。  
  
-   エンコーディングのロジックを適用、 <xref:System.Web.Util.HttpEncoder.UrlPathEncode%2A> メソッド \(クエリ文字列を除く\) を URL のパス部分だけにします。 メソッドは、URL を utf\-8 文字列としてエンコードされていると仮定します。  
  
-   最初の 128 個の ASCII 文字のサブセットのみが結果のエンコードされた文字列で使用されるように、非空白文字をエンコードします。 Unicode 値 128 より大きい\]、または 32 と以下の任意の文字では、URL エンコードです。  
  
-   空白を %20 としてエンコードします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>