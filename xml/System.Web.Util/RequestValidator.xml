<Type Name="RequestValidator" FullName="System.Web.Util.RequestValidator">
  <TypeSignature Language="C#" Value="public class RequestValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RequestValidator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Util.RequestValidator" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>カスタムの要求の検証のための基本メソッドを定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、ASP.NET は要求を検証しないコードが、要求からの値を明示的に要求されるまでです。 たとえば、ASP.NET はない値が検証クエリ文字列のコードにアクセスするまで、 <xref:System.Web.HttpRequest.QueryString%2A> コレクションです。 既定では、ASP.NET もは検証されません、cookie、HTTP、およびの値を使用してアップロードされたファイルの名前、フォームの値などの要求データの種類によって、 <xref:System.Web.HttpRequest.RawUrl%2A> プロパティです。  
  
 <xref:System.Web.Util.RequestValidator> クラスは、カスタムの要求の検証を提供するために実装できる基本クラスです。 このクラスを実装すると、検証が発生して検証を実行する要求データの種類を指定できます。  
  
 既定では、ASP.NET は、クロスサイト スクリプティング \(XSS\) のチェックを提供します。 ただし、補完または、XSS のカスタム実装を作成することで、ASP.NET で提供されている要求の検証ロジックを置換することができます。 たとえば、XSS 攻撃の確認だけでなく、SQL インジェクション攻撃をスキャンするカスタムの要求による検証の実装を記述することができます。  
  
 派生するカスタム クラスを記述するカスタムの要求の検証を作成する、 <xref:System.Web.Util.RequestValidator> 基本クラスです。 アプリケーション レベルの Web.config ファイルでカスタムの要求の検証コントロールを使用する ASP.NET を構成します。 Bin フォルダーにコンパイル済みのクラス ライブラリには App\_Code フォルダー内、または GAC のコンパイル済みのクラス ライブラリには、カスタム クラスを配置できます。  
  
> [!NOTE]
>  アプリケーションの 1 つだけのカスタム要求検証の種類を構成できます。 個々 の仮想パスまたはページに対する要求の検証の種類を構成することはできません。  
  
   
  
## 例  
 次の例では、クエリ文字列値を使用する特定の文字列のみを許可するカスタムの要求のバリデーターを作成する方法を示します。  
  
 [!code-csharp[System.Web.Util.RequestValidator\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.util.requestvalidator/cs/requestvalidator.cs#1)]
 [!code-vb[System.Web.Util.RequestValidator\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.util.requestvalidator/vb/requestvalidator.vb#1)]  
  
 次の例では、アプリケーションの Web.config ファイルで、カスタム検証コントロールを使用する ASP.NET を構成する方法を示します。  
  
```  
<system.web>  
  <httpRuntime requestValidationType="CustomRequestValidation" />  
</system.web>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Util.RequestValidationSource" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RequestValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.Util.RequestValidator" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Util.RequestValidator> クラスには既定のコンス トラクターです。 クラスの新しいインスタンスが初期化されると、内部メソッドは、アプリケーションの構成情報のカスタム検証の詳細を取得します。 構成の詳細が含まれている、 <xref:System.Web.Configuration.HttpRuntimeSection> セクションです。 詳細については、次を参照してください。 [httpRuntime 要素 \(ASP.NET 設定スキーマ\)](http://msdn.microsoft.com/ja-jp/e9b81350-8aaf-47cc-9843-5f7d0c59f369) と <xref:System.Web.Configuration.HttpRuntimeSection.RequestValidationType%2A> 属性です。  
  
 1 つのインスタンスの初期化中に、 <xref:System.Web.Util.RequestValidator> クラスを作成するとに、インスタンスへの参照を保持、 <xref:System.Web.Util.RequestValidator.Current%2A> プロパティです。 ASP.NET では、要求ごとに新しい要求の検証コントロール インスタンスは作成されません。 そのため、カスタム実装の <xref:System.Web.Util.RequestValidator> クラスはスレッド セーフである必要があります。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Web.Util.RequestValidator Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.RequestValidator Current" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.RequestValidator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.RequestValidator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在への参照を取得または <see cref="T:System.Web.Util.RequestValidator" /> アプリケーションで使用されるインスタンスです。</summary>
        <value>
          <see cref="T:System.Web.Util.RequestValidator" /> クラスのインスタンス。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Util.RequestValidator.Current%2A> プロパティの保持の許可されている単一のインスタンスへの参照、 <xref:System.Web.Util.RequestValidator> クラスです。 インスタンスが存在しない場合は、新しいが作成されます。 インスタンスが既に存在する場合は、現在のインスタンスが返されます。  
  
 1 つのインスタンスの初期化中に、 <xref:System.Web.Util.RequestValidator> クラスが作成され、インスタンスへの参照に公開されますが、 <xref:System.Web.Util.RequestValidator.Current%2A> プロパティです。 ASP.NET では、要求ごとに新しい要求の検証コントロール インスタンスは作成されません。 そのため、カスタム実装の <xref:System.Web.Util.RequestValidator> クラスはスレッド セーフである必要があります。  
  
> [!NOTE]
>  <xref:System.Web.Util.RequestValidator.Current%2A> プロパティはスレッド セーフであるプロパティを設定すると、現在参照中に <xref:System.Web.Util.RequestValidator> クラスです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="InvokeIsValidRequestString">
      <MemberSignature Language="C#" Value="public bool InvokeIsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InvokeIsValidRequestString(class System.Web.HttpContext context, string value, valuetype System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, int32 validationFailureIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.InvokeIsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="requestValidationSource" Type="System.Web.Util.RequestValidationSource" />
        <Parameter Name="collectionKey" Type="System.String" />
        <Parameter Name="validationFailureIndex" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="context">要求の HTTP コンテキスト。</param>
        <param name="value">検証する HTTP 要求データ。</param>
        <param name="requestValidationSource">検証中の要求データのソースを表す列挙体。 この列挙体の有効な値を次に示します。  
  
-   <see langword="QueryString" />  
  
-   <see langword="Form " />  
  
-   <see langword="Cookies" />  
  
-   <see langword="Files" />  
  
-   <see langword="Path" />  
  
-   <see langword="PathInfo" />  
  
-   <see langword="Headers" /></param>
        <param name="collectionKey">\(省略可能\) 検証する項目の要求コレクション内のキー。 このパラメーターは、検証するデータをコレクションから取得する場合に使用します。 検証するデータをコレクションから取得しない場合、このパラメーターを <see langword="null" /> にすることができます。</param>
        <param name="validationFailureIndex">このメソッドが呼び出し元に復帰するときに、要求コレクション内の問題があるまたは無効なテキストの、0 から始まる開始点が示されます。 このパラメーターは初期化せずに渡されます。</param>
        <summary>HTTP 要求データを検証するために、保護された <see cref="M:System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" /> メソッドを呼び出すパブリック メソッドを提供します。</summary>
        <returns>検証する文字列に、悪意のあるスクリプト攻撃で使用される可能性があるエンコードされていない文字が含まれていない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Web.Util.RequestValidator.InvokeIsValidRequestString%2A> method provides public access to the protected <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> method. This lets you create a custom wrapper class for the <xref:System.Web.Util.RequestValidator> class and call the <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> method without having to inherit from the <xref:System.Web.Util.RequestValidator> class.  
  
 For information about request validation, see <xref:System.Web.UnvalidatedRequestValues>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidRequestString">
      <MemberSignature Language="C#" Value="protected virtual bool IsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool IsValidRequestString(class System.Web.HttpContext context, string value, valuetype System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, int32 validationFailureIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="requestValidationSource" Type="System.Web.Util.RequestValidationSource" />
        <Parameter Name="collectionKey" Type="System.String" />
        <Parameter Name="validationFailureIndex" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="context">現在の要求のコンテキスト。</param>
        <param name="value">検証する HTTP 要求データ。</param>
        <param name="requestValidationSource">検証中の要求データのソースを表す列挙体。 この列挙体の有効な値を次に示します。  
  
 <see langword="QueryString" />  
  
 <see langword="Form " />  
  
 <see langword="Cookies" />  
  
 <see langword="Files" />  
  
 <see langword="RawUrl" />  
  
 <see langword="Path" />  
  
 <see langword="PathInfo" />  
  
 <see langword="Headers" /></param>
        <param name="collectionKey">検証する項目の要求コレクション内のキー。 このパラメーターは省略できます。 このパラメーターは、検証するデータをコレクションから取得する場合に使用します。 検証するデータをコレクションから取得しない場合、<c>collectionKey</c> を <see langword="null" /> にすることができます。</param>
        <param name="validationFailureIndex">このメソッドが呼び出し元に復帰するときに、要求コレクション内の問題があるまたは無効なテキストの、0 から始まる開始点が示されます。 このパラメーターは初期化せずに渡されます。</param>
        <summary>HTTP 要求データを含む文字列を検証します。</summary>
        <returns>検証する文字列が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 You implement this method to perform custom validation of request data. The base behavior of the <xref:System.Web.Util.RequestValidator.IsValidRequestString%28System.Web.HttpContext%2CSystem.String%2CSystem.Web.Util.RequestValidationSource%2CSystem.String%2CSystem.Int32%40%29> method is like the behavior that ASP.NET implements internally to check for dangerous strings in cross\-site scripting validation. For more information, see [How To: Prevent Cross\-Site Scripting in ASP.NET](http://go.microsoft.com/fwlink/?LinkID=178708).  
  
 If custom validation logic detects an error, this method should return **languageKeyword tag is not supported!!!!**  
 and provide a value in **parameterReference tag is not supported!!!!**  
 to indicate the starting point of the text that caused the error. The value in **parameterReference tag is not supported!!!!**  
 must be 0 or a positive integer.  
  
 The logic in a request validation check proceeds as follows:  
  
-   The <xref:System.Web.HttpRequest> class performs a null\-character removal check on the incoming data.  
  
-   The <xref:System.Web.HttpRequest> class calls either the <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> method \(the default implementation of the base method\) or calls a derived version of the method.  
  
-   If <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> method returns **languageKeyword tag is not supported!!!!**  
     to indicate a validation failure, ASP.NET constructs an error string \(if necessary\) and throws an <xref:System.Web.HttpRequestValidationException> exception.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>