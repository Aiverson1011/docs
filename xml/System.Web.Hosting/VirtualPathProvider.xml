<Type Name="VirtualPathProvider" FullName="System.Web.Hosting.VirtualPathProvider">
  <TypeSignature Language="C#" Value="public abstract class VirtualPathProvider : MarshalByRefObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit VirtualPathProvider extends System.MarshalByRefObject" />
  <TypeSignature Language="DocId" Value="T:System.Web.Hosting.VirtualPathProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Web アプリケーションが仮想ファイル システムのリソースを取得できるようにする方法のセットを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Hosting.VirtualPathProvider> クラスには、一連の Web アプリケーションの仮想ファイル システムを実装するためのメソッドが用意されています。 仮想ファイル システム内のファイルおよびディレクトリは、サーバーのオペレーティング システムによって提供されるファイル システム以外のデータ ストアによって管理されます。 たとえば、仮想ファイル システムを使用すると、SQL Server データベースの内容が格納されます。  
  
 仮想ファイル システムに要求を処理するすべてのファイルを格納できます。 バインディングには、以下の項目が含まれます。  
  
-   ASP.NET ページ、マスター ページ、ユーザー コントロール、およびその他のオブジェクト。  
  
-   拡張子が .htm ファイルと .jpg など標準の Web ページ。  
  
-   マップされている任意のカスタム拡張機能、 <xref:System.Web.Compilation.BuildProvider> インスタンス。  
  
-   名前付きテーマ、 `App_Theme` フォルダーです。  
  
 ASP.NET アプリケーションのフォルダーや仮想ファイル システムでアプリケーション レベルのアセンブリを生成するファイルを格納することはできません。 バインディングには、以下の項目が含まれます。  
  
-   Global.asax ファイルです。  
  
-   Web.config ファイルです。  
  
-   サイト マップ データのファイルで使用される、 <xref:System.Web.XmlSiteMapProvider>です。  
  
-   ディレクトリを含むアプリケーション アセンブリまたはアプリケーション アセンブリを生成する: `Bin`, 、`App_Code`, 、`App_GlobalResources`, 、 `App_LocalResources`です。  
  
-   アプリケーションのデータ フォルダー、 `App_Data`です。  
  
> [!NOTE]
>  展開のために、Web サイトをプリコンパイル、コンテンツがによって提供される、 <xref:System.Web.Hosting.VirtualPathProvider> インスタンスがコンパイルされていないおよび no <xref:System.Web.Hosting.VirtualPathProvider> インスタンスは、プリコンパイル済みサイトで使用されます。  
  
## VirtualPathProvider を登録します。  
 カスタム <xref:System.Web.Hosting.VirtualPathProvider> インスタンスは、使用して ASP.NET コンパイル システムに登録する必要があります、 <xref:System.Web.Hosting.HostingEnvironment.RegisterVirtualPathProvider%2A?displayProperty=fullName> 、Web アプリケーションでページの解析やコンパイルを実行する前に、のメソッドです。  
  
 通常、 <xref:System.Web.Hosting.VirtualPathProvider> でインスタンスが登録されている、 `AppInitialize` で定義されたメソッド、 `App_Code` ディレクトリ、または中に、 `Application_Start` 内のイベント、 `Global.asax` ファイルです。 登録の例については、 <xref:System.Web.Hosting.VirtualPathProvider> インスタンス、 `AppInitialize` メソッド、例を参照してください。  
  
 登録することができます、 <xref:System.Web.Hosting.VirtualPathProvider> が他のイベント、ページの中にインスタンスがコンパイルされ、前にキャッシュされる、 <xref:System.Web.Hosting.VirtualPathProvider> インスタンスが登録されているが無効化しない場合でも、新しい <xref:System.Web.Hosting.VirtualPathProvider> インスタンスは以前にコンパイルされたページに、ソースが提供するようになりました。  
  
   
  
## 例  
 次のコード例は、 <xref:System.Web.Hosting.VirtualPathProvider> に格納されている情報を使用して仮想ファイル システムを作成するクラスの実装、 <xref:System.Data.DataSet> オブジェクトです。 コード例が連携するためのコード例、 <xref:System.Web.Hosting.VirtualFile> と <xref:System.Web.Hosting.VirtualDirectory> 仮想リソースをデータ ストアが提供するクラスに読み込まれる、 <xref:System.Data.DataSet> オブジェクトです。  
  
 この例は、4 つの部分を: <xref:System.Web.Hosting.VirtualPathProvider> クラスの実装、設定に使用する XML データ ファイル、 <xref:System.Data.DataSet> オブジェクト、 `AppStart` を含むオブジェクト、 `AppInitialize` 登録に使用する方法、 <xref:System.Web.Hosting.VirtualPathProvider> クラスをコンパイル システムと仮想のファイルへのリンクを提供する ASP.NET ページです。  
  
 このサンプル コードを使用して、アプリケーションで、以下の手順を実行します。  
  
1.  Web サーバー上には、サンプル アプリケーションを作成します。  
  
2.  カスタムのソース コードをコピー <xref:System.Web.Hosting.VirtualPathProvider> オブジェクト \(下記参照\) をアプリケーションのファイルに `App_Code` ディレクトリ。  
  
3.  カスタムのソース コードをコピー <xref:System.Web.Hosting.VirtualDirectory> オブジェクト \(例を参照してください、 <xref:System.Web.Hosting.VirtualDirectory> クラスの概要に関するトピック\) をアプリケーションのファイルに `App_Code` ディレクトリ。  
  
4.  カスタムのソース コードをコピー <xref:System.Web.Hosting.VirtualFile> オブジェクト \(例を参照してください、 <xref:System.Web.Hosting.VirtualFile> クラスの概要に関するトピック\) をアプリケーションのファイルに `App_Code` ディレクトリ。  
  
5.  ソース コードをコピー、 `AppStart` オブジェクト \(下記参照\) をアプリケーションのファイルに `App_Code` ディレクトリ。  
  
6.  XML データ \(下記参照\) という名前のファイルにコピー `XMLData.xml` アプリケーションのファイルに `App_Data` ディレクトリ。  
  
7.  コピー、 `default.aspx` サンプル アプリケーションのルート ディレクトリにファイル \(下記参照\)。 開くには、Web ブラウザーを使用して、 `default.aspx` ファイルを開き、仮想ファイルの内容を表示するページのリンクをクリックします。  
  
 最初の例は、カスタム <xref:System.Web.Hosting.VirtualPathProvider> クラスです。<xref:System.Web.Hosting.VirtualPathProvider.DirectoryExists%2A> と <xref:System.Web.Hosting.VirtualPathProvider.FileExists%2A> メソッドは、要求されたディレクトリが仮想ファイル システム内に存在するかどうかを示すためにオーバーライドします。<xref:System.Web.Hosting.VirtualPathProvider.GetDirectory%2A> と <xref:System.Web.Hosting.VirtualPathProvider.GetFile%2A> を返すカスタム メソッドがオーバーライドされる <xref:System.Web.Hosting.VirtualDirectory> と <xref:System.Web.Hosting.VirtualFile> 仮想ファイル システムからの情報を含むインスタンス。  
  
 クラスも提供、 `GetVirtualData` で使用されるメソッド、 <xref:System.Web.Hosting.VirtualDirectory> と <xref:System.Web.Hosting.VirtualFile> にアクセスするクラス、 <xref:System.Data.DataSet> 仮想ファイル システム データを格納するオブジェクト。 運用環境の実装ではこのメソッドがデータ ストアとの対話を担当するビジネス オブジェクトに通常実装します。  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider\#20](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#20)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider\#20](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#20)]  
  
 2 番目の例は、XML データ ファイルの設定に使用する、 <xref:System.Data.DataSet> カスタムによって返されるオブジェクト <xref:System.Web.Hosting.VirtualPathProvider> オブジェクトです。 この XML データは使用方法を示すために使用、 <xref:System.Web.Hosting.VirtualPathProvider>, 、<xref:System.Web.Hosting.VirtualDirectory>, 、および <xref:System.Web.Hosting.VirtualFile> オブジェクトを外部データからデータを取得し、実稼働品質のデータ ストアを表すものではありません。  
  
```  
<?xml version="1.0" encoding="utf-8" ?>  
  <resource type="dir"   
    path="/vrDir"   
    parentPath=""   
    content="">  
    <resource type="file"   
      path="/vrDir/Level1FileA.vrf"  
      parentPath="/vrDir"   
      content="This is the content of file Level1FileA.">  
    </resource>  
    <resource type="file"   
      path="/vrDir/Level1FileB.vrf"  
      parentPath="/vrDir"   
      content="This is the content of file Level1FileB.">  
    </resource>  
    <resource type="dir"   
      path="/vrDir/Level2DirA"   
      parentPath="/vrDir"   
      content="">  
    <resource type="file"   
      path="/vrDir/Level2DirA/Level2FileA.vrf"   
      parentPath="/vrDir/Level2DirA"   
      content="This is the content of file Level2FileA.">  
    </resource>  
    <resource type="file"   
      path="/vrDir/Level2DirA/Level2FileB.vrf"  
      parentPath="/vrDir/Level2DirA"   
      content="This is the content of file Level2FileB.">  
    </resource>  
  </resource>  
  <resource type="dir"   
    path="/vrDir/Level2DirB"   
    parentPath="/vrDir"   
    content="">  
    <resource type="file"   
      path="/vrDir/Level2DirB/Level2FileA.vrf"   
      parentPath="/vrDir/Level2DirB"   
      content="This is the content of file Level2FileA.">  
    </resource>  
    <resource type="file"   
      path="/vrDir/Level2DirB/Level2FileB.vrf"  
      parentPath="/vrDir/Level2DirB"   
      content="This is the content of file Level2FileB.">  
    </resource>  
  </resource>  
</resource>  
```  
  
 3 番目の例では、 `AppStart` オブジェクトを含む、 `AppInitialize` メソッドです。 このメソッドは、必要なカスタム初期化を実行する ASP.NET アプリケーションの初期化中に呼び出されます。 この場合は、カスタム登録 <xref:System.Web.Hosting.VirtualPathProvider> 、ASP.NET でのオブジェクトがシステムを構築します。  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider\#10](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/AppStart.cs#10)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider\#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/AppStart.vb#10)]  
  
 最後の例は、仮想ファイル システムに格納された仮想ファイルへのリンクを含む ASP.NET ページです。  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/Default.aspx#1)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/Default.aspx#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>When you inherit from <see cref="T:System.Web.Hosting.VirtualPathProvider" />, you must override the following members:  
  
-   <see cref="M:System.Web.Hosting.VirtualPathProvider.FileExists(System.String)" />  
  
-   <see cref="M:System.Web.Hosting.VirtualPathProvider.GetFile(System.String)" />  
  
 If your custom <see cref="T:System.Web.Hosting.VirtualPathProvider" /> class supports directories in the virtual file system, you must override the following members.  
  
-   <see cref="M:System.Web.Hosting.VirtualPathProvider.DirectoryExists(System.String)" />  
  
-   <see cref="M:System.Web.Hosting.VirtualPathProvider.GetDirectory(System.String)" /><block subset="none" type="note"><para>  
 If your virtual file system will contain themes for the Web site (by creating a virtual <c>App_Themes</c> directory), your custom <see cref="T:System.Web.Hosting.VirtualPathProvider" /> class must support directories.  
  
</para></block>  
  
 A custom <see cref="T:System.Web.Hosting.VirtualPathProvider" /> class works with classes derived from the <see cref="T:System.Web.Hosting.VirtualFile" /> and <see cref="T:System.Web.Hosting.VirtualDirectory" /> classes. You should implement derived classes from these types to provide file and directory information from your virtual file system. For an example of a custom <see cref="T:System.Web.Hosting.VirtualFile" /> implementation, see the Example section of the <see cref="T:System.Web.Hosting.VirtualFile" /> class overview topic. For an example of a custom <see cref="T:System.Web.Hosting.VirtualDirectory" /> implementation, see the Example section of the <see cref="T:System.Web.Hosting.VirtualDirectory" /> class overview topic.</para>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected VirtualPathProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>継承クラス インスタンスによって使用されるクラスを初期化します。 このコンス トラクターは、継承クラスによってのみ呼び出すことができます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オーバーライドする場合、 <xref:System.Web.Hosting.VirtualPathProvider.%23ctor%2A> コンス トラクターの後に行う必要のある任意の初期化を遅延させる、 <xref:System.Web.Hosting.VirtualPathProvider> にオブジェクトが登録されている、 <xref:System.Web.Hosting.VirtualPathProvider.Initialize%2A> メソッドです。  
  
   
  
## 例  
 次のコード例は、実装の <xref:System.Web.Hosting.VirtualPathProvider.%23ctor%2A> カスタムを初期化するコンス トラクター <xref:System.Web.Hosting.VirtualPathProvider> クラスです。 例を実行するために必要な完全なコードの例」のセクションを参照してください、 <xref:System.Web.Hosting.VirtualPathProvider> クラスの概要に関するトピック。  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider\#25](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#25)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider\#25](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#25)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CombineVirtualPaths">
      <MemberSignature Language="C#" Value="public virtual string CombineVirtualPaths (string basePath, string relativePath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string CombineVirtualPaths(string basePath, string relativePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="basePath" Type="System.String" />
        <Parameter Name="relativePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="basePath">アプリケーションのベース パスです。</param>
        <param name="relativePath">基本パスを基準として、仮想リソースへのパス。</param>
        <summary>仮想リソースへの完全なパスを返すへの相対パスを使用した基本パスを結合します。</summary>
        <returns>仮想リソースへの完全なパス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths%2A> メソッドを仮想リソースへの相対パスの内容を検査し、必要な変更を実行します。  
  
 既定の実装を組み合わせて、 `basePath` と `relativePath` 標準 ASP.NET パスの処理に応じて、パラメーター。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>If you override the default implementation of the <see cref="M:System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths(System.String,System.String)" /> method, you are required to convert any special syntax with the <paramref name="relativePath" /> parameter to a valid virtual path. You are responsible for syntax checking, path validation, and handling malformed input, as well as edge cases for well-formed input.  
  
 In most cases it will not be necessary to override the default <see cref="M:System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths(System.String,System.String)" /> method. However, if you do need to modify the path, we recommend that you limit your <see cref="M:System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths(System.String,System.String)" /> implementation to modifying tokens specific to your virtual path provider in the <paramref name="relativeUrl" /> parameter, and that you then call the base implementation to perform normal ASP.NET path processing</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="DirectoryExists">
      <MemberSignature Language="C#" Value="public virtual bool DirectoryExists (string virtualDir);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DirectoryExists(string virtualDir) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.DirectoryExists(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualDir" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualDir">仮想ディレクトリへのパス。</param>
        <summary>仮想ファイル システム ディレクトリが存在するかどうかを示す値を取得します。</summary>
        <returns>
          <see langword="true" /> ディレクトリが仮想ファイル システムに存在する場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オーバーライド、 <xref:System.Web.Hosting.VirtualPathProvider.DirectoryExists%2A> メソッドによって表されるリソース コンパイル システムに示すために `virtualDir` これによって提供される仮想ファイル システムに存在する <xref:System.Web.Hosting.VirtualPathProvider> インスタンス。  
  
 場合は、カスタム <xref:System.Web.Hosting.VirtualPathProvider> クラスは、ディレクトリをサポートしていません、 <xref:System.Web.Hosting.VirtualPathProvider.DirectoryExists%2A> メソッドが返す `false`します。  
  
> [!NOTE]
>  仮想ファイル システムが、Web サイトのテーマを含めるかどうか \(バーチャル マシンを作成して `App_Themes` ディレクトリ\)、カスタム <xref:System.Web.Hosting.VirtualPathProvider> クラスは、ディレクトリをサポートする必要があります。  
  
   
  
## 例  
 次のコード例は、実装の <xref:System.Web.Hosting.VirtualPathProvider.DirectoryExists%2A> カスタム メソッド <xref:System.Web.Hosting.VirtualPathProvider> クラスです。 例を実行するために必要な完全なコードの例」のセクションを参照してください、 <xref:System.Web.Hosting.VirtualPathProvider> クラスの概要に関するトピック。  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider\#22](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#22)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider\#22](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FileExists">
      <MemberSignature Language="C#" Value="public virtual bool FileExists (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool FileExists(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.FileExists(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">仮想ファイルへのパス。</param>
        <summary>ファイルが仮想ファイル システムに存在するかどうかを示す値を取得します。</summary>
        <returns>
          <see langword="true" /> 仮想ファイル システムにファイルが存在する場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オーバーライド、 <xref:System.Web.Hosting.VirtualPathProvider.FileExists%2A> メソッドによって表されるリソース コンパイル システムに示すために `virtualPath` これによって提供される仮想ファイル システムに存在する <xref:System.Web.Hosting.VirtualPathProvider> インスタンス。  
  
   
  
## 例  
 次のコード例は、実装の <xref:System.Web.Hosting.VirtualPathProvider.FileExists%2A> カスタム メソッド <xref:System.Web.Hosting.VirtualPathProvider> クラスです。 例を実行するために必要な完全なコードの例」のセクションを参照してください、 <xref:System.Web.Hosting.VirtualPathProvider> クラスの概要に関するトピック。  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider\#21](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#21)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider\#21](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCacheDependency">
      <MemberSignature Language="C#" Value="public virtual System.Web.Caching.CacheDependency GetCacheDependency (string virtualPath, System.Collections.IEnumerable virtualPathDependencies, DateTime utcStart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.Caching.CacheDependency GetCacheDependency(string virtualPath, class System.Collections.IEnumerable virtualPathDependencies, valuetype System.DateTime utcStart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.GetCacheDependency(System.String,System.Collections.IEnumerable,System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Caching.CacheDependency</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="virtualPathDependencies" Type="System.Collections.IEnumerable" />
        <Parameter Name="utcStart" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="virtualPath">プライマリ仮想リソースへのパス。</param>
        <param name="virtualPathDependencies">プライマリ仮想リソースに必要なその他のリソースへのパスの配列。</param>
        <param name="utcStart">仮想リソースが読み取られた UTC 時刻です。</param>
        <summary>指定した仮想パスに基づいて、キャッシュ依存関係を作成します。</summary>
        <returns>A <see cref="T:System.Web.Caching.CacheDependency" /> 指定された仮想リソースのオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の実装、 <xref:System.Web.Hosting.VirtualPathProvider.GetCacheDependency%2A> メソッドが返す `null`します。 仮想リソースをキャッシュに後で使用するため、いずれかをオーバーライドする必要があります、 <xref:System.Web.Hosting.VirtualPathProvider.GetCacheDependency%2A> メソッドまたは <xref:System.Web.Hosting.VirtualPathProvider.GetFileHash%2A> メソッドです。  
  
   
  
## 例  
 次のコード例を実装して、 <xref:System.Web.Hosting.VirtualPathProvider.GetCacheDependency%2A> メソッドのカスタム <xref:System.Web.Hosting.VirtualPathProvider> クラスです。 例を実行するために必要な完全なコードの例」のセクションを参照してください、 <xref:System.Web.Hosting.VirtualPathProvider> クラスの概要に関するトピック。  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider\#28](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#28)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider\#28](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCacheKey">
      <MemberSignature Language="C#" Value="public virtual string GetCacheKey (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetCacheKey(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.GetCacheKey(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">仮想リソースへのパス。</param>
        <summary>指定した仮想パスに使用するキャッシュ キーを返します。</summary>
        <returns>指定された仮想リソースのキャッシュ キー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.Hosting.VirtualPathProvider.GetCacheKey%2A> 仮想リソースのカスタム キャッシュ キーを入力します。 オーバーライドしていない場合、 <xref:System.Web.Hosting.VirtualPathProvider.GetCacheKey%2A> メソッド、仮想パスは、キャッシュ キーを使用します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Only override the default <see cref="M:System.Web.Hosting.VirtualPathProvider.GetCacheKey(System.String)" /> method if creating a cache key based on the virtual path will not work for your application.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetDirectory">
      <MemberSignature Language="C#" Value="public virtual System.Web.Hosting.VirtualDirectory GetDirectory (string virtualDir);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.Hosting.VirtualDirectory GetDirectory(string virtualDir) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.GetDirectory(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.VirtualDirectory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualDir" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualDir">仮想ディレクトリへのパス。</param>
        <summary>仮想ファイル システムから仮想ディレクトリを取得します。</summary>
        <returns>派生、 <see cref="T:System.Web.Hosting.VirtualDirectory" /> 仮想ファイル システム ディレクトリを表すクラスです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Hosting.VirtualPathProvider.GetDirectory%2A> メソッドが戻るの子孫、 <xref:System.Web.Hosting.VirtualDirectory> ファイルとで指定したディレクトリに格納されているディレクトリを含むクラス、 `virtualDir` パラメーター。  
  
 場合は、カスタム <xref:System.Web.Hosting.VirtualPathProvider> クラスは、ディレクトリをサポートしていません、 <xref:System.Web.Hosting.VirtualPathProvider.GetDirectory%2A> メソッドが返す `null`します。  
  
> [!NOTE]
>  仮想ファイル システムが、Web サイトのテーマを含めるかどうか \(バーチャル マシンを作成して `App_Themes` ディレクトリ\)、カスタム <xref:System.Web.Hosting.VirtualPathProvider> クラスは、ディレクトリをサポートする必要があります。  
  
   
  
## 例  
 次のコード例は、実装の <xref:System.Web.Hosting.VirtualPathProvider.GetDirectory%2A> カスタム メソッド <xref:System.Web.Hosting.VirtualPathProvider> クラスです。 例を実行するために必要な完全なコードの例」のセクションを参照してください、 <xref:System.Web.Hosting.VirtualPathProvider> クラスの概要に関するトピック。  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider\#24](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#24)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider\#24](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFile">
      <MemberSignature Language="C#" Value="public virtual System.Web.Hosting.VirtualFile GetFile (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.Hosting.VirtualFile GetFile(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.GetFile(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.VirtualFile</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">仮想ファイルへのパス。</param>
        <summary>仮想ファイル システムから仮想ファイルを取得します。</summary>
        <returns>派生、 <see cref="T:System.Web.Hosting.VirtualFile" /> 仮想ファイル システムでファイルを表すクラスです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Hosting.VirtualPathProvider.GetFile%2A> メソッドが戻るの子孫、 <xref:System.Web.Hosting.VirtualFile> によって指定されたファイルを表すクラス、 `virtualPath` パラメーター。  
  
   
  
## 例  
 次のコード例は、実装の <xref:System.Web.Hosting.VirtualPathProvider.GetFile%2A> カスタム メソッド <xref:System.Web.Hosting.VirtualPathProvider> クラスです。 例を実行するために必要な完全なコードの例」のセクションを参照してください、 <xref:System.Web.Hosting.VirtualPathProvider> クラスの概要に関するトピック。  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider\#23](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#23)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider\#23](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFileHash">
      <MemberSignature Language="C#" Value="public virtual string GetFileHash (string virtualPath, System.Collections.IEnumerable virtualPathDependencies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetFileHash(string virtualPath, class System.Collections.IEnumerable virtualPathDependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.GetFileHash(System.String,System.Collections.IEnumerable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="virtualPathDependencies" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="virtualPath">プライマリ仮想リソースへのパス。</param>
        <param name="virtualPathDependencies">プライマリ仮想リソースに必要なその他の仮想リソースへのパスの配列。</param>
        <summary>指定した仮想パスのハッシュを返します。</summary>
        <returns>指定した仮想パスのハッシュです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.Hosting.VirtualPathProvider.GetFileHash%2A> 仮想ファイル システム リソースの依存関係のハッシュを提供するメソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="protected virtual void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.Initialize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>初期化、 <see cref="T:System.Web.Hosting.VirtualPathProvider" /> インスタンス。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Hosting.VirtualPathProvider.Initialize%2A> ASP.NET コンパイル システムに、プロバイダーが登録された後にメソッドが呼び出されます。<xref:System.Web.Hosting.VirtualPathProvider.Initialize%2A> 後に必要なすべての初期化を提供するメソッドが使用される、 <xref:System.Web.Hosting.VirtualPathProvider> インスタンスは、アプリケーションが占める環境に配置されます。  
  
   
  
## 例  
 次のコード例は、実装の <xref:System.Web.Hosting.VirtualPathProvider.Initialize%2A> 、アプリケーションからデータ ファイルへのパスを設定するメソッド <xref:System.Web.Hosting.HostingEnvironment> インスタンス。 例を実行するために必要な完全なコードの例」のセクションを参照してください、 <xref:System.Web.Hosting.VirtualPathProvider> クラスの概要に関するトピック。  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider\#26](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#26)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider\#26](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeLifetimeService">
      <MemberSignature Language="C#" Value="public override object InitializeLifetimeService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object InitializeLifetimeService() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.InitializeLifetimeService" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>により、 <see cref="T:System.Web.Hosting.VirtualPathProvider" /> オブジェクト無期限の有効期間のリースが作成されるようにすることができます。</summary>
        <returns>常に <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、 <xref:System.MarshalByRefObject.InitializeLifetimeService%2A> 、基本クラス メソッドです。 常に返します `null` し、それによって作成されないリース制限されることをできないように、 <xref:System.Web.Hosting.VirtualPathProvider> オブジェクトの有効期間。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenFile">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenFile (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenFile(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.OpenFile(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">仮想ファイルへのパス。</param>
        <summary>仮想ファイルからストリームを返します。</summary>
        <returns>読み取り専用 <see cref="T:System.IO.Stream" /> 指定された仮想ファイルまたはリソースのオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Hosting.VirtualPathProvider.OpenFile%2A> メソッドは、便利なメソッドを作成することがなく仮想ファイルからストリームを取得することができます、 <xref:System.Web.Hosting.VirtualPathProvider> インスタンス。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Previous">
      <MemberSignature Language="C#" Value="protected System.Web.Hosting.VirtualPathProvider Previous { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Hosting.VirtualPathProvider Previous" />
      <MemberSignature Language="DocId" Value="P:System.Web.Hosting.VirtualPathProvider.Previous" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.VirtualPathProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>以前に登録されたへの参照を取得 <see cref="T:System.Web.Hosting.VirtualPathProvider" /> コンパイル システム内のオブジェクト。</summary>
        <value>次の <see cref="T:System.Web.Hosting.VirtualPathProvider" /> コンパイル システム内のオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、 <xref:System.Web.Hosting.VirtualPathProvider> オブジェクトは、ASP.NET コンパイル システムに登録されているが、プロバイダーのチェーンに追加されます。 使用して、 <xref:System.Web.Hosting.VirtualPathProvider.Previous%2A> オフ手の形処理の前にプロパティ <xref:System.Web.Hosting.VirtualPathProvider> これによって、要求されたパスが指定されていない場合、チェーン内のオブジェクト <xref:System.Web.Hosting.VirtualPathProvider> インスタンス。  
  
 パス プロバイダーのチェーンは、常には、ファイル システムからファイルを使用する既定の ASP.NET プロバイダーで終了します。  
  
   
  
## 例  
 次のコード例は、実装の <xref:System.Web.Hosting.VirtualPathProvider.GetFile%2A> メソッドです。 文字列で要求された仮想ディレクトリが始まらないかどうか `"/vrdir"`, 、メソッドを使用して、 <xref:System.Web.Hosting.VirtualPathProvider.Previous%2A> プロパティを次に要求を渡す <xref:System.Web.Hosting.VirtualPathProvider> 、チェーン内のオブジェクト。 例を実行するために必要な完全なコードの例」のセクションを参照してください、 <xref:System.Web.Hosting.VirtualPathProvider> クラスの概要に関するトピック。  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider\#23](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#23)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider\#23](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>