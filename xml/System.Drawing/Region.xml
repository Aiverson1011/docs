<Type Name="Region" FullName="System.Drawing.Region">
  <TypeSignature Language="C#" Value="public sealed class Region : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Region extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Region" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>四角形とパスから成るグラフィック図形の内部について説明します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 領域は、ワールド座標、座標が指定されているために、拡張性の高いです。 描画サーフェイスの内部がサイズおよびそれを表すピクセルの形に依存します。 アプリケーションは、描画操作の出力のクリップ領域を使用することができます。 これらの領域は、クリッピング領域と呼ばれます。 クリッピング領域の使用の詳細については、次を参照してください。 [How To: Use Clipping with a Region](http://msdn.microsoft.com/ja-jp/43d121b4-e14c-4901-b25c-2d6c25ba4e29)します。  
  
 アプリケーションでは、ポイントや四角形が領域と交差するかどうかを確認したり、ヒット テストの操作での領域も使用できます。 ヒット テスト領域の使用の詳細については、次を参照してください。 [How To: Use Hit Testing with a Region](http://msdn.microsoft.com/ja-jp/3a4c07cb-a40a-4d14-ad35-008f531910a8)します。  
  
 アプリケーションを使用して領域を入力することができます、 <xref:System.Drawing.Graphics.FillRegion%2A?displayProperty=fullName> メソッドと  <xref:System.Drawing.Brush> オブジェクトです。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。  コード例を使用する方法を示しています、 <xref:System.Drawing.Drawing2D.RegionData.Data%2A> いずれかから <xref:System.Drawing.Drawing2D.RegionData> を設定するオブジェクト、 <xref:System.Drawing.Drawing2D.RegionData.Data%2A> 別の <xref:System.Drawing.Drawing2D.RegionData>です。  
  
 [!code-cpp[System.Drawing.MiscExamples\#13](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#13)]
 [!code-csharp[System.Drawing.MiscExamples\#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#13)]
 [!code-vb[System.Drawing.MiscExamples\#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#13)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Drawing.Rectangle" />
    <altmember cref="T:System.Drawing.Drawing2D.GraphicsPath" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Region ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>新しい <see cref="T:System.Drawing.Region" /> を初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターは、新しい初期化 <xref:System.Drawing.Region> 無限内部です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Region (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.#ctor(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path">新しい <see cref="T:System.Drawing.Region" /> を定義する <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />。</param>
        <summary>指定した <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> で新しい <see cref="T:System.Drawing.Region" /> を初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method creates a new <xref:System.Drawing.Region> with a <xref:System.Drawing.Drawing2D.GraphicsPath>. The new region is defined as the interior of the <xref:System.Drawing.Drawing2D.GraphicsPath> specified by the **parameterReference tag is not supported!!!!**  
 parameter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Region (System.Drawing.Drawing2D.RegionData rgnData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Drawing2D.RegionData rgnData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.#ctor(System.Drawing.Drawing2D.RegionData)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rgnData" Type="System.Drawing.Drawing2D.RegionData" />
      </Parameters>
      <Docs>
        <param name="rgnData">新しい <see cref="T:System.Drawing.Region" /> の内部を定義する <see cref="T:System.Drawing.Drawing2D.RegionData" />。</param>
        <summary>指定したデータから新しい <see cref="T:System.Drawing.Region" /> を初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method creates a new <xref:System.Drawing.Region> with an interior defined by an existing <xref:System.Drawing.Region>. The **parameterReference tag is not supported!!!!**  
 parameter is an array that contains the definition of an existing <xref:System.Drawing.Region>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rgnData" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Region (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.#ctor(System.Drawing.Rectangle)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> 新しいの内部を定義する構造体 <see cref="T:System.Drawing.Region" />します。</param>
        <summary>新しい初期化 <see cref="T:System.Drawing.Region" /> 指定された対象から <see cref="T:System.Drawing.Rectangle" /> 構造体。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドが、新たに作成 <xref:System.Drawing.Region> 四角形の内部にします。 内部は、 `rect` パラメーター。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Drawing.Region.%23ctor%2A> コンス トラクターと <xref:System.Drawing.Region.MakeEmpty%2A> メソッドです。 この例は、Windows フォームで使用される設計されています。 フォームを作成し、次のコードを貼り付けます。 呼び出す、 `FillEmptyRegion` フォームの <xref:System.Windows.Forms.Control.Paint> イベント処理メソッドを渡す `e` として <xref:System.Windows.Forms.PaintEventArgs>します。  
  
 [!code-cpp[System.Drawing.MiscExamples\#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.MiscExamples\#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#7)]
 [!code-vb[System.Drawing.MiscExamples\#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Region (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.#ctor(System.Drawing.RectangleF)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">A <see cref="T:System.Drawing.RectangleF" /> 新しいの内部を定義する構造体 <see cref="T:System.Drawing.Region" />します。</param>
        <summary>新しい初期化 <see cref="T:System.Drawing.Region" /> 指定された対象から <see cref="T:System.Drawing.RectangleF" /> 構造体。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドが、新たに作成 <xref:System.Drawing.Region> 四角形の内部にします。 内部は、 `rect` パラメーター。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Drawing.Region Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Region Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.Clone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Region</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Drawing.Region" /> の同一コピーを作成します。</summary>
        <returns>このメソッドが作成する <see cref="T:System.Drawing.Region" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Complement">
      <MemberSignature Language="C#" Value="public void Complement (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Complement(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.Complement(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path">この <see cref="T:System.Drawing.Region" /> を補足する <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />。</param>
        <summary>この <see cref="T:System.Drawing.Region" /> と交差しない指定の <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> の部分が含まれるように、この <see cref="T:System.Drawing.Region" /> を更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a rectangle and draws it to the screen in black.  
  
-   Creates a second rectangle that intersects with the first and draws it to the screen in red.  
  
-   Creates a region using the first rectangle.  
  
-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPath>, and adds the second rectangle to it.  
  
-   Gets the complement of the region when combined with the <xref:System.Drawing.Drawing2D.GraphicsPath>.  
  
-   Fills the complement area with blue and draws it to the screen.  
  
 Notice that the area of the <xref:System.Drawing.Drawing2D.GraphicsPath> that does not intersect with the region is colored blue.  
  
 [!code-cpp[System.Drawing.ClassicRegionExamples\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicRegionExamples/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.ClassicRegionExamples\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicRegionExamples/CS/form1.cs#1)]
 [!code-vb[System.Drawing.ClassicRegionExamples\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicRegionExamples/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Complement">
      <MemberSignature Language="C#" Value="public void Complement (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Complement(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.Complement(System.Drawing.Rectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> これを補完する構造体 <see cref="T:System.Drawing.Region" />します。</param>
        <summary>この更新 <see cref="T:System.Drawing.Region" /> の指定した部分を格納する <see cref="T:System.Drawing.Rectangle" /> この交差しない構造 <see cref="T:System.Drawing.Region" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 例については、次を参照してください。、 <xref:System.Drawing.Region.Complement%28System.Drawing.RectangleF%29> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Complement">
      <MemberSignature Language="C#" Value="public void Complement (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Complement(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.Complement(System.Drawing.RectangleF)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> これを補完する構造体 <see cref="T:System.Drawing.Region" />します。</param>
        <summary>この更新 <see cref="T:System.Drawing.Region" /> の指定した部分を格納する <see cref="T:System.Drawing.RectangleF" /> この交差しない構造 <see cref="T:System.Drawing.Region" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   四角形を作成し、黒で画面に描画します。  
  
-   1 つ目と交差して、赤で画面に描画する 2 つ目の四角形を作成します。  
  
-   最初の四角形を使用して領域を作成します。  
  
-   2 つ目の四角形と組み合わせたその地域の補数を取得します。  
  
-   青で補完する領域を塗りつぶし、画面に描画します。  
  
 領域と交差しない 2 つ目の四角形の領域を青に色が付くことに注意してください。  
  
 [!code-cpp[System.Drawing.ClassicRegionExamples\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicRegionExamples/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.ClassicRegionExamples\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicRegionExamples/CS/form1.cs#2)]
 [!code-vb[System.Drawing.ClassicRegionExamples\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicRegionExamples/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Complement">
      <MemberSignature Language="C#" Value="public void Complement (System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Complement(class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.Complement(System.Drawing.Region)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="region">この <see cref="T:System.Drawing.Region" /> オブジェクトを補足する <see cref="T:System.Drawing.Region" /> オブジェクト。</param>
        <summary>この <see cref="T:System.Drawing.Region" /> と交差しない指定の <see cref="T:System.Drawing.Region" /> の部分が含まれるように、この <see cref="T:System.Drawing.Region" /> を更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 The following example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a rectangle and draws it to the screen in black  
  
-   Creates a second rectangle that intersects with the first and draws it to the screen in red.  
  
-   Creates one region using the first rectangle and creates a second region using the second rectangle.  
  
-   Gets the complement of that first region when combined with the second region.  
  
-   Fills the complement area with blue and draws it to the screen.  
  
 Notice that the area of the second region that does not intersect with the first region is colored blue.  
  
 [!code-cpp[System.Drawing.ClassicRegionExamples\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicRegionExamples/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.ClassicRegionExamples\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicRegionExamples/CS/form1.cs#3)]
 [!code-vb[System.Drawing.ClassicRegionExamples\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicRegionExamples/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="region" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Drawing.Region" /> によって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Calling <xref:System.Drawing.Region.Dispose%2A> allows the resources used by this <xref:System.Drawing.Region> to be reallocated for other purposes.  
  
 Call <xref:System.Drawing.Region.Dispose%2A> when you are finished using the <xref:System.Drawing.Region>. The <xref:System.Drawing.Region.Dispose%2A> method leaves the <xref:System.Drawing.Region> in an unusable state. After calling <xref:System.Drawing.Region.Dispose%2A>, you must release all references to the <xref:System.Drawing.Region> so the garbage collector can reclaim the memory that the <xref:System.Drawing.Region> was occupying. For more information, see [Cleaning Up Unmanaged Resources](http://msdn.microsoft.com/ja-jp/a17b0066-71c2-4ba4-9822-8e19332fc213) and [Implementing a Dispose Method](http://msdn.microsoft.com/ja-jp/eb4e1af0-3b48-4fbc-ad4e-fc2f64138bf9).  
  
> [!NOTE]
>  Always call <xref:System.Drawing.Region.Dispose%2A> before you release your last reference to the <xref:System.Drawing.Region>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Drawing.Region> object's **languageKeyword tag is not supported!!!!**  
>  method.  
  
   
  
## 例  
 The following code example demonstrates the <xref:System.Drawing.Region.%23ctor%2A> constructor and the <xref:System.Drawing.Region.Exclude%2A> and <xref:System.Drawing.Region.Dispose%2A> methods.  
  
 This example is designed to be used with Windows Forms. Paste the code into a form and call the `FillRegionExcludingPath` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing **parameterReference tag is not supported!!!!**  
 as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.GraphicsProperties\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.GraphicsProperties\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#1)]
 [!code-vb[System.Drawing.GraphicsProperties\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Drawing.Region region, System.Drawing.Graphics g);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(class System.Drawing.Region region, class System.Drawing.Graphics g) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.Equals(System.Drawing.Region,System.Drawing.Graphics)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
        <Parameter Name="g" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="region">テスト対象の <see cref="T:System.Drawing.Region" />。</param>
        <param name="g">A <see cref="T:System.Drawing.Graphics" /> 描画サーフェイスを表します。</param>
        <summary>テストするかどうか、指定した <see cref="T:System.Drawing.Region" /> はこれと同じ <see cref="T:System.Drawing.Region" /> 指定した画面を描画します。</summary>
        <returns>
          <see langword="true" /> 変換に関連付けられている場合は、領域の内部がこのリージョンの内部と同じ場合、 <paramref name="g" /> パラメーターが適用されているそれ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 グラフィックス コンテキストの現在の変換 `g` 描画サーフェイス上の領域の内部の計算に使用します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="g" /> または <paramref name="region" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Exclude">
      <MemberSignature Language="C#" Value="public void Exclude (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Exclude(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.Exclude(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path">
          <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> これから除外する <see cref="T:System.Drawing.Region" />です。</param>
        <summary>この更新 <see cref="T:System.Drawing.Region" /> を指定したと交差しない、内部の部分のみを含む <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例を示しています、 <xref:System.Drawing.Region.%23ctor%2A> のコンス トラクターと <xref:System.Drawing.Region.Exclude%2A> と <xref:System.Drawing.Region.Dispose%2A> メソッドです。  
  
 この例は、Windows フォームで使用される設計されています。 フォームと呼び出しにコードを貼り付けます、 `FillRegionExcludingPath` メソッドは、フォームの処理と <xref:System.Windows.Forms.Control.Paint> イベントを渡す `e` として <xref:System.Windows.Forms.PaintEventArgs>します。  
  
 [!code-cpp[System.Drawing.GraphicsProperties\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.GraphicsProperties\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#1)]
 [!code-vb[System.Drawing.GraphicsProperties\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Exclude">
      <MemberSignature Language="C#" Value="public void Exclude (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Exclude(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.Exclude(System.Drawing.Rectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> これから除外する構造体 <see cref="T:System.Drawing.Region" />します。</param>
        <summary>この更新 <see cref="T:System.Drawing.Region" /> を指定したと交差しない、内部の部分のみを含む <see cref="T:System.Drawing.Rectangle" /> 構造体。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 コード例については、 <xref:System.Drawing.Region.Exclude%28System.Drawing.RectangleF%29> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Exclude">
      <MemberSignature Language="C#" Value="public void Exclude (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Exclude(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.Exclude(System.Drawing.RectangleF)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> これから除外する構造体 <see cref="T:System.Drawing.Region" />します。</param>
        <summary>この更新 <see cref="T:System.Drawing.Region" /> を指定したと交差しない、内部の部分のみを含む <see cref="T:System.Drawing.RectangleF" /> 構造体。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   四角形を作成し、黒で画面に描画  
  
-   1 つ目と交差して、赤で画面に描画する 2 つ目の四角形を作成します。  
  
-   最初の四角形を使用して領域を作成します。  
  
-   2 つ目の四角形と組み合わせたときの非除外部分を取得します。  
  
-   非除外部分を青で塗りつぶしし、画面に描画します。  
  
 四角形と交差しない領域の一部の領域を青に色が付くことに注意してください。  
  
 [!code-cpp[System.Drawing.ClassicRegionExamples\#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicRegionExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.ClassicRegionExamples\#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicRegionExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.ClassicRegionExamples\#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicRegionExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Exclude">
      <MemberSignature Language="C#" Value="public void Exclude (System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Exclude(class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.Exclude(System.Drawing.Region)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="region">
          <see cref="T:System.Drawing.Region" /> これから除外する <see cref="T:System.Drawing.Region" />です。</param>
        <summary>この更新 <see cref="T:System.Drawing.Region" /> を指定したと交差しない、内部の部分のみを含む <see cref="T:System.Drawing.Region" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 コード例については、次を参照してください。、 <xref:System.Drawing.Region.Exclude%28System.Drawing.RectangleF%29> と<xref:System.Drawing.Region.Complement%28System.Drawing.Region%29> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="region" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Region ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.Finalize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>オブジェクトが、ガベージ コレクションによって収集される前に、リソースの解放とその他のクリーンアップ操作の実行を試みることができるようにします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromHrgn">
      <MemberSignature Language="C#" Value="public static System.Drawing.Region FromHrgn (IntPtr hrgn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Region FromHrgn(native int hrgn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.FromHrgn(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Region</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hrgn" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hrgn">既存のハンドル <see cref="T:System.Drawing.Region" />します。</param>
        <summary>新しい初期化 <see cref="T:System.Drawing.Region" /> を指定した既存のハンドルから GDI 領域です。</summary>
        <returns>新しい <see cref="T:System.Drawing.Region" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドが、新たに作成 <xref:System.Drawing.Region> 既存によって定義された内部で <xref:System.Drawing.Region> でハンドルによって参照される、 `hrgn` パラメーター。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for accessing unmanaged code. Related enumeration <see cref="T:System.Security.Permissions.SecurityPermissionFlag" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF GetBounds (System.Drawing.Graphics g);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.RectangleF GetBounds(class System.Drawing.Graphics g) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.GetBounds(System.Drawing.Graphics)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="g">
          <see cref="T:System.Drawing.Graphics" /> この <see cref="T:System.Drawing.Region" /> を描画します。</param>
        <summary>取得、 <see cref="T:System.Drawing.RectangleF" /> この領域に外接する四角形を表す構造 <see cref="T:System.Drawing.Region" /> の描画サーフェイスで、 <see cref="T:System.Drawing.Graphics" /> オブジェクトです。</summary>
        <returns>A <see cref="T:System.Drawing.RectangleF" /> を外接する四角形を表す構造 <see cref="T:System.Drawing.Region" /> 指定した画面を描画します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 グラフィックス コンテキストの現在の変換は、描画サーフェイス領域の内部の計算に使用します。 外接する四角形は、常に最小の可能な外接する四角形によっては、現在の変換ではありません。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   作成、 <xref:System.Drawing.Drawing2D.GraphicsPath> し楕円を追加します。  
  
-   青でパスを入力し、画面に描画します。  
  
-   使用する領域を作成、 <xref:System.Drawing.Drawing2D.GraphicsPath>です。  
  
-   2 つ目の四角形と組み合わせたときの非除外部分を取得します。  
  
-   領域に外接する四角形を取得し、赤で画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicRegionExamples\#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicRegionExamples/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.ClassicRegionExamples\#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicRegionExamples/CS/form1.cs#5)]
 [!code-vb[System.Drawing.ClassicRegionExamples\#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicRegionExamples/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="g" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetHrgn">
      <MemberSignature Language="C#" Value="public IntPtr GetHrgn (System.Drawing.Graphics g);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int GetHrgn(class System.Drawing.Graphics g) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.GetHrgn(System.Drawing.Graphics)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="g">
          <see cref="T:System.Drawing.Graphics" /> この <see cref="T:System.Drawing.Region" /> を描画します。</param>
        <summary>次の Windows ハンドルを返します <see cref="T:System.Drawing.Region" /> で指定したグラフィックス コンテキスト。</summary>
        <returns>この <see cref="T:System.Drawing.Region" /> を識別する Windows ハンドル。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="g" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRegionData">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.RegionData GetRegionData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.RegionData GetRegionData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.GetRegionData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.RegionData</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返します。、 <see cref="T:System.Drawing.Drawing2D.RegionData" /> これを説明する情報を表す <see cref="T:System.Drawing.Region" />します。</summary>
        <returns>A <see cref="T:System.Drawing.Drawing2D.RegionData" /> これを説明する情報を表す <see cref="T:System.Drawing.Region" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Drawing.Region> クラスでは、カスタムの形状を定義することができます。 線、多角形、および曲線の形状をによって形成をされることができます。<xref:System.Drawing.Region.GetRegionData%2A> これに含まれている図形を記述 <xref:System.Drawing.Region>します。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。  コード例を使用する方法を示しています、 <xref:System.Drawing.Drawing2D.RegionData.Data%2A> いずれかから <xref:System.Drawing.Drawing2D.RegionData> を設定するオブジェクト、 <xref:System.Drawing.Drawing2D.RegionData.Data%2A> 別の <xref:System.Drawing.Drawing2D.RegionData>です。  
  
 [!code-cpp[System.Drawing.MiscExamples\#13](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#13)]
 [!code-csharp[System.Drawing.MiscExamples\#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#13)]
 [!code-vb[System.Drawing.MiscExamples\#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRegionScans">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF[] GetRegionScans (System.Drawing.Drawing2D.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.RectangleF[] GetRegionScans(class System.Drawing.Drawing2D.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.GetRegionScans(System.Drawing.Drawing2D.Matrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix">A <see cref="T:System.Drawing.Drawing2D.Matrix" /> 領域に適用されるジオメトリック変換を表します。</param>
        <summary>配列を返します <see cref="T:System.Drawing.RectangleF" /> およそのこの構造体 <see cref="T:System.Drawing.Region" /> 、指定した行列変換が適用された後です。</summary>
        <returns>配列 <see cref="T:System.Drawing.RectangleF" /> およそのこの構造体 <see cref="T:System.Drawing.Region" /> 、指定した行列変換が適用された後です。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="matrix" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public void Intersect (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Intersect(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.Intersect(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path">
          <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> これと交差する <see cref="T:System.Drawing.Region" />です。</param>
        <summary>この更新 <see cref="T:System.Drawing.Region" /> 、指定した自体の交差部分に <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 コード例については、次を参照してください。、 <xref:System.Drawing.RectangleF.Intersect%28System.Drawing.RectangleF%29?displayProperty=fullName> と <xref:System.Drawing.Region.Complement%28System.Drawing.Drawing2D.GraphicsPath%29> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public void Intersect (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Intersect(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.Intersect(System.Drawing.Rectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">この <see cref="T:System.Drawing.Region" /> と交差する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <summary>この <see cref="T:System.Drawing.Region" /> をそれ自体と指定の <see cref="T:System.Drawing.Rectangle" /> 構造体の交差部分に更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 For a code example, see the <xref:System.Drawing.Region.Intersect%28System.Drawing.RectangleF%29> method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public void Intersect (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Intersect(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.Intersect(System.Drawing.RectangleF)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> この交差 <see cref="T:System.Drawing.Region" />します。</param>
        <summary>この更新 <see cref="T:System.Drawing.Region" /> 、指定した自体の交差部分に <see cref="T:System.Drawing.RectangleF" /> 構造体。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   最初の四角形を作成し、黒で画面に描画します。  
  
-   2 つ目の四角形を作成し、赤で画面に描画します。  
  
-   最初の四角形の領域を作成します。  
  
-   2 つ目の四角形と組み合わせたときの交差部分の領域を取得します。  
  
-   青で交差部分の領域にし、画面に描画します。  
  
 地域および四角形の重複した部分のみが青であることを確認します。  
  
 [!code-cpp[System.Drawing.ClassicRegionExamples\#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicRegionExamples/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.ClassicRegionExamples\#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicRegionExamples/CS/form1.cs#7)]
 [!code-vb[System.Drawing.ClassicRegionExamples\#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicRegionExamples/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public void Intersect (System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Intersect(class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.Intersect(System.Drawing.Region)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="region">この <see cref="T:System.Drawing.Region" /> と交差する <see cref="T:System.Drawing.Region" />。</param>
        <summary>この <see cref="T:System.Drawing.Region" /> をそれ自体と指定の <see cref="T:System.Drawing.Region" /> の交差部分に更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 For code examples, see the <xref:System.Drawing.Region.Intersect%28System.Drawing.RectangleF%29> and <xref:System.Drawing.Region.Complement%28System.Drawing.Drawing2D.GraphicsPath%29> method**languageKeyword tag is not supported!!!!**  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty (System.Drawing.Graphics g);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsEmpty(class System.Drawing.Graphics g) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.IsEmpty(System.Drawing.Graphics)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="g">A <see cref="T:System.Drawing.Graphics" /> 描画サーフェイスを表します。</param>
        <summary>テストするかどうかこの <see cref="T:System.Drawing.Region" /> 指定された描画サーフェイスの内部が空です。</summary>
        <returns>
          <see langword="true" /> 場合のこの内部 <see cref="T:System.Drawing.Region" /> 、変換に関連付けられている場合は、空白 <paramref name="g" /> 適用されている、それ以外の場合は、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 グラフィックス コンテキストの現在の変換 `g` 、描画サーフェイス領域の内部の計算に使用します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="g" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsInfinite">
      <MemberSignature Language="C#" Value="public bool IsInfinite (System.Drawing.Graphics g);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsInfinite(class System.Drawing.Graphics g) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.IsInfinite(System.Drawing.Graphics)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="g">A <see cref="T:System.Drawing.Graphics" /> 描画サーフェイスを表します。</param>
        <summary>テストするかどうかこの <see cref="T:System.Drawing.Region" /> 無限の内部が指定された描画サーフェイスにします。</summary>
        <returns>
          <see langword="true" /> 場合のこの内部 <see cref="T:System.Drawing.Region" /> は、変換に関連付けられている場合、無限 <paramref name="g" /> 適用されている、それ以外の場合は、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 グラフィックス コンテキストの現在の変換 `g` 、描画サーフェイス領域の内部の計算に使用します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="g" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.IsVisible(System.Drawing.Point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">
          <see cref="T:System.Drawing.Point" /> をテストします。</param>
        <summary>テストするかどうか、指定した <see cref="T:System.Drawing.Point" /> この構造体が含まれる <see cref="T:System.Drawing.Region" />です。</summary>
        <returns>
          <see langword="true" /> <paramref name="point" /> これに含まれる <see cref="T:System.Drawing.Region" />。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 コード例については、 <xref:System.Drawing.Region.IsVisible%28System.Drawing.RectangleF%29> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.PointF point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.IsVisible(System.Drawing.PointF)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="point">
          <see cref="T:System.Drawing.PointF" /> をテストします。</param>
        <summary>テストするかどうか、指定した <see cref="T:System.Drawing.PointF" /> この構造体が含まれる <see cref="T:System.Drawing.Region" />です。</summary>
        <returns>
          <see langword="true" /> <paramref name="point" /> これに含まれる <see cref="T:System.Drawing.Region" />。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 コード例については、 <xref:System.Drawing.Region.IsVisible%28System.Drawing.RectangleF%29> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.IsVisible(System.Drawing.Rectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> をテストします。</param>
        <summary>いずれかどうかをテストの指定した部分 <see cref="T:System.Drawing.Rectangle" /> この構造体が含まれる <see cref="T:System.Drawing.Region" />です。</summary>
        <returns>このメソッドが戻る <see langword="true" /> との任意の部分 <paramref name="rect" /> これに含まれる <see cref="T:System.Drawing.Region" />。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 コード例については、 <xref:System.Drawing.Region.IsVisible%28System.Drawing.RectangleF%29> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.IsVisible(System.Drawing.RectangleF)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> をテストします。</param>
        <summary>いずれかどうかをテストの指定した部分 <see cref="T:System.Drawing.RectangleF" /> この構造体が含まれる <see cref="T:System.Drawing.Region" />です。</summary>
        <returns>
          <see langword="true" /> 任意の部分 <paramref name="rect" /> これに含まれる <see cref="T:System.Drawing.Region" />。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   最初の四角形を作成し、青で画面に描画します。  
  
-   2 つ目の四角形を作成し、赤で画面に描画します。  
  
-   最初の四角形の領域を作成します。  
  
-   四角形の任意の部分との領域と交差しているかどうかを判断します。  
  
-   表示、 `true` または `false` 画面上の結果。  
  
 四角形に、地域が交差するので、結果ことに注意してください `true`します。  
  
 [!code-cpp[System.Drawing.ClassicRegionExamples\#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicRegionExamples/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.ClassicRegionExamples\#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicRegionExamples/CS/form1.cs#8)]
 [!code-vb[System.Drawing.ClassicRegionExamples\#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicRegionExamples/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.Point point, System.Drawing.Graphics g);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.Point point, class System.Drawing.Graphics g) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.IsVisible(System.Drawing.Point,System.Drawing.Graphics)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
        <Parameter Name="g" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="point">
          <see cref="T:System.Drawing.Point" /> をテストします。</param>
        <param name="g">A <see cref="T:System.Drawing.Graphics" /> グラフィックス コンテキストを表します。</param>
        <summary>テストするかどうか、指定した <see cref="T:System.Drawing.Point" /> この構造体が含まれる <see cref="T:System.Drawing.Region" /> 指定して描画されたときに <see cref="T:System.Drawing.Graphics" />します。</summary>
        <returns>
          <see langword="true" /> <paramref name="point" /> これに含まれる <see cref="T:System.Drawing.Region" />。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 グラフィックス コンテキストの現在の変換は、領域の内部と描画サーフェイス上のポイント座標の計算に使用されます。  
  
   
  
## 例  
 コード例については、 <xref:System.Drawing.Region.IsVisible%28System.Drawing.RectangleF%29> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.PointF point, System.Drawing.Graphics g);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.PointF point, class System.Drawing.Graphics g) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.IsVisible(System.Drawing.PointF,System.Drawing.Graphics)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" />
        <Parameter Name="g" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="point">
          <see cref="T:System.Drawing.PointF" /> をテストします。</param>
        <param name="g">A <see cref="T:System.Drawing.Graphics" /> グラフィックス コンテキストを表します。</param>
        <summary>テストするかどうか、指定した <see cref="T:System.Drawing.PointF" /> この構造体が含まれる <see cref="T:System.Drawing.Region" /> 指定して描画されたときに <see cref="T:System.Drawing.Graphics" />します。</summary>
        <returns>
          <see langword="true" /> <paramref name="point" /> これに含まれる <see cref="T:System.Drawing.Region" />。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 グラフィックス コンテキストの現在の変換は、領域の内部と描画サーフェイス上のポイント座標の計算に使用されます。  
  
   
  
## 例  
 コード例については、 <xref:System.Drawing.Region.IsVisible%28System.Drawing.RectangleF%29> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.Rectangle rect, System.Drawing.Graphics g);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.Rectangle rect, class System.Drawing.Graphics g) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.IsVisible(System.Drawing.Rectangle,System.Drawing.Graphics)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="g" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> をテストします。</param>
        <param name="g">A <see cref="T:System.Drawing.Graphics" /> グラフィックス コンテキストを表します。</param>
        <summary>いずれかどうかをテストの指定した部分 <see cref="T:System.Drawing.Rectangle" /> この構造体が含まれる <see cref="T:System.Drawing.Region" /> 指定して描画した場合 <see cref="T:System.Drawing.Graphics" />します。</summary>
        <returns>
          <see langword="true" /> 任意の部分、 <paramref name="rect" /> これに含まれる <see cref="T:System.Drawing.Region" />。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 グラフィックス コンテキストの現在の変換は領域の内部と描画サーフェイス上の四角形の座標を計算に使用します。  
  
   
  
## 例  
 コード例については、 <xref:System.Drawing.Region.IsVisible%28System.Drawing.RectangleF%29> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.RectangleF rect, System.Drawing.Graphics g);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.RectangleF rect, class System.Drawing.Graphics g) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.IsVisible(System.Drawing.RectangleF,System.Drawing.Graphics)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="g" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> をテストします。</param>
        <param name="g">A <see cref="T:System.Drawing.Graphics" /> グラフィックス コンテキストを表します。</param>
        <summary>いずれかどうかをテストの指定した部分 <see cref="T:System.Drawing.RectangleF" /> この構造体が含まれる <see cref="T:System.Drawing.Region" /> 指定して描画した場合 <see cref="T:System.Drawing.Graphics" />します。</summary>
        <returns>
          <see langword="true" /> <paramref name="rect" /> これに含まれる <see cref="T:System.Drawing.Region" />。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 グラフィックス コンテキストの現在の変換は領域の内部と描画サーフェイス上の四角形の座標を計算に使用します。  
  
   
  
## 例  
 コード例については、 <xref:System.Drawing.Region.IsVisible%28System.Drawing.RectangleF%29> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.IsVisible(System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">テストする点の x 座標。</param>
        <param name="y">テストする点の y 座標。</param>
        <summary>これで、指定した点が含まれているかどうか検査 <see cref="T:System.Drawing.Region" />します。</summary>
        <returns>
          <see langword="true" /> これで、指定した点が含まれていると <see cref="T:System.Drawing.Region" />。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 コード例については、 <xref:System.Drawing.Region.IsVisible%28System.Drawing.RectangleF%29> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (int x, int y, System.Drawing.Graphics g);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(int32 x, int32 y, class System.Drawing.Graphics g) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.IsVisible(System.Int32,System.Int32,System.Drawing.Graphics)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="g" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="x">テストする点の x 座標。</param>
        <param name="y">テストする点の y 座標。</param>
        <param name="g">A <see cref="T:System.Drawing.Graphics" /> グラフィックス コンテキストを表します。</param>
        <summary>これで、指定した点が含まれているかどうか検査 <see cref="T:System.Drawing.Region" /> オブジェクトの指定を使用して描画時に <see cref="T:System.Drawing.Graphics" /> オブジェクトです。</summary>
        <returns>
          <see langword="true" /> これで、指定した点が含まれていると <see cref="T:System.Drawing.Region" />。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 グラフィックス コンテキストの現在の変換は、領域の内部と描画サーフェイス上のポイント座標の計算に使用されます。  
  
   
  
## 例  
 コード例については、 <xref:System.Drawing.Region.IsVisible%28System.Drawing.RectangleF%29> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (float x, float y, System.Drawing.Graphics g);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(float32 x, float32 y, class System.Drawing.Graphics g) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.IsVisible(System.Single,System.Single,System.Drawing.Graphics)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="g" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="x">テストする点の x 座標。</param>
        <param name="y">テストする点の y 座標。</param>
        <param name="g">A <see cref="T:System.Drawing.Graphics" /> グラフィックス コンテキストを表します。</param>
        <summary>これで、指定した点が含まれているかどうか検査 <see cref="T:System.Drawing.Region" /> 指定して描画した場合 <see cref="T:System.Drawing.Graphics" />します。</summary>
        <returns>
          <see langword="true" /> これで、指定した点が含まれていると <see cref="T:System.Drawing.Region" />。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 グラフィックス コンテキストの現在の変換は、領域の内部と描画サーフェイス上のポイント座標の計算に使用されます。  
  
   
  
## 例  
 コード例については、 <xref:System.Drawing.Region.IsVisible%28System.Drawing.RectangleF%29> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.IsVisible(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">テストする四角形の左上隅の x 座標。</param>
        <param name="y">テストする四角形の左上隅の y 座標。</param>
        <param name="width">テストする四角形の幅。</param>
        <param name="height">テストする四角形の高さ。</param>
        <summary>この指定された四角形の任意の部分が含まれているかどうか検査 <see cref="T:System.Drawing.Region" />します。</summary>
        <returns>
          <see langword="true" /> この指定された四角形の任意の部分が含まれているときに <see cref="T:System.Drawing.Region" />。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 コード例については、 <xref:System.Drawing.Region.IsVisible%28System.Drawing.RectangleF%29> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.IsVisible(System.Single,System.Single,System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">テストする四角形の左上隅の x 座標。</param>
        <param name="y">テストする四角形の左上隅の y 座標。</param>
        <param name="width">テストする四角形の幅。</param>
        <param name="height">テストする四角形の高さ。</param>
        <summary>この指定された四角形の任意の部分が含まれているかどうか検査 <see cref="T:System.Drawing.Region" />します。</summary>
        <returns>
          <see langword="true" /> この指定された四角形の任意の部分が含まれているときに <see cref="T:System.Drawing.Region" /> オブジェクト。 それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 コード例については、 <xref:System.Drawing.Region.IsVisible%28System.Drawing.RectangleF%29> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (int x, int y, int width, int height, System.Drawing.Graphics g);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(int32 x, int32 y, int32 width, int32 height, class System.Drawing.Graphics g) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.IsVisible(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Graphics)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="g" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="x">テストする四角形の左上隅の x 座標。</param>
        <param name="y">テストする四角形の左上隅の y 座標。</param>
        <param name="width">テストする四角形の幅。</param>
        <param name="height">テストする四角形の高さ。</param>
        <param name="g">A <see cref="T:System.Drawing.Graphics" /> グラフィックス コンテキストを表します。</param>
        <summary>この指定された四角形の任意の部分が含まれているかどうか検査 <see cref="T:System.Drawing.Region" /> 指定して描画した場合 <see cref="T:System.Drawing.Graphics" />します。</summary>
        <returns>
          <see langword="true" /> この指定された四角形の任意の部分が含まれているときに <see cref="T:System.Drawing.Region" />。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 グラフィックス コンテキストの現在の変換は領域の内部と描画サーフェイス上の四角形の座標を計算に使用します。  
  
   
  
## 例  
 コード例については、 <xref:System.Drawing.Region.IsVisible%28System.Drawing.RectangleF%29> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (float x, float y, float width, float height, System.Drawing.Graphics g);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(float32 x, float32 y, float32 width, float32 height, class System.Drawing.Graphics g) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.IsVisible(System.Single,System.Single,System.Single,System.Single,System.Drawing.Graphics)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="g" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="x">テストする四角形の左上隅の x 座標。</param>
        <param name="y">テストする四角形の左上隅の y 座標。</param>
        <param name="width">テストする四角形の幅。</param>
        <param name="height">テストする四角形の高さ。</param>
        <param name="g">A <see cref="T:System.Drawing.Graphics" /> グラフィックス コンテキストを表します。</param>
        <summary>この指定された四角形の任意の部分が含まれているかどうか検査 <see cref="T:System.Drawing.Region" /> 指定して描画した場合 <see cref="T:System.Drawing.Graphics" />します。</summary>
        <returns>
          <see langword="true" /> この指定された四角形の任意の部分が含まれているときに <see cref="T:System.Drawing.Region" />。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 グラフィックス コンテキストの現在の変換は領域の内部と描画サーフェイス上の四角形の座標を計算に使用します。  
  
   
  
## 例  
 コード例については、 <xref:System.Drawing.Region.IsVisible%28System.Drawing.RectangleF%29> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeEmpty">
      <MemberSignature Language="C#" Value="public void MakeEmpty ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MakeEmpty() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.MakeEmpty" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>これを初期化します <see cref="T:System.Drawing.Region" /> 空の内部にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例では、使用して、 <xref:System.Drawing.Region.%23ctor%2A> コンス トラクターと <xref:System.Drawing.Region.MakeEmpty%2A> メソッドです。 この例は、Windows フォームで使用される設計されています。 フォームを作成し、次のコードを貼り付けます。 呼び出す、 `FillEmptyRegion` フォームの <xref:System.Windows.Forms.Control.Paint> イベント処理メソッドを渡す `e` として <xref:System.Windows.Forms.PaintEventArgs>します。  
  
 [!code-cpp[System.Drawing.MiscExamples\#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.MiscExamples\#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#7)]
 [!code-vb[System.Drawing.MiscExamples\#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeInfinite">
      <MemberSignature Language="C#" Value="public void MakeInfinite ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MakeInfinite() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.MakeInfinite" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>これを初期化します <see cref="T:System.Drawing.Region" /> 無限の内部オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、<xref:System.Drawing.Region.MakeInfinite%2A> メソッドの使用方法を示します。 この例は、Windows フォームで使用される設計されています。 フォームを作成し、次のコードを貼り付けます。 呼び出す、 `FillEmptyRegion` フォームの <xref:System.Windows.Forms.Control.Paint> イベント処理メソッドを渡す `e` として <xref:System.Windows.Forms.PaintEventArgs>します。  
  
 [!code-cpp[System.Drawing.MiscExamples\#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.MiscExamples\#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#8)]
 [!code-vb[System.Drawing.MiscExamples\#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseHrgn">
      <MemberSignature Language="C#" Value="public void ReleaseHrgn (IntPtr regionHandle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseHrgn(native int regionHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.ReleaseHrgn(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="regionHandle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="regionHandle">
          <see cref="T:System.Drawing.Region" /> へのハンドル。</param>
        <summary>
          <see cref="T:System.Drawing.Region" /> のハンドルを解放します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="regionHandle" /> は <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for access to unmanaged code. Related enumeration <see cref="T:System.Security.Permissions.SecurityPermissionFlag" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Drawing.Drawing2D.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Drawing.Drawing2D.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.Transform(System.Drawing.Drawing2D.Matrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix">
          <see cref="T:System.Drawing.Drawing2D.Matrix" /> この変換に使用する <see cref="T:System.Drawing.Region" />です。</param>
        <summary>この変換 <see cref="T:System.Drawing.Region" /> において指定した <see cref="T:System.Drawing.Drawing2D.Matrix" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   四角形を作成し、青で画面に描画します。  
  
-   四角形の領域を作成します。  
  
-   変換行列を作成し、45 度に設定します。  
  
-   領域を変換を適用します。  
  
-   赤で変換後の領域を塗りつぶし、変換後の領域を赤で画面に描画します。  
  
 赤色の四角形は、青色で示される、元の四角形から 45 度回転であることを確認します。  
  
 [!code-cpp[System.Drawing.ClassicRegionExamples\#9](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicRegionExamples/CPP/form1.cpp#9)]
 [!code-csharp[System.Drawing.ClassicRegionExamples\#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicRegionExamples/CS/form1.cs#9)]
 [!code-vb[System.Drawing.ClassicRegionExamples\#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicRegionExamples/VB/form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="matrix" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Translate">
      <MemberSignature Language="C#" Value="public void Translate (int dx, int dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Translate(int32 dx, int32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.Translate(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Int32" />
        <Parameter Name="dy" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dx">これをオフセットする量 <see cref="T:System.Drawing.Region" /> 水平方向にします。</param>
        <param name="dy">これをオフセットする量 <see cref="T:System.Drawing.Region" /> 垂直方向にします。</param>
        <summary>この座標をオフセット <see cref="T:System.Drawing.Region" /> を指定の量。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   四角形を作成し、青で画面に描画します。  
  
-   四角形の領域を作成します。  
  
-   領域を平行移動を適用します。  
  
-   赤で翻訳済みの領域を塗りつぶし、画面に赤で翻訳済みの領域を描画します。  
  
 青色で示されるダウンし、元の四角形の右側に赤い四角形を移動することを確認します。  
  
 [!code-cpp[System.Drawing.ClassicRegionExamples\#10](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicRegionExamples/CPP/form1.cpp#10)]
 [!code-csharp[System.Drawing.ClassicRegionExamples\#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicRegionExamples/CS/form1.cs#10)]
 [!code-vb[System.Drawing.ClassicRegionExamples\#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicRegionExamples/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Translate">
      <MemberSignature Language="C#" Value="public void Translate (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Translate(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.Translate(System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">これをオフセットする量 <see cref="T:System.Drawing.Region" /> 水平方向にします。</param>
        <param name="dy">これをオフセットする量 <see cref="T:System.Drawing.Region" /> 垂直方向にします。</param>
        <summary>この座標をオフセット <see cref="T:System.Drawing.Region" /> を指定の量。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 コード例については、<xref:System.Drawing.Region.Translate%28System.Single%2CSystem.Single%29> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public void Union (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Union(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.Union(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path">
          <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> この統合 <see cref="T:System.Drawing.Region" />します。</param>
        <summary>この更新 <see cref="T:System.Drawing.Region" /> 自体との指定された共用体に <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 コード例については、 <xref:System.Drawing.Region.Union%28System.Drawing.RectangleF%29> と <xref:System.Drawing.Region.Complement%28System.Drawing.Drawing2D.GraphicsPath%29> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public void Union (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Union(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.Union(System.Drawing.Rectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> このを統一する構造体 <see cref="T:System.Drawing.Region" />します。</param>
        <summary>この更新 <see cref="T:System.Drawing.Region" /> 自体との指定された共用体に <see cref="T:System.Drawing.Rectangle" /> 構造体。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 コード例については、 <xref:System.Drawing.Region.Union%28System.Drawing.RectangleF%29> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public void Union (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Union(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.Union(System.Drawing.RectangleF)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> このを統一する構造体 <see cref="T:System.Drawing.Region" />します。</param>
        <summary>この更新 <see cref="T:System.Drawing.Region" /> 自体との指定された共用体に <see cref="T:System.Drawing.RectangleF" /> 構造体。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`します。 コードは、次のアクションを実行します。  
  
-   最初の四角形を作成し、黒で画面に描画します。  
  
-   2 つ目の四角形を作成し、赤で画面に描画します。  
  
-   最初の四角形を使用して領域を作成します。  
  
-   共用体の領域を取得 `myRegion` と組み合わせた場合に `complementRect`します。  
  
-   青で共用体の領域を塗りつぶし、画面に描画します。  
  
 重複部分を含めて青で、両方の四角形が入力されてに注意してください。  
  
 [!code-cpp[System.Drawing.ClassicRegionExamples\#11](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicRegionExamples/CPP/form1.cpp#11)]
 [!code-csharp[System.Drawing.ClassicRegionExamples\#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicRegionExamples/CS/form1.cs#11)]
 [!code-vb[System.Drawing.ClassicRegionExamples\#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicRegionExamples/VB/form1.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public void Union (System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Union(class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.Union(System.Drawing.Region)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="region">
          <see cref="T:System.Drawing.Region" /> この統合 <see cref="T:System.Drawing.Region" />します。</param>
        <summary>この更新 <see cref="T:System.Drawing.Region" /> 自体との指定された共用体に <see cref="T:System.Drawing.Region" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 コード例については、 <xref:System.Drawing.Region.Union%28System.Drawing.RectangleF%29> と <xref:System.Drawing.Region.Complement%28System.Drawing.Drawing2D.GraphicsPath%29> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="region" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Xor">
      <MemberSignature Language="C#" Value="public void Xor (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Xor(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.Xor(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path">
          <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> に <see cref="Overload:System.Drawing.Region.Xor" /> この <see cref="T:System.Drawing.Region" />します。</param>
        <summary>この更新 <see cref="T:System.Drawing.Region" /> マイナス自体の交差部分に、指定した共用体に <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 コード例については、 <xref:System.Drawing.Region.Xor%28System.Drawing.RectangleF%29> と<xref:System.Drawing.Region.Complement%28System.Drawing.Drawing2D.GraphicsPath%29> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Xor">
      <MemberSignature Language="C#" Value="public void Xor (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Xor(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.Xor(System.Drawing.Rectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">
          <see cref="T:System.Drawing.Rectangle" /> 構造の <see cref="Overload:System.Drawing.Region.Xor" /> この <see cref="T:System.Drawing.Region" />します。</param>
        <summary>この更新 <see cref="T:System.Drawing.Region" /> マイナス自体の交差部分に、指定した共用体に <see cref="T:System.Drawing.Rectangle" /> 構造体。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 コード例については、 <xref:System.Drawing.Region.Xor%28System.Drawing.RectangleF%29> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xor">
      <MemberSignature Language="C#" Value="public void Xor (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Xor(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.Xor(System.Drawing.RectangleF)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">
          <see cref="T:System.Drawing.RectangleF" /> 構造の <see cref="M:System.Drawing.Region.Xor(System.Drawing.Drawing2D.GraphicsPath)" /> この <see cref="T:System.Drawing.Region" />します。</param>
        <summary>この更新 <see cref="T:System.Drawing.Region" /> マイナス自体の交差部分に、指定した共用体に <see cref="T:System.Drawing.RectangleF" /> 構造体。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   最初の四角形を作成し、黒で画面に描画します。  
  
-   2 つ目の四角形を作成し、赤で画面に描画します。  
  
-   最初の四角形を使用して領域を作成します。  
  
-   取得、 <xref:System.Drawing.Region.Xor%2A> 領域 `myRegion` と組み合わせた場合に `complementRect`します。  
  
-   入力、 <xref:System.Drawing.Region.Xor%2A> 青で領域を画面に描画します。  
  
 重複部分を除く、青で、両方の四角形が入力されてに注意してください。  
  
 [!code-cpp[System.Drawing.ClassicRegionExamples\#12](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicRegionExamples/CPP/form1.cpp#12)]
 [!code-csharp[System.Drawing.ClassicRegionExamples\#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicRegionExamples/CS/form1.cs#12)]
 [!code-vb[System.Drawing.ClassicRegionExamples\#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicRegionExamples/VB/form1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xor">
      <MemberSignature Language="C#" Value="public void Xor (System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Xor(class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Region.Xor(System.Drawing.Region)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="region">
          <see cref="T:System.Drawing.Region" /> に <see cref="Overload:System.Drawing.Region.Xor" /> この <see cref="T:System.Drawing.Region" />します。</param>
        <summary>この更新 <see cref="T:System.Drawing.Region" /> マイナス自体の交差部分に、指定した共用体に <see cref="T:System.Drawing.Region" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 コード例については、 <xref:System.Drawing.Region.Xor%28System.Drawing.RectangleF%29> と<xref:System.Drawing.Region.Complement%28System.Drawing.Drawing2D.GraphicsPath%29> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="region" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Xor">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この更新 <see cref="T:System.Drawing.Region" /> オブジェクト自体の交差部分に、指定したマイナス共用体に <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> オブジェクトです。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>新しい <see cref="T:System.Drawing.Region" /> を初期化します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Translate">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この座標をオフセット <see cref="T:System.Drawing.Region" /> を指定の量。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="IsVisible">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この指定された四角形が含まれているかどうか検査 <see cref="T:System.Drawing.Region" />します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Intersect">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この更新 <see cref="T:System.Drawing.Region" /> 、指定した自体の交差部分に <see cref="T:System.Drawing.Region" />します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Union">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この更新 <see cref="T:System.Drawing.Region" /> 自体との指定された共用体に <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Complement">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この更新 <see cref="T:System.Drawing.Region" /> の指定した部分に <see cref="T:System.Drawing.RectangleF" /> これと交差しない構造 <see cref="T:System.Drawing.Region" />します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Exclude">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この更新 <see cref="T:System.Drawing.Region" /> 、指定したと交差しない、内部の部分に <see cref="T:System.Drawing.Rectangle" /> 構造体。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>