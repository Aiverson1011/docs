<Type Name="BufferedGraphicsContext" FullName="System.Drawing.BufferedGraphicsContext">
  <TypeSignature Language="C#" Value="public sealed class BufferedGraphicsContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BufferedGraphicsContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.BufferedGraphicsContext" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>ダブル バッファリングのために使用できるグラフィックス バッファーを作成するためのメソッドを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Drawing.BufferedGraphicsContext> クラスでは、グラフィックスのカスタムのダブル バッファリングを実装することができます。 ダブル バッファリングを使用するグラフィックスを削減したり、ちらつきディスプレイ表面を再描画が原因で発生することができます。  
  
> [!NOTE]
>  ダブル バッファリングを使用する最も簡単な方法を設定するのには、 <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> 制御を使用してコントロールのスタイルのフラグ、 <xref:System.Windows.Forms.Control.SetStyle%2A> メソッドです。 設定、 <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> コントロールのコントロールのスタイルのフラグは、追加のコードを必要とせず既定のグラフィックス バッファーを使用してコントロールのすべての描画をリダイレクトします。 このフラグに設定されている `true` 既定です。  
  
 <xref:System.Drawing.BufferedGraphicsContext> クラスを作成してグラフィックス バッファーを構成するためのメソッドを提供します。<xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> メソッドは、作成、 <xref:System.Drawing.BufferedGraphics>, もバッファーを作成し、出力デバイスにコンテンツのレンダリングに使用できるメソッドを提供するグラフィックス バッファーのラッパーであります。  
  
 取得することができます、 <xref:System.Drawing.BufferedGraphicsContext> 静的から現在のアプリケーション ドメインに対する <xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=fullName> プロパティです。 アニメーションなどの視覚的に負荷の高いアプリケーションを作成できます専用 <xref:System.Drawing.BufferedGraphicsContext> 、コンス トラクターを使用するが、ほとんどのアプリケーション、 <xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=fullName> プロパティは十分でいます。  
  
 バッファリングされたグラフィックスとカスタムのバッファリング実装の描画の詳細については、次を参照してください。 [Double Buffered Graphics](http://msdn.microsoft.com/ja-jp/4f6fef99-0972-436e-9d73-0167e4033f71) と [How to: Manually Manage Buffered Graphics](http://msdn.microsoft.com/ja-jp/4c2a90ee-bbbe-4ff6-9170-1b06c195c918)です。  
  
   
  
## 例  
 次のコード例では、取得、 <xref:System.Drawing.BufferedGraphicsContext> 現在のアプリケーション ドメイン。 このコードは示されている例の一部、 <xref:System.Drawing.BufferedGraphics> クラスです。  
  
 [!code-cpp[BufferingExamples\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#1)]
 [!code-csharp[BufferingExamples\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#1)]
 [!code-vb[BufferingExamples\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Drawing.BufferedGraphics" />
    <altmember cref="T:System.Drawing.BufferedGraphicsManager" />
    <altmember cref="F:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BufferedGraphicsContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Drawing.BufferedGraphicsContext" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 視覚的に大量のアプリケーションをアニメーション化など、場合によってパフォーマンスを向上できます専用を使用して <xref:System.Drawing.BufferedGraphicsContext> によって提供される既定のインスタンスではなく、 <xref:System.Drawing.BufferedGraphicsManager>です。 これにより、作成およびのグラフィックス バッファーを個別に管理することができます。  
  
> [!NOTE]
>  常に呼び出す <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> 専用を使い終わったら <xref:System.Drawing.BufferedGraphicsContext>します。  
  
 専用のグラフィックス バッファーの詳細については、次を参照してください。 [How to: Manually Manage Buffered Graphics](http://msdn.microsoft.com/ja-jp/4c2a90ee-bbbe-4ff6-9170-1b06c195c918)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Allocate">
      <MemberSignature Language="C#" Value="public System.Drawing.BufferedGraphics Allocate (System.Drawing.Graphics targetGraphics, System.Drawing.Rectangle targetRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.BufferedGraphics Allocate(class System.Drawing.Graphics targetGraphics, valuetype System.Drawing.Rectangle targetRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Allocate(System.Drawing.Graphics,System.Drawing.Rectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.BufferedGraphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetGraphics" Type="System.Drawing.Graphics" />
        <Parameter Name="targetRectangle" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="targetGraphics">
          <see cref="T:System.Drawing.Graphics" /> に新しいバッファーのピクセル形式に一致するようにします。</param>
        <param name="targetRectangle">A <see cref="T:System.Drawing.Rectangle" /> を作成するバッファーのサイズを示します。</param>
        <summary>指定したピクセル形式を使用して指定されたサイズのグラフィックス バッファーを作成 <see cref="T:System.Drawing.Graphics" />します。</summary>
        <returns>A <see cref="T:System.Drawing.BufferedGraphics" /> を使用して指定された大きさのバッファーに描画することです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> メソッドに値を超えるサイズの四角形の <xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A> プロパティ、一時的な <xref:System.Drawing.BufferedGraphicsContext> 、バッファーを割り当て、バッファーの一時的なコンテキストを提供するように作成します。 新しい <xref:System.Drawing.BufferedGraphicsContext> とは別、 <xref:System.Drawing.BufferedGraphicsContext> アプリケーションのドメインが破棄された自動的にときに、 <xref:System.Drawing.BufferedGraphics> によって返される、 <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> メソッドを破棄します。  
  
   
  
## 例  
 グラフィックス バッファーを使用して、作成するコード例を次に示します、 <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> メソッドです。 このコードは示されている例の一部、 <xref:System.Drawing.BufferedGraphics> クラスです。  
  
 [!code-cpp[BufferingExamples\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#3)]
 [!code-csharp[BufferingExamples\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#3)]
 [!code-vb[BufferingExamples\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.BufferedGraphics" />
        <altmember cref="T:System.Drawing.Graphics" />
        <altmember cref="T:System.Drawing.Rectangle" />
      </Docs>
    </Member>
    <Member MemberName="Allocate">
      <MemberSignature Language="C#" Value="public System.Drawing.BufferedGraphics Allocate (IntPtr targetDC, System.Drawing.Rectangle targetRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.BufferedGraphics Allocate(native int targetDC, valuetype System.Drawing.Rectangle targetRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Allocate(System.IntPtr,System.Drawing.Rectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.BufferedGraphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDC" Type="System.IntPtr" />
        <Parameter Name="targetRectangle" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="targetDC">
          <see cref="T:System.IntPtr" /> に新しいバッファーのピクセル形式に一致するデバイス コンテキストをします。</param>
        <param name="targetRectangle">A <see cref="T:System.Drawing.Rectangle" /> を作成するバッファーのサイズを示します。</param>
        <summary>指定したピクセル形式を使用して指定されたサイズのグラフィックス バッファーを作成 <see cref="T:System.Drawing.Graphics" />します。</summary>
        <returns>A <see cref="T:System.Drawing.BufferedGraphics" /> を使用して指定された大きさのバッファーに描画することです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> メソッドに値を超えるサイズの四角形の <xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A> プロパティ、一時的な <xref:System.Drawing.BufferedGraphicsContext> 、バッファーを割り当て、バッファーの一時的なコンテキストを提供するように作成します。 新しい <xref:System.Drawing.BufferedGraphicsContext> とは別、 <xref:System.Drawing.BufferedGraphicsContext> アプリケーションのドメインが破棄された自動的にときに、 <xref:System.Drawing.BufferedGraphics> によって返される、 <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> メソッドを破棄します。  
  
   
  
## 例  
 グラフィックス バッファーを使用して、作成するコード例を次に示します、 <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> メソッドです。 このコードは示されている例の一部、 <xref:System.Drawing.BufferedGraphics> クラスです。  
  
 [!code-cpp[BufferingExamples\#4](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#4)]
 [!code-csharp[BufferingExamples\#4](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#4)]
 [!code-vb[BufferingExamples\#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#4)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for access to unmanaged code. Related enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="T:System.Drawing.BufferedGraphics" />
        <altmember cref="T:System.IntPtr" />
        <altmember cref="T:System.Drawing.Rectangle" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Drawing.BufferedGraphicsContext" /> によって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Call <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> when you are finished using the <xref:System.Drawing.BufferedGraphicsContext>. The <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> method leaves the <xref:System.Drawing.BufferedGraphicsContext> in an unusable state. After calling <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A>, you must release all references to the <xref:System.Drawing.BufferedGraphicsContext> so the garbage collector can reclaim the memory that the <xref:System.Drawing.BufferedGraphicsContext> was occupying. For more information, see [Cleaning Up Unmanaged Resources](http://msdn.microsoft.com/ja-jp/a17b0066-71c2-4ba4-9822-8e19332fc213) and [Implementing a Dispose Method](http://msdn.microsoft.com/ja-jp/eb4e1af0-3b48-4fbc-ad4e-fc2f64138bf9).  
  
> [!NOTE]
>  Always call <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> before you release your last reference to the <xref:System.Drawing.BufferedGraphicsContext>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Object.Finalize%2A> method of the <xref:System.Drawing.BufferedGraphicsContext>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~BufferedGraphicsContext ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Finalize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>オブジェクトが、ガベージ コレクションによって収集される前に、リソースの解放とその他のクリーンアップ操作の実行を試みることができるようにします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Invalidate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>バッファーが割り当てられていて、まだ破棄されていない場合は、現在のグラフィックス バッファーを破棄します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 グラフィックス バッファーを使用している場合マークされます廃棄されるとすぐに、無料です。それ以外の場合、インスタンスは破棄されますすぐにします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumBuffer">
      <MemberSignature Language="C#" Value="public System.Drawing.Size MaximumBuffer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size MaximumBuffer" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.BufferedGraphicsContext.MaximumBuffer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>使用するバッファーの最大サイズを取得または設定します。</summary>
        <value>A <see cref="T:System.Drawing.Size" /> バッファーの大きさの最大サイズを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを取得またはメモリに保持するバッファーの最大サイズを設定できます。 大きいサイズのバッファーいずれかが、任意のサイズのバッファーを割り当てることができます、 <xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A> サイズ一時的に使用され、破棄するときに、 <xref:System.Drawing.BufferedGraphics> オブジェクトを解放します。  
  
   
  
## 例  
 次の例のバッファーの最大サイズを設定、 <xref:System.Drawing.BufferedGraphicsContext>です。 このコードは示されている例の一部、 <xref:System.Drawing.BufferedGraphics> クラスです。  
  
 [!code-cpp[BufferingExamples\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#2)]
 [!code-csharp[BufferingExamples\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#2)]
 [!code-vb[BufferingExamples\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">高さまたはサイズの幅は、0 以下です。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for allowing user access to all windows. Related enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Allocate">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>グラフィックス バッファーを作成します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>