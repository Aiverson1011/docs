<Type Name="Graphics" FullName="System.Drawing.Graphics">
  <TypeSignature Language="C#" Value="public sealed class Graphics : MarshalByRefObject, IDisposable, System.Drawing.IDeviceContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Graphics extends System.MarshalByRefObject implements class System.Drawing.IDeviceContext, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Graphics" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Drawing.IDeviceContext</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>GDI+ 描画サーフェイスをカプセル化します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Drawing.Graphics> クラス オブジェクトをディスプレイ デバイスに描画するためのメソッドを提供します。 A <xref:System.Drawing.Graphics> 特定のデバイス コンテキストに関連付けられています。  
  
 取得することができます、 <xref:System.Drawing.Graphics> オブジェクトを呼び出して、 <xref:System.Windows.Forms.Control.CreateGraphics%2A?displayProperty=fullName> メソッドから継承されるオブジェクトを <xref:System.Windows.Forms.Control?displayProperty=fullName>, 、またはコントロールを処理する <xref:System.Windows.Forms.Control.Paint?displayProperty=fullName> イベントとへのアクセス、 <xref:System.Windows.Forms.PaintEventArgs.Graphics%2A> のプロパティ、 <xref:System.Windows.Forms.PaintEventArgs?displayProperty=fullName> クラスです。 作成することも、 <xref:System.Drawing.Graphics> オブジェクトを使用してイメージから、 <xref:System.Drawing.Graphics.FromImage%2A> メソッドです。 作成の詳細については、 <xref:System.Drawing.Graphics> オブジェクトは、「 [How to: Create Graphics Objects for Drawing](http://msdn.microsoft.com/ja-jp/162861f9-f050-445e-8abb-b2c43a918b8b)します。  
  
 多くのさまざまな図形や線を描画を使用して、 <xref:System.Drawing.Graphics> オブジェクトです。 直線と図形を描画する方法の詳細については、固有の仕様を参照してください。 `Draw`*GraphicalElement* 線または図形の描画に使用する方法です。 これらのメソッドを含める <xref:System.Drawing.Graphics.DrawLine%2A>, 、<xref:System.Drawing.Graphics.DrawArc%2A>, 、<xref:System.Drawing.Graphics.DrawClosedCurve%2A>, 、<xref:System.Drawing.Graphics.DrawPolygon%2A>, 、および <xref:System.Drawing.Graphics.DrawRectangle%2A>です。 直線と図形を描画する方法の詳細については、次を参照してください。 [Using a Pen to Draw Lines and Shapes](http://msdn.microsoft.com/ja-jp/8a7542ab-3e9e-443f-8405-2d6053528e20) と [Using a Brush to Fill Shapes](http://msdn.microsoft.com/ja-jp/bf8f7fff-5a90-41e8-9051-494449fb2844)です。  
  
 使用して、イメージやアイコンを描画することも、 <xref:System.Drawing.Graphics.DrawImage%2A> と <xref:System.Drawing.Graphics.DrawIcon%2A> メソッド、それぞれします。 描画サーフェイスへの画面から色データのビット ブロック転送を実行する、 <xref:System.Drawing.Graphics> オブジェクトは、「 <xref:System.Drawing.Graphics.CopyFromScreen%2A>します。 イメージを描画する方法の詳細についての <xref:System.Drawing.Graphics> オブジェクトは、「 [Working with Images, Bitmaps, Icons, and Metafiles](http://msdn.microsoft.com/ja-jp/a626d701-bd99-4fd8-b92f-7b8f794e042b)します。  
  
 さらで使用される座標系を操作できる、 <xref:System.Drawing.Graphics> オブジェクトです。 座標系とそれを操作する方法の詳細については、次を参照してください。 [Coordinate Systems and Transformations](http://msdn.microsoft.com/ja-jp/9fef7451-bddf-4c68-9350-400d1f1f25a3)します。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するため、必要があります、 <xref:System.Windows.Forms.PaintEventArgs> オブジェクトです。<xref:System.Windows.Forms.PaintEventArgs> オブジェクトの名前は `e` のパラメーターであると、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   JPEG ファイルからイメージを作成します。 ファイルは SampImag.jpg という名前の例では、フォルダーにあります。  
  
-   イメージの左上隅を描画するポイントを作成します。  
  
-   使用して、スケールなしのイメージを画面に描画、 <xref:System.Drawing.Graphics> オブジェクトです。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#40](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#40)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#40](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#40)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#40](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#40)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddMetafileComment">
      <MemberSignature Language="C#" Value="public void AddMetafileComment (byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddMetafileComment(unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.AddMetafileComment(System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="data">コメントが含まれているバイトの配列。</param>
        <summary>現在の <see cref="T:System.Drawing.Imaging.Metafile" /> にコメントを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは無効の場合にのみこの <xref:System.Drawing.Graphics> に関連付けられている、 <xref:System.Drawing.Imaging.Metafile>です。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, のパラメーターは、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーだけでなく `thisForm`, 、 <xref:System.Windows.Forms.Form> の例です。 コードは、次のアクションを実行します。  
  
-   一時的な作成 <xref:System.Drawing.Graphics> メタファイルを取得するため、作成するため、 `hdc`, 、そのデバイス コンテキストを識別するハンドル。  
  
-   使用して新しいメタファイルを作成、 `hdc`です。  
  
-   作成、 <xref:System.Drawing.Graphics> からメタファイルを表示するため、 <xref:System.Drawing.Imaging.Metafile>です。  
  
-   メタファイルに四角形を描画します。  
  
-   メタファイルにコメントを追加します。  
  
-   破棄することも、 <xref:System.Drawing.Graphics> のメタファイル メタファイルを閉じます。  
  
-   メタファイルを破棄します。  
  
-   一時領域を解放 `hdc`します。  
  
-   破棄、一時的な <xref:System.Drawing.Graphics>です。  
  
-   以前に作成したファイルから 2 番目のメタファイルを作成します。  
  
-   メタファイルを画面に描画します。  
  
-   メタファイルを破棄します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#1)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginContainer">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsContainer BeginContainer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsContainer BeginContainer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.BeginContainer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsContainer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の現在の状態でグラフィックス コンテナーを保存し、新しいグラフィックス コンテナーを開いて使用します。</summary>
        <returns>このメソッドは、メソッドが呼び出された時点での <see cref="T:System.Drawing.Graphics" /> の状態を表す <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して、 <xref:System.Drawing.Graphics.EndContainer%2A> 入れ子になったグラフィックス コンテナーを作成します。 グラフィックス コンテナーは、変換、クリッピング領域、およびレンダリング プロパティなどのグラフィックスの状態を保持します。  
  
 呼び出すと、 <xref:System.Drawing.Graphics.BeginContainer%2A> のメソッド、 <xref:System.Drawing.Graphics>, の状態を保持する情報ブロック、 <xref:System.Drawing.Graphics> は、スタックに配置します。<xref:System.Drawing.Graphics.BeginContainer%2A> メソッドが返される、 <xref:System.Drawing.Drawing2D.GraphicsContainer> 情報ブロックを識別します。 識別するオブジェクトを渡すと、 <xref:System.Drawing.Graphics.EndContainer%2A> メソッド情報ブロックは、スタックから削除され、復元に使用、 <xref:System.Drawing.Graphics> の時点の状態を <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドの呼び出しです。  
  
 コンテナーを入れ子にすることができます。つまり、呼び出すことができます、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドを複数回呼び出す前に、 <xref:System.Drawing.Graphics.EndContainer%2A> メソッドです。 呼び出すたびに、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッド情報ブロックは、スタックに配置し、表示されたら、 <xref:System.Drawing.Drawing2D.GraphicsContainer> 情報ブロックです。 これらのオブジェクトを渡すときに、 <xref:System.Drawing.Graphics.EndContainer%2A> メソッド、 <xref:System.Drawing.Graphics> の時点の状態に返される、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドの呼び出しの <xref:System.Drawing.Drawing2D.GraphicsContainer>です。 その情報ブロックが、スタックに配置 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドの呼び出しは、スタックから削除され、その後、すべての情報ブロックがそのスタックに配置 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドの呼び出しが削除されます。  
  
 呼び出し、 <xref:System.Drawing.Graphics.Save%2A> メソッドの場所情報ブロックへの呼び出しとして同じスタック上、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドです。 同様、 <xref:System.Drawing.Graphics.EndContainer%2A> メソッドの呼び出しとペアになり、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッド呼び出し、 <xref:System.Drawing.Graphics.Restore%2A> と組み合わされて、メソッドの呼び出し、 <xref:System.Drawing.Graphics.Save%2A> メソッドの呼び出しです。  
  
 呼び出すと、 <xref:System.Drawing.Graphics.EndContainer%2A> メソッドでは、すべての情報ブロックは、スタックに配置 \(によって、 <xref:System.Drawing.Graphics.Save%2A> メソッドまたは、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッド\) に対応する呼び出しの後、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドは、スタックから削除されます。 同様に、呼び出し、 <xref:System.Drawing.Graphics.Restore%2A> メソッドでは、すべての情報ブロックは、スタックに配置 \(によって、 <xref:System.Drawing.Graphics.Save%2A> メソッドまたは、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッド\) に対応する呼び出しの後、 <xref:System.Drawing.Graphics.Save%2A> メソッドは、スタックから削除されます。  
  
 グラフィックスの状態を確立して、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドには、既定のグラフィックの状態の表示品質が含まれています。 既存のメソッドが呼び出されたときにレンダリング品質の状態の変更は、既定値にリセットされます。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   新しいグラフィックス コンテナーを開き、古いコンテナーを保存します。  
  
-   コンテナー内のワールド座標に変換します。  
  
-   赤い長方形を入力します \(の座標を変換、\) 新しいコンテナーです。  
  
-   新しいコンテナーを閉じ、保存されているコンテナーを復元します。  
  
-   保存されているコンテナーの \(無変換座標\) 緑の四角形を格納します。  
  
 同じサイズの赤い四角形を上に重ねられます緑の四角形になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#2)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginContainer">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsContainer BeginContainer (System.Drawing.Rectangle dstrect, System.Drawing.Rectangle srcrect, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsContainer BeginContainer(valuetype System.Drawing.Rectangle dstrect, valuetype System.Drawing.Rectangle srcrect, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.BeginContainer(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dstrect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcrect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="dstrect">
          <c>srcrect</c> パラメーターと共にコンテナーのスケール変換を指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="srcrect">
          <c>dstrect</c> パラメーターと共にコンテナーのスケール変換を指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="unit">コンテナーの長さの単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の現在の状態でグラフィックス コンテナーを保存し、指定したスケール変換を行った新しいグラフィックス コンテナーを開いて使用します。</summary>
        <returns>このメソッドは、メソッドが呼び出された時点での <see cref="T:System.Drawing.Graphics" /> の状態を表す <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して、 <xref:System.Drawing.Graphics.EndContainer%2A> 入れ子になったグラフィックス コンテナーを作成します。 グラフィックス コンテナーは、変換、クリッピング領域、およびレンダリング プロパティなどのグラフィックスの状態を保持します。  
  
 呼び出すと、 <xref:System.Drawing.Graphics.BeginContainer%2A> のメソッド、 <xref:System.Drawing.Graphics>, の状態を保持する情報ブロック、 <xref:System.Drawing.Graphics> は、スタックに配置します。<xref:System.Drawing.Graphics.BeginContainer%2A> メソッドが返される、 <xref:System.Drawing.Drawing2D.GraphicsContainer> 情報ブロックを識別します。 識別するオブジェクトを渡すと、 <xref:System.Drawing.Graphics.EndContainer%2A> メソッド情報ブロックは、スタックから削除され、復元に使用、 <xref:System.Drawing.Graphics> の時点の状態を <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドの呼び出しです。  
  
 コンテナーを入れ子にすることができます。つまり、呼び出すことができます、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドを複数回呼び出す前に、 <xref:System.Drawing.Graphics.EndContainer%2A> メソッドです。 呼び出すたびに、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッド情報ブロックは、スタックに配置し、表示されたら、 <xref:System.Drawing.Drawing2D.GraphicsContainer> 情報ブロックです。 これらのオブジェクトを渡すときに、 <xref:System.Drawing.Graphics.EndContainer%2A> メソッド、 <xref:System.Drawing.Graphics> の時点の状態に返される、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドの呼び出しの <xref:System.Drawing.Drawing2D.GraphicsContainer>です。 その情報ブロックが、スタックに配置 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドの呼び出しは、スタックから削除され、その後、すべての情報ブロックがそのスタックに配置 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドの呼び出しが削除されます。  
  
 呼び出し、 <xref:System.Drawing.Graphics.Save%2A> メソッドの場所情報ブロックへの呼び出しとして同じスタック上、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドです。 同様、 <xref:System.Drawing.Graphics.EndContainer%2A> メソッドの呼び出しとペアになり、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッド呼び出し、 <xref:System.Drawing.Graphics.Restore%2A> と組み合わされて、メソッドの呼び出し、 <xref:System.Drawing.Graphics.Save%2A> メソッドの呼び出しです。  
  
 呼び出すと、 <xref:System.Drawing.Graphics.EndContainer%2A> メソッドでは、すべての情報ブロックは、スタックに配置 \(によって、 <xref:System.Drawing.Graphics.Save%2A> メソッドまたは、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッド\) に対応する呼び出しの後、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドは、スタックから削除されます。 同様に、呼び出し、 <xref:System.Drawing.Graphics.Restore%2A> メソッドでは、すべての情報ブロックは、スタックに配置 \(によって、 <xref:System.Drawing.Graphics.Save%2A> メソッドまたは、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッド\) に対応する呼び出しの後、 <xref:System.Drawing.Graphics.Save%2A> メソッドは、スタックから削除されます。  
  
 このメソッドで新しいグラフィックス コンテナーのスケール変換を指定する、 `dstrect` と `srcrect` パラメーター。 スケールは、変換に適用すると `srcrect`, 、結果、 `dstrect`です。  
  
 グラフィックスの状態を確立して、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドには、既定のグラフィックの状態の表示品質が含まれています。 既存のメソッドが呼び出されたときにレンダリング品質の状態の変更は、既定値にリセットされます。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   新しいコンテナーのスケール変換を指定する 2 つの四角形を作成します。  
  
-   新しいグラフィックス コンテナーを開き、古いコンテナーを保存します。  
  
-   赤い四角形を入力します \(スケーリングされた座標の\) 新しいコンテナーです。  
  
-   新しいコンテナーを閉じ、保存されているコンテナーを復元します。  
  
-   保存されているコンテナーの \(スケールなしの座標\) 緑の四角形を格納します。  
  
 小さな赤い長方形上に重ねられます緑の四角形になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#3)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginContainer">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsContainer BeginContainer (System.Drawing.RectangleF dstrect, System.Drawing.RectangleF srcrect, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsContainer BeginContainer(valuetype System.Drawing.RectangleF dstrect, valuetype System.Drawing.RectangleF srcrect, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.BeginContainer(System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dstrect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcrect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="dstrect">
          <c>srcrect</c> パラメーターと共に新しいグラフィックス コンテナーのスケール変換を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="srcrect">
          <c>dstrect</c> パラメーターと共に新しいグラフィックス コンテナーのスケール変換を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="unit">コンテナーの長さの単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の現在の状態でグラフィックス コンテナーを保存し、指定したスケール変換を行った新しいグラフィックス コンテナーを開いて使用します。</summary>
        <returns>このメソッドは、メソッドが呼び出された時点での <see cref="T:System.Drawing.Graphics" /> の状態を表す <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して、 <xref:System.Drawing.Graphics.EndContainer%2A> 入れ子になったグラフィックス コンテナーを作成します。 グラフィックス コンテナーは、変換、クリッピング領域、およびレンダリング プロパティなどのグラフィックスの状態を保持します。  
  
 呼び出すと、 <xref:System.Drawing.Graphics.BeginContainer%2A> のメソッド、 <xref:System.Drawing.Graphics>, の状態を保持する情報ブロック、 <xref:System.Drawing.Graphics> は、スタックに配置します。<xref:System.Drawing.Graphics.BeginContainer%2A> メソッドが返される、 <xref:System.Drawing.Drawing2D.GraphicsContainer> 情報ブロックを識別します。 識別するオブジェクトを渡すと、 <xref:System.Drawing.Graphics.EndContainer%2A> メソッド情報ブロックは、スタックから削除され、復元に使用、 <xref:System.Drawing.Graphics> の時点の状態を <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドの呼び出しです。  
  
 コンテナーを入れ子にすることができます。つまり、呼び出すことができます、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドを複数回呼び出す前に、 <xref:System.Drawing.Graphics.EndContainer%2A> メソッドです。 呼び出すたびに、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッド情報ブロックは、スタックに配置し、表示されたら、 <xref:System.Drawing.Drawing2D.GraphicsContainer> 情報ブロックです。 これらのオブジェクトを渡すときに、 <xref:System.Drawing.Graphics.EndContainer%2A> メソッド、 <xref:System.Drawing.Graphics> の時点の状態に返される、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドの呼び出しの <xref:System.Drawing.Drawing2D.GraphicsContainer>です。 その情報ブロックが、スタックに配置 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドの呼び出しは、スタックから削除され、その後、すべての情報ブロックがそのスタックに配置 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドの呼び出しが削除されます。  
  
 呼び出し、 <xref:System.Drawing.Graphics.Save%2A> メソッドの場所情報ブロックへの呼び出しとして同じスタック上、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドです。 同様、 <xref:System.Drawing.Graphics.EndContainer%2A> メソッドの呼び出しとペアになり、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッド呼び出し、 <xref:System.Drawing.Graphics.Restore%2A> と組み合わされて、メソッドの呼び出し、 <xref:System.Drawing.Graphics.Save%2A> メソッドの呼び出しです。  
  
 呼び出すと、 <xref:System.Drawing.Graphics.EndContainer%2A> メソッドでは、すべての情報ブロックは、スタックに配置 \(によって、 `Save` メソッドまたは、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッド\) に対応する呼び出しの後、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドは、スタックから削除されます。 同様に、呼び出し、 <xref:System.Drawing.Graphics.Restore%2A> メソッドでは、すべての情報ブロックは、スタックに配置 \(によって、 <xref:System.Drawing.Graphics.Save%2A> メソッドまたは、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッド\) に対応する呼び出しの後、 <xref:System.Drawing.Graphics.Save%2A> メソッドは、スタックから削除されます。  
  
 このメソッドで新しいグラフィックス コンテナーのスケール変換を指定する、 `dstrect` と `srcrect` パラメーター。 スケールは、変換に適用すると `srcrect`, 、結果、 `dstrect`です。  
  
 グラフィックスの状態を確立して、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドには、既定のグラフィックの状態の表示品質が含まれています。 既存のメソッドが呼び出されたときにレンダリング品質の状態の変更は、既定値にリセットされます。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   新しいコンテナーのスケール変換を指定する 2 つの四角形を作成します。  
  
-   新しいグラフィックス コンテナーを開き、古いコンテナーを保存します。  
  
-   赤い四角形を入力します \(スケーリングされた座標の\) 新しいコンテナーです。  
  
-   新しいコンテナーを閉じ、保存されているコンテナーを復元します。  
  
-   保存されているコンテナーの \(スケールなしの座標\) 緑の四角形を格納します。  
  
 小さな赤い長方形上に重ねられます緑の四角形になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear (System.Drawing.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear(valuetype System.Drawing.Color color) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Clear(System.Drawing.Color)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="color">描画サーフェイスの背景色を表す <see cref="T:System.Drawing.Color" /> 構造体。</param>
        <summary>描画サーフェイス全体を消去し、指定した背景色で塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Drawing.Graphics.Clear%2A> メソッドは、graphics オブジェクトの状態をクリアし、graphics オブジェクトを更新できないときに呼び出されません。 などの場合、 <xref:System.Drawing.Graphics.Clear%2A> ターミナル サーバー セッションをセキュリティで保護されたデスクトップにメソッドが呼び出される、 <xref:System.Runtime.InteropServices.ExternalException> が行われ、終了、 <xref:System.Drawing.Graphics> 不整合な状態でオブジェクトです。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 描画サーフェイスをクリアするコード、 <xref:System.Drawing.Graphics> し、システム定義の青緑色に背景色を設定します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#5)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clip">
      <MemberSignature Language="C#" Value="public System.Drawing.Region Clip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Region Clip" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.Clip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Region</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の描画領域を限定する <see cref="T:System.Drawing.Region" /> を取得または設定します。</summary>
        <value>この <see cref="T:System.Drawing.Graphics" /> のうち、現在描画に使用できる部分を限定する <see cref="T:System.Drawing.Region" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 変更、 <xref:System.Drawing.Region> によって返されるオブジェクト、 <xref:System.Drawing.Graphics.Clip%2A> プロパティでは、後続の描画には影響しません、 <xref:System.Drawing.Graphics> オブジェクトです。 クリップ領域を変更するには、置換、 <xref:System.Drawing.Graphics.Clip%2A> プロパティの値を新しい <xref:System.Drawing.Region> オブジェクトです。 クリッピング領域が有限かどうかを確認するのには、取得、 <xref:System.Drawing.Graphics.Clip%2A> プロパティと呼び出しの <xref:System.Drawing.Region.IsInfinite%2A> メソッドです。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.Drawing.Graphics.Clip%2A> プロパティです。 この例は、Windows フォームで使用される設計されています。 フォームと呼び出しにコードを貼り付けます、 `SetAndFillClip` メソッドは、フォームの処理と <xref:System.Windows.Forms.Control.Paint> イベントを渡す `e` として <xref:System.Windows.Forms.PaintEventArgs>します。  
  
 [!code-cpp[System.Drawing.GraphicsProperties\#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.GraphicsProperties\#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#4)]
 [!code-vb[System.Drawing.GraphicsProperties\#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF ClipBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.RectangleF ClipBounds" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.ClipBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> オブジェクトのクリッピング領域に外接する <see cref="T:System.Drawing.RectangleF" /> 構造体を取得します。</summary>
        <value>この <see cref="T:System.Drawing.Graphics" /> のクリッピング領域に外接する四角形を表す <see cref="T:System.Drawing.RectangleF" /> 構造体。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The unit for resulting rectangle is designated by the <xref:System.Drawing.Graphics.PageUnit%2A> property. The default unit is pixels. A <xref:System.Drawing.Graphics> is typically associated with a control and the origin of the rectangle will be relative to the client area of that control.  
  
 If the clipping region is infinite, the <xref:System.Drawing.Graphics.ClipBounds%2A> property returns a meaningless large rectangle. To determine whether the clipping region is infinite, retrieve the <xref:System.Drawing.Graphics.Clip%2A> property and call its <xref:System.Drawing.Region.IsInfinite%2A> method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompositingMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.CompositingMode CompositingMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.CompositingMode CompositingMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.CompositingMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.CompositingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> への複合イメージの描画方法を指定する値を取得します。</summary>
        <value>このプロパティは、<see cref="T:System.Drawing.Drawing2D.CompositingMode" /> 列挙体のメンバーを指定します。 既定値は、<see cref="F:System.Drawing.Drawing2D.CompositingMode.SourceOver" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The compositing mode determines whether pixels from a source image overwrite or are combined with background pixels.  
  
> [!NOTE]
>  You should not use a <xref:System.Drawing.Graphics.CompositingMode%2A> property value of <xref:System.Drawing.Drawing2D.CompositingMode.SourceCopy> when the <xref:System.Drawing.Graphics.TextRenderingHint%2A> property is set to <xref:System.Drawing.Text.TextRenderingHint.ClearTypeGridFit>. An exception could occur or the image may not render correctly.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompositingQuality">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.CompositingQuality CompositingQuality { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.CompositingQuality CompositingQuality" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.CompositingQuality" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.CompositingQuality</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> に描画する複合イメージのレンダリング品質を取得または設定します。</summary>
        <value>このプロパティは、<see cref="T:System.Drawing.Drawing2D.CompositingQuality" /> 列挙体のメンバーを指定します。 既定値は、<see cref="F:System.Drawing.Drawing2D.CompositingQuality.Default" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 複合品質では、複合イメージのレンダリング品質レベルを決定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (System.Drawing.Point upperLeftSource, System.Drawing.Point upperLeftDestination, System.Drawing.Size blockRegionSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(valuetype System.Drawing.Point upperLeftSource, valuetype System.Drawing.Point upperLeftDestination, valuetype System.Drawing.Size blockRegionSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="upperLeftSource" Type="System.Drawing.Point" />
        <Parameter Name="upperLeftDestination" Type="System.Drawing.Point" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="upperLeftSource">転送元の四角形の左上隅の点。</param>
        <param name="upperLeftDestination">転送先の四角形の左上隅の点。</param>
        <param name="blockRegionSize">転送される領域のサイズ。</param>
        <summary>画面から <see cref="T:System.Drawing.Graphics" /> の描画サーフェイスへの、ピクセルの四角形に対応する色データのビット ブロック転送を実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> メソッドは、別の上に 1 つのイメージを階層化に役立ちます。 送信元と送信先の色をブレンドする方法を指定するには、いずれかを使用、 <xref:System.Drawing.Graphics.CopyFromScreen%2A> を受け取るメソッド、 <xref:System.Drawing.CopyPixelOperation> パラメーター。  
  
   
  
## 例  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> メソッドの使用方法を次の例に示します。 この例を実行するには、Windows フォームに貼り付けます。 フォームの処理 <xref:System.Windows.Forms.Control.Paint> イベントと呼び出し、 `CopyPixels1` メソッドから、 <xref:System.Windows.Forms.Control.Paint> イベント処理メソッドを渡す `e` として <xref:System.Windows.Forms.PaintEventArgs>します。  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets\#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#4)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets\#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">操作に失敗しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for access to all windows. Related enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (System.Drawing.Point upperLeftSource, System.Drawing.Point upperLeftDestination, System.Drawing.Size blockRegionSize, System.Drawing.CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(valuetype System.Drawing.Point upperLeftSource, valuetype System.Drawing.Point upperLeftDestination, valuetype System.Drawing.Size blockRegionSize, valuetype System.Drawing.CopyPixelOperation copyPixelOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size,System.Drawing.CopyPixelOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="upperLeftSource" Type="System.Drawing.Point" />
        <Parameter Name="upperLeftDestination" Type="System.Drawing.Point" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" />
        <Parameter Name="copyPixelOperation" Type="System.Drawing.CopyPixelOperation" />
      </Parameters>
      <Docs>
        <param name="upperLeftSource">転送元の四角形の左上隅の点。</param>
        <param name="upperLeftDestination">転送先の四角形の左上隅の点。</param>
        <param name="blockRegionSize">転送される領域のサイズ。</param>
        <param name="copyPixelOperation">
          <see cref="T:System.Drawing.CopyPixelOperation" /> 値のいずれか。</param>
        <summary>画面から <see cref="T:System.Drawing.Graphics" /> の描画サーフェイスへの、ピクセルの四角形に対応する色データのビット ブロック転送を実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> メソッドは、別の上に 1 つのイメージを階層化に役立ちます。`copyPixelOperation` パラメーターを使用する場合を指定してソース カラーをコピー先領域の色とブレンドする方法です。  
  
   
  
## 例  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> メソッドの使用方法を次の例に示します。 この例を実行するには、Windows フォームに貼り付けます。 フォームの処理 <xref:System.Windows.Forms.Control.Paint> イベントと呼び出し、 `CopyPixels2` メソッドから、 <xref:System.Windows.Forms.Control.Paint> イベント処理メソッドを渡す `e` として <xref:System.Windows.Forms.PaintEventArgs>します。  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets\#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#5)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets\#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="copyPixelOperation" /> メンバーではない <see cref="T:System.Drawing.CopyPixelOperation" />します。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">操作に失敗しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for access to all windows. Related enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (int sourceX, int sourceY, int destinationX, int destinationY, System.Drawing.Size blockRegionSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(int32 sourceX, int32 sourceY, int32 destinationX, int32 destinationY, valuetype System.Drawing.Size blockRegionSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceX" Type="System.Int32" />
        <Parameter Name="sourceY" Type="System.Int32" />
        <Parameter Name="destinationX" Type="System.Int32" />
        <Parameter Name="destinationY" Type="System.Int32" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="sourceX">転送元の四角形の左上隅の点の x 座標。</param>
        <param name="sourceY">転送元の四角形の左上隅の点の y 座標。</param>
        <param name="destinationX">転送先の四角形の左上隅の点の x 座標。</param>
        <param name="destinationY">転送先の四角形の左上隅の点の y 座標。</param>
        <param name="blockRegionSize">転送される領域のサイズ。</param>
        <summary>画面から <see cref="T:System.Drawing.Graphics" /> の描画サーフェイスへの、ピクセルの四角形に対応する色データのビット ブロック転送を実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> メソッドは、別の上に 1 つのイメージを階層化に役立ちます。 送信元と送信先の色をブレンドする方法を指定するには、いずれかを使用、 <xref:System.Drawing.Graphics.CopyFromScreen%2A> を受け取るメソッド、 <xref:System.Drawing.CopyPixelOperation> パラメーター。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Drawing.Graphics.CopyFromScreen%2A> の現在のフォームのコピーを印刷します。  
  
 [!code-csharp[System.Drawing.Graphics.CopyFromScreen\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Graphics.CopyFromScreen/CS/Form1.cs#1)]
 [!code-vb[System.Drawing.Graphics.CopyFromScreen\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Graphics.CopyFromScreen/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">操作に失敗しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for access to all windows. Related enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (int sourceX, int sourceY, int destinationX, int destinationY, System.Drawing.Size blockRegionSize, System.Drawing.CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(int32 sourceX, int32 sourceY, int32 destinationX, int32 destinationY, valuetype System.Drawing.Size blockRegionSize, valuetype System.Drawing.CopyPixelOperation copyPixelOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size,System.Drawing.CopyPixelOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceX" Type="System.Int32" />
        <Parameter Name="sourceY" Type="System.Int32" />
        <Parameter Name="destinationX" Type="System.Int32" />
        <Parameter Name="destinationY" Type="System.Int32" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" />
        <Parameter Name="copyPixelOperation" Type="System.Drawing.CopyPixelOperation" />
      </Parameters>
      <Docs>
        <param name="sourceX">転送元の四角形の左上隅の点の x 座標。</param>
        <param name="sourceY">転送元の四角形の左上隅の点の y 座標。</param>
        <param name="destinationX">転送先の四角形の左上隅の点の x 座標。</param>
        <param name="destinationY">転送先の四角形の左上隅の点の y 座標。</param>
        <param name="blockRegionSize">転送される領域のサイズ。</param>
        <param name="copyPixelOperation">
          <see cref="T:System.Drawing.CopyPixelOperation" /> 値のいずれか。</param>
        <summary>画面から <see cref="T:System.Drawing.Graphics" /> の描画サーフェイスへの、ピクセルの四角形に対応する色データのビット ブロック転送を実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> メソッドは、別の上に 1 つのイメージを階層化に役立ちます。`copyPixelOperation` パラメーターを使用する場合を指定してソース カラーをコピー先領域の色とブレンドする方法です。  
  
   
  
## 例  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> メソッドの使用方法を次の例に示します。 この例を実行するには、Windows フォームに貼り付けます。 フォームの処理 <xref:System.Windows.Forms.Control.Paint> イベントと呼び出し、 `CopyPixels4` メソッドから、 <xref:System.Windows.Forms.Control.Paint> イベント処理メソッドを渡す `e` として <xref:System.Windows.Forms.PaintEventArgs>します。  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets\#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#7)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets\#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="copyPixelOperation" /> メンバーではない <see cref="T:System.Drawing.CopyPixelOperation" />します。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">操作に失敗しました。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">for access to all windows. Related enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> によって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Calling <xref:System.Drawing.Graphics.Dispose%2A> allows the resources used by this <xref:System.Drawing.Graphics> to be reallocated for other purposes.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates an <xref:System.Drawing.Image> from a graphics file SampImag.jpg in the example directory.  
  
-   Creates a <xref:System.Drawing.Graphics> from the <xref:System.Drawing.Image>.  
  
-   Alters the image by filling a rectangle within it.  
  
-   Draws the <xref:System.Drawing.Image> to the screen.  
  
-   Releases the created <xref:System.Drawing.Graphics>.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#6)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DpiX">
      <MemberSignature Language="C#" Value="public float DpiX { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 DpiX" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.DpiX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の水平方向の解像度を取得します。</summary>
        <value>この <see cref="T:System.Drawing.Graphics" /> でサポートされる水平方向の解像度の値 \(dpi\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about creating high\-resolution applications, see  
  
 [High DPI](http://go.microsoft.com/fwlink/?LinkId=159804).  
  
   
  
## 例  
 The following method shows the use of the <xref:System.Drawing.Graphics.DpiX%2A> and <xref:System.Drawing.Graphics.DpiY%2A> properties. This example is designed for use with a Windows Form. To run this example, paste it into a form that contains a <xref:System.Windows.Forms.ListBox> named listBox1 and call this method from the form's constructor.  
  
 [!code-cpp[System.Drawing.MiscExamples\#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.MiscExamples\#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.MiscExamples\#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DpiY">
      <MemberSignature Language="C#" Value="public float DpiY { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 DpiY" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.DpiY" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の垂直方向の解像度を取得します。</summary>
        <value>この <see cref="T:System.Drawing.Graphics" /> でサポートされる垂直方向の解像度の値 \(dpi\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about creating high\-resolution applications, see  
  
 [High DPI](http://go.microsoft.com/fwlink/?LinkId=159804).  
  
   
  
## 例  
 The following method shows the use of the <xref:System.Drawing.Graphics.DpiX%2A> and <xref:System.Drawing.Graphics.DpiY%2A> properties. This example is designed for use with a Windows Form. To run this example, paste it into a form that contains a <xref:System.Windows.Forms.ListBox> named listBox1 and call this method from the form's constructor.  
  
 [!code-cpp[System.Drawing.MiscExamples\#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.MiscExamples\#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.MiscExamples\#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">円弧の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="rect">楕円の境界を定義する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="startAngle">x 軸から円弧の開始点まで、時計回りに測定した角度 \(度単位\)。</param>
        <param name="sweepAngle">
          <c>startAngle</c> パラメーターから円弧の終了点まで、時計回りに測定した角度 \(度単位\)。</param>
        <summary>
          <see cref="T:System.Drawing.Rectangle" /> 構造体によって指定される楕円の一部を表す円弧を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method draws an arc that is a portion of the perimeter of an ellipse. The ellipse is defined by the boundaries of a rectangle. The arc is the portion of the perimeter of the ellipse between the **parameterReference tag is not supported!!!!**  
 parameter and the **parameterReference tag is not supported!!!!**  
 \+ **parameterReference tag is not supported!!!!**  
 parameters.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a black pen.  
  
-   Creates a rectangle to bound an ellipse.  
  
-   Defines the start \(45 degrees\) and sweep \(270 degrees\) angles.  
  
-   Draws the elliptical arc to the screen.  
  
 The result is a partial ellipse missing a segment between \+ and \- 45 degrees of the x axis.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#7)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, System.Drawing.RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">円弧の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="rect">楕円の境界を定義する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="startAngle">x 軸から円弧の開始点まで、時計回りに測定した角度 \(度単位\)。</param>
        <param name="sweepAngle">
          <c>startAngle</c> パラメーターから円弧の終了点まで、時計回りに測定した角度 \(度単位\)。</param>
        <summary>
          <see cref="T:System.Drawing.RectangleF" /> 構造体によって指定される楕円の一部を表す円弧を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method draws an arc that is a portion of the perimeter of an ellipse. The ellipse is defined by the boundaries of a rectangle. The arc is the portion of the perimeter of the ellipse between the **parameterReference tag is not supported!!!!**  
 parameter and the **parameterReference tag is not supported!!!!**  
 \+ **parameterReference tag is not supported!!!!**  
 parameters.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a black pen.  
  
-   Creates a rectangle to bound an ellipse.  
  
-   Defines the start \(45 degrees\) and sweep \(270 degrees\) angles.  
  
-   Draws the elliptical arc to the screen.  
  
 The result is a partial ellipse missing a segment between \+ and \- 45 degrees of the x axis.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#8)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height, int32 startAngle, int32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Int32" />
        <Parameter Name="sweepAngle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">円弧の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="x">楕円を定義する四角形の左上隅の x 座標。</param>
        <param name="y">楕円を定義する四角形の左上隅の y 座標。</param>
        <param name="width">楕円を定義する四角形の幅。</param>
        <param name="height">楕円を定義する四角形の高さ。</param>
        <param name="startAngle">x 軸から円弧の開始点まで、時計回りに測定した角度 \(度単位\)。</param>
        <param name="sweepAngle">
          <c>startAngle</c> パラメーターから円弧の終了点まで、時計回りに測定した角度 \(度単位\)。</param>
        <summary>座標ペア、幅、および高さで指定された楕円の一部を表す円弧を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、楕円の境界の一部である円弧を描画します。 楕円は、四角形の境界によって定義されます。 弧は、楕円の境界の部分であり、 `startAngle` パラメーターおよび `startAngle` \+ `sweepAngle` パラメーター。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   黒のペンを作成します。  
  
-   楕円をバインドする四角形のサイズと位置を作成します。  
  
-   開始 \(45 度\) と \(270 °\) 掃引角度を定義します。  
  
-   画面には、楕円の円弧を描画します。  
  
 結果が不完全な楕円の間でのセグメントがない \+ と \- 45 度の x 軸です。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#9](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#9)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#9)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rects" /> 長さ 0 の配列です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">円弧の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="x">楕円を定義する四角形の左上隅の x 座標。</param>
        <param name="y">楕円を定義する四角形の左上隅の y 座標。</param>
        <param name="width">楕円を定義する四角形の幅。</param>
        <param name="height">楕円を定義する四角形の高さ。</param>
        <param name="startAngle">x 軸から円弧の開始点まで、時計回りに測定した角度 \(度単位\)。</param>
        <param name="sweepAngle">
          <c>startAngle</c> パラメーターから円弧の終了点まで、時計回りに測定した角度 \(度単位\)。</param>
        <summary>座標ペア、幅、および高さで指定された楕円の一部を表す円弧を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method draws an arc that is a portion of the perimeter of an ellipse. The ellipse is defined by the boundaries of a rectangle. The arc is the portion of the perimeter of the ellipse between the **parameterReference tag is not supported!!!!**  
 parameter and the **parameterReference tag is not supported!!!!**  
 \+ **parameterReference tag is not supported!!!!**  
 parameters.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a black pen.  
  
-   Creates the position and size of a rectangle to bound an ellipse.  
  
-   Defines the start \(45 degrees\) and sweep \(270 degrees\) angles.  
  
-   Draws the elliptical arc to the screen.  
  
 The result is a partial ellipse missing a segment between \+ and \- 45 degrees of the x axis.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#10](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#10)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#10)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawBezier">
      <MemberSignature Language="C#" Value="public void DrawBezier (System.Drawing.Pen pen, System.Drawing.Point pt1, System.Drawing.Point pt2, System.Drawing.Point pt3, System.Drawing.Point pt4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBezier(class System.Drawing.Pen pen, valuetype System.Drawing.Point pt1, valuetype System.Drawing.Point pt2, valuetype System.Drawing.Point pt3, valuetype System.Drawing.Point pt4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.Point" />
        <Parameter Name="pt2" Type="System.Drawing.Point" />
        <Parameter Name="pt3" Type="System.Drawing.Point" />
        <Parameter Name="pt4" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pen">曲線の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" /> 構造体。</param>
        <param name="pt1">曲線の開始点を表す <see cref="T:System.Drawing.Point" /> 構造体。</param>
        <param name="pt2">曲線の最初の制御点を表す <see cref="T:System.Drawing.Point" /> 構造体。</param>
        <param name="pt3">曲線の 2 番目の制御点を表す <see cref="T:System.Drawing.Point" /> 構造体。</param>
        <param name="pt4">曲線の終了点を表す <see cref="T:System.Drawing.Point" /> 構造体。</param>
        <summary>4 つの <see cref="T:System.Drawing.Point" /> 構造体で定義されるベジエ スプラインを描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The Bézier curve is drawn from the first point to the fourth point. The second and third points are control points that determine the shape of the curve.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a black pen.  
  
-   Creates the start, end, and two control points for the curve.  
  
-   Draws the Bézier curve to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#11](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#11)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#11)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawBezier">
      <MemberSignature Language="C#" Value="public void DrawBezier (System.Drawing.Pen pen, System.Drawing.PointF pt1, System.Drawing.PointF pt2, System.Drawing.PointF pt3, System.Drawing.PointF pt4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBezier(class System.Drawing.Pen pen, valuetype System.Drawing.PointF pt1, valuetype System.Drawing.PointF pt2, valuetype System.Drawing.PointF pt3, valuetype System.Drawing.PointF pt4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.PointF" />
        <Parameter Name="pt2" Type="System.Drawing.PointF" />
        <Parameter Name="pt3" Type="System.Drawing.PointF" />
        <Parameter Name="pt4" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="pen">曲線の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="pt1">曲線の開始点を表す <see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <param name="pt2">曲線の最初の制御点を表す <see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <param name="pt3">曲線の 2 番目の制御点を表す <see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <param name="pt4">曲線の終了点を表す <see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <summary>4 つの <see cref="T:System.Drawing.PointF" /> 構造体で定義されるベジエ スプラインを描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The Bézier spline is drawn from the first point to the fourth point. The second and third points are control points that determine the shape of the curve.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a black pen.  
  
-   Creates the start, end, and two control points for the curve.  
  
-   Draws the Bézier curve to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#12](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#12)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#12)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawBezier">
      <MemberSignature Language="C#" Value="public void DrawBezier (System.Drawing.Pen pen, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBezier(class System.Drawing.Pen pen, float32 x1, float32 y1, float32 x2, float32 y2, float32 x3, float32 y3, float32 x4, float32 y4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x1" Type="System.Single" />
        <Parameter Name="y1" Type="System.Single" />
        <Parameter Name="x2" Type="System.Single" />
        <Parameter Name="y2" Type="System.Single" />
        <Parameter Name="x3" Type="System.Single" />
        <Parameter Name="y3" Type="System.Single" />
        <Parameter Name="x4" Type="System.Single" />
        <Parameter Name="y4" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">曲線の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="x1">曲線の開始点の x 座標。</param>
        <param name="y1">曲線の開始点の y 座標。</param>
        <param name="x2">曲線の最初の制御点の x 座標。</param>
        <param name="y2">曲線の最初の制御点の y 座標。</param>
        <param name="x3">曲線の 2 番目の制御点の x 座標。</param>
        <param name="y3">曲線の 2 番目の制御点の y 座標。</param>
        <param name="x4">曲線の終了点の x 座標。</param>
        <param name="y4">曲線の終了点の y 座標。</param>
        <summary>各点を表す 4 つの順序付けられた座標ペアで定義されるベジエ スプラインを描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The Bézier spline is drawn from the first point to the fourth point. The second and third points are control points that determine the shape of the curve.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a black pen.  
  
-   Creates the coordinates of the start, end, and two control points for the curve.  
  
-   Draws the Bézier curve to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#13](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#13)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#13)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawBeziers">
      <MemberSignature Language="C#" Value="public void DrawBeziers (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBeziers(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">曲線の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="points">曲線を決定する複数の点を表す <see cref="T:System.Drawing.Point" /> 構造体の配列。 配列内の点の数は、3 の倍数に 1 を加算した数 \(4、7、10 など\) である必要があります。</param>
        <summary>
          <see cref="T:System.Drawing.Point" /> 構造体の配列から一連のベジエ スプラインを描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The number of points in the array should be a multiple of 3 plus 1 because the first spline requires 4 points and any other splines require 3 points each. The first Bézier spline is drawn from the first point to the fourth point in the point array. The second and third points are control points that determine the shape of the curve. Each subsequent curve needs exactly three more points: two more control points and an ending point. The ending point of the previous curve is used as the starting point for each additional curve.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a black pen.  
  
-   Creates the start, end, and two control points for a first curve and endpoint and two control points for a second curve.  
  
-   Draws the successive Bézier curves to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#14](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#14)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#14](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#14)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#14](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="points" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawBeziers">
      <MemberSignature Language="C#" Value="public void DrawBeziers (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBeziers(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">曲線の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="points">曲線を決定する複数の点を表す <see cref="T:System.Drawing.PointF" /> 構造体の配列。 配列内の点の数は、3 の倍数に 1 を加算した数 \(4、7、10 など\) である必要があります。</param>
        <summary>
          <see cref="T:System.Drawing.PointF" /> 構造体の配列から一連のベジエ スプラインを描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The number of points in the array should be a multiple of 3 plus 1 because the first spline requires 4 points and any other splines require 3 points each. The first Bézier curve is drawn from the first point to the fourth point in the point array. The second and third points are control points that determine the shape of the curve. Each subsequent curve needs exactly three more points: two more control points and an ending point. The ending point of the previous curve is used as the starting point for each additional curve.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a black pen.  
  
-   Creates the start, end, and two control points for a first curve and endpoint and two control points for a second curve.  
  
-   Draws the successive Bézier curves to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#15](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#15)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#15)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="points" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">曲線の色、幅、および高さを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="points">スプラインを定義する <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <summary>
          <see cref="T:System.Drawing.Point" /> 構造体の配列で定義された、閉じたカーディナル スプラインを描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method draws a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close the figure.  
  
 The array of points must contain at least four <xref:System.Drawing.Point> structures.  
  
 This method uses a default tension of 0.5.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates red and green pens.  
  
-   Creates seven points to define a curve.  
  
-   Draws seven red straight lines between the seven points to form a closed polygon.  
  
-   Draws a green closed curve through the seven points.  
  
 The method uses a default tension of 0.5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#16](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#16)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#16](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#16)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#16](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="points" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">曲線の色、幅、および高さを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="points">スプラインを定義する <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <summary>
          <see cref="T:System.Drawing.PointF" /> 構造体の配列で定義された、閉じたカーディナル スプラインを描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method draws a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.  
  
 The array of points must contain at least four <xref:System.Drawing.PointF> structures.  
  
 This method uses a default tension of 0.5.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates red and green pens.  
  
-   Creates seven points to define a curve.  
  
-   Draws seven red straight lines between the seven points to form a closed polygon.  
  
-   Draws a green closed curve through the seven points.  
  
 The method uses a default tension of 0.5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#18](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#18)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#18](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#18)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#18](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="points" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, float tension, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points, float32 tension, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single,System.Drawing.Drawing2D.FillMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="tension" Type="System.Single" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="pen">曲線の色、幅、および高さを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="points">スプラインを定義する <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <param name="tension">曲線のテンションを指定する 0.0F 以上の値。</param>
        <param name="fillmode">曲線を塗りつぶす方法を決定する <see cref="T:System.Drawing.Drawing2D.FillMode" /> 列挙体のメンバー。 このパラメーターは必須ですが、無視されます。</param>
        <summary>指定したテンションを使用して、<see cref="T:System.Drawing.Point" /> 構造体の配列で定義された、閉じたカーディナル スプラインを描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method draws a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.  
  
 The array of points must contain at least four [DrawClosedCurve メソッド \(Pen, Point\<xref:System.Drawing.Point> structures.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter determines the shape of the spline. If the value of the **parameterReference tag is not supported!!!!**  
 parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the **parameterReference tag is not supported!!!!**  
 parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires [DrawClosedCurve メソッド \(Pen, Point\<xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the [DrawClosedCurve メソッド \(Pen, Point\<xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates red and green pens.  
  
-   Creates seven points to define the curve.  
  
-   Draws seven red straight lines between the seven points to form a polygon.  
  
-   Creates tension and fill mode settings.  
  
-   Draws a green closed curve through the seven points.  
  
 The method uses a tension of 1.0 and sets the fill mode to **languageKeyword tag is not supported!!!!**  
.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#17](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#17)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#17](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#17)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#17](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="points" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, float tension, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, float32 tension, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single,System.Drawing.Drawing2D.FillMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="tension" Type="System.Single" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="pen">曲線の色、幅、および高さを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="points">スプラインを定義する <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="tension">曲線のテンションを指定する 0.0F 以上の値。</param>
        <param name="fillmode">曲線を塗りつぶす方法を決定する <see cref="T:System.Drawing.Drawing2D.FillMode" /> 列挙体のメンバー。 このパラメーターは必須ですが、無視されます。</param>
        <summary>指定したテンションを使用して、<see cref="T:System.Drawing.PointF" /> 構造体の配列で定義された、閉じたカーディナル スプラインを描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method draws a closed cardinal spline that passes through each point in the array. If the last point does not match the first point, an additional curve segment is added from the last point to the first point to close it.  
  
 The array of points must contain at least four [DrawClosedCurve メソッド \(Pen, PointF\<xref:System.Drawing.PointF> structures.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter determines the shape of the spline. If the value of the **parameterReference tag is not supported!!!!**  
 parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the **parameterReference tag is not supported!!!!**  
 parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires [DrawClosedCurve メソッド \(Pen, PointF\<xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the [DrawClosedCurve メソッド \(Pen, PointF\<xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates red and green pens.  
  
-   Creates seven points to define the curve.  
  
-   Draws seven red straight lines between the seven points to form a polygon.  
  
-   Creates tension and fill mode settings.  
  
-   Draws a green closed curve through the seven points.  
  
 The method uses a tension of 1.0 and sets the fill mode to **languageKeyword tag is not supported!!!!**  
.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#19](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#19)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#19](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#19)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#19](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="points" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">曲線の色、幅、および高さを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="points">スプラインを定義する <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <summary>指定した <see cref="T:System.Drawing.Point" /> 構造体の配列を通過するカーディナル スプラインを描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method draws a cardinal spline that passes through each point in the array.  
  
 The array of points must contain at least three <xref:System.Drawing.Point> structures for a curve to be drawn.  
  
 This method uses a default tension of 0.5.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates red and green pens.  
  
-   Creates seven points to define a curve.  
  
-   Draws six red straight lines between the seven points to form an incomplete polygon.  
  
-   Draws an open green curve through the seven points.  
  
 The method uses a default tension of 0.5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#20](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#20)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#20)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="points" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">曲線の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="points">スプラインを定義する <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <summary>指定した <see cref="T:System.Drawing.PointF" /> 構造体の配列を通過するカーディナル スプラインを描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method draws a cardinal spline that passes through each point in the array.  
  
 The array of points must contain at least three <xref:System.Drawing.PointF> structures for a curve to be drawn.  
  
 This method uses a default tension of 0.5.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates red and green pens.  
  
-   Creates seven points to define a curve.  
  
-   Draws six red straight lines between the seven points to form an incomplete polygon.  
  
-   Draws an open green curve through the seven points.  
  
 The method uses a default tension of 0.5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#23](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#23)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#23](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#23)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#23](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="points" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">曲線の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="points">スプラインを定義する <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <param name="tension">曲線のテンションを指定する 0.0F 以上の値。</param>
        <summary>指定したテンションを使用して、指定した <see cref="T:System.Drawing.Point" /> 構造体の配列を通過するカーディナル スプラインを描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method draws a cardinal spline that passes through each point in the array.  
  
 The array of points must contain at least three [DrawCurve メソッド \(Pen, Point\<xref:System.Drawing.Point> structures for a curve to be drawn.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter determines the shape of the spline. If the value of the **parameterReference tag is not supported!!!!**  
 parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the **parameterReference tag is not supported!!!!**  
 parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires [DrawCurve メソッド \(Pen, Point\<xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the [DrawCurve メソッド \(Pen, Point\<xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates red and green pens.  
  
-   Creates seven points to define the curve.  
  
-   Draws six red straight lines between the seven points to form an incomplete polygon.  
  
-   Creates a tension setting.  
  
-   Draws an open green closed curve through the seven points.  
  
 The method uses a tension of 1.0.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#22](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#22)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#22](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#22)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#22](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="points" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">曲線の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="points">曲線を定義する複数の点を表す <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="tension">曲線のテンションを指定する 0.0F 以上の値。</param>
        <summary>指定したテンションを使用して、指定した <see cref="T:System.Drawing.PointF" /> 構造体の配列を通過するカーディナル スプラインを描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method draws a cardinal spline that passes through each point in the array.  
  
 The array of points must contain at least three [DrawCurve メソッド \(Pen, PointF\<xref:System.Drawing.PointF> structures for a curve to be drawn.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter determines the shape of the spline. If the value of the **parameterReference tag is not supported!!!!**  
 parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the **parameterReference tag is not supported!!!!**  
 parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires [DrawCurve メソッド \(Pen, PointF\<xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the [DrawCurve メソッド \(Pen, PointF\<xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates red and green pens.  
  
-   Creates seven points to define the curve.  
  
-   Draws six red straight lines between the seven points to form an incomplete polygon.  
  
-   Creates a tension setting.  
  
-   Draws an open green closed curve through the seven points.  
  
 The method uses a tension of 1.0.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#26](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#26)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#26](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#26)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#26](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="points" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, int offset, int numberOfSegments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, int32 offset, int32 numberOfSegments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">曲線の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="points">スプラインを定義する <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="offset">
          <c>points</c> パラメーターの配列の最初の要素から曲線の開始点までのオフセット。</param>
        <param name="numberOfSegments">曲線に含める開始点以降のセグメント数。</param>
        <summary>指定した <see cref="T:System.Drawing.PointF" /> 構造体の配列を通過するカーディナル スプラインを描画します。 この描画は、配列の先頭からのオフセットから開始されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method draws a cardinal spline that passes through each point in the array.  
  
 The array of points must contain at least three [DrawCurve メソッド \(Pen, PointF\<xref:System.Drawing.PointF> structures for a curve to be drawn.  
  
 The value of the **parameterReference tag is not supported!!!!**  
 parameter specifies the number of elements to skip in the array. The first element after the skipped elements represents the starting point of the curve.  
  
 The value of the **parameterReference tag is not supported!!!!**  
 parameter specifies the number of segments, after the starting point, to draw in the curve. The value of the **parameterReference tag is not supported!!!!**  
 parameter must be at least 1. The value of the **parameterReference tag is not supported!!!!**  
 parameter plus the value of the **parameterReference tag is not supported!!!!**  
 parameter must be less than the number of elements in the array of the **parameterReference tag is not supported!!!!**  
 parameter.  
  
 This method uses a default tension of 0.5.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires [DrawCurve メソッド \(Pen, PointF\<xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the [DrawCurve メソッド \(Pen, PointF\<xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates red and green pens.  
  
-   Creates seven points to define a curve.  
  
-   Draws six red straight lines between the seven points to form an incomplete polygon.  
  
-   Defines the starting point offset and number of segments.  
  
-   Draws an open green curve \(starting at the third point\) through the last five points.  
  
 The method uses a default tension of 0.5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#24](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#24)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#24](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#24)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#24](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="points" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points, int32 offset, int32 numberOfSegments, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Int32,System.Int32,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">曲線の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="points">スプラインを定義する <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <param name="offset">
          <c>points</c> パラメーターの配列の最初の要素から曲線の開始点までのオフセット。</param>
        <param name="numberOfSegments">曲線に含める開始点以降のセグメント数。</param>
        <param name="tension">曲線のテンションを指定する 0.0F 以上の値。</param>
        <summary>指定したテンションを使用して、指定した <see cref="T:System.Drawing.Point" /> 構造体の配列を通過するカーディナル スプラインを描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method draws a cardinal spline that passes through each point in the array.  
  
 The array of points must contain at least three [DrawCurve メソッド \(Pen, Point\<xref:System.Drawing.Point> structures for a curve to be drawn.  
  
 The value of the **parameterReference tag is not supported!!!!**  
 parameter specifies the number of elements to skip in the array. The first element after the skipped elements represents the starting point of the curve.  
  
 The value of the **parameterReference tag is not supported!!!!**  
 parameter specifies the number of segments, after the starting point, to draw in the curve. The value of the **parameterReference tag is not supported!!!!**  
 parameter must be at least 1. The value of the **parameterReference tag is not supported!!!!**  
 parameter plus the value of the **parameterReference tag is not supported!!!!**  
 parameter must be less than the number of elements in the array of the **parameterReference tag is not supported!!!!**  
 parameter.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter determines the shape of the spline. If the value of the **parameterReference tag is not supported!!!!**  
 parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the **parameterReference tag is not supported!!!!**  
 parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires [DrawCurve メソッド \(Pen, Point\<xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the [DrawCurve メソッド \(Pen, Point\<xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates red and green pens.  
  
-   Creates seven points to define a curve.  
  
-   Draws six red straight lines between the seven points to form an incomplete polygon.  
  
-   Defines the starting point offset and number of segments.  
  
-   Defines the tension.  
  
-   Draws an open green curve \(starting at the third point\) through the last five points.  
  
 The method sets the tension to 1.0.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#21](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#21)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#21](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#21)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#21](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="points" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, int32 offset, int32 numberOfSegments, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">曲線の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="points">スプラインを定義する <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="offset">
          <c>points</c> パラメーターの配列の最初の要素から曲線の開始点までのオフセット。</param>
        <param name="numberOfSegments">曲線に含める開始点以降のセグメント数。</param>
        <param name="tension">曲線のテンションを指定する 0.0F 以上の値。</param>
        <summary>指定したテンションを使用して、指定した <see cref="T:System.Drawing.PointF" /> 構造体の配列を通過するカーディナル スプラインを描画します。 この描画は、配列の先頭からのオフセットから開始されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method draws a cardinal spline that passes through each point in the array.  
  
 The array of points must contain at least three [DrawCurve メソッド \(Pen, PointF\<xref:System.Drawing.PointF> structures for curve to be drawn.  
  
 The value of the **parameterReference tag is not supported!!!!**  
 parameter specifies the number of elements to skip in the array. The first element after the skipped elements represents the starting point of the curve.  
  
 The value of the **parameterReference tag is not supported!!!!**  
 parameter specifies the number of segments, after the starting point, to draw in the curve. The value of the **parameterReference tag is not supported!!!!**  
 parameter must be at least 1. The value of the **parameterReference tag is not supported!!!!**  
 parameter plus the value of the **parameterReference tag is not supported!!!!**  
 parameter must be less than the number of elements in the array of the **parameterReference tag is not supported!!!!**  
 parameter.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter determines the shape of the spline. If the value of the **parameterReference tag is not supported!!!!**  
 parameter is 0.0F, this method draws straight line segments to connect the points. Usually, the **parameterReference tag is not supported!!!!**  
 parameter is less than or equal to 1.0F. Values over 1.0F produce unusual results.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires [DrawCurve メソッド \(Pen, PointF\<xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the [DrawCurve メソッド \(Pen, PointF\<xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates red and green pens.  
  
-   Creates seven points to define a curve.  
  
-   Draws six red straight lines between the seven points to form an incomplete polygon.  
  
-   Defines the starting point offset and number of segments.  
  
-   Defines the tension.  
  
-   Draws an open green curve \(starting at the third point\) through the last five points.  
  
 The method sets the tension to 1.0.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#25](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#25)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#25](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#25)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#25](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="points" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.Rectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="pen">楕円の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="rect">楕円の境界を定義する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <summary>外接する <see cref="T:System.Drawing.Rectangle" /> 構造体で指定された楕円を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method draws an ellipse that is defined by the bounding rectangle specified by the **parameterReference tag is not supported!!!!**  
 parameter.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a black pen.  
  
-   Creates a rectangle to bound an ellipse.  
  
-   Draws the ellipse to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#27](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#27)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#27](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#27)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#27](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.RectangleF)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="pen">楕円の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="rect">楕円の境界を定義する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <summary>外接する <see cref="T:System.Drawing.RectangleF" /> で定義された楕円を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method draws an ellipse that is defined by the bounding rectangle specified by the **parameterReference tag is not supported!!!!**  
 parameter.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a black pen.  
  
-   Creates a rectangle to bound an ellipse.  
  
-   Draws the ellipse to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#28](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#28)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#28](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#28)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#28](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">楕円の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="x">楕円を定義する外接する四角形の左上隅の x 座標。</param>
        <param name="y">楕円を定義する外接する四角形の左上隅の y 座標。</param>
        <param name="width">楕円を定義する外接する四角形の幅。</param>
        <param name="height">楕円を定義する外接する四角形の高さ。</param>
        <summary>四角形の左上隅の座標、高さ、および幅によって指定される外接する四角形によって定義される楕円を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method draws an ellipse that is defined by the bounding rectangle described by the **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, and **parameterReference tag is not supported!!!!**  
 parameters.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a black pen.  
  
-   Creates the position and size of a rectangle to bound an ellipse.  
  
-   Draws the ellipse to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#29](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#29)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#29](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#29)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#29](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">楕円の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="x">楕円を定義する外接する四角形の左上隅の x 座標。</param>
        <param name="y">楕円を定義する外接する四角形の左上隅の y 座標。</param>
        <param name="width">楕円を定義する外接する四角形の幅。</param>
        <param name="height">楕円を定義する外接する四角形の高さ。</param>
        <summary>座標ペア、高さ、および幅で指定された外接する四角形によって定義される楕円を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method draws an ellipse that is defined by the bounding rectangle described by the **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, and **parameterReference tag is not supported!!!!**  
 parameters.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a black pen.  
  
-   Creates the position and size of a rectangle to bound an ellipse.  
  
-   Draws the ellipse to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#30](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#30)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#30](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#30)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#30](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawIcon">
      <MemberSignature Language="C#" Value="public void DrawIcon (System.Drawing.Icon icon, System.Drawing.Rectangle targetRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawIcon(class System.Drawing.Icon icon, valuetype System.Drawing.Rectangle targetRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Drawing.Rectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="System.Drawing.Icon" />
        <Parameter Name="targetRect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="icon">描画する <see cref="T:System.Drawing.Icon" />。</param>
        <param name="targetRect">ディスプレイ表面における生成イメージの場所とサイズを指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。<c>icon</c> パラメーターに含まれるイメージは、この四角形領域の大きさに合わせてスケーリングされます。</param>
        <summary>
          <see cref="T:System.Drawing.Rectangle" /> 構造体で指定された領域内の指定した <see cref="T:System.Drawing.Icon" /> によって表されるイメージを描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates an icon from a standard Windows icon file SampIcon.ico in the example folder.  
  
-   Creates a rectangle in which to draw the icon.  
  
-   Draws the icon to the screen.  
  
 The position of the rectangle locates the icon on the screen, and the size of the rectangle determines the scaling of the drawn icon.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#31](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#31)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#31](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#31)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#31](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="icon" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawIcon">
      <MemberSignature Language="C#" Value="public void DrawIcon (System.Drawing.Icon icon, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawIcon(class System.Drawing.Icon icon, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="System.Drawing.Icon" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="icon">描画する <see cref="T:System.Drawing.Icon" />。</param>
        <param name="x">描画イメージの左上隅の x 座標。</param>
        <param name="y">描画イメージの左上隅の y 座標。</param>
        <summary>指定した <see cref="T:System.Drawing.Icon" /> によって表されるイメージを指定した座標に描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates an icon from a standard Windows icon file SampIcon.ico in the example folder.  
  
-   Creates the coordinates of the upper\-left corner at which to draw the icon.  
  
-   Draws the icon to the screen.  
  
 The drawn icon is unscaled.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#32](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#32)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#32](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#32)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#32](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="icon" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawIconUnstretched">
      <MemberSignature Language="C#" Value="public void DrawIconUnstretched (System.Drawing.Icon icon, System.Drawing.Rectangle targetRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawIconUnstretched(class System.Drawing.Icon icon, valuetype System.Drawing.Rectangle targetRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawIconUnstretched(System.Drawing.Icon,System.Drawing.Rectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="System.Drawing.Icon" />
        <Parameter Name="targetRect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="icon">描画する <see cref="T:System.Drawing.Icon" />。</param>
        <param name="targetRect">生成イメージの場所とサイズを指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。 イメージはこの四角形に合わせてスケーリングされず、元のサイズが保持されます。 イメージが四角形より大きい場合は、その四角形に収まるようにクリッピングされます。</param>
        <summary>指定した <see cref="T:System.Drawing.Icon" /> によって表されるイメージをスケーリングしないで描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates an icon from a standard Windows icon file SampIcon.ico in the example folder.  
  
-   Creates a rectangle in which to draw the icon.  
  
-   Draws the icon to the screen.  
  
 The position of the rectangle locates the icon on the screen, and the drawn icon is unscaled and unclipped.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#33](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#33)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#33](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#33)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#33](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="icon" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="point">描画イメージの左上隅の位置を表す <see cref="T:System.Drawing.Point" /> 構造体。</param>
        <summary>指定した位置に、指定した <see cref="T:System.Drawing.Image" /> を元の物理サイズで描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution \(dots per inch\). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.  
  
 This method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution \(dots per inch\) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call this method to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be \(216\/72\)\*96 \= 288.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  
  
-   Creates a point at which to draw the upper\-left corner of the image.  
  
-   Draws the unscaled image to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#34](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#34)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#34](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#34)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#34](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destPoints">平行四辺形を定義する 3 つの <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <summary>指定した <see cref="T:System.Drawing.Image" /> を指定した場所に指定した形状とサイズで描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **parameterReference tag is not supported!!!!**  
 parameter specifies three points of a parallelogram. The three <xref:System.Drawing.Point> structures represent the upper\-left, upper\-right, and lower\-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.  
  
 The image represented by the **parameterReference tag is not supported!!!!**  
 parameter is scaled and sheared to fit the shape of the parallelogram specified by the **parameterReference tag is not supported!!!!**  
 parameters.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  
  
-   Creates points that define a parallelogram in which to draw the image.  
  
-   Draws the image to the screen.  
  
 The position of the parallelogram locates the image on the screen, and the size of the original image and the size and shape of the parallelogram determines the scaling and shearing of the drawn image.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#35](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#35)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#35](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#35)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#35](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="point">描画イメージの左上隅を表す <see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <summary>指定した位置に、指定した <see cref="T:System.Drawing.Image" /> を元の物理サイズで描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution \(dots per inch\). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.  
  
 This method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution \(dots per inch\) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call this method to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be \(216\/72\)\*96 \= 288.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  
  
-   Creates a point at which to draw the upper\-left corner of the image.  
  
-   Draws the unscaled image to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#40](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#40)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#40](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#40)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#40](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#40)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destPoints">平行四辺形を定義する 3 つの <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <summary>指定した <see cref="T:System.Drawing.Image" /> を指定した場所に指定した形状とサイズで描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **parameterReference tag is not supported!!!!**  
 parameter specifies three points of a parallelogram. The three <xref:System.Drawing.PointF> structures represent the upper\-left, upper\-right, and lower\-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.  
  
 The image represented by the **parameterReference tag is not supported!!!!**  
 object is scaled and sheared to fit the shape of the parallelogram specified by the **parameterReference tag is not supported!!!!**  
 parameter.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  
  
-   Creates points that define a parallelogram in which to draw the image.  
  
-   Draws the image to the screen.  
  
 The position of the parallelogram locates the image on the screen, and the size of the original image and the size and shape of the parallelogram determines the scaling and shearing of the drawn image.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#41](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#41)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#41](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#41)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#41](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="rect">描画イメージの位置とサイズを指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The image represented by the **parameterReference tag is not supported!!!!**  
 object is scaled to the dimensions of the **parameterReference tag is not supported!!!!**  
 rectangle.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  
  
-   Creates a rectangle in which to draw the image.  
  
-   Draws the image to the screen.  
  
 The position of the rectangle locates the image on the screen, and the size of the original image and the size of the rectangle determines the scaling of the drawn image.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#46](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#46)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#46](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#46)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#46](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#46)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="rect">描画イメージの位置とサイズを指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The image represented by the **parameterReference tag is not supported!!!!**  
 object is scaled to the dimensions of the **parameterReference tag is not supported!!!!**  
 rectangle.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  
  
-   Creates a rectangle in which to draw the image.  
  
-   Draws the image to the screen.  
  
 The position of the rectangle locates the image on the screen, and the original size of the image and the size of the rectangle determines the scaling of the drawn image.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#56](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#56)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#56](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#56)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#56](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#56)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="x">描画イメージの左上隅の x 座標。</param>
        <param name="y">描画イメージの左上隅の y 座標。</param>
        <summary>指定したイメージを座標ペアで指定された位置に元の物理サイズで描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution \(dots per inch\). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.  
  
 The <xref:System.Drawing.Graphics.DrawImage%2A> method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution \(dots per inch\) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call <xref:System.Drawing.Graphics.DrawImage%2A> to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be \(216\/72\)\*96 \= 288.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates an image from a JPEG file SampImag.jpg in the folder of the example SampImag.jpg in the folder of the example.  
  
-   Creates the coordinates of a point at which to draw the upper\-left corner of the image.  
  
-   Draws the unscaled image.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#58](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#58)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#58](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#58)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#58](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="x">描画イメージの左上隅の x 座標。</param>
        <param name="y">描画イメージの左上隅の y 座標。</param>
        <summary>指定した位置に、指定した <see cref="T:System.Drawing.Image" /> を元の物理サイズで描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution \(dots per inch\). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.  
  
 This method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution \(dots per inch\) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call this method to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be \(216\/72\)\*96 \= 288.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  
  
-   Creates the coordinates of a point at which to draw the upper\-left corner of the image.  
  
-   Draws the unscaled image to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#61](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#61)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#61](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#61)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#61](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#61)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destPoints">平行四辺形を定義する 3 つの <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <param name="srcRect">描画する <c>image</c> オブジェクトの部分を指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="srcUnit">
          <c>srcRect</c> パラメーターで使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> の指定した部分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **parameterReference tag is not supported!!!!**  
 parameter specifies three points of a parallelogram. The three [DrawImage メソッド \(Image, Point\<xref:System.Drawing.Point> structures represent the upper\-left, upper\-right, and lower\-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter specifies a rectangular portion of the **parameterReference tag is not supported!!!!**  
 object to draw. This portion is scaled and sheared to fit inside the parallelogram specified by the **parameterReference tag is not supported!!!!**  
 parameter.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires [DrawImage メソッド \(Image, Point\<xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the [DrawImage メソッド \(Image, Point\<xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  
  
-   Creates points that define a parallelogram in which to draw the image.  
  
-   Creates a rectangle to select the portion of the image to draw.  
  
-   Sets the graphics drawing unit to pixel.  
  
-   Draws the image to the screen.  
  
 The position of the parallelogram locates the image on the screen, and the size of the rectangle and the size and shape of the parallelogram determines the scaling and shearing of the drawn image.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#36](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#36)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#36](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#36)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#36](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#36)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destPoints">平行四辺形を定義する 3 つの <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="srcRect">描画する <c>image</c> オブジェクトの部分を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="srcUnit">
          <c>srcRect</c> パラメーターで使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> の指定した部分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **parameterReference tag is not supported!!!!**  
 parameter specifies three points of a parallelogram. The three [DrawImage メソッド \(Image, PointF\<xref:System.Drawing.PointF> structures represent the upper\-left, upper\-right, and lower\-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter specifies a rectangular portion of the **parameterReference tag is not supported!!!!**  
 object to draw. This portion is scaled and sheared to fit inside the parallelogram specified by the **parameterReference tag is not supported!!!!**  
 parameter.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires [DrawImage メソッド \(Image, PointF\<xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the [DrawImage メソッド \(Image, PointF\<xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  
  
-   Creates points that define a destination parallelogram in which to draw the image.  
  
-   Creates a source rectangle from which to extract a portion of the image.  
  
-   Sets the unit of measure of the source rectangle to pixels.  
  
-   Draws the image to the screen.  
  
 The position of the destination parallelogram locates the image on the screen, the size of the source rectangle and the size and shape of the destination parallelogram determines the scaling and shearing of the drawn image, and the size of the rectangle determines what portion of the original image is drawn to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#42](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#42)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#42](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#42)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#42](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destRect">描画イメージの位置とサイズを指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。 イメージは、四角形に合わせてスケーリングされます。</param>
        <param name="srcRect">描画する <c>image</c> オブジェクトの部分を指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="srcUnit">
          <c>srcRect</c> パラメーターで使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> の指定した部分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **parameterReference tag is not supported!!!!**  
 parameter specifies a rectangular portion of the **parameterReference tag is not supported!!!!**  
 object to draw. This portion is scaled to fit inside the rectangle specified by the **parameterReference tag is not supported!!!!**  
 parameter.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  
  
-   Creates a destination rectangle in which to draw the image.  
  
-   Creates a source rectangle from which to extract a portion of the image.  
  
-   Sets the unit of measure of the source rectangle to pixels.  
  
-   Draws the image to the screen.  
  
 The position of the destination rectangle locates the image on the screen, the sizes of the source and destination rectangles determine the scaling of the drawn image, and the size of the source rectangle determines what portion of the original image is drawn to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#47](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#47)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#47](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#47)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#47](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#47)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destRect">描画イメージの位置とサイズを指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。 イメージは、四角形に合わせてスケーリングされます。</param>
        <param name="srcRect">描画する <c>image</c> オブジェクトの部分を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="srcUnit">
          <c>srcRect</c> パラメーターで使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> の指定した部分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **parameterReference tag is not supported!!!!**  
 parameter specifies a rectangular portion of the **parameterReference tag is not supported!!!!**  
 object to draw. This portion is scaled to fit inside the rectangle specified by the **parameterReference tag is not supported!!!!**  
 parameter.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  
  
-   Creates a destination rectangle in which to draw the image.  
  
-   Creates a source rectangle from which to extract a portion of the image.  
  
-   Sets the unit of measure of the source rectangle to pixels.  
  
-   Draws the image to the screen.  
  
 The position of the destination rectangle locates the image on the screen, the sizes of the source and destination rectangles determine the scaling of the drawn image, and the size of the source rectangle determines what portion of the original image is drawn to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#57](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#57)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#57](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#57)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#57](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#57)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destPoints">平行四辺形を定義する 3 つの <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <param name="srcRect">描画する <c>image</c> オブジェクトの部分を指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="srcUnit">
          <c>srcRect</c> パラメーターで使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="imageAttr">
          <c>image</c> オブジェクトのカラー変更情報とガンマ情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <summary>指定した位置に、指定した <see cref="T:System.Drawing.Image" /> の指定した部分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **parameterReference tag is not supported!!!!**  
 parameter specifies three points of a parallelogram. The three [DrawImage メソッド \(Image, Point\<xref:System.Drawing.Point> structures represent the upper\-left, upper\-right, and lower\-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter specifies a rectangular portion of the**parameterReference tag is not supported!!!!**  
 object to draw. This portion is scaled and sheared to fit inside the parallelogram specified by the **parameterReference tag is not supported!!!!**  
 parameter.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires [DrawImage メソッド \(Image, Point\<xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the [DrawImage メソッド \(Image, Point\<xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  
  
-   Creates points that define a parallelogram in which to draw the image.  
  
-   Creates a rectangle to select the portion of the image to draw.  
  
-   Sets the graphics drawing unit to pixel.  
  
-   Draws the original image to the screen.  
  
-   Creates an additional parallelogram in which to draw an adjusted image.  
  
-   Creates and sets the attributes of the adjusted image to have a larger\-than\-usual gamma value.  
  
-   Draws the adjusted image to the screen.  
  
 For the original, unadjusted parallelogram, the position locates the image on the screen, and the size of the rectangle and the size and shape of the parallelogram determines the scaling and shearing of the drawn image.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#37](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#37)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#37](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#37)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#37](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#37)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destPoints">平行四辺形を定義する 3 つの <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="srcRect">描画する <c>image</c> オブジェクトの部分を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="srcUnit">
          <c>srcRect</c> パラメーターで使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="imageAttr">
          <c>image</c> オブジェクトのカラー変更情報とガンマ情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> の指定した部分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **parameterReference tag is not supported!!!!**  
 parameter specifies three points of a parallelogram. The three [DrawImage メソッド \(Image, PointF\<xref:System.Drawing.PointF> structures represent the upper\-left, upper\-right, and lower\-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter specifies a rectangular portion of the **parameterReference tag is not supported!!!!**  
 object to draw. This portion is scaled and sheared to fit inside the parallelogram specified by the **parameterReference tag is not supported!!!!**  
 parameter.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires [DrawImage メソッド \(Image, PointF\<xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the [DrawImage メソッド \(Image, PointF\<xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  
  
-   Creates points that define a destination parallelogram in which to draw the image.  
  
-   Creates a source rectangle from which to extract a portion of the image.  
  
-   Sets the unit of measure of the source rectangle to pixels.  
  
-   Draws the original image to the screen.  
  
-   Creates an additional parallelogram in which to draw an adjusted image.  
  
-   Creates and sets the attributes of the adjusted image to have a larger\-than\-usual gamma value.  
  
-   Draws the adjusted image to the screen.  
  
 For the original, unadjusted destination parallelogram, the position locates the image on the screen, the size of the source rectangle and the size and shape of the destination parallelogram determines the scaling and shearing of the drawn image, and the size of the rectangle determines what portion of the original image is drawn to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#43](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#43)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#43](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#43)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#43](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#43)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, int x, int y, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, int32 x, int32 y, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="x">描画イメージの左上隅の x 座標。</param>
        <param name="y">描画イメージの左上隅の y 座標。</param>
        <param name="srcRect">描画する <c>image</c> オブジェクトの部分を指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="srcUnit">
          <c>srcRect</c> パラメーターで使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <summary>イメージの一部を指定の位置に描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution \(dots per inch\). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 360 and a horizontal resolution of 72 dots per inch has a physical width of 5 inches. Similar remarks apply to pixel height and physical height.  
  
 This method draws a portion of an image using its physical size, so the image portion will have its correct size in inches regardless of the resolution \(dots per inch\) of the display device. For example, suppose an image portion has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call this method to draw that image portion on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image portion will be \(216\/72\)\*96 \= 288.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  
  
-   Creates the coordinates at which to draw the upper\-left corner of the image.  
  
-   Creates a source rectangle from which to extract a portion of the image.  
  
-   Sets the unit of measure of the source rectangle to pixels.  
  
-   Draws the image to the screen.  
  
 The size of the source rectangle determines what portion of the unscaled original image is drawn to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#59](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#59)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#59](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#59)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#59](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#59)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="x">描画イメージの左上隅の x 座標。</param>
        <param name="y">描画イメージの左上隅の y 座標。</param>
        <param name="width">描画イメージの幅。</param>
        <param name="height">描画イメージの高さ。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 によって定義された四角形、 `x`, 、`y`, 、`width`, 、および `height` パラメーターは、描画するイメージのサイズと位置を決定します。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   JPEG ファイルの例では、フォルダーに SampImag.jpg からイメージを作成します。  
  
-   イメージを描画する四角形のサイズと位置を作成します。  
  
-   画面にイメージを描画します。  
  
 四角形の位置が画面で、イメージを検索し、元のイメージのサイズと四角形のサイズは、描画するイメージの表示スケールを決定します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#60](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#60)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#60](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#60)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#60](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, float x, float y, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, float32 x, float32 y, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="x">描画イメージの左上隅の x 座標。</param>
        <param name="y">描画イメージの左上隅の y 座標。</param>
        <param name="srcRect">描画する <see cref="T:System.Drawing.Image" /> の部分を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="srcUnit">
          <c>srcRect</c> パラメーターで使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <summary>イメージの一部を指定の位置に描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution \(dots per inch\). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 360 and a horizontal resolution of 72 dots per inch has a physical width of 5 inches. Similar remarks apply to pixel height and physical height.  
  
 This method draws a portion of an image using its physical size, so the image portion will have its correct size in inches regardless of the resolution \(dots per inch\) of the display device. For example, suppose an image portion has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call this method to draw that image portion on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image portion will be \(216\/72\)\*96 \= 288.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  
  
-   Creates the coordinates at which to draw the upper\-left corner of the image.  
  
-   Creates a source rectangle from which to extract a portion of the image.  
  
-   Sets the unit of measure of the source rectangle to pixels.  
  
-   Draws the image to the screen.  
  
 The size of the source rectangle determines what portion of the unscaled original image is drawn to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#62](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#62)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#62](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#62)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#62](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="x">描画イメージの左上隅の x 座標。</param>
        <param name="y">描画イメージの左上隅の y 座標。</param>
        <param name="width">描画イメージの幅。</param>
        <param name="height">描画イメージの高さ。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The rectangle defined by the **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, and **parameterReference tag is not supported!!!!**  
 parameters determines the position and size of the drawn image.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  
  
-   Creates the position and size of a rectangle in which to draw the image.  
  
-   Draws the image to the screen.  
  
 The position of the rectangle locates the image on the screen, and the size of the original image and the size of the rectangle determines the scaling of the drawn image.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#63](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#63)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#63](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#63)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#63](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destPoints">平行四辺形を定義する 3 つの <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="srcRect">描画する <c>image</c> オブジェクトの部分を指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="srcUnit">
          <c>srcRect</c> パラメーターで使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="imageAttr">
          <c>image</c> オブジェクトのカラー変更情報とガンマ情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <param name="callback">イメージの描画時に呼び出すメソッドを指定する <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> デリゲート。 このメソッドは、アプリケーションにより決定された基準に従って実行された <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> メソッドを停止するかどうかをチェックするため頻繁に呼び出されます。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> の指定した部分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **parameterReference tag is not supported!!!!**  
 parameter specifies three points of a parallelogram. The three [DrawImage メソッド \(Image, Point\<xref:System.Drawing.PointF> structures represent the upper\-left, upper\-right, and lower\-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter specifies a rectangular portion of the **parameterReference tag is not supported!!!!**  
 object to draw. This portion is scaled and sheared to fit inside the parallelogram specified by the **parameterReference tag is not supported!!!!**  
 parameter.  
  
 This overload with the **parameterReference tag is not supported!!!!**  
 parameter provides the means to stop the drawing of an image once it starts according to criteria determined by the application. For example, an application could start drawing a large image and the user might scroll the image off the screen, in which case the application could stop the drawing.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires [DrawImage メソッド \(Image, Point\<xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the [DrawImage メソッド \(Image, Point\<xref:System.Windows.Forms.Control.Paint> event handler. The code first defines a callback method for the [DrawImage メソッド \(Image, Point\<xref:System.Drawing.Graphics.DrawImageAbort> delegate; the definition is simplistic and merely tests to see whether the [DrawImage メソッド \(Image, Point\<xref:System.Drawing.Graphics.DrawImage%2A> method calls it with a null **parameterReference tag is not supported!!!!**  
 parameter. The main body of the example performs the following actions:  
  
-   Creates an instance of the [DrawImage メソッド \(Image, Point\<xref:System.Drawing.Graphics.DrawImageAbort> callback method:  
  
-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  
  
-   Creates points that define a parallelogram in which to draw the image.  
  
-   Creates a rectangle to select the portion of the image to draw.  
  
-   Sets the graphics drawing unit to pixel.  
  
-   Draws the original image to the screen.  
  
-   Creates an additional parallelogram in which to draw an adjusted image.  
  
-   Creates and sets the attributes of the adjusted image to have a larger\-than\-usual gamma value.  
  
-   Draws the adjusted image to the screen.  
  
 For the original, unadjusted parallelogram, the position locates the image on the screen, and the size of the rectangle and the size and shape of the parallelogram determines the scaling and shearing of the drawn image.  
  
 Because this example uses an overload that does not pass a **parameterReference tag is not supported!!!!**  
 parameter, the [DrawImage メソッド \(Image, Point\<xref:System.Drawing.Graphics.DrawImageAbort> callback returns **languageKeyword tag is not supported!!!!**  
, which causes the [DrawImage メソッド \(Image, Point\<xref:System.Drawing.Graphics.DrawImage%2A> method to end, and the exception\-handling code included in the example prints out the exception text rather than drawing the image.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#38](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#38)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#38](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#38)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#38](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destPoints">平行四辺形を定義する 3 つの <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="srcRect">描画する <c>image</c> オブジェクトの部分を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="srcUnit">
          <c>srcRect</c> パラメーターで使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="imageAttr">
          <c>image</c> オブジェクトのカラー変更情報とガンマ情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <param name="callback">イメージの描画時に呼び出すメソッドを指定する <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> デリゲート。 このメソッドは、アプリケーションにより決定された基準に従って実行された <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> メソッドを停止するかどうかをチェックするため頻繁に呼び出されます。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> の指定した部分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **parameterReference tag is not supported!!!!**  
 parameter specifies three points of a parallelogram. The three [DrawImage メソッド \(Image, PointF\<xref:System.Drawing.PointF> structures represent the upper\-left, upper\-right, and lower\-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter specifies a rectangular portion of the **parameterReference tag is not supported!!!!**  
 object to draw. This portion is scaled and sheared to fit inside the parallelogram specified by the **parameterReference tag is not supported!!!!**  
 parameter.  
  
 This overload with the **parameterReference tag is not supported!!!!**  
 parameter provides the means to stop the drawing of an image once it starts according to criteria determined by the application. For example, an application could start drawing a large image and the user might scroll the image off the screen, in which case the application could stop the drawing.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires [DrawImage メソッド \(Image, PointF\<xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the [DrawImage メソッド \(Image, PointF\<xref:System.Windows.Forms.Control.Paint> event handler. The code first defines a callback method for the [DrawImage メソッド \(Image, PointF\<xref:System.Drawing.Graphics.DrawImageAbort> delegate; the definition is simplistic and merely tests to see whether the [DrawImage メソッド \(Image, PointF\<xref:System.Drawing.Graphics.DrawImage%2A> method calls it with a null **parameterReference tag is not supported!!!!**  
 parameter. The main body of the example performs the following actions:  
  
-   Creates an instance of the [DrawImage メソッド \(Image, PointF\<xref:System.Drawing.Graphics.DrawImageAbort> callback method.  
  
-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  
  
-   Creates points that define a parallelogram in which to draw the image.  
  
-   Creates a rectangle to select the portion of the image to draw.  
  
-   Sets the graphics drawing unit to pixel.  
  
-   Draws the original image to the screen.  
  
-   Creates an additional parallelogram in which to draw an adjusted image.  
  
-   Creates and sets the attributes of the adjusted image to have a larger\-than\-usual gamma value.  
  
-   Draws the adjusted image to the screen.  
  
 For the original, unadjusted parallelogram, the position locates the image on the screen, and the size of the rectangle and the size and shape of the parallelogram determines the scaling and shearing of the drawn image.  
  
 Because this example uses an overload that does not pass a **parameterReference tag is not supported!!!!**  
 parameter, the [DrawImage メソッド \(Image, PointF\<xref:System.Drawing.Graphics.DrawImageAbort> callback returns **languageKeyword tag is not supported!!!!**  
, which causes the [DrawImage メソッド \(Image, PointF\<xref:System.Drawing.Graphics.DrawImage%2A> method to end, and the exception\-handling code included in the example prints out the exception text rather than drawing the image.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#44](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#44)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#44](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#44)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#44](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#44)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback, int callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback, int32 callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destPoints">平行四辺形を定義する 3 つの <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="srcRect">描画する <c>image</c> オブジェクトの部分を指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="srcUnit">
          <c>srcRect</c> パラメーターで使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="imageAttr">
          <c>image</c> オブジェクトのカラー変更情報とガンマ情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <param name="callback">イメージの描画時に呼び出すメソッドを指定する <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> デリゲート。 このメソッドは、アプリケーションにより決定された基準に従って実行された <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> メソッドを停止するかどうかをチェックするため頻繁に呼び出されます。</param>
        <param name="callbackData">
          <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> メソッドの実行を停止するかどうかをチェックするときに使用する、<see cref="T:System.Drawing.Graphics.DrawImageAbort" /> デリゲートの追加データを指定する値。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> の指定した部分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **parameterReference tag is not supported!!!!**  
 parameter specifies three points of a parallelogram. The three [DrawImage メソッド \(Image, Point\<xref:System.Drawing.PointF> structures represent the upper\-left, upper\-right, and lower\-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter specifies a rectangular portion of the **parameterReference tag is not supported!!!!**  
 object to draw. This portion is scaled and sheared to fit inside the parallelogram specified by the **parameterReference tag is not supported!!!!**  
 parameter.  
  
 This overload with the **parameterReference tag is not supported!!!!**  
 and **parameterReference tag is not supported!!!!**  
 parameters provides the means to stop the drawing of an image once it starts according to criteria and data determined by the application. For example, an application could start drawing a large image and the user might scroll the image off the screen, in which case the application could stop the drawing.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires [DrawImage メソッド \(Image, Point\<xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the [DrawImage メソッド \(Image, Point\<xref:System.Windows.Forms.Control.Paint> event handler. The code first defines a callback method for the [DrawImage メソッド \(Image, Point\<xref:System.Drawing.Graphics.DrawImageAbort> delegate; the definition is simplistic and merely tests to see whether the [DrawImage メソッド \(Image, Point\<xref:System.Drawing.Graphics.DrawImage%2A> method calls it with a null **parameterReference tag is not supported!!!!**  
 parameter. The main body of the example performs the following actions:  
  
-   Creates an instance of the [DrawImage メソッド \(Image, Point\<xref:System.Drawing.Graphics.DrawImageAbort> callback method.  
  
-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  
  
-   Creates points that define a parallelogram in which to draw the image.  
  
-   Creates a rectangle to select the portion of the image to draw.  
  
-   Sets the graphics drawing unit to pixel.  
  
-   Draws the original image to the screen.  
  
-   Creates an additional parallelogram in which to draw an adjusted image.  
  
-   Creates and sets the attributes of the adjusted image to have a larger\-than\-usual gamma value.  
  
-   Draws the adjusted image to the screen.  
  
 For the original, unadjusted parallelogram, the position locates the image on the screen, and the size of the rectangle and the size and shape of the parallelogram determines the scaling and shearing of the drawn image.  
  
 Because this example uses an overload that passes a **parameterReference tag is not supported!!!!**  
 parameter, the [DrawImage メソッド \(Image, Point\<xref:System.Drawing.Graphics.DrawImageAbort> callback returns **languageKeyword tag is not supported!!!!**  
, which causes the [DrawImage メソッド \(Image, Point\<xref:System.Drawing.Graphics.DrawImage%2A> method to continue, and the example draws the adjusted image to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#39](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#39)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#39](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#39)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#39](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#39)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback, int callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback, int32 callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destPoints">平行四辺形を定義する 3 つの <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="srcRect">描画する <c>image</c> オブジェクトの部分を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="srcUnit">
          <c>srcRect</c> パラメーターで使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="imageAttr">
          <c>image</c> オブジェクトのカラー変更情報とガンマ情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <param name="callback">イメージの描画時に呼び出すメソッドを指定する <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> デリゲート。 このメソッドは、アプリケーションにより決定された基準に従って実行された <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> メソッドを停止するかどうかをチェックするため頻繁に呼び出されます。</param>
        <param name="callbackData">
          <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> メソッドの実行を停止するかどうかをチェックするときに使用する、<see cref="T:System.Drawing.Graphics.DrawImageAbort" /> デリゲートの追加データを指定する値。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> の指定した部分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **parameterReference tag is not supported!!!!**  
 parameter specifies three points of a parallelogram. The three [DrawImage メソッド \(Image, PointF\<xref:System.Drawing.PointF> structures represent the upper\-left, upper\-right, and lower\-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter specifies a rectangular portion of the **parameterReference tag is not supported!!!!**  
 object to draw. This portion is scaled and sheared to fit inside the parallelogram specified by the **parameterReference tag is not supported!!!!**  
 parameter.  
  
 This overload with the **parameterReference tag is not supported!!!!**  
 and **parameterReference tag is not supported!!!!**  
 parameters provides the means to stop the drawing of an image once it starts according to criteria and data determined by the application. For example, an application could start drawing a large image and the user might scroll the image off the screen, in which case the application could stop the drawing.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires [DrawImage メソッド \(Image, PointF\<xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the **languageKeyword tag is not supported!!!!**  
[DrawImage メソッド \(Image, PointF\<xref:System.Windows.Forms.Control.Paint> event handler. The code first defines a callback method for the [DrawImage メソッド \(Image, PointF\<xref:System.Drawing.Graphics.DrawImageAbort> delegate; the definition is simplistic and merely tests to see whether the [DrawImage メソッド \(Image, PointF\<xref:System.Drawing.Graphics.DrawImage%2A> method calls it with a null **parameterReference tag is not supported!!!!**  
 parameter. The main body of the example performs the following actions:  
  
-   Creates an instance of the [DrawImage メソッド \(Image, PointF\<xref:System.Drawing.Graphics.DrawImageAbort> callback method.  
  
-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  
  
-   Creates points that define a parallelogram in which to draw the image.  
  
-   Creates a rectangle to select the portion of the image to draw.  
  
-   Sets the graphics drawing unit to pixel.  
  
-   Draws the original image to the screen.  
  
-   Creates an additional parallelogram in which to draw an adjusted image.  
  
-   Creates and sets the attributes of the adjusted image to have a larger\-than\-usual gamma value.  
  
-   Draws the adjusted image to the screen.  
  
 For the original, unadjusted parallelogram, the position locates the image on the screen, and the size of the rectangle and the size and shape of the parallelogram determines the scaling and shearing of the drawn image.  
  
 Because this example uses an overload that passes a **parameterReference tag is not supported!!!!**  
 parameter, the [DrawImage メソッド \(Image, PointF\<xref:System.Drawing.Graphics.DrawImageAbort> callback returns **languageKeyword tag is not supported!!!!**  
, which causes the [DrawImage メソッド \(Image, PointF\<xref:System.Drawing.Graphics.DrawImage%2A> method to continue, and the example draws the adjusted image to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#45](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#45)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#45](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#45)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#45](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#45)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destRect">描画イメージの位置とサイズを指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。 イメージは、四角形に合わせてスケーリングされます。</param>
        <param name="srcX">描画するソース イメージの一部の左上隅の x 座標。</param>
        <param name="srcY">描画するソース イメージの一部の左上隅の y 座標。</param>
        <param name="srcWidth">描画するソース イメージの一部の幅。</param>
        <param name="srcHeight">描画するソース イメージの一部の高さ。</param>
        <param name="srcUnit">抽出元の四角形を決定するために使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> の指定した部分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, and **parameterReference tag is not supported!!!!**  
 parameters specify a rectangular portion, of the **parameterReference tag is not supported!!!!**  
 object to draw. The rectangle is relative to the upper\-left corner of the source image. This portion is scaled to fit inside the rectangle specified by the **parameterReference tag is not supported!!!!**  
 parameter.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  
  
-   Creates a destination rectangle in which to draw the image.  
  
-   Creates the coordinates of a source rectangle from which to extract a portion of the image.  
  
-   Sets the unit of measure of the source rectangle to pixels.  
  
-   Draws the image to the screen.  
  
 The position of the destination rectangle locates the image on the screen, and the sizes of the source and destination rectangles determine the scaling of the drawn image, and the size of the source rectangle determines what portion of the original image is drawn to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#48](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#48)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#48](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#48)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#48](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#48)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destRect">描画イメージの位置とサイズを指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。 イメージは、四角形に合わせてスケーリングされます。</param>
        <param name="srcX">描画するソース イメージの一部の左上隅の x 座標。</param>
        <param name="srcY">描画するソース イメージの一部の左上隅の y 座標。</param>
        <param name="srcWidth">描画するソース イメージの一部の幅。</param>
        <param name="srcHeight">描画するソース イメージの一部の高さ。</param>
        <param name="srcUnit">抽出元の四角形を決定するために使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> の指定した部分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, and **parameterReference tag is not supported!!!!**  
 parameters specify a rectangular portion, of the **parameterReference tag is not supported!!!!**  
 object to draw. The rectangle is relative to the upper\-left corner of the source image. This portion is scaled to fit inside the rectangle specified by the **parameterReference tag is not supported!!!!**  
 parameter.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  
  
-   Creates the coordinates of a destination rectangle in which to draw the image.  
  
-   Creates a source rectangle from which to extract a portion of the image.  
  
-   Sets the unit of measure of the source rectangle to pixels.  
  
-   Draws the image to the screen.  
  
 The position of the destination rectangle locates the image on the screen, the sizes of the source and destination rectangles determine the scaling of the drawn image, and the size of the source rectangle determines what portion of the original image is drawn to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#52](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#52)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#52](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#52)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#52](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destRect">描画イメージの位置とサイズを指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。 イメージは、四角形に合わせてスケーリングされます。</param>
        <param name="srcX">描画するソース イメージの一部の左上隅の x 座標。</param>
        <param name="srcY">描画するソース イメージの一部の左上隅の y 座標。</param>
        <param name="srcWidth">描画するソース イメージの一部の幅。</param>
        <param name="srcHeight">描画するソース イメージの一部の高さ。</param>
        <param name="srcUnit">抽出元の四角形を決定するために使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="imageAttr">
          <c>image</c> オブジェクトのカラー変更情報とガンマ情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> の指定した部分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `srcX`, 、`srcY`, 、`srcWidth`, 、および `srcHeight` の四角形の部分をパラメーターで指定、 `image` 描画するオブジェクト。 四角形では、ソース イメージの左上隅に対して相対的です。 この部分は指定された四角形内に収まるように、 `destRect` パラメーター。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   JPEG ファイルの例では、フォルダーに SampImag.jpg からイメージを作成します。  
  
-   イメージを描画するためのコピー先の四角形を作成します。  
  
-   イメージの一部を抽出するための四角形の座標を作成します。  
  
-   元の四角形の測定単位をピクセルに設定します。  
  
-   元のイメージを画面に描画します。  
  
-   調整済みのイメージを描画するための追加の四角形を作成します。  
  
-   作成し、大規模なが通常よりもガンマ値を設定する調整済みのイメージの属性を設定します。  
  
-   調整済みのイメージを画面に描画します。  
  
 未調整、元の先の四角形、位置、画面上のイメージの決まり描画イメージのスケーリングの元とコピー先の四角形のサイズによって決まりし、元の四角形のサイズは、画面に描画すると、元のイメージの部分を決定します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#49](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#49)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#49](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#49)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#49](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#49)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destRect">描画イメージの位置とサイズを指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。 イメージは、四角形に合わせてスケーリングされます。</param>
        <param name="srcX">描画するソース イメージの一部の左上隅の x 座標。</param>
        <param name="srcY">描画するソース イメージの一部の左上隅の y 座標。</param>
        <param name="srcWidth">描画するソース イメージの一部の幅。</param>
        <param name="srcHeight">描画するソース イメージの一部の高さ。</param>
        <param name="srcUnit">抽出元の四角形を決定するために使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="imageAttrs">
          <c>image</c> オブジェクトのカラー変更情報とガンマ情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> の指定した部分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, and **parameterReference tag is not supported!!!!**  
 parameters specify a rectangular portion, of the **parameterReference tag is not supported!!!!**  
 object to draw. The rectangle is relative to the upper\-left corner of the source image. This portion is scaled to fit inside the rectangle specified by the **parameterReference tag is not supported!!!!**  
 parameter.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  
  
-   Creates a destination rectangle in which to draw the image.  
  
-   Creates the coordinates of a source rectangle from which to extract a portion of the image.  
  
-   Sets the unit of measure of the source rectangle to pixels.  
  
-   Draws the original image to the screen.  
  
-   Creates an additional rectangle in which to draw an adjusted image.  
  
-   Creates and sets the attributes of the adjusted image to have a larger\-than\-usual gamma value.  
  
-   Draws the adjusted image to the screen.  
  
 For the original, unadjusted destination rectangle, the position locates the image on the screen, and the sizes of the source and destination rectangles determine the scaling of the drawn image, and the size of the source rectangle determines what portion of the original image is drawn to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#53](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#53)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#53](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#53)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#53](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#53)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destRect">描画イメージの位置とサイズを指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。 イメージは、四角形に合わせてスケーリングされます。</param>
        <param name="srcX">描画するソース イメージの一部の左上隅の x 座標。</param>
        <param name="srcY">描画するソース イメージの一部の左上隅の y 座標。</param>
        <param name="srcWidth">描画するソース イメージの一部の幅。</param>
        <param name="srcHeight">描画するソース イメージの一部の高さ。</param>
        <param name="srcUnit">抽出元の四角形を決定するために使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="imageAttr">
          <c>image</c> のカラー変更情報とガンマ情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <param name="callback">イメージの描画時に呼び出すメソッドを指定する <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> デリゲート。 このメソッドは、アプリケーションにより決定された基準に従って実行された <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> メソッドを停止するかどうかをチェックするため頻繁に呼び出されます。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> の指定した部分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, and **parameterReference tag is not supported!!!!**  
 parameters specify a rectangular portion, of the **parameterReference tag is not supported!!!!**  
 object to draw. The rectangle is relative to the upper\-left corner of the source image. This portion is scaled to fit inside the rectangle specified by the **parameterReference tag is not supported!!!!**  
 object.  
  
 This overload with the **parameterReference tag is not supported!!!!**  
 parameter provides the means to stop the drawing of an image once it starts according to criteria determined by the application. For example, an application could start drawing a large image and the user might scroll the image off the screen, in which case the application could stop the drawing.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code first defines a callback method for the <xref:System.Drawing.Graphics.DrawImageAbort> delegate; the definition is simplistic and merely tests to see whether the <xref:System.Drawing.Graphics.DrawImage%2A> method calls it with a null **parameterReference tag is not supported!!!!**  
 parameter. The main body of the example performs the following actions:  
  
-   Creates an instance of the <xref:System.Drawing.Graphics.DrawImageAbort> callback method.  
  
-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  
  
-   Creates points that define a destination rectangle in which to draw the image.  
  
-   Creates a source rectangle to select the portion of the image to draw.  
  
-   Sets the graphics drawing unit to pixel.  
  
-   Draws the original image to the screen.  
  
-   Creates an additional destination rectangle in which to draw an adjusted image.  
  
-   Creates and sets the attributes of the adjusted image to have a larger\-than\-usual gamma value.  
  
-   Draws the adjusted image to the screen.  
  
 For the original, unadjusted destination rectangle, the position locates the image on the screen, and the size of the source rectangle and the size and shape of the destination rectangle determines the scaling of the drawn image.  
  
 Because this example uses an overload that does not pass a **parameterReference tag is not supported!!!!**  
 parameter, the <xref:System.Drawing.Graphics.DrawImageAbort> callback returns **languageKeyword tag is not supported!!!!**  
, which causes the <xref:System.Drawing.Graphics.DrawImage%2A> method to end, and the exception\-handling code included in the example prints out the exception text rather than drawing the image.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#50](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#50)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#50](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#50)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#50](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destRect">描画イメージの位置とサイズを指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。 イメージは、四角形に合わせてスケーリングされます。</param>
        <param name="srcX">描画するソース イメージの一部の左上隅の x 座標。</param>
        <param name="srcY">描画するソース イメージの一部の左上隅の y 座標。</param>
        <param name="srcWidth">描画するソース イメージの一部の幅。</param>
        <param name="srcHeight">描画するソース イメージの一部の高さ。</param>
        <param name="srcUnit">抽出元の四角形を決定するために使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="imageAttrs">
          <c>image</c> オブジェクトのカラー変更情報とガンマ情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <param name="callback">イメージの描画時に呼び出すメソッドを指定する <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> デリゲート。 このメソッドは、アプリケーションにより決定された基準に従って実行された <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> メソッドを停止するかどうかをチェックするため頻繁に呼び出されます。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> の指定した部分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, and **parameterReference tag is not supported!!!!**  
 parameters specify a rectangular portion, of the **parameterReference tag is not supported!!!!**  
 object to draw. The rectangle is relative to the upper\-left corner of the source image. This portion is scaled to fit inside the rectangle specified by the **parameterReference tag is not supported!!!!**  
 parameter.  
  
 This overload with the **parameterReference tag is not supported!!!!**  
 parameter provides the means to stop the drawing of an image once it starts according to criteria determined by the application. For example, an application could start drawing a large image and the user might scroll the image off the screen, in which case the application could stop the drawing.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code first defines a callback method for the <xref:System.Drawing.Graphics.DrawImageAbort> delegate; the definition is simplistic and merely tests to see whether the <xref:System.Drawing.Graphics.DrawImage%2A> method calls it with a null **parameterReference tag is not supported!!!!**  
 parameter. The main body of the example performs the following actions:  
  
-   Creates an instance of the <xref:System.Drawing.Graphics.DrawImageAbort> callback method.  
  
-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  
  
-   Creates points that define a destination rectangle in which to draw the image.  
  
-   Creates a source rectangle to select the portion of the image to draw.  
  
-   Sets the graphics drawing unit to pixel.  
  
-   Draws the original image to the screen.  
  
-   Creates an additional destination rectangle in which to draw an adjusted image.  
  
-   Creates and sets the attributes of the adjusted image to have a larger\-than\-usual gamma value.  
  
-   Draws the adjusted image to the screen.  
  
 For the original, unadjusted destination rectangle, the position locates the image on the screen, and the size of the source rectangle and the size and shape of the destination rectangle determines the scaling of the drawn image.  
  
 Because this example uses an overload that does not pass a **parameterReference tag is not supported!!!!**  
 parameter, the <xref:System.Drawing.Graphics.DrawImageAbort> callback returns **languageKeyword tag is not supported!!!!**  
, which causes the <xref:System.Drawing.Graphics.DrawImage%2A> method to end, and the exception\-handling code included in the example prints out the exception text rather than drawing the image.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#54](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#54)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#54](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#54)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#54](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs, class System.Drawing.Graphics/DrawImageAbort callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destRect">描画イメージの位置とサイズを指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。 イメージは、四角形に合わせてスケーリングされます。</param>
        <param name="srcX">描画するソース イメージの一部の左上隅の x 座標。</param>
        <param name="srcY">描画するソース イメージの一部の左上隅の y 座標。</param>
        <param name="srcWidth">描画するソース イメージの一部の幅。</param>
        <param name="srcHeight">描画するソース イメージの一部の高さ。</param>
        <param name="srcUnit">抽出元の四角形を決定するために使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="imageAttrs">
          <c>image</c> オブジェクトのカラー変更情報とガンマ情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <param name="callback">イメージの描画時に呼び出すメソッドを指定する <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> デリゲート。 このメソッドは、アプリケーションにより決定された基準に従って実行された <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" /> メソッドを停止するかどうかをチェックするため頻繁に呼び出されます。</param>
        <param name="callbackData">
          <see langword="DrawImage" /> メソッドの実行を停止するかどうかをチェックするときに使用する、<see cref="T:System.Drawing.Graphics.DrawImageAbort" /> デリゲートの追加データを指定する値。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> の指定した部分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, and **parameterReference tag is not supported!!!!**  
 parameters specify a rectangular portion, of the **parameterReference tag is not supported!!!!**  
 object to draw. The rectangle is relative to the upper\-left corner of the source image. This portion is scaled to fit inside the rectangle specified by the **parameterReference tag is not supported!!!!**  
 parameter.  
  
 This overload with the **parameterReference tag is not supported!!!!**  
 and **parameterReference tag is not supported!!!!**  
 parameters provides the means to stop the drawing of an image once it starts according to criteria and data determined by the application. For example, an application could start drawing a large image and the user might scroll the image off the screen, in which case the application could stop the drawing.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code first defines a callback method for the <xref:System.Drawing.Graphics.DrawImageAbort> delegate; the definition is simplistic and merely tests to see whether the <xref:System.Drawing.Graphics.DrawImage%2A> method calls it with a null **parameterReference tag is not supported!!!!**  
 parameter. The main body of the example performs the following actions:  
  
-   Creates an instance of the <xref:System.Drawing.Graphics.DrawImageAbort> callback method.  
  
-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  
  
-   Creates points that define a destination rectangle in which to draw the image.  
  
-   Creates a source rectangle to select the portion of the image to draw.  
  
-   Sets the graphics drawing unit to pixel.  
  
-   Draws the original image to the screen.  
  
-   Creates an additional destination rectangle in which to draw an adjusted image.  
  
-   Creates and sets the attributes of the adjusted image to have a larger\-than\-usual gamma value.  
  
-   Draws the adjusted image to the screen.  
  
 For the original, unadjusted destination rectangle, the position locates the image on the screen, and the size of the source rectangle and the size and shape of the destination rectangle determines the scaling of the drawn image.  
  
 Because this example uses an overload that passes a **parameterReference tag is not supported!!!!**  
 parameter, the <xref:System.Drawing.Graphics.DrawImageAbort> callback returns **languageKeyword tag is not supported!!!!**  
, which causes the <xref:System.Drawing.Graphics.DrawImage%2A> method to continue, and the example draws the adjusted image to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples\#51](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#51)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples\#51](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#51)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples\#51](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#51)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs, class System.Drawing.Graphics/DrawImageAbort callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="destRect">描画イメージの位置とサイズを指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。 イメージは、四角形に合わせてスケーリングされます。</param>
        <param name="srcX">描画するソース イメージの一部の左上隅の x 座標。</param>
        <param name="srcY">描画するソース イメージの一部の左上隅の y 座標。</param>
        <param name="srcWidth">描画するソース イメージの一部の幅。</param>
        <param name="srcHeight">描画するソース イメージの一部の高さ。</param>
        <param name="srcUnit">抽出元の四角形を決定するために使用する単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="imageAttrs">
          <c>image</c> オブジェクトのカラー変更情報とガンマ情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <param name="callback">イメージの描画時に呼び出すメソッドを指定する <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> デリゲート。 このメソッドは、アプリケーションにより決定された基準に従って実行された <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" /> メソッドを停止するかどうかをチェックするため頻繁に呼び出されます。</param>
        <param name="callbackData">
          <see langword="DrawImage" /> メソッドの実行を停止するかどうかをチェックするときに使用する、<see cref="T:System.Drawing.Graphics.DrawImageAbort" /> デリゲートの追加データを指定する値。</param>
        <summary>指定した位置に指定したサイズで、指定した <see cref="T:System.Drawing.Image" /> の指定した部分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, and **parameterReference tag is not supported!!!!**  
 parameters specify a rectangular portion, of the **parameterReference tag is not supported!!!!**  
 object to draw. The rectangle is relative to the upper\-left corner of the source image. This portion is scaled to fit inside the rectangle specified by the **parameterReference tag is not supported!!!!**  
 parameter.  
  
 This overload with the **parameterReference tag is not supported!!!!**  
 and **parameterReference tag is not supported!!!!**  
 parameters provides the means to stop the drawing of an image once it starts according to criteria and data determined by the application. For example, an application could start drawing a large image and the user might scroll the image off the screen, in which case the application could stop the drawing.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code first defines a callback method for the <xref:System.Drawing.Graphics.DrawImageAbort> delegate; the definition is simplistic and merely tests to see whether the <xref:System.Drawing.Graphics.DrawImage%2A> method calls it with a null **parameterReference tag is not supported!!!!**  
 parameter. The main body of the example performs the following actions:  
  
-   Creates an instance of the <xref:System.Drawing.Graphics.DrawImageAbort> callback method.  
  
-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  
  
-   Creates points that define a destination rectangle in which to draw the image.  
  
-   Creates a source rectangle to select the portion of the image to draw.  
  
-   Sets the graphics drawing unit to pixel.  
  
-   Draws the original image to the screen.  
  
-   Creates an additional destination rectangle in which to draw an adjusted image.  
  
-   Creates and sets the attributes of the adjusted image to have a larger\-than\-usual gamma value.  
  
-   Draws the adjusted image to the screen.  
  
 For the original, unadjusted destination rectangle, the position locates the image on the screen, and the size of the source rectangle and the size and shape of the destination rectangle determines the scaling of the drawn image.  
  
 Because this example uses an overload that passes a **parameterReference tag is not supported!!!!**  
 parameter, the <xref:System.Drawing.Graphics.DrawImageAbort> callback returns **languageKeyword tag is not supported!!!!**  
, which causes the <xref:System.Drawing.Graphics.DrawImage%2A> method to continue, and the example draws the adjusted image to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#55](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#55)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#55](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#55)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#55](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="point">描画するイメージの左上隅を指定する <see cref="T:System.Drawing.Point" /> 構造体。</param>
        <summary>指定した位置に、指定したイメージを元の物理サイズで描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution \(dots per inch\). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.  
  
 The <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution \(dots per inch\) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be \(216\/72\)\*96 \= 288.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates an image from a JPEG file SampImag.jpg in the folder of the example.  
  
-   Creates a point at which to draw the upper\-left corner of the image.  
  
-   Draws the entire image using its physical size.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#64](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#64)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#64](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#64)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#64](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Rectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="rect">描画するイメージの左上隅を指定する <see cref="T:System.Drawing.Rectangle" />。 四角形の X プロパティおよび Y プロパティは、左上隅を指定します。 Width プロパティおよび Height プロパティは無視されます。</param>
        <summary>指定した位置に、指定したイメージを元の物理サイズで描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution \(dots per inch\). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.  
  
 The <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution \(dots per inch\) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be \(216\/72\)\*96 \= 288.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="x">描画イメージの左上隅の x 座標。</param>
        <param name="y">描画イメージの左上隅の y 座標。</param>
        <summary>指定したイメージを座標ペアで指定された位置に元の物理サイズで描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution \(dots per inch\). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.  
  
 The <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution \(dots per inch\) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be \(216\/72\)\*96 \= 288.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates an image from a JPEG file, SampImag.jpg, in the folder of the example.  
  
-   Creates a point at which to draw the upper\-left corner of the image.  
  
-   Draws the entire image using its physical size.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#65](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#65)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#65](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#65)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#65](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#65)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="x">描画イメージの左上隅の x 座標。</param>
        <param name="y">描画イメージの左上隅の y 座標。</param>
        <param name="width">使用しません。</param>
        <param name="height">使用しません。</param>
        <summary>指定した位置に、指定したイメージを元の物理サイズで描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 An <xref:System.Drawing.Image> stores a value for pixel width and a value for horizontal resolution \(dots per inch\). The physical width, measured in inches, of an image is the pixel width divided by the horizontal resolution. For example, an image with a pixel width of 216 and a horizontal resolution of 72 dots per inch has a physical width of 3 inches. Similar remarks apply to pixel height and physical height.  
  
 The <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> method draws an image using its physical size, so the image will have its correct size in inches regardless of the resolution \(dots per inch\) of the display device. For example, suppose an image has a pixel width of 216 and a horizontal resolution of 72 dots per inch. If you call <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> to draw that image on a device that has a resolution of 96 dots per inch, the pixel width of the rendered image will be \(216\/72\)\*96 \= 288.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaledAndClipped">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaledAndClipped (System.Drawing.Image image, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaledAndClipped(class System.Drawing.Image image, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaledAndClipped(System.Drawing.Image,System.Drawing.Rectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="image">描画する <see cref="T:System.Drawing.Image" />。</param>
        <param name="rect">イメージを描画する <see cref="T:System.Drawing.Rectangle" />。</param>
        <summary>指定されたイメージをスケーリングせずに描画します。必要に応じて、指定された四角形内に収まるようにイメージをクリップします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 The following example demonstrates how to use the <xref:System.Drawing.Graphics.DrawImageUnscaledAndClipped%2A> method. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `DrawImageUnscaled` method from the <xref:System.Windows.Forms.Control.Paint> event\-handling method, passing **parameterReference tag is not supported!!!!**  
 as <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets\#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#8)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets\#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, System.Drawing.Point pt1, System.Drawing.Point pt2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, valuetype System.Drawing.Point pt1, valuetype System.Drawing.Point pt2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.Point" />
        <Parameter Name="pt2" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pen">直線の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="pt1">接続する最初の点を表す <see cref="T:System.Drawing.Point" /> 構造体。</param>
        <param name="pt2">接続する 2 番目の点を表す <see cref="T:System.Drawing.Point" /> 構造体。</param>
        <summary>2 つの <see cref="T:System.Drawing.Point" /> 構造体を接続する直線を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a black pen.  
  
-   Creates points for the endpoints of the line.  
  
-   Draws the line to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#66](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#66)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#66](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#66)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#66](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#66)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, System.Drawing.PointF pt1, System.Drawing.PointF pt2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, valuetype System.Drawing.PointF pt1, valuetype System.Drawing.PointF pt2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.PointF" />
        <Parameter Name="pt2" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="pen">直線の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="pt1">接続する最初の点を表す <see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <param name="pt2">接続する 2 番目の点を表す <see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <summary>2 つの <see cref="T:System.Drawing.PointF" /> 構造体を接続する直線を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method draws a line connecting the two points specified by the **parameterReference tag is not supported!!!!**  
 and p**parameterReference tag is not supported!!!!**  
 parameters.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a black pen.  
  
-   Creates points for the endpoints of the line.  
  
-   Draws the line to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#67](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#67)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#67](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#67)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#67](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#67)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, int x1, int y1, int x2, int y2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, int32 x1, int32 y1, int32 x2, int32 y2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x1" Type="System.Int32" />
        <Parameter Name="y1" Type="System.Int32" />
        <Parameter Name="x2" Type="System.Int32" />
        <Parameter Name="y2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">直線の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="x1">最初の点の x 座標。</param>
        <param name="y1">最初の点の y 座標。</param>
        <param name="x2">2 番目の点の x 座標。</param>
        <param name="y2">2 番目の点の y 座標。</param>
        <summary>座標ペアで指定された 2 つの点を結ぶ直線を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method draws a line connecting the two points specified by the **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, and **parameterReference tag is not supported!!!!**  
 parameters.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a black pen.  
  
-   Creates the coordinates of the endpoints of the line.  
  
-   Draws the line to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#68](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#68)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#68](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#68)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#68](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, float x1, float y1, float x2, float y2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, float32 x1, float32 y1, float32 x2, float32 y2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x1" Type="System.Single" />
        <Parameter Name="y1" Type="System.Single" />
        <Parameter Name="x2" Type="System.Single" />
        <Parameter Name="y2" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">直線の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="x1">最初の点の x 座標。</param>
        <param name="y1">最初の点の y 座標。</param>
        <param name="x2">2 番目の点の x 座標。</param>
        <param name="y2">2 番目の点の y 座標。</param>
        <summary>座標ペアで指定された 2 つの点を結ぶ直線を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method draws a line connecting the two points specified by the **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, and **parameterReference tag is not supported!!!!**  
 parameters.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a black pen.  
  
-   Creates the coordinates of the endpoints of the line.  
  
-   Draws the line to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#69](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#69)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#69](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#69)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#69](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawLines">
      <MemberSignature Language="C#" Value="public void DrawLines (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLines(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">線分の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="points">接続する複数の点を表す <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <summary>
          <see cref="T:System.Drawing.Point" /> 構造体の配列を接続する一連の線分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method draws a series of lines connecting an array of ending points. The first two points in the array specify the first line. Each additional point specifies the end of a line segment whose starting point is the ending point of the previous line segment.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a black pen.  
  
-   Creates an array of points of segments of the line.  
  
-   Draws the connected line segments to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#70](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#70)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#70](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#70)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#70](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#70)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="points" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawLines">
      <MemberSignature Language="C#" Value="public void DrawLines (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLines(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">線分の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="points">接続する複数の点を表す <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <summary>
          <see cref="T:System.Drawing.PointF" /> 構造体の配列を接続する一連の線分を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method draws a series of lines connecting an array of ending points. The first two points in the array specify the first line. Each additional point specifies the end of a line segment whose starting point is the ending point of the previous line segment.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Code creates a black pen.  
  
-   Creates an array of points of segments of the line.  
  
-   Draws the connected line segments to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#71](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#71)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#71](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#71)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#71](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#71)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="points" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPath">
      <MemberSignature Language="C#" Value="public void DrawPath (System.Drawing.Pen pen, System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPath(class System.Drawing.Pen pen, class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="pen">パスの色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="path">描画する <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />。</param>
        <summary>
          <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The current transformation in the graphic context is applied to the <xref:System.Drawing.Drawing2D.GraphicsPath> before it is drawn.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a graphics path object and adds an ellipse to it.  
  
-   Creates a black pen.  
  
-   Draws the graphics path to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#72](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#72)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#72](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#72)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#72](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#72)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="path" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">扇形の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="rect">扇形の形状の元となる楕円を定義する外接する四角形を表す <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="startAngle">x 軸から扇形の最初の辺まで、時計回りに測定した角度 \(度単位\)。</param>
        <param name="sweepAngle">
          <c>startAngle</c> パラメーターから扇形の 2 番目の辺まで、時計回りに測定した角度 \(度単位\)。</param>
        <summary>
          <see cref="T:System.Drawing.Rectangle" /> 構造体と 2 本の半径によって指定された楕円で定義される扇形を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method draws a pie shape defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle. The pie shape consists of the two radial lines defined by the **parameterReference tag is not supported!!!!**  
 and **parameterReference tag is not supported!!!!**  
 parameters, and the arc between the intersections of those radial lines with the ellipse.  
  
 If the **parameterReference tag is not supported!!!!**  
 parameter is greater than 360 degrees or less than \-360 degrees, it is treated as if it were 360 degrees or \-360 degrees, respectively.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a black pen.  
  
-   Creates a rectangle that bounds a complete ellipse.  
  
-   Defines the angles at which to start drawing \(relative to the x axis\) and through which to draw \(both in a clockwise direction\).  
  
-   Draws the pie segment to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#73](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#73)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#73](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#73)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#73](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#73)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, System.Drawing.RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">扇形の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="rect">扇形の形状の元となる楕円を定義する外接する四角形を表す <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="startAngle">x 軸から扇形の最初の辺まで、時計回りに測定した角度 \(度単位\)。</param>
        <param name="sweepAngle">
          <c>startAngle</c> パラメーターから扇形の 2 番目の辺まで、時計回りに測定した角度 \(度単位\)。</param>
        <summary>
          <see cref="T:System.Drawing.RectangleF" /> 構造体と 2 本の半径によって指定された楕円で定義される扇形を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method draws a pie shape defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle. The pie shape consists of the two radial lines defined by the **parameterReference tag is not supported!!!!**  
 and **parameterReference tag is not supported!!!!**  
 parameters, and the arc between the intersections of those radial lines with the ellipse.  
  
 If the **parameterReference tag is not supported!!!!**  
 parameter is greater than 360 degrees or less than \-360 degrees, it is treated as if it were 360 degrees or \-360 degrees, respectively.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a black pen.  
  
-   Creates a rectangle that bounds a complete ellipse.  
  
-   Defines the angles at which to start drawing \(relative to the x axis\) and through which to draw \(both in a clockwise direction\).  
  
-   Draws the pie segment to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#74](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#74)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#74](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#74)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#74](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#74)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height, int32 startAngle, int32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Int32" />
        <Parameter Name="sweepAngle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">扇形の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="x">扇形の形状の元となる楕円を定義する外接する四角形の左上隅の x 座標。</param>
        <param name="y">扇形の形状の元となる楕円を定義する外接する四角形の左上隅の x 座標。</param>
        <param name="width">扇形の形状の元となる楕円を定義する外接する四角形の幅。</param>
        <param name="height">扇形の形状の元となる楕円を定義する外接する四角形の高さ。</param>
        <param name="startAngle">x 軸から扇形の最初の辺まで、時計回りに測定した角度 \(度単位\)。</param>
        <param name="sweepAngle">
          <c>startAngle</c> パラメーターから扇形の 2 番目の辺まで、時計回りに測定した角度 \(度単位\)。</param>
        <summary>座標ペア、幅、および高さで指定された楕円と 2 本の半径によって定義される扇形を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method draws a pie shape defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle described by the **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, and **parameterReference tag is not supported!!!!**  
 parameters. The pie shape consists of the two radial lines defined by the **parameterReference tag is not supported!!!!**  
 and **parameterReference tag is not supported!!!!**  
 parameters, and the arc between the intersections of those radial lines with the ellipse.  
  
 If the **parameterReference tag is not supported!!!!**  
 parameter is greater than 360 degrees or less than \-360 degrees, it is treated as if it were 360 degrees or \-360 degrees, respectively.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a black pen.  
  
-   Creates the position and size of a rectangle that bounds a complete ellipse.  
  
-   Defines the angles at which to start drawing \(relative to the x axis\) and through which to draw \(both in a clockwise direction\).  
  
-   Draws the pie shape to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#75](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#75)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#75](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#75)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#75](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#75)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">扇形の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="x">扇形の形状の元となる楕円を定義する外接する四角形の左上隅の x 座標。</param>
        <param name="y">扇形の形状の元となる楕円を定義する外接する四角形の左上隅の x 座標。</param>
        <param name="width">扇形の形状の元となる楕円を定義する外接する四角形の幅。</param>
        <param name="height">扇形の形状の元となる楕円を定義する外接する四角形の高さ。</param>
        <param name="startAngle">x 軸から扇形の最初の辺まで、時計回りに測定した角度 \(度単位\)。</param>
        <param name="sweepAngle">
          <c>startAngle</c> パラメーターから扇形の 2 番目の辺まで、時計回りに測定した角度 \(度単位\)。</param>
        <summary>座標ペア、幅、および高さで指定された楕円と 2 本の半径によって定義される扇形を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method draws a pie shape defined by an arc of an ellipse and the two radial lines that intersect with the endpoints of the arc. The ellipse is defined by the bounding rectangle described by the **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, and **parameterReference tag is not supported!!!!**  
 parameters. The pie shape consists of the two radial lines defined by the **parameterReference tag is not supported!!!!**  
 and **parameterReference tag is not supported!!!!**  
 parameters, and the arc between the intersections of those radial lines with the ellipse.  
  
 If the **parameterReference tag is not supported!!!!**  
 parameter is greater than 360 degrees or less than \-360 degrees, it is treated as if it were 360 degrees or \-360 degrees, respectively.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a black pen.  
  
-   Creates the position and size of a rectangle that bounds a complete ellipse.  
  
-   Defines the angles at which to start drawing \(relative to the x axis\) and through which to draw \(both in a clockwise direction\).  
  
-   Draws the pie segment to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#76](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#76)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#76](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#76)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#76](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#76)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPolygon">
      <MemberSignature Language="C#" Value="public void DrawPolygon (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPolygon(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">多角形の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="points">多角形の頂点を表す <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <summary>
          <see cref="T:System.Drawing.Point" /> 構造体の配列で定義された多角形を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Every pair of two consecutive points in the array specifies a side of the polygon. In addition, if the last point and the first point of the array do not coincide, they specify the last side of the polygon.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a black pen.  
  
-   Creates an array of seven points for the vertices of the polygon.  
  
-   Draws the polygon to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#78](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#78)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#78](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#78)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#78](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#78)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPolygon">
      <MemberSignature Language="C#" Value="public void DrawPolygon (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPolygon(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">多角形の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="points">多角形の頂点を表す <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <summary>
          <see cref="T:System.Drawing.PointF" /> 構造体の配列で定義された多角形を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Every pair of two consecutive points in the array specifies a side of the polygon. In addition, if the last point and the first of the array point do not coincide, they specify the last side of the polygon.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a black pen.  
  
-   Creates an array of seven points for the vertices of the polygon.  
  
-   Draws the polygon to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#77](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#77)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#77](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#77)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#77](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#77)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="points" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawRectangle">
      <MemberSignature Language="C#" Value="public void DrawRectangle (System.Drawing.Pen pen, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangle(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Drawing.Rectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="pen">四角形の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="rect">描画する四角形を表す <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <summary>
          <see cref="T:System.Drawing.Rectangle" /> 構造体で指定された四角形を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For information about how to draw a <xref:System.Drawing.RectangleF>, see<xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29>.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a black pen.  
  
-   Creates a rectangle.  
  
-   Draws the rectangle to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#79](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#79)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#79](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#79)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#79](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#79)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawRectangle">
      <MemberSignature Language="C#" Value="public void DrawRectangle (System.Drawing.Pen pen, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangle(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">四角形の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="x">描画する四角形の左上隅の x 座標。</param>
        <param name="y">描画する四角形の左上隅の y 座標。</param>
        <param name="width">描画する四角形の幅。</param>
        <param name="height">描画する四角形の高さ。</param>
        <summary>座標ペア、幅、および高さで指定された四角形を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For information about how to draw a <xref:System.Drawing.RectangleF>, see <xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29>.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a black pen.  
  
-   Creates the position and size of a rectangle.  
  
-   Draws the rectangle to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#80](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#80)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#80](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#80)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#80](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#80)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawRectangle">
      <MemberSignature Language="C#" Value="public void DrawRectangle (System.Drawing.Pen pen, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangle(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">四角形の色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="x">描画する四角形の左上隅の x 座標。</param>
        <param name="y">描画する四角形の左上隅の y 座標。</param>
        <param name="width">描画する四角形の幅。</param>
        <param name="height">描画する四角形の高さ。</param>
        <summary>座標ペア、幅、および高さで指定された四角形を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For information about how to draw a <xref:System.Drawing.RectangleF>, see <xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29>.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a black pen.  
  
-   Creates the position and size of a rectangle.  
  
-   Draws the rectangle to the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#81](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#81)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#81](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#81)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#81](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#81)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawRectangles">
      <MemberSignature Language="C#" Value="public void DrawRectangles (System.Drawing.Pen pen, System.Drawing.Rectangle[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangles(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.Rectangle[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rects" Type="System.Drawing.Rectangle[]" />
      </Parameters>
      <Docs>
        <param name="pen">四角形のアウトラインの色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="rects">描画する四角形を表す <see cref="T:System.Drawing.Rectangle" /> 構造体の配列。</param>
        <summary>
          <see cref="T:System.Drawing.Rectangle" /> 構造体で指定された一連の四角形を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   黒のペンを作成します。  
  
-   次の 3 つの四角形の配列を作成します。  
  
-   四角形を画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#82](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#82)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#82](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#82)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#82](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="rects" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="rects" /> 長さ 0 の配列です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawRectangles">
      <MemberSignature Language="C#" Value="public void DrawRectangles (System.Drawing.Pen pen, System.Drawing.RectangleF[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangles(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rects" Type="System.Drawing.RectangleF[]" />
      </Parameters>
      <Docs>
        <param name="pen">四角形のアウトラインの色、幅、およびスタイルを決定する <see cref="T:System.Drawing.Pen" />。</param>
        <param name="rects">描画する四角形を表す <see cref="T:System.Drawing.RectangleF" /> 構造体の配列。</param>
        <summary>
          <see cref="T:System.Drawing.RectangleF" /> 構造体で指定された一連の四角形を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   黒のペンを作成します。  
  
-   次の 3 つの四角形の配列を作成します。  
  
-   四角形を画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#83](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#83)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#83](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#83)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#83](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#83)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="rects" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="rects" /> 長さ 0 の配列です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.PointF point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="s">描画する文字列。</param>
        <param name="font">文字列のテキスト形式を定義する <see cref="T:System.Drawing.Font" />。</param>
        <param name="brush">描画するテキストの色とテクスチャを決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="point">描画するテキストの左上隅を指定する <see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <summary>指定した位置に、指定した <see cref="T:System.Drawing.Brush" /> オブジェクトと <see cref="T:System.Drawing.Font" /> オブジェクトで、指定した文字列を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a text string to draw.  
  
-   Defines the font as Arial \(16pt\).  
  
-   Creates a solid, black brush to draw with.  
  
-   Creates a point for the upper\-left corner at which to draw the text.  
  
-   Draws the string to the screen using the font, brush, and destination point.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#84](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#84)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#84](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#84)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#84](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#84)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="s" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.RectangleF layoutRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF layoutRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="layoutRectangle" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="s">描画する文字列。</param>
        <param name="font">文字列のテキスト形式を定義する <see cref="T:System.Drawing.Font" />。</param>
        <param name="brush">描画するテキストの色とテクスチャを決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="layoutRectangle">描画するテキストの位置を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <summary>指定した <see cref="T:System.Drawing.Brush" /> オブジェクトと <see cref="T:System.Drawing.Font" /> オブジェクトで、指定した文字列を指定した四角形内に描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The text represented by the **parameterReference tag is not supported!!!!**  
 parameter is drawn inside the rectangle represented by the **parameterReference tag is not supported!!!!**  
 parameter. If the text does not fit inside the rectangle, it is truncated at the nearest word. To further manipulate how the string is drawn inside the rectangle use the <xref:System.Drawing.Graphics.DrawString%2A> overload that takes a <xref:System.Drawing.StringFormat>.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a text string to draw.  
  
-   Defines the font as Arial \(16pt\).  
  
-   Creates a solid, black brush to draw with.  
  
-   Creates a rectangle in which to draw the text.  
  
-   Draws the rectangle to the screen.  
  
-   Draws the string to the screen using the font, brush, and destination rectangle.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#86](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#86)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#86](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#86)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#86](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#86)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="s" /> が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.PointF point, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.PointF point, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF,System.Drawing.StringFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">描画する文字列。</param>
        <param name="font">文字列のテキスト形式を定義する <see cref="T:System.Drawing.Font" />。</param>
        <param name="brush">描画するテキストの色とテクスチャを決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="point">描画するテキストの左上隅を指定する <see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <param name="format">描画するテキストに適用する行間や配置などの書式属性を指定する <see cref="T:System.Drawing.StringFormat" />。</param>
        <summary>指定した <see cref="T:System.Drawing.StringFormat" /> の書式属性を使用して、指定した <see cref="T:System.Drawing.Brush" /> オブジェクトおよび <see cref="T:System.Drawing.Font" /> オブジェクトで、指定した位置に指定した文字列を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a text string to draw.  
  
-   Defines the font as Arial \(16pt\).  
  
-   Creates a solid, black brush to draw with.  
  
-   Creates a point for the upper\-left corner at which to draw the text.  
  
-   Sets the format of the string to draw vertically.  
  
-   Draws the string to the screen using the font, brush, destination point, and format.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#85](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#85)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#85](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#85)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#85](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#85)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="s" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.RectangleF layoutRectangle, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF layoutRectangle, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="layoutRectangle" Type="System.Drawing.RectangleF" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">描画する文字列。</param>
        <param name="font">文字列のテキスト形式を定義する <see cref="T:System.Drawing.Font" />。</param>
        <param name="brush">描画するテキストの色とテクスチャを決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="layoutRectangle">描画するテキストの位置を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="format">描画するテキストに適用する行間や配置などの書式属性を指定する <see cref="T:System.Drawing.StringFormat" />。</param>
        <summary>指定した <see cref="T:System.Drawing.StringFormat" /> の書式属性を使用して、指定した <see cref="T:System.Drawing.Brush" /> オブジェクトおよび <see cref="T:System.Drawing.Font" /> オブジェクトで、指定した四角形に指定した文字列を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The text represented by the **parameterReference tag is not supported!!!!**  
 parameter is drawn inside the rectangle represented by the **parameterReference tag is not supported!!!!**  
 parameter. If the text does not fit inside the rectangle, it is truncated at the nearest word, unless otherwise specified with the **parameterReference tag is not supported!!!!**  
 parameter.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a text string to draw.  
  
-   Defines the font as Arial \(16pt\).  
  
-   Creates a solid, black brush to draw with.  
  
-   Creates a rectangle in which to draw the text.  
  
-   Draws the rectangle to the screen.  
  
-   Sets the format of the string to center it within the rectangle.  
  
-   Draws the string to the screen using the font, brush, and destination rectangle.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#87](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#87)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#87](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#87)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#87](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="s" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="s">描画する文字列。</param>
        <param name="font">文字列のテキスト形式を定義する <see cref="T:System.Drawing.Font" />。</param>
        <param name="brush">描画するテキストの色とテクスチャを決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="x">描画するテキストの左上隅の x 座標。</param>
        <param name="y">描画するテキストの左上隅の y 座標。</param>
        <summary>指定した位置に、指定した <see cref="T:System.Drawing.Brush" /> オブジェクトと <see cref="T:System.Drawing.Font" /> オブジェクトで、指定した文字列を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a text string to draw.  
  
-   Defines the font as Arial \(16pt\).  
  
-   Creates a solid black brush to draw with.  
  
-   Creates a point for the upper\-left corner at which to draw the text.  
  
-   Draws the string to the screen using the font, brush, and destination point.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#88](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#88)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#88](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#88)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#88](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#88)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="s" /> が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, float x, float y, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, float32 x, float32 y, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single,System.Drawing.StringFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">描画する文字列。</param>
        <param name="font">文字列のテキスト形式を定義する <see cref="T:System.Drawing.Font" />。</param>
        <param name="brush">描画するテキストの色とテクスチャを決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="x">描画するテキストの左上隅の x 座標。</param>
        <param name="y">描画するテキストの左上隅の y 座標。</param>
        <param name="format">描画するテキストに適用する行間や配置などの書式属性を指定する <see cref="T:System.Drawing.StringFormat" />。</param>
        <summary>指定した <see cref="T:System.Drawing.StringFormat" /> の書式属性を使用して、指定した <see cref="T:System.Drawing.Brush" /> オブジェクトおよび <see cref="T:System.Drawing.Font" /> オブジェクトで、指定した位置に指定した文字列を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a text string to draw.  
  
-   Defines the font as Arial \(16pt\).  
  
-   Creates a solid, black brush to draw with.  
  
-   Creates the coordinates of a point for the upper\-left corner at which to draw the text.  
  
-   Sets the format of the string to draw vertically  
  
-   Draws the string to the screen using the font, brush, destination point, and format.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#89](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#89)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#89](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#89)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#89](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#89)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="s" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
      </Docs>
    </Member>
    <Member MemberName="EndContainer">
      <MemberSignature Language="C#" Value="public void EndContainer (System.Drawing.Drawing2D.GraphicsContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndContainer(class System.Drawing.Drawing2D.GraphicsContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="System.Drawing.Drawing2D.GraphicsContainer" />
      </Parameters>
      <Docs>
        <param name="container">このメソッドで復元されるコンテナーを表す <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" />。</param>
        <summary>現在のグラフィックス コンテナーを閉じ、この <see cref="T:System.Drawing.Graphics" /> の状態を、<see cref="M:System.Drawing.Graphics.BeginContainer" /> メソッドを呼び出すことによって保存されていた状態に復元します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して、 <xref:System.Drawing.Graphics.BeginContainer%2A> 入れ子になったグラフィックス コンテナーを作成します。 グラフィックス コンテナーは、変換、クリッピング領域、およびレンダリング プロパティなどのグラフィックスの状態を保持します。  
  
 呼び出すと、 <xref:System.Drawing.Graphics.BeginContainer%2A> のメソッド、 <xref:System.Drawing.Graphics>, の状態を保持する情報ブロック、 <xref:System.Drawing.Graphics> は、スタックに配置します。<xref:System.Drawing.Graphics.BeginContainer%2A> メソッドが返される、 <xref:System.Drawing.Drawing2D.GraphicsContainer> 情報ブロックを識別します。 識別するオブジェクトを渡すと、 <xref:System.Drawing.Graphics.EndContainer%2A> メソッド情報ブロックは、スタックから削除され、復元に使用、 <xref:System.Drawing.Graphics> の時点の状態を <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドの呼び出しです。  
  
 コンテナーを入れ子にすることができます。つまり、呼び出すことができます、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドを複数回呼び出す前に、 <xref:System.Drawing.Graphics.EndContainer%2A> メソッドです。 呼び出すたびに、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッド情報ブロックは、スタックに配置し、表示されたら、 <xref:System.Drawing.Drawing2D.GraphicsContainer> 情報ブロックです。 これらのオブジェクトを渡すときに、 <xref:System.Drawing.Graphics.EndContainer%2A> メソッド、 <xref:System.Drawing.Graphics> の時点の状態に返される、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドの呼び出しの <xref:System.Drawing.Drawing2D.GraphicsContainer>です。 その情報ブロックが、スタックに配置 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドの呼び出しは、スタックから削除され、その後、すべての情報ブロックがそのスタックに配置 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドの呼び出しが削除されます。  
  
 呼び出し、 <xref:System.Drawing.Graphics.Save%2A> メソッドの場所情報ブロックへの呼び出しとして同じスタック上、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドです。 同様、 <xref:System.Drawing.Graphics.EndContainer%2A> メソッドの呼び出しとペアになり、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッド呼び出し、 <xref:System.Drawing.Graphics.Restore%2A> と組み合わされて、メソッドの呼び出し、 <xref:System.Drawing.Graphics.Save%2A> メソッドの呼び出しです。  
  
 呼び出すと、 <xref:System.Drawing.Graphics.EndContainer%2A> メソッドでは、すべての情報ブロックは、スタックに配置 \(によって、 <xref:System.Drawing.Graphics.Save%2A> メソッドまたは、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッド\) に対応する呼び出しの後、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドは、スタックから削除されます。 同様に、呼び出し、 <xref:System.Drawing.Graphics.Restore%2A> メソッドでは、すべての情報ブロックは、スタックに配置 \(によって、 <xref:System.Drawing.Graphics.Save%2A> メソッドまたは、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッド\) に対応する呼び出しの後、 <xref:System.Drawing.Graphics.Save%2A> メソッドは、スタックから削除されます。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   新しいグラフィックス コンテナーを開き、古いコンテナーを保存します。  
  
-   コンテナー内のワールド座標に変換します。  
  
-   赤い長方形を入力します \(の座標を変換、\) 新しいコンテナーです。  
  
-   新しいコンテナーを閉じ、保存されているコンテナーを復元します。  
  
-   保存されているコンテナーの \(無変換座標\) 緑の四角形を格納します。  
  
 同じサイズの赤い四角形を上に重ねられます緑の四角形になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#90](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#90)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#90](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#90)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#90](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#90)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoint">描画するメタファイルの左上隅の位置を指定する <see cref="T:System.Drawing.Point" /> 構造体。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <summary>指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した点に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the **parameterReference tag is not supported!!!!**  
 parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to "play back", or draw, the record.  
  
 If the callback method calls <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  
  
   
  
## 例  
 The following code example creates a form that has a <xref:System.Drawing.Imaging.Metafile> as one of its private members. The <xref:System.Windows.Forms.Control.OnPaint%2A> method calls <xref:System.Drawing.Graphics.EnumerateMetafile%2A>, which calls the form's `MetafileCallback` method for each record in the metafile. The `MetafileCallback` method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method. Notice that the `MetafileCallback` method receives the record data as an <xref:System.IntPtr>, but the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method expects the record data to be a byte array. The call to <xref:System.Runtime.InteropServices.Marshal.Copy%2A> copies the record data to a byte array so that it can be passed to <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>.  
  
 [!code-csharp[System.Drawing.Graphics.EnumerateMetafile\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Graphics.EnumerateMetafile/CS/Form1.cs#1)]
 [!code-vb[System.Drawing.Graphics.EnumerateMetafile\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Graphics.EnumerateMetafile/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoints">描画するメタファイルのサイズと位置を決定する平行四辺形を定義する 3 つの <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <summary>指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した平行四辺形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the **parameterReference tag is not supported!!!!**  
 parameter. Typically, the callback method calls the [EnumerateMetafile メソッド \(Metafile, Point\<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to "play back", or draw, the record.  
  
 If the callback method calls**languageKeyword tag is not supported!!!!**  
[EnumerateMetafile メソッド \(Metafile, Point\<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the [EnumerateMetafile メソッド \(Metafile, Point\<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific [EnumerateMetafile メソッド \(Metafile, Point\<xref:System.Drawing.Imaging.Metafile> that is being enumerated.  
  
   
  
## 例  
 For a code example, see [EnumerateMetafile メソッド \(Metafile, Point\<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoint">描画するメタファイルの左上隅の位置を指定する <see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <summary>指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した点に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the **parameterReference tag is not supported!!!!**  
 parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to "play back", or draw, the record.  
  
 If the callback method calls**languageKeyword tag is not supported!!!!**  
<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  
  
   
  
## 例  
 For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoints">描画するメタファイルのサイズと位置を決定する平行四辺形を定義する 3 つの <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <summary>指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した平行四辺形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the **parameterReference tag is not supported!!!!**  
 parameter. Typically, the callback method calls the [EnumerateMetafile メソッド \(Metafile, PointF\<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to "play back", or draw, the record.  
  
 If the callback method calls**languageKeyword tag is not supported!!!!**  
[EnumerateMetafile メソッド \(Metafile, PointF\<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the [EnumerateMetafile メソッド \(Metafile, PointF\<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific [EnumerateMetafile メソッド \(Metafile, PointF\<xref:System.Drawing.Imaging.Metafile> that is being enumerated.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter specifies three points of a parallelogram. The three [EnumerateMetafile メソッド \(Metafile, PointF\<xref:System.Drawing.PointF> structures represent the upper\-left, upper\-right, and lower\-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram. The drawn metafile is scaled and sheared to fit the parallelogram.  
  
   
  
## 例  
 For a code example, see [EnumerateMetafile メソッド \(Metafile, PointF\<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destRect">描画するメタファイルの位置とサイズを指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <summary>指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した四角形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the **parameterReference tag is not supported!!!!**  
 parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to "play back", or draw, the record.  
  
 If the callback method calls <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  
  
   
  
## 例  
 For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destRect">描画するメタファイルの位置とサイズを指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <summary>指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した四角形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the **parameterReference tag is not supported!!!!**  
 parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to "play back", or draw, the record.  
  
 If the callback method calls <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  
  
   
  
## 例  
 For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoint">描画するメタファイルの左上隅の位置を指定する <see cref="T:System.Drawing.Point" /> 構造体。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、<see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <summary>指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した点に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the **parameterReference tag is not supported!!!!**  
 parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to "play back", or draw, the record.  
  
 If the callback method calls <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  
  
   
  
## 例  
 For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoints">描画するメタファイルのサイズと位置を決定する平行四辺形を定義する 3 つの <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、<see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <summary>指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した平行四辺形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the **parameterReference tag is not supported!!!!**  
 parameter. Typically, the callback method calls the [EnumerateMetafile メソッド \(Metafile, Point\<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to "play back", or draw, the record.  
  
 If the callback method calls [EnumerateMetafile メソッド \(Metafile, Point\<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the [EnumerateMetafile メソッド \(Metafile, Point\<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific [EnumerateMetafile メソッド \(Metafile, Point\<xref:System.Drawing.Imaging.Metafile> that is being enumerated.  
  
   
  
## 例  
 For a code example, see [EnumerateMetafile メソッド \(Metafile, Point\<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoint">描画するメタファイルの左上隅の位置を指定する <see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、<see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <summary>指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した点に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the **parameterReference tag is not supported!!!!**  
 parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to "play back", or draw, the record.  
  
 If the callback method calls**languageKeyword tag is not supported!!!!**  
<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  
  
   
  
## 例  
 For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoints">描画するメタファイルのサイズと位置を決定する平行四辺形を定義する 3 つの <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、<see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <summary>指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した平行四辺形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the **parameterReference tag is not supported!!!!**  
 parameter. Typically, the callback method calls the [EnumerateMetafile メソッド \(Metafile, PointF\<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to "play back", or draw, the record.  
  
 If the callback method calls [EnumerateMetafile メソッド \(Metafile, PointF\<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the [EnumerateMetafile メソッド \(Metafile, PointF\<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific [EnumerateMetafile メソッド \(Metafile, PointF\<xref:System.Drawing.Imaging.Metafile> that is being enumerated.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter specifies three points of a parallelogram. The three [EnumerateMetafile メソッド \(Metafile, PointF\<xref:System.Drawing.PointF> structures represent the upper\-left, upper\-right, and lower\-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram. The drawn metafile is scaled and sheared to fit the parallelogram.  
  
   
  
## 例  
 For a code example, see [EnumerateMetafile メソッド \(Metafile, PointF\<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destRect">描画するメタファイルの位置とサイズを指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、<see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <summary>指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した四角形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the **parameterReference tag is not supported!!!!**  
 parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to "play back", or draw, the record.  
  
 If the callback method calls**languageKeyword tag is not supported!!!!**  
<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  
  
   
  
## 例  
 For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destRect">描画するメタファイルの位置とサイズを指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、<see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <summary>指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した四角形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the **parameterReference tag is not supported!!!!**  
 parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to "play back", or draw, the record.  
  
 If the callback method calls <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  
  
   
  
## 例  
 For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoint">描画するメタファイルの左上隅の位置を指定する <see cref="T:System.Drawing.Point" /> 構造体。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、<see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <param name="imageAttr">描画イメージのイメージ属性情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <summary>指定したイメージ属性を使用して、指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した点に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the **parameterReference tag is not supported!!!!**  
 parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to "play back", or draw, the record.  
  
 If the callback method calls <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  
  
   
  
## 例  
 For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoint">描画するメタファイルの左上隅の位置を指定する <see cref="T:System.Drawing.Point" /> 構造体。</param>
        <param name="srcRect">左上隅を基準に相対的に、描画するメタファイルの部分を指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="srcUnit">
          <c>srcRect</c> パラメーターで指定された四角形に含まれるメタファイルの部分の決定に使用される単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <summary>
          <see cref="T:System.Drawing.Imaging.Metafile" /> から選択した四角形内のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した点に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the **parameterReference tag is not supported!!!!**  
 parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to "play back", or draw, the record.  
  
 If the callback method calls <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  
  
   
  
## 例  
 For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoints">描画するメタファイルのサイズと位置を決定する平行四辺形を定義する 3 つの <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、<see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <param name="imageAttr">描画イメージのイメージ属性情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <summary>指定したイメージ属性を使用して、指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した平行四辺形に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、指定したメタファイルに含まれているレコードを列挙します。 各レコードがで指定されたコールバック メソッドに個別に送信される、 `callback` パラメーター。 コールバック メソッドの呼び出しでは通常、 [EnumerateMetafile メソッド \(Metafile, Point\<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 「再生」、または描画、レコードのメソッドです。  
  
 コールバック メソッドを呼び出す場合[EnumerateMetafile メソッド \(Metafile, Point\<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, を呼び出してようにする必要があります、 [EnumerateMetafile メソッド \(Metafile, Point\<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 、特定のメソッド [EnumerateMetafile メソッド \(Metafile, Point\<xref:System.Drawing.Imaging.Metafile> が列挙されています。  
  
 `destPoints` パラメーターが指定した平行四辺形の 3 つのポイントを指定します。 3 つ [EnumerateMetafile メソッド \(Metafile, Point\<xref:System.Drawing.Point> 構造体が平行四辺形の左、右、左下角に丸みを表します。 平行四辺形を形成する最初の 3 つから 4 番目の点を推定します。 描画するメタファイルが拡大縮小され、平行四辺形に合わせて傾斜が設定されます。  
  
 指定したイメージ属性、 `imageAttr` メタファイルが書き込まれた指定されたパラメーター置換します。  
  
   
  
## 例  
 コード例については、「[EnumerateMetafile メソッド \(Metafile, Point\<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoints">描画するメタファイルのサイズと位置を決定する平行四辺形を定義する 3 つの <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <param name="srcRect">左上隅を基準に相対的に、描画するメタファイルの部分を指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="srcUnit">
          <c>srcRect</c> パラメーターで指定された四角形に含まれるメタファイルの部分の決定に使用される単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <summary>
          <see cref="T:System.Drawing.Imaging.Metafile" /> から選択した四角形内のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した平行四辺形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the **parameterReference tag is not supported!!!!**  
 parameter. Typically, the callback method calls the [EnumerateMetafile メソッド \(Metafile, Point\<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to "play back", or draw, the record.  
  
 If the callback method calls**languageKeyword tag is not supported!!!!**  
[EnumerateMetafile メソッド \(Metafile, Point\<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the [EnumerateMetafile メソッド \(Metafile, Point\<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific [EnumerateMetafile メソッド \(Metafile, Point\<xref:System.Drawing.Imaging.Metafile> that is being enumerated.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter specifies three points of a parallelogram. The three [EnumerateMetafile メソッド \(Metafile, Point\<xref:System.Drawing.Point> structures represent the upper\-left, upper\-right, and lower\-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram. The drawn metafile is scaled and sheared to fit the parallelogram.  
  
 Any drawing that takes place outside of the rectangle specified by the **parameterReference tag is not supported!!!!**  
 parameter is ignored.  
  
   
  
## 例  
 For a code example, see [EnumerateMetafile メソッド \(Metafile, Point\<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoint">描画するメタファイルの左上隅の位置を指定する <see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、<see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <param name="imageAttr">描画イメージのイメージ属性情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <summary>指定したイメージ属性を使用して、指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した点に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the **parameterReference tag is not supported!!!!**  
 parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to "play back", or draw, the record.  
  
 If the callback method calls**languageKeyword tag is not supported!!!!**  
<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  
  
 The image attributes specified by the **parameterReference tag is not supported!!!!**  
 parameter replace those specified when the metafile was written.  
  
   
  
## 例  
 For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoint">描画するメタファイルの左上隅の位置を指定する <see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <param name="srcRect">左上隅を基準に相対的に、描画するメタファイルの部分を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="srcUnit">
          <c>srcRect</c> パラメーターで指定された四角形に含まれるメタファイルの部分の決定に使用される単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <summary>
          <see cref="T:System.Drawing.Imaging.Metafile" /> から選択した四角形内のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した点に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the **parameterReference tag is not supported!!!!**  
 parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to "play back", or draw, the record.  
  
 If the callback method calls <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  
  
 Any drawing that takes place outside of the rectangle specified by the **parameterReference tag is not supported!!!!**  
 parameter is ignored.  
  
   
  
## 例  
 For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoints">描画するメタファイルのサイズと位置を決定する平行四辺形を定義する 3 つの <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、<see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <param name="imageAttr">描画イメージのイメージ属性情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <summary>指定したイメージ属性を使用して、指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した平行四辺形に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the **parameterReference tag is not supported!!!!**  
 parameter. Typically, the callback method calls the [EnumerateMetafile メソッド \(Metafile, PointF\<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to "play back", or draw, the record.  
  
 If the callback method calls**languageKeyword tag is not supported!!!!**  
[EnumerateMetafile メソッド \(Metafile, PointF\<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the [EnumerateMetafile メソッド \(Metafile, PointF\<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific [EnumerateMetafile メソッド \(Metafile, PointF\<xref:System.Drawing.Imaging.Metafile> that is being enumerated.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter specifies three points of a parallelogram. The three [EnumerateMetafile メソッド \(Metafile, PointF\<xref:System.Drawing.PointF> structures represent the upper\-left, upper\-right, and lower\-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram. The drawn metafile is scaled and sheared to fit the parallelogram.  
  
 The image attributes specified by the **parameterReference tag is not supported!!!!**  
 parameter replace those specified when the metafile was written.  
  
   
  
## 例  
 For a code example, see [EnumerateMetafile メソッド \(Metafile, PointF\<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoints">描画するメタファイルのサイズと位置を決定する平行四辺形を定義する 3 つの <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="srcRect">左上隅を基準に相対的に、描画するメタファイルの部分を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="srcUnit">
          <c>srcRect</c> パラメーターで指定された四角形に含まれるメタファイルの部分の決定に使用される単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <summary>
          <see cref="T:System.Drawing.Imaging.Metafile" /> から選択した四角形内のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した平行四辺形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the **parameterReference tag is not supported!!!!**  
 parameter. Typically, the callback method calls the [EnumerateMetafile メソッド \(Metafile, PointF\<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to "play back", or draw, the record.  
  
 If the callback method calls**languageKeyword tag is not supported!!!!**  
[EnumerateMetafile メソッド \(Metafile, PointF\<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the [EnumerateMetafile メソッド \(Metafile, PointF\<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific [EnumerateMetafile メソッド \(Metafile, PointF\<xref:System.Drawing.Imaging.Metafile> that is being enumerated.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter specifies three points of a parallelogram. The three [EnumerateMetafile メソッド \(Metafile, PointF\<xref:System.Drawing.Point> structures represent the upper\-left, upper\-right, and lower\-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram. The drawn metafile is scaled and sheared to fit the parallelogram.  
  
 Any drawing that takes place outside of the rectangle specified by the **parameterReference tag is not supported!!!!**  
 parameter is ignored.  
  
   
  
## 例  
 For a code example, see [EnumerateMetafile メソッド \(Metafile, PointF\<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destRect">描画するメタファイルの位置とサイズを指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、<see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <param name="imageAttr">描画イメージのイメージ属性情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <summary>指定したイメージ属性を使用して、指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した四角形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the **parameterReference tag is not supported!!!!**  
 parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to "play back", or draw, the record.  
  
 If the callback method calls <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  
  
 The image attributes specified by the **parameterReference tag is not supported!!!!**  
 parameter replace those specified when the metafile was written.  
  
   
  
## 例  
 For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destRect">描画するメタファイルの位置とサイズを指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="srcRect">左上隅を基準に相対的に、描画するメタファイルの部分を指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="srcUnit">
          <c>srcRect</c> パラメーターで指定された四角形に含まれるメタファイルの部分の決定に使用される単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <summary>
          <see cref="T:System.Drawing.Imaging.Metafile" /> から選択した四角形内のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した四角形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the **parameterReference tag is not supported!!!!**  
 parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to "play back", or draw, the record.  
  
 If the callback method calls**languageKeyword tag is not supported!!!!**  
<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  
  
 Any drawing that takes place outside of the rectangle specified by the **parameterReference tag is not supported!!!!**  
 parameter is ignored.  
  
   
  
## 例  
 For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destRect">描画するメタファイルの位置とサイズを指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、<see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <param name="imageAttr">描画イメージのイメージ属性情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <summary>指定したイメージ属性を使用して、指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した四角形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、指定したメタファイルに含まれているレコードを列挙します。 各レコードがで指定されたコールバック メソッドに個別に送信される、 `callback` パラメーター。 コールバック メソッドの呼び出しでは通常、 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 「再生」、または描画、レコードのメソッドです。  
  
 コールバック メソッドを呼び出す場合 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, を呼び出してようにする必要があります、 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 、特定のメソッド <xref:System.Drawing.Imaging.Metafile> が列挙されています。  
  
 指定したイメージ属性、 `imageAttr` メタファイルが書き込まれた指定されたパラメーター置換します。  
  
   
  
## 例  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destRect">描画するメタファイルの位置とサイズを指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="srcRect">左上隅を基準に相対的に、描画するメタファイルの部分を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="srcUnit">
          <c>srcRect</c> パラメーターで指定された四角形に含まれるメタファイルの部分の決定に使用される単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <summary>
          <see cref="T:System.Drawing.Imaging.Metafile" /> から選択した四角形内のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した四角形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the **parameterReference tag is not supported!!!!**  
 parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to "play back", or draw, the record.  
  
 If the callback method calls <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  
  
 Any drawing that takes place outside of the rectangle specified by the **parameterReference tag is not supported!!!!**  
 parameter is ignored.  
  
   
  
## 例  
 For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoint">描画するメタファイルの左上隅の位置を指定する <see cref="T:System.Drawing.Point" /> 構造体。</param>
        <param name="srcRect">左上隅を基準に相対的に、描画するメタファイルの部分を指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="srcUnit">
          <c>srcRect</c> パラメーターで指定された四角形に含まれるメタファイルの部分の決定に使用される単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、<see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <summary>
          <see cref="T:System.Drawing.Imaging.Metafile" /> から選択した四角形内のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した点に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the **parameterReference tag is not supported!!!!**  
 parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to "play back", or draw, the record.  
  
 If the callback method calls**languageKeyword tag is not supported!!!!**  
<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  
  
   
  
## 例  
 For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoints">描画するメタファイルのサイズと位置を決定する平行四辺形を定義する 3 つの <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <param name="srcRect">左上隅を基準に相対的に、描画するメタファイルの部分を指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="srcUnit">
          <c>srcRect</c> パラメーターで指定された四角形に含まれるメタファイルの部分の決定に使用される単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、<see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <summary>
          <see cref="T:System.Drawing.Imaging.Metafile" /> から選択した四角形内のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した平行四辺形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the **parameterReference tag is not supported!!!!**  
 parameter. Typically, the callback method calls the [EnumerateMetafile メソッド \(Metafile, Point\<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to "play back", or draw, the record.  
  
 If the callback method calls**languageKeyword tag is not supported!!!!**  
[EnumerateMetafile メソッド \(Metafile, Point\<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the [EnumerateMetafile メソッド \(Metafile, Point\<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific [EnumerateMetafile メソッド \(Metafile, Point\<xref:System.Drawing.Imaging.Metafile> that is being enumerated.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter specifies three points of a parallelogram. The three [EnumerateMetafile メソッド \(Metafile, Point\<xref:System.Drawing.Point> structures represent the upper\-left, upper\-right, and lower\-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram. The drawn metafile is scaled and sheared to fit the parallelogram.  
  
 Any drawing that takes place outside of the rectangle specified by the **parameterReference tag is not supported!!!!**  
 parameter is ignored.  
  
   
  
## 例  
 For a code example, see [EnumerateMetafile メソッド \(Metafile, Point\<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoint">描画するメタファイルの左上隅の位置を指定する <see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <param name="srcRect">左上隅を基準に相対的に、描画するメタファイルの部分を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="srcUnit">
          <c>srcRect</c> パラメーターで指定された四角形に含まれるメタファイルの部分の決定に使用される単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、<see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <summary>
          <see cref="T:System.Drawing.Imaging.Metafile" /> から選択した四角形内のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した点に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the **parameterReference tag is not supported!!!!**  
 parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to "play back", or draw, the record.  
  
 If the callback method calls**languageKeyword tag is not supported!!!!**  
<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  
  
 Any drawing that takes place outside of the rectangle specified by the **parameterReference tag is not supported!!!!**  
 parameter is ignored.  
  
   
  
## 例  
 For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoints">描画するメタファイルのサイズと位置を決定する平行四辺形を定義する 3 つの <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="srcRect">左上隅を基準に相対的に、描画するメタファイルの部分を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="srcUnit">
          <c>srcRect</c> パラメーターで指定された四角形に含まれるメタファイルの部分の決定に使用される単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、<see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <summary>
          <see cref="T:System.Drawing.Imaging.Metafile" /> から選択した四角形内のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した平行四辺形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the **parameterReference tag is not supported!!!!**  
 parameter. Typically, the callback method calls the [EnumerateMetafile メソッド \(Metafile, PointF\<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to "play back", or draw, the record.  
  
 If the callback method calls**languageKeyword tag is not supported!!!!**  
[EnumerateMetafile メソッド \(Metafile, PointF\<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the [EnumerateMetafile メソッド \(Metafile, PointF\<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific [EnumerateMetafile メソッド \(Metafile, PointF\<xref:System.Drawing.Imaging.Metafile> that is being enumerated.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter specifies three points of a parallelogram. The three [EnumerateMetafile メソッド \(Metafile, PointF\<xref:System.Drawing.PointF> structures represent the upper\-left, upper\-right, and lower\-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram. The drawn metafile is scaled and sheared to fit the parallelogram.  
  
 Any drawing that takes place outside of the rectangle specified by the **parameterReference tag is not supported!!!!**  
 parameter is ignored.  
  
   
  
## 例  
 For a code example, see [EnumerateMetafile メソッド \(Metafile, PointF\<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destRect">描画するメタファイルの位置とサイズを指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="srcRect">左上隅を基準に相対的に、描画するメタファイルの部分を指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="srcUnit">
          <c>srcRect</c> パラメーターで指定された四角形に含まれるメタファイルの部分の決定に使用される単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、<see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <summary>
          <see cref="T:System.Drawing.Imaging.Metafile" /> から選択した四角形内のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した四角形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the **parameterReference tag is not supported!!!!**  
 parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to "play back", or draw, the record.  
  
 If the callback method calls <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  
  
 Any drawing that takes place outside of the rectangle specified by the **parameterReference tag is not supported!!!!**  
 parameter is ignored.  
  
   
  
## 例  
 For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destRect">描画するメタファイルの位置とサイズを指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="srcRect">左上隅を基準に相対的に、描画するメタファイルの部分を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="srcUnit">
          <c>srcRect</c> パラメーターで指定された四角形に含まれるメタファイルの部分の決定に使用される単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、<see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <summary>
          <see cref="T:System.Drawing.Imaging.Metafile" /> から選択した四角形内のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した四角形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、指定したメタファイルに含まれているレコードを列挙します。 各レコードがで指定されたコールバック メソッドに個別に送信される、`callback` パラメーター。 コールバック メソッドの呼び出しでは通常、 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 「再生」、または描画、レコードのメソッドです。  
  
 コールバック メソッドを呼び出す場合 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, を呼び出してようにする必要があります、 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 、特定のメソッド <xref:System.Drawing.Imaging.Metafile> が列挙されています。  
  
 指定された四角形の外で実行されるすべての描画、 `srcRect` パラメーターは無視されます。  
  
   
  
## 例  
 コード例については、「<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoint">描画するメタファイルの左上隅の位置を指定する <see cref="T:System.Drawing.Point" /> 構造体。</param>
        <param name="srcRect">左上隅を基準に相対的に、描画するメタファイルの部分を指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="unit">
          <c>srcRect</c> パラメーターで指定された四角形に含まれるメタファイルの部分の決定に使用される単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、<see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <param name="imageAttr">描画イメージのイメージ属性情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <summary>指定したイメージ属性を使用して、<see cref="T:System.Drawing.Imaging.Metafile" /> から選択された四角形のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した点に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the **parameterReference tag is not supported!!!!**  
 parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to "play back", or draw, the record.  
  
 If the callback method calls**languageKeyword tag is not supported!!!!**  
<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  
  
   
  
## 例  
 For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoints">描画するメタファイルのサイズと位置を決定する平行四辺形を定義する 3 つの <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <param name="srcRect">左上隅を基準に相対的に、描画するメタファイルの部分を指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="unit">
          <c>srcRect</c> パラメーターで指定された四角形に含まれるメタファイルの部分の決定に使用される単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、<see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <param name="imageAttr">描画イメージのイメージ属性情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <summary>指定したイメージ属性を使用して、<see cref="T:System.Drawing.Imaging.Metafile" /> から選択された四角形のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した平行四辺形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the **parameterReference tag is not supported!!!!**  
 parameter. Typically, the callback method calls the [EnumerateMetafile メソッド \(Metafile, Point\<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to "play back", or draw, the record.  
  
 If the callback method calls**languageKeyword tag is not supported!!!!**  
[EnumerateMetafile メソッド \(Metafile, Point\<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the [EnumerateMetafile メソッド \(Metafile, Point\<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific [EnumerateMetafile メソッド \(Metafile, Point\<xref:System.Drawing.Imaging.Metafile> that is being enumerated.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter specifies three points of a parallelogram. The three [EnumerateMetafile メソッド \(Metafile, Point\<xref:System.Drawing.Point> structures represent the upper\-left, upper\-right, and lower\-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram. The drawn metafile is scaled and sheared to fit the parallelogram.  
  
 Any drawing that takes place outside of the rectangle specified by the **parameterReference tag is not supported!!!!**  
 parameter is ignored.  
  
 The image attributes specified by the **parameterReference tag is not supported!!!!**  
 parameter replace those specified when the metafile was written.  
  
   
  
## 例  
 For a code example, see [EnumerateMetafile メソッド \(Metafile, Point\<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoint">描画するメタファイルの左上隅の位置を指定する <see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <param name="srcRect">左上隅を基準に相対的に、描画するメタファイルの部分を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="unit">
          <c>srcRect</c> パラメーターで指定された四角形に含まれるメタファイルの部分の決定に使用される単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、<see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <param name="imageAttr">描画イメージのイメージ属性情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <summary>指定したイメージ属性を使用して、<see cref="T:System.Drawing.Imaging.Metafile" /> から選択された四角形のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した点に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the **parameterReference tag is not supported!!!!**  
 parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to "play back", or draw, the record.  
  
 If the callback method calls**languageKeyword tag is not supported!!!!**  
<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  
  
 Any drawing that takes place outside of the rectangle specified by the **parameterReference tag is not supported!!!!**  
 parameter is ignored.  
  
 The image attributes specified by the **parameterReference tag is not supported!!!!**  
 parameter replace those specified when the metafile was written.  
  
   
  
## 例  
 For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destPoints">描画するメタファイルのサイズと位置を決定する平行四辺形を定義する 3 つの <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="srcRect">左上隅を基準に相対的に、描画するメタファイルの部分を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="unit">
          <c>srcRect</c> パラメーターで指定された四角形に含まれるメタファイルの部分の決定に使用される単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、<see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <param name="imageAttr">描画イメージのイメージ属性情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <summary>指定したイメージ属性を使用して、<see cref="T:System.Drawing.Imaging.Metafile" /> から選択された四角形のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した平行四辺形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the **parameterReference tag is not supported!!!!**  
 parameter. Typically, the callback method calls the [EnumerateMetafile メソッド \(Metafile, PointF\<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to "play back", or draw, the record.  
  
 If the callback method calls**languageKeyword tag is not supported!!!!**  
[EnumerateMetafile メソッド \(Metafile, PointF\<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the [EnumerateMetafile メソッド \(Metafile, PointF\<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific [EnumerateMetafile メソッド \(Metafile, PointF\<xref:System.Drawing.Imaging.Metafile> that is being enumerated.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter specifies three points of a parallelogram. The three [EnumerateMetafile メソッド \(Metafile, PointF\<xref:System.Drawing.PointF> structures represent the upper\-left, upper\-right, and lower\-left corners of the parallelogram. The fourth point is extrapolated from the first three to form a parallelogram. The drawn metafile is scaled and sheared to fit the parallelogram.  
  
 Any drawing that takes place outside of the rectangle specified by the **parameterReference tag is not supported!!!!**  
 parameter is ignored.  
  
 The image attributes specified by the **parameterReference tag is not supported!!!!**  
 parameter replace those specified when the metafile was written.  
  
   
  
## 例  
 For a code example, see [EnumerateMetafile メソッド \(Metafile, PointF\<xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destRect">描画するメタファイルの位置とサイズを指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="srcRect">左上隅を基準に相対的に、描画するメタファイルの部分を指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="unit">
          <c>srcRect</c> パラメーターで指定された四角形に含まれるメタファイルの部分の決定に使用される単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、<see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <param name="imageAttr">描画イメージのイメージ属性情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <summary>指定したイメージ属性を使用して、<see cref="T:System.Drawing.Imaging.Metafile" /> から選択された四角形のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した四角形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the **parameterReference tag is not supported!!!!**  
 parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to "play back", or draw, the record.  
  
 If the callback method calls**languageKeyword tag is not supported!!!!**  
<xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  
  
 Any drawing that takes place outside of the rectangle specified by the **parameterReference tag is not supported!!!!**  
 parameter is ignored.  
  
 The image attributes specified by the **parameterReference tag is not supported!!!!**  
 parameter replace those specified when the metafile was written.  
  
   
  
## 例  
 For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">列挙する <see cref="T:System.Drawing.Imaging.Metafile" />。</param>
        <param name="destRect">描画するメタファイルの位置とサイズを指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="srcRect">左上隅を基準に相対的に、描画するメタファイルの部分を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="unit">
          <c>srcRect</c> パラメーターで指定された四角形に含まれるメタファイルの部分の決定に使用される単位を指定する <see cref="T:System.Drawing.GraphicsUnit" /> 列挙体のメンバー。</param>
        <param name="callback">メタファイル レコードの送信先のメソッドを指定する <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> デリゲート。</param>
        <param name="callbackData">必須だが無視される内部ポインター。 このパラメーターには、<see cref="F:System.IntPtr.Zero" /> を渡すことができます。</param>
        <param name="imageAttr">描画イメージのイメージ属性情報を指定する <see cref="T:System.Drawing.Imaging.ImageAttributes" />。</param>
        <summary>指定したイメージ属性を使用して、<see cref="T:System.Drawing.Imaging.Metafile" /> から選択された四角形のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した四角形内に表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method enumerates the records contained in the specified metafile. Each record is individually sent to a callback method specified by the **parameterReference tag is not supported!!!!**  
 parameter. Typically, the callback method calls the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method to "play back", or draw, the record.  
  
 If the callback method calls <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, it must do so by calling the <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> method of the specific <xref:System.Drawing.Imaging.Metafile> that is being enumerated.  
  
 Any drawing that takes place outside of the rectangle specified by the **parameterReference tag is not supported!!!!**  
 parameter is ignored.  
  
 The image attributes specified by the **parameterReference tag is not supported!!!!**  
 parameter replace those specified when the metafile was written.  
  
   
  
## 例  
 For a code example, see <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExcludeClip">
      <MemberSignature Language="C#" Value="public void ExcludeClip (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExcludeClip(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ExcludeClip(System.Drawing.Rectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">クリップ領域から除外する四角形を指定する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <summary>
          <see cref="T:System.Drawing.Rectangle" /> 構造体で指定された領域が除外されるように、この <see cref="T:System.Drawing.Graphics" /> のクリップ領域を更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method excludes the area specified by the **parameterReference tag is not supported!!!!**  
 parameter from the current clip region and assigns the resulting area to the <xref:System.Drawing.Graphics.Clip%2A> property of this <xref:System.Drawing.Graphics>.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a 100 pixel by 100 pixel rectangle whose upper\-left corner is at the coordinate \(100, 100\).  
  
-   Creates a region defined by the rectangle.  
  
-   Sets the clipping region to exclude the rectangular region.  
  
-   Fills a 300 pixel by 300 pixel rectangle whose upper\-left corner is at the coordinate \(0, 0\) with a solid blue brush.  
  
 The result is a blue rectangle with a square region toward its lower\-right corner missing.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#92](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#92)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#92](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#92)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#92](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#92)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExcludeClip">
      <MemberSignature Language="C#" Value="public void ExcludeClip (System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExcludeClip(class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ExcludeClip(System.Drawing.Region)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="region">クリップ領域から除外する領域を指定する <see cref="T:System.Drawing.Region" />。</param>
        <summary>
          <see cref="T:System.Drawing.Region" /> で指定された領域が除外されるように、この <see cref="T:System.Drawing.Graphics" /> のクリップ領域を更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method excludes the area specified by the **parameterReference tag is not supported!!!!**  
 parameter from the current clip region and assigns the resulting area to the <xref:System.Drawing.Graphics.Clip%2A> property of this <xref:System.Drawing.Graphics>.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a 100 pixel by 100 pixel rectangle whose upper\-left corner is at the coordinate \(100, 100\).  
  
-   Sets the clipping region to exclude the rectangle.  
  
-   Fills a 300 pixel by 300 pixel rectangle whose upper\-left corner is at the coordinate \(0, 0\) with a solid blue brush.  
  
 The result is a blue rectangle with a square area toward its lower\-right corner missing.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#91](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#91)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#91](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#91)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#91](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#91)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="points">スプラインを定義する <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <summary>
          <see cref="T:System.Drawing.Point" /> 構造体の配列で定義される、閉じたカーディナル スプライン曲線の内部を塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、配列内の各ポイントを通過する閉じたカーディナル スプラインの内部を塗りつぶします。 最後のポイントが最初のポイントが一致しない場合、その他の曲線セグメント内の最後のポイントからを閉じるには最初のポイントに追加されます。  
  
 点の配列には、少なくとも 4 つ含める必要があります <xref:System.Drawing.Point> 構造体。  
  
 このメソッドは、0.5 の既定のテンションを使用します。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   赤いソリッド ブラシを作成します。  
  
-   スプラインを定義する 4 つの点の配列を作成します。  
  
-   画面の曲線を格納します。  
  
 曲線のテンション 0.5 の既定値です。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#93](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#93)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#93](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#93)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#93](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#93)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="points" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="points">スプラインを定義する <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <summary>
          <see cref="T:System.Drawing.PointF" /> 構造体の配列で定義される、閉じたカーディナル スプライン曲線の内部を塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、配列内の各ポイントを通過する閉じたカーディナル スプラインの内部を塗りつぶします。 最後のポイントが最初のポイントが一致しない場合、その他の曲線セグメント内の最後のポイントからを閉じるには最初のポイントに追加されます。  
  
 点の配列には、少なくとも 4 つ含める必要があります <xref:System.Drawing.PointF> 構造体。  
  
 このメソッドは、0.5 の既定のテンションを使用します。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   赤いソリッド ブラシを作成します。  
  
-   スプラインを定義する 4 つの点の配列を作成します。  
  
-   画面の曲線を格納します。  
  
 曲線のテンション 0.5 の既定値です。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#96](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#96)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#96](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#96)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#96](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#96)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="points" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="points">スプラインを定義する <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <param name="fillmode">曲線を塗りつぶす方法を決定する <see cref="T:System.Drawing.Drawing2D.FillMode" /> 列挙体のメンバー。</param>
        <summary>
          <see cref="T:System.Drawing.Point" /> 構造体の配列で定義される、閉じたカーディナル スプライン曲線の内部を指定の塗りつぶしモードで塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、配列内の各ポイントを通過する閉じたカーディナル スプラインの内部を塗りつぶします。 最後のポイントが最初のポイントが一致しない場合、その他の曲線セグメント内の最後のポイントからを閉じるには最初のポイントに追加されます。  
  
 点の配列には、少なくとも 4 つ含める必要があります [FillClosedCurve メソッド \(Brush, Point\<xref:System.Drawing.Point> 構造体。  
  
 このメソッドは、0.5 の既定のテンションを使用します。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な [FillClosedCurve メソッド \(Brush, Point\<xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 [FillClosedCurve メソッド \(Brush, Point\<xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   赤いソリッド ブラシを作成します。  
  
-   スプラインを定義する 4 つの点の配列を作成します。  
  
-   フィル モードに設定 [FillClosedCurve メソッド \(Brush, Point\<xref:System.Drawing.Drawing2D.FillMode.Winding>します。  
  
-   画面の曲線を格納します。  
  
 曲線のテンション 0.5 の既定値です。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#94](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#94)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#94](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#94)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#94](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#94)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="points" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="points">スプラインを定義する <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="fillmode">曲線を塗りつぶす方法を決定する <see cref="T:System.Drawing.Drawing2D.FillMode" /> 列挙体のメンバー。</param>
        <summary>
          <see cref="T:System.Drawing.PointF" /> 構造体の配列で定義される、閉じたカーディナル スプライン曲線の内部を指定の塗りつぶしモードで塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、配列内の各ポイントを通過する閉じたカーディナル スプラインの内部を塗りつぶします。 最後のポイントが最初のポイントが一致しない場合、その他の曲線セグメント内の最後のポイントからを閉じるには最初のポイントに追加されます。  
  
 点の配列には、少なくとも 4 つ含める必要があります [FillClosedCurve メソッド \(Brush, PointF\<xref:System.Drawing.Point> 構造体。  
  
 このメソッドは、0.5 の既定のテンションを使用します。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な [FillClosedCurve メソッド \(Brush, PointF\<xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 [FillClosedCurve メソッド \(Brush, PointF\<xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   赤いソリッド ブラシを作成します。  
  
-   スプラインを定義する 4 つの点の配列を作成します。  
  
-   フィル モードに設定 [FillClosedCurve メソッド \(Brush, PointF\<xref:System.Drawing.Drawing2D.FillMode.Winding>します。  
  
-   画面の曲線を格納します。  
  
 曲線のテンション 0.5 の既定値です。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#97](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#97)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#97](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#97)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#97](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#97)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="points" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillmode, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="points">スプラインを定義する <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <param name="fillmode">曲線を塗りつぶす方法を決定する <see cref="T:System.Drawing.Drawing2D.FillMode" /> 列挙体のメンバー。</param>
        <param name="tension">曲線のテンションを指定する 0.0F 以上の値。</param>
        <summary>
          <see cref="T:System.Drawing.Point" /> 構造体の配列で定義される、閉じたカーディナル スプライン曲線の内部を指定の塗りつぶしモードおよびテンションで塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、配列内の各ポイントを通過する閉じたカーディナル スプラインの内部を塗りつぶします。 最後のポイントが最初のポイントが一致しない場合、その他の曲線セグメント内の最後のポイントからを閉じるには最初のポイントに追加されます。  
  
 点の配列には、少なくとも 4 つ含める必要があります [FillClosedCurve メソッド \(Brush, Point\<xref:System.Drawing.Point> 構造体。  
  
 `tension` スプラインの形状を指定します。 場合の値、 `tension` パラメーターが 0.0 f は、このメソッドは、ポイントを接続する直線の線分を描画します。 通常、 `tension` パラメーターが 1.0F 小さいです。 1.0 f を超える値は、予期しない結果を生成します。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な [FillClosedCurve メソッド \(Brush, Point\<xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 [FillClosedCurve メソッド \(Brush, Point\<xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   赤いソリッド ブラシを作成します。  
  
-   スプラインを定義する 4 つの点の配列を作成します。  
  
-   フィル モードに設定 [FillClosedCurve メソッド \(Brush, Point\<xref:System.Drawing.Drawing2D.FillMode.Winding>します。  
  
-   テンションを 1.0 に設定します。  
  
-   画面の曲線を格納します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#95](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#95)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#95](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#95)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#95](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#95)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="points" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillmode, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="points">スプラインを定義する <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="fillmode">曲線を塗りつぶす方法を決定する <see cref="T:System.Drawing.Drawing2D.FillMode" /> 列挙体のメンバー。</param>
        <param name="tension">曲線のテンションを指定する 0.0F 以上の値。</param>
        <summary>
          <see cref="T:System.Drawing.PointF" /> 構造体の配列で定義される、閉じたカーディナル スプライン曲線の内部を指定の塗りつぶしモードおよびテンションで塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、配列内の各ポイントを通過する閉じたカーディナル スプラインの内部を塗りつぶします。 最後のポイントが最初のポイントが一致しない場合、その他の曲線セグメント内の最後のポイントからを閉じるには最初のポイントに追加されます。  
  
 点の配列には、少なくとも 4 つ含める必要があります [FillClosedCurve メソッド \(Brush, PointF\<xref:System.Drawing.Point> 構造体。  
  
 `tension` スプラインの形状を指定します。 場合の値、 `tension` パラメーターが 0.0 f は、このメソッドは、ポイントを接続する直線の線分を描画します。 通常、 `tension` パラメーターが 1.0F 小さいです。 1.0 f を超える値は、予期しない結果を生成します。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な [FillClosedCurve メソッド \(Brush, PointF\<xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 [FillClosedCurve メソッド \(Brush, PointF\<xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   赤いソリッド ブラシを作成します。  
  
-   スプラインを定義する 4 つの点の配列を作成します。  
  
-   フィル モードに設定 [FillClosedCurve メソッド \(Brush, PointF\<xref:System.Drawing.Drawing2D.FillMode.Winding>します。  
  
-   テンションを 1.0 に設定します。  
  
-   画面の曲線を格納します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#98](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#98)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#98](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#98)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#98](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="points" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.Rectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="rect">楕円を定義する外接する四角形を表す <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <summary>
          <see cref="T:System.Drawing.Rectangle" /> 構造体で指定された外接する四角形によって定義される楕円の内部を塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、楕円の内部を塗りつぶします、 <xref:System.Drawing.Brush>です。 によって表される外接する四角形、楕円を定義、 `rect` パラメーター。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   赤いソリッド ブラシを作成します。  
  
-   楕円に外接する四角形を作成します。  
  
-   画面上の楕円を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#99](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#99)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#99](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#99)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#99](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#99)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.RectangleF)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="rect">楕円を定義する外接する四角形を表す <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <summary>
          <see cref="T:System.Drawing.RectangleF" /> 構造体で指定された外接する四角形によって定義される楕円の内部を塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、楕円の内部を塗りつぶします、 <xref:System.Drawing.Brush>です。 によって表される外接する四角形、楕円を定義、 `rect` パラメーター。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   赤いソリッド ブラシを作成します。  
  
-   楕円に外接する四角形を作成します。  
  
-   画面上の楕円を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#100](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#100)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#100](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#100)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#100](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#100)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="x">楕円を定義する外接する四角形の左上隅の x 座標。</param>
        <param name="y">楕円を定義する外接する四角形の左上隅の y 座標。</param>
        <param name="width">楕円を定義する外接する四角形の幅。</param>
        <param name="height">楕円を定義する外接する四角形の高さ。</param>
        <summary>座標ペア、高さ、および幅で指定された外接する四角形によって定義される楕円を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、楕円の内部を塗りつぶします、 <xref:System.Drawing.Brush>です。 によって表される外接する四角形、楕円を定義、 `x`, 、`y`, 、`width`, 、および `height` パラメーター。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   赤いソリッド ブラシを作成します。  
  
-   楕円に外接する四角形のサイズと場所を作成します。  
  
-   画面上の楕円を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#101](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#101)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#101](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#101)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#101](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#101)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="x">楕円を定義する外接する四角形の左上隅の x 座標。</param>
        <param name="y">楕円を定義する外接する四角形の左上隅の y 座標。</param>
        <param name="width">楕円を定義する外接する四角形の幅。</param>
        <param name="height">楕円を定義する外接する四角形の高さ。</param>
        <summary>座標ペア、高さ、および幅で指定された外接する四角形によって定義される楕円を描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、楕円の内部を塗りつぶします、 <xref:System.Drawing.Brush>です。 によって表される外接する四角形、楕円を定義、 `x`, 、`y`, 、`width`, 、および `height` パラメーター。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   赤いソリッド ブラシを作成します。  
  
-   楕円に外接する四角形のサイズと場所を作成します。  
  
-   画面上の楕円を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#102](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#102)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#102](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#102)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#102](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#102)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPath">
      <MemberSignature Language="C#" Value="public void FillPath (System.Drawing.Brush brush, System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPath(class System.Drawing.Brush brush, class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPath(System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="path">塗りつぶし対象のパスを表す <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />。</param>
        <summary>
          <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> の内部を塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Drawing.Drawing2D.GraphicsPath> 一連の直線と曲線のセグメントから成ります。 パスがによって表される場合、 `path` パラメーターが閉じられていない追加の線分が最後のポイントから、パスを閉じるには、最初の点に追加します。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   赤いソリッド ブラシを作成します。  
  
-   グラフィックス パス オブジェクトを作成します。  
  
-   グラフィックス パスに楕円を追加します。  
  
-   画面上のパスを入力します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#103](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#103)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#103](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#103)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#103](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#103)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="path" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPie">
      <MemberSignature Language="C#" Value="public void FillPie (System.Drawing.Brush brush, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPie(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Drawing.Rectangle,System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="rect">扇形の元となる楕円を定義する外接する四角形を表す <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="startAngle">x 軸から扇形の最初の辺まで、時計回りに測定した角度 \(度単位\)。</param>
        <param name="sweepAngle">
          <c>startAngle</c> パラメーターから扇形の 2 番目の辺まで、時計回りに測定した角度 \(度単位\)。</param>
        <summary>
          <see cref="T:System.Drawing.RectangleF" /> 構造体と 2 本の半径によって指定された楕円で定義される扇形の内部を塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、円弧の終了点と楕円と交差する 2 つの放射状行数円弧によって定義される扇形の内部を塗りつぶします。 楕円は、外接する四角形によって定義されます。 扇形によって定義された 2 つの放射状行で構成、 `startAngle` と `sweepAngle` パラメーターと楕円放射状その行の交差部分の間で円を作成します。  
  
 場合、 `sweepAngle` パラメーターが 360 度またはより小さい\-360 度より大きい、360 度または\-360 度をそれぞれが、場合と同様に扱われます。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   赤いソリッド ブラシを作成します。  
  
-   楕円に外接する四角形を作成します。  
  
-   \(X 軸\) を基準と開始角度および掃引角度 \(時計回りの両方\) を定義します。  
  
-   画面上の楕円のパイ領域を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#104](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#104)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#104](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#104)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#104](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#104)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPie">
      <MemberSignature Language="C#" Value="public void FillPie (System.Drawing.Brush brush, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPie(class System.Drawing.Brush brush, int32 x, int32 y, int32 width, int32 height, int32 startAngle, int32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Int32" />
        <Parameter Name="sweepAngle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="x">扇形の元となる楕円を定義する外接する四角形の左上隅の x 座標。</param>
        <param name="y">扇形の元となる楕円を定義する外接する四角形の左上隅の x 座標。</param>
        <param name="width">扇形の元となる楕円を定義する外接する四角形の幅。</param>
        <param name="height">扇形の元となる楕円を定義する外接する四角形の高さ。</param>
        <param name="startAngle">x 軸から扇形の最初の辺まで、時計回りに測定した角度 \(度単位\)。</param>
        <param name="sweepAngle">
          <c>startAngle</c> パラメーターから扇形の 2 番目の辺まで、時計回りに測定した角度 \(度単位\)。</param>
        <summary>座標ペア、幅、および高さで指定された楕円と 2 本の半径によって定義される扇形の内部を塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、円弧の終了点と楕円と交差する 2 つの放射状行数円弧によって定義される扇形の内部を塗りつぶします。 楕円は、外接する四角形によって定義されます。 扇形によって定義された 2 つの放射状行で構成、 `startAngle` と `sweepAngle` パラメーターと楕円放射状その行の交差部分の間で円を作成します。  
  
 場合、 `sweepAngle` パラメーターが 360 度またはより小さい\-360 度より大きい、360 度または\-360 度をそれぞれが、場合と同様に扱われます。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   赤いソリッド ブラシを作成します。  
  
-   楕円に外接する四角形のサイズと場所を作成します。  
  
-   \(X 軸\) を基準と開始角度および掃引角度 \(時計回りの両方\) を定義します。  
  
-   画面上の楕円のパイ領域を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#105](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#105)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#105](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#105)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#105](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#105)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPie">
      <MemberSignature Language="C#" Value="public void FillPie (System.Drawing.Brush brush, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPie(class System.Drawing.Brush brush, float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="x">扇形の元となる楕円を定義する外接する四角形の左上隅の x 座標。</param>
        <param name="y">扇形の元となる楕円を定義する外接する四角形の左上隅の x 座標。</param>
        <param name="width">扇形の元となる楕円を定義する外接する四角形の幅。</param>
        <param name="height">扇形の元となる楕円を定義する外接する四角形の高さ。</param>
        <param name="startAngle">x 軸から扇形の最初の辺まで、時計回りに測定した角度 \(度単位\)。</param>
        <param name="sweepAngle">
          <c>startAngle</c> パラメーターから扇形の 2 番目の辺まで、時計回りに測定した角度 \(度単位\)。</param>
        <summary>座標ペア、幅、および高さで指定された楕円と 2 本の半径によって定義される扇形の内部を塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、円弧の終了点と楕円と交差する 2 つの放射状行数円弧によって定義される扇形の内部を塗りつぶします。 楕円は、外接する四角形によって定義されます。 扇形によって定義された 2 つの放射状行で構成、 `startAngle` と `sweepAngle` パラメーター、および楕円放射状その行の交差部分の間で円を作成します。  
  
 場合、 `sweepAngle` パラメーターが 360 度またはより小さい\-360 度より大きい、360 度または\-360 度をそれぞれが、場合と同様に扱われます。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   赤いソリッド ブラシを作成します。  
  
-   楕円に外接する四角形のサイズと場所を作成します。  
  
-   \(X 軸\) を基準と開始角度および掃引角度 \(時計回りの両方\) を定義します。  
  
-   画面上の楕円のパイ領域を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#106](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#106)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#106](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#106)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#106](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#106)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="points">塗りつぶす多角形の頂点を表す <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <summary>
          <see cref="T:System.Drawing.Point" /> 構造体で指定された点の配列によって定義される多角形の内部を塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 配列内のすべて 2 つの連続する点では、多角形の辺を指定します。 さらに、最後の点と最初のポイントが一致しない場合、多角形の決算辺を指定します。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   青の単色ブラシを作成します。  
  
-   多角形を定義するための 7 つの点の配列を作成します。  
  
-   画面上の多角形の領域を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#107](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#107)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#107](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#107)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#107](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#107)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="points" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="points">塗りつぶす多角形の頂点を表す <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <summary>
          <see cref="T:System.Drawing.PointF" /> 構造体で指定された点の配列によって定義される多角形の内部を塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 配列内のすべて 2 つの連続する点では、多角形の辺を指定します。 さらに、最後の点と最初のポイントが一致しない場合、多角形の決算辺を指定します。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   青の単色ブラシを作成します。  
  
-   多角形を定義するための 7 つの点の配列を作成します。  
  
-   画面上の多角形の領域を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#109](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#109)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#109](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#109)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#109](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#109)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="points" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points, valuetype System.Drawing.Drawing2D.FillMode fillMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="fillMode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="points">塗りつぶす多角形の頂点を表す <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <param name="fillMode">塗りつぶしのスタイルを決定する <see cref="T:System.Drawing.Drawing2D.FillMode" /> 列挙体のメンバー。</param>
        <summary>
          <see cref="T:System.Drawing.Point" /> 構造体で指定された点の配列によって定義される多角形の内部を指定の塗りつぶしモードで塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 配列内のすべて 2 つの連続する点では、多角形の辺を指定します。 さらに、最後の点と最初のポイントが一致しない場合、多角形の決算辺を指定します。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な [FillPolygon メソッド \(Brush, Point\<xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 [FillPolygon メソッド \(Brush, Point\<xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   青の単色ブラシを作成します。  
  
-   多角形を定義するための 7 つの点の配列を作成します。  
  
-   フィル モードに設定 [FillPolygon メソッド \(Brush, Point\<xref:System.Drawing.Drawing2D.FillMode.Winding>します。  
  
-   画面上の多角形の領域を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#108](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#108)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#108](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#108)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#108](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#108)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="points" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points, valuetype System.Drawing.Drawing2D.FillMode fillMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="fillMode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="points">塗りつぶす多角形の頂点を表す <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <param name="fillMode">塗りつぶしのスタイルを決定する <see cref="T:System.Drawing.Drawing2D.FillMode" /> 列挙体のメンバー。</param>
        <summary>
          <see cref="T:System.Drawing.PointF" /> 構造体で指定された点の配列によって定義される多角形の内部を指定の塗りつぶしモードで塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 配列内のすべて 2 つの連続する点では、多角形の辺を指定します。 さらに、最後の点と最初のポイントが一致しない場合、多角形の決算辺を指定します。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な [FillPolygon メソッド \(Brush, PointF\<xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 [FillPolygon メソッド \(Brush, PointF\<xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードでは、次の操作を実行します。  
  
-   青の単色ブラシを作成します。  
  
-   多角形を定義するための 7 つの点の配列を作成します。  
  
-   フィル モードに設定 [FillPolygon メソッド \(Brush, PointF\<xref:System.Drawing.Drawing2D.FillMode.Winding>します。  
  
-   画面上の多角形の領域を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2\#110](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#110)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2\#110](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#110)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2\#110](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#110)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="points" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.Rectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="rect">塗りつぶす四角形を表す <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <summary>
          <see cref="T:System.Drawing.Rectangle" /> 構造体で指定された四角形の内部を塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドが定義された四角形の内部を塗りつぶします、 `rect` パラメーターを含む指定した左上コーナー、計算されるまで削減および下端揃え。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードでは、次の操作を実行します。  
  
-   青の単色ブラシを作成します。  
  
-   四角形を作成します。  
  
-   画面上の四角形の領域を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#111](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#111)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#111](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#111)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#111](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#111)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="rect">塗りつぶす四角形を表す <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <summary>
          <see cref="T:System.Drawing.RectangleF" /> 構造体で指定された四角形の内部を塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドが定義された四角形の内部を塗りつぶします、 `rect` パラメーターを含む指定した左上コーナー、計算されるまで削減および下端揃え。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードでは、次の操作を実行します。  
  
-   青の単色ブラシを作成します。  
  
-   四角形を作成します。  
  
-   画面上の四角形の領域を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#112](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#112)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#112](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#112)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#112](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#112)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="x">塗りつぶす四角形の左上隅の x 座標。</param>
        <param name="y">塗りつぶす四角形の左上隅の y 座標。</param>
        <param name="width">塗りつぶす四角形の幅。</param>
        <param name="height">塗りつぶす四角形の高さ。</param>
        <summary>座標ペア、幅、および高さで指定された四角形の内部を塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドが定義された四角形の内部を塗りつぶします、`x`, 、`y`, 、`width`, 、および `height` パラメーターも指定した左上隅、計算されるまで削減し、下端揃え。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードでは、次の操作を実行します。  
  
-   青の単色ブラシを作成します。  
  
-   四角形のサイズと場所を作成します。  
  
-   画面上の四角形の領域を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#113](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#113)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#113](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#113)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#113](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#113)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="x">塗りつぶす四角形の左上隅の x 座標。</param>
        <param name="y">塗りつぶす四角形の左上隅の y 座標。</param>
        <param name="width">塗りつぶす四角形の幅。</param>
        <param name="height">塗りつぶす四角形の高さ。</param>
        <summary>座標ペア、幅、および高さで指定された四角形の内部を塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドが定義された四角形の内部を塗りつぶします、 `x`, 、`y`, 、`width`, 、および `height` パラメーターも指定した左上隅、計算されるまで削減し、下端揃え。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードでは、次の操作を実行します。  
  
-   青の単色ブラシを作成します。  
  
-   四角形のサイズと場所を作成します。  
  
-   画面上の四角形の領域を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#114](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#114)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#114](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#114)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#114](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#114)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangles">
      <MemberSignature Language="C#" Value="public void FillRectangles (System.Drawing.Brush brush, System.Drawing.Rectangle[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangles(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.Rectangle[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rects" Type="System.Drawing.Rectangle[]" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="rects">塗りつぶす四角形を表す <see cref="T:System.Drawing.Rectangle" /> 構造体の配列。</param>
        <summary>
          <see cref="T:System.Drawing.Rectangle" /> 構造体で指定された一連の四角形の内部を塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following action:  
  
-   Creates a solid blue brush.  
  
-   Creates an array of three rectangles.  
  
-   Fills the three rectangular areas on the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#115](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#115)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#115](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#115)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#115](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#115)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="rects" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="rects" /> は長さゼロの配列です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangles">
      <MemberSignature Language="C#" Value="public void FillRectangles (System.Drawing.Brush brush, System.Drawing.RectangleF[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangles(class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.RectangleF[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rects" Type="System.Drawing.RectangleF[]" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="rects">塗りつぶす四角形を表す <see cref="T:System.Drawing.RectangleF" /> 構造体の配列。</param>
        <summary>
          <see cref="T:System.Drawing.RectangleF" /> 構造体で指定された一連の四角形の内部を塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following action:  
  
-   Creates a solid blue brush.  
  
-   Creates an array of three rectangles.  
  
-   Fills the three rectangular areas on the screen.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#116](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#116)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#116](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#116)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#116](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#116)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="rects" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Rects" /> は長さゼロの配列です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRegion">
      <MemberSignature Language="C#" Value="public void FillRegion (System.Drawing.Brush brush, System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRegion(class System.Drawing.Brush brush, class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRegion(System.Drawing.Brush,System.Drawing.Region)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="brush">塗りつぶしの特性を決定する <see cref="T:System.Drawing.Brush" />。</param>
        <param name="region">塗りつぶす領域を表す <see cref="T:System.Drawing.Region" />。</param>
        <summary>
          <see cref="T:System.Drawing.Region" /> の内部を塗りつぶします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Drawing.Region> は四角形とパスで構成されます。 リージョンが閉じられていない場合、追加のセグメントを閉じるには最初のポイントに最後のポイントから追加されます。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードでは、次の操作を実行します。  
  
-   青の単色ブラシを作成します。  
  
-   四角形を作成します。  
  
-   四角形の領域を作成します。  
  
-   画面上の四角形の領域を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#117](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#117)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#117](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#117)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#117](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#117)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="region" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Graphics ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Finalize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>オブジェクトが、ガベージ コレクションによって収集される前に、リソースの解放とその他のクリーンアップ操作の実行を試みることができるようにします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Flush" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>保留中のグラフィックス操作をすべて強制実行し、操作の終了を待機せずにすぐに制御を戻します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、フラッシュを開始し、現在実行中のグラフィックス操作の完了を待たずに直ちに返されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush (System.Drawing.Drawing2D.FlushIntention intention);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush(valuetype System.Drawing.Drawing2D.FlushIntention intention) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Flush(System.Drawing.Drawing2D.FlushIntention)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intention" Type="System.Drawing.Drawing2D.FlushIntention" />
      </Parameters>
      <Docs>
        <param name="intention">メソッドがすぐに制御を戻すか、既存の操作が終了するまで待機するかを指定する、<see cref="T:System.Drawing.Drawing2D.FlushIntention" /> 列挙体のメンバー。</param>
        <summary>メソッドが保留中のグラフィックス操作を待機しているかどうかにかかわらず、すべての保留中のグラフィックス操作を指定どおりに強制実行し、操作が終了する前に制御を戻します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値 <xref:System.Drawing.Drawing2D.FlushIntention.Flush> の `intention` パラメーターを指定の値の中に、フラッシュを開始した後すぐに、メソッドが返すを <xref:System.Drawing.Drawing2D.FlushIntention.Sync> 、既存の操作が完了するまでに、メソッドが戻る前に待機するかを指定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromHdc">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHdc (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHdc(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHdc(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">デバイス コンテキストを識別するハンドル。</param>
        <summary>デバイス コンテキストを識別する指定のハンドルから新しい <see cref="T:System.Drawing.Graphics" /> を作成します。</summary>
        <returns>このメソッドは、指定のデバイス コンテキストの新しい <see cref="T:System.Drawing.Graphics" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 常に呼び出す、 <xref:System.Drawing.Graphics.Dispose%2A> を解放するメソッド、 <xref:System.Drawing.Graphics> 関連リソースを作成し、 <xref:System.Drawing.Graphics.FromHdc%2A> メソッドです。  
  
 ディスプレイ デバイスに関連付けられている ICM カラー プロファイルがある場合でも [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] が既定でそのプロファイルを使用できません。 ICM を有効にする、 <xref:System.Drawing.Graphics>, 、構築、 <xref:System.Drawing.Graphics> HDC、HDC \(ICM\_ON\) を渡した後から、 `SetICMMode` 関数です。 すべての描画、 <xref:System.Drawing.Graphics> ディスプレイ デバイスに関連付けられている ICM プロファイルに応じて調整されます。 ICM を有効にすると、パフォーマンスの低下が発生します。  
  
 時にデバイス コンテキスト \(マップ モード、論理ユニットおよびなど\) の状態を呼び出す <xref:System.Drawing.Graphics.FromHdc%2A> 、レンダリングに影響を与える、 <xref:System.Drawing.Graphics>です。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードでは、次の操作を実行します。  
  
-   内部ポインター型の変数を作成 `hdc` し、フォームの graphics オブジェクトのデバイス コンテキストへのハンドルに設定します。  
  
-   新しいグラフィックスを使用するオブジェクトを作成 `hdc`します。  
  
-   \(画面\) 上には、新しいグラフィックス オブジェクトを含む四角形を描画します。  
  
-   新しいグラフィックス オブジェクトを使用して、解放 `hdc`します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#118](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#118)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#118](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#118)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#118](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#118)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromHdc">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHdc (IntPtr hdc, IntPtr hdevice);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHdc(native int hdc, native int hdevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHdc(System.IntPtr,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
        <Parameter Name="hdevice" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">デバイス コンテキストを識別するハンドル。</param>
        <param name="hdevice">デバイスを識別するハンドル。</param>
        <summary>デバイス コンテキストを識別する指定のハンドルと、デバイスを識別する指定のハンドルから、新しい <see cref="T:System.Drawing.Graphics" /> を作成します。</summary>
        <returns>このメソッドは、指定のデバイス コンテキストおよびデバイスの新しい <see cref="T:System.Drawing.Graphics" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 常に呼び出す、 <xref:System.Drawing.Graphics.Dispose%2A> を解放するメソッド、 <xref:System.Drawing.Graphics> 関連リソースを作成し、 <xref:System.Drawing.Graphics.FromHdc%2A> メソッドです。  
  
 ディスプレイ デバイスに関連付けられている ICM カラー プロファイルがある場合でも [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] が既定でそのプロファイルを使用できません。 ICM を有効にする、 <xref:System.Drawing.Graphics>, 、構築、 <xref:System.Drawing.Graphics> HDC、HDC \(ICM\_ON\) を渡した後から、 `SetICMMode` 関数です。 すべての描画、 <xref:System.Drawing.Graphics> ディスプレイ デバイスに関連付けられている ICM プロファイルに応じて調整されます。 ICM を有効にすると、パフォーマンスの低下が発生します。  
  
 時にデバイス コンテキスト \(マップ モード、論理ユニットおよびなど\) の状態を呼び出す <xref:System.Drawing.Graphics.FromHdc%2A> 、レンダリングに影響を与える、 <xref:System.Drawing.Graphics>です。  
  
 デバイス ハンドルは通常、クエリの特定のプリンターの機能に使用されます。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for access to unmanaged code. Related enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="FromHdcInternal">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHdcInternal (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHdcInternal(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHdcInternal(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">デバイス コンテキストを識別するハンドル。</param>
        <summary>指定したデバイス コンテキストの <see cref="T:System.Drawing.Graphics" /> を返します。</summary>
        <returns>指定したデバイス コンテキストの <see cref="T:System.Drawing.Graphics" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用しない必要があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromHwnd">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHwnd (IntPtr hwnd);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHwnd(native int hwnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHwnd(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hwnd">ウィンドウを識別するハンドル。</param>
        <summary>ウィンドウを識別する指定のハンドルから新しい <see cref="T:System.Drawing.Graphics" /> を作成します。</summary>
        <returns>このメソッドは、指定のウィンドウ ハンドルの新しい <see cref="T:System.Drawing.Graphics" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 常に呼び出す、<xref:System.Drawing.Graphics.Dispose%2A> を解放するメソッド、 <xref:System.Drawing.Graphics> 関連リソースを作成し、 <xref:System.Drawing.Graphics.FromHwnd%2A> メソッドです。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, のパラメーターは、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーだけでなく `thisForm`, 、 <xref:System.Windows.Forms.Form> の例です。 コードは、次のアクションを実行します。  
  
-   新しい内部ポインター変数を作成 `hwnd` し、サンプルのフォームのハンドルに設定します。  
  
-   新しい <xref:System.Drawing.Graphics> ハンドルからです。  
  
-   新しい四角形を描画 <xref:System.Drawing.Graphics> 赤いペンを使用します。  
  
-   破棄することも、新しい <xref:System.Drawing.Graphics>します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#119](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#119)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#119](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#119)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#119](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#119)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for access to unmanaged code. Related enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="FromHwndInternal">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHwndInternal (IntPtr hwnd);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHwndInternal(native int hwnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHwndInternal(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hwnd">ウィンドウを識別するハンドル。</param>
        <summary>指定したウィンドウ ハンドルに新しい <see cref="T:System.Drawing.Graphics" /> を作成します。</summary>
        <returns>指定したウィンドウ ハンドルの <see cref="T:System.Drawing.Graphics" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用しない必要があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromImage">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromImage (System.Drawing.Image image);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromImage(class System.Drawing.Image image) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromImage(System.Drawing.Image)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
      </Parameters>
      <Docs>
        <param name="image">新しい <see cref="T:System.Drawing.Graphics" /> の作成元の <see cref="T:System.Drawing.Image" />。</param>
        <summary>指定した <see cref="T:System.Drawing.Image" /> の新しい <see cref="T:System.Drawing.Graphics" /> を作成します。</summary>
        <returns>このメソッドは、指定した <see cref="T:System.Drawing.Image" /> の新しい <see cref="T:System.Drawing.Graphics" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、メッセージを使用して例外をスローします。 イメージのインデックス付きピクセル形式の場合は、「グラフィック オブジェクトをインデックス付きピクセル形式のイメージから作成できません」です。 インデックス付きピクセル形式は、次の一覧に表示されます。  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format1bppIndexed>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format4bppIndexed>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format8bppIndexed>  
  
 別の形式として、インデックス付きのイメージを保存するにを使用して、 <xref:System.Drawing.Image.Save%28System.String%2CSystem.Drawing.Imaging.ImageFormat%29> メソッドを取得、 <xref:System.Drawing.Graphics> 新しいイメージのオブジェクト。  
  
 このメソッドは、次のピクセル形式のイメージにも、例外をスローします。  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Undefined>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.DontCare>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format16bppArgb1555>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale>  
  
 常に呼び出す、 <xref:System.Drawing.Graphics.Dispose%2A> を解放するメソッド、 <xref:System.Drawing.Graphics> 関連リソースを作成し、 <xref:System.Drawing.Graphics.FromImage%2A> メソッドです。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードでは、次の操作を実行します。  
  
-   作成、 <xref:System.Drawing.Image> グラフィックから SampImag.jpg をファイルの使用例をします。  
  
-   作成、 <xref:System.Drawing.Graphics> から、 <xref:System.Drawing.Image>です。  
  
-   イメージを変更するには、内部の四角形を入力します。  
  
-   描画、 <xref:System.Drawing.Image> 画面にします。  
  
-   作成されたリリース <xref:System.Drawing.Graphics>します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#120](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#120)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#120](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#120)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#120](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Exception">
          <paramref name="image" /> インデックス付きピクセル形式かの形式が定義されていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetContextInfo">
      <MemberSignature Language="C#" Value="public object GetContextInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetContextInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetContextInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>累積的なグラフィックス コンテキストを取得します。</summary>
        <returns>累積的なグラフィックス コンテキストを表す <see cref="T:System.Object" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 戻り値は、オブジェクト配列の最初の要素は、累積的なクリップ領域を含む、2 番目の要素には、累積的な変換の変換マトリックスが含まれています。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHalftonePalette">
      <MemberSignature Language="C#" Value="public static IntPtr GetHalftonePalette ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetHalftonePalette() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetHalftonePalette" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の Windows ハーフトーン パレットを識別するハンドルを取得します。</summary>
        <returns>パレットを識別するハンドルを指定する内部ポインター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 目的、 <xref:System.Drawing.Graphics.GetHalftonePalette%2A> メソッドが有効にするのには [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] 表示は、ピクセルあたり 8 ビットを使用するより良い品質ハーフトーンを生成します。 ハーフトーン パレットを使用してイメージを表示するには、次の手順を使用します。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   相互運用性を定義 <xref:System.Runtime.InteropServices.DllImportAttribute> 属性を含む、必要な Windows の DLL ファイル gdi32.dll [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 関数です。  
  
-   定義、 `SelectPalette` と `RealizePalette` 外部でその DLL で機能します。  
  
-   既存のイメージ ファイル \(コード ファイルの例と同じフォルダーにある必要があります\) を SampImag.jpg からイメージを作成し、画面にイメージを描画します。  
  
-   内部ポインター型の変数を作成し、その値をそれぞれ、現在の Windows ハーフトーン パレットをグラフィックス オブジェクトへのハンドルに設定します。  
  
-   ハーフトーン パレットを選択します。  
  
-   新しいグラフィックスを使用するオブジェクトを作成、 `hdc` パラメーター。  
  
-   イメージを再描画します。  
  
-   デバイス コンテキストを識別するハンドルを解放します。  
  
 サンプル イメージの 2 つのレンダリングになります: 8 ビット パレットで 1 つの 16 ビット パレットと 1 つです。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#121](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#121)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#121](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#121)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#121](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#121)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHdc">
      <MemberSignature Language="C#" Value="public IntPtr GetHdc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int GetHdc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetHdc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> に関連付けられているデバイス コンテキストを識別するハンドルを取得します。</summary>
        <returns>この <see cref="T:System.Drawing.Graphics" /> に関連付けられているデバイス コンテキストを識別するハンドル。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 デバイス コンテキストは、Windows 構造に基づく [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] グラフィカル オブジェクトと、関連付けられた属性は出力に影響をグラフィカル モードのセットを定義します。 このメソッドは、フォントの例外には、そのデバイス コンテキストを返します。 フォントが選択されていないために呼び出し、 <xref:System.Drawing.Font.FromHdc%2A> メソッドから返されたハンドルを使用して、 <xref:System.Drawing.Graphics.GetHdc%2A> メソッドは失敗します。  
  
 呼び出し、 <xref:System.Drawing.Graphics.GetHdc%2A> と <xref:System.Drawing.Graphics.ReleaseHdc%2A> メソッドはペアで表示する必要があります。 スコープ内で、 <xref:System.Drawing.Graphics.GetHdc%2A> と <xref:System.Drawing.Graphics.ReleaseHdc%2A> メソッドのペアを通常のみを呼び出す [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 関数です。 呼び出しにスコープが加えられた点で [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] のメソッド、 <xref:System.Drawing.Graphics> を生成した、 `hdc` パラメーターが失敗し、 `ObjectBusy` エラー。 また、 [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] 任意の状態変更を無視、 <xref:System.Drawing.Graphics> の `hdc` 後続の操作のパラメーターです。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 Windows の呼び出しの例が [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] と同じタスクを実行する関数、 [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics> メソッドです。  コードは、次のアクションを実行します。  
  
-   相互運用性を定義 <xref:System.Runtime.InteropServices.DllImportAttribute> Windows DLL ファイル gdi32.dll の属性です。 この DLL が含まれていますが、必要な [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 関数です。  
  
-   定義、 <xref:System.Drawing.Rectangle> 外部でその DLL 内の関数です。  
  
-   赤いペンを作成します。  
  
-   使用して、画面に四角形を描画、ペンを使用して、 [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics.DrawRectangle%2A> メソッドです。  
  
-   内部ポインター型の変数を定義 `hdc` し、その値をフォームのデバイス コンテキストを識別するハンドルに設定します。  
  
-   使用して、画面に四角形を描画、 [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] <xref:System.Drawing.Rectangle> 関数です。  
  
-   によって表されるデバイス コンテキストを解放、 `hdc` パラメーター。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#122](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#122)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#122](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#122)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#122](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#122)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for access to unmanaged code. Related enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetNearestColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color GetNearestColor (System.Drawing.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Color GetNearestColor(valuetype System.Drawing.Color color) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetNearestColor(System.Drawing.Color)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="color">一致する対象を検索する <see cref="T:System.Drawing.Color" /> 構造体。</param>
        <summary>指定した <see cref="T:System.Drawing.Color" /> 構造体に最も近い色を取得します。</summary>
        <returns>
          <paramref name="color" /> パラメーターで指定された色に最も近い色を表す <see cref="T:System.Drawing.Color" /> 構造体。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   ARGB 座標 \(255, 165、63, 136\) を使用して任意の色を作成します。  
  
-   ソリッド ブラシを作成し、その色を指定した色に設定します。  
  
-   任意の色を使用して、楕円を塗りつぶします。  
  
-   2 番目の色を作成し、その値を最も近いシステム ARGB 色に設定します。  
  
-   この色では、2 番目の楕円を塗りつぶします。  
  
 結果は、2 つの楕円: 描画された任意の指定された色と 2 番目の指定した色に最も近いシステム カラーを使用して描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#123](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#123)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#123](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#123)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#123](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#123)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpolationMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.InterpolationMode InterpolationMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.InterpolationMode InterpolationMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.InterpolationMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.InterpolationMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> に関連付けられている補間モードを取得または設定します。</summary>
        <value>
          <see cref="T:System.Drawing.Drawing2D.InterpolationMode" /> 値のいずれか。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 補間モードでは、2 つの中間の値を指定のエンドポイントを計算します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntersectClip">
      <MemberSignature Language="C#" Value="public void IntersectClip (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IntersectClip(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IntersectClip(System.Drawing.Rectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">現在のクリップ領域と交差する <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のクリップ領域を現在のクリップ領域と指定した <see cref="T:System.Drawing.Rectangle" /> 構造体との交差部分に更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドに割り当てます、 <xref:System.Drawing.Graphics.Clip%2A> このプロパティ <xref:System.Drawing.Graphics> 領域の現在のクリップ領域と指定された四角形の交差部分で表される、 `rect` パラメーター。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   左上隅を四角形を作成する \(0, 0\) し、この四角形にクリッピング領域を設定します。  
  
-   左上隅が 2 つ目の四角形を作成 \(100, 100\) し、この四角形と現在のクリップ領域 \(最初の四角形\) の交差部分にクリッピング領域を設定します。  
  
-   青の単色ブラシで両方の以前の四角形を含む大きな四角形を格納します。  
  
-   クリッピング領域を無限にリセットします。  
  
-   2 つのクリッピング領域の周りの四角形を描画します。 最初のクリッピング四角形、2 つ目のクリッピング領域に赤いペン黒のペンを使用します。  
  
 結果は、2 つの四角形の交差部分だけが青く塗りつぶされます。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#124](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#124)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#124](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#124)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#124](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#124)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntersectClip">
      <MemberSignature Language="C#" Value="public void IntersectClip (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IntersectClip(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IntersectClip(System.Drawing.RectangleF)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">現在のクリップ領域と交差する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のクリップ領域を現在のクリップ領域と指定した <see cref="T:System.Drawing.RectangleF" /> 構造体との交差部分に更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドに割り当てます、 <xref:System.Drawing.Graphics.Clip%2A> このプロパティ <xref:System.Drawing.Graphics> 領域の現在のクリップ領域と指定された四角形の交差部分で表される、 `rect` パラメーター。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   左上隅を四角形を作成する \(0, 0\) し、この四角形にクリッピング領域を設定します。  
  
-   左上隅が 2 つ目の四角形を作成 \(100, 100\) し、この四角形と現在のクリップ領域 \(最初の四角形\) の交差部分にクリッピング領域を設定します。  
  
-   青の単色ブラシで両方の以前の四角形を含む大きな四角形を格納します。  
  
-   クリッピング領域を無限にリセットします。  
  
-   2 つのクリッピング領域の周りの四角形を描画します。 最初のクリッピング四角形、2 つ目のクリッピング領域に赤いペン黒のペンを使用します。  
  
 結果は、2 つの四角形の交差部分だけが青く塗りつぶされます。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#125](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#125)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#125](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#125)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#125](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#125)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntersectClip">
      <MemberSignature Language="C#" Value="public void IntersectClip (System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IntersectClip(class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IntersectClip(System.Drawing.Region)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="region">現在の領域と交差する <see cref="T:System.Drawing.Region" />。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のクリップ領域を現在のクリップ領域と指定した <see cref="T:System.Drawing.Region" /> との交差部分に更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドに割り当てます、 <xref:System.Drawing.Graphics.Clip%2A> このプロパティ <xref:System.Drawing.Graphics> 領域の現在のクリップ領域と指定したリージョンの積集合によって表される、 `region` パラメーター。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   左上隅を四角形を作成する \(0, 0\)。  
  
-   領域を作成して、四角形に設定し、この領域にクリッピング領域を設定します。  
  
-   左上隅が 2 つ目の四角形を作成 \(100, 100\)。  
  
-   領域を作成し、2 つ目の四角形に設定し、の組み合わせモードを使用してこの領域と現在のクリップ領域 \(最初の四角形\) の交差部分にクリッピング領域を設定 <xref:System.Drawing.Drawing2D.CombineMode.Replace>します。  
  
-   青の単色ブラシを 2 つ前の領域を含む大きな四角形を格納します。  
  
-   クリッピング領域を無限にリセットします。  
  
-   2 つのクリッピング領域の周りの四角形を描画します。 最初のクリップ領域と 2 つ目のクリッピング領域に赤いペン黒のペンを使用します。  
  
 結果は、2 つのリージョンの交差部分だけが青く塗りつぶされます。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#126](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#126)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#126](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#126)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#126](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#126)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClipEmpty">
      <MemberSignature Language="C#" Value="public bool IsClipEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClipEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.IsClipEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のクリッピング領域が空かどうかを示す値を取得します。</summary>
        <value>この <see cref="T:System.Drawing.Graphics" /> のクリッピング領域が空の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.Point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">表示可能範囲をテストする <see cref="T:System.Drawing.Point" /> 構造体。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の表示クリップ領域内に、指定した <see cref="T:System.Drawing.Point" /> 構造体が含まれるかどうかを示します。</summary>
        <returns>
          <paramref name="point" /> パラメーターで指定された点がこの <see cref="T:System.Drawing.Graphics" /> の表示クリップ領域内に含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   四角形のクリッピング領域を作成し、設定を使用して、フォームの graphics オブジェクトのクリッピング領域として <xref:System.Drawing.Drawing2D.CombineMode.Replace>します。  
  
-   クリッピング領域の内側と外側の 2 つのポイントを作成します。  
  
-   各ポイントの可視性をテストし、表示されている、1 つだけを描画します。  
  
 1 つ小さな赤い円がクリップ領域内になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#127](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#127)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#127](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#127)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#127](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#127)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.PointF point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.PointF)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="point">表示可能範囲をテストする <see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の表示クリップ領域内に、指定した <see cref="T:System.Drawing.PointF" /> 構造体が含まれるかどうかを示します。</summary>
        <returns>
          <paramref name="point" /> パラメーターで指定された点がこの <see cref="T:System.Drawing.Graphics" /> の表示クリップ領域内に含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   四角形のクリッピング領域を作成し、フォームを使用して、グラフィックス用のクリッピング領域として設定 <xref:System.Drawing.Drawing2D.CombineMode.Replace>します。  
  
-   クリッピング領域の内側と外側の 2 つのポイントを作成します。  
  
-   各ポイントの可視性をテストし、表示されている、1 つだけを描画します。  
  
 1 つ小さな赤い円がクリップ領域内になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#128](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#128)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#128](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#128)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#128](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#128)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.Rectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">表示可能範囲をテストする <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の表示クリップ領域内に、<see cref="T:System.Drawing.Rectangle" /> 構造体で指定された四角形が含まれるかどうかを示します。</summary>
        <returns>
          <paramref name="rect" /> パラメーターで指定された四角形がこの <see cref="T:System.Drawing.Graphics" /> の表示クリップ領域内に含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   四角形のクリッピング領域を作成し、設定を使用して、フォームの graphics オブジェクトのクリッピング領域として<xref:System.Drawing.Drawing2D.CombineMode.Replace>します。  
  
-   場所と 2 つの四角形のサイズ、クリッピング領域の内側および外側を作成します。  
  
-   表示のための四角形の各をテストし、表示されている、1 つだけを描画します。  
  
 1 つ小さな赤い四角形がクリップ領域内になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#129](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#129)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#129](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#129)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#129](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#129)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.RectangleF)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">表示可能範囲をテストする <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の表示クリップ領域内に、<see cref="T:System.Drawing.RectangleF" /> 構造体で指定された四角形が含まれるかどうかを示します。</summary>
        <returns>
          <paramref name="rect" /> パラメーターで指定された四角形がこの <see cref="T:System.Drawing.Graphics" /> の表示クリップ領域内に含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a rectangular clipping region and sets it as the clipping region for the graphics object of the form using <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Creates two rectangles, one inside the clipping region and one outside.  
  
-   Tests each of the rectangles for visibility and draws only the visible one.  
  
 The result is one small red rectangle, which is within the clip region.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#130](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#130)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#130](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#130)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#130](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#130)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">表示可能かどうかをテストする点の x 座標。</param>
        <param name="y">表示可能かどうかをテストする点の y 座標。</param>
        <summary>座標ペアで指定された点が、この <see cref="T:System.Drawing.Graphics" /> の表示クリップ領域内にあるかどうかを示します。</summary>
        <returns>
          <paramref name="x" /> パラメーターと <paramref name="y" /> パラメーターで定義された点がこの <see cref="T:System.Drawing.Graphics" /> の表示クリップ領域内に含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   四角形のクリッピング領域を作成し、設定を使用して、フォームの graphics オブジェクトのクリッピング領域として <xref:System.Drawing.Drawing2D.CombineMode.Replace>します。  
  
-   クリッピング領域の内側と外側の 2 つのポイントを作成します。  
  
-   各ポイントの可視性をテストし、表示されている、1 つだけを描画します。  
  
 1 つ小さな赤い円がクリップ領域内になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#131](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#131)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#131](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#131)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#131](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#131)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">表示可能かどうかをテストする点の x 座標。</param>
        <param name="y">表示可能かどうかをテストする点の y 座標。</param>
        <summary>座標ペアで指定された点が、この <see cref="T:System.Drawing.Graphics" /> の表示クリップ領域内にあるかどうかを示します。</summary>
        <returns>
          <paramref name="x" /> パラメーターと <paramref name="y" /> パラメーターで定義された点がこの <see cref="T:System.Drawing.Graphics" /> の表示クリップ領域内に含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   四角形のクリッピング領域を作成し、設定を使用して、フォームの graphics オブジェクトのクリッピング領域として <xref:System.Drawing.Drawing2D.CombineMode.Replace>します。  
  
-   クリッピング領域の内側と外側の 2 つのポイントを作成します。  
  
-   各ポイントの可視性をテストし、表示されている、1 つだけを描画します。  
  
 1 つ小さな赤い円がクリップ領域内になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#133](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#133)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#133](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#133)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#133](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#133)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">表示可能かどうかをテストする四角形の左上隅の x 座標。</param>
        <param name="y">表示可能かどうかをテストする四角形の左上隅の y 座標。</param>
        <param name="width">表示可能範囲をテストする四角形の幅。</param>
        <param name="height">表示可能範囲をテストする四角形の高さ。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の表示クリップ領域内に、座標ペア、幅、および高さで指定された四角形が含まれるかどうかを示します。</summary>
        <returns>
          <paramref name="x" />、<paramref name="y" />、<paramref name="width" />、<paramref name="height" /> の各パラメーターで定義された四角形がこの <see cref="T:System.Drawing.Graphics" /> の表示クリップ領域内に含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   四角形のクリッピング領域を作成し、設定を使用して、フォームの graphics オブジェクトのクリッピング領域として <xref:System.Drawing.Drawing2D.CombineMode.Replace>します。  
  
-   場所と 2 つの四角形のサイズ、クリッピング領域の内側および外側を作成します。  
  
-   表示のための四角形の各をテストし、表示されている、1 つだけを描画します。  
  
 1 つ小さな赤い四角形がクリップ領域内になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#132](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#132)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#132](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#132)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#132](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#132)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Single,System.Single,System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">表示可能かどうかをテストする四角形の左上隅の x 座標。</param>
        <param name="y">表示可能かどうかをテストする四角形の左上隅の y 座標。</param>
        <param name="width">表示可能範囲をテストする四角形の幅。</param>
        <param name="height">表示可能範囲をテストする四角形の高さ。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の表示クリップ領域内に、座標ペア、幅、および高さで指定された四角形が含まれるかどうかを示します。</summary>
        <returns>
          <paramref name="x" />、<paramref name="y" />、<paramref name="width" />、<paramref name="height" /> の各パラメーターで定義された四角形がこの <see cref="T:System.Drawing.Graphics" /> の表示クリップ領域内に含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   四角形のクリッピング領域を作成し、設定を使用して、フォームの graphics オブジェクトのクリッピング領域として <xref:System.Drawing.Drawing2D.CombineMode.Replace>します。  
  
-   場所と 2 つの四角形のサイズ、クリッピング領域の内側および外側を作成します。  
  
-   表示のための四角形の各をテストし、表示されている、1 つだけを描画します。  
  
 1 つ小さな赤い四角形がクリップ領域内になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#134](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#134)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#134](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#134)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#134](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#134)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleClipEmpty">
      <MemberSignature Language="C#" Value="public bool IsVisibleClipEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisibleClipEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.IsVisibleClipEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の表示クリッピング領域が空かどうかを示す値を取得します。</summary>
        <value>この <see cref="T:System.Drawing.Graphics" /> のクリッピング領域の表示部分が空の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 表示クリッピング領域は、このクリッピング領域 `Graphics` とウィンドウのクリッピング領域です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCharacterRanges">
      <MemberSignature Language="C#" Value="public System.Drawing.Region[] MeasureCharacterRanges (string text, System.Drawing.Font font, System.Drawing.RectangleF layoutRect, System.Drawing.StringFormat stringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Region[] MeasureCharacterRanges(string text, class System.Drawing.Font font, valuetype System.Drawing.RectangleF layoutRect, class System.Drawing.StringFormat stringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Region[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">計測する文字列。</param>
        <param name="font">文字列のテキスト形式を定義する <see cref="T:System.Drawing.Font" />。</param>
        <param name="layoutRect">文字列のレイアウト四角形を指定する <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="stringFormat">行間など、文字列の書式情報を表す <see cref="T:System.Drawing.StringFormat" />。</param>
        <summary>指定した文字列内の文字位置の範囲にそれぞれが外接する <see cref="T:System.Drawing.Region" /> オブジェクトの配列を取得します。</summary>
        <returns>このメソッドは、指定した文字列内の文字位置の範囲にそれぞれが外接する <see cref="T:System.Drawing.Region" /> オブジェクトの配列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドによって返される領域と解像度依存は文字列が 1 つの解像度でのメタファイルに記録され、後で別の解像度で再生する場合、精度をわずかに低下にされる可能性があります。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   「1 つ目と 2 番目の範囲」を文字列に設定し、文字列 \("Times New Roman"、16 ポイント\) を表示するためのフォント。  
  
-   \(これは"First"と"Second"という語に対応しています\)、文字列内の範囲 2 文字のセットです。  
  
-   文字列の表示先の四角形を作成します。  
  
-   2 つの文字範囲を含む文字列の書式を設定します。  
  
-   文字列を画面に描画します。  
  
-   文字範囲を計測、2 つの指定した範囲の外接する四角形を決定します。  
  
-   2 つの四角形を画面に描画します。  
  
 赤い長方形で囲まれた \(「最初」\) 最初の範囲と、2 つ目 \(「秒」\) に囲まれた範囲青い四角形が表示される文字列になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#135](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#135)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#135](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#135)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#135](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#135)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font)" />
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
      </Parameters>
      <Docs>
        <param name="text">計測する文字列。</param>
        <param name="font">文字列のテキスト形式を定義する <see cref="T:System.Drawing.Font" />。</param>
        <summary>指定した <see cref="T:System.Drawing.Font" /> で描画した場合の、指定した文字列を計測します。</summary>
        <returns>このメソッドは、<paramref name="text" /> パラメーターに指定された文字列のサイズを <see cref="P:System.Drawing.Graphics.PageUnit" /> プロパティで指定された単位で表す <see cref="T:System.Drawing.SizeF" /> 構造体を、<paramref name="font" /> パラメーターで描画されたとおりに返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Drawing.Graphics.MeasureString%2A> メソッドが個人で使用する文字列し、グリフ期間の延長を許可するように文字列の前後に少量余分なスペースにはが含まれています用に設計されています。 また、 <xref:System.Drawing.Graphics.DrawString%2A> メソッドは、表示品質を最適化するためにグリフ ポイントを調整し、幅によって報告されたより狭くなる文字列を表示することがあります <xref:System.Drawing.Graphics.MeasureString%2A>します。 隣接する文字列 \(たとえば、テキストを書式設定を実装する場合に\) のレイアウトに適したメトリックを取得する、 <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> メソッドまたはのいずれか、 <xref:System.Drawing.Graphics.MeasureString%2A> を受け取るメソッド、 <xref:System.Drawing.StringFormat>, 、渡す <xref:System.Drawing.StringFormat.GenericTypographic%2A>します。 また、確認、 <xref:System.Drawing.Graphics.TextRenderingHint%2A> の <xref:System.Drawing.Graphics> は <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>です。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   計測する文字列を作成します。  
  
-   Font オブジェクトを作成し、Arial \(16 ポイント\) に設定します。  
  
-   サイズのオブジェクトを作成し、文字列のサイズを測定してフォントのオブジェクトを使用します。  
  
-   文字列の測定のサイズを使用して、赤い四角形を描画します。  
  
-   描画した四角形内の文字列を描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#136](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#136)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#136](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#136)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#136](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#136)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="font" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.SizeF layoutArea) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutArea" Type="System.Drawing.SizeF" />
      </Parameters>
      <Docs>
        <param name="text">計測する文字列。</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> は、文字列のテキスト形式を定義します。</param>
        <param name="layoutArea">テキストのレイアウトの最大領域を指定する <see cref="T:System.Drawing.SizeF" /> 構造体。</param>
        <summary>指定したレイアウト領域内に指定した <see cref="T:System.Drawing.Font" /> で描画した場合の、指定した文字列を計測します。</summary>
        <returns>このメソッドは、<paramref name="text" /> パラメーターに指定された文字列のサイズを <see cref="P:System.Drawing.Graphics.PageUnit" /> プロパティで指定された単位で表す <see cref="T:System.Drawing.SizeF" /> 構造体を、<paramref name="font" /> パラメーターで描画されたとおりに返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Drawing.Graphics.MeasureString%2A> メソッドが個人で使用する文字列し、グリフ期間の延長を許可するように文字列の前後に少量余分なスペースにはが含まれています用に設計されています。 また、 <xref:System.Drawing.Graphics.DrawString%2A> メソッドは、表示品質を最適化するためにグリフ ポイントを調整し、幅によって報告されたより狭くなる文字列を表示することがあります <xref:System.Drawing.Graphics.MeasureString%2A>します。 隣接する文字列 \(たとえば、テキストを書式設定を実装する場合に\) のレイアウトに適したメトリックを取得する、 <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> メソッドまたはのいずれか、 <xref:System.Drawing.Graphics.MeasureString%2A> を受け取るメソッド、 <xref:System.Drawing.StringFormat>, 、渡す <xref:System.Drawing.StringFormat.GenericTypographic%2A>します。 また、確認、 <xref:System.Drawing.Graphics.TextRenderingHint%2A> の <xref:System.Drawing.Graphics> は <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>です。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   計測する文字列と Arial \(16 ポイント\) に設定のフォント オブジェクトを作成します。  
  
-   文字列の最大レイアウトのサイズを設定します。  
  
-   サイズのオブジェクトを作成し、文字列のサイズを測定するフォント オブジェクトと最大レイアウトのサイズを使用します。  
  
-   文字列の測定のサイズを使用して、赤い四角形を描画します。  
  
-   描画した四角形内の文字列を描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#138](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#138)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#138](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#138)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#138](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#138)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="font" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, int width);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, int32 width) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="width" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">計測する文字列。</param>
        <param name="font">文字列の形式を定義する <see cref="T:System.Drawing.Font" />。</param>
        <param name="width">文字列の最大幅 \(ピクセル単位\)。</param>
        <summary>指定した <see cref="T:System.Drawing.Font" /> で描画した場合の、指定した文字列を計測します。</summary>
        <returns>このメソッドは、<paramref name="text" /> パラメーターに指定された文字列のサイズを <see cref="P:System.Drawing.Graphics.PageUnit" /> プロパティで指定された単位で表す <see cref="T:System.Drawing.SizeF" /> 構造体を、<paramref name="font" /> パラメーターで描画されたとおりに返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `width` パラメーターは、返された幅コンポーネントの最大値を指定 <xref:System.Drawing.SizeF> 構造 \(<xref:System.Drawing.SizeF.Width%2A>\)。 場合、 `width` パラメーターが返された文字列の実際の幅より小さい <xref:System.Drawing.SizeF.Width%2A> コンポーネントは、指定された幅に収まる文字の最大数を表す値に切り捨てられます。 返された全体文字列に合わせて <xref:System.Drawing.SizeF.Height%2A> コンポーネントは、文字のラップされた文字列を表示するようにする値に調整します。  
  
 <xref:System.Drawing.Graphics.MeasureString%2A> メソッドが個人で使用する文字列し、グリフ期間の延長を許可するように文字列の前後に少量余分なスペースにはが含まれています用に設計されています。 また、 <xref:System.Drawing.Graphics.DrawString%2A> メソッドは、表示品質を最適化するためにグリフ ポイントを調整し、幅によって報告されたより狭くなる文字列を表示することがあります <xref:System.Drawing.Graphics.MeasureString%2A>します。 隣接する文字列 \(たとえば、テキストを書式設定を実装する場合に\) のレイアウトに適したメトリックを取得する、 <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> メソッドまたはのいずれか、 <xref:System.Drawing.Graphics.MeasureString%2A> を受け取るメソッド、 <xref:System.Drawing.StringFormat>, 、渡す <xref:System.Drawing.StringFormat.GenericTypographic%2A>します。 また、確認、 <xref:System.Drawing.Graphics.TextRenderingHint%2A> の <xref:System.Drawing.Graphics> は <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>です。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   計測する文字列と Arial \(16 ポイント\) に設定のフォント オブジェクトを作成します。  
  
-   文字列の最大の幅を設定します。  
  
-   サイズのオブジェクトを作成し、文字列のサイズを測定するフォント オブジェクトと文字列の最大の幅を使用します。  
  
-   文字列の測定のサイズを使用して、赤い四角形を描画します。  
  
-   描画した四角形内の文字列を描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#141](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#141)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#141](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#141)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#141](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#141)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="font" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.PointF origin, System.Drawing.StringFormat stringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.PointF origin, class System.Drawing.StringFormat stringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.PointF,System.Drawing.StringFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="origin" Type="System.Drawing.PointF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">計測する文字列。</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> は、文字列のテキスト形式を定義します。</param>
        <param name="origin">文字列の左上隅を表す <see cref="T:System.Drawing.PointF" /> 構造体。</param>
        <param name="stringFormat">行間など、文字列の書式情報を表す <see cref="T:System.Drawing.StringFormat" />。</param>
        <summary>指定した <see cref="T:System.Drawing.Font" /> を使用し、指定した <see cref="T:System.Drawing.StringFormat" /> で書式指定して描画した場合の、指定した文字列を計測します。</summary>
        <returns>このメソッドは、<paramref name="text" /> パラメーターに指定された文字列のサイズを <see cref="P:System.Drawing.Graphics.PageUnit" /> プロパティで指定された単位で表す <see cref="T:System.Drawing.SizeF" /> 構造体を、<paramref name="font" /> パラメーターおよび <paramref name="stringFormat" /> パラメーターで描画されたとおりに返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Drawing.Graphics.MeasureString%2A> メソッドが個人で使用する文字列し、グリフ期間の延長を許可するように文字列の前後に少量余分なスペースにはが含まれています用に設計されています。 また、 <xref:System.Drawing.Graphics.DrawString%2A> メソッドは、表示品質を最適化するためにグリフ ポイントを調整し、幅によって報告されたより狭くなる文字列を表示することがあります <xref:System.Drawing.Graphics.MeasureString%2A>します。 隣接する文字列 \(たとえば、テキストを書式設定を実装する場合に\) のレイアウトに適したメトリックを取得する、 <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> メソッドまたはのいずれか、 <xref:System.Drawing.Graphics.MeasureString%2A> を受け取るメソッド、 <xref:System.Drawing.StringFormat>, 、渡す <xref:System.Drawing.StringFormat.GenericTypographic%2A>します。 また、確認、 <xref:System.Drawing.Graphics.TextRenderingHint%2A> の <xref:System.Drawing.Graphics> は <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>です。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   計測する文字列と Arial \(16 ポイント\) に設定のフォント オブジェクトを作成します。  
  
-   文字列の左上隅を配置する点を作成します。  
  
-   オブジェクトの文字列書式設定を作成し、書式指定フラグ設定 <xref:System.Drawing.StringFormatFlags.DirectionVertical>します。  
  
-   文字列を計測するサイズのオブジェクトを作成します。  
  
-   文字列やフォント オブジェクト、位置指定の点では、文字列の形式を使用して、文字列のサイズを測定します。  
  
-   位置指定の点と、文字列のサイズを測定を使用して、赤い四角形を描画します。  
  
-   描画した四角形内の文字列を描画します。  
  
 縦の垂直方向の文字列を囲む四角形になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#137](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#137)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#137](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#137)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#137](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#137)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="font" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea, System.Drawing.StringFormat stringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.SizeF layoutArea, class System.Drawing.StringFormat stringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutArea" Type="System.Drawing.SizeF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">計測する文字列。</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> は、文字列のテキスト形式を定義します。</param>
        <param name="layoutArea">テキストのレイアウトの最大領域を指定する <see cref="T:System.Drawing.SizeF" /> 構造体。</param>
        <param name="stringFormat">行間など、文字列の書式情報を表す <see cref="T:System.Drawing.StringFormat" />。</param>
        <summary>指定した <see cref="T:System.Drawing.Font" /> を使用し、指定した <see cref="T:System.Drawing.StringFormat" /> で書式指定して描画した場合の、指定した文字列を計測します。</summary>
        <returns>このメソッドは、<paramref name="text" /> パラメーターに指定された文字列のサイズを <see cref="P:System.Drawing.Graphics.PageUnit" /> プロパティで指定された単位で表す <see cref="T:System.Drawing.SizeF" /> 構造体を、<paramref name="font" /> パラメーターおよび <paramref name="stringFormat" /> パラメーターで描画されたとおりに返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Drawing.Graphics.MeasureString%2A> メソッドが個人で使用する文字列し、グリフ期間の延長を許可するように文字列の前後に少量余分なスペースにはが含まれています用に設計されています。 また、 <xref:System.Drawing.Graphics.DrawString%2A> メソッドは、表示品質を最適化するためにグリフ ポイントを調整し、幅によって報告されたより狭くなる文字列を表示することがあります <xref:System.Drawing.Graphics.MeasureString%2A>します。 隣接する文字列 \(たとえば、テキストを書式設定を実装する場合に\) のレイアウトに適したメトリックを取得する、 <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> メソッドまたはのいずれか、 <xref:System.Drawing.Graphics.MeasureString%2A> を受け取るメソッド、 <xref:System.Drawing.StringFormat>, 、渡す <xref:System.Drawing.StringFormat.GenericTypographic%2A>します。 また、確認、 <xref:System.Drawing.Graphics.TextRenderingHint%2A> の <xref:System.Drawing.Graphics> は <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>です。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   計測する文字列と Arial \(16 ポイント\) に設定のフォント オブジェクトを作成します。  
  
-   文字列を計測するサイズのオブジェクトを作成する、文字列の最大レイアウトのサイズを設定します。  
  
-   オブジェクトの文字列書式設定を作成し、書式指定フラグ設定 <xref:System.Drawing.StringFormatFlags.DirectionVertical>します。  
  
-   文字列、font オブジェクト、最大レイアウトのサイズ、および文字列の形式を使用して、文字列のサイズを測定します。  
  
-   文字列の測定のサイズを使用して、赤い四角形を描画します。  
  
-   描画した四角形内の文字列を描画します。  
  
 縦の垂直方向の文字列を囲む四角形になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#139](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#139)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#139](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#139)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#139](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#139)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="font" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, int width, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, int32 width, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32,System.Drawing.StringFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">計測する文字列。</param>
        <param name="font">文字列のテキスト形式を定義する <see cref="T:System.Drawing.Font" />。</param>
        <param name="width">文字列の最大幅。</param>
        <param name="format">行間など、文字列の書式情報を表す <see cref="T:System.Drawing.StringFormat" />。</param>
        <summary>指定した <see cref="T:System.Drawing.Font" /> を使用し、指定した <see cref="T:System.Drawing.StringFormat" /> で書式指定して描画した場合の、指定した文字列を計測します。</summary>
        <returns>このメソッドは、<paramref name="text" /> パラメーターに指定された文字列のサイズを <see cref="P:System.Drawing.Graphics.PageUnit" /> プロパティで指定された単位で表す <see cref="T:System.Drawing.SizeF" /> 構造体を、<paramref name="font" /> パラメーターおよび <paramref name="stringFormat" /> パラメーターで描画されたとおりに返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Drawing.Graphics.MeasureString%2A> メソッドが個人で使用する文字列し、グリフ期間の延長を許可するように文字列の前後に少量余分なスペースにはが含まれています用に設計されています。 また、 <xref:System.Drawing.Graphics.DrawString%2A> メソッドは、表示品質を最適化するためにグリフ ポイントを調整し、幅によって報告されたより狭くなる文字列を表示することがあります <xref:System.Drawing.Graphics.MeasureString%2A>します。 隣接する文字列 \(たとえば、テキストを書式設定を実装する場合に\) のレイアウトに適したメトリックを取得する、 <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> メソッドまたはのいずれか、 <xref:System.Drawing.Graphics.MeasureString%2A> を受け取るメソッド、 <xref:System.Drawing.StringFormat>, 、渡す <xref:System.Drawing.StringFormat.GenericTypographic%2A>します。 また、確認、 <xref:System.Drawing.Graphics.TextRenderingHint%2A> の <xref:System.Drawing.Graphics> は <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>です。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   メジャーと、フォントに文字列を作成オブジェクトは Arial \(16 ポイント\) に設定します。  
  
-   文字列の最大の幅を設定します。  
  
-   オブジェクトの文字列書式設定を作成し、書式指定フラグ設定<xref:System.Drawing.StringFormatFlags.DirectionVertical>します。  
  
-   文字列を計測するサイズのオブジェクトを作成します。  
  
-   文字列、font オブジェクト、最大の幅、および文字列の形式を使用して、文字列のサイズを測定します。  
  
-   文字列の測定のサイズを使用して、赤い四角形を描画します。  
  
-   描画した四角形内の文字列を描画します。  
  
 縦の垂直方向の文字列を囲む四角形になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#142](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#142)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#142](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#142)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#142](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#142)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="font" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea, System.Drawing.StringFormat stringFormat, out int charactersFitted, out int linesFilled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.SizeF layoutArea, class System.Drawing.StringFormat stringFormat, int32 charactersFitted, int32 linesFilled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat,System.Int32@,System.Int32@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutArea" Type="System.Drawing.SizeF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
        <Parameter Name="charactersFitted" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="linesFilled" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="text">計測する文字列。</param>
        <param name="font">文字列のテキスト形式を定義する <see cref="T:System.Drawing.Font" />。</param>
        <param name="layoutArea">テキストのレイアウトの最大領域を指定する <see cref="T:System.Drawing.SizeF" /> 構造体。</param>
        <param name="stringFormat">行間など、文字列の書式情報を表す <see cref="T:System.Drawing.StringFormat" />。</param>
        <param name="charactersFitted">文字列の文字数。</param>
        <param name="linesFilled">文字列のテキスト行数。</param>
        <summary>指定した <see cref="T:System.Drawing.Font" /> を使用し、指定した <see cref="T:System.Drawing.StringFormat" /> で書式指定して描画した場合の、指定した文字列を計測します。</summary>
        <returns>このメソッドは、<paramref name="text" /> パラメーターに指定された文字列のサイズを <see cref="P:System.Drawing.Graphics.PageUnit" /> プロパティで指定された単位で表す <see cref="T:System.Drawing.SizeF" /> 構造体を、<paramref name="font" /> パラメーターおよび <paramref name="stringFormat" /> パラメーターで描画されたとおりに返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Drawing.Graphics.MeasureString%2A> メソッドが個人で使用する文字列し、グリフ期間の延長を許可するように文字列の前後に少量余分なスペースにはが含まれています用に設計されています。 また、 <xref:System.Drawing.Graphics.DrawString%2A> メソッドは、表示品質を最適化するためにグリフ ポイントを調整し、幅によって報告されたより狭くなる文字列を表示することがあります <xref:System.Drawing.Graphics.MeasureString%2A>します。 隣接する文字列 \(たとえば、テキストを書式設定を実装する場合に\) のレイアウトに適したメトリックを取得する、 <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> メソッドまたはのいずれか、 <xref:System.Drawing.Graphics.MeasureString%2A> を受け取るメソッド、 <xref:System.Drawing.StringFormat> 渡す <xref:System.Drawing.StringFormat.GenericTypographic%2A>します。 また、 <xref:System.Drawing.Graphics.TextRenderingHint%2A> の <xref:System.Drawing.Graphics> は <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>です。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   計測する文字列と Arial \(16 ポイント\) に設定のフォント オブジェクトを作成します。  
  
-   文字列の最大レイアウトのサイズを設定します。  
  
-   オブジェクトの文字列書式設定を作成し、書式指定フラグ設定 <xref:System.Drawing.StringFormatFlags.DirectionVertical>します。  
  
-   整数変数を作成 `charactersFitted` と `linesFilled` と文字列を計測するサイズのオブジェクト。  
  
-   文字列のサイズを測定し、合わせて文字とデータの格納、文字列、font オブジェクト、最大レイアウトのサイズ、および文字列の形式を使用して行の数を決定します。  
  
-   文字列の測定のサイズを使用して、赤い四角形を描画します。  
  
-   描画した四角形内の文字列を描画します。  
  
-   文字と行数の数の値を描画します。  
  
 縦の垂直方向の文字列を囲む四角形になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#140](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#140)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#140](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#140)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#140](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#140)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="font" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      </Docs>
    </Member>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix">ワールド変換を乗算する 4 x 4 <see cref="T:System.Drawing.Drawing2D.Matrix" />。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> と指定した <see cref="T:System.Drawing.Drawing2D.Matrix" /> のワールド変換を乗算します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドで指定された行列の前、 `matrix` パラメーター、結果になるため、 `matrix` x ワールド変換します。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   作成、 `transformMatrix` マトリックス \(2 つの行列と 0 の変換ベクトルによって 2\)。  
  
-   ベクター \(200, 100\) で変換マトリックスを変換します。  
  
-   Windows フォームのワールド変換行列を 30 ° 回転、フォームの変換行列に 30 度の回転の行列の前に付加します。  
  
-   変換されたでの回転のワールド変換行列の乗算 `transformMatrix`, 、前に付加し、 `transformMatrix` ワールド変換行列にします。  
  
-   回転、変換された楕円を描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#143](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#143)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#143](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#143)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#143](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#143)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="matrix">ワールド変換を乗算する 4 x 4 <see cref="T:System.Drawing.Drawing2D.Matrix" />。</param>
        <param name="order">乗算の順序を決定する <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> 列挙体のメンバー。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> と指定した <see cref="T:System.Drawing.Drawing2D.Matrix" /> のワールド変換を指定した順序で乗算します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値<xref:System.Drawing.Drawing2D.MatrixOrder.Prepend> の `order` 乗算の順序がであることを指定 `matrix` x ワールド変換します。 値 <xref:System.Drawing.Drawing2D.MatrixOrder.Append> の `order` 、乗算の順序は、x のワールド変換を `matrix`です。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   作成、 `transformMatrix` マトリックス \(2 つの行列と 0 の変換ベクトルによって 2\)。  
  
-   ベクター \(200, 100\) で変換マトリックスを変換します。  
  
-   Windows フォームのワールド変換行列をフォームの変換行列に 30 度の回転行列を付加すること、30 度回転させます。  
  
-   変換されたでの回転のワールド変換行列の乗算 `transformMatrix`, 、追加、 `transformMatrix` ワールド変換行列にします。  
  
-   回転、変換された楕円を描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#144](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#144)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#144](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#144)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#144](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#144)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PageScale">
      <MemberSignature Language="C#" Value="public float PageScale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 PageScale" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.PageScale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のワールド単位とパージ単位の間のスケーリングを取得または設定します。</summary>
        <value>このプロパティは、この <see cref="T:System.Drawing.Graphics" /> のワールド単位とパージ単位の間のスケーリングの値を指定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例では、使用して、 <xref:System.Drawing.Graphics.PageScale%2A> と <xref:System.Drawing.Graphics.TranslateTransform%2A> メンバーが四角形を描画するときに、スケールおよび原点を変更します。  
  
 この例は、Windows フォームで使用される設計されています。 フォームと呼び出しにコードを貼り付けます、 `ChangePageScaleAndTranslateTransform` メソッドは、フォームの処理と <xref:System.Windows.Forms.Control.Paint> イベントを渡す `e` として <xref:System.Windows.Forms.PaintEventArgs>します。  
  
 [!code-cpp[System.Drawing.GraphicsProperties\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.GraphicsProperties\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#2)]
 [!code-vb[System.Drawing.GraphicsProperties\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PageUnit">
      <MemberSignature Language="C#" Value="public System.Drawing.GraphicsUnit PageUnit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.GraphicsUnit PageUnit" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.PageUnit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.GraphicsUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のページ座標に使用される長さの単位を取得または設定します。</summary>
        <value>
          <see cref="T:System.Drawing.GraphicsUnit" /> 値の 1 つ \(<see cref="F:System.Drawing.GraphicsUnit.World" /> を除く\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 グラフィックスの単位は、このページ座標に使用されるメジャーの単位 <xref:System.Drawing.Graphics>します。  
  
   
  
## 例  
 次のコード例を変更した効果を示しています、 <xref:System.Drawing.Graphics.PageUnit%2A> プロパティです。  
  
 この例は、Windows フォームで使用される設計されています。 フォームと呼び出しにコードを貼り付けます、 `ChangePageUnit` メソッドは、フォームの処理と <xref:System.Windows.Forms.Control.Paint> イベントを渡す `e` として <xref:System.Windows.Forms.PaintEventArgs>します。  
  
 [!code-cpp[System.Drawing.GraphicsProperties\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.GraphicsProperties\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#3)]
 [!code-vb[System.Drawing.GraphicsProperties\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <see cref="P:System.Drawing.Graphics.PageUnit" /> 設定されている <see cref="F:System.Drawing.GraphicsUnit.World" />, は他の物理ユニットです。</exception>
      </Docs>
    </Member>
    <Member MemberName="PixelOffsetMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.PixelOffsetMode PixelOffsetMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.PixelOffsetMode PixelOffsetMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.PixelOffsetMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.PixelOffsetMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のレンダリング時のピクセルのオフセット方法を指定する値を取得または設定します。</summary>
        <value>このプロパティは、<see cref="T:System.Drawing.Drawing2D.PixelOffsetMode" /> 列挙型のメンバーを指定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを使用して、高い品質、低速のレンダリングまたは品質の低下より迅速に表示これの内容を指定する<xref:System.Drawing.Graphics>オブジェクトです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseHdc">
      <MemberSignature Language="C#" Value="public void ReleaseHdc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHdc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ReleaseHdc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の <see cref="M:System.Drawing.Graphics.GetHdc" /> メソッドを前回呼び出したときに取得したデバイス コンテキスト ハンドルを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Drawing.Graphics.GetHdc%2A> <xref:System.Drawing.Graphics.ReleaseHdc%2A> を取得し、Windows デバイスのハンドルを解放するための 2 つの方法です。 呼び出しを常に従う必要があります <xref:System.Drawing.Graphics.GetHdc%2A> への呼び出しで <xref:System.Drawing.Graphics.ReleaseHdc%2A> 終わったらの Windows ハンドルを使用します。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for access to unmanaged code. Related enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
        <altmember cref="T:System.Drawing.IDeviceContext" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHdc">
      <MemberSignature Language="C#" Value="public void ReleaseHdc (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseHdc(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ReleaseHdc(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">
          <see cref="T:System.Drawing.Graphics" /> の <see cref="M:System.Drawing.Graphics.GetHdc" /> メソッドを前回呼び出したときに取得したデバイス コンテキストを識別するハンドル。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の <see cref="M:System.Drawing.Graphics.GetHdc" /> メソッドを前回呼び出したときに取得したデバイス コンテキスト ハンドルを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 デバイス コンテキストは、Windows 構造に基づく [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] グラフィカル オブジェクトと、関連付けられた属性は出力に影響をグラフィカル モードのセットを定義します。  
  
 呼び出し、 <xref:System.Drawing.Graphics.GetHdc%2A> と <xref:System.Drawing.Graphics.ReleaseHdc%2A> メソッドはペアで表示する必要があります。 スコープ内で、 <xref:System.Drawing.Graphics.GetHdc%2A> と <xref:System.Drawing.Graphics.ReleaseHdc%2A> メソッド ペアが、通常呼び出しを行うだけに [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 関数です。 呼び出しにスコープが加えられた点で [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] のメソッド、 <xref:System.Drawing.Graphics> を生成した、 `hdc` パラメーターが失敗し、 `ObjectBusy` エラー。 また、 [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] 任意の状態変更を無視、 <xref:System.Drawing.Graphics> の `hdc` 後続の操作のパラメーターです。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 Windows の呼び出しの例が [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] と同じタスクを実行する関数、 [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics> メソッドです。  コードは、次のアクションを実行します。  
  
-   相互運用性を定義 <xref:System.Runtime.InteropServices.DllImportAttribute> Windows DLL ファイル gdi32.dll の属性です。 この DLL が含まれていますが、必要な [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 関数、およびそれを定義、 <xref:System.Drawing.Rectangle> 外部でその DLL 内の関数です。  
  
-   赤いペンを作成します。  
  
-   使用して、画面に四角形を描画、ペンを使用して、 [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics.DrawRectangle%2A> メソッドです。  
  
-   内部ポインター型の変数を定義 `hdc` し、その値をフォームのデバイス コンテキストを識別するハンドルに設定します。  
  
-   使用して、画面に四角形を描画、 [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] <xref:System.Drawing.Rectangle> 関数です。  
  
-   によって表されるデバイス コンテキストを解放、 `hdc` パラメーター。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#145](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#145)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#145](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#145)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#145](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#145)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for access to unmanaged code. Related enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="ReleaseHdcInternal">
      <MemberSignature Language="C#" Value="public void ReleaseHdcInternal (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseHdcInternal(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ReleaseHdcInternal(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">デバイス コンテキストを識別するハンドル。</param>
        <summary>デバイス コンテキストを識別するハンドルを解放します。</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for access to unmanaged code. Related enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="RenderingOrigin">
      <MemberSignature Language="C#" Value="public System.Drawing.Point RenderingOrigin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point RenderingOrigin" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.RenderingOrigin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ディザリングおよびハッチ ブラシに使用する、この <see cref="T:System.Drawing.Graphics" /> のレンダリングの原点を取得または設定します。</summary>
        <value>8 ビット\/ピクセルおよび 16 ビット\/ピクセルのディザリングの原点を表す <see cref="T:System.Drawing.Point" /> 構造体。この構造体は、ハッチ ブラシの原点を設定する場合にも使用されます。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetClip">
      <MemberSignature Language="C#" Value="public void ResetClip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetClip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ResetClip" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のクリップ領域を無制限領域にリセットします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 時のクリッピング領域、 <xref:System.Drawing.Graphics> が無制限で、項目をこの <xref:System.Drawing.Graphics> 描画はクリップされません。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   左上隅を四角形を作成する \(0, 0\) し、この四角形にクリッピング領域を設定します。  
  
-   左上隅が 2 つ目の四角形を作成 \(100, 100\) し、この四角形と現在のクリップ領域 \(最初の四角形\) の交差部分にクリッピング領域を設定します。  
  
-   青の単色ブラシで両方の以前の四角形を含む大きな四角形を格納します。  
  
-   クリッピング領域を無限にリセットします。  
  
-   2 つのクリッピング領域の周囲の四角形を描画します。最初のクリッピング四角形、2 つ目のクリッピング領域に赤いペン黒のペンを使用します。  
  
 結果は、2 つの四角形の交差部分だけが青く塗りつぶされます。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#146](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#146)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#146](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#146)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#146](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#146)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetTransform">
      <MemberSignature Language="C#" Value="public void ResetTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetTransform() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ResetTransform" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>対象の <see cref="T:System.Drawing.Graphics" /> のワールド変換行列を単位行列にリセットします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 単位行列にスケーリングなしで、回転、または平行移動変換を表します。 これのワールド変換をリセットする <xref:System.Drawing.Graphics> 行列に、ワールド変換が変換されたアイテムの形状を変更していないことを意味します。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   ベクター \(100, 0\) で Windows フォームのワールド変換を平行移動します。  
  
-   フォームのグラフィックスの状態を保存します。  
  
-   Id に、フォームのワールド変換をリセットし、赤いソリッド ブラシで四角形を塗りつぶします。  
  
-   変換されたグラフィックの状態を復元し、青の単色ブラシで四角形を塗りつぶします。  
  
 無変換赤で塗りつぶされた四角形および翻訳済みの青で塗りつぶされた四角形になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#147](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#147)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#147](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#147)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#147](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#147)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Restore">
      <MemberSignature Language="C#" Value="public void Restore (System.Drawing.Drawing2D.GraphicsState gstate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Restore(class System.Drawing.Drawing2D.GraphicsState gstate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gstate" Type="System.Drawing.Drawing2D.GraphicsState" />
      </Parameters>
      <Docs>
        <param name="gstate">この <see cref="T:System.Drawing.Graphics" /> を復元したときの状態を表す <see cref="T:System.Drawing.Drawing2D.GraphicsState" />。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の状態を <see cref="T:System.Drawing.Drawing2D.GraphicsState" /> によって表される状態に復元します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 <xref:System.Drawing.Graphics.Save%2A> のメソッド、 <xref:System.Drawing.Graphics>, の状態を保持する情報ブロック、 <xref:System.Drawing.Graphics> は、スタックに配置します。<xref:System.Drawing.Graphics.Save%2A> メソッドが返される、 <xref:System.Drawing.Drawing2D.GraphicsState> 情報ブロックを識別します。 特定渡すときに <xref:System.Drawing.Drawing2D.GraphicsState> に、<xref:System.Drawing.Graphics.Restore%2A> メソッド情報ブロックは、スタックから削除され、復元に使用、 <xref:System.Drawing.Graphics> の時点の状態を <xref:System.Drawing.Graphics.Save%2A> メソッドの呼び出しです。 注意してください、 <xref:System.Drawing.Drawing2D.GraphicsState> に特定の呼び出しによって返される、 <xref:System.Drawing.Graphics.Save%2A> にメソッドを 1 回だけ渡すことが、 `Restore` メソッドです。  
  
 呼び出し、 <xref:System.Drawing.Graphics.Save%2A> メソッドを入れ子にすることができます。 つまり、呼び出すことができます、 <xref:System.Drawing.Graphics.Save%2A> メソッドを複数回呼び出す前に、 <xref:System.Drawing.Graphics.Restore%2A> メソッドです。 呼び出すたびに、 <xref:System.Drawing.Graphics.Save%2A> メソッド情報ブロックは、スタックに配置し、表示されたら、 <xref:System.Drawing.Drawing2D.GraphicsState> 情報ブロックです。 これらのオブジェクトを渡すときに、 <xref:System.Drawing.Graphics.Restore%2A> メソッド、 <xref:System.Drawing.Graphics> の時点の状態に返される、 <xref:System.Drawing.Graphics.Save%2A> メソッドの呼び出しの <xref:System.Drawing.Drawing2D.GraphicsState>です。 その情報ブロックが、スタックに配置 <xref:System.Drawing.Graphics.Save%2A> メソッドの呼び出しは、スタックから削除され、その後、すべての情報ブロックがそのスタックに配置 <xref:System.Drawing.Graphics.Save%2A> メソッドの呼び出しが削除されます。  
  
 呼び出し、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドの場所情報ブロックへの呼び出しとして同じスタック上、 <xref:System.Drawing.Graphics.Save%2A> メソッドです。 同様、 <xref:System.Drawing.Graphics.Restore%2A> 呼び出しとペアになり、 <xref:System.Drawing.Graphics.Save%2A> を呼び出すと、 <xref:System.Drawing.Graphics.EndContainer%2A> と組み合わされて、メソッドの呼び出し、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドの呼び出しです。  
  
 呼び出すと、 <xref:System.Drawing.Graphics.Restore%2A> メソッドでは、すべての情報ブロックは、スタックに配置 \(によって、 <xref:System.Drawing.Graphics.Save%2A> メソッドまたは、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッド\) に対応する呼び出しの後、 <xref:System.Drawing.Graphics.Save%2A> メソッドは、スタックから削除されます。 同様に、呼び出し、 <xref:System.Drawing.Graphics.EndContainer%2A> メソッドでは、すべての情報ブロックは、スタックに配置 \(によって、 <xref:System.Drawing.Graphics.Save%2A> メソッドまたは、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッド\) に対応する呼び出しの後、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドは、スタックから削除されます。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   ベクター \(100, 0\) で Windows フォームのワールド変換を平行移動します。  
  
-   フォームのグラフィックスの状態を保存します。  
  
-   Id に、フォームのワールド変換をリセットし、赤いソリッド ブラシで四角形を塗りつぶします。  
  
-   変換されたグラフィックの状態を復元し、青の単色ブラシで 2 つ目の四角形を塗りつぶします。  
  
 無変換赤で塗りつぶされた四角形および翻訳済みの青で塗りつぶされた四角形になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#148](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#148)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#148](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#148)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#148](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#148)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.RotateTransform(System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="angle">回転角度。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の変換行列に、指定した回転を適用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 回転操作から要素が派生した行列を使用して、変換行列を乗算することでは、 `angle` パラメーター。 このメソッドは、変換行列に付加することによって、回転を適用します。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   ベクター \(100, 0\) で、Windows フォームのワールド変換行列に変換します。  
  
-   回転行列をワールド変換行列を付加すること、30 度の角度でワールド変換を回転します。  
  
-   青のペンには、回転、変換された楕円を描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#149](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#149)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#149](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#149)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#149](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#149)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="angle">回転角度。</param>
        <param name="order">回転が行列変換の後ろに追加されるか前に付加されるかを指定する <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> 列挙体のメンバー。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の変換行列に、指定した回転を指定した順序で適用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 回転操作から要素が派生した行列を使用して、変換行列を乗算することでは、 `angle` パラメーター。 このメソッドは、前に付加またはの変換行列を追加、 <xref:System.Drawing.Graphics> 」の手順に従って回転行列を使用して、 `order` パラメーター。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   ベクター \(100, 0\) で、Windows フォームのワールド変換行列に変換します。  
  
-   回転行列をワールド変換行列に追加すること、30 度の角度でワールド変換を回転 <xref:System.Drawing.Drawing2D.MatrixOrder.Append>します。  
  
-   青のペンには、変換、回転の楕円を描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#150](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#150)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#150](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#150)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#150](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#150)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsState Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsState Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Save" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の現在の状態を保存し、保存した状態を <see cref="T:System.Drawing.Drawing2D.GraphicsState" /> で識別します。</summary>
        <returns>このメソッドは、この <see cref="T:System.Drawing.Graphics" /> の保存状態を表す <see cref="T:System.Drawing.Drawing2D.GraphicsState" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 <xref:System.Drawing.Graphics.Save%2A> のメソッド、 <xref:System.Drawing.Graphics>, の状態を保持する情報ブロック、 <xref:System.Drawing.Graphics> は、スタックに配置します。<xref:System.Drawing.Graphics.Save%2A> メソッドが返される、 <xref:System.Drawing.Drawing2D.GraphicsState> 情報ブロックを識別します。 特定渡すときに <xref:System.Drawing.Drawing2D.GraphicsState> に、 <xref:System.Drawing.Graphics.Restore%2A> メソッド情報ブロックは、スタックから削除され、復元に使用、 <xref:System.Drawing.Graphics> の時点の状態を <xref:System.Drawing.Graphics.Save%2A> メソッドの呼び出しです。 注意してください、 <xref:System.Drawing.Drawing2D.GraphicsState> に特定の呼び出しによって返される、 <xref:System.Drawing.Graphics.Save%2A> にメソッドを 1 回だけ渡すことが、 <xref:System.Drawing.Graphics.Restore%2A> メソッドです。  
  
 呼び出し、 <xref:System.Drawing.Graphics.Save%2A> メソッドを入れ子にすることができます。 つまり、呼び出すことができます、 <xref:System.Drawing.Graphics.Save%2A> メソッドを複数回呼び出す前に、 <xref:System.Drawing.Graphics.Restore%2A> メソッドです。 呼び出すたびに、 <xref:System.Drawing.Graphics.Save%2A> メソッド情報ブロックは、スタックに配置し、表示されたら、<xref:System.Drawing.Drawing2D.GraphicsState> 情報ブロックです。 これらのオブジェクトを渡すときに、 <xref:System.Drawing.Graphics.Restore%2A> メソッド、 <xref:System.Drawing.Graphics> の時点の状態に返される、 <xref:System.Drawing.Graphics.Save%2A> メソッドの呼び出しの <xref:System.Drawing.Drawing2D.GraphicsState>です。 その情報ブロックが、スタックに配置 <xref:System.Drawing.Graphics.Save%2A> メソッドの呼び出しは、スタックから削除され、その後、すべての情報ブロックがそのスタックに配置 <xref:System.Drawing.Graphics.Save%2A> メソッドの呼び出しが削除されます。  
  
 呼び出し、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドの場所情報ブロックへの呼び出しとして同じスタック上、 <xref:System.Drawing.Graphics.Save%2A> メソッドです。 同様、 <xref:System.Drawing.Graphics.Restore%2A> 呼び出しとペアになり、 <xref:System.Drawing.Graphics.Save%2A> を呼び出すと、 <xref:System.Drawing.Graphics.EndContainer%2A> と組み合わされて、メソッドの呼び出し、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドの呼び出しです。  
  
 呼び出すと、 <xref:System.Drawing.Graphics.Restore%2A> メソッドでは、すべての情報ブロックは、スタックに配置 \(によって、 <xref:System.Drawing.Graphics.Save%2A> メソッドまたは、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッド\) に対応する呼び出しの後、 <xref:System.Drawing.Graphics.Save%2A> メソッドは、スタックから削除されます。 同様に、呼び出し、 <xref:System.Drawing.Graphics.EndContainer%2A> メソッドでは、すべての情報ブロックは、スタックに配置 \(によって、 <xref:System.Drawing.Graphics.Save%2A> メソッドまたは、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッド\) に対応する呼び出しの後、 <xref:System.Drawing.Graphics.BeginContainer%2A> メソッドは、スタックから削除されます。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   ベクター \(100, 0\) で Windows フォームのワールド変換を平行移動します。  
  
-   フォームのグラフィックスの状態を保存します。  
  
-   \(2 × 2 の行列とゼロ ベクトル平行移動\) に、フォームのワールド変換をリセットし、赤いソリッド ブラシで四角形を塗りつぶします。  
  
-   変換されたグラフィックの状態を復元し、青の単色ブラシで四角形を塗りつぶします。  
  
 左側の無変換赤で塗りつぶされた四角とフォームの右に翻訳された青で塗りつぶされた四角形になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#151](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#151)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#151](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#151)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#151](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#151)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ScaleTransform(System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="sx">x 方向のスケール ファクター。</param>
        <param name="sy">y 方向のスケール ファクター。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の変換行列の前に指定したスケーリング操作を付加することによって、この変換行列にスケーリング操作を適用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 要素が斜めの行列で変換行列を乗算したスケーリング操作で構成されます \(`sx`, 、`sy`, 1\)。 このメソッドの変換行列の前、 <xref:System.Drawing.Graphics> スケーリング行列を使用しています。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   Windows フォームのワールド変換行列を 30 度回転させます。  
  
-   X 方向の 3 倍および y 方向の 1 の要因によってスケーリングの変換を付加することによってそのマトリックスをスケーリングします。  
  
-   青のペンのスケーリングの回転した四角形を描画します。  
  
 結果が四角形です。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#152](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#152)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#152](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#152)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#152](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#152)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="sx">x 方向のスケール ファクター。</param>
        <param name="sy">y 方向のスケール ファクター。</param>
        <param name="order">スケーリング操作が変換行列の前に付加されるか後ろに追加されるかを指定する <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> 列挙体のメンバー。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の変換行列に、指定したスケーリング操作を指定した順序で適用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 要素が斜めの行列で変換行列を乗算したスケーリング操作で構成されます \(`sx`, 、`sy`, 1\)。 このメソッドは、前に付加またはの変換行列を追加、 <xref:System.Drawing.Graphics> 」の手順に従ってスケーリング行列を使用して、 `order` パラメーター。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   Windows フォームのワールド変換行列を 30 度回転させます。  
  
-   スケール変換を追加することによって、x 方向の 3 倍および y 方向の 1 の要因でそのマトリックスを拡大または縮小、 <xref:System.Drawing.Drawing2D.MatrixOrder.Append> メンバーです。  
  
-   青のペンを使用して、回転、拡大\/縮小された四角形を描画します。  
  
 指定した平行四辺形になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#153](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#153)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#153](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#153)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#153](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#153)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path">新しいクリップ領域を表す <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のクリッピング領域を指定した <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> オブジェクトに設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 グラフィックス パスがによって表される場合、 `path` パラメーターが閉じられていない追加の線分が最後のポイントから、パスを閉じるには、最初の点に追加します。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   グラフィックス パスを作成し、パスに楕円を追加します。  
  
-   クリッピング領域を楕円のモーション パスに設定します。  
  
-   黒いソリッド ブラシで大きな四角形を塗りつぶします。  
  
 黒で塗りつぶされた楕円になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#154](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#154)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#154](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#154)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#154](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#154)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Graphics g);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Graphics g) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Graphics)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="g">新しいクリップ領域の取得元となる <see cref="T:System.Drawing.Graphics" />。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のクリッピング領域を指定した <see cref="T:System.Drawing.Graphics" /> の <see langword="Clip" /> プロパティに設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, のパラメーターは、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーだけでなく `thisForm`, 、 <xref:System.Windows.Forms.Form> の例です。 コードは、次のアクションを実行します。  
  
-   一時的な作成 <xref:System.Drawing.Graphics> から、 `thisForm`<xref:System.Windows.Forms.Form> の例では、です。  
  
-   一時のクリッピング領域を設定 <xref:System.Drawing.Graphics> 、小さな正方形にします。  
  
-   フォームのグラフィック オブジェクトのクリッピング領域に更新を一時的な <xref:System.Drawing.Graphics>です。  
  
-   黒いソリッド ブラシで大きな四角形を塗りつぶします。  
  
 黒小規模で塗りつぶされた四角形になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#156](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#156)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#156](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#156)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#156](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#156)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Rectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">新しいクリップ領域を表す <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のクリッピング領域を <see cref="T:System.Drawing.Rectangle" /> 構造体で指定された四角形に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   クリッピング領域に小さい四角形を作成します。  
  
-   クリッピング領域を四角形に設定します。  
  
-   黒いソリッド ブラシで大きな四角形を塗りつぶします。  
  
 黒小規模で塗りつぶされた四角形になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#158](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#158)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#158](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#158)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#158](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#158)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.RectangleF)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">新しいクリップ領域を表す <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のクリッピング領域を <see cref="T:System.Drawing.RectangleF" /> 構造体で指定された四角形に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   クリッピング領域に小さい四角形を作成します。  
  
-   クリッピング領域を四角形に設定します。  
  
-   黒いソリッド ブラシで大きな四角形を塗りつぶします。  
  
 黒小規模で塗りつぶされた四角形になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#160](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#160)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#160](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#160)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#160](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#160)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Drawing2D.GraphicsPath path, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Drawing2D.GraphicsPath path, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.CombineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="path">組み合わせる <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />。</param>
        <param name="combineMode">使用する組み合わせ操作を指定する <see cref="T:System.Drawing.Drawing2D.CombineMode" /> 列挙体のメンバー。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のクリッピング領域を、現在のクリップ領域と指定した <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> とを組み合わせる指定の操作の結果に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 グラフィックス パスがによって表される場合、 `path` パラメーターが閉じられていない追加の線分が最後のポイントから、パスを閉じるには、最初の点に追加します。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   グラフィックス パスを作成し、パスに楕円を追加します。  
  
-   楕円のモーション パスにクリッピング領域を設定、 <xref:System.Drawing.Drawing2D.CombineMode.Replace> メンバーです。  
  
-   黒いソリッド ブラシで大きな四角形を塗りつぶします。  
  
 黒で塗りつぶされた楕円になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#155](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#155)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#155](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#155)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#155](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#155)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Graphics g, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Graphics g, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Graphics,System.Drawing.Drawing2D.CombineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Drawing.Graphics" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="g">組み合わせるクリップ領域を指定する <see cref="T:System.Drawing.Graphics" />。</param>
        <param name="combineMode">使用する組み合わせ操作を指定する <see cref="T:System.Drawing.Drawing2D.CombineMode" /> 列挙体のメンバー。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のクリッピング領域を、現在のクリップ領域と指定した <see cref="T:System.Drawing.Graphics" /> の <see cref="P:System.Drawing.Graphics.Clip" /> プロパティとを組み合わせる指定の操作の結果に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, のパラメーターは、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーだけでなく `thisForm`, 、 <xref:System.Windows.Forms.Form> の例です。 コードは、次のアクションを実行します。  
  
-   一時的な作成 <xref:System.Drawing.Graphics> から、 `thisForm`<xref:System.Windows.Forms.Form> の例では、です。  
  
-   一時のクリッピング領域を設定 <xref:System.Drawing.Graphics> 、小さな正方形にします。  
  
-   フォームのグラフィック オブジェクトのクリッピング領域を更新する新しい <xref:System.Drawing.Graphics> で、 <xref:System.Drawing.Drawing2D.CombineMode.Replace> メンバーです。  
  
-   黒いソリッド ブラシで大きな四角形を塗りつぶします。  
  
 黒小規模で塗りつぶされた四角形になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#157](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#157)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#157](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#157)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#157](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#157)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Rectangle rect, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.Rectangle rect, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Rectangle,System.Drawing.Drawing2D.CombineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="rect">組み合わせる <see cref="T:System.Drawing.Rectangle" /> 構造体。</param>
        <param name="combineMode">使用する組み合わせ操作を指定する <see cref="T:System.Drawing.Drawing2D.CombineMode" /> 列挙体のメンバー。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のクリッピング領域を現在のクリップ領域と <see cref="T:System.Drawing.Rectangle" /> 構造体で指定された四角形とを組み合わせる指定の操作の結果に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   クリッピング領域に小さい四角形を作成します。  
  
-   クリッピング領域を含む四角形に設定、 <xref:System.Drawing.Drawing2D.CombineMode.Replace> メンバーです。  
  
-   黒いソリッド ブラシで大きな四角形を塗りつぶします。  
  
 黒小規模で塗りつぶされた四角形になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#159](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#159)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#159](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#159)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#159](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#159)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.RectangleF rect, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.RectangleF rect, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.RectangleF,System.Drawing.Drawing2D.CombineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="rect">組み合わせる <see cref="T:System.Drawing.RectangleF" /> 構造体。</param>
        <param name="combineMode">使用する組み合わせ操作を指定する <see cref="T:System.Drawing.Drawing2D.CombineMode" /> 列挙体のメンバー。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のクリッピング領域を現在のクリップ領域と <see cref="T:System.Drawing.RectangleF" /> 構造体で指定された四角形とを組み合わせる指定の操作の結果に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   クリッピング領域に小さい四角形を作成します。  
  
-   クリッピング領域を含む四角形に設定、 <xref:System.Drawing.Drawing2D.CombineMode.Replace> メンバーです。  
  
-   黒いソリッド ブラシで大きな四角形を塗りつぶします。  
  
 黒小規模で塗りつぶされた四角形になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#161](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#161)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#161](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#161)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#161](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#161)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Region region, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Region region, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Region,System.Drawing.Drawing2D.CombineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="region">組み合わせる <see cref="T:System.Drawing.Region" />。</param>
        <param name="combineMode">使用する組み合わせ操作を指定する <see cref="T:System.Drawing.Drawing2D.CombineMode" /> 列挙体のメンバー。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のクリッピング領域を、現在のクリップ領域と指定した <see cref="T:System.Drawing.Region" /> とを組み合わせる指定の操作の結果に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   クリッピング領域に小さい四角形を作成します。  
  
-   クリッピング領域を含む四角形に設定、 <xref:System.Drawing.Drawing2D.CombineMode.Replace> メンバーです。  
  
-   黒いソリッド ブラシで大きな四角形を塗りつぶします。  
  
 黒小規模で塗りつぶされた四角形になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#162](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#162)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#162](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#162)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#162](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#162)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SmoothingMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.SmoothingMode SmoothingMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.SmoothingMode SmoothingMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.SmoothingMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.SmoothingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のレンダリング品質を取得または設定します。</summary>
        <value>
          <see cref="T:System.Drawing.Drawing2D.SmoothingMode" /> 値のいずれか。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 スムージング モードでは、あるかどうか直線、曲線、および塗りつぶし領域の境界線を使用してスムージング \(アンチエイリアシングとも呼ばれます\) を指定します。 スムージング モードがパス グラデーション ブラシに従いませんは例外です。 使用して塗りつぶされる領域、 <xref:System.Drawing.Drawing2D.PathGradientBrush> に関係なく同じ方法 \(エイリアス\) を表示、 <xref:System.Drawing.Graphics.SmoothingMode%2A> プロパティです。  
  
   
  
## 例  
 次のメソッドを設定の効果を示しています、 <xref:System.Drawing.Pen.DashCap%2A>, 、<xref:System.Drawing.Pen.DashPattern%2A>, 、および <xref:System.Drawing.Graphics.SmoothingMode%2A> プロパティです。 例の出力は次の図に示します。  
  
 1fcf98fd-0593-4e3f-b47e-a076b7ef470d  
  
 この例は、Windows フォームで使用される設計されています。 フォームと呼び出しにコードを貼り付けます、 `ShowPensAndSmoothingMode` メソッドは、フォームの処理と <xref:System.Windows.Forms.Control.Paint> イベントを渡す `e` として <xref:System.Windows.Forms.PaintEventArgs>します。  
  
 [!code-cpp[System.Drawing.PensExample\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.PensExample\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.PensExample\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextContrast">
      <MemberSignature Language="C#" Value="public int TextContrast { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextContrast" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.TextContrast" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>レンダリング テキストのガンマ補正値を取得または設定します。</summary>
        <value>アンチエイリアス処理されたテキストおよび ClearType テキストを描画するために使用されるガンマ補正値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ガンマ補正値は、0 ~ 12 で指定する必要があります。 既定値は 4 です。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.Drawing.Graphics.TextRenderingHint%2A> と <xref:System.Drawing.Graphics.TextContrast%2A> プロパティです。  
  
 この例は、Windows フォームで使用される設計されています。 フォームと呼び出しにコードを貼り付けます、 `ChangeTextRenderingHintAndTextContrast` メソッドは、フォームの処理と <xref:System.Windows.Forms.Control.Paint> イベントを渡す `e` として <xref:System.Windows.Forms.PaintEventArgs>します。  
  
 [!code-cpp[System.Drawing.GraphicsProperties\#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.GraphicsProperties\#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#5)]
 [!code-vb[System.Drawing.GraphicsProperties\#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextRenderingHint">
      <MemberSignature Language="C#" Value="public System.Drawing.Text.TextRenderingHint TextRenderingHint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Text.TextRenderingHint TextRenderingHint" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.TextRenderingHint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Text.TextRenderingHint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> に関連付けられているテキストのレンダリング モードを取得または設定します。</summary>
        <value>
          <see cref="T:System.Drawing.Text.TextRenderingHint" /> 値のいずれか。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 テキストのレンダリング ヒントでは、テキストがアンチ エイリアスを使用してレンダリングするかどうかを指定します。  
  
> [!NOTE]
>  使用しないでください、 <xref:System.Drawing.Graphics.CompositingMode%2A> のプロパティの値 <xref:System.Drawing.Drawing2D.CompositingMode.SourceCopy> ときに、 <xref:System.Drawing.Graphics.TextRenderingHint%2A> にプロパティが設定されている <xref:System.Drawing.Text.TextRenderingHint.ClearTypeGridFit>します。 例外が発生する可能性があります。 またはイメージが正しく表示されない場合があります。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.Drawing.Graphics.TextRenderingHint%2A> と <xref:System.Drawing.Graphics.TextContrast%2A> プロパティです。  
  
 この例は、Windows フォームで使用される設計されています。 フォームと呼び出しにコードを貼り付けます、 `ChangeTextRenderingHintAndTextContrast` メソッドは、フォームの処理と <xref:System.Windows.Forms.Control.Paint> イベントを渡す `e` として <xref:System.Windows.Forms.PaintEventArgs>します。  
  
 [!code-cpp[System.Drawing.GraphicsProperties\#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.GraphicsProperties\#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#5)]
 [!code-vb[System.Drawing.GraphicsProperties\#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.Matrix Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.Matrix Transform" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.Transform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のジオメトリック ワールド変換のコピーを取得または設定します。</summary>
        <value>この <see cref="T:System.Drawing.Graphics" /> のジオメトリック ワールド変換を表す <see cref="T:System.Drawing.Drawing2D.Matrix" /> のコピー。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 GDI \+ で次の 3 つの座標空間を使用します。 世界、ページ、およびデバイスです。 ワールド座標は、特定のグラフィック ワールドをモデル化するために使用する座標を .NET Framework のメソッドに渡す座標です。 ページ座標は、フォームやコントロールなどの描画サーフェイスで使用される座標系を参照してください。 デバイス座標は、画面やプリンターなど、描画が行われる物理デバイスで使用される座標です。<xref:System.Drawing.Graphics.Transform%2A> プロパティはページ座標にワールド座標をマップするワールド変換を表します。  
  
 マトリックスが返されるので、 <xref:System.Drawing.Graphics.Transform%2A> プロパティ ジオメトリック変換のコピーであるが不要になった場合は、行列の破棄する必要があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformPoints">
      <MemberSignature Language="C#" Value="public void TransformPoints (System.Drawing.Drawing2D.CoordinateSpace destSpace, System.Drawing.Drawing2D.CoordinateSpace srcSpace, System.Drawing.Point[] pts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransformPoints(valuetype System.Drawing.Drawing2D.CoordinateSpace destSpace, valuetype System.Drawing.Drawing2D.CoordinateSpace srcSpace, valuetype System.Drawing.Point[] pts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Point[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="srcSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="pts" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="destSpace">変換先の座標空間を指定する <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> 列挙体のメンバー。</param>
        <param name="srcSpace">変換元の座標空間を指定する <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> 列挙体のメンバー。</param>
        <param name="pts">変換する点を表す <see cref="T:System.Drawing.Point" /> 構造体の配列。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の現在のワールド変換とページ変換を使用して、点の配列をある座標空間から別の座標空間に変換します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   2 つのポイントを作成し、それらの間、青い直線を描画します。  
  
-   平行移動する 40 の x 方向および y 方向の 30 ワールド変換を設定します。  
  
-   ワールド座標からポイントに変換 \(<xref:System.Drawing.Drawing2D.CoordinateSpace.World>\) からページ座標へ \(<xref:System.Drawing.Drawing2D.CoordinateSpace.Page>\)。  
  
-   ワールド変換を単位行列にリセットします。  
  
-   変換された点の間には、赤色の線を描画します。  
  
 青い線と下にある赤色の線を翻訳済みになります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#163](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#163)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#163](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#163)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#163](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#163)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformPoints">
      <MemberSignature Language="C#" Value="public void TransformPoints (System.Drawing.Drawing2D.CoordinateSpace destSpace, System.Drawing.Drawing2D.CoordinateSpace srcSpace, System.Drawing.PointF[] pts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransformPoints(valuetype System.Drawing.Drawing2D.CoordinateSpace destSpace, valuetype System.Drawing.Drawing2D.CoordinateSpace srcSpace, valuetype System.Drawing.PointF[] pts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.PointF[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="srcSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="pts" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="destSpace">変換先の座標空間を指定する <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> 列挙体のメンバー。</param>
        <param name="srcSpace">変換元の座標空間を指定する <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> 列挙体のメンバー。</param>
        <param name="pts">変換する点を表す <see cref="T:System.Drawing.PointF" /> 構造体の配列。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の現在のワールド変換とページ変換を使用して、点の配列をある座標空間から別の座標空間に変換します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   2 つのポイントを作成し、それらの間、青い直線を描画します。  
  
-   平行移動する 40 の x 方向および y 方向の 30 ワールド変換を設定します。  
  
-   ワールド座標からポイントに変換 \(<xref:System.Drawing.Drawing2D.CoordinateSpace.World>\) からページ座標へ \(<xref:System.Drawing.Drawing2D.CoordinateSpace.Page>\)。  
  
-   ワールド変換を単位行列にリセットし、変換された点の間で赤色の線を描画します。  
  
 青い線と下にある赤色の線を翻訳済みになります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#164](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#164)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#164](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#164)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#164](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#164)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateClip">
      <MemberSignature Language="C#" Value="public void TranslateClip (int dx, int dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateClip(int32 dx, int32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateClip(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Int32" />
        <Parameter Name="dy" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dx">平行移動する x 座標。</param>
        <param name="dy">平行移動する y 座標。</param>
        <summary>指定した量だけ水平方向および垂直方向に、この <see cref="T:System.Drawing.Graphics" /> のクリッピング領域を平行移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   クリッピング領域に四角形を作成します。  
  
-   クリッピング領域を四角形に設定します。  
  
-   ベクター \(50, 50\) では、クリッピング領域を平行移動します。  
  
-   黒いソリッド ブラシで大きな四角形を塗りつぶします。  
  
 変換された、小規模、黒の四角形になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#165](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#165)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#165](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#165)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#165](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#165)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateClip">
      <MemberSignature Language="C#" Value="public void TranslateClip (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateClip(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateClip(System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">平行移動する x 座標。</param>
        <param name="dy">平行移動する y 座標。</param>
        <summary>指定した量だけ水平方向および垂直方向に、この <see cref="T:System.Drawing.Graphics" /> のクリッピング領域を平行移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   クリッピング領域に四角形を作成します。  
  
-   クリッピング領域を四角形に設定します。  
  
-   ベクター \(50.0 f, 50.0 f\) では、クリッピング領域を平行移動します。  
  
-   黒いソリッド ブラシで大きな四角形を塗りつぶします。  
  
 変換された、小規模、黒の四角形になります。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#166](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#166)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#166](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#166)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#166](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#166)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateTransform(System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">平行移動する x 座標。</param>
        <param name="dy">平行移動する y 座標。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の変換行列の前に指定の平行移動を付加することによって、座標系の原点を変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 原点は、通常、描画サーフェイスの左上隅です。  変換操作では移動部が行列変換行列を乗算することを `dx` と `dy` パラメーター。 このメソッドは、変換行列に平行移動行列を付加することによって、変換を適用します。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   Windows フォームのワールド変換行列を 30.0F 度回転させます。  
  
-   呼び出して、graphics オブジェクトの原点に移動 <xref:System.Drawing.Graphics.TranslateTransform%2A>, 、前に平行移動変換行列を付加することです。  
  
-   青のペンには、変換、回転の楕円を描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#167](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#167)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#167](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#167)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#167](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#167)]  
  
 次の図は、上記のコード例を実行中の出力を示します。  
  
 4aefdb08-0eff-43eb-b6d5-33b3816b5b2a  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="dx">平行移動する x 座標。</param>
        <param name="dy">平行移動する y 座標。</param>
        <param name="order">平行移動が変換行列の前に付加されるか後に追加されるかを指定する <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> 列挙体のメンバー。</param>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の変換行列に指定の平行移動を指定の順序で適用することによって、座標系の原点を変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 変換操作では移動部が行列変換行列を乗算することを `dx` と `dy` パラメーター。 このメソッドは、前に付加またはの変換行列を追加、 <xref:System.Drawing.Graphics> 」の手順に従って平行移動行列を使用して、 `order` パラメーター。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   Windows フォームのワールド変換行列を 30.0F 度回転させます。  
  
-   呼び出して、グラフィックス オブジェクトの原点に移動 <xref:System.Drawing.Graphics.TranslateTransform%2A>, 、ワールド変換行列に翻訳を追加します。  
  
-   青のペンには、回転、変換された楕円を描画します。  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3\#168](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#168)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3\#168](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#168)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3\#168](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#168)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisibleClipBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF VisibleClipBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.RectangleF VisibleClipBounds" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.VisibleClipBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の表示クリッピング領域に外接する四角形を取得します。</summary>
        <value>この <see cref="T:System.Drawing.Graphics" /> の表示クリッピング領域に外接する四角形を表す <see cref="T:System.Drawing.RectangleF" /> 構造体。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 結果として得られる四角形の単位がによって指定された、<xref:System.Drawing.Graphics.PageUnit%2A>プロパティです。 既定の単位はピクセルです。 A<xref:System.Drawing.Graphics>コントロールに通常関連付けは、そのコントロールのクライアント領域と相対的元の四角形になります。  
  
 表示クリッピング領域は、これのクリッピング領域<xref:System.Drawing.Graphics>とウィンドウのクリッピング領域。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExcludeClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Drawing.Rectangle" /> 構造体で指定された領域が除外されるように、この <see cref="T:System.Drawing.Graphics" /> のクリップ領域を更新します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="FillEllipse">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>座標ペア、高さ、および幅で指定された外接する四角形によって定義される楕円を描画します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="IntersectClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のクリップ領域を現在のクリップ領域と指定した <see cref="T:System.Drawing.Rectangle" /> 構造体との交差部分に更新します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="FillRectangle">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>座標ペア、幅、および高さで指定された四角形の内部を塗りつぶします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ScaleTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の変換行列の前に指定したスケーリング操作を付加することによって、この変換行列にスケーリング操作を適用します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="TranslateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の変換行列の前に指定の平行移動を付加することによって、座標系の原点を変更します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="FillRectangles">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Drawing.Rectangle" /> 構造体で指定された一連の四角形の内部を塗りつぶします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="DrawBezier">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>4 つの <see cref="T:System.Drawing.Point" /> 構造体で定義されるベジエ スプラインを描画します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="DrawClosedCurve">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Drawing.Point" /> 構造体の配列で定義された、閉じたカーディナル スプラインを描画します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="FillPie">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>座標ペア、幅、および高さで指定された楕円と 2 本の半径によって定義される扇形の内部を塗りつぶします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="DrawRectangle">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>座標ペア、幅、および高さで指定された四角形を描画します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="DrawCurve">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した <see cref="T:System.Drawing.Point" /> 構造体の配列を通過するカーディナル スプラインを描画します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="CopyFromScreen">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>画面から <see cref="T:System.Drawing.Graphics" /> の描画サーフェイスへの、色データのビット ブロック転送を実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="DrawImage">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した位置に元のサイズで、指定した <see cref="T:System.Drawing.Image" /> を描画します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="TransformPoints">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の現在のワールド変換とページ変換を使用して、点の配列をある座標空間から別の座標空間に変換します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="DrawPie">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>座標ペア、幅、および高さで指定された楕円と 2 本の半径によって定義される扇形を描画します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="DrawArc">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>座標ペア、幅、および高さで指定された楕円の一部を表す円弧を描画します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="DrawBeziers">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Drawing.Point" /> 構造体の配列から一連のベジエ スプラインを描画します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="SetClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> のクリッピング領域を指定した <see cref="T:System.Drawing.Graphics" /> の <see langword="Clip" /> プロパティに設定します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="DrawEllipse">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>座標ペア、高さ、および幅で指定された外接する四角形によって定義される楕円を描画します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="MeasureString">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した <see cref="T:System.Drawing.Font" /> で描画した場合の、指定した文字列を計測します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="IsVisible">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>座標ペアで指定された点が、この <see cref="T:System.Drawing.Graphics" /> の表示クリップ領域内にあるかどうかを示します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Flush">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>保留中のグラフィックス操作をすべて強制実行し、操作の終了を待機せずにすぐに制御を戻します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="DrawRectangles">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Drawing.Rectangle" /> 構造体で指定された一連の四角形を描画します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="TranslateClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した量だけ水平方向および垂直方向に、この <see cref="T:System.Drawing.Graphics" /> のクリッピング領域を平行移動します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="DrawString">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した位置に、指定した <see cref="T:System.Drawing.Brush" /> オブジェクトと <see cref="T:System.Drawing.Font" /> オブジェクトで、指定した文字列を描画します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="BeginContainer">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の現在の状態でグラフィックス コンテナーを保存し、新しいグラフィックス コンテナーを開いて使用します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="DrawIcon">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した <see cref="T:System.Drawing.Icon" /> によって表されるイメージを指定した座標に描画します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="FillClosedCurve">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Drawing.Point" /> 構造体の配列で定義される、閉じたカーディナル スプライン曲線の内部を塗りつぶします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="EnumerateMetafile">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した <see cref="T:System.Drawing.Imaging.Metafile" /> のレコードをコールバック メソッドに一度に 1 つずつ送信して、指定した点に表示します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="RotateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の変換行列に、指定した回転を適用します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="DrawPolygon">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Drawing.Point" /> 構造体の配列で定義された多角形を描画します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="FromHdc">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>デバイス コンテキストを識別する指定のハンドルから新しい <see cref="T:System.Drawing.Graphics" /> を作成します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="DrawLines">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Drawing.Point" /> 構造体の配列を接続する一連の線分を描画します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="DrawImageUnscaled">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したイメージを座標ペアで指定された位置に元の物理サイズで描画します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="DrawLine">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>座標ペアで指定された 2 つの点を結ぶ直線を描画します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="MultiplyTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> と指定した <see cref="T:System.Drawing.Drawing2D.Matrix" /> のワールド変換を乗算します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ReleaseHdc">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Graphics" /> の <see cref="M:System.Drawing.Graphics.GetHdc" /> メソッドを前回呼び出したときに取得したデバイス コンテキスト ハンドルを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="FillPolygon">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Drawing.Point" /> 構造体で指定された点の配列によって定義される多角形の内部を塗りつぶします。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>