<Type Name="Bitmap" FullName="System.Drawing.Bitmap">
  <TypeSignature Language="C#" Value="public sealed class Bitmap : System.Drawing.Image" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit Bitmap extends System.Drawing.Image" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Bitmap" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Drawing.Image</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Editor("System.Drawing.Design.BitmapEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>カプセル化、 GDI+ ビットマップで、グラフィック イメージとその属性のピクセル データで構成します。 A <see cref="T:System.Drawing.Bitmap" /> オブジェクトのピクセル データによって定義されたイメージを操作するために使用します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 ビットマップは、グラフィック イメージとその属性のピクセル データで構成されます。 ビットマップをファイルに保存するための多くの標準的な形式があります。[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] 次のファイル形式をサポートしています: BMP、GIF、EXIF、JPG、PNG、TIFF。 サポートされている形式の詳細については、次を参照してください。 [Types of Bitmaps](http://msdn.microsoft.com/ja-jp/6be085a2-2c13-47c8-b80a-c18b32777d8d)します。  
  
 いずれかを使用して、ファイル、ストリーム、およびその他のソースからイメージを作成することができます、 <xref:System.Drawing.Bitmap.%23ctor%2A> コンス トラクターをストリームまたはファイル システムに保存して、 <xref:System.Drawing.Image.Save%2A> メソッドです。 イメージが描画される画面またはメモリを使用して、 <xref:System.Drawing.Graphics.DrawImage%2A> のメソッド、 <xref:System.Drawing.Graphics> オブジェクトです。 イメージ ファイルの使用に関するトピックの一覧は、次を参照してください。 [Working with Images, Bitmaps, Icons, and Metafiles](http://msdn.microsoft.com/ja-jp/a626d701-bd99-4fd8-b92f-7b8f794e042b)します。  
  
> [!NOTE]
>  <xref:System.Drawing.Bitmap> クラスは、アプリケーション ドメイン間ではアクセス可能ではありません。 たとえば、動的なを作成する <xref:System.AppDomain> とそのドメインに、これらのオブジェクトがメインのアプリケーション ドメインにバックアップ パスにいくつかのブラシ、ペン、およびビットマップを作成、ブラシ、ペンを正しく使用することができます。 ただしを呼び出す場合、 <xref:System.Drawing.Graphics.DrawImage%2A> 、マーシャ リングを描画するメソッド <xref:System.Drawing.Bitmap>, 、次の例外が発生します。  
>   
>  リモート処理によっては、"System.Drawing.Image"の種類のフィールド「ネイティブ イメージ」が見つかりません。  
  
   
  
## 例  
 次のコード例では、新しい <xref:System.Drawing.Bitmap> ファイルを使用して、 <xref:System.Drawing.Bitmap.GetPixel%2A> と <xref:System.Drawing.Bitmap.SetPixel%2A> イメージの色を変更する方法です。 使用して、 <xref:System.Drawing.Image.PixelFormat%2A>, 、<xref:System.Drawing.Image.Width%2A>, 、および <xref:System.Drawing.Image.Height%2A> プロパティです。  
  
 含む Windows フォームで使用するこの例の目的は、 <xref:System.Windows.Forms.Label>, 、<xref:System.Windows.Forms.PictureBox>, 、および <xref:System.Windows.Forms.Button> 名前付き `Label1`, 、`PictureBox1`, 、および `Button1`, 、それぞれします。 コードをフォームに貼り付け、 `Button1_Click` メソッドをボタンの <xref:System.Windows.Forms.Control.Click> イベントです。  
  
 [!code-cpp[System.Drawing.ImageExample\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ImageExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.ImageExample\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ImageExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.ImageExample\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ImageExample/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.PictureBox" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Bitmap (System.Drawing.Image original);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Image original) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Bitmap.#ctor(System.Drawing.Image)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="original" Type="System.Drawing.Image" />
      </Parameters>
      <Docs>
        <param name="original">新しい <see cref="T:System.Drawing.Bitmap" /> の作成元の <see cref="T:System.Drawing.Image" />。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Drawing.Bitmap" /> クラス指定した既存のイメージからです。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Bitmap (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Bitmap.#ctor(System.IO.Stream)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">イメージを読み込むために使用するデータ ストリーム。</param>
        <summary>指定したデータ ストリームで <see cref="T:System.Drawing.Bitmap" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 必要があります、ストリームを開いたままの有効期間中に、 <xref:System.Drawing.Bitmap>です。  
  
 制限により、 [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] デコーダー、 <xref:System.ArgumentException?displayProperty=fullName> 65,535 ピクセルを超える 1 次元の .png イメージ ファイルからビットマップを作成している場合にスローされます。  
  
   
  
## 例  
 次のコード例では、ストリームからビットマップを読み込む方法を示します。  
  
 この例は、Windows フォームで使用される設計されています。 含むフォームを作成、 <xref:System.Windows.Forms.PictureBox> という `PictureBox1`します。 フォームと呼び出しにコードを貼り付けます、 `InitializeStreamBitmap` フォームのコンス トラクターからのメソッドまたは <xref:System.Windows.Forms.Form.Load> イベント処理メソッドです。  
  
 [!code-cpp[System.Drawing.BitmapMembers\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.BitmapMembers/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.BitmapMembers\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.BitmapMembers/CS/form1.cs#2)]
 [!code-vb[System.Drawing.BitmapMembers\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.BitmapMembers/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="stream" /> 画像データが含まれていないか、 <see langword="null" />です。  
  
 または  
  
 <paramref name="stream" /> 65,535 ピクセルよりも大きい値の 1 つのディメンションの PNG イメージ ファイルが含まれています。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Bitmap (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Bitmap.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">ビットマップ ファイルの名前とパス。</param>
        <summary>指定したファイルで <see cref="T:System.Drawing.Bitmap" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アプリケーション パスまたは絶対パスに対する相対パスとファイルの名前ができます。 次のファイル形式のイメージを開いて、このコンス トラクターを使用: BMP、GIF、EXIF、JPG、PNG、TIFF。 サポートされている形式の詳細については、次を参照してください。 [Types of Bitmaps](http://msdn.microsoft.com/ja-jp/6be085a2-2c13-47c8-b80a-c18b32777d8d)します。 ファイルがまでロックされたまま、 <xref:System.Drawing.Bitmap> が破棄されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">指定したファイルが見つかりませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Bitmap (System.Drawing.Image original, System.Drawing.Size newSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Image original, valuetype System.Drawing.Size newSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Bitmap.#ctor(System.Drawing.Image,System.Drawing.Size)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="original" Type="System.Drawing.Image" />
        <Parameter Name="newSize" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="original">新しい <see cref="T:System.Drawing.Bitmap" /> の作成元の <see cref="T:System.Drawing.Image" />。</param>
        <param name="newSize">
          <see cref="T:System.Drawing.Size" /> 構造体の新しいサイズを表す <see cref="T:System.Drawing.Bitmap" />します。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Drawing.Bitmap" /> クラスから指定されたサイズにスケール アップ既存のイメージを指定します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Exception">操作に失敗しました。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Bitmap (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Bitmap.#ctor(System.Int32,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">幅 \(ピクセル単位\) の新しい <see cref="T:System.Drawing.Bitmap" />します。</param>
        <param name="height">高さ \(ピクセル単位\) の新しい <see cref="T:System.Drawing.Bitmap" />します。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Drawing.Bitmap" /> サイズが指定したクラスです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターを作成、 <xref:System.Drawing.Bitmap> で、 <xref:System.Drawing.Imaging.PixelFormat> 列挙値の <xref:System.Drawing.Imaging.PixelFormat.Format32bppArgb>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">操作に失敗しました。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Bitmap (System.IO.Stream stream, bool useIcm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, bool useIcm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Bitmap.#ctor(System.IO.Stream,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="useIcm" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">イメージを読み込むために使用するデータ ストリーム。</param>
        <param name="useIcm">
          <see langword="true" /> 色補正を使用する <see cref="T:System.Drawing.Bitmap" />。 そうしないと、 <see langword="false" />です。</param>
        <summary>指定したデータ ストリームで <see cref="T:System.Drawing.Bitmap" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 必要があります、ストリームを開いたままの有効期間中に、 <xref:System.Drawing.Bitmap>です。  
  
 制限により、 [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] デコーダー、 <xref:System.ArgumentException?displayProperty=fullName> 65,535 ピクセルを超える 1 次元の .png イメージ ファイルからビットマップを作成している場合にスローされます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="stream" /> 画像データが含まれていないか、 <see langword="null" />です。  
  
 または  
  
 <paramref name="stream" /> 65,535 ピクセルよりも大きい値の 1 つのディメンションの PNG イメージ ファイルが含まれています。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Bitmap (string filename, bool useIcm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename, bool useIcm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Bitmap.#ctor(System.String,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="useIcm" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="filename">ビットマップ ファイルの名前。</param>
        <param name="useIcm">
          <see langword="true" /> 色補正を使用する <see cref="T:System.Drawing.Bitmap" />。 そうしないと、 <see langword="false" />です。</param>
        <summary>指定したファイルで <see cref="T:System.Drawing.Bitmap" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 次のファイル形式のイメージを開いて、このコンス トラクターを使用: BMP、GIF、EXIF、JPG、PNG、TIFF。 サポートされている形式の詳細については、次を参照してください。 [Types of Bitmaps](http://msdn.microsoft.com/ja-jp/6be085a2-2c13-47c8-b80a-c18b32777d8d)します。 ファイルがまでロックされたまま、 <xref:System.Drawing.Bitmap> が破棄されます。  
  
   
  
## 例  
 次のコード例では、ファイルから新しいビットマップを作成する方法を示します。 例では、 <xref:System.Drawing.Bitmap.GetPixel%2A> と <xref:System.Drawing.Bitmap.SetPixel%2A> イメージの色を変更する方法です。 使用して、 <xref:System.Drawing.Image.PixelFormat%2A> プロパティです。  
  
 含む Windows フォームで使用するこの例の目的は、 <xref:System.Windows.Forms.Label>, 、<xref:System.Windows.Forms.PictureBox> と <xref:System.Windows.Forms.Button> という `Label1`, 、`PictureBox1` と `Button1`, 、それぞれします。 コードをフォームに貼り付け、 `Button1_Click` メソッドをボタンの <xref:System.Windows.Forms.Control.Click> イベントです。  
  
 [!code-cpp[System.Drawing.ImageExample\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ImageExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.ImageExample\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ImageExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.ImageExample\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ImageExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling into unmanaged code. Related enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Bitmap (Type type, string resource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type, string resource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Bitmap.#ctor(System.Type,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resource" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">リソースを抽出するために使用するクラスです。</param>
        <param name="resource">リソースの名前。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Drawing.Bitmap" /> 指定されたリソースからクラスです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターは、リソースの文字列名に指定された型の名前空間を結合し、アセンブリ マニフェストに一致するものを探します。 たとえばに渡すことが、 <xref:System.Windows.Forms.Button> 型と `Button.bmp` をこのコンス トラクターとは探しますという名前のリソース `System.Windows.Forms.Button.bmp`します。  
  
   
  
## 例  
 次のコード例は、型からビットマップを作成する方法と使用方法を示しています、 <xref:System.Drawing.Image.Save%2A> メソッドです。 この例を実行するには、Windows フォームにコードを貼り付けます。 フォームの処理 <xref:System.Windows.Forms.Control.Paint> イベントと呼び出し、 `ConstructFromResourceSaveAsGif` を渡してメソッドを `e` として <xref:System.Windows.Forms.PaintEventArgs>  
  
 [!code-cpp[System.Drawing.BmpCtorAndSave\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.BmpCtorAndSave/cpp/form1.cpp#1)]
 [!code-csharp[System.Drawing.BmpCtorAndSave\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.BmpCtorAndSave/CS/form1.cs#1)]
 [!code-vb[System.Drawing.BmpCtorAndSave\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.BmpCtorAndSave/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Bitmap (System.Drawing.Image original, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Image original, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Bitmap.#ctor(System.Drawing.Image,System.Int32,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="original" Type="System.Drawing.Image" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="original">新しい <see cref="T:System.Drawing.Bitmap" /> の作成元の <see cref="T:System.Drawing.Image" />。</param>
        <param name="width">幅 \(ピクセル単位\) の新しい <see cref="T:System.Drawing.Bitmap" />します。</param>
        <param name="height">高さ \(ピクセル単位\) の新しい <see cref="T:System.Drawing.Bitmap" />します。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Drawing.Bitmap" /> クラスから指定されたサイズにスケール アップ既存のイメージを指定します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Exception">操作に失敗しました。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Bitmap (int width, int height, System.Drawing.Graphics g);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 width, int32 height, class System.Drawing.Graphics g) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Bitmap.#ctor(System.Int32,System.Int32,System.Drawing.Graphics)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="g" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="width">幅 \(ピクセル単位\) の新しい <see cref="T:System.Drawing.Bitmap" />します。</param>
        <param name="height">高さ \(ピクセル単位\) の新しい <see cref="T:System.Drawing.Bitmap" />します。</param>
        <param name="g">
          <see cref="T:System.Drawing.Graphics" /> 新しいの解像度を指定するオブジェクト <see cref="T:System.Drawing.Bitmap" />します。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Drawing.Bitmap" /> クラスの指定したサイズと解像度の指定した <see cref="T:System.Drawing.Graphics" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 新しい <xref:System.Drawing.Bitmap> からの水平および垂直方向の解像度は、このメソッドが作成される、 <xref:System.Drawing.Graphics.DpiX%2A> と <xref:System.Drawing.Graphics.DpiY%2A> のプロパティ `g`, 、それぞれします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="g" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Bitmap (int width, int height, System.Drawing.Imaging.PixelFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 width, int32 height, valuetype System.Drawing.Imaging.PixelFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Bitmap.#ctor(System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="format" Type="System.Drawing.Imaging.PixelFormat" />
      </Parameters>
      <Docs>
        <param name="width">幅 \(ピクセル単位\) の新しい <see cref="T:System.Drawing.Bitmap" />します。</param>
        <param name="height">高さ \(ピクセル単位\) の新しい <see cref="T:System.Drawing.Bitmap" />します。</param>
        <param name="format">新しいのピクセル形式 <see cref="T:System.Drawing.Bitmap" />します。 これで始まる値を指定する必要があります <c>Format</c>します。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Drawing.Bitmap" /> クラスを指定したサイズと形式を使用します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">A <see cref="T:System.Drawing.Imaging.PixelFormat" /> 名前の値で始まらない値が指定されて *形式*します。 などを指定する <see cref="F:System.Drawing.Imaging.PixelFormat.Gdi" /> により、 <see cref="T:System.ArgumentException" />, が <see cref="F:System.Drawing.Imaging.PixelFormat.Format48bppRgb" /> されません。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Bitmap (int width, int height, int stride, System.Drawing.Imaging.PixelFormat format, IntPtr scan0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 width, int32 height, int32 stride, valuetype System.Drawing.Imaging.PixelFormat format, native int scan0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Bitmap.#ctor(System.Int32,System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat,System.IntPtr)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="stride" Type="System.Int32" />
        <Parameter Name="format" Type="System.Drawing.Imaging.PixelFormat" />
        <Parameter Name="scan0" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="width">幅 \(ピクセル単位\) の新しい <see cref="T:System.Drawing.Bitmap" />します。</param>
        <param name="height">高さ \(ピクセル単位\) の新しい <see cref="T:System.Drawing.Bitmap" />します。</param>
        <param name="stride">次の 1 つのスキャンの行の先頭の間のバイト オフセットを指定する整数。 これは、通常 \(必ずではありません\)、ピクセル形式 \(たとえば、16 ビット\/ピクセルの 2\) のバイト数が、ビットマップの幅を乗算します。 このパラメーターに渡される値は、4 の倍数である必要があります.</param>
        <param name="format">新しいのピクセル形式 <see cref="T:System.Drawing.Bitmap" />します。 始まる値を指定するあります <c>Format</c>します。</param>
        <param name="scan0">ピクセル データを格納するバイト配列へのポインター。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Drawing.Bitmap" /> クラスを指定したサイズ、ピクセル形式、およびピクセル データを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定されたメモリ ブロックを解放したり、呼び出し元が、 `scan0` パラメーター。 ただし、メモリ解放しないで、関連するまで <xref:System.Drawing.Bitmap> を解放します。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Drawing.Bitmap.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Drawing.Imaging.PixelFormat%2CSystem.IntPtr%29> コンス トラクターです。 この例は、Windows フォームで使用するよう設計されていて、必要、 <xref:System.Windows.Forms.PaintEventArgs> パラメーターのパラメーターの <xref:System.Windows.Forms.Control.Paint> イベントです。  
  
 [!code-csharp[System.Drawing.MiscExamples\#Constructor](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#constructor)]
 [!code-vb[System.Drawing.MiscExamples\#Constructor](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#constructor)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">A <see cref="T:System.Drawing.Imaging.PixelFormat" /> 名前の値で始まらない値が指定されて *形式*します。 などを指定する <see cref="F:System.Drawing.Imaging.PixelFormat.Gdi" /> により、 <see cref="T:System.ArgumentException" />, が <see cref="F:System.Drawing.Imaging.PixelFormat.Format48bppRgb" /> されません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling into unmanaged code. Related enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Drawing.Bitmap Clone (System.Drawing.Rectangle rect, System.Drawing.Imaging.PixelFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Bitmap Clone(valuetype System.Drawing.Rectangle rect, valuetype System.Drawing.Imaging.PixelFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Bitmap.Clone(System.Drawing.Rectangle,System.Drawing.Imaging.PixelFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Bitmap</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="format" Type="System.Drawing.Imaging.PixelFormat" />
      </Parameters>
      <Docs>
        <param name="rect">この部分を定義 <see cref="T:System.Drawing.Bitmap" /> をコピーします。 座標はこの <see cref="T:System.Drawing.Bitmap" />します。</param>
        <param name="format">新しいのピクセル形式 <see cref="T:System.Drawing.Bitmap" />します。 これで始まる値を指定する必要があります <c>Format</c>します。</param>
        <summary>このセクションのコピーを作成 <see cref="T:System.Drawing.Bitmap" /> によって定義された <see cref="T:System.Drawing.Rectangle" /> 構造と指定した <see cref="T:System.Drawing.Imaging.PixelFormat" /> 列挙します。</summary>
        <returns>このメソッドが作成する新しい <see cref="T:System.Drawing.Bitmap" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   作成、 <xref:System.Drawing.Bitmap> ファイルからです。  
  
-   一部を複製 <xref:System.Drawing.Bitmap>します。  
  
-   複製された部分を画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicBitmapExamples\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicBitmapExamples/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.ClassicBitmapExamples\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicBitmapExamples/CS/form1.cs#1)]
 [!code-vb[System.Drawing.ClassicBitmapExamples\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicBitmapExamples/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">
          <paramref name="rect" /> ソース ビットマップ境界外です。</exception>
        <exception cref="T:System.ArgumentException">高さまたは幅 <paramref name="rect" /> は 0 です。  
  
 または  
  
 A <see cref="T:System.Drawing.Imaging.PixelFormat" /> 名前の値で始まらない値が指定されて *形式*します。 などを指定する <see cref="F:System.Drawing.Imaging.PixelFormat.Gdi" /> により、 <see cref="T:System.ArgumentException" />, が <see cref="F:System.Drawing.Imaging.PixelFormat.Format48bppRgb" /> されません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Drawing.Bitmap Clone (System.Drawing.RectangleF rect, System.Drawing.Imaging.PixelFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Bitmap Clone(valuetype System.Drawing.RectangleF rect, valuetype System.Drawing.Imaging.PixelFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Bitmap.Clone(System.Drawing.RectangleF,System.Drawing.Imaging.PixelFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Bitmap</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="format" Type="System.Drawing.Imaging.PixelFormat" />
      </Parameters>
      <Docs>
        <param name="rect">この部分を定義 <see cref="T:System.Drawing.Bitmap" /> をコピーします。</param>
        <param name="format">指定、 <see cref="T:System.Drawing.Imaging.PixelFormat" /> 先への列挙体 <see cref="T:System.Drawing.Bitmap" />します。</param>
        <summary>このセクションのコピーを作成する <see cref="T:System.Drawing.Bitmap" /> と指定した定義 <see cref="T:System.Drawing.Imaging.PixelFormat" /> 列挙します。</summary>
        <returns>このメソッドが作成する <see cref="T:System.Drawing.Bitmap" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   作成、 <xref:System.Drawing.Bitmap> ファイルからです。  
  
-   一部を複製 <xref:System.Drawing.Bitmap>します。  
  
-   複製された部分を画面に描画します。  
  
 [!code-cpp[System.Drawing.ClassicBitmapExamples\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicBitmapExamples/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.ClassicBitmapExamples\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicBitmapExamples/CS/form1.cs#2)]
 [!code-vb[System.Drawing.ClassicBitmapExamples\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicBitmapExamples/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">
          <paramref name="rect" /> ソース ビットマップ境界外です。</exception>
        <exception cref="T:System.ArgumentException">高さまたは幅 <paramref name="rect" /> は 0 です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FromHicon">
      <MemberSignature Language="C#" Value="public static System.Drawing.Bitmap FromHicon (IntPtr hicon);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Bitmap FromHicon(native int hicon) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Bitmap.FromHicon(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Bitmap</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hicon" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hicon">アイコンのハンドル。</param>
        <summary>作成、 <see cref="T:System.Drawing.Bitmap" /> アイコンへの Windows ハンドルからです。</summary>
        <returns>このメソッドが作成する <see cref="T:System.Drawing.Bitmap" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   既存のアイコン イメージを識別するハンドルを取得します。  
  
-   作成、 <xref:System.Drawing.Bitmap> ハンドルからです。  
  
-   描画、 <xref:System.Drawing.Bitmap> 画面にします。  
  
 [!code-cpp[System.Drawing.ClassicBitmapExamples\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicBitmapExamples/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.ClassicBitmapExamples\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicBitmapExamples/CS/form1.cs#3)]
 [!code-vb[System.Drawing.ClassicBitmapExamples\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicBitmapExamples/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling into unmanaged code. Related enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="FromResource">
      <MemberSignature Language="C#" Value="public static System.Drawing.Bitmap FromResource (IntPtr hinstance, string bitmapName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Bitmap FromResource(native int hinstance, string bitmapName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Bitmap.FromResource(System.IntPtr,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Bitmap</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hinstance" Type="System.IntPtr" />
        <Parameter Name="bitmapName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hinstance">リソースを含む実行可能ファイルのインスタンスへのハンドル。</param>
        <param name="bitmapName">リソースのビットマップの名前を表す文字列。</param>
        <summary>作成、 <see cref="T:System.Drawing.Bitmap" /> 指定の Windows リソースからです。</summary>
        <returns>このメソッドが作成する <see cref="T:System.Drawing.Bitmap" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Drawing.Bitmap.FromResource%2A> アンマネージ コードを呼び出すためのセキュリティ アクセス許可が必要です。 埋め込みリソースからビットマップを作成するため管理されている代替手段は、次を参照してください。 <xref:System.Drawing.Bitmap.%23ctor%28System.Type%2CSystem.String%29?displayProperty=fullName>します。<xref:System.Drawing.Bitmap.FromResource%2A> DLL 内のリソースの名前はビットマップでのみ動作します。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling into unmanaged code. Related enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetHbitmap">
      <MemberSignature Language="C#" Value="public IntPtr GetHbitmap ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int GetHbitmap() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Bitmap.GetHbitmap" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>作成、 GDI これから bitmap オブジェクト <see cref="T:System.Drawing.Bitmap" />します。</summary>
        <returns>ハンドル、 GDI bitmap オブジェクトをこのメソッドを作成します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ユーザーが通話を担当、 [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] `DeleteObject` で使用されるメモリを解放するメソッド、 [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] bitmap オブジェクトです。  GDI ビットマップの概要の詳細については、次を参照してください。 [Bitmaps](http://go.microsoft.com/fwlink/?LinkId=205685) Windows GDI のドキュメントです。  
  
   
  
## 例  
 次のコード例は、<xref:System.Drawing.Bitmap.GetHbitmap%2A> メソッドの使用方法を示します。  
  
 [!code-cpp[System.Drawing.ClassicBitmapExamples\#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicBitmapExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.ClassicBitmapExamples\#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicBitmapExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.ClassicBitmapExamples\#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicBitmapExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">高さまたはビットマップの幅がより大きい <see cref="F:System.Int16.MaxValue" />します。</exception>
        <exception cref="T:System.Exception">操作に失敗しました。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling into unmanaged code. Related enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetHbitmap">
      <MemberSignature Language="C#" Value="public IntPtr GetHbitmap (System.Drawing.Color background);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int GetHbitmap(valuetype System.Drawing.Color background) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Bitmap.GetHbitmap(System.Drawing.Color)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="background" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="background">A <see cref="T:System.Drawing.Color" /> を背景色を指定します。 このパラメーターには、ビットマップは完全に不透明な場合は無視されます。</param>
        <summary>作成、 GDI これから bitmap オブジェクト <see cref="T:System.Drawing.Bitmap" />します。</summary>
        <returns>ハンドル、 GDI bitmap オブジェクトをこのメソッドを作成します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ユーザーが通話を担当、 [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] `DeleteObject` で使用されるメモリを解放するメソッド、 [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] bitmap オブジェクトです。  GDI ビットマップの概要の詳細については、次を参照してください。 [Bitmaps](http://go.microsoft.com/fwlink/?LinkId=205685) Windows GDI のドキュメントです。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Drawing.Bitmap.GetHbitmap%2A>.method します。  
  
 [!code-cpp[System.Drawing.ClassicBitmapExamples\#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicBitmapExamples/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.ClassicBitmapExamples\#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicBitmapExamples/CS/form1.cs#5)]
 [!code-vb[System.Drawing.ClassicBitmapExamples\#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicBitmapExamples/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">高さまたはビットマップの幅がより大きい <see cref="F:System.Int16.MaxValue" />します。</exception>
        <exception cref="T:System.Exception">操作に失敗しました。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling into unmanaged code. Related enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetHicon">
      <MemberSignature Language="C#" Value="public IntPtr GetHicon ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int GetHicon() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Bitmap.GetHicon" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>アイコンのハンドルを返します。</summary>
        <returns>同じイメージとアイコンの Windows ハンドル、 <see cref="T:System.Drawing.Bitmap" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 最初に、ハンドルから作成されたアイコンは、元のビットマップと同じサイズになります。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   <xref:System.Drawing.Bitmap> を作成します。  
  
-   画面には、そのオブジェクトを描画します。  
  
-   アイコンのハンドルを取得、 <xref:System.Drawing.Bitmap>です。  
  
-   セット、 <xref:System.Windows.Forms.Form.Icon%2A?displayProperty=fullName> ハンドルから作成されたアイコンをフォームの属性です。  
  
 [!code-cpp[System.Drawing.ClassicBitmapExamples\#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicBitmapExamples/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.ClassicBitmapExamples\#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicBitmapExamples/CS/form1.cs#6)]
 [!code-vb[System.Drawing.ClassicBitmapExamples\#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicBitmapExamples/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">操作に失敗しました。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling into unmanaged code. Related enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetPixel">
      <MemberSignature Language="C#" Value="public System.Drawing.Color GetPixel (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Color GetPixel(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Bitmap.GetPixel(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">取得するピクセルの x 座標。</param>
        <param name="y">取得するピクセルの y 座標。</param>
        <summary>これで、指定したピクセルの色を取得 <see cref="T:System.Drawing.Bitmap" />します。</summary>
        <returns>A <see cref="T:System.Drawing.Color" /> を指定したピクセルの色を表す構造です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 このコードは、ビットマップのピクセルの色を取得し、その色で四角形を塗りつぶします。  
  
 [!code-cpp[System.Drawing.ClassicBitmapExamples\#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicBitmapExamples/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.ClassicBitmapExamples\#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicBitmapExamples/CS/form1.cs#7)]
 [!code-vb[System.Drawing.ClassicBitmapExamples\#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicBitmapExamples/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="x" /> 小さい 0 の場合、またはより大きいか等しい <see cref="P:System.Drawing.Image.Width" />します。  
  
 または  
  
 <paramref name="y" /> 小さい 0 の場合、またはより大きいか等しい <see cref="P:System.Drawing.Image.Height" />します。</exception>
        <exception cref="T:System.Exception">操作に失敗しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="LockBits">
      <MemberSignature Language="C#" Value="public System.Drawing.Imaging.BitmapData LockBits (System.Drawing.Rectangle rect, System.Drawing.Imaging.ImageLockMode flags, System.Drawing.Imaging.PixelFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Imaging.BitmapData LockBits(valuetype System.Drawing.Rectangle rect, valuetype System.Drawing.Imaging.ImageLockMode flags, valuetype System.Drawing.Imaging.PixelFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Bitmap.LockBits(System.Drawing.Rectangle,System.Drawing.Imaging.ImageLockMode,System.Drawing.Imaging.PixelFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Imaging.BitmapData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="flags" Type="System.Drawing.Imaging.ImageLockMode" />
        <Parameter Name="format" Type="System.Drawing.Imaging.PixelFormat" />
      </Parameters>
      <Docs>
        <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> の部分を指定する構造体、 <see cref="T:System.Drawing.Bitmap" /> をロックします。</param>
        <param name="flags">
          <see cref="T:System.Drawing.Imaging.ImageLockMode" /> のアクセス レベル \(読み取り\/書き込み\) を指定する列挙体、 <see cref="T:System.Drawing.Bitmap" />です。</param>
        <param name="format">A <see cref="T:System.Drawing.Imaging.PixelFormat" /> このデータ形式を指定する列挙体 <see cref="T:System.Drawing.Bitmap" />します。</param>
        <summary>ロック、 <see cref="T:System.Drawing.Bitmap" /> システム メモリにします。</summary>
        <returns>A <see cref="T:System.Drawing.Imaging.BitmapData" /> このロック操作に関する情報を格納します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Drawing.Bitmap.LockBits%2A> プログラムを使用して変更できるようにすることは、システム メモリ内で既存のビットマップをロックします。 イメージの色を変更する、 <xref:System.Drawing.Bitmap.SetPixel%2A> メソッドが、 <xref:System.Drawing.Bitmap.LockBits%2A> メソッドは、大規模な変更のパフォーマンスが向上します。  
  
 <xref:System.Drawing.Imaging.BitmapData> の属性を指定します、 <xref:System.Drawing.Bitmap>, 、サイズ、ピクセル形式、メモリ内のピクセル データの開始アドレスと各スキャン ライン \(stride\) の長さなどです。  
  
 このメソッドを呼び出すときは、メンバーを使用する必要があります、 <xref:System.Drawing.Imaging.PixelFormat?displayProperty=fullName> 特定ビット\/ピクセル \(BPP\) 値を含む列挙です。 使用して <xref:System.Drawing.Imaging.PixelFormat?displayProperty=fullName> などの値 <xref:System.Drawing.Imaging.PixelFormat.Indexed> と <xref:System.Drawing.Imaging.PixelFormat.Gdi> をスローする <xref:System.ArgumentException?displayProperty=fullName>です。 また、ビットマップのピクセルが正しくない形式を渡すことをスローする <xref:System.ArgumentException?displayProperty=fullName>です。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Drawing.Image.PixelFormat%2A>, 、<xref:System.Drawing.Image.Height%2A>, 、<xref:System.Drawing.Image.Width%2A>, 、および <xref:System.Drawing.Imaging.BitmapData.Scan0%2A> プロパティ;、 <xref:System.Drawing.Bitmap.LockBits%2A> と <xref:System.Drawing.Bitmap.UnlockBits%2A> メソッドおよび <xref:System.Drawing.Imaging.ImageLockMode> 列挙します。 この例は、Windows フォームで使用される設計されています。 この例は設計されており、ピクセル形式がすべて正しく機能するを使用する方法の例を提供する、 <xref:System.Drawing.Bitmap.LockBits%2A> メソッドです。 この例を実行する、フォームに貼り付け、フォームの処理 <xref:System.Windows.Forms.Control.Paint> イベントを呼び出して、 `LockUnlockBitsExample` を渡してメソッドを `e` として <xref:System.Windows.Forms.PaintEventArgs>します。  
  
 [!code-cpp[System.Drawing.BitmapMembers\#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.BitmapMembers/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.BitmapMembers\#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.BitmapMembers/CS/form1.cs#5)]
 [!code-vb[System.Drawing.BitmapMembers\#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.BitmapMembers/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="T:System.Drawing.Imaging.PixelFormat" /> 特定のピクセルごとのビット値ではありません。  
  
 または  
  
 正しくない <see cref="T:System.Drawing.Imaging.PixelFormat" /> はビットマップで渡されます。</exception>
        <exception cref="T:System.Exception">操作に失敗しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="LockBits">
      <MemberSignature Language="C#" Value="public System.Drawing.Imaging.BitmapData LockBits (System.Drawing.Rectangle rect, System.Drawing.Imaging.ImageLockMode flags, System.Drawing.Imaging.PixelFormat format, System.Drawing.Imaging.BitmapData bitmapData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Imaging.BitmapData LockBits(valuetype System.Drawing.Rectangle rect, valuetype System.Drawing.Imaging.ImageLockMode flags, valuetype System.Drawing.Imaging.PixelFormat format, class System.Drawing.Imaging.BitmapData bitmapData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Bitmap.LockBits(System.Drawing.Rectangle,System.Drawing.Imaging.ImageLockMode,System.Drawing.Imaging.PixelFormat,System.Drawing.Imaging.BitmapData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Imaging.BitmapData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="flags" Type="System.Drawing.Imaging.ImageLockMode" />
        <Parameter Name="format" Type="System.Drawing.Imaging.PixelFormat" />
        <Parameter Name="bitmapData" Type="System.Drawing.Imaging.BitmapData" />
      </Parameters>
      <Docs>
        <param name="rect">四角形の構造の部分を指定する、 <see cref="T:System.Drawing.Bitmap" /> をロックします。</param>
        <param name="flags">いずれか、 <see cref="T:System.Drawing.Imaging.ImageLockMode" /> のアクセス レベル \(読み取り\/書き込み\) を指定する値、 <see cref="T:System.Drawing.Bitmap" />です。</param>
        <param name="format">いずれか、 <see cref="T:System.Drawing.Imaging.PixelFormat" /> のデータ形式を指定する値、 <see cref="T:System.Drawing.Bitmap" />です。</param>
        <param name="bitmapData">A <see cref="T:System.Drawing.Imaging.BitmapData" /> ロック操作に関する情報を格納します。</param>
        <summary>ロック、 <see cref="T:System.Drawing.Bitmap" /> システム メモリに</summary>
        <returns>A <see cref="T:System.Drawing.Imaging.BitmapData" /> ロック操作に関する情報を格納します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Drawing.Bitmap.LockBits%2A> プログラムを使用して変更できるようにすることは、システム メモリ内で既存のビットマップをロックします。 イメージの色を変更する、 <xref:System.Drawing.Bitmap.SetPixel%2A> メソッドが、 <xref:System.Drawing.Bitmap.LockBits%2A> メソッドは、大規模な変更のパフォーマンスが向上します。  
  
 このメソッドを呼び出すときは、メンバーを使用する必要があります、 <xref:System.Drawing.Imaging.PixelFormat?displayProperty=fullName> 特定ビット\/ピクセル \(BPP\) 値を含む列挙です。 使用して <xref:System.Drawing.Imaging.PixelFormat?displayProperty=fullName> などの値 <xref:System.Drawing.Imaging.PixelFormat.Indexed> と <xref:System.Drawing.Imaging.PixelFormat.Gdi>, をスロー、 <xref:System.ArgumentException?displayProperty=fullName>です。 また、ビットマップのピクセルが正しくない形式を渡すことをスローする <xref:System.ArgumentException?displayProperty=fullName>です。  
  
 このバージョンの <xref:System.Drawing.Bitmap.LockBits%2A> メソッドで使用するものでは、 `flags` の値 <xref:System.Drawing.Imaging.ImageLockMode.UserInputBuffer?displayProperty=fullName>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="T:System.Drawing.Imaging.PixelFormat" /> 値は、特定のピクセルごとのビット値ではありません。  
  
 または  
  
 正しくない <see cref="T:System.Drawing.Imaging.PixelFormat" /> はビットマップで渡されます。</exception>
        <exception cref="T:System.Exception">操作に失敗しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="MakeTransparent">
      <MemberSignature Language="C#" Value="public void MakeTransparent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MakeTransparent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Bitmap.MakeTransparent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>既定の透明色をこの <see cref="T:System.Drawing.Bitmap" /> で透明します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The system palette defines one color as the default transparent, or alpha, color. This method makes the default transparent color transparent for this <xref:System.Drawing.Bitmap>. If no transparent color is specified by the system, <xref:System.Drawing.Color.LightGray%2A> is the transparent color.  
  
 When you call <xref:System.Drawing.Bitmap.MakeTransparent%2A>, the bitmap will be converted to the <xref:System.Drawing.Imaging.PixelFormat.Format32bppArgb> format, as this format supports an alpha channel.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code makes the system default transparent color transparent for **parameterReference tag is not supported!!!!**  
, and then draws the <xref:System.Drawing.Bitmap> to the screen.  
  
 [!code-cpp[System.Drawing.ClassicBitmapExamples\#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicBitmapExamples/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.ClassicBitmapExamples\#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicBitmapExamples/CS/form1.cs#8)]
 [!code-vb[System.Drawing.ClassicBitmapExamples\#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicBitmapExamples/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Drawing.Bitmap" /> のイメージ形式はアイコン形式です。</exception>
        <exception cref="T:System.Exception">操作に失敗しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="MakeTransparent">
      <MemberSignature Language="C#" Value="public void MakeTransparent (System.Drawing.Color transparentColor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MakeTransparent(valuetype System.Drawing.Color transparentColor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Bitmap.MakeTransparent(System.Drawing.Color)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transparentColor" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="transparentColor">
          <see cref="T:System.Drawing.Color" /> 構造体を表す色を透明にします。</param>
        <summary>指定した色の透明なこの <see cref="T:System.Drawing.Bitmap" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと <xref:System.Drawing.Bitmap.MakeTransparent%2A>, 、ビットマップに変換されます、 <xref:System.Drawing.Imaging.PixelFormat.Format32bppArgb> に応じて書式を設定、この形式は、アルファ チャネルをサポートしています。  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   内のピクセルの色を取得、 <xref:System.Drawing.Bitmap>です。  
  
-   その色は、ビットマップの透明です。  
  
-   描画、 <xref:System.Drawing.Bitmap> 画面にします。  
  
 [!code-cpp[System.Drawing.ClassicBitmapExamples\#9](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicBitmapExamples/CPP/form1.cpp#9)]
 [!code-csharp[System.Drawing.ClassicBitmapExamples\#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicBitmapExamples/CS/form1.cs#9)]
 [!code-vb[System.Drawing.ClassicBitmapExamples\#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicBitmapExamples/VB/form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">イメージ形式、 <see cref="T:System.Drawing.Bitmap" /> アイコン形式です。</exception>
        <exception cref="T:System.Exception">操作に失敗しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetPixel">
      <MemberSignature Language="C#" Value="public void SetPixel (int x, int y, System.Drawing.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPixel(int32 x, int32 y, valuetype System.Drawing.Color color) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Bitmap.SetPixel(System.Int32,System.Int32,System.Drawing.Color)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="color" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="x">設定するピクセルの x 座標。</param>
        <param name="y">設定するピクセルの y 座標。</param>
        <param name="color">指定のピクセルに割り当てる色を表す <see cref="T:System.Drawing.Color" /> 構造体。</param>
        <summary>指定したピクセルの色を <see cref="T:System.Drawing.Bitmap" /> で指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Use <xref:System.Drawing.Bitmap.SetPixel%2A> method to set the color of an individual pixel in an image programmatically. You can also change an image programmatically by using the <xref:System.Drawing.Bitmap.LockBits%2A> method. Typically for large\-scale changes, the <xref:System.Drawing.Bitmap.LockBits%2A> method offers better performance.  
  
   
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  
  
-   Creates a <xref:System.Drawing.Bitmap>.  
  
-   Sets the color of each pixel in the bitmap to black.  
  
-   Draws the bitmap.  
  
 [!code-cpp[System.Drawing.ClassicBitmapExamples\#10](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicBitmapExamples/CPP/form1.cpp#10)]
 [!code-csharp[System.Drawing.ClassicBitmapExamples\#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicBitmapExamples/CS/form1.cs#10)]
 [!code-vb[System.Drawing.ClassicBitmapExamples\#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicBitmapExamples/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">操作に失敗しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetResolution">
      <MemberSignature Language="C#" Value="public void SetResolution (float xDpi, float yDpi);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetResolution(float32 xDpi, float32 yDpi) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Bitmap.SetResolution(System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xDpi" Type="System.Single" />
        <Parameter Name="yDpi" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="xDpi">水平方向の解像度、インチあたりのドットの <see cref="T:System.Drawing.Bitmap" />です。</param>
        <param name="yDpi">垂直方向の解像度、インチあたりのドットの <see cref="T:System.Drawing.Bitmap" />です。</param>
        <summary>この解像度を設定 <see cref="T:System.Drawing.Bitmap" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用すると、新しく作成されたビットマップに目的の解像度を設定できます。 画像の解像度を変更しても、物理サイズは変わりません。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Drawing.Bitmap.SetResolution%2A> メソッドです。  
  
 [!code-csharp[System.Drawing.Misc3\#SetResolution](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Misc3/CS/Form1.cs#setresolution)]
 [!code-vb[System.Drawing.Misc3\#SetResolution](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Misc3/VB/Form1.vb#setresolution)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">操作に失敗しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="UnlockBits">
      <MemberSignature Language="C#" Value="public void UnlockBits (System.Drawing.Imaging.BitmapData bitmapdata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnlockBits(class System.Drawing.Imaging.BitmapData bitmapdata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Bitmap.UnlockBits(System.Drawing.Imaging.BitmapData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitmapdata" Type="System.Drawing.Imaging.BitmapData" />
      </Parameters>
      <Docs>
        <param name="bitmapdata">A <see cref="T:System.Drawing.Imaging.BitmapData" /> ロック操作に関する情報を指定します。</param>
        <summary>このロックを解除 <see cref="T:System.Drawing.Bitmap" /> システム メモリです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Drawing.Imaging.BitmapData> の属性を指定します、 <xref:System.Drawing.Bitmap>, 、サイズ、ピクセル形式、メモリ内のピクセル データの開始アドレスと各スキャン ライン \(stride\) の長さなどです。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Drawing.Image.PixelFormat%2A>, 、<xref:System.Drawing.Image.Height%2A>, 、<xref:System.Drawing.Image.Width%2A>, 、および <xref:System.Drawing.Imaging.BitmapData.Scan0%2A> プロパティ;、 <xref:System.Drawing.Bitmap.LockBits%2A> と <xref:System.Drawing.Bitmap.UnlockBits%2A> メソッドおよび <xref:System.Drawing.Imaging.ImageLockMode> 列挙します。 この例は設計されており、ピクセル形式がすべて正しく機能するを使用する方法の例を提供する、 <xref:System.Drawing.Bitmap.LockBits%2A> メソッドです。 この例は、Windows フォームで使用される設計されています。 この例を実行する、フォームに貼り付け、フォームの処理 <xref:System.Windows.Forms.Control.Paint> イベントを呼び出して、 `LockUnlockBitsExample` を渡してメソッドを `e` として <xref:System.Windows.Forms.PaintEventArgs>します。  
  
 [!code-cpp[System.Drawing.BitmapMembers\#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.BitmapMembers/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.BitmapMembers\#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.BitmapMembers/CS/form1.cs#5)]
 [!code-vb[System.Drawing.BitmapMembers\#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.BitmapMembers/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">操作に失敗しました。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetHbitmap">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>作成、 GDI からビットマップ オブジェクト、 GDI+ <see cref="T:System.Drawing.Bitmap" />します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="LockBits">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ロック、 <see cref="T:System.Drawing.Bitmap" /> システム メモリにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Clone">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このセクションのコピーを作成する <see cref="T:System.Drawing.Bitmap" /> と指定した定義 <see cref="T:System.Drawing.Imaging.PixelFormat" />します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="MakeTransparent">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このため、既定の透明色を透明 <see cref="T:System.Drawing.Bitmap" />します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Drawing.Bitmap" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>