<Type Name="BufferedGraphics" FullName="System.Drawing.BufferedGraphics">
  <TypeSignature Language="C#" Value="public sealed class BufferedGraphics : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BufferedGraphics extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.BufferedGraphics" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>ダブル バッファリングのためのグラフィックス バッファーを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Drawing.BufferedGraphics> クラスでは、グラフィックスのカスタムのダブル バッファリングを実装することができます。 グラフィックス バッファーにバッファーを作成し、出力デバイスにコンテンツのレンダリングに使用できるメソッドとラッパーを提供します。  
  
 ダブル バッファリングを使用するグラフィックスを削減したり、ちらつきディスプレイ表面を再描画が原因で発生することができます。 ダブル バッファリングを使用して、メモリ内バッファーへの更新されたグラフィックスの描画最初にこのバッファーの内容はすぐに表示される画面の一部またはすべてに書き込まれます。 表示するグラフィックスのこの比較的簡単な上書きを低減またはグラフィックスが更新されたときに発生しやすいちらつきがなくなります。  
  
> [!NOTE]
>  ダブル バッファリングを使用する最も簡単な方法を設定するのには、 <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> 制御を使用してコントロールのスタイルのフラグ、 <xref:System.Windows.Forms.Control.SetStyle%2A> メソッドです。 設定、 <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> コントロール追加コードを必要とせず、既定のグラフィックス バッファーを使用してコントロールのすべての描画をリダイレクトするためのフラグを設定します。 このフラグに設定されている `true` 既定です。  
  
 <xref:System.Drawing.BufferedGraphics> クラスのパブリック コンス トラクターを持たないし、作成する必要があります、 <xref:System.Drawing.BufferedGraphicsContext> を使用するアプリケーション ドメインの <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> メソッドです。 取得することができます、 <xref:System.Drawing.BufferedGraphicsContext> 静的から現在のアプリケーション ドメインに対する <xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=fullName> プロパティです。  
  
 <xref:System.Drawing.BufferedGraphics.Graphics%2A> プロパティは、グラフィックス バッファーへの描画に使用できます。 このプロパティへのアクセスを提供する、 <xref:System.Drawing.Graphics> これに割り当てられたグラフィックス バッファーに描画オブジェクト <xref:System.Drawing.BufferedGraphics> オブジェクトです。  
  
 <xref:System.Drawing.BufferedGraphics.Render%2A> を画面に、グラフィックスの内容をバッファーなし引数描画とメソッドは、バッファーの割り当てを指定します。 他のオーバー ロード、 <xref:System.Drawing.BufferedGraphics.Render%2A> メソッドでは、指定できる、 <xref:System.Drawing.Graphics> オブジェクトまたは <xref:System.IntPtr> グラフィックス バッファーの内容を描画するためにデバイス コンテキストを示すオブジェクト。  
  
 ダブル バッファリングされたグラフィックスを描画の詳細については、次を参照してください。 [Double Buffered Graphics](http://msdn.microsoft.com/ja-jp/4f6fef99-0972-436e-9d73-0167e4033f71)します。  
  
   
  
## 例  
 次のコード例では、使用方法を示します、 <xref:System.Drawing.BufferedGraphics> いくつかの実装をバッファー処理の種類を使用してグラフィックスを描画するオブジェクト。 フォームをクリックしてまたは開始し、原因が、更新プログラムを描画するタイマーを停止します。 描画の更新を使用すると、ダブル バッファリングの効果を確認できます。 フォームの次の描画モード循環を右クリックします。  
  
-   直接の描画、 <xref:System.Windows.Forms.Control.Handle%2A> の <xref:System.Windows.Forms.Form>です。  
  
-   オーバーライドすることで描画、 <xref:System.Windows.Forms.Form.OnPaint%2A> メソッドを使用して、 <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> スタイルを制御します。  
  
-   オーバーライドすることで描画、 <xref:System.Windows.Forms.Form.OnPaint%2A> のフォーム メソッドを使用せずにメソッド、 <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> スタイルを制御します。  
  
 各モードでは、現在のモードを識別して、各マウス ボタンが押されたときに発生する動作について説明するテキストを描画します。  
  
 [!code-cpp[BufferedGraphicsExample\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferedGraphicsExample/CPP/bufferingtest.cpp#1)]
 [!code-csharp[BufferedGraphicsExample\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferedGraphicsExample/CS/bufferingtest.cs#1)]
 [!code-vb[BufferedGraphicsExample\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferedGraphicsExample/VB/bufferingtest.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <see cref="T:System.Drawing.BufferedGraphics" /> クラスはスレッド セーフではありません。 グラフィックス バッファー個別のスレッドからにアクセスするときは、スレッド アクセス コントロール機構を使用して競合を防ぐ必要があります。</threadsafe>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Drawing.BufferedGraphics" /> オブジェクトによって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Call <xref:System.Drawing.BufferedGraphics.Dispose%2A> when you are finished using the <xref:System.Drawing.BufferedGraphics> object. The <xref:System.Drawing.BufferedGraphics.Dispose%2A> method leaves the <xref:System.Drawing.BufferedGraphics> object in an unusable state. After calling <xref:System.Drawing.BufferedGraphics.Dispose%2A>, you must release all references to the <xref:System.Drawing.BufferedGraphics> object so the garbage collector can reclaim the memory that the <xref:System.Drawing.BufferedGraphics> object was occupying. For more information, see [Cleaning Up Unmanaged Resources](http://msdn.microsoft.com/ja-jp/a17b0066-71c2-4ba4-9822-8e19332fc213) and [Implementing a Dispose Method](http://msdn.microsoft.com/ja-jp/eb4e1af0-3b48-4fbc-ad4e-fc2f64138bf9).  
  
> [!NOTE]
>  Always call <xref:System.Drawing.BufferedGraphics.Dispose%2A> before you release your last reference to the <xref:System.Drawing.BufferedGraphics> object. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Drawing.BufferedGraphics> object's **languageKeyword tag is not supported!!!!**  
>  method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~BufferedGraphics ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Finalize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>オブジェクトが、ガベージ コレクションによって収集される前に、リソースの解放とその他のクリーンアップ操作の実行を試みることができるようにします。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="Graphics">
      <MemberSignature Language="C#" Value="public System.Drawing.Graphics Graphics { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Graphics Graphics" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.BufferedGraphics.Graphics" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>グラフィックス バッファーに出力する <see cref="T:System.Drawing.Graphics" /> オブジェクトを取得します。</summary>
        <value>グラフィックス バッファーに出力する <see cref="T:System.Drawing.Graphics" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティでは、 <xref:System.Drawing.Graphics> これに割り当てられたグラフィックス バッファーに描画オブジェクト <xref:System.Drawing.BufferedGraphics> オブジェクトです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Graphics" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public void Render ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Render() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Render" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>グラフィックス バッファーの内容を既定のデバイスに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドでは、グラフィックス バッファーの内容を呼び出すことによって指定されたデバイスに書き込みます、 <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> のメソッド、 <xref:System.Drawing.BufferedGraphicsContext> これを作成するために使用 <xref:System.Drawing.BufferedGraphics> オブジェクトです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public void Render (System.Drawing.Graphics target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Render(class System.Drawing.Graphics target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Render(System.Drawing.Graphics)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="target">グラフィックス バッファーの内容を書き込む <see cref="T:System.Drawing.Graphics" /> オブジェクト。</param>
        <summary>グラフィックス バッファーの内容を指定された <see cref="T:System.Drawing.Graphics" /> オブジェクトに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、指定したグラフィックス バッファーの内容を書き込みます <xref:System.Drawing.Graphics> オブジェクトです。  
  
   
  
## 例  
 次のコード例では、指定したグラフィックス バッファーの内容の表示を示しています <xref:System.Drawing.Graphics> オブジェクトです。 このコードは示されている例の一部、 <xref:System.Drawing.BufferedGraphics> クラスです。  
  
 [!code-cpp[BufferingExamples\#5](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#5)]
 [!code-csharp[BufferingExamples\#5](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#5)]
 [!code-vb[BufferingExamples\#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Graphics" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public void Render (IntPtr targetDC);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Render(native int targetDC) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Render(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDC" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="targetDC">グラフィックス バッファーの内容の書き込み先のデバイス コンテキストを指す <see cref="T:System.IntPtr" />。</param>
        <summary>グラフィックス バッファーの内容を、指定した <see cref="T:System.IntPtr" /> ハンドルに関連付けられているデバイス コンテキストに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、グラフィックス バッファーの内容を指定した関連付けられているデバイス コンテキストに書き込みます <xref:System.IntPtr> を処理します。  
  
   
  
## 例  
 次のコード例では、グラフィックス バッファーの内容を表示 `grafx` 指定したデバイス コンテキストにします。 このコードは示されている例の一部、 <xref:System.Drawing.BufferedGraphics> クラスです。  
  
 [!code-cpp[BufferingExamples\#6](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#6)]
 [!code-csharp[BufferingExamples\#6](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#6)]
 [!code-vb[BufferingExamples\#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#6)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for access to unmanaged code. Related enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
        <altmember cref="T:System.IntPtr" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Render">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>グラフィックス バッファーの内容を書き込みます。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>