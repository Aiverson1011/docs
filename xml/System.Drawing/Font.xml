<Type Name="Font" FullName="System.Drawing.Font">
  <TypeSignature Language="C#" Value="public sealed class Font : MarshalByRefObject, ICloneable, IDisposable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit Font extends System.MarshalByRefObject implements class System.ICloneable, class System.IDisposable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Font" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Editor("System.Drawing.Design.FontEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.FontConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>フォント フェイス、サイズ、スタイルの各属性など、テキストの特定の書式を定義します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 フォントを作成する方法の詳細については、次を参照してください。 [How To: Construct Font Families and Fonts](http://msdn.microsoft.com/ja-jp/d3a4a223-9492-4b54-9afd-db1c31c3cefd)します。 Windows フォーム アプリケーションでは、TrueType フォントをサポートし、OpenType フォントのサポートが制限します。 サポートされていないフォントを使用しようとする、またはフォントが、アプリケーションを実行しているコンピューターにインストールされていない、Microsoft Sans Serif フォントは置き換えられます。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Drawing.Font.%23ctor%2A> コンス トラクターと <xref:System.Drawing.Font.Size%2A>, 、<xref:System.Drawing.Font.SizeInPoints%2A>, 、および <xref:System.Drawing.Font.Unit%2A> プロパティです。 含む Windows フォームで使用するこの例の目的は、 <xref:System.Windows.Forms.ComboBox> という名前 `ComboBox1` するには、文字列「大規模」、「小さい」と <xref:System.Windows.Forms.Label> という名前 `Label1`します。 次のコードをフォームに貼り付け、 `ComboBox1_SelectedIndexChanged` メソッドを <xref:System.Windows.Forms.ComboBox.SelectedIndexChanged> のイベント、 <xref:System.Windows.Forms.ComboBox> コントロールです。  
  
 [!code-cpp[System.Drawing.FontsExample\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.FontsExample/cpp/form1.cpp#1)]
 [!code-csharp[System.Drawing.FontsExample\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.FontsExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.FontsExample\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.FontsExample/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (System.Drawing.Font prototype, System.Drawing.FontStyle newStyle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Font prototype, valuetype System.Drawing.FontStyle newStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.Drawing.Font,System.Drawing.FontStyle)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="prototype" Type="System.Drawing.Font" />
        <Parameter Name="newStyle" Type="System.Drawing.FontStyle" />
      </Parameters>
      <Docs>
        <param name="prototype">新しい <see cref="T:System.Drawing.Font" /> の作成元となる既存の <see cref="T:System.Drawing.Font" />。</param>
        <param name="newStyle">新しい <see cref="T:System.Drawing.Font" /> に適用する <see cref="T:System.Drawing.FontStyle" />。<see cref="T:System.Drawing.FontStyle" /> 列挙体の複数の値を <see langword="OR" /> 演算子と組み合わせることができます。</param>
        <summary>指定した既存の <see cref="T:System.Drawing.Font" /> と <see cref="T:System.Drawing.FontStyle" /> 列挙体を使用する、新しい <see cref="T:System.Drawing.Font" /> を初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ローカライズされたアプリケーションに基づく、 [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] およびそれ以前のリリースでのフォントを指定する `prototype` Microsoft Sans Serif フォントの代わりに使用すると、アプリケーションをビルドするために使用するコンピューターにそのフォントがないインストールされた日時。 この動作に依存するアプリケーションと .NET Framework 3.0 のアプリケーションを再コンパイルする必要がありますの Microsoft Sans Serif フォントを指定する必要があります `prototype`します。  
  
   
  
## 例  
 次のコード例を示しています、 <xref:System.Drawing.Color.op_Inequality%2A> 演算子、 <xref:System.Drawing.Font.%23ctor%2A> コンス トラクター、および <xref:System.Drawing.Font.Bold%2A> プロパティです。 この例のという名前のボタンを含む Windows フォームで使用する目的は `Button2`です。 次のコードをフォームに貼り付け、 `Button2_Click` メソッドをボタンの <xref:System.Windows.Forms.Control.Click> イベントです。  
  
 [!code-cpp[System.Drawing.CharacterRangeExample\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.CharacterRangeExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.CharacterRangeExample\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.CharacterRangeExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.CharacterRangeExample\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.CharacterRangeExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (System.Drawing.FontFamily family, float emSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.FontFamily family, float32 emSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.Drawing.FontFamily,System.Single)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Drawing.FontFamily" />
        <Parameter Name="emSize" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="family">新しい <see cref="T:System.Drawing.Font" /> の <see cref="T:System.Drawing.FontFamily" />。</param>
        <param name="emSize">新しいフォントの em サイズ \(単位はポイント\)。</param>
        <summary>指定したサイズを使用して、新しい <see cref="T:System.Drawing.Font" /> を初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 結果として得られるフォントにその <xref:System.Drawing.Font.Style%2A> プロパティに設定 <xref:System.Drawing.FontStyle.Regular> とその <xref:System.Drawing.Font.Unit%2A> プロパティに設定 <xref:System.Drawing.GraphicsUnit.Point>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> 0 で、以下、無限大と評価されるか、有効な数値ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (string familyName, float emSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string familyName, float32 emSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.String,System.Single)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="familyName" Type="System.String" />
        <Parameter Name="emSize" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="familyName">新しい <see cref="T:System.Drawing.Font" /> に対する <see cref="T:System.Drawing.FontFamily" /> の文字列形式。</param>
        <param name="emSize">新しいフォントの em サイズ \(単位はポイント\)。</param>
        <summary>指定したサイズを使用して、新しい <see cref="T:System.Drawing.Font" /> を初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 結果として得られるフォントにその <xref:System.Drawing.Font.Style%2A> プロパティに設定 <xref:System.Drawing.FontStyle.Regular?displayProperty=fullName> とその <xref:System.Drawing.Font.Unit%2A> プロパティに設定 <xref:System.Drawing.GraphicsUnit.Point?displayProperty=fullName>します。 Windows フォーム アプリケーションでは、TrueType フォントをサポートし、OpenType フォントのサポートが制限します。 場合、 `familyName` パラメーターは、置き換えられるアプリケーションを実行しているコンピューターにインストールされていないか、サポートされていない、フォント、Microsoft Sans Serif を指定します。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Drawing.Font.%23ctor%2A> コンス トラクターです。 この例は、Windows フォームで使用するよう設計されていて、必要とする <xref:System.Windows.Forms.PaintEventArgs>`e`, のパラメーターは、 <xref:System.Windows.Forms.Control.Paint> イベントです。  
  
 [!code-csharp[System.Drawing.Misc3\#ConstructFontWithString](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Misc3/CS/Form1.cs#constructfontwithstring)]
 [!code-vb[System.Drawing.Misc3\#ConstructFontWithString](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Misc3/VB/Form1.vb#constructfontwithstring)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> 0 以下無限大と評価されるか、有効な数値ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (System.Drawing.FontFamily family, float emSize, System.Drawing.FontStyle style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.FontFamily family, float32 emSize, valuetype System.Drawing.FontStyle style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.Drawing.FontFamily,System.Single,System.Drawing.FontStyle)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Drawing.FontFamily" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
      </Parameters>
      <Docs>
        <param name="family">新しい <see cref="T:System.Drawing.Font" /> の <see cref="T:System.Drawing.FontFamily" />。</param>
        <param name="emSize">新しいフォントの em サイズ \(単位はポイント\)。</param>
        <param name="style">新しいフォントの <see cref="T:System.Drawing.FontStyle" />。</param>
        <summary>指定したサイズとスタイルを使用して、新しい <see cref="T:System.Drawing.Font" /> を初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 結果として得られるフォントにその <xref:System.Drawing.Font.Unit%2A> プロパティに設定 <xref:System.Drawing.GraphicsUnit.Point>します。  
  
   
  
## 例  
 次のコード例では、設定、 <xref:System.Drawing.Font> 、新規の太字のスタイルをボタンのプロパティ <xref:System.Drawing.Font>します。 この例のという名前のボタンを含む Windows フォームで使用する目的は `Button1`です。 次のコードをフォームに貼り付け、 `Button1_Click` メソッドをボタンの <xref:System.Windows.Forms.Control.Click> イベントです。  
  
 [!code-cpp[System.Drawing.MiscExamples\#11](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#11)]
 [!code-csharp[System.Drawing.MiscExamples\#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#11)]
 [!code-vb[System.Drawing.MiscExamples\#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> 0 で、以下、無限大と評価されるか、有効な数値ではありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="family" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (System.Drawing.FontFamily family, float emSize, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.FontFamily family, float32 emSize, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.Drawing.FontFamily,System.Single,System.Drawing.GraphicsUnit)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Drawing.FontFamily" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="family">新しい <see cref="T:System.Drawing.Font" /> の <see cref="T:System.Drawing.FontFamily" />。</param>
        <param name="emSize">新しいフォントの em サイズ \(単位は <c>unit</c> パラメーターで指定した値\)。</param>
        <param name="unit">新しいフォントの <see cref="T:System.Drawing.GraphicsUnit" />。</param>
        <summary>指定したサイズと単位を使用して、新しい <see cref="T:System.Drawing.Font" /> を初期化します。 スタイルを <see cref="F:System.Drawing.FontStyle.Regular" /> に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 結果として得られるフォントにその <xref:System.Drawing.Font.Style%2A> プロパティに設定 <xref:System.Drawing.FontStyle.Regular?displayProperty=fullName>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="family" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> 0 で、以下、無限大と評価されるか、有効な数値ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (string familyName, float emSize, System.Drawing.FontStyle style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string familyName, float32 emSize, valuetype System.Drawing.FontStyle style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.String,System.Single,System.Drawing.FontStyle)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="familyName" Type="System.String" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
      </Parameters>
      <Docs>
        <param name="familyName">新しい <see cref="T:System.Drawing.Font" /> に対する <see cref="T:System.Drawing.FontFamily" /> の文字列形式。</param>
        <param name="emSize">新しいフォントの em サイズ \(単位はポイント\)。</param>
        <param name="style">新しいフォントの <see cref="T:System.Drawing.FontStyle" />。</param>
        <summary>指定したサイズとスタイルを使用して、新しい <see cref="T:System.Drawing.Font" /> を初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 結果として得られるフォントにその <xref:System.Drawing.Font.Unit%2A> プロパティに設定 <xref:System.Drawing.GraphicsUnit.Point>します。 Windows フォーム アプリケーションでは、TrueType フォントをサポートし、OpenType フォントのサポートが制限します。 場合、 `familyName` パラメーターは、置き換えられるアプリケーションを実行しているコンピューターにインストールされていないか、サポートされていない、フォント、Microsoft Sans Serif を指定します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> 0 で、以下、無限大と評価されるか、有効な数値ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (string familyName, float emSize, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string familyName, float32 emSize, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.String,System.Single,System.Drawing.GraphicsUnit)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="familyName" Type="System.String" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="familyName">新しい <see cref="T:System.Drawing.Font" /> に対する <see cref="T:System.Drawing.FontFamily" /> の文字列形式。</param>
        <param name="emSize">新しいフォントの em サイズ \(単位は <c>unit</c> パラメーターで指定した値\)。</param>
        <param name="unit">新しいフォントの <see cref="T:System.Drawing.GraphicsUnit" />。</param>
        <summary>指定したサイズと単位を使用して、新しい <see cref="T:System.Drawing.Font" /> を初期化します。 スタイルは <see cref="F:System.Drawing.FontStyle.Regular" /> に設定されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 結果として得られるフォントにその <xref:System.Drawing.Font.Style%2A> プロパティに設定 <xref:System.Drawing.FontStyle.Regular?displayProperty=fullName>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> 0 で、以下、無限大と評価されるか、有効な数値ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (System.Drawing.FontFamily family, float emSize, System.Drawing.FontStyle style, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.FontFamily family, float32 emSize, valuetype System.Drawing.FontStyle style, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.Drawing.FontFamily,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Drawing.FontFamily" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="family">新しい <see cref="T:System.Drawing.Font" /> の <see cref="T:System.Drawing.FontFamily" />。</param>
        <param name="emSize">新しいフォントの em サイズ \(単位は <c>unit</c> パラメーターで指定した値\)。</param>
        <param name="style">新しいフォントの <see cref="T:System.Drawing.FontStyle" />。</param>
        <param name="unit">新しいフォントの <see cref="T:System.Drawing.GraphicsUnit" />。</param>
        <summary>指定したサイズ、スタイル、および単位を使用して、新しい <see cref="T:System.Drawing.Font" /> を初期化します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> 0 で、以下、無限大と評価されるか、有効な数値ではありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="family" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (string familyName, float emSize, System.Drawing.FontStyle style, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string familyName, float32 emSize, valuetype System.Drawing.FontStyle style, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.String,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="familyName" Type="System.String" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="familyName">新しい <see cref="T:System.Drawing.Font" /> に対する <see cref="T:System.Drawing.FontFamily" /> の文字列形式。</param>
        <param name="emSize">新しいフォントの em サイズ \(単位は <c>unit</c> パラメーターで指定した値\)。</param>
        <param name="style">新しいフォントの <see cref="T:System.Drawing.FontStyle" />。</param>
        <param name="unit">新しいフォントの <see cref="T:System.Drawing.GraphicsUnit" />。</param>
        <summary>指定したサイズ、スタイル、および単位を使用して、新しい <see cref="T:System.Drawing.Font" /> を初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Windows フォーム アプリケーションでは、TrueType フォントをサポートし、OpenType フォントのサポートが制限します。 場合、 `familyName` パラメーターは、置き換えられるアプリケーションを実行しているコンピューターにインストールされていないか、サポートされていない、フォント、Microsoft Sans Serif を指定します。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Drawing.Font.%23ctor%2A> コンス トラクターです。 この例は、Windows フォームで使用される設計されています。 この例を実行するには、という名前のボタンを含むフォームにこのコードを貼り付けます `Button2`, を関連付けると、 `Button2_Click` メソッドを <xref:System.Windows.Forms.Control.Click> ボタンのイベントです。  
  
 [!code-cpp[System.Drawing.FontsExample\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.FontsExample/cpp/form1.cpp#3)]
 [!code-csharp[System.Drawing.FontsExample\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.FontsExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.FontsExample\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.FontsExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> 0 以下無限大と評価されるか、有効な数値ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (System.Drawing.FontFamily family, float emSize, System.Drawing.FontStyle style, System.Drawing.GraphicsUnit unit, byte gdiCharSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.FontFamily family, float32 emSize, valuetype System.Drawing.FontStyle style, valuetype System.Drawing.GraphicsUnit unit, unsigned int8 gdiCharSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.Drawing.FontFamily,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit,System.Byte)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Drawing.FontFamily" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="gdiCharSet" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="family">新しい <see cref="T:System.Drawing.Font" /> の <see cref="T:System.Drawing.FontFamily" />。</param>
        <param name="emSize">新しいフォントの em サイズ \(単位は <c>unit</c> パラメーターで指定した値\)。</param>
        <param name="style">新しいフォントの <see cref="T:System.Drawing.FontStyle" />。</param>
        <param name="unit">新しいフォントの <see cref="T:System.Drawing.GraphicsUnit" />。</param>
        <param name="gdiCharSet">次を指定する <see cref="T:System.Byte" />。  
  
 新しいフォントに使用する GDI 文字セット。</param>
        <summary>指定したサイズ、スタイル、単位、および文字セットを使用して、新しい <see cref="T:System.Drawing.Font" /> を初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `gdiCharSet` パラメーターは、Windows SDK ヘッダー ファイル WinGDI.h で定義されている一覧から値を受け取ります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> 0 で、以下、無限大と評価されるか、有効な数値ではありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="family" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (string familyName, float emSize, System.Drawing.FontStyle style, System.Drawing.GraphicsUnit unit, byte gdiCharSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string familyName, float32 emSize, valuetype System.Drawing.FontStyle style, valuetype System.Drawing.GraphicsUnit unit, unsigned int8 gdiCharSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.String,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit,System.Byte)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="familyName" Type="System.String" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="gdiCharSet" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="familyName">新しい <see cref="T:System.Drawing.Font" /> に対する <see cref="T:System.Drawing.FontFamily" /> の文字列形式。</param>
        <param name="emSize">新しいフォントの em サイズ \(単位は <c>unit</c> パラメーターで指定した値\)。</param>
        <param name="style">新しいフォントの <see cref="T:System.Drawing.FontStyle" />。</param>
        <param name="unit">新しいフォントの <see cref="T:System.Drawing.GraphicsUnit" />。</param>
        <param name="gdiCharSet">このフォントに使用する GDI 文字セットを指定する <see cref="T:System.Byte" />。</param>
        <summary>指定したサイズ、スタイル、単位、および文字セットを使用して、新しい <see cref="T:System.Drawing.Font" /> を初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `gdiCharSet` パラメーターは、Windows SDK ヘッダー ファイル WinGDI.h で定義されている一覧から値を受け取ります。 Windows フォーム アプリケーションでは、TrueType フォントをサポートし、OpenType フォントのサポートが制限します。 場合、 `familyName` パラメーターは、置き換えられるアプリケーションを実行しているコンピューターにインストールされていないか、サポートされていない、フォント、Microsoft Sans Serif を指定します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> 0 で、以下、無限大と評価されるか、有効な数値ではありません。</exception>
        <altmember cref="P:System.Drawing.Font.GdiCharSet" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (System.Drawing.FontFamily family, float emSize, System.Drawing.FontStyle style, System.Drawing.GraphicsUnit unit, byte gdiCharSet, bool gdiVerticalFont);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.FontFamily family, float32 emSize, valuetype System.Drawing.FontStyle style, valuetype System.Drawing.GraphicsUnit unit, unsigned int8 gdiCharSet, bool gdiVerticalFont) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.Drawing.FontFamily,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit,System.Byte,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Drawing.FontFamily" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="gdiCharSet" Type="System.Byte" />
        <Parameter Name="gdiVerticalFont" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="family">新しい <see cref="T:System.Drawing.Font" /> の <see cref="T:System.Drawing.FontFamily" />。</param>
        <param name="emSize">新しいフォントの em サイズ \(単位は <c>unit</c> パラメーターで指定した値\)。</param>
        <param name="style">新しいフォントの <see cref="T:System.Drawing.FontStyle" />。</param>
        <param name="unit">新しいフォントの <see cref="T:System.Drawing.GraphicsUnit" />。</param>
        <param name="gdiCharSet">次を指定する <see cref="T:System.Byte" />。  
  
 このフォントに使用する GDI 文字セット。</param>
        <param name="gdiVerticalFont">新しいフォントが GDI 縦書きフォントから派生したフォントかどうかを示すブール値。</param>
        <summary>指定したサイズ、スタイル、単位、および文字セットを使用して、新しい <see cref="T:System.Drawing.Font" /> を初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `gdiCharSet` パラメーターは、Windows SDK ヘッダー ファイル WinGDI.h で定義されている一覧から値を受け取ります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> 0 で、以下、無限大と評価されるか、有効な数値ではありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="family" /> します。 <see langword="null " /></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (string familyName, float emSize, System.Drawing.FontStyle style, System.Drawing.GraphicsUnit unit, byte gdiCharSet, bool gdiVerticalFont);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string familyName, float32 emSize, valuetype System.Drawing.FontStyle style, valuetype System.Drawing.GraphicsUnit unit, unsigned int8 gdiCharSet, bool gdiVerticalFont) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.String,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit,System.Byte,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="familyName" Type="System.String" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="gdiCharSet" Type="System.Byte" />
        <Parameter Name="gdiVerticalFont" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="familyName">新しい <see cref="T:System.Drawing.Font" /> に対する <see cref="T:System.Drawing.FontFamily" /> の文字列形式。</param>
        <param name="emSize">新しいフォントの em サイズ \(単位は <c>unit</c> パラメーターで指定した値\)。</param>
        <param name="style">新しいフォントの <see cref="T:System.Drawing.FontStyle" />。</param>
        <param name="unit">新しいフォントの <see cref="T:System.Drawing.GraphicsUnit" />。</param>
        <param name="gdiCharSet">このフォントに使用する GDI 文字セットを指定する <see cref="T:System.Byte" />。</param>
        <param name="gdiVerticalFont">新しい <see cref="T:System.Drawing.Font" /> が GDI 縦書きフォントから派生したフォントかどうかを示すブール値。</param>
        <summary>指定したサイズ、スタイル、単位、および文字セットを使用して、新しい <see cref="T:System.Drawing.Font" /> を初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `gdiCharSet` パラメーターは、Windows SDK ヘッダー ファイル WinGDI.h で定義されている一覧から値を受け取ります。 場合、 `familyName` パラメーターは、置き換えられるアプリケーションを実行しているコンピューターにインストールされていないか、サポートされていない、フォント、Microsoft Sans Serif を指定します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="emSize" /> 0 で、以下、無限大と評価されるか、有効な数値ではありません。</exception>
        <altmember cref="P:System.Drawing.Font.GdiCharSet" />
      </Docs>
    </Member>
    <Member MemberName="Bold">
      <MemberSignature Language="C#" Value="public bool Bold { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Bold" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Bold" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Font" /> が太字かどうかを示す値を取得します。</summary>
        <value>この <see cref="T:System.Drawing.Font" /> が太字の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例を示しています、 <xref:System.Drawing.Color.op_Inequality%2A> 演算子、 <xref:System.Drawing.Font.%23ctor%2A> コンス トラクター、および <xref:System.Drawing.Font.Bold%2A> プロパティです。 この例のという名前のボタンを含む Windows フォームで使用する目的は `Button2`です。 次のコードをフォームに貼り付け、 `Button2_Click` メソッドをボタンの <xref:System.Windows.Forms.Control.Click> イベントです。  
  
 [!code-cpp[System.Drawing.CharacterRangeExample\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.CharacterRangeExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.CharacterRangeExample\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.CharacterRangeExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.CharacterRangeExample\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.CharacterRangeExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.Clone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Drawing.Font" /> の同一コピーを作成します。</summary>
        <returns>このメソッドが作成し、<see cref="T:System.Object" /> としてキャストされる <see cref="T:System.Drawing.Font" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code clones a <xref:System.Drawing.Font> and draws text with that font.  
  
 [!code-cpp[System.Drawing.ClassicFontsExamples\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.ClassicFontsExamples\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CS/form1.cs#1)]
 [!code-vb[System.Drawing.ClassicFontsExamples\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Drawing.Font" /> によって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Calling <xref:System.Drawing.Font.Dispose%2A> allows the resources used by this <xref:System.Drawing.Font> to be reallocated for other purposes.  
  
 Call <xref:System.Drawing.Font.Dispose%2A> when you are finished using the <xref:System.Drawing.Font>. The <xref:System.Drawing.Font.Dispose%2A> method leaves the <xref:System.Drawing.Font> in an unusable state. After calling <xref:System.Drawing.Font.Dispose%2A>, you must release all references to the <xref:System.Drawing.Font> so the garbage collector can reclaim the memory that the <xref:System.Drawing.Font> was occupying. For more information, see [Cleaning Up Unmanaged Resources](http://msdn.microsoft.com/ja-jp/a17b0066-71c2-4ba4-9822-8e19332fc213) and [Implementing a Dispose Method](http://msdn.microsoft.com/ja-jp/eb4e1af0-3b48-4fbc-ad4e-fc2f64138bf9).  
  
> [!NOTE]
>  Always call <xref:System.Drawing.Font.Dispose%2A> before you release your last reference to the <xref:System.Drawing.Font>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Drawing.Font> object's **languageKeyword tag is not supported!!!!**  
>  method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">テストするオブジェクト。</param>
        <summary>指定したオブジェクトが <see cref="T:System.Drawing.Font" /> であり、この <see cref="T:System.Drawing.Font" /> と同じ <see cref="P:System.Drawing.Font.FontFamily" />、<see cref="P:System.Drawing.Font.GdiVerticalFont" />、<see cref="P:System.Drawing.Font.GdiCharSet" />、<see cref="P:System.Drawing.Font.Style" />、<see cref="P:System.Drawing.Font.Size" />、および <see cref="P:System.Drawing.Font.Unit" /> の各プロパティ値を保有しているかどうかを示します。</summary>
        <returns>
          <paramref name="obj" /> パラメーターが <see cref="T:System.Drawing.Font" /> であり、この <see cref="T:System.Drawing.Font" /> と同じ <see cref="P:System.Drawing.Font.FontFamily" />、<see cref="P:System.Drawing.Font.GdiVerticalFont" />、<see cref="P:System.Drawing.Font.GdiCharSet" />、<see cref="P:System.Drawing.Font.Style" />、<see cref="P:System.Drawing.Font.Size" />、および <see cref="P:System.Drawing.Font.Unit" /> の各プロパティ値を保有している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>**parameterReference tag is not supported!!!!**  
, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code creates two <xref:System.Drawing.Font> objects and then tests whether they are equivalent.  
  
 [!code-cpp[System.Drawing.ClassicFontsExamples\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.ClassicFontsExamples\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CS/form1.cs#2)]
 [!code-vb[System.Drawing.ClassicFontsExamples\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Font ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.Finalize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>オブジェクトが、ガベージ コレクションによって収集される前に、リソースの解放とその他のクリーンアップ操作の実行を試みることができるようにします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FontFamily">
      <MemberSignature Language="C#" Value="public System.Drawing.FontFamily FontFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.FontFamily FontFamily" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.FontFamily" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.FontFamily</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.FontFamily" /> に関連付けられている <see cref="T:System.Drawing.Font" /> を取得します。</summary>
        <value>この <see cref="T:System.Drawing.FontFamily" /> に関連付けられている <see cref="T:System.Drawing.Font" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Drawing.FontFamily> のフォント、フォント フェイスのようなが、さまざまな規模とスタイル \(たとえば、Arial、Times New Roman、Verdana\) にありますグループを表します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromHdc">
      <MemberSignature Language="C#" Value="public static System.Drawing.Font FromHdc (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Font FromHdc(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.FromHdc(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">デバイス コンテキストを識別するハンドル。</param>
        <summary>デバイス コンテキストを識別する、指定した Windows ハンドルから <see cref="T:System.Drawing.Font" /> を作成します。</summary>
        <returns>このメソッドが作成する <see cref="T:System.Drawing.Font" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの `hdc` パラメーターはフォントが選択されているデバイス コンテキストを識別するハンドルを含める必要があります。 このメソッドは動作しません、 `hdc` から取得したハンドル、 [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics> オブジェクトを `hdc` ハンドルには、選択されているフォントはありません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定したデバイス コンテキストのフォントは TrueType フォントではないです。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for access to unmanaged code. Related enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="FromHfont">
      <MemberSignature Language="C#" Value="public static System.Drawing.Font FromHfont (IntPtr hfont);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Font FromHfont(native int hfont) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.FromHfont(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hfont" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hfont">GDI フォントを識別する Windows ハンドル。</param>
        <summary>指定した Windows ハンドルから <see cref="T:System.Drawing.Font" /> を作成します。</summary>
        <returns>このメソッドが作成する <see cref="T:System.Drawing.Font" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   ハンドルを取得、 [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] フォント。  
  
-   作成、 <xref:System.Drawing.Font> そのハンドルからです。  
  
-   新しいを使用して、画面にテキストを描画 <xref:System.Drawing.Font>します。  
  
 [!code-cpp[System.Drawing.ClassicFontsExamples\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.ClassicFontsExamples\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CS/form1.cs#3)]
 [!code-vb[System.Drawing.ClassicFontsExamples\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="hfont" /> TrueType フォントではないオブジェクトへのポインター。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for access to unmanaged code. Related enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="FromLogFont">
      <MemberSignature Language="C#" Value="public static System.Drawing.Font FromLogFont (object lf);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Font FromLogFont(object lf) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.FromLogFont(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lf" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="lf">
          <see cref="T:System.Drawing.Font" /> の作成元となる GDI <see langword="LOGFONT" /> 構造体を表す <see cref="T:System.Object" />。</param>
        <summary>指定した GDI 論理フォント \(<c>LOGFONT</c>\) 構造体から <see cref="T:System.Drawing.Font" /> を作成します。</summary>
        <returns>このメソッドが作成する <see cref="T:System.Drawing.Font" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] `LOGFONT`, 、または論理フォントが特定のフォントを表す 14 個のプロパティを格納する構造体。  詳細については、Windows 開発ドキュメントの「の論理フォント」を参照してください。 [http:\/\/msdn.microsoft.com\/library](http://msdn.microsoft.com/library)します。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for access to unmanaged code. Related enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="FromLogFont">
      <MemberSignature Language="C#" Value="public static System.Drawing.Font FromLogFont (object lf, IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Font FromLogFont(object lf, native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.FromLogFont(System.Object,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lf" Type="System.Object" />
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="lf">
          <see cref="T:System.Drawing.Font" /> の作成元となる GDI <see langword="LOGFONT" /> 構造体を表す <see cref="T:System.Object" />。</param>
        <param name="hdc">
          <c>lf</c> 構造体についての追加情報を格納しているデバイス コンテキストを識別するハンドル。</param>
        <summary>指定した GDI 論理フォント \(<c>LOGFONT</c>\) 構造体から <see cref="T:System.Drawing.Font" /> を作成します。</summary>
        <returns>このメソッドが作成する <see cref="T:System.Drawing.Font" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] `LOGFONT`, 、または論理フォントが特定のフォントを表す 14 個のプロパティを格納する構造体。  詳細については、Windows 開発ドキュメントの「の論理フォント」を参照してください。 [http:\/\/msdn.microsoft.com\/library](http://msdn.microsoft.com/library)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">フォントは TrueType フォントではないです。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for access to unmanaged code. Related enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GdiCharSet">
      <MemberSignature Language="C#" Value="public byte GdiCharSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8 GdiCharSet" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.GdiCharSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Font" /> で使用する GDI 文字セットを指定するバイト値を取得します。</summary>
        <value>この <see cref="T:System.Drawing.Font" /> で使用する GDI 文字セットを指定するバイト値。 既定値は 1 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティで別の文字セットを指定しない限り、1 が返された、 <xref:System.Drawing.Font.%23ctor%28System.String%2CSystem.Single%2CSystem.Drawing.FontStyle%2CSystem.Drawing.GraphicsUnit%2CSystem.Byte%29> コンス トラクターです。 このプロパティは、Windows SDK ヘッダー ファイル WinGDI.h で定義されている一覧から値をとります。 文字セットとバイト値は、次の表にまとめています。  
  
|文字セット|値|  
|-----------|-------|  
|ANSI|0|  
|DEFAULT|1|  
|シンボル|2|  
|シフト JIS|128|  
|韓国語版|129|  
|ハングル|129|  
|GB2312|134|  
|CHINESEBIG5|136|  
|OEM|255|  
|JOHAB|130|  
|ヘブライ語|177|  
|アラビア語|178|  
|ギリシャ語|161|  
|トルコ語|162|  
|ベトナム語|163|  
|タイ語|222|  
|EASTEUROPE|238|  
|ロシア語|204|  
|MAC|77|  
|バルト語|186|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GdiVerticalFont">
      <MemberSignature Language="C#" Value="public bool GdiVerticalFont { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool GdiVerticalFont" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.GdiVerticalFont" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Font" /> が GDI 縦書きフォントから派生したフォントかどうかを示すブール値を取得します。</summary>
        <value>この <see cref="T:System.Drawing.Font" /> が GDI 縦書きフォントから派生している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを使用して、フォントが Unicode 以外のプラットフォームでネイティブの Win32 コントロールと互換性があるかを判断します。  
  
 <xref:System.Drawing.Font.GdiVerticalFont%2A> だけを返す `true` クラシック GDI からこのフォントを作成した場合  
  
 LOGFONT HFONT などのフォント定義します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Drawing.Font" /> のハッシュ コードを取得します。</summary>
        <returns>この <see cref="T:System.Drawing.Font" /> のハッシュ コード。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   <xref:System.Drawing.Font> を作成します。  
  
-   そのフォントのハッシュ コードを取得します。  
  
-   ハッシュ コードの値を含むメッセージ ボックスが表示されます。  
  
 [!code-cpp[System.Drawing.ClassicFontsExamples\#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.ClassicFontsExamples\#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.ClassicFontsExamples\#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHeight">
      <MemberSignature Language="C#" Value="public float GetHeight ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float32 GetHeight() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.GetHeight" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>フォントの行間 \(ピクセル単位\) を返します。</summary>
        <returns>フォントの行間 \(ピクセル単位\)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 行間隔、 <xref:System.Drawing.Font> は 2 つの連続するテキスト行のベース ライン間の垂直距離です。 したがって、行間には、文字そのものの高さと線の間の空白のスペースが含まれています。  
  
 場合、 <xref:System.Drawing.Font.Unit%2A> フォントのプロパティが以外の値に設定されて <xref:System.Drawing.GraphicsUnit.Pixel?displayProperty=fullName>, 、高さ \(ピクセル単位\) では、画面表示の垂直方向の解像度を使用して計算されます。 たとえば、フォントの単位がインチと 0.3 のフォント サイズです。 ある、対応するフォント ファミリ em の高さが 2048年、行間が 2355年とします。 、垂直方向の解像度が 96 ドット\/インチの画面表示のように高さを計算できます。  
  
 2355\*\(0.3\/2048\)\*96 \= 33.11719  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHeight">
      <MemberSignature Language="C#" Value="public float GetHeight (System.Drawing.Graphics graphics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float32 GetHeight(class System.Drawing.Graphics graphics) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.GetHeight(System.Drawing.Graphics)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="graphics">ページの単位とページのスケールの設定、および表示デバイスの垂直解像度 \(dpi\) を保持する <see cref="T:System.Drawing.Graphics" />。</param>
        <summary>このフォントの行間を、指定した <see cref="T:System.Drawing.Graphics" /> の現在の単位で返します。</summary>
        <returns>フォントの行間 \(ピクセル単位\)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 行間隔、 <xref:System.Drawing.Font> は 2 つの連続するテキスト行のベース ライン間の垂直距離です。 したがって、行間には、文字そのものの高さと線の間の空白のスペースが含まれています。  
  
 場合、 <xref:System.Drawing.Font.Unit%2A> フォントのプロパティが以外の値に設定されて <xref:System.Drawing.GraphicsUnit.Pixel?displayProperty=fullName>, 、高さ \(ピクセル単位\) は、指定した垂直解像度を使用して計算されます <xref:System.Drawing.Graphics> オブジェクトです。 たとえば、フォントの単位がインチと 0.3 のフォント サイズです。 ある、対応するフォント ファミリ em の高さが 2048年、行間が 2355年とします。 場合、 <xref:System.Drawing.Graphics> オブジェクトには、 <xref:System.Drawing.Font.Unit%2A> のプロパティの値 <xref:System.Drawing.GraphicsUnit.Pixel?displayProperty=fullName> と <xref:System.Drawing.Graphics.DpiY%2A> 96 ドット\/インチ、高さのプロパティ値が次のように計算されます。  
  
 2355\*\(0.3\/2048\)\*96 \= 33.1171875  
  
 たとえば先ほどの同じ例、 <xref:System.Drawing.Font.Unit%2A> のプロパティ、 <xref:System.Drawing.Graphics> にオブジェクトが設定されている <xref:System.Drawing.GraphicsUnit.Millimeter?displayProperty=fullName> なく <xref:System.Drawing.GraphicsUnit.Pixel?displayProperty=fullName>です。 \(1 インチ \= 25.4 ミリメートルを使用\) し、高さをミリメートル単位では次のように計算します。  
  
 2355\*\(0.3\/2048\)25.4 \= 8.762256  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   <xref:System.Drawing.Font> を作成します。  
  
-   行のテキストを new を使用して、画面に描画 <xref:System.Drawing.Font>します。  
  
-   フォントの高さを取得します。  
  
-   2 番目の行の最初の行のすぐ下のテキストを描画します。  
  
 [!code-cpp[System.Drawing.ClassicFontsExamples\#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.ClassicFontsExamples\#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CS/form1.cs#5)]
 [!code-vb[System.Drawing.ClassicFontsExamples\#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="graphics" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetHeight">
      <MemberSignature Language="C#" Value="public float GetHeight (float dpi);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float32 GetHeight(float32 dpi) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.GetHeight(System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dpi" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dpi">フォントの高さの計算に使用する垂直方向の解像度 \(dpi\)。</param>
        <summary>垂直方向の指定の解像度でデバイスに描画した場合の、この <see cref="T:System.Drawing.Font" /> の高さ \(ピクセル単位\) を返します。</summary>
        <returns>この <see cref="T:System.Drawing.Font" /> の高さ \(ピクセル単位\)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Drawing.Font.Unit%2A> フォントのプロパティが以外の値に設定されて <xref:System.Drawing.GraphicsUnit.Pixel?displayProperty=fullName>, 、高さ \(ピクセル単位\) では、画面表示の垂直方向の解像度を使用して計算されます。 たとえば、フォントの単位がインチと 0.3 のフォント サイズです。 ある、対応するフォント ファミリ em の高さが 2048年、行間が 2355年とします。 指定の垂直方向の解像度が 96 ドット\/インチの場合は、高さは、次のように計算されます。  
  
 2355\*\(0.3\/2048\)\*96 \= 33.1171875  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public int Height { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Height" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フォントの行間を取得します。</summary>
        <value>フォントの行間 \(ピクセル単位\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 行間とは、2 つの連続するテキスト行のベース ライン間の垂直距離です。 したがって、行間には、文字そのものの高さと線の間の空白のスペースが含まれています。  
  
 場合、 <xref:System.Drawing.Font.Unit%2A> フォントのプロパティが以外の値に設定されて <xref:System.Drawing.GraphicsUnit.Pixel?displayProperty=fullName>, 、高さ \(ピクセル単位\) では、画面表示の垂直方向の解像度を使用して計算されます。 たとえば、フォントの単位がインチと 0.3 のフォント サイズです。 ある、対応するフォント ファミリ em の高さが 2048年、行間が 2355年とします。 、垂直方向の解像度が 96 ドット\/インチの画面表示のように高さを計算できます。  
  
 2355\*\(0.3\/2048\)\*96 \= 33.11719  
  
 によって返される値、 <xref:System.Drawing.Font.GetHeight%2A> メソッド 33.11719 の戻り値、 <xref:System.Drawing.Font.Height%2A> プロパティ 34 になります。<xref:System.Drawing.Font.Height%2A> プロパティによって返される値は、 <xref:System.Drawing.Font.GetHeight%2A>, 、最も近い整数に切り上げられます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSystemFont">
      <MemberSignature Language="C#" Value="public bool IsSystemFont { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSystemFont" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.IsSystemFont" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フォントが <see cref="T:System.Drawing.SystemFonts" /> のメンバーかどうかを示す値を取得します。</summary>
        <value>フォントが <see cref="T:System.Drawing.SystemFonts" /> のメンバーである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 システム フォントを変更したとき、 <xref:System.Drawing.Font.IsSystemFont%2A> プロパティが返すことができます `true`, フォントが実際にシステムのフォントではない場合でも、します。 アプリケーションでのシステム フォントを使用している場合は、この状況を避けるため、処理することによりユーザー基本設定の変更を追跡する必要があります、 <xref:Microsoft.Win32.SystemEvents.UserPreferenceChanging> または <xref:Microsoft.Win32.SystemEvents.UserPreferenceChanged> イベントです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Italic">
      <MemberSignature Language="C#" Value="public bool Italic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Italic" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Italic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このフォントに斜体スタイルが適用されているかどうかを示す値を取得します。</summary>
        <value>このフォントに斜体スタイルが適用されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Drawing.Font.Style" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Drawing.Design.FontNameEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.FontConverter/FontNameConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Font" /> の書体名を取得します。</summary>
        <value>この <see cref="T:System.Drawing.Font" /> の書体名の文字列形式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例では、使用して、 <xref:System.Drawing.Font.%23ctor%2A> コンス トラクターと <xref:System.Drawing.Font.Size%2A>, 、<xref:System.Drawing.Font.SizeInPoints%2A>, 、<xref:System.Drawing.Font.Name%2A>, 、<xref:System.Drawing.Font.Style%2A>, 、および <xref:System.Drawing.Font.Unit%2A> プロパティです。 含む Windows フォームで使用するこの例の目的は、 <xref:System.Windows.Forms.ComboBox> という `ComboBox1` 「大規模」、「小さい」文字列が設定されます。 次のコードをフォームに貼り付け、 `ComboBox1_SelectedIndexChanged` メソッドを <xref:System.Windows.Forms.ComboBox.SelectedIndexChanged> のイベント、 <xref:System.Windows.Forms.ComboBox> コントロールです。  
  
 [!code-cpp[System.Drawing.FontsExample\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.FontsExample/cpp/form1.cpp#1)]
 [!code-csharp[System.Drawing.FontsExample\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.FontsExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.FontsExample\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.FontsExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalFontName">
      <MemberSignature Language="C#" Value="public string OriginalFontName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OriginalFontName" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.OriginalFontName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>最初に指定したフォントの名前を取得します。</summary>
        <value>最初に指定したフォントの名前を表す文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 元のフォント名と実際のフォントの名前が、異なる場合があります。 システム要件以外は、最初に指定されたフォントのフォントの使用があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public float Size { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Size" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Font" /> の em サイズを、<see cref="P:System.Drawing.Font.Unit" /> プロパティで指定した単位で取得します。</summary>
        <value>この <see cref="T:System.Drawing.Font" /> の em サイズ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例では、使用して、 <xref:System.Drawing.Font.%23ctor%2A> コンス トラクターと <xref:System.Drawing.Font.Size%2A>, 、<xref:System.Drawing.Font.SizeInPoints%2A>, 、および <xref:System.Drawing.Font.Unit%2A> プロパティです。 含む Windows フォームで使用するこの例の目的は、 <xref:System.Windows.Forms.ComboBox> という `ComboBox1` 「大規模」、「小さい」文字列が設定されます。 次のコードをフォームに貼り付け、 `ComboBox1_SelectedIndexChanged` メソッドを <xref:System.Windows.Forms.ComboBox.SelectedIndexChanged> のイベント、 <xref:System.Windows.Forms.ComboBox> コントロールです。  
  
 [!code-cpp[System.Drawing.FontsExample\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.FontsExample/cpp/form1.cpp#1)]
 [!code-csharp[System.Drawing.FontsExample\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.FontsExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.FontsExample\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.FontsExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeInPoints">
      <MemberSignature Language="C#" Value="public float SizeInPoints { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 SizeInPoints" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.SizeInPoints" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Font" /> の em サイズ \(ポイント\) を取得します。</summary>
        <value>この <see cref="T:System.Drawing.Font" /> の em サイズ \(ポイント\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例では、使用して、 <xref:System.Drawing.Font.%23ctor%2A> コンス トラクターと <xref:System.Drawing.Font.Size%2A>, 、<xref:System.Drawing.Font.SizeInPoints%2A>, 、および <xref:System.Drawing.Font.Unit%2A> プロパティです。 含む Windows フォームで使用するこの例の目的は、 <xref:System.Windows.Forms.ComboBox> という `ComboBox1` 「大規模」、「小さい」文字列が設定されます。 次のコードをフォームに貼り付け、 `ComboBox1_SelectedIndexChanged` メソッドを <xref:System.Windows.Forms.ComboBox.SelectedIndexChanged> のイベント、 <xref:System.Windows.Forms.ComboBox> コントロールです。  
  
 [!code-cpp[System.Drawing.FontsExample\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.FontsExample/cpp/form1.cpp#1)]
 [!code-csharp[System.Drawing.FontsExample\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.FontsExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.FontsExample\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.FontsExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Strikeout">
      <MemberSignature Language="C#" Value="public bool Strikeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Strikeout" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Strikeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Font" /> がフォントを通る水平線を指定するかどうかを示す値を取得します。</summary>
        <value>この <see cref="T:System.Drawing.Font" /> がフォントを通る水平線を持っている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public System.Drawing.FontStyle Style { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.FontStyle Style" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Style" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.FontStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Font" /> のスタイル情報を取得します。</summary>
        <value>この <see cref="T:System.Drawing.Font" /> のスタイル情報が格納されている <see cref="T:System.Drawing.FontStyle" /> 列挙体。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例では、設定、 <xref:System.Drawing.Font> 、太字のフォントを使用して新しいボタンのプロパティ、 <xref:System.Drawing.FontStyle> 列挙します。 この例は、Windows フォームで使用される設計されています。 という名前のボタンを含むフォームを作成 `Button1` し、次のコードを貼り付けます。 関連付ける、 `Button1_Click` メソッドをボタンの <xref:System.Windows.Forms.Control.Click> イベントです。  
  
 [!code-cpp[System.Drawing.MiscExamples\#11](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#11)]
 [!code-csharp[System.Drawing.MiscExamples\#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#11)]
 [!code-vb[System.Drawing.MiscExamples\#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo si, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="si" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="si">データの読み込み先となる <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
        <param name="context">このシリアル化のシリアル化先 \(<see cref="T:System.Runtime.Serialization.StreamingContext" /> を参照\)。</param>
        <summary>
          <see cref="T:System.Runtime.Serialization.SerializationInfo" /> に、オブジェクトをシリアル化するために必要なデータを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SystemFontName">
      <MemberSignature Language="C#" Value="public string SystemFontName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SystemFontName" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.SystemFontName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Drawing.Font.IsSystemFont" /> プロパティが <see langword="true" /> を返す場合は、システム フォントの名前を取得します。</summary>
        <value>
          <see cref="P:System.Drawing.Font.IsSystemFont" /> が <see langword="true" /> を返す場合はシステム フォントの名前。それ以外の場合は空の文字列 \(""\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 によって返される名前、 <xref:System.Drawing.Font.SystemFontName%2A> のメンバーのいずれかのプロパティになります、 <xref:System.Drawing.SystemFonts>, 文字列に変換されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToHfont">
      <MemberSignature Language="C#" Value="public IntPtr ToHfont ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int ToHfont() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.ToHfont" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Drawing.Font" /> を識別するハンドルを返します。</summary>
        <returns>この <see cref="T:System.Drawing.Font" /> を識別する Windows ハンドル。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用する場合は、結果を破棄する必要があります `Hfont` を使用して、 [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] `DeleteObject` メソッドをリソースを解放します。  
  
   
  
## 例  
 次のコード例を作成、 <xref:System.Drawing.Font> をへのハンドルを取得および <xref:System.Drawing.Font>です。 例が Windows フォームで使用するために設計されており、必要があります <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。  
  
 [!code-cpp[System.Drawing.ClassicFontsExamples\#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.ClassicFontsExamples\#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CS/form1.cs#6)]
 [!code-vb[System.Drawing.ClassicFontsExamples\#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">操作が失敗しました。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for access to unmanaged code. Related enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ToLogFont">
      <MemberSignature Language="C#" Value="public void ToLogFont (object logFont);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ToLogFont(object logFont) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.ToLogFont(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logFont" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="logFont">このメソッドが作成する <see langword="LOGFONT" /> 構造体を表す <see cref="T:System.Object" />。</param>
        <summary>この <see cref="T:System.Drawing.Font" /> から GDI 論理フォント \(<c>LOGFONT</c>\) 構造体を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、設定、 `logFont` フォントが変換の結果のパラメーターです。 論理フォントの詳細については、次を参照してください。 [LOGFONT structure](http://msdn.microsoft.com/library/dd145037.aspx)します。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for access to unmanaged code. Related enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ToLogFont">
      <MemberSignature Language="C#" Value="public void ToLogFont (object logFont, System.Drawing.Graphics graphics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ToLogFont(object logFont, class System.Drawing.Graphics graphics) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.ToLogFont(System.Object,System.Drawing.Graphics)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logFont" Type="System.Object" />
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="logFont">このメソッドが作成する <see langword="LOGFONT" /> 構造体を表す <see cref="T:System.Object" />。</param>
        <param name="graphics">
          <see langword="LOGFONT" /> 構造体の追加情報を提供する <see cref="T:System.Drawing.Graphics" />。</param>
        <summary>この <see cref="T:System.Drawing.Font" /> から GDI 論理フォント \(<c>LOGFONT</c>\) 構造体を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、設定、 `logFont` フォントが変換の結果のパラメーターです。 論理フォントの詳細については、次を参照してください。 [LOGFONT structure](http://msdn.microsoft.com/library/dd145037.aspx)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="graphics" /> は <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for access to unmanaged code. Related enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Drawing.Font" /> をユーザーが判読できる文字列形式で返します。</summary>
        <returns>この <see cref="T:System.Drawing.Font" /> を表す文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 返される文字列には、次の形式があります。  
  
 \[フォント: 名前 \=*fontName*, 、サイズ \=*サイズ*, 、ユニット \=*単位*, 、GDiCharSet \=*gdiCharSet*, 、GdiVerticalFont \=*ブール*\]  
  
   
  
## 例  
 次のコード例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、これは、パラメーター、 <xref:System.Windows.Forms.Control.Paint> イベント ハンドラーです。 コードは、次のアクションを実行します。  
  
-   <xref:System.Drawing.Font> を作成します。  
  
-   フォントを表す文字列を取得します。  
  
-   メッセージ ボックスに、文字列を表示します。  
  
 [!code-cpp[System.Drawing.ClassicFontsExamples\#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.ClassicFontsExamples\#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CS/form1.cs#7)]
 [!code-vb[System.Drawing.ClassicFontsExamples\#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Underline">
      <MemberSignature Language="C#" Value="public bool Underline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Underline" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Underline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Font" /> が下線付きかどうかを示す値を取得します。</summary>
        <value>この <see cref="T:System.Drawing.Font" /> が下線付きの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unit">
      <MemberSignature Language="C#" Value="public System.Drawing.GraphicsUnit Unit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.GraphicsUnit Unit" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Unit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.FontConverter/FontUnitConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.GraphicsUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Font" /> の長さの単位を取得します。</summary>
        <value>この <see cref="T:System.Drawing.Font" /> の長さの単位を表す <see cref="T:System.Drawing.GraphicsUnit" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例では、使用して、 <xref:System.Drawing.Font.%23ctor%2A> コンス トラクターと <xref:System.Drawing.Font.Size%2A>, 、<xref:System.Drawing.Font.SizeInPoints%2A>, 、および <xref:System.Drawing.Font.Unit%2A> プロパティです。 含む Windows フォームで使用するこの例の目的は、 <xref:System.Windows.Forms.ComboBox> という `ComboBox1` 「大規模」、「小さい」文字列が設定されます。 次のコードをフォームに貼り付け、 `ComboBox1_SelectedIndexChanged` メソッドを <xref:System.Windows.Forms.ComboBox.SelectedIndexChanged> のイベント、 <xref:System.Windows.Forms.ComboBox> コントロールです。  
  
 [!code-cpp[System.Drawing.FontsExample\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.FontsExample/cpp/form1.cpp#1)]
 [!code-csharp[System.Drawing.FontsExample\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.FontsExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.FontsExample\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.FontsExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetHeight">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このフォントの行間を返します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ToLogFont">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Drawing.Font" /> から GDI 論理フォント \(<c>LOGFONT</c>\) 構造体を作成します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した既存の <see cref="T:System.Drawing.Font" /> と <see cref="T:System.Drawing.FontStyle" /> を使用する、新しい <see cref="T:System.Drawing.Font" /> を初期化します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="FromLogFont">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した GDI 論理フォント \(<c>LOGFONT</c>\) 構造体から <see cref="T:System.Drawing.Font" /> を作成します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>