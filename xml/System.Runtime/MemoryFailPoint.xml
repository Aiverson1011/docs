<Type Name="MemoryFailPoint" FullName="System.Runtime.MemoryFailPoint">
  <TypeSignature Language="C#" Value="public sealed class MemoryFailPoint : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MemoryFailPoint extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.MemoryFailPoint" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>操作の実行前に十分なメモリ リソースがあることを確認します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  このクラスは、高度な開発で使用するものです。  
  
 インスタンスを作成、 <xref:System.Runtime.MemoryFailPoint> クラスは、メモリ ゲートを作成します。 メモリ ゲートは、大量のメモリを必要とするアクティビティを開始する前に、十分なリソースを確認します。 チェックに失敗した結果、 <xref:System.InsufficientMemoryException> 例外がスローされます。 この例外は、開始してから、操作できませんし、リソースが不足しているため失敗の可能性を削減できます。 これによりを避けるためのパフォーマンスが低下する、 <xref:System.OutOfMemoryException> 例外と、状態の破損、コード内の任意の場所に例外の不適切な処理から作成される場合があります。  
  
> [!IMPORTANT]
>  この型は、 <xref:System.IDisposable> インターフェイスです。 型の使用が完了したらを直接または間接的にその破棄する必要があります。 型の直接 dispose を呼び出してその <xref:System.IDisposable.Dispose%2A> メソッドで、 `try`\/`catch` ブロックします。 直接ことのない破棄する場合など言語構成要素を使用して `using` \(c\#\) のまたは `Using` \(Visual Basic で\)。 詳細については、"を使用して、オブジェクトを実装して IDisposable"」セクションを参照してください、 <xref:System.IDisposable> インターフェイスに関するトピック。  
  
 スローすることによって、 <xref:System.InsufficientMemoryException> 例外、アプリケーションは、操作が完了できない推定値と、アプリケーションの状態が破損した可能性のある部分的に完了した操作の間区別できます。 これにより、アプリケーションが現在をアンロードする必要があるペシミスティックのエスカレーション ポリシーの頻度を減らす <xref:System.AppDomain> やプロセスのリサイクルします。  
  
 <xref:System.Runtime.MemoryFailPoint> 十分なメモリと連続するいくつかの仮想アドレス空間がヒープですべてのガベージ コレクションで使用できるはであり、スワップ ファイルのサイズを増やすことがあるかどうかを確認します。<xref:System.Runtime.MemoryFailPoint> ゲート、呼び出し元の有効期間中にメモリの長期的な可用性に関する保証は常に使用しない、 <xref:System.Runtime.MemoryFailPoint.Dispose%2A> リソースに関連付けられていることを確認するメソッド <xref:System.Runtime.MemoryFailPoint> 解放されます。  
  
 メモリ ゲートを使用するには、作成する必要があります、 <xref:System.Runtime.MemoryFailPoint> オブジェクトし、メモリのメガバイト \(MB\) の数を指定して次の操作が使用すると予想されます。 十分なメモリが使用できない場合、 <xref:System.InsufficientMemoryException> 例外がスローされます。  
  
 コンス トラクターのパラメーターは、正の整数である必要があります。 負の値を生成、 <xref:System.ArgumentOutOfRangeException> 例外です。  
  
 <xref:System.Runtime.MemoryFailPoint> 16 MB の粒度で動作します。 16 MB 未満の値は 16 MB として扱われ、その他の値は、次に最大 16 MB の倍数として扱われます。  
  
   
  
## 例  
 <xref:System.Runtime.MemoryFailPoint> アプリケーションは動作の速度を自体と、破損の方法でメモリの不足を回避できます。  構文のスコープ内で使用する必要があります。  次の例では、ワーク キュー内の項目を処理するスレッドが起動します。  使用して、使用可能なメモリ リソースをチェックする各スレッドが起動される前に <xref:System.Runtime.MemoryFailPoint>します。  例外がスローされた場合、メインのメソッドは、次のスレッドを起動する前にメモリがあるまでを待ちます。  
  
 [!code-csharp[MemoryFailPoint\#1](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />. Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></permission>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MemoryFailPoint (int sizeInMegabytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 sizeInMegabytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="sizeInMegabytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sizeInMegabytes">必要なメモリ サイズ \(単位は MB\)。 必ず正の値を指定します。</param>
        <summary>正常に実行するために必要なメモリの量を指定して、<see cref="T:System.Runtime.MemoryFailPoint" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 作業項目を処理するアプリケーションで使用されるメモリ量を経験的に決定できます。  要求を処理するアプリケーションに必要なメモリの量を推定するには、使用を検討して、 <xref:System.GC.GetTotalMemory%2A?displayProperty=fullName> と作業項目を処理するメソッドを呼び出した後でする前に使用可能なメモリの量を決定する方法です。 参照してください、 <xref:System.Runtime.MemoryFailPoint> クラスの値を動的に決定するコード例については、 `sizeInMegabytes` パラメーター。  
  
   
  
## 例  
 次の例では、実行時に、メソッドが必要とするメモリの量を決定する方法を示します。 このコード例が示されている例の一部は、 <xref:System.Runtime.MemoryFailPoint> クラスです。  
  
 [!code-csharp[MemoryFailPoint\#2](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定されたメモリ サイズは、負の値。</exception>
        <exception cref="T:System.InsufficientMemoryException">メモリが不足して、ゲートで保護されているコードの実行を開始します。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Runtime.MemoryFailPoint" /> によって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Call <xref:System.Runtime.MemoryFailPoint.Dispose%2A> when you are finished using the <xref:System.Runtime.MemoryFailPoint>. The <xref:System.Runtime.MemoryFailPoint.Dispose%2A> method leaves the <xref:System.Runtime.MemoryFailPoint> in an unusable state. After calling <xref:System.Runtime.MemoryFailPoint>, you must release all references to the <xref:System.Runtime.MemoryFailPoint> so the garbage collector can reclaim the memory that the <xref:System.Runtime.MemoryFailPoint> was occupying. For more information, see [Cleaning Up Unmanaged Resources](http://msdn.microsoft.com/ja-jp/a17b0066-71c2-4ba4-9822-8e19332fc213) and [Implementing a Dispose Method](http://msdn.microsoft.com/ja-jp/eb4e1af0-3b48-4fbc-ad4e-fc2f64138bf9).  
  
> [!NOTE]
>  Always call <xref:System.Runtime.MemoryFailPoint.Dispose%2A> before you release your last reference to the <xref:System.Runtime.MemoryFailPoint>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Runtime.MemoryFailPoint> object's **languageKeyword tag is not supported!!!!**  
>  method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MemoryFailPoint ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Finalize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ガベージ コレクターが <see cref="T:System.Runtime.MemoryFailPoint" /> を再利用しているときに、リソースが解放され、他のクリーンアップ操作が確実に実行されるようにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ガベージ コレクターの呼び出し、 <xref:System.Runtime.MemoryFailPoint.Finalize%2A> メソッド、現在のオブジェクトが完了する準備ができたとき。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
  </Members>
</Type>