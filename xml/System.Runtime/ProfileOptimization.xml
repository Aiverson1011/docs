<Type Name="ProfileOptimization" FullName="System.Runtime.ProfileOptimization">
  <TypeSignature Language="C#" Value="public static class ProfileOptimization" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ProfileOptimization extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.ProfileOptimization" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>以前のコンパイル中に作成されたプロファイルに基づいて実行されると思われるメソッドのバック グラウンド コンパイルを実行することによって、ジャストイン タイム \(JIT\) コンパイラを必要とするアプリケーションでのアプリケーション ドメインの起動時のパフォーマンスが向上します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!IMPORTANT]
>  最適化のプロファイルには、マルチコア コンピューターが必要です。 メソッドは、他のコンピューターで無視されます。  
  
 アプリケーション ドメインでの最適化のプロファイルを開始するたびに、前回の使用時に作成したプロファイルが読み取られます。 プロファイルの情報は、スタートアップ時に実行される可能性が最も高いメソッドを特定することによってバック グラウンド コンパイルの指針として使用されます。 マルチコア コンピューターでは、このメソッドは、既に可能性は増加が必要になるまで、メイン アプリケーション スレッドは JIT コンパイラを呼び出す必要があるないようにしてコンパイルされます。  
  
 起動時のメソッドの使用に関する最新の情報を常に含まれるように、使用するたびに、\[発行プロファイル ファイルが上書きされます。  
  
 最適化のプロファイルでは、アプリケーション ドメインの起動に限定されません。 頻繁に使用する、JIT コンパイラが必要となるアクティビティがある場合は、それらを使用できます。 このようなそれぞれのアクティビティがある、独自のプロファイルを持つように、アプリケーション ドメインに対して複数のプロファイルを維持できます。  
  
 最適化のプロファイルをアプリケーション ドメインを使用するを呼び出す必要があります、 <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> メソッド プロファイルが格納先フォルダーを指定します。 フォルダーが既に存在する必要があります。 プロファイルの使用を開始する、 <xref:System.Runtime.ProfileOptimization.StartProfile%2A> メソッドと、プロファイルのファイル名を指定します。 ファイルが以前に記録されませんは初回使用時に作成されます。 パフォーマンス メリットの 1 つ目の時間が、プロファイルを作成することはありません。  
  
 最適化のプロファイルには、メソッドの実行順序は変わりません。 メソッドは、バック グラウンド スレッドでは実行されません。メソッドはコンパイルも呼び出されない、これは単に使用されません。 プロファイル ファイルが壊れているか \(たとえば、フォルダーが存在しない\) ために、指定したフォルダーに書き込めない場合、プログラムの実行は最適化のプロファイルせずに続行します。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SetProfileRoot">
      <MemberSignature Language="C#" Value="public static void SetProfileRoot (string directoryPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetProfileRoot(string directoryPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ProfileOptimization.SetProfileRoot(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directoryPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directoryPath">現在のアプリケーション ドメインのプロファイルのファイルが格納されているフォルダーの完全パス。</param>
        <summary>現在のアプリケーション ドメインに対するプロファイル最適化を有効にし、最適化のプロファイル ファイルが格納されているフォルダーを設定します。 シングルコア コンピューターでは、メソッドは無視されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す前に、このメソッドを呼び出す必要があります、 <xref:System.Runtime.ProfileOptimization.StartProfile%2A> を最初に現在のアプリケーション ドメイン内のメソッドです。 呼び出した場合 <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> 、同じアプリケーション ドメインで複数回に 1 つ目後のすべての呼び出しは無視されます。  
  
 指定したフォルダーが既に存在する必要があります。 存在しない場合は、このメソッドの呼び出しでは作成されない、され、プロファイリングは発生しません。  
  
 複数のコアがないコンピューターでこのメソッドは無視されます。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="StartProfile">
      <MemberSignature Language="C#" Value="public static void StartProfile (string profile);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void StartProfile(string profile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ProfileOptimization.StartProfile(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="profile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="profile">使用するプロファイルのファイル名。</param>
        <summary>バック グラウンド スレッドで、指定したプロファイル ファイルに記録された以前の方法のジャストイン タイム \(JIT\) コンパイルを開始します。 現在メソッド使用では、後で指定されたプロファイル ファイルを上書きを記録するプロセスを開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 によって指定されたフォルダーに指定されたプロファイルが存在する場合、 <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> メソッドが含まれている情報はバック グラウンド スレッドでメソッドがコンパイルされる順序を決定するために使用します。<xref:System.Runtime.ProfileOptimization.StartProfile%2A> メソッドは、メソッドの使用の記録を開始し、既に存在しない場合は、プロファイルを作成します。  
  
 かどうか、バック グラウンド スレッドまたはメイン アプリケーション スレッド上にコンパイルされているに関係なく、実際に呼び出されるメソッドのみが記録されます。 アプリケーションは、バック グラウンド スレッドがコンパイルされる前に、それを呼び出す必要がある場合、アプリケーションのメイン スレッドでメソッドがコンパイルされます。  
  
 記録を実行するコードはあるメソッドはコンパイル、メイン スレッドとバック グラウンド スレッドでコンパイルされるメソッドを含む速度を追跡します。 ときに、速度レベルを下回ったあらかじめ決められた、録音を停止します。 記録は、JIT コンパイルの比率が事前に定義された上限を超えた場合にも停止します。  
  
 場合、 <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> 現在のアプリケーション ドメインのメソッドが呼び出されていないまたはコンピューターに複数のコアがあるない場合、 <xref:System.Runtime.ProfileOptimization.StartProfile%2A> メソッドには影響を及ぼしません。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
  </Members>
</Type>