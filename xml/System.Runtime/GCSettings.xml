<Type Name="GCSettings" FullName="System.Runtime.GCSettings">
  <TypeSignature Language="C#" Value="public static class GCSettings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit GCSettings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.GCSettings" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>現在のプロセスのガベージ コレクション設定を指定します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Runtime.GCSettings.IsServerGC%2A> プロパティを現在のプロセスのサーバーのガベージ コレクションが有効になっているかどうかを判断します。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsServerGC">
      <MemberSignature Language="C#" Value="public static bool IsServerGC { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsServerGC" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.GCSettings.IsServerGC" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サーバーのガベージ コレクションが有効であるかどうかを示す値を取得します。</summary>
        <value>サーバーのガベージ コレクションが有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 サーバーのガベージ コレクションに関する情報、」の「ワークステーションとサーバーのガベージ コレクション」セクションを参照してください。 [Fundamentals of Garbage Collection](http://msdn.microsoft.com/ja-jp/67c5a20d-1be1-4ea7-8a9a-92b0b08658d2)します。  
  
 サーバーのガベージ コレクションが有効になっていない場合は、ワークステーションのガベージ コレクションが有効で \(または同時実行コレクションなしです\)。 サーバーのガベージ コレクションは、マルチプロセッサ コンピューターでのみ使用できます。  
  
 アンマネージ ホストがサーバーのガベージ コレクションを要求し、ホストの要求は、構成ファイルの設定を上書きします。 ホストがガベージ コレクションの種類を指定しない場合は、サーバーのガベージ コレクションを指定する構成ファイルの設定を使用できます。 マシン構成ファイルではなく、アプリケーション構成ファイルでのみこの設定が有効な \(を参照してください [Configuration Files](http://msdn.microsoft.com/ja-jp/86bd26d3-737e-4484-9782-19b17f34cd1f)\)。 次の例では、サーバー ガベージ コレクションを有効にするサンプル アプリケーションの構成ファイルの内容を示します。  
  
```  
<configuration>  
  <runtime>  
    <gcServer enabled="true" />  
  </runtime>  
</configuration>  
```  
  
   
  
## 例  
 次の例では、ホスト コンピューターがサーバーまたはワークステーションのガベージ コレクションを使用しているかどうかを示します。  
  
 [!code-csharp[Environment.IsServerGC\#1](~/samples/snippets/csharp/VS_Snippets_CLR/environment.IsServerGC/CS/isg.cs#1)]
 [!code-vb[Environment.IsServerGC\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/environment.IsServerGC/VB/isg.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LargeObjectHeapCompactionMode">
      <MemberSignature Language="C#" Value="public static System.Runtime.GCLargeObjectHeapCompactionMode LargeObjectHeapCompactionMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Runtime.GCLargeObjectHeapCompactionMode LargeObjectHeapCompactionMode" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.GCSettings.LargeObjectHeapCompactionMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.GCLargeObjectHeapCompactionMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>\[.NET Framework 4.5.1 以上でサポート\]  
  
 フル ブロッキング ガベージ コレクションが大きなオブジェクト ヒープ \(LOH\) を圧縮するかどうかを示す値を取得または設定します。</summary>
        <value>フル ブロッキング ガベージ コレクションが LOH を圧縮するかどうかを示す、列挙値の 1 つです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 LOH は、85,000 バイト以上を必要とする \(配列\) などのラージ オブジェクトのメモリの割り当てに使用されます。 パフォーマンスに影響する大きなメモリ ブロックのコピーのため、ガベージ コレクターは通常をされたオブジェクトに占有されて、ラージ オブジェクトのメモリの割り当ての今後の要求を再利用できるメモリ位置のリストを作成するは LOH をスイープします。 ただし、幅広くアプリでは、LOH の使用を一時的なオブジェクトが、メモリの断片化もパフォーマンスに悪影響を格納します。 ここでは、使用することは、 <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A> プロパティをガベージ コレクション中にスイープするだけではなく、LOH を圧縮します。  
  
 既定値、 <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A> プロパティは、 <xref:System.Runtime.GCLargeObjectHeapCompactionMode.Default?displayProperty=fullName>, 、ガベージ コレクション中に、LOH は最適化されないことを示します。 プロパティの値を割り当てる場合 <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=fullName>, 、LOH は、次フル ブロッキング ガベージ コレクション中に、圧縮、およびプロパティの値にリセット <xref:System.Runtime.GCLargeObjectHeapCompactionMode.Default?displayProperty=fullName>します。  
  
> [!NOTE]
>  バック グラウンド ガベージ コレクションがブロックされていません。 つまり、設定した場合、 <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A> プロパティを <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=fullName>, 、その後に発生する 2 つのコレクションが LOH を圧縮しないでどのバック グラウンドのジェネレーション。 のみ、最初のブロックしている世代 2 のコレクションが LOH を圧縮します。  
  
 後に、 <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A> にプロパティが設定されている <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=fullName>, 、中間の将来の時点で次のフル ブロッキング ガベージ コレクション \(および LOH を圧縮\) が発生しました。 次のようにコードを使用してすぐに LOH を圧縮することができます。  
  
 [!code-csharp[System.Runtime.GCSettings\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.gcsettings/cs/lohcompactionmode1.cs#1)]
 [!code-vb[System.Runtime.GCSettings\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.gcsettings/vb/lohcompactionmode1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.GCLargeObjectHeapCompactionMode" />
      </Docs>
    </Member>
    <Member MemberName="LatencyMode">
      <MemberSignature Language="C#" Value="public static System.Runtime.GCLatencyMode LatencyMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Runtime.GCLatencyMode LatencyMode" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.GCSettings.LatencyMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.GCLatencyMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ガベージ コレクションの現在の待機モードを取得または設定します。</summary>
        <value>待機モードを指定する列挙値の 1 つ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 設定して、アプリケーションでガベージ コレクションの割り込みの動作のレベルを減らすことができます、 <xref:System.Runtime.GCLatencyMode> に <xref:System.Runtime.GCLatencyMode.LowLatency> 重要な操作中にします。 このような操作が完了した後は、メモリを増やすためより多くのオブジェクトを再要求できるように高待機時間モードに戻ります。  
  
 通常の値を設定する、 <xref:System.Runtime.GCSettings.LatencyMode%2A> ガベージ コレクターの待機時間モードを定義するプロパティです。 ただし、割り当てることによって、GC 領域待機時間モードなしを設定することはできません、 <xref:System.Runtime.GCLatencyMode.NoGCRegion?displayProperty=fullName> 列挙値を <xref:System.Runtime.GCSettings.LatencyMode%2A> プロパティです。 代わりに、 <xref:System.GC.TryStartNoGCRegion%2A?displayProperty=fullName> を開始して、GC 領域待機時間モードなし、メソッドの呼び出し、 <xref:System.GC.EndNoGCRegion%2A?displayProperty=fullName> スクリプトを終了します。  
  
 参照してください [Latency Modes](http://msdn.microsoft.com/ja-jp/96278bb7-6eab-4612-8594-ceebfc887d81) ガベージ コレクションの実行時の構成設定の既定値に与える影響については、 <xref:System.Runtime.GCLatencyMode> 列挙します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.Runtime.GCSettings.LatencyMode" /> プロパティが無効な値に設定されています。  
  
 または  
  
 <see cref="P:System.Runtime.GCSettings.LatencyMode" /> プロパティを <see cref="F:System.Runtime.GCLatencyMode.NoGCRegion" /> に設定することはできません。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
  </Members>
</Type>