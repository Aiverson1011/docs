<Type Name="GlyphRun" FullName="System.Windows.Media.GlyphRun">
  <TypeSignature Language="C#" Value="public class GlyphRun : System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GlyphRun extends System.Object implements class System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.GlyphRun" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>1 つのフォントを使用している 1 つの大きさで、1 つの描画スタイルの 1 つの面から一連のグリフを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Media.GlyphRun> オブジェクトには、グリフのインデックスと個々 のグリフの位置など、フォントの詳細が含まれています。 さらに、 <xref:System.Windows.Media.GlyphRun> オブジェクトには、実行が生成された元の Unicode コード ポイントが含まれています、文字グリフへのバッファー オフセット マッピングの情報、および文字単位とグリフのフラグ。  
  
 <xref:System.Windows.Documents.Glyphs> 要素の出力を表す、 <xref:System.Windows.Media.GlyphRun> XAML でします。 次のマークアップ構文を説明するため、 <xref:System.Windows.Documents.Glyphs> 要素。  
  
 [!code-xml[GlyphsOvwSamp1\#1](~/samples/snippets/csharp/VS_Snippets_Wpf/GlyphsOvwSamp1/CS/default.xaml#1)]
 [!code-xml[GlyphsOvwSamp1\#1](~/samples/snippets/xaml/VS_Snippets_Wpf/GlyphsOvwSamp1/XAML/default.xaml#1)]  
  
 各グリフ指定は、その他のメトリックを定義する <xref:System.Windows.Documents.Glyphs>です。 次の図では、2 文字の種類のグリフの印刷用のさまざまな特性を定義します。  
  
 936697f3-fda7-4655-acb8-e58427aca1e1  
2 つの種類のグリフの文字のさまざまな文字体裁特性  
  
<a name="xamlTextUsage_GlyphRun"></a>   
## XAML テキストの使用方法  
   
  
## 例  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GlyphRun ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.GlyphRun.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use the PixelsPerDip override", false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Media.GlyphRun" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GlyphRun (float pixelsPerDip);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float32 pixelsPerDip) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.GlyphRun.#ctor(System.Single)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pixelsPerDip" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pixelsPerDip">スケール ファクターに相当する、ピクセル密度に依存しないピクセルごとの値。 たとえば、画面の DPI が 120 \(または 120\/96 \= 1.25 のため 1.25\) の場合は、ピクセル密度に依存しない 1.25 ピクセルが描画されます。 DIP は、デバイスの解像度と DPI に依存しないように WPF が使用する測定単位です。</param>
        <summary>
          <see cref="T:System.Windows.Media.GlyphRun" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GlyphRun (System.Windows.Media.GlyphTypeface glyphTypeface, int bidiLevel, bool isSideways, double renderingEmSize, System.Collections.Generic.IList&lt;ushort&gt; glyphIndices, System.Windows.Point baselineOrigin, System.Collections.Generic.IList&lt;double&gt; advanceWidths, System.Collections.Generic.IList&lt;System.Windows.Point&gt; glyphOffsets, System.Collections.Generic.IList&lt;char&gt; characters, string deviceFontName, System.Collections.Generic.IList&lt;ushort&gt; clusterMap, System.Collections.Generic.IList&lt;bool&gt; caretStops, System.Windows.Markup.XmlLanguage language);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Media.GlyphTypeface glyphTypeface, int32 bidiLevel, bool isSideways, float64 renderingEmSize, class System.Collections.Generic.IList`1&lt;unsigned int16&gt; glyphIndices, valuetype System.Windows.Point baselineOrigin, class System.Collections.Generic.IList`1&lt;float64&gt; advanceWidths, class System.Collections.Generic.IList`1&lt;valuetype System.Windows.Point&gt; glyphOffsets, class System.Collections.Generic.IList`1&lt;char&gt; characters, string deviceFontName, class System.Collections.Generic.IList`1&lt;unsigned int16&gt; clusterMap, class System.Collections.Generic.IList`1&lt;bool&gt; caretStops, class System.Windows.Markup.XmlLanguage language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.GlyphRun.#ctor(System.Windows.Media.GlyphTypeface,System.Int32,System.Boolean,System.Double,System.Collections.Generic.IList{System.UInt16},System.Windows.Point,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Windows.Point},System.Collections.Generic.IList{System.Char},System.String,System.Collections.Generic.IList{System.UInt16},System.Collections.Generic.IList{System.Boolean},System.Windows.Markup.XmlLanguage)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use the PixelsPerDip override", false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="glyphTypeface" Type="System.Windows.Media.GlyphTypeface" />
        <Parameter Name="bidiLevel" Type="System.Int32" />
        <Parameter Name="isSideways" Type="System.Boolean" />
        <Parameter Name="renderingEmSize" Type="System.Double" />
        <Parameter Name="glyphIndices" Type="System.Collections.Generic.IList&lt;System.UInt16&gt;" />
        <Parameter Name="baselineOrigin" Type="System.Windows.Point" />
        <Parameter Name="advanceWidths" Type="System.Collections.Generic.IList&lt;System.Double&gt;" />
        <Parameter Name="glyphOffsets" Type="System.Collections.Generic.IList&lt;System.Windows.Point&gt;" />
        <Parameter Name="characters" Type="System.Collections.Generic.IList&lt;System.Char&gt;" />
        <Parameter Name="deviceFontName" Type="System.String" />
        <Parameter Name="clusterMap" Type="System.Collections.Generic.IList&lt;System.UInt16&gt;" />
        <Parameter Name="caretStops" Type="System.Collections.Generic.IList&lt;System.Boolean&gt;" />
        <Parameter Name="language" Type="System.Windows.Markup.XmlLanguage" />
      </Parameters>
      <Docs>
        <param name="glyphTypeface">
          <see cref="T:System.Windows.Media.GlyphTypeface" /> 型の値。</param>
        <param name="bidiLevel">
          <see cref="T:System.Int32" /> 型の値。</param>
        <param name="isSideways">
          <see cref="T:System.Boolean" /> 型の値。</param>
        <param name="renderingEmSize">
          <see cref="T:System.Double" /> 型の値。</param>
        <param name="glyphIndices">
          <see cref="T:System.Collections.Generic.IList`1" /> 型の配列。</param>
        <param name="baselineOrigin">
          <see cref="T:System.Windows.Point" /> 型の値。</param>
        <param name="advanceWidths">
          <see cref="T:System.Collections.Generic.IList`1" /> 型の配列。</param>
        <param name="glyphOffsets">
          <see cref="T:System.Collections.Generic.IList`1" /> 型の配列。</param>
        <param name="characters">
          <see cref="T:System.Collections.Generic.IList`1" /> 型の配列。</param>
        <param name="deviceFontName">
          <see cref="T:System.String" /> 型の値。</param>
        <param name="clusterMap">
          <see cref="T:System.Collections.Generic.IList`1" /> 型の配列。</param>
        <param name="caretStops">
          <see cref="T:System.Collections.Generic.IList`1" /> 型の配列。</param>
        <param name="language">
          <see cref="T:System.Windows.Markup.XmlLanguage" /> 型の値。</param>
        <summary>指定したクラスのプロパティを使用して、<see cref="T:System.Windows.Media.GlyphRun" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GlyphRun (System.Windows.Media.GlyphTypeface glyphTypeface, int bidiLevel, bool isSideways, double renderingEmSize, float pixelsPerDip, System.Collections.Generic.IList&lt;ushort&gt; glyphIndices, System.Windows.Point baselineOrigin, System.Collections.Generic.IList&lt;double&gt; advanceWidths, System.Collections.Generic.IList&lt;System.Windows.Point&gt; glyphOffsets, System.Collections.Generic.IList&lt;char&gt; characters, string deviceFontName, System.Collections.Generic.IList&lt;ushort&gt; clusterMap, System.Collections.Generic.IList&lt;bool&gt; caretStops, System.Windows.Markup.XmlLanguage language);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Media.GlyphTypeface glyphTypeface, int32 bidiLevel, bool isSideways, float64 renderingEmSize, float32 pixelsPerDip, class System.Collections.Generic.IList`1&lt;unsigned int16&gt; glyphIndices, valuetype System.Windows.Point baselineOrigin, class System.Collections.Generic.IList`1&lt;float64&gt; advanceWidths, class System.Collections.Generic.IList`1&lt;valuetype System.Windows.Point&gt; glyphOffsets, class System.Collections.Generic.IList`1&lt;char&gt; characters, string deviceFontName, class System.Collections.Generic.IList`1&lt;unsigned int16&gt; clusterMap, class System.Collections.Generic.IList`1&lt;bool&gt; caretStops, class System.Windows.Markup.XmlLanguage language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.GlyphRun.#ctor(System.Windows.Media.GlyphTypeface,System.Int32,System.Boolean,System.Double,System.Single,System.Collections.Generic.IList{System.UInt16},System.Windows.Point,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Windows.Point},System.Collections.Generic.IList{System.Char},System.String,System.Collections.Generic.IList{System.UInt16},System.Collections.Generic.IList{System.Boolean},System.Windows.Markup.XmlLanguage)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="glyphTypeface" Type="System.Windows.Media.GlyphTypeface" />
        <Parameter Name="bidiLevel" Type="System.Int32" />
        <Parameter Name="isSideways" Type="System.Boolean" />
        <Parameter Name="renderingEmSize" Type="System.Double" />
        <Parameter Name="pixelsPerDip" Type="System.Single" />
        <Parameter Name="glyphIndices" Type="System.Collections.Generic.IList&lt;System.UInt16&gt;" />
        <Parameter Name="baselineOrigin" Type="System.Windows.Point" />
        <Parameter Name="advanceWidths" Type="System.Collections.Generic.IList&lt;System.Double&gt;" />
        <Parameter Name="glyphOffsets" Type="System.Collections.Generic.IList&lt;System.Windows.Point&gt;" />
        <Parameter Name="characters" Type="System.Collections.Generic.IList&lt;System.Char&gt;" />
        <Parameter Name="deviceFontName" Type="System.String" />
        <Parameter Name="clusterMap" Type="System.Collections.Generic.IList&lt;System.UInt16&gt;" />
        <Parameter Name="caretStops" Type="System.Collections.Generic.IList&lt;System.Boolean&gt;" />
        <Parameter Name="language" Type="System.Windows.Markup.XmlLanguage" />
      </Parameters>
      <Docs>
        <param name="glyphTypeface">
          <see cref="T:System.Windows.Media.GlyphTypeface" /> 型の値。</param>
        <param name="bidiLevel">
          <see cref="T:System.Int32" /> 型の値。</param>
        <param name="isSideways">
          <see cref="T:System.Boolean" /> 型の値。</param>
        <param name="renderingEmSize">
          <see cref="T:System.Double" /> 型の値。</param>
        <param name="pixelsPerDip">
          <see cref="T:System.Double" /> 型の値。</param>
        <param name="glyphIndices">
          <see cref="T:System.Collections.Generic.IList`1" /> 型の配列。</param>
        <param name="baselineOrigin">
          <see cref="T:System.Windows.Point" /> 型の値。</param>
        <param name="advanceWidths">
          <see cref="T:System.Collections.Generic.IList`1" /> 型の配列。</param>
        <param name="glyphOffsets">
          <see cref="T:System.Collections.Generic.IList`1" /> 型の配列。</param>
        <param name="characters">
          <see cref="T:System.Collections.Generic.IList`1" /> 型の配列。</param>
        <param name="deviceFontName">
          <see cref="T:System.String" /> 型の値。</param>
        <param name="clusterMap">
          <see cref="T:System.Collections.Generic.IList`1" /> 型の配列。</param>
        <param name="caretStops">
          <see cref="T:System.Collections.Generic.IList`1" /> 型の配列。</param>
        <param name="language">
          <see cref="T:System.Windows.Markup.XmlLanguage" /> 型の値。</param>
        <summary>指定したクラスのプロパティを使用して、<see cref="T:System.Windows.Media.GlyphRun" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdvanceWidths">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;double&gt; AdvanceWidths { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;float64&gt; AdvanceWidths" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.GlyphRun.AdvanceWidths" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Media.Converters.DoubleIListConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>グリフ インデックスに対応するアドバンス幅を表す <see cref="T:System.Double" /> 値の一覧を取得または設定します。</summary>
        <value>アドバンス幅を表す <see cref="T:System.Double" /> 値の一覧。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アドバンス幅のリストの各項目は、によって返されるグリフの値に対応しています、<xref:System.Windows.Media.GlyphRun.GlyphIndices%2A>プロパティです。 N の原点<sup>th</sup>実行でのグリフ \(n \> 0\) 元であり、標準の n\-1<sup>th</sup>グリフに加えて、n\-1<sup>th</sup>アドバンス幅アドバンス ベクターに沿った追加します。 基本グリフ一般的にがありますが、0 以外のアドバンス幅、結合グリフ通常アドバンス幅が 0 です。  
  
<a name="xamlTextUsage_AdvanceWidths"></a>   
## XAML テキストの使用方法  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaselineOrigin">
      <MemberSignature Language="C#" Value="public System.Windows.Point BaselineOrigin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point BaselineOrigin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.GlyphRun.BaselineOrigin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定のベースライン原点、 <see cref="T:System.Windows.Media.GlyphRun" />です。</summary>
        <value>A <see cref="T:System.Windows.Point" /> ベースライン原点を表す値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
<a name="xamlTextUsage_BaselineOrigin"></a>   
## XAML テキストの使用方法  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BidiLevel">
      <MemberSignature Language="C#" Value="public int BidiLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BidiLevel" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.GlyphRun.BidiLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定の双方向の入れ子レベル、 <see cref="T:System.Windows.Media.GlyphRun" />です。</summary>
        <value>
          <see cref="T:System.Int32" /> を双方向の入れ子レベルを表す値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
<a name="xamlTextUsage_BidiLevel"></a>   
## XAML テキストの使用方法  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BuildGeometry">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Geometry BuildGeometry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Media.Geometry BuildGeometry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.GlyphRun.BuildGeometry" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得、 <see cref="T:System.Windows.Media.Geometry" /> の <see cref="T:System.Windows.Media.GlyphRun" />です。</summary>
        <returns>
          <see cref="T:System.Windows.Media.Geometry" /> に対応する、 <see cref="T:System.Windows.Media.GlyphRun" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Media.Geometry> 返される内のすべてのグリフの結合したジオメトリを含む、 <xref:System.Windows.Media.GlyphRun>です。 ブール値の和集合演算を実行することによって、重複する輪郭がマージされます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaretStops">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;bool&gt; CaretStops { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;bool&gt; CaretStops" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.GlyphRun.CaretStops" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Media.Converters.BoolIListConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Media.GlyphRun" /> を表す Unicode で UTF16 コード ポイント毎にキャレット ストップがあるかどうかを決定する <see cref="T:System.Boolean" /> 値の一覧を取得または設定します。</summary>
        <value>キャレット ストップがあるかどうかを表す <see cref="T:System.Boolean" /> 値の一覧。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 戻り値は`null`Unicode 表現で UTF16 コード ポイントごとにキャレット停止がある場合、<xref:System.Windows.Media.GlyphRun>です。  
  
<a name="xamlTextUsage_CaretStops"></a>   
## XAML テキストの使用方法  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Characters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;char&gt; Characters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;char&gt; Characters" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.GlyphRun.Characters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Media.Converters.CharIListConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Media.GlyphRun" /> の Unicode を表す UTF16 コード ポイントの一覧を取得または設定します。</summary>
        <value>Unicode コンテンツを表す <see cref="T:System.Char" /> 値の一覧。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
<a name="xamlTextUsage_Characters"></a>   
## XAML テキストの使用方法  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClusterMap">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;ushort&gt; ClusterMap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;unsigned int16&gt; ClusterMap" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.GlyphRun.ClusterMap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Media.Converters.UShortIListConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.UInt16&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Media.GlyphRun" /> の文字をグリフ インデックスにマップする <see cref="T:System.UInt16" /> 値の一覧を取得または設定します。</summary>
        <value>マップされたグリフ インデックスを表す <see cref="T:System.UInt16" /> 値の一覧。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一覧で、文字ごとに 1 つのエントリがあります。 リスト内の各値は、によって表される、最初のグリフのオフセット<xref:System.Windows.Media.GlyphRun.GlyphIndices%2A>、によって表される、対応する文字<xref:System.Windows.Media.GlyphRun.Characters%2A>です。  
  
 複数の文字が 1 つのグリフにマップまたはマップに正確に個々 の文字に分解することはできません、グリフ グループにすべての文字のエントリが同じ値を持つ位置: この文字のグループを表す最初のグリフのオフセット。  
  
 リストが場合`null`か等しい<xref:System.String.Empty>、シーケンシャルな 1 対 1 のマッピングが想定されます。  
  
<a name="xamlTextUsage_ClusterMap"></a>   
## XAML テキストの使用方法  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComputeAlignmentBox">
      <MemberSignature Language="C#" Value="public System.Windows.Rect ComputeAlignmentBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Rect ComputeAlignmentBox() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.GlyphRun.ComputeAlignmentBox" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>配置\] ボックスの取得、 <see cref="T:System.Windows.Media.GlyphRun" />です。</summary>
        <returns>A <see cref="T:System.Windows.Rect" /> の枠を表す、 <see cref="T:System.Windows.Media.GlyphRun" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 返された <xref:System.Windows.Rect> の原点に対する、 <xref:System.Windows.Media.GlyphRun>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComputeInkBoundingBox">
      <MemberSignature Language="C#" Value="public System.Windows.Rect ComputeInkBoundingBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Rect ComputeInkBoundingBox() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.GlyphRun.ComputeInkBoundingBox" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>境界ボックスのインクの取得、 <see cref="T:System.Windows.Media.GlyphRun" />です。</summary>
        <returns>A <see cref="T:System.Windows.Rect" /> 境界ボックスのインクを表す、 <see cref="T:System.Windows.Media.GlyphRun" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 返された <xref:System.Windows.Rect> の原点に対する、 <xref:System.Windows.Media.GlyphRun>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeviceFontName">
      <MemberSignature Language="C#" Value="public string DeviceFontName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DeviceFontName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.GlyphRun.DeviceFontName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはを特定のデバイス フォントを設定、 <see cref="T:System.Windows.Media.GlyphRun" /> 最適化されています。</summary>
        <value>A <see cref="T:System.String" /> デバイス フォントを表す値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、 <xref:System.Windows.Media.GlyphRun> で名前付きデバイス フォントの組み込みサポートがあるデバイスが表示される、 <xref:System.Windows.Media.GlyphRun> そのフォントを選択して、グリフのインデックスではなく、Unicode コード ポイントに送信することによって、デバイス固有のメカニズムを使用してレンダリングする必要があります。 名前付きデバイス フォントの組み込みサポートを含まないデバイス上に表示するときに <xref:System.Windows.Media.GlyphRun.DeviceFontName%2A> を無視するか。  
  
<a name="xamlTextUsage_DeviceFontName"></a>   
## XAML テキストの使用方法  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FontRenderingEmSize">
      <MemberSignature Language="C#" Value="public double FontRenderingEmSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 FontRenderingEmSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.GlyphRun.FontRenderingEmSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または表示に使用する em サイズを設定、 <see cref="T:System.Windows.Media.GlyphRun" />です。</summary>
        <value>A <see cref="T:System.Double" /> 表示に使用する em サイズを表す値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
<a name="xamlTextUsage_FontRenderingEmSize"></a>   
## XAML テキストの使用方法  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCaretCharacterHitFromDistance">
      <MemberSignature Language="C#" Value="public System.Windows.Media.TextFormatting.CharacterHit GetCaretCharacterHitFromDistance (double distance, out bool isInside);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Media.TextFormatting.CharacterHit GetCaretCharacterHitFromDistance(float64 distance, bool isInside) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.GlyphRun.GetCaretCharacterHitFromDistance(System.Double,System.Boolean@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.TextFormatting.CharacterHit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="distance" Type="System.Double" />
        <Parameter Name="isInside" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="distance">キャレット文字ヒットを計算するために使用するオフセット。</param>
        <param name="isInside">文字ヒットが内かどうかを <see cref="T:System.Windows.Media.GlyphRun" />です。</param>
        <summary>取得、 <see cref="T:System.Windows.Media.TextFormatting.CharacterHit" /> のキャレットの文字ヒットを表す値、 <see cref="T:System.Windows.Media.GlyphRun" />です。</summary>
        <returns>A <see cref="T:System.Windows.Media.TextFormatting.CharacterHit" /> 文字を表す値がヒットする一番近くにある、 <paramref name="distance" /> 値。 Out パラメーター <paramref name="isInside" /> 返します <see langword="true" /> 文字ヒットが内側にある場合、 <see cref="T:System.Windows.Media.GlyphRun" />。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `distance` のリーディング エッジからのオフセットを示す、 <xref:System.Windows.Media.GlyphRun>です。  
  
 ヒットが外側にある場合、 <xref:System.Windows.Media.GlyphRun>, 、文字ヒットは、最も近いキャレット文字以内で氷雨を表す、 <xref:System.Windows.Media.GlyphRun>です。  
  
 <xref:System.Windows.Media.TextFormatting.CharacterHit> 構造が以内で氷雨文字に関する情報を表す、 <xref:System.Windows.Media.GlyphRun>— ヒットだけをリードやトレーリング エッジに関する情報が最初の文字のインデックス。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDistanceFromCaretCharacterHit">
      <MemberSignature Language="C#" Value="public double GetDistanceFromCaretCharacterHit (System.Windows.Media.TextFormatting.CharacterHit characterHit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 GetDistanceFromCaretCharacterHit(valuetype System.Windows.Media.TextFormatting.CharacterHit characterHit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.GlyphRun.GetDistanceFromCaretCharacterHit(System.Windows.Media.TextFormatting.CharacterHit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="characterHit" Type="System.Windows.Media.TextFormatting.CharacterHit" />
      </Parameters>
      <Docs>
        <param name="characterHit">
          <see cref="T:System.Windows.Media.TextFormatting.CharacterHit" /> オフセットを計算に使用します。</param>
        <summary>リーディング エッジからのオフセットを取得、 <see cref="T:System.Windows.Media.GlyphRun" /> 先頭または指定した文字を含んでいるキャレット位置の末端にヒットします。</summary>
        <returns>A <see cref="T:System.Double" /> のリーディング エッジからのオフセットを表す、 <see cref="T:System.Windows.Media.GlyphRun" /> 、トップ レベルの文字を含むキャレット位置の末端にヒットします。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Windows.Media.GlyphRun> はヒットしませんテスト可能な 0.0 の距離が返されます。 使用して、 <xref:System.Windows.Media.GlyphRun.IsHitTestable%2A> プロパティかどうかを <xref:System.Windows.Media.GlyphRun> ヒット テストすることができます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">文字ヒットがで指定された範囲から外れて、 <see cref="T:System.Windows.Media.GlyphRun" /> Unicode 文字列。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetNextCaretCharacterHit">
      <MemberSignature Language="C#" Value="public System.Windows.Media.TextFormatting.CharacterHit GetNextCaretCharacterHit (System.Windows.Media.TextFormatting.CharacterHit characterHit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Media.TextFormatting.CharacterHit GetNextCaretCharacterHit(valuetype System.Windows.Media.TextFormatting.CharacterHit characterHit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.GlyphRun.GetNextCaretCharacterHit(System.Windows.Media.TextFormatting.CharacterHit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.TextFormatting.CharacterHit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="characterHit" Type="System.Windows.Media.TextFormatting.CharacterHit" />
      </Parameters>
      <Docs>
        <param name="characterHit">
          <see cref="T:System.Windows.Media.TextFormatting.CharacterHit" /> 次ヒット値を計算に使用します。</param>
        <summary>次の有効なキャレット文字で論理方向でヒットを取得、 <see cref="T:System.Windows.Media.GlyphRun" />です。</summary>
        <returns>A <see cref="T:System.Windows.Media.TextFormatting.CharacterHit" /> を表す次の有効なキャレット文字論理方向にヒットします。 戻り値に等しい場合 <paramref name="characterHit" />, 、さらにナビゲーションのではありません、 <see cref="T:System.Windows.Media.GlyphRun" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 以前の有効なキャレット文字ヒットを取得するには使用 <xref:System.Windows.Media.GlyphRun.GetPreviousCaretCharacterHit%2A>します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPreviousCaretCharacterHit">
      <MemberSignature Language="C#" Value="public System.Windows.Media.TextFormatting.CharacterHit GetPreviousCaretCharacterHit (System.Windows.Media.TextFormatting.CharacterHit characterHit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Media.TextFormatting.CharacterHit GetPreviousCaretCharacterHit(valuetype System.Windows.Media.TextFormatting.CharacterHit characterHit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.GlyphRun.GetPreviousCaretCharacterHit(System.Windows.Media.TextFormatting.CharacterHit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.TextFormatting.CharacterHit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="characterHit" Type="System.Windows.Media.TextFormatting.CharacterHit" />
      </Parameters>
      <Docs>
        <param name="characterHit">
          <see cref="T:System.Windows.Media.TextFormatting.CharacterHit" /> 前の計算に使用する値をヒットします。</param>
        <summary>前の有効なキャレット文字で論理方向でヒットを取得、 <see cref="T:System.Windows.Media.GlyphRun" />です。</summary>
        <returns>A <see cref="T:System.Windows.Media.TextFormatting.CharacterHit" /> を表す、前の有効なキャレット文字論理方向にヒットします。 戻り値に等しい場合 <paramref name="characterHit" />, 、さらにナビゲーションのではありません、 <see cref="T:System.Windows.Media.GlyphRun" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 次の有効なキャレット文字ヒットを取得するには使用 <xref:System.Windows.Media.GlyphRun.GetNextCaretCharacterHit%2A>します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlyphIndices">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;ushort&gt; GlyphIndices { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;unsigned int16&gt; GlyphIndices" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.GlyphRun.GlyphIndices" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Media.Converters.UShortIListConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.UInt16&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定の配列 <see cref="T:System.UInt16" /> レンダリングの物理的なフォントのグリフのインデックスを表す値。</summary>
        <value>一連の <see cref="T:System.UInt16" /> グリフのインデックスを表す値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 グリフのインデックスの既定値は、内部のテキストに対応する Unicode コード ポイントのフォントの文字マップ テーブルによって定義されます。  
  
<a name="xamlTextUsage_GlyphIndices"></a>   
## XAML テキストの使用方法  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlyphOffsets">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Windows.Point&gt; GlyphOffsets { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;valuetype System.Windows.Point&gt; GlyphOffsets" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.GlyphRun.GlyphOffsets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Media.Converters.PointIListConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Windows.Point&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Media.GlyphRun" /> のグリフのオフセットを表す <see cref="T:System.Windows.Point" /> 値の配列を取得または設定します。</summary>
        <value>グリフのオフセットを表す <see cref="T:System.Windows.Point" /> 値の一覧。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 グリフのオフセット値は、グリフの最終的な配信元を生成する標準のグリフの原点に追加されます。<xref:System.Windows.Media.GlyphRun.AdvanceWidths%2A>プロパティがの標準グリフ元のドメインの値を表す、<xref:System.Windows.Media.GlyphRun>です。  
  
 基本グリフが、通常のグリフ オフセットを持って \(0, 0\)、結合グリフが一般に、最も近い上記の上に正しく配置する、オフセットを持ってベース グリフします。  
  
<a name="xamlTextUsage_GlyphOffsets"></a>   
## XAML テキストの使用方法  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlyphTypeface">
      <MemberSignature Language="C#" Value="public System.Windows.Media.GlyphTypeface GlyphTypeface { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.GlyphTypeface GlyphTypeface" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.GlyphRun.GlyphTypeface" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.GlyphTypeface</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Media.GlyphTypeface" /> の <see cref="T:System.Windows.Media.GlyphRun" /> を取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Media.GlyphTypeface" /> の <see cref="T:System.Windows.Media.GlyphRun" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
<a name="xamlTextUsage_GlyphTypeface"></a>   
## XAML テキストの使用方法  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHitTestable">
      <MemberSignature Language="C#" Value="public bool IsHitTestable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHitTestable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.GlyphRun.IsHitTestable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>内では有効なキャレット文字ヒットがあるかどうかを示す値を取得、 <see cref="T:System.Windows.Media.GlyphRun" />です。</summary>
        <value>
          <see langword="true" /> 有効なキャレット文字ヒットがある場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSideways">
      <MemberSignature Language="C#" Value="public bool IsSideways { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSideways" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.GlyphRun.IsSideways" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはグリフを回転するかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" /> 場合は、グリフが回転します。それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 <xref:System.Windows.Media.GlyphRun.IsSideways%2A> は `true`, 、テキストの文字を構成するグリフが垂直方向のベースライン測定値の配置を使用して、反時計回りに 90 度が回転します。  
  
<a name="xamlTextUsage_IsSideways"></a>   
## XAML テキストの使用方法  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public System.Windows.Markup.XmlLanguage Language { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Markup.XmlLanguage Language" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.GlyphRun.Language" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Markup.XmlLanguage" /> の <see cref="T:System.Windows.Media.GlyphRun" /> を取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Markup.XmlLanguage" /> の <see cref="T:System.Windows.Media.GlyphRun" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
<a name="xamlTextUsage_Language"></a>   
## XAML テキストの使用方法  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PixelsPerDip">
      <MemberSignature Language="C#" Value="public float PixelsPerDip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 PixelsPerDip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.GlyphRun.PixelsPerDip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>テキストを表示する PixelsPerDip を取得または設定します。</summary>
        <value>現在の <see cref="P:System.Windows.Media.GlyphRun.PixelsPerDip" /> 値。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.ISupportInitialize.BeginInit">
      <MemberSignature Language="C#" Value="void ISupportInitialize.BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.ISupportInitialize.BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.GlyphRun.System#ComponentModel#ISupportInitialize#BeginInit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="M:System.ComponentModel.ISupportInitialize.BeginInit" />」を参照してください。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.ISupportInitialize.EndInit">
      <MemberSignature Language="C#" Value="void ISupportInitialize.EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.ISupportInitialize.EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.GlyphRun.System#ComponentModel#ISupportInitialize#EndInit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="M:System.ComponentModel.ISupportInitialize.EndInit" />」を参照してください。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Media.GlyphRun" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>