<Type Name="StringReader" FullName="System.IO.StringReader">
  <TypeSignature Language="C#" Value="public class StringReader : System.IO.TextReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit StringReader extends System.IO.TextReader" />
  <TypeSignature Language="DocId" Value="T:System.IO.StringReader" />
  <AssemblyInfo>
    <AssemblyName>System.IO</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.TextReader</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>実装して、 <see cref="T:System.IO.TextReader" /> 文字列から読み取る。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.StringReader> 同期または非同期で文字列を読み取ることができます。 時点で、文字を読み取ることができます、 <xref:System.IO.StringReader.Read%2A> または <xref:System.IO.StringReader.ReadAsync%2A> メソッドを使用してでも、 <xref:System.IO.StringReader.ReadLine%2A> または <xref:System.IO.StringReader.ReadLineAsync%2A> メソッドと、文字列全体を使用して、 <xref:System.IO.StringReader.ReadToEnd%2A> または <xref:System.IO.StringReader.ReadToEndAsync%2A> メソッドです。  
  
> [!IMPORTANT]
>  この型は、 <xref:System.IDisposable> インターフェイスです。 型の使用が完了したらを直接または間接的にその破棄する必要があります。 型の直接 dispose を呼び出してその <xref:System.IDisposable.Dispose%2A> メソッドで、 `try`\/`catch` ブロックします。 直接ことのない破棄する場合など言語構成要素を使用して `using` \(c\#\) のまたは `Using` \(Visual Basic で\)。 詳細については、"を使用して、オブジェクトを実装して IDisposable"」セクションを参照してください、 <xref:System.IDisposable> インターフェイスに関するトピック。  
  
 次の表は、その他の一般的なまたは関連する I\/O タスクの例を示します。  
  
|目的|参照項目|  
|--------|----------|  
|テキスト ファイルを作成します。|[&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)|  
|テキスト ファイルに書き込みます。|[&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)|  
|テキスト ファイルから読み取ります。|[&#91;\<topic:\/\/cpconreadingtextfromfile\>&#93;](http://msdn.microsoft.com/ja-jp/ed180baa-dfc6-4c69-a725-46e87edafb27)|  
|ファイルにテキストを追加します。|[&#91;\<topic:\/\/cpconopeningappendingtologfile\>&#93;](http://msdn.microsoft.com/ja-jp/74423362-1721-49cb-aa0a-e04005f72a06)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  
|ファイルのサイズを取得します。|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  
|ファイルの属性を取得します。|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  
|ファイルの属性を設定します。|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  
|ファイルの存在を確認します。|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  
|バイナリ ファイルから読み取ります。|[&#91;\<topic:\/\/cpconReadingWritingToNewlyCreatedDataFile\>&#93;](http://msdn.microsoft.com/ja-jp/e209d949-31e8-44ea-8e38-87f9093f3093)|  
|バイナリ ファイルに書き込みます。|[&#91;\<topic:\/\/cpconReadingWritingToNewlyCreatedDataFile\>&#93;](http://msdn.microsoft.com/ja-jp/e209d949-31e8-44ea-8e38-87f9093f3093)|  
  
   
  
## 例  
 次の例では、文字列全体を非同期的に読み込む方法を示します。  
  
 [!code-csharp[System.IO.StringReader\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.stringreader/cs/example2.cs#2)]
 [!code-vb[System.IO.StringReader\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.stringreader/vb/example2.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.TextReader" />
    <altmember cref="T:System.IO.StringWriter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StringReader (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringReader.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">いる文字列、 <see cref="T:System.IO.StringReader" /> 初期化する必要があります。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.IO.StringReader" /> クラスを指定した文字列から読み取る。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 次の表は、その他の一般的なまたは関連する I\/O タスクの例を示します。  
  
|目的|参照項目|  
|--------|----------|  
|テキスト ファイルを作成します。|[&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)|  
|テキスト ファイルに書き込みます。|[&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)|  
|テキスト ファイルから読み取ります。|[&#91;\<topic:\/\/cpconreadingtextfromfile\>&#93;](http://msdn.microsoft.com/ja-jp/ed180baa-dfc6-4c69-a725-46e87edafb27)|  
|ファイルにテキストを追加します。|[&#91;\<topic:\/\/cpconopeningappendingtologfile\>&#93;](http://msdn.microsoft.com/ja-jp/74423362-1721-49cb-aa0a-e04005f72a06)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  
|ファイルのサイズを取得します。|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  
|ファイルの属性を取得します。|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  
|ファイルの属性を設定します。|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  
|ファイルの存在を確認します。|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  
|バイナリ ファイルから読み取ります。|[&#91;\<topic:\/\/cpconReadingWritingToNewlyCreatedDataFile\>&#93;](http://msdn.microsoft.com/ja-jp/e209d949-31e8-44ea-8e38-87f9093f3093)|  
|バイナリ ファイルに書き込みます。|[&#91;\<topic:\/\/cpconReadingWritingToNewlyCreatedDataFile\>&#93;](http://msdn.microsoft.com/ja-jp/e209d949-31e8-44ea-8e38-87f9093f3093)|  
  
   
  
## 例  
 このコード例が示されている例の一部は、 <xref:System.IO.StringReader> クラスです。  
  
 [!code-cpp[System.IO.StringReaderWriter\#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.StringReaderWriter/CPP/stringrw.cpp#2)]
 [!code-csharp[System.IO.StringReaderWriter\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StringReaderWriter/CS/stringrw.cs#2)]
 [!code-vb[System.IO.StringReaderWriter\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StringReaderWriter/VB/stringrw.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> パラメーターが <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringReader.Close" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.IO.StringReader" /> を閉じます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For an example of creating a file and writing text to a file, see [&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208). For an example of reading text from a file, see [&#91;\<topic:\/\/cpconreadingtextfromfile\>&#93;](http://msdn.microsoft.com/ja-jp/ed180baa-dfc6-4c69-a725-46e87edafb27). For an example of reading from and writing to a binary file, see [&#91;\<topic:\/\/cpconReadingWritingToNewlyCreatedDataFile\>&#93;](http://msdn.microsoft.com/ja-jp/e209d949-31e8-44ea-8e38-87f9093f3093).  
  
 This method overrides the <xref:System.IO.Stream.Close%2A?displayProperty=fullName> method.  
  
 This implementation of **languageKeyword tag is not supported!!!!**  
 calls the <xref:System.IO.StringReader.Dispose%2A> method passing a **languageKeyword tag is not supported!!!!**  
 value.  
  
 Flushing the stream will not flush its underlying encoder unless you explicitly call **languageKeyword tag is not supported!!!!**  
. Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to **languageKeyword tag is not supported!!!!**  
 means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state \(partial characters\) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.  
  
 Following a call to **languageKeyword tag is not supported!!!!**  
, other methods might throw an exception.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringReader.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.IO.StringReader" /> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 When the **parameterReference tag is not supported!!!!**  
 parameter is **languageKeyword tag is not supported!!!!**  
, this method releases all resources held by any managed objects that this <xref:System.IO.StringReader> references. This method invokes the **languageKeyword tag is not supported!!!!**  
 method of each referenced object.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.IO.StringReader.Dispose(System.Boolean)" /> can be called multiple times by other objects. When overriding <see cref="M:System.IO.StringReader.Dispose(System.Boolean)" />, be careful not to reference objects that have been previously disposed in an earlier call to <see cref="M:System.IO.StringReader.Dispose(System.Boolean)" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Peek">
      <MemberSignature Language="C#" Value="public override int Peek ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Peek() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringReader.Peek" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用可能な次の文字を返しますが、その文字は使用されません。</summary>
        <returns>読み取り、次の文字を表す整数、可能な文字がない場合は\-1、または、ストリーム シークをサポートしません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.StringReader.Peek%2A> メソッドは、ファイルまたは別のエラーの終了が発生したかどうかを確認するために整数値を返します。 これにより、ユーザーをまず確認かどうか、返される値は\-1 にキャストする前に、 <xref:System.Char> 型です。  
  
 このメソッドは、 <xref:System.IO.TextReader.Peek%2A?displayProperty=fullName> メソッドです。  
  
 現在の位置、 `StringReader` はこの操作によって変更されません。  
  
 次の表は、その他の一般的なまたは関連する I\/O タスクの例を示します。  
  
|目的|参照項目|  
|--------|----------|  
|テキスト ファイルを作成します。|[&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)|  
|テキスト ファイルに書き込みます。|[&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)|  
|テキスト ファイルから読み取ります。|[&#91;\<topic:\/\/cpconreadingtextfromfile\>&#93;](http://msdn.microsoft.com/ja-jp/ed180baa-dfc6-4c69-a725-46e87edafb27)|  
|ファイルのサイズを取得します。|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">現在のリーダーが閉じられます。</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringReader.Read" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>入力文字列から次の文字を読み取ってを 1 つの文字の文字の位置を進めます。</summary>
        <returns>基になる文字列または文字がない、利用可能な場合は、\-1 から次の文字。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、 <xref:System.IO.TextReader.Read%2A?displayProperty=fullName> メソッドです。  
  
 次の表は、その他の一般的なまたは関連する I\/O タスクの例を示します。  
  
|目的|参照項目|  
|--------|----------|  
|テキスト ファイルを作成します。|[&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)|  
|テキスト ファイルに書き込みます。|[&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)|  
|テキスト ファイルから読み取ります。|[&#91;\<topic:\/\/cpconreadingtextfromfile\>&#93;](http://msdn.microsoft.com/ja-jp/ed180baa-dfc6-4c69-a725-46e87edafb27)|  
|ファイルにテキストを追加します。|[&#91;\<topic:\/\/cpconopeningappendingtologfile\>&#93;](http://msdn.microsoft.com/ja-jp/74423362-1721-49cb-aa0a-e04005f72a06)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  
|ファイルのサイズを取得します。|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  
|ファイルの属性を取得します。|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  
|ファイルの属性を設定します。|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  
|ファイルの存在を確認します。|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  
|バイナリ ファイルから読み取ります。|[&#91;\<topic:\/\/cpconReadingWritingToNewlyCreatedDataFile\>&#93;](http://msdn.microsoft.com/ja-jp/e209d949-31e8-44ea-8e38-87f9093f3093)|  
|バイナリ ファイルに書き込みます。|[&#91;\<topic:\/\/cpconReadingWritingToNewlyCreatedDataFile\>&#93;](http://msdn.microsoft.com/ja-jp/e209d949-31e8-44ea-8e38-87f9093f3093)|  
  
   
  
## 例  
 このコード例が示されている例の一部は、 <xref:System.IO.StringReader> クラスです。  
  
 [!code-cpp[System.IO.StringReaderWriter\#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.StringReaderWriter/CPP/stringrw.cpp#3)]
 [!code-csharp[System.IO.StringReaderWriter\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StringReaderWriter/CS/stringrw.cs#3)]
 [!code-vb[System.IO.StringReaderWriter\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StringReaderWriter/VB/stringrw.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">現在のリーダーが閉じられます。</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringReader.Read(System.Char[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">このメソッドが戻るとき、指定した文字配列が含まれています。そのうち、<c>index</c> から \(<c>index</c> \+ <c>count</c> \- 1\) までの値が、現在のソースから読み取られた文字に置き換えられます。</param>
        <param name="index">バッファーの開始インデックス。</param>
        <param name="count">読み取る文字の数。</param>
        <summary>入力文字列から文字のブロックを読み取る文字の位置を進めますによって <paramref name="count" />します。</summary>
        <returns>バッファーに読み取られた合計文字数。 これは、操作によって、多くの文字が、現時点ではないか、読み取れなかった場合、基になる文字列の末尾に到達したことを要求した場合の文字数より小さくなることができます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは [Read メソッド \(Char\<xref:System.IO.TextReader.Read%2A?displayProperty=fullName>です。  
  
 このメソッドはまで読み取る `count` の文字、 [Read メソッド \(Char\<xref:System.IO.StringReader> に、 `buffer` 文字配列の位置以降にある `index`です。 実際の文字数は、読み取り、または文字列の末尾に達するし、文字が読み取られたことはない場合は 0 を返します。  
  
 次の表は、その他の一般的なまたは関連する I\/O タスクの例を示します。  
  
|目的|参照項目|  
|--------|----------|  
|テキスト ファイルを作成します。|[&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)|  
|テキスト ファイルに書き込みます。|[&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)|  
|テキスト ファイルから読み取ります。|[&#91;\<topic:\/\/cpconreadingtextfromfile\>&#93;](http://msdn.microsoft.com/ja-jp/ed180baa-dfc6-4c69-a725-46e87edafb27)|  
|ファイルにテキストを追加します。|[&#91;\<topic:\/\/cpconopeningappendingtologfile\>&#93;](http://msdn.microsoft.com/ja-jp/74423362-1721-49cb-aa0a-e04005f72a06)<br /><br /> [Read メソッド \(Char\<xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> [Read メソッド \(Char\<xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  
|ファイルのサイズを取得します。|[Read メソッド \(Char\<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  
|ファイルの属性を取得します。|[Read メソッド \(Char\<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  
|ファイルの属性を設定します。|[Read メソッド \(Char\<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  
|ファイルの存在を確認します。|[Read メソッド \(Char\<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  
|バイナリ ファイルから読み取ります。|[&#91;\<topic:\/\/cpconReadingWritingToNewlyCreatedDataFile\>&#93;](http://msdn.microsoft.com/ja-jp/e209d949-31e8-44ea-8e38-87f9093f3093)|  
|バイナリ ファイルに書き込みます。|[&#91;\<topic:\/\/cpconReadingWritingToNewlyCreatedDataFile\>&#93;](http://msdn.microsoft.com/ja-jp/e209d949-31e8-44ea-8e38-87f9093f3093)|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> または <paramref name="count" /> が負の値です。</exception>
        <exception cref="T:System.ObjectDisposedException">現在のリーダーが閉じられます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;int&gt; ReadAsync (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadAsync(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringReader.ReadAsync(System.Char[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">このメソッドが戻るとき、指定した文字配列が含まれています。そのうち、<c>index</c> から \(<c>index</c> \+ <c>count</c> \- 1\) までの値が、現在のソースから読み取られた文字に置き換えられます。</param>
        <param name="index">書き込みを開始する <c>buffer</c> 内の位置。</param>
        <param name="count">読み取り対象の最大文字数。 かどうかは、文字列の末尾に指定された文字数をバッファーに書き込む前に達すると、メソッドを返します。</param>
        <summary>現在の文字列から文字の場合は、指定した最大数を非同期的に読み取りし、バッファーの指定したインデックス位置にデータを書き込みます。</summary>
        <returns>非同期の読み取り操作を表すタスク。<paramref name="TResult" /> パラメーターの値には、バッファーに読み込まれるバイトの合計数が含まれます。 結果値には、現在使用できるバイト数が要求した数より小さいかどうか、または文字列の末尾に到達した場合は 0 \(ゼロ\) なりますに要求したバイト数よりも小さい値を指定できます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定された文字数のいずれかの後に完了するタスク、 `count` パラメーターが読み取りまたは文字列の末尾に到達します。  
  
   
  
## 例  
 次の例では、文字列の最初の 23 文字を非同期的に読み込む方法を示します。  
  
 [!code-csharp[System.IO.StringReader\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.stringreader/cs/example1.cs#1)]
 [!code-vb[System.IO.StringReader\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.stringreader/vb/example1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> または <paramref name="count" /> が負の値です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> と <paramref name="count" /> の合計が、バッファーの長さよりも大きくなっています。</exception>
        <exception cref="T:System.ObjectDisposedException">文字列のリーダーが破棄されています。</exception>
        <exception cref="T:System.InvalidOperationException">リーダーは、前の読み取り操作によって現在使用されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadBlockAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;int&gt; ReadBlockAsync (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadBlockAsync(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">このメソッドが戻るとき、指定した文字配列が含まれています。そのうち、<c>index</c> から \(<c>index</c> \+ <c>count</c> \- 1\) までの値が、現在のソースから読み取られた文字に置き換えられます。</param>
        <param name="index">書き込みを開始する <c>buffer</c> 内の位置。</param>
        <param name="count">読み取り対象の最大文字数。 かどうかは、文字列の末尾に指定された文字数をバッファーに書き込む前に達すると、メソッドを返します。</param>
        <summary>現在の文字列から文字の場合は、指定した最大数を非同期的に読み取りし、バッファーの指定したインデックス位置にデータを書き込みます。</summary>
        <returns>非同期の読み取り操作を表すタスク。<paramref name="TResult" /> パラメーターの値には、バッファーに読み込まれるバイトの合計数が含まれます。 結果値には、現在使用できるバイト数が要求した数より小さいかどうか、または文字列の末尾に到達した場合は 0 \(ゼロ\) なりますに要求したバイト数よりも小さい値を指定できます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 タスクが完了しないまでで指定された文字数、 `count` パラメーターが読み取られる、または文字列の末尾に達しています。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> または <paramref name="count" /> が負の値です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> と <paramref name="count" /> の合計が、バッファーの長さよりも大きくなっています。</exception>
        <exception cref="T:System.ObjectDisposedException">文字列のリーダーが破棄されています。</exception>
        <exception cref="T:System.InvalidOperationException">リーダーは、前の読み取り操作によって現在使用されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadLine">
      <MemberSignature Language="C#" Value="public override string ReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringReader.ReadLine" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の文字列から文字の行を読み取り、文字列としてデータを返します。</summary>
        <returns>現在の文字列の次の行または <see langword="null" /> 文字列の末尾に到達するとします。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、 <xref:System.IO.TextReader.ReadLine%2A?displayProperty=fullName> メソッドです。  
  
 行は、一連の文字とライン フィード \("\\n"\)、キャリッジ リターン \("\\r"\) またはキャリッジ リターンとライン フィード \("\\r\\n"\) として定義されます。 返される文字列は、終端のキャリッジ リターン、改行は含まれません。 返される値は `null` 文字列の末尾に到達した場合。  
  
 現在のメソッドがスローされた場合、 <xref:System.OutOfMemoryException>, 、基になる文字列で、リーダーの位置が文字を読み取るには、メソッドができましたが、内部に既に読み取られた文字の数で高度な <xref:System.IO.StringReader.ReadLine%2A> バッファーは破棄されます。 既に読み取られた文字が回復可能なされないこと、および再初期化によってのみアクセスできる、文字列内のリーダーの位置を変更できないため、 <xref:System.IO.StringReader>です。 このような状況を避けるためを使用して、 <xref:System.IO.StringReader.Read%2A> 事前に割り当てられたバッファー内の文字を読み取りメソッドとストアです。  
  
 次の表は、その他の一般的なまたは関連する I\/O タスクの例を示します。  
  
|目的|参照項目|  
|--------|----------|  
|テキスト ファイルを作成します。|[&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)|  
|テキスト ファイルに書き込みます。|[&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)|  
|テキスト ファイルから読み取ります。|[&#91;\<topic:\/\/cpconreadingtextfromfile\>&#93;](http://msdn.microsoft.com/ja-jp/ed180baa-dfc6-4c69-a725-46e87edafb27)|  
|ファイルにテキストを追加します。|[&#91;\<topic:\/\/cpconopeningappendingtologfile\>&#93;](http://msdn.microsoft.com/ja-jp/74423362-1721-49cb-aa0a-e04005f72a06)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  
|ファイルのサイズを取得します。|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  
|ファイルの属性を取得します。|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  
|ファイルの属性を設定します。|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  
|ファイルの存在を確認します。|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  
|バイナリ ファイルから読み取ります。|[&#91;\<topic:\/\/cpconReadingWritingToNewlyCreatedDataFile\>&#93;](http://msdn.microsoft.com/ja-jp/e209d949-31e8-44ea-8e38-87f9093f3093)|  
|バイナリ ファイルに書き込みます。|[&#91;\<topic:\/\/cpconReadingWritingToNewlyCreatedDataFile\>&#93;](http://msdn.microsoft.com/ja-jp/e209d949-31e8-44ea-8e38-87f9093f3093)|  
  
   
  
## 例  
 このコード例が示されている例の一部は、 <xref:System.IO.StringReader> クラスです。  
  
 [!code-cpp[System.IO.StringReaderWriter\#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.StringReaderWriter/CPP/stringrw.cpp#2)]
 [!code-csharp[System.IO.StringReaderWriter\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StringReaderWriter/CS/stringrw.cs#2)]
 [!code-vb[System.IO.StringReaderWriter\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StringReaderWriter/VB/stringrw.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">現在のリーダーが閉じられます。</exception>
        <exception cref="T:System.OutOfMemoryException">返された文字列にバッファーを割り当てるには、メモリが不足しています。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadLineAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;string&gt; ReadLineAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; ReadLineAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringReader.ReadLineAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の文字列から文字の行を非同期的に読み取りし、データを文字列として返します。</summary>
        <returns>非同期の読み取り操作を表すタスク。 値、 <paramref name="TResult" /> パラメーター文字列リーダーの次の行が含まれていますかまたは <see langword="null" /> すべての文字が読み取られた場合です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、文字列から同時に非同期的に 1 行を読み取る方法を示します。  
  
 [!code-csharp[System.IO.StringReader\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.stringreader/cs/example3.cs#3)]
 [!code-vb[System.IO.StringReader\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.stringreader/vb/example3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">次の行に含まれる文字数が <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
        <exception cref="T:System.ObjectDisposedException">文字列のリーダーが破棄されています。</exception>
        <exception cref="T:System.InvalidOperationException">リーダーは、前の読み取り操作によって現在使用されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadToEnd">
      <MemberSignature Language="C#" Value="public override string ReadToEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ReadToEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringReader.ReadToEnd" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>文字列の末尾に、現在の位置からすべての文字を読み取り、1 つの文字列として返します。</summary>
        <returns>基になる文字列の末尾にコンテンツを現在の位置からです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、 <xref:System.IO.TextReader.ReadToEnd%2A?displayProperty=fullName> メソッドです。  
  
 現在のメソッドがスローされた場合、 <xref:System.OutOfMemoryException>, 、基になる文字列で、リーダーの位置が文字を読み取るには、メソッドができましたが、内部に既に読み取られた文字の数で高度な <xref:System.IO.StringReader.ReadToEnd%2A> バッファーは破棄されます。 既に読み取られた文字が回復可能なされないこと、および再初期化によってのみアクセスできる、文字列内のリーダーの位置を変更できないため、 <xref:System.IO.StringReader>です。 このような状況を避けるためを使用して、 <xref:System.IO.StringReader.Read%2A> 事前に割り当てられたバッファー内の文字を読み取りメソッドとストアです。  
  
 次の表は、その他の一般的なまたは関連する I\/O タスクの例を示します。  
  
|目的|参照項目|  
|--------|----------|  
|テキスト ファイルを作成します。|[&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)|  
|テキスト ファイルに書き込みます。|[&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)|  
|テキスト ファイルから読み取ります。|[&#91;\<topic:\/\/cpconreadingtextfromfile\>&#93;](http://msdn.microsoft.com/ja-jp/ed180baa-dfc6-4c69-a725-46e87edafb27)|  
|ファイルにテキストを追加します。|[&#91;\<topic:\/\/cpconopeningappendingtologfile\>&#93;](http://msdn.microsoft.com/ja-jp/74423362-1721-49cb-aa0a-e04005f72a06)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  
|ファイルのサイズを取得します。|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  
|ファイルの属性を取得します。|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  
|ファイルの属性を設定します。|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  
|ファイルの存在を確認します。|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  
|バイナリ ファイルから読み取ります。|[&#91;\<topic:\/\/cpconReadingWritingToNewlyCreatedDataFile\>&#93;](http://msdn.microsoft.com/ja-jp/e209d949-31e8-44ea-8e38-87f9093f3093)|  
|バイナリ ファイルに書き込みます。|[&#91;\<topic:\/\/cpconReadingWritingToNewlyCreatedDataFile\>&#93;](http://msdn.microsoft.com/ja-jp/e209d949-31e8-44ea-8e38-87f9093f3093)|  
  
   
  
## 例  
 このコード例が示されている例の一部は、 <xref:System.IO.TextReader> クラスです。  
  
 [!code-cpp[System.IO.TextReaderWriter\#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.TextReaderWriter/CPP/textrw.cpp#5)]
 [!code-csharp[System.IO.TextReaderWriter\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.TextReaderWriter/CS/textrw.cs#5)]
 [!code-vb[System.IO.TextReaderWriter\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.TextReaderWriter/VB/textrw.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">返された文字列にバッファーを割り当てるには、メモリが不足しています。</exception>
        <exception cref="T:System.ObjectDisposedException">現在のリーダーが閉じられます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadToEndAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;string&gt; ReadToEndAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; ReadToEndAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringReader.ReadToEndAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>文字列の末尾に現在の位置からのすべての文字を非同期的に読み取りし、1 つの文字列として返します。</summary>
        <returns>非同期の読み取り操作を表すタスク。 値、 <paramref name="TResult" /> パラメーターには、文字列の末尾には、現在の位置からの文字の文字列が含まれています。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、文字列全体を非同期的に読み込む方法を示します。  
  
 [!code-csharp[System.IO.StringReader\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.stringreader/cs/example2.cs#2)]
 [!code-vb[System.IO.StringReader\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.stringreader/vb/example2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">文字数が <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
        <exception cref="T:System.ObjectDisposedException">文字列のリーダーが破棄されています。</exception>
        <exception cref="T:System.InvalidOperationException">リーダーは、前の読み取り操作によって現在使用されています。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Read">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>入力文字列から、次の文字または次の文字セットを読み取ります。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>