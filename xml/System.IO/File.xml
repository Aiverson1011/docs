<Type Name="File" FullName="System.IO.File">
  <TypeSignature Language="C#" Value="public static class File" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit File extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.File" />
  <AssemblyInfo>
    <AssemblyName>System.IO.FileSystem</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>1 つのファイルの作成、コピー、削除、移動、オープンのための静的メソッドを提供し、<see cref="T:System.IO.FileStream" /> オブジェクトの作成を支援します。  
  
 この型の .NET Framework ソース コードを参照するを参照してください。、 [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/file.cs#1c7421e464f67b7e)します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  この型の .NET Framework ソース コードを参照してください、 [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/file.cs#1c7421e464f67b7e)します。 ソース コードをオンラインで参照、オフライン表示のリファレンスをダウンロードおよびデバッグ中にソース \(パッチや更新を含む\) をステップsee [instructions](http://referencesource.microsoft.com/).  
  
 使用して、 <xref:System.IO.File> コピー、移動、名前を変更する、作成、読み込み、削除、および、一度に 1 つのファイルへの追加などの一般的な操作のクラスです。 使用することも、 <xref:System.IO.File> クラスを取得およびファイル属性を設定または <xref:System.DateTime> 、作成に関連する情報にアクセスして、ファイルの書き込みです。 複数のファイルに対して操作を実行する場合は、「 <xref:System.IO.Directory.GetFiles%2A?displayProperty=fullName> または <xref:System.IO.DirectoryInfo.GetFiles%2A?displayProperty=fullName>です。  
  
 多くは、 <xref:System.IO.File> メソッドは、作成するかファイルを開く場合、その他の I\/O 型を返します。 使用して他の種類、ファイルをさらに操作します。 詳細については、特定の参照をして <xref:System.IO.File> などメンバー <xref:System.IO.File.OpenText%2A>, 、<xref:System.IO.File.CreateText%2A>, 、または <xref:System.IO.File.Create%2A>です。  
  
 すべて <xref:System.IO.File> メソッドは静的なを使用する方が効率的である可能性があります、 <xref:System.IO.File> 、対応するのではなく、メソッド <xref:System.IO.FileInfo> インスタンス メソッドの 1 つだけの操作を実行する場合。 すべて <xref:System.IO.File> メソッドが操作しているファイルへのパスを必要とします。  
  
 静的メソッド、 <xref:System.IO.File> クラスは、すべてのメソッドでセキュリティ チェックを実行します。 オブジェクトを何度も再利用しようとする場合は、対応するインスタンス メソッドを使用することを検討してください <xref:System.IO.FileInfo> 代わりに、セキュリティ チェックが常にではありませんが、必要があります。  
  
 既定では、新しいファイルへの完全な読み取り\/書き込みアクセスはすべてのユーザーに付与します。  
  
 次の表に、各種の動作をカスタマイズするために使用される列挙型の <xref:System.IO.File> メソッドです。  
  
|列挙|説明|  
|--------|--------|  
|<xref:System.IO.FileAccess>|読み取りおよび書き込みアクセスをファイルを指定します。|  
|<xref:System.IO.FileShare>|既に使用されているファイルに対するアクセス許可のレベルを指定します。|  
|<xref:System.IO.FileMode>|要求を既存のファイルを作成すると、例外を発生するかどうかと、既存のファイルの内容を保持または上書きするかどうかを指定します。|  
  
> [!NOTE]
>  入力文字列としてのパスを受け入れるメンバーの場合では、そのパスは、整形式である必要がありますか、例外が発生します。 たとえば、パスは完全修飾では、スペースで始まり場合、パスは、クラスのメソッドで切り捨てられません。 そのため、パスが正しくないと、例外が発生します。 同様に、パスまたはパスの組み合わせできません完全修飾されている 2 回クリックします。 たとえば、"c:\\temp c:\\windows"では、ほとんどの場合、例外も発生します。 パス文字列を受け取るメソッドを使用する場合、パスが整形式であることを確認します。  
  
 パスを受け入れるメンバーでは、パスがファイルまたはディレクトリを参照できます。 指定されたパスは相対パスまたはサーバーと共有名の汎用名前付け規則 \(UNC\) パスにも参照できます。 たとえば、許容可能なパスをすべての次に示します。  
  
-   C\# の場合、"c:\\\\MyDir\\\\MyFile.txt"または Visual Basic では、"c:\\MyDir\\MyFile.txt"します。  
  
-   C\# の場合、"c:\\\\MyDir"または Visual Basic では、"c:\\MyDir"します。  
  
-   "MyDir\\\\MySubdir"C\# の場合、または Visual Basic では、"MyDir\\MySubDir"にします。  
  
-   C\# の場合、"\\\\\\MyServer\\\\MyShare"または Visual Basic では、「\\\\MyServer\\MyShare」します。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.IO.File> クラスかどうか、ファイルが存在し、その結果に応じていずれかの新しいファイルを作成し、または既存のファイルを開くに対して読み取りし、書き込みことを確認します。 コードを実行する前に作成、 `c:\temp` フォルダーです。  
  
 [!code-cpp[File Class Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR/File Class Example/CPP/file class example.cpp#1)]
 [!code-csharp[File Class Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR/File Class Example/CS/file class example.cs#1)]
 [!code-vb[File Class Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File Class Example/VB/file class example.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.DriveInfo" />
    <altmember cref="T:System.IO.FileSystemWatcher" />
  </Docs>
  <Members>
    <Member MemberName="AppendAllLines">
      <MemberSignature Language="C#" Value="public static void AppendAllLines (string path, System.Collections.Generic.IEnumerable&lt;string&gt; contents);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AppendAllLines(string path, class System.Collections.Generic.IEnumerable`1&lt;string&gt; contents) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="contents" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="path">行を追加するファイル。 ファイルがまだ存在しない場合は作成されます。</param>
        <param name="contents">ファイルに追加する行。</param>
        <summary>ファイルに行を追加してから、そのファイルを閉じます。 指定したファイルが存在しない場合、このメソッドはファイルを作成し、指定した行をファイルに書き込んだ後、ファイルを閉じます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 メソッドは、存在しないが、新しいディレクトリを作成しない場合に、ファイルを作成します。 そのための値、 `path` パラメーターは、既存のディレクトリを含める必要があります。  
  
   
  
## 例  
 次の例では、選択した行をサンプル データ ファイルから、ファイルに書き込み、複数の行を追加します。 という名前のディレクトリ `temp` ドライブ C は、例が正常に完了するために存在する必要があります。  
  
 [!code-csharp[System.IO.File.WriteAllAppendAll\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.file.writeallappendall/cs/program.cs#1)]
 [!code-vb[System.IO.File.WriteAllAppendAll\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.file.writeallappendall/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さゼロの文字列で、空白のみが含まれるか、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドによって定義された 1 つ以上の無効な文字が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name=" path " /> または <paramref name="contents" /> のいずれかが <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="path" /> が有効ではありません \(たとえば、ディレクトリが存在しない、またはマップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="path" /> によって指定されたファイルが見つかりませんでした。</exception>
        <exception cref="T:System.IO.IOException">ファイルを開くときに、I\/O エラーが発生しました。</exception>
        <exception cref="T:System.IO.PathTooLongException">
          <paramref name="path" /> がシステムで定義されている最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元には、ファイルに対する書き込みアクセス許可がありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" /> は読み取り専用のファイルを指定します。  
  
 または  
  
 この操作は、現在のプラットフォームではサポートされていません。  
  
 または  
  
 <paramref name="path" /> はディレクトリです。</exception>
      </Docs>
    </Member>
    <Member MemberName="AppendAllLines">
      <MemberSignature Language="C#" Value="public static void AppendAllLines (string path, System.Collections.Generic.IEnumerable&lt;string&gt; contents, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AppendAllLines(string path, class System.Collections.Generic.IEnumerable`1&lt;string&gt; contents, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="contents" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="path">行を追加するファイル。 ファイルがまだ存在しない場合は作成されます。</param>
        <param name="contents">ファイルに追加する行。</param>
        <param name="encoding">使用する文字エンコーディング。</param>
        <summary>指定されたエンコーディングを使用してファイルに行を追加してから、そのファイルを閉じます。 指定したファイルが存在しない場合、このメソッドはファイルを作成し、指定した行をファイルに書き込んだ後、ファイルを閉じます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The method creates the file if it doesn’t exist, but it doesn't create new directories. Therefore, the value of the **parameterReference tag is not supported!!!!**  
 parameter must contain existing directories.  
  
 You can use this method to create a file that contains the following:  
  
-   The results of a [LINQ to Objects](http://msdn.microsoft.com/ja-jp/73cafe73-37cf-46e7-bfa7-97c7eea7ced9) query on the lines of a file, as obtained by using the <xref:System.IO.File.ReadLines%2A> method.  
  
-   The contents of a collection that implements an <xref:System.Collections.Generic.IEnumerable%601> of strings.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さゼロの文字列で、空白のみが含まれるか、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドによって定義された 1 つ以上の無効な文字が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name=" path" />、<paramref name="contents" />、または <paramref name="encoding" /> のいずれかが <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="path" /> が有効ではありません \(たとえば、ディレクトリが存在しない、またはマップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="path" /> によって指定されたファイルが見つかりませんでした。</exception>
        <exception cref="T:System.IO.IOException">ファイルを開くときに、I\/O エラーが発生しました。</exception>
        <exception cref="T:System.IO.PathTooLongException">
          <paramref name="path" /> がシステムで定義されている最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" /> は読み取り専用のファイルを指定します。  
  
 または  
  
 この操作は、現在のプラットフォームではサポートされていません。  
  
 または  
  
 <paramref name="path" /> はディレクトリです。  
  
 または  
  
 呼び出し元に、必要なアクセス許可がありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="AppendAllLinesAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task AppendAllLinesAsync (string path, System.Collections.Generic.IEnumerable&lt;string&gt; contents, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task AppendAllLinesAsync(string path, class System.Collections.Generic.IEnumerable`1&lt;string&gt; contents, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.AppendAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="contents" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="contents">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendAllLinesAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task AppendAllLinesAsync (string path, System.Collections.Generic.IEnumerable&lt;string&gt; contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task AppendAllLinesAsync(string path, class System.Collections.Generic.IEnumerable`1&lt;string&gt; contents, class System.Text.Encoding encoding, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.AppendAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="contents" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="contents">To be added.</param>
        <param name="encoding">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendAllText">
      <MemberSignature Language="C#" Value="public static void AppendAllText (string path, string contents);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AppendAllText(string path, string contents) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.AppendAllText(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="contents" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">指定した文字列の追加先となるファイル。</param>
        <param name="contents">ファイルに追加する文字列。</param>
        <summary>ファイルを開き、指定した文字列をそのファイルに追加した後、ファイルを閉じます。 ファイルが存在しない場合、このメソッドはファイルを作成し、指定した文字列をファイルに書き込んだ後、ファイルを閉じます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 文字列とファイルのパスを指定するには、このメソッドは、指定したファイルを開き、文字列をファイルの末尾に追加し、ファイルを閉じます。 例外が発生した場合でも、この方法により、終了するファイル ハンドルが保証されます。  
  
 メソッドは、存在しないが、新しいディレクトリを作成しない場合に、ファイルを作成します。 そのための値、 `path` パラメーターは、既存のディレクトリを含める必要があります。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.IO.File.AppendAllText%2A> ファイルの末尾に余分なテキストを追加します。 この例では、存在しないと、テキストを追加する場合は、ファイルが作成されます。 ただしは、ディレクトリ名 `temp` ドライブ C は、例が正常に完了するために存在する必要があります。  
  
 [!code-csharp[System.IO.File.AllText\#00](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.File.AllText/cs/AllText.cs#00)]
 [!code-vb[System.IO.File.AllText\#00](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.File.AllText/vb/AllText.vb#00)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列か、空白のみで構成されるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の使用できない文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満でなければなりません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが有効ではありません \(たとえば、ディレクトリが存在しない、またはマップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.IO.IOException">ファイルを開くときに、I\/O エラーが発生しました。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" /> が読み取り専用のファイルを指定しました。  
  
 \-または\-  
  
 この操作は、現在のプラットフォームではサポートされていません。  
  
 \-または\-  
  
 <paramref name="path" /> がディレクトリを指定しました。  
  
 \-または\-  
  
 呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for access to write to a file or directory. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /></permission>
      </Docs>
    </Member>
    <Member MemberName="AppendAllText">
      <MemberSignature Language="C#" Value="public static void AppendAllText (string path, string contents, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AppendAllText(string path, string contents, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.AppendAllText(System.String,System.String,System.Text.Encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="contents" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="path">指定した文字列の追加先となるファイル。</param>
        <param name="contents">ファイルに追加する文字列。</param>
        <param name="encoding">使用する文字エンコーディング。</param>
        <summary>指定した文字列をファイルに追加します。ファイルがまだ存在しない場合は、ファイルを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 文字列とファイルのパスを指定するには、このメソッドは、指定したファイルを開き、文字列を指定したエンコーディングを使用してファイルの末尾に追加し、ファイルを閉じます。 例外が発生した場合でも、この方法により、終了するファイル ハンドルが保証されます。  
  
 メソッドは、存在しないが、新しいディレクトリを作成しない場合に、ファイルを作成します。 そのための値、 `path` パラメーターは、既存のディレクトリを含める必要があります。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.IO.File.AppendAllText%2A> ファイルの末尾に余分なテキストを追加します。 この例では、存在しないと、テキストを追加する場合は、ファイルが作成されます。 ただしは、ディレクトリ名 `temp` ドライブ C は、例が正常に完了するために存在する必要があります。  
  
 [!code-csharp[System.IO.File.AllText\_Encoding\#00](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.File.AllText_Encoding/cs/AllText.cs#00)]
 [!code-vb[System.IO.File.AllText\_Encoding\#00](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.File.AllText_Encoding/vb/AllText.vb#00)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列であるか、内容が空白のみであるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の正しくない文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満でなければなりません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが有効ではありません \(たとえば、ディレクトリが存在しない、またはマップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.IO.IOException">ファイルを開くときに、I\/O エラーが発生しました。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" /> が読み取り専用のファイルを指定しました。  
  
 \-または\-  
  
 この操作は、現在のプラットフォームではサポートされていません。  
  
 \-または\-  
  
 <paramref name="path" /> がディレクトリを指定しました。  
  
 \-または\-  
  
 呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for access to write to a file or directory. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /></permission>
      </Docs>
    </Member>
    <Member MemberName="AppendAllTextAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task AppendAllTextAsync (string path, string contents, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task AppendAllTextAsync(string path, string contents, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.AppendAllTextAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="contents" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="contents">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendAllTextAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task AppendAllTextAsync (string path, string contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task AppendAllTextAsync(string path, string contents, class System.Text.Encoding encoding, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.AppendAllTextAsync(System.String,System.String,System.Text.Encoding,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="contents" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="contents">To be added.</param>
        <param name="encoding">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendText">
      <MemberSignature Language="C#" Value="public static System.IO.StreamWriter AppendText (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.StreamWriter AppendText(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.AppendText(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">追加先のファイル パス。</param>
        <summary>
          <see cref="T:System.IO.StreamWriter" /> を作成します。これは、UTF\-8 でエンコードされたテキストを既存のファイルに 追加するか、指定したファイルが存在しない場合は新しいファイルに追加します。</summary>
        <returns>指定したファイルまたは新しいファイルに、UTF\-8 エンコードされたテキストを追加するストリーム ライター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、 <xref:System.IO.StreamWriter.%23ctor%28System.String%2CSystem.Boolean%29> コンス トラクター オーバー ロードします。 ファイルが指定された場合 `path` が存在しないが作成されます。 ファイルが存在する場合、書き込み操作、 <xref:System.IO.StreamWriter> ファイルにテキストを追加します。 追加のスレッドは、開いているときに、ファイルの読み取りが許可されます。  
  
 `path` 相対パスまたは絶対パス情報を指定するパラメーターを許可します。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 `path` パラメーターは、大文字小文字を区別することはありません。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例では、ファイルにテキストを追加します。 メソッドは、ファイルが存在しない場合に、新しいファイルを作成します。 ただしは、ディレクトリ名 `temp` ドライブ C は、例が正常に完了するために存在する必要があります。  
  
 [!code-cpp[File\_AppendText\#1](~/samples/snippets/cpp/VS_Snippets_CLR/File_AppendText/CPP/file_appendtext.cpp#1)]
 [!code-csharp[File\_AppendText\#1](~/samples/snippets/csharp/VS_Snippets_CLR/File_AppendText/CS/file_appendtext.cs#1)]
 [!code-vb[File\_AppendText\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File_AppendText/VB/file_appendtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列であるか、空白のみで構成されるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の使用できない文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満でなければなりません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが有効ではありません \(たとえば、ディレクトリが存在しない、またはマップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for appending to the specified file. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /></permission>
        <altmember cref="T:System.IO.StreamWriter" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (string sourceFileName, string destFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(string sourceFileName, string destFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.Copy(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">コピーするファイル。</param>
        <param name="destFileName">コピー先ファイルの名前。 ディレクトリや既存のファイルは使用できません。</param>
        <summary>既存のファイルを新しいファイルにコピーします。 同じ名前のファイルを上書きできません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method is equivalent to the <xref:System.IO.File.Copy%28System.String%2CSystem.String%2CSystem.Boolean%29> method overload with the **parameterReference tag is not supported!!!!**  
 parameter set to **languageKeyword tag is not supported!!!!**  
.  
  
 The **parameterReference tag is not supported!!!!**  
 and **parameterReference tag is not supported!!!!**  
 parameters can specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see the <xref:System.IO.Directory.GetCurrentDirectory%2A?displayProperty=fullName> method. This method does not support wildcard characters in the parameters.  
  
 The attributes of the original file are retained in the copied file.  
  
   
  
## 例  
 The following example copies files to the C:\\archives\\2008 backup folder. It uses the two overloads of the <xref:System.IO.File.Copy%2A> method as follows:  
  
-   It first uses the <xref:System.IO.File.Copy%28System.String%2CSystem.String%29?displayProperty=fullName>method overload to copy text \(.txt\) files. The code demonstrates that this overload does not allow overwriting files that were already copied.  
  
-   It then uses the <xref:System.IO.File.Copy%28System.String%2CSystem.String%2CSystem.Boolean%29?displayProperty=fullName> method overload to copy pictures \(.jpg files\). The code demonstrates that this overload does allow overwriting files that were already copied.  
  
 [!code-csharp[FileCopyDelete\#1](~/samples/snippets/csharp/VS_Snippets_CLR/filecopydelete/cs/program.cs#1)]
 [!code-vb[FileCopyDelete\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/filecopydelete/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sourceFileName" /> または <paramref name="destFileName" /> が、長さ 0 の文字列であるか、空白のみで構成されるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義されている 1 つ以上の正しくない文字を含んでいます。  
  
 \-または\-  
  
 <paramref name="sourceFileName" /> または <paramref name="destFileName" /> がディレクトリを指定しています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceFileName" /> または <paramref name="destFileName" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="sourceFileName" /> または <paramref name="destFileName" /> で指定されたパスが正しくありません \(マップされていないドライブ上のパスなど\)。</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="sourceFileName" /> が見つかりませんでした。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="destFileName" /> が存在しています。  
  
 \-または\-  
  
 I\/O エラーが発生しました。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="sourceFileName" /> または <paramref name="destFileName" /> の形式が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading from **parameterReference tag is not supported!!!!**  
 and writing to **parameterReference tag is not supported!!!!**  
. Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="M:System.IO.Directory.Move(System.String,System.String)" />
        <altmember cref="M:System.IO.File.Move(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (string sourceFileName, string destFileName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(string sourceFileName, string destFileName, bool overwrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.Copy(System.String,System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destFileName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">コピーするファイル。</param>
        <param name="destFileName">コピー先ファイルの名前。 このパラメーターには、ディレクトリは指定できません。</param>
        <param name="overwrite">コピー先ファイルが上書きできる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>既存のファイルを新しいファイルにコピーします。 同じ名前のファイルの上書きが許可されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **parameterReference tag is not supported!!!!**  
 and **parameterReference tag is not supported!!!!**  
 parameters can specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. This method does not support wildcard characters in the parameters.  
  
 The attributes of the original file are retained in the copied file.  
  
 For a list of common I\/O tasks, see [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc).  
  
   
  
## 例  
 The following example copies files to the C:\\archives\\2008 backup folder. It uses the two overloads of the <xref:System.IO.File.Copy%2A> method as follows:  
  
-   It first uses the <xref:System.IO.File.Copy%28System.String%2CSystem.String%29?displayProperty=fullName> method overload to copy text \(.txt\) files. The code demonstrates that this overload does not allow overwriting files that were already copied.  
  
 It then uses the <xref:System.IO.File.Copy%28System.String%2CSystem.String%2CSystem.Boolean%29?displayProperty=fullName> method overload to copy pictures \(.jpg files\). The code demonstrates that this overload does allow overwriting files that were already copied.  
  
 [!code-csharp[FileCopyDelete\#1](~/samples/snippets/csharp/VS_Snippets_CLR/filecopydelete/cs/program.cs#1)]
 [!code-vb[FileCopyDelete\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/filecopydelete/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。  
  
 または  
  
 <paramref name="destFileName" /> は読み取り専用です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sourceFileName" /> または <paramref name="destFileName" /> が、長さ 0 の文字列であるか、空白のみで構成されるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義されている使用できない文字を含んでいます。  
  
 \-または\-  
  
 <paramref name="sourceFileName" /> または <paramref name="destFileName" /> がディレクトリを指定しています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceFileName" /> または <paramref name="destFileName" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="sourceFileName" /> または <paramref name="destFileName" /> で指定されたパスが正しくありません \(マップされていないドライブ上のパスなど\)。</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="sourceFileName" /> が見つかりませんでした。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="destFileName" /> が存在しており、<paramref name="overwrite" /> が <see langword="false" /> です。  
  
 または  
  
 I\/O エラーが発生しました。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="sourceFileName" /> または <paramref name="destFileName" /> の形式が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading from **parameterReference tag is not supported!!!!**  
 and writing to **parameterReference tag is not supported!!!!**  
. Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="M:System.IO.Directory.Move(System.String,System.String)" />
        <altmember cref="M:System.IO.File.Move(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.IO.FileStream Create (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.FileStream Create(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.Create(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">作成するファイルのパスと名前。</param>
        <summary>指定したパスでファイルを作成または上書きします。</summary>
        <returns>
          <see cref="T:System.IO.FileStream" /> で指定したファイルへの読み取り\/書き込みアクセスを提供する <paramref name="path" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.FileStream> このメソッドによって作成されたオブジェクトは、既定値を持つ <xref:System.IO.FileShare> の値 <xref:System.IO.FileShare.None>; 他のプロセスまたはコード ファイルにアクセスできるなしに作成された元のファイル ハンドルが閉じられるまでです。  
  
 このメソッドは、 <xref:System.IO.File.Create%28System.String%2CSystem.Int32%29> メソッドのオーバー ロードが既定のバッファー サイズを使用します。  
  
 `path` 相対パスまたは絶対パス情報を指定するパラメーターを許可します。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 指定したファイルが存在しない場合は作成です。存在しており、それが読み取り専用でない場合は、内容が上書きされます。  
  
 既定では、新しいファイルへの完全な読み取り\/書き込みアクセスはすべてのユーザーに付与します。 ファイルは、読み取り\/書き込みアクセス権を持つが開かれ、別のアプリケーションで開くことが前に閉じる必要があります。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例は、指定されたパスにファイルを作成、いくつかの情報をファイルに書き込みますおよびファイルから読み取ります。  
  
 [!code-cpp[File Create1\#1](~/samples/snippets/cpp/VS_Snippets_CLR/File Create1/CPP/file create1.cpp#1)]
 [!code-csharp[File Create1\#1](~/samples/snippets/csharp/VS_Snippets_CLR/File Create1/CS/file create1.cs#1)]
 [!code-vb[File Create1\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File Create1/VB/file create1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。  
  
 または  
  
 <paramref name="path" /> が読み取り専用のファイルを指定しました。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の正しくない文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満でなければなりません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.IO.IOException">ファイルの作成中に I\/O エラーが発生しました。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for permission to read and write to the file described by the **parameterReference tag is not supported!!!!**  
 parameter. Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" /> . Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.IO.FileStream Create (string path, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.FileStream Create(string path, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.Create(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="path">ファイルの名前です。</param>
        <param name="bufferSize">ファイルの読み取りおよび書き込み用にバッファリングされるバイト数。</param>
        <summary>指定したファイルを作成または上書きします。</summary>
        <returns>指定された大きさのバッファーを持ち、<see cref="T:System.IO.FileStream" /> で指定されたファイルへの読み取り\/書き込みアクセスを提供する <paramref name="path" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.FileStream> このメソッドによって作成されたオブジェクトは、既定値を持つ <xref:System.IO.FileShare> の値 <xref:System.IO.FileShare.None>; 他のプロセスまたはコード ファイルにアクセスできるなしに作成された元のファイル ハンドルが閉じられるまでです。  
  
 `path` 相対パスまたは絶対パス情報を指定するパラメーターを許可します。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 このメソッドは、 <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%29> コンス トラクター オーバー ロードします。 指定したファイルが存在しない場合は作成です。存在しており、それが読み取り専用でない場合は、内容が上書きされます。  
  
 既定では、新しいファイルへの完全な読み取り\/書き込みアクセスはすべてのユーザーに付与します。 ファイルは、読み取り\/書き込みアクセス権を持つが開かれ、別のアプリケーションで開くことが前に閉じる必要があります。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例では、指定したバッファー サイズをファイルを作成します。  
  
 [!code-cpp[File Create2\#1](~/samples/snippets/cpp/VS_Snippets_CLR/File Create2/CPP/file create2.cpp#1)]
 [!code-csharp[File Create2\#1](~/samples/snippets/csharp/VS_Snippets_CLR/File Create2/CS/file create2.cs#1)]
 [!code-vb[File Create2\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File Create2/VB/file create2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。  
  
 または  
  
 <paramref name="path" /> が読み取り専用のファイルを指定しました。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の正しくない文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満でなければなりません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.IO.IOException">ファイルの作成中に I\/O エラーが発生しました。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for permission to read and write to the file described by the **parameterReference tag is not supported!!!!**  
 parameter. Security action: Demand. Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.IO.FileStream Create (string path, int bufferSize, System.IO.FileOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.FileStream Create(string path, int32 bufferSize, valuetype System.IO.FileOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.Create(System.String,System.Int32,System.IO.FileOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="options" Type="System.IO.FileOptions" />
      </Parameters>
      <Docs>
        <param name="path">ファイルの名前です。</param>
        <param name="bufferSize">ファイルの読み取りおよび書き込み用にバッファリングされるバイト数。</param>
        <param name="options">ファイルを作成または上書きする方法を示す <see cref="T:System.IO.FileOptions" /> 値のいずれか。</param>
        <summary>バッファー サイズとファイルの作成または上書き方法を示す <see cref="T:System.IO.FileOptions" /> 値を指定して、指定のファイルを作成または上書きします。</summary>
        <returns>指定したバッファー サイズの新規ファイル。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **parameterReference tag is not supported!!!!**  
 parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.  
  
 This method is equivalent to the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%29> constructor overload. If the specified file does not exist, it is created; if it does exist and it is not read\-only, the contents are overwritten.  
  
 By default, full read\/write access to new files is granted to all users. The file is opened with read\/write access and must be closed before it can be opened by another application.  
  
 For a list of common I\/O tasks, see [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc).  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。  
  
 または  
  
 <paramref name="path" /> が読み取り専用のファイルを指定しました。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の正しくない文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満でなければなりません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません \(たとえば、マップされていないドライブにあるなど。</exception>
        <exception cref="T:System.IO.IOException">ファイルの作成中に I\/O エラーが発生しました。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for permission to read and write to the file described by the **parameterReference tag is not supported!!!!**  
 parameter. Security action: Demand. Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.IO.FileStream Create (string path, int bufferSize, System.IO.FileOptions options, System.Security.AccessControl.FileSecurity fileSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.FileStream Create(string path, int32 bufferSize, valuetype System.IO.FileOptions options, class System.Security.AccessControl.FileSecurity fileSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.Create(System.String,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="options" Type="System.IO.FileOptions" />
        <Parameter Name="fileSecurity" Type="System.Security.AccessControl.FileSecurity" />
      </Parameters>
      <Docs>
        <param name="path">ファイルの名前です。</param>
        <param name="bufferSize">ファイルの読み取りおよび書き込み用にバッファリングされるバイト数。</param>
        <param name="options">ファイルを作成または上書きする方法を示す <see cref="T:System.IO.FileOptions" /> 値のいずれか。</param>
        <param name="fileSecurity">ファイルのアクセス制御と監査セキュリティを決定する <see cref="T:System.Security.AccessControl.FileSecurity" /> 値のいずれか。</param>
        <summary>指定したバッファー サイズ、ファイル オプション、およびファイル セキュリティを使用して、指定したファイルを作成または上書きします。</summary>
        <returns>指定したバッファー サイズ、ファイル オプション、ファイル セキュリティが設定された新しいファイル。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **parameterReference tag is not supported!!!!**  
 parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.  
  
 This method is equivalent to the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%29> constructor overload. If the specified file does not exist, it is created; if it does exist and it is not read\-only, the contents are overwritten.  
  
 By default, full read\/write access to new files is granted to all users. The file is opened with read\/write access and must be closed before it can be opened by another application.  
  
 For a list of common I\/O tasks, see [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc).  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。  
  
 または  
  
 <paramref name="path" /> が読み取り専用のファイルを指定しました。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の正しくない文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満でなければなりません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.IO.IOException">ファイルの作成中に I\/O エラーが発生しました。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for permission to read and write to the file described by the **parameterReference tag is not supported!!!!**  
 parameter. Security action: Demand. Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateText">
      <MemberSignature Language="C#" Value="public static System.IO.StreamWriter CreateText (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.StreamWriter CreateText(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.CreateText(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">書き込み用に開かれるファイル。</param>
        <summary>UTF\-8 エンコードされたテキストの書き込み用にファイルを作成または開きます。</summary>
        <returns>UTF\-8 エンコーディングを使用して指定したファイルに書き込まれる <see cref="T:System.IO.StreamWriter" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method is equivalent to the <xref:System.IO.StreamWriter.%23ctor%28System.String%2CSystem.Boolean%29> constructor overload with the **parameterReference tag is not supported!!!!**  
 parameter set to **languageKeyword tag is not supported!!!!**  
. If the file specified by **parameterReference tag is not supported!!!!**  
 does not exist, it is created. If the file does exist, its contents are overwritten. Additional threads are permitted to read the file while it is open.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.  
  
 For a list of common I\/O tasks, see [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc).  
  
   
  
## 例  
 The following example creates a file for text writing and reading.  
  
 [!code-cpp[File CreateText\#1](~/samples/snippets/cpp/VS_Snippets_CLR/File CreateText/CPP/file createtext.cpp#1)]
 [!code-csharp[File CreateText\#1](~/samples/snippets/csharp/VS_Snippets_CLR/File CreateText/CS/file createtext.cs#1)]
 [!code-vb[File CreateText\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File CreateText/VB/file createtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列であるか、空白のみで構成されるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の使用できない文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満でなければなりません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for writing to the specified file. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Decrypt">
      <MemberSignature Language="C#" Value="public static void Decrypt (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Decrypt(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.Decrypt(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">復号化するファイルを示すパス。</param>
        <summary>
          <see cref="M:System.IO.File.Encrypt(System.String)" /> メソッドを使用して現在のアカウントによって暗号化されたファイルを復号化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.IO.File.Decrypt%2A> method allows you to decrypt a file that was encrypted using the <xref:System.IO.File.Encrypt%2A> method.  The <xref:System.IO.File.Decrypt%2A> method can decrypt only files that were encrypted using the current user account.  
  
 The <xref:System.IO.File.Decrypt%2A> method requires exclusive access to the file being decrypted, and will raise an exception if another process is using the file. If the file is not encrypted, <xref:System.IO.File.Decrypt%2A> will return a nonzero value, which indicates success.  
  
 Both the <xref:System.IO.File.Encrypt%2A> method and the <xref:System.IO.File.Decrypt%2A> method use the cryptographic service provider \(CSP\) installed on the computer and the file encryption keys of the process calling the method.  
  
 The current file system must be formatted as NTFS and the current operating system must be Windows NT or later.  
  
   
  
## 例  
 The following code example uses the <xref:System.IO.File.Encrypt%2A> method and the <xref:System.IO.File.Decrypt%2A> method to encrypt and then decrypt a file. The file must exist for the example to work.  
  
 [!code-cpp[IO.File.Encrypt\-Decrypt\#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.File.Encrypt-Decrypt/cpp/sample.cpp#1)]
 [!code-csharp[IO.File.Encrypt\-Decrypt\#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.File.Encrypt-Decrypt/CS/sample.cs#1)]
 [!code-vb[IO.File.Encrypt\-Decrypt\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.File.Encrypt-Decrypt/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> パラメーターは長さゼロの文字列で、空白のみで構成されているか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義されるように 1 つ以上の無効な文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.DriveNotFoundException">正しくないドライブが指定されました。</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="path" /> パラメーターで記述されているファイルが見つかりませんでした。</exception>
        <exception cref="T:System.IO.IOException">ファイルを開くときに、I\/O エラーが発生しました。 たとえば、暗号化されたファイルが既に開いています。  
  
 または  
  
 この操作は、現在のプラットフォームではサポートされていません。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満でなければなりません。</exception>
        <exception cref="T:System.PlatformNotSupportedException">現在のオペレーティング システムは Windows NT 以降ではありません。</exception>
        <exception cref="T:System.NotSupportedException">ファイル システムは NTFS ではありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" /> パラメーターに読み取り専用のファイルが指定されています。  
  
 または  
  
 この操作は、現在のプラットフォームではサポートされていません。  
  
 または  
  
 <paramref name="path" /> パラメーターにディレクトリが指定されています。  
  
 または  
  
 呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for permission to read and write to the file described by the **parameterReference tag is not supported!!!!**  
 parameter. Security action: Demand. Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public static void Delete (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Delete(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.Delete(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">削除するファイルの名前。 ワイルドカード文字はサポートされていません。</param>
        <summary>指定されたファイルを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Specify a file name with any relative or absolute path information for the **parameterReference tag is not supported!!!!**  
 parameter. Wildcard characters cannot be included. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.  
  
 If the file to be deleted does not exist, no exception is thrown.  
  
 For a list of common I\/O tasks, see [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc).  
  
   
  
## 例  
 The following example copies groups of files to the C:\\archives\\2008 backup folder and then deletes them from the source folder.  
  
 [!code-csharp[FileCopyDelete\#1](~/samples/snippets/csharp/VS_Snippets_CLR/filecopydelete/cs/program.cs#1)]
 [!code-vb[FileCopyDelete\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/filecopydelete/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列か、空白のみで構成されるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の正しくない文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.IO.IOException">指定されたファイルは、使用されています。  
  
 または  
  
 ファイルに開いているハンドルがあり、オペレーティング システムが Windows XP かそれ以前のバージョンです。 このハンドルが開いている原因は、ディレクトリおよびファイルを列挙したことにある可能性があります。 詳細については、「[How to: Enumerate Directories and Files](http://msdn.microsoft.com/ja-jp/86b69a08-3bfa-4e5f-b4e1-3b7cb8478215)」を参照してください。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満でなければなりません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。  
  
 または  
  
 ファイルは使用されている実行可能ファイルです。  
  
 または  
  
 <paramref name="path" /> はディレクトリです。  
  
 または  
  
 <paramref name="path" /> は読み取り専用ファイルを指定しました。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for deleting the specified file. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Encrypt">
      <MemberSignature Language="C#" Value="public static void Encrypt (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Encrypt(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.Encrypt(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">暗号化するファイルを示すパス。</param>
        <summary>ファイルを暗号化し、そのファイルの暗号化に使用したアカウントだけが復号化できるようにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.IO.File.Encrypt%2A> method allows you to encrypt a file so that only the account used to call this method can decrypt it. Use the <xref:System.IO.File.Decrypt%2A> method to decrypt a file encrypted by the <xref:System.IO.File.Encrypt%2A> method.  
  
 The <xref:System.IO.File.Encrypt%2A> method requires exclusive access to the file being encrypted, and will fail if another process is using the file.  
  
 Both the <xref:System.IO.File.Encrypt%2A> method and the <xref:System.IO.File.Decrypt%2A> method use the cryptographic service provider \(CSP\) installed on the computer and the file encryption keys of the process calling the method.  
  
 This method is not available on all versions of Windows. For example, it is not available on Home editions.  
  
 The current file system must be formatted as NTFS.  
  
   
  
## 例  
 The following code example uses the <xref:System.IO.File.Encrypt%2A> method and the <xref:System.IO.File.Decrypt%2A> method to encrypt and then decrypt a file. The file must exist for the example to work.  
  
 [!code-cpp[IO.File.Encrypt\-Decrypt\#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.File.Encrypt-Decrypt/cpp/sample.cpp#1)]
 [!code-csharp[IO.File.Encrypt\-Decrypt\#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.File.Encrypt-Decrypt/CS/sample.cs#1)]
 [!code-vb[IO.File.Encrypt\-Decrypt\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.File.Encrypt-Decrypt/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> パラメーターは長さゼロの文字列で、空白のみで構成されているか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義されるように 1 つ以上の無効な文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.DriveNotFoundException">正しくないドライブが指定されました。</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="path" /> パラメーターで記述されているファイルが見つかりませんでした。</exception>
        <exception cref="T:System.IO.IOException">ファイルを開くときに I\/O エラーが発生しました。  
  
 または  
  
 この操作は、現在のプラットフォームではサポートされていません。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満でなければなりません。</exception>
        <exception cref="T:System.PlatformNotSupportedException">現在のオペレーティング システムは Windows NT 以降ではありません。</exception>
        <exception cref="T:System.NotSupportedException">ファイル システムは NTFS ではありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" /> パラメーターに読み取り専用のファイルが指定されています。  
  
 または  
  
 この操作は、現在のプラットフォームではサポートされていません。  
  
 または  
  
 <paramref name="path" /> パラメーターにディレクトリが指定されています。  
  
 または  
  
 呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for permission to read and write to the file described by the **parameterReference tag is not supported!!!!**  
 parameter. Security action: Demand. Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public static bool Exists (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Exists(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.Exists(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">確認するファイル。</param>
        <summary>指定したファイルが存在するかどうかを確認します。</summary>
        <returns>呼び出し元が必要なアクセス許可を持ち、<see langword="true" /> に既存のファイル名が格納されている場合は <paramref name="path" />。それ以外の場合は <see langword="false" />。<see langword="false" /> が <paramref name="path" />、正しくないパス、または長さ 0 の文字列の場合にも、このメソッドは <see langword="null" /> を返します。 呼び出し元が指定したファイルを読み取るための十分なアクセス許可を持たない場合、例外はスローされず、このメソッドは、<see langword="false" /> の有無にかかわらず <paramref name="path" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.IO.File.Exists%2A> method should not be used for path validation, this method merely checks if the file specified in **parameterReference tag is not supported!!!!**  
 exists. Passing an invalid path to <xref:System.IO.File.Exists%2A> returns **languageKeyword tag is not supported!!!!**  
. To check whether the path contains any invalid characters, you can call the <xref:System.IO.Path.GetInvalidPathChars%2A> method to retrieve the characters that are invalid for the file system. You can also create a regular expression to test the whether the path is valid for your environment. For examples of acceptable paths, see <xref:System.IO.File>.  
  
 To check if a directory exists, see <xref:System.IO.Directory.Exists%2A?displayProperty=fullName>.  
  
 Be aware that another process can potentially do something with the file in between the time you call the <xref:System.IO.File.Exists%2A> method and perform another operation on the file, such as <xref:System.IO.File.Delete%2A>.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.  
  
 If **parameterReference tag is not supported!!!!**  
 describes a directory, this method returns **languageKeyword tag is not supported!!!!**  
. Trailing spaces are removed from the **parameterReference tag is not supported!!!!**  
 parameter before determining if the file exists.  
  
 The <xref:System.IO.File.Exists%2A> method returns **languageKeyword tag is not supported!!!!**  
 if any error occurs while trying to determine if the specified file exists. This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file.  
  
   
  
## 例  
 The following example determines if a file exists.  
  
 [!code-csharp[File Exists\#1](~/samples/snippets/csharp/VS_Snippets_CLR/File Exists/CS/program.cs#1)]
 [!code-vb[File Exists\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File Exists/VB/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading from the specified file. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="M:System.IO.Directory.Exists(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAccessControl">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したファイルのアクセス制御リスト \(ACL\) のエントリをカプセル化する <see cref="T:System.Security.AccessControl.FileSecurity" /> オブジェクトを取得します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.IO.FileInfo.GetAccessControl%2A> アクセス権を取得する方法は、指定されたファイルのリスト \(ACL\) エントリを制御します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAccessControl">
      <MemberSignature Language="C#" Value="public static System.Security.AccessControl.FileSecurity GetAccessControl (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.AccessControl.FileSecurity GetAccessControl(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.GetAccessControl(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.FileSecurity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">ファイルのアクセス制御リスト \(ACL\) の情報を記述する <see cref="T:System.Security.AccessControl.FileSecurity" /> オブジェクトを格納するファイルへのパス。</param>
        <summary>指定したファイルのアクセス制御リスト \(ACL\) のエントリをカプセル化する <see cref="T:System.Security.AccessControl.FileSecurity" /> オブジェクトを取得します。</summary>
        <returns>
          <paramref name="path" /> パラメーターによって記述されるファイルのアクセス制御規則をカプセル化する <see cref="T:System.Security.AccessControl.FileSecurity" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.IO.File.GetAccessControl%2A> ファイルのアクセス制御リスト \(ACL\) エントリを取得します。  
  
 ACL は、個人やグループがある、または権限がない、特定のファイルの特定のアクションにユーザーを示します。 詳細については、「[How to: Add or Remove an Access Control List Entry](http://msdn.microsoft.com/ja-jp/53758b39-bd9b-4640-bb04-cad5ed8d0abf)」を参照してください。  
  
 NTFS の環境で <xref:System.Security.AccessControl.FileSystemRights.ReadAttributes> と <xref:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes> 場合は、ユーザーがあるユーザーに付与されます <xref:System.Security.AccessControl.FileSystemRights.ListDirectory> 親フォルダーの権限です。 拒否する <xref:System.Security.AccessControl.FileSystemRights.ReadAttributes> と <xref:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes>, 、拒否 <xref:System.Security.AccessControl.FileSystemRights.ListDirectory> 親ディレクトリにします。  
  
   
  
## 例  
 次のコード例では、 <xref:System.IO.File.GetAccessControl%2A> と <xref:System.IO.File.SetAccessControl%2A> メソッドを追加し、削除、アクセス制御リスト \(ACL\) エントリをファイルからです。  この例を実行するには、有効なユーザーまたはグループ アカウントを指定する必要があります。  
  
 [!code-cpp[IO.File.GetAccessControl\-SetAccessControl\#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.File.GetAccessControl-SetAccessControl/cpp/sample.cpp#1)]
 [!code-csharp[IO.File.GetAccessControl\-SetAccessControl\#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.File.GetAccessControl-SetAccessControl/CS/sample.cs#1)]
 [!code-vb[IO.File.GetAccessControl\-SetAccessControl\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.File.GetAccessControl-SetAccessControl/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">ファイルを開くときに、I\/O エラーが発生しました。</exception>
        <exception cref="T:System.Runtime.InteropServices.SEHException">
          <paramref name="path" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.SystemException">ファイルが見つかりませんでした。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" /> パラメーターに読み取り専用のファイルが指定されています。  
  
 または  
  
 この操作は、現在のプラットフォームではサポートされていません。  
  
 または  
  
 <paramref name="path" /> パラメーターにディレクトリが指定されています。  
  
 または  
  
 呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for permission to read the access control list. Security action: Demand. Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.NoAccess" />, <see cref="F:System.Security.AccessControl.AccessControlActions.View" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetAccessControl">
      <MemberSignature Language="C#" Value="public static System.Security.AccessControl.FileSecurity GetAccessControl (string path, System.Security.AccessControl.AccessControlSections includeSections);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.AccessControl.FileSecurity GetAccessControl(string path, valuetype System.Security.AccessControl.AccessControlSections includeSections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.FileSecurity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="includeSections" Type="System.Security.AccessControl.AccessControlSections" />
      </Parameters>
      <Docs>
        <param name="path">ファイルのアクセス制御リスト \(ACL\) の情報を記述する <see cref="T:System.Security.AccessControl.FileSecurity" /> オブジェクトを格納するファイルへのパス。</param>
        <param name="includeSections">取得するアクセス制御リスト \(ACL\) の情報の型を指定する <see cref="T:System.Security.AccessControl.AccessControlSections" /> 値のいずれか。</param>
        <summary>特定のファイルのアクセス制御リスト \(ACL\) の指定した型のエントリをカプセル化する <see cref="T:System.Security.AccessControl.FileSecurity" /> オブジェクトを取得します。</summary>
        <returns>
          <paramref name="path" /> パラメーターによって記述されるファイルのアクセス制御規則をカプセル化する <see cref="T:System.Security.AccessControl.FileSecurity" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.IO.File.GetAccessControl%2A> ファイルのアクセス制御リスト \(ACL\) エントリを取得します。  
  
 ACL は、個人やグループがある、または権限がない、特定のファイルの特定のアクションにユーザーを示します。 詳細については、「[How to: Add or Remove an Access Control List Entry](http://msdn.microsoft.com/ja-jp/53758b39-bd9b-4640-bb04-cad5ed8d0abf)」を参照してください。  
  
 NTFS の環境で <xref:System.Security.AccessControl.FileSystemRights.ReadAttributes> と <xref:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes> 場合は、ユーザーがあるユーザーに付与されます <xref:System.Security.AccessControl.FileSystemRights.ListDirectory> 親フォルダーの権限です。 拒否する <xref:System.Security.AccessControl.FileSystemRights.ReadAttributes> と <xref:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes>, 、拒否 <xref:System.Security.AccessControl.FileSystemRights.ListDirectory> 親ディレクトリにします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">ファイルを開くときに、I\/O エラーが発生しました。</exception>
        <exception cref="T:System.Runtime.InteropServices.SEHException">
          <paramref name="path" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.SystemException">ファイルが見つかりませんでした。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" /> パラメーターに読み取り専用のファイルが指定されています。  
  
 または  
  
 この操作は、現在のプラットフォームではサポートされていません。  
  
 または  
  
 <paramref name="path" /> パラメーターにディレクトリが指定されています。  
  
 または  
  
 呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for permission to read the access control list. Security action: Demand. Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.NoAccess" />, <see cref="F:System.Security.AccessControl.AccessControlActions.View" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetAttributes">
      <MemberSignature Language="C#" Value="public static System.IO.FileAttributes GetAttributes (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.IO.FileAttributes GetAttributes(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.GetAttributes(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileAttributes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">ファイルへのパス。</param>
        <summary>パス上のファイルの <see cref="T:System.IO.FileAttributes" /> を取得します。</summary>
        <returns>パス上のファイルの <see cref="T:System.IO.FileAttributes" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `path` 相対パスまたは絶対パス情報を指定するパラメーターを許可します。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例で、 `GetAttributes` と `SetAttributes` を適用してメソッド、 `Archive` と `Hidden` ファイル属性します。  
  
 [!code-cpp[File GetAttributes\#1](~/samples/snippets/cpp/VS_Snippets_CLR/File GetAttributes/CPP/file getattributes.cpp#1)]
 [!code-csharp[File GetAttributes\#1](~/samples/snippets/csharp/VS_Snippets_CLR/File GetAttributes/CS/file getattributes.cs#1)]
 [!code-vb[File GetAttributes\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File GetAttributes/VB/file getattributes.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は空か、空白のみで構成されているか、正しくない文字を含んでいます。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大文字数を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="path" /> はファイルを表しますが、正しくありません \(マップされていないドライブにあるなど\)。またはファイルが見つかりません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="path" /> はディレクトリを表しますが、正しくありません \(マップされていないドライブにあるなど\)。またはディレクトリが見つかりません。</exception>
        <exception cref="T:System.IO.IOException">ファイルは別のプロセスによって使用されています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading files. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetCreationTime">
      <MemberSignature Language="C#" Value="public static DateTime GetCreationTime (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime GetCreationTime(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.GetCreationTime(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">作成日時情報を取得する対象のファイルまたはディレクトリ。</param>
        <summary>指定したファイルまたはディレクトリの作成日時を返します。</summary>
        <returns>指定したファイルまたはディレクトリの作成日時に設定された <see cref="T:System.DateTime" /> 構造体。 この値は現地時刻で表示されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  このメソッドは、オペレーティング システムでの値を持つは継続的に更新できませんネイティブ関数を使用しているためにが不正確な値を返すことがあります。  
  
 `path` 相対パスまたは絶対パス情報を指定するパラメーターを許可します。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 ファイルが記述されている場合、 `path` パラメーターが存在しないか、このメソッドは、西暦 1601 年 1 月 1 日深夜 12時 00分を返します。\(西暦\)世界協定時刻 \(UTC\) では、ローカル時刻に調整します。  
  
 NTFS でフォーマットされたドライブは、短時間に、ファイルの作成日時などのファイルに関する情報をキャッシュすることができます。 その結果、明示的に上書きするか、既存のファイルを置き換えている場合、ファイルの作成日時を設定する必要があります。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例で `GetCreationTime`します。  
  
 [!code-vb[System.IO.File.GetCreationTime\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.file.getcreationtime/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列であるか、空白のみで構成されるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の使用できない文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading from the specified file. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="GetCreationTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime GetCreationTimeUtc (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime GetCreationTimeUtc(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.GetCreationTimeUtc(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">作成日時情報を取得する対象のファイルまたはディレクトリ。</param>
        <summary>指定したファイルまたはディレクトリの作成日時を世界協定時刻 \(UTC\) で返します。</summary>
        <returns>指定したファイルまたはディレクトリの作成日時に設定された <see cref="T:System.DateTime" /> 構造体。 この値は UTC 時刻で表現されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  このメソッドは、オペレーティング システムでの値を持つは継続的に更新できませんネイティブ関数を使用しているためにが不正確な値を返すことがあります。  
  
 ファイルが記述されている場合、 `path` パラメーターが存在しないか、このメソッドは、西暦 1601 年 1 月 1 日深夜 12時 00分を返します。\(西暦\)世界協定時刻 \(UTC\)。  
  
 NTFS でフォーマットされたドライブは、短時間に、ファイルの作成日時などのファイルに関する情報をキャッシュすることができます。 その結果、明示的に上書きするか、既存のファイルを置き換えている場合、ファイルの作成日時を設定する必要があります。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例は、 <xref:System.IO.File.GetCreationTimeUtc%2A> メソッドです。  
  
 [!code-vb[System.IO.File.GetCreationTime\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.file.getcreationtime/vb/module2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列であるか、空白のみで構成されるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の使用できない文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading from the specified file. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="GetLastAccessTime">
      <MemberSignature Language="C#" Value="public static DateTime GetLastAccessTime (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime GetLastAccessTime(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.GetLastAccessTime(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">アクセス日時情報を取得する対象のファイルまたはディレクトリ。</param>
        <summary>指定したファイルまたはディレクトリに最後にアクセスした日付と時刻を返します。</summary>
        <returns>指定したファイルまたはディレクトリに最後にアクセスした日付と時刻に設定された <see cref="T:System.DateTime" /> 構造体。 この値は現地時刻で表示されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  このメソッドは、オペレーティング システムでの値を持つは継続的に更新できませんネイティブ関数を使用しているためにが不正確な値を返すことがあります。  
  
 ファイルが記述されている場合、 `path` パラメーターが存在しないか、このメソッドは、西暦 1601 年 1 月 1 日深夜 12時 00分を返します。\(西暦\)世界協定時刻 \(UTC\) では、ローカル時刻に調整します。  
  
 `path` 相対パスまたは絶対パス情報を指定するパラメーターを許可します。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例で `GetLastAccessTime`します。  
  
 [!code-cpp[File GetLastAccess\#1](~/samples/snippets/cpp/VS_Snippets_CLR/File GetLastAccess/CPP/file getlastaccess.cpp#1)]
 [!code-csharp[File GetLastAccess\#1](~/samples/snippets/csharp/VS_Snippets_CLR/File GetLastAccess/CS/file getlastaccess.cs#1)]
 [!code-vb[File GetLastAccess\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File GetLastAccess/VB/file getlastaccess.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列であるか、空白のみで構成されるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の使用できない文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading from the specified file. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="GetLastAccessTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime GetLastAccessTimeUtc (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime GetLastAccessTimeUtc(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.GetLastAccessTimeUtc(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">アクセス日時情報を取得する対象のファイルまたはディレクトリ。</param>
        <summary>指定されたファイルまたはディレクトリに最後にアクセスした日付と時刻を世界協定時 \(UTC\) で返します。</summary>
        <returns>指定されたファイルまたはディレクトリに最後にアクセスした日付と時刻に設定された <see cref="T:System.DateTime" /> 構造体。 この値は UTC 時刻で表記されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  このメソッドは、オペレーティング システムでの値を持つは継続的に更新できませんネイティブ関数を使用しているためにが不正確な値を返すことがあります。  
  
 ファイルが記述されている場合、 `path` パラメーターが存在しないか、このメソッドは、西暦 1601 年 1 月 1 日深夜 12時 00分を返します。\(西暦\)世界協定時刻 \(UTC\)。  
  
 `path` 相対パスまたは絶対パス情報を指定するパラメーターを許可します。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列であるか、空白のみで構成されるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の使用できない文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading from the specified file. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="GetLastWriteTime">
      <MemberSignature Language="C#" Value="public static DateTime GetLastWriteTime (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime GetLastWriteTime(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.GetLastWriteTime(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">書き込み日時情報を取得する対象のファイルまたはディレクトリ。</param>
        <summary>指定したファイルまたはディレクトリに最後に書き込んだ日付と時刻を返します。</summary>
        <returns>指定したファイルまたはディレクトリに最後に書き込んだ日付と時刻に設定された <see cref="T:System.DateTime" /> 構造体。 この値は現地時刻で表示されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  このメソッドは、オペレーティング システムでの値を持つは継続的に更新できませんネイティブ関数を使用しているためにが不正確な値を返すことがあります。 各オペレーティング システムでは、独自の規則に従って、最終書き込み時刻を管理します。 パフォーマンスを向上させるには、オペレーティング システム最後の書き込み操作の正確な時間に最終書き込み時刻の値を設定しない可能性がありますが可能性があります設定近いものを代わりに。  
  
 ファイルが記述されている場合、 `path` パラメーターが存在しないか、このメソッドは、西暦 1601 年 1 月 1 日深夜 12時 00分を返します。\(西暦\)世界協定時刻 \(UTC\) では、ローカル時刻に調整します。  
  
 `path` 相対パスまたは絶対パス情報を指定するパラメーターを許可します。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例で `GetLastWriteTime`します。  
  
 [!code-cpp[File GetLastWrite\#1](~/samples/snippets/cpp/VS_Snippets_CLR/File GetLastWrite/CPP/file getlastwrite.cpp#1)]
 [!code-csharp[File GetLastWrite\#1](~/samples/snippets/csharp/VS_Snippets_CLR/File GetLastWrite/CS/file getlastwrite.cs#1)]
 [!code-vb[File GetLastWrite\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File GetLastWrite/VB/file getlastwrite.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列であるか、空白のみで構成されるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の使用できない文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading from the specified file. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="GetLastWriteTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime GetLastWriteTimeUtc (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime GetLastWriteTimeUtc(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.GetLastWriteTimeUtc(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">書き込み日時情報を取得する対象のファイルまたはディレクトリ。</param>
        <summary>指定したファイルまたはディレクトリに最後に書き込んだ日付と時刻を世界協定時刻 \(UTC\) で返します。</summary>
        <returns>指定したファイルまたはディレクトリに最後に書き込んだ日付と時刻に設定された <see cref="T:System.DateTime" /> 構造体。 この値は UTC 時刻で表現されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  このメソッドは、オペレーティング システムでの値を持つは継続的に更新できませんネイティブ関数を使用しているためにが不正確な値を返すことがあります。 各オペレーティング システムでは、独自の規則に従って、最終書き込み時刻を管理します。 パフォーマンスを向上させるには、オペレーティング システム最後の書き込み操作の正確な時間に最終書き込み時刻の値を設定しない可能性がありますが可能性があります設定近いものを代わりに。  
  
 ファイルが記述されている場合、 `path` パラメーターが存在しないか、このメソッドは、西暦 1601 年 1 月 1 日深夜 12時 00分を返します。\(西暦\)世界協定時刻 \(UTC\)。  
  
 `path` 相対パスまたは絶対パス情報を指定するパラメーターを許可します。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列であるか、空白のみで構成されるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の使用できない文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading from the specified file. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="Move">
      <MemberSignature Language="C#" Value="public static void Move (string sourceFileName, string destFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Move(string sourceFileName, string destFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.Move(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">移動するファイルの名前。 相対パスを使用することも絶対パスを使用することもできます。</param>
        <param name="destFileName">ファイルの新しいパスおよび名前。</param>
        <summary>指定されたファイルを新しい場所に移動します。オプションで新しいファイル名を指定することもできます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、ディスク ボリューム間で動作し、ソースとコピー先が同じである場合、例外はスローしません。 同じ名前のファイルをそのディレクトリに移動することで、ファイルの置き換えをしようとすると入手できることに注意してください、 <xref:System.IO.IOException>です。 Move メソッドを使用して、既存のファイルを上書きすることはできません。  
  
 `sourceFileName` と `destFileName` 引数は、相対パスまたは絶対パス情報を含めることができます。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 ディスク ボリューム間でファイルを移動しようとすると、そのファイルを使用して、ファイルは、先にコピーが、ソースからは削除されません。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例では、ファイルを移動します。  
  
 [!code-cpp[File Move\#1](~/samples/snippets/cpp/VS_Snippets_CLR/File Move/CPP/file move.cpp#1)]
 [!code-csharp[File Move\#1](~/samples/snippets/csharp/VS_Snippets_CLR/File Move/CS/file move.cs#1)]
 [!code-vb[File Move\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File Move/VB/file move.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">リンク先ファイルが既に存在します。  
  
 または  
  
 <paramref name="sourceFileName" /> が見つかりませんでした。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceFileName" /> または <paramref name="destFileName" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sourceFileName" /> か <paramref name="destFileName" /> が長さ 0 の文字列であるか、空白のみで構成されているか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義されている正しくない文字を含んでいます。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大文字数を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字、ファイル名は 260 文字未満でなければなりません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="sourceFileName" /> または <paramref name="destFileName" /> で指定されたパスが正しくありません \(マップされていないドライブ上のパスなど\)。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="sourceFileName" /> または <paramref name="destFileName" /> の形式が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading from **parameterReference tag is not supported!!!!**  
 and writing to **parameterReference tag is not supported!!!!**  
. Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.FileStream Open (string path, System.IO.FileMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.FileStream Open(string path, valuetype System.IO.FileMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.Open(System.String,System.IO.FileMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
      </Parameters>
      <Docs>
        <param name="path">開くファイル。</param>
        <param name="mode">ファイルが存在しない場合にファイルを作成するかどうかを指定し、既存のファイルの内容を保持するか上書きするかを決定する <see cref="T:System.IO.FileMode" /> 値。</param>
        <summary>指定したパスの <see cref="T:System.IO.FileStream" /> を読み取り\/書き込みアクセスで開きます。</summary>
        <returns>共有モードではなく読み取り\/書き込みアクセスで、指定したモードとパスで開いた <see cref="T:System.IO.FileStream" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `path` 相対パスまたは絶対パス情報を指定するパラメーターを許可します。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次のコード例では、一時ファイルを作成し、いくつかのテキストを書き込みます。 この例は、T:System.IO.FileMode.Open; を使用して、ファイルを開きますつまり、ファイルが既に存在しない場合に作成されません。  
  
 [!code-cpp[File Open1\#1](~/samples/snippets/cpp/VS_Snippets_CLR/File Open1/CPP/file open1.cpp#1)]
 [!code-csharp[File Open1\#1](~/samples/snippets/csharp/VS_Snippets_CLR/File Open1/CS/file open1.cs#1)]
 [!code-vb[File Open1\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File Open1/VB/file open1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列であるか、空白のみで構成されるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の正しくない文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません \(マップされていないドライブ上のパスなど\)。</exception>
        <exception cref="T:System.IO.IOException">ファイルを開くときに、I\/O エラーが発生しました。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" /> が読み取り専用のファイルを指定しました。  
  
 \-または\-  
  
 この操作は、現在のプラットフォームではサポートされていません。  
  
 \-または\-  
  
 <paramref name="path" /> がディレクトリを指定しました。  
  
 \-または\-  
  
 呼び出し元に、必要なアクセス許可がありません。  
  
 \-または\-  
  
 <paramref name="mode" /> は <see cref="F:System.IO.FileMode.Create" /> であり、指定されたファイルは隠しファイルです。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="mode" /> により正しくない値が指定されました。</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="path" /> で指定されたファイルが見つかりませんでした。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が無効です。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading from and writing to the specified file. Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.FileStream Open (string path, System.IO.FileMode mode, System.IO.FileAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.FileStream Open(string path, valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="path">開くファイル。</param>
        <param name="mode">ファイルが存在しない場合はファイルを作成するかどうか、既存ファイルの内容を保持するか上書きするかを指定する <see cref="T:System.IO.FileMode" /> 値。</param>
        <param name="access">ファイルで実行できる操作を指定する <see cref="T:System.IO.FileAccess" /> 値。</param>
        <summary>指定されたモードとアクセスを使用して、指定されたパスで <see cref="T:System.IO.FileStream" /> を開きます。</summary>
        <returns>指定されたモードとアクセスで、指定されたファイルへのアクセスを提供する非共有 <see cref="T:System.IO.FileStream" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `path` 相対パスまたは絶対パス情報を指定するパラメーターを許可します。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
   
  
## 例  
 次の例では、読み取り専用アクセス権を持つファイルを開きます。  
  
 [!code-cpp[file open2\#1](~/samples/snippets/cpp/VS_Snippets_CLR/File Open2/CPP/file open2.cpp#1)]
 [!code-csharp[file open2\#1](~/samples/snippets/csharp/VS_Snippets_CLR/File Open2/CS/file open2.cs#1)]
 [!code-vb[file open2\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File Open2/VB/file open2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列であるか、内容が空白のみであるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の正しくない文字を含んでいます。  
  
 \-または\-  
  
 <paramref name="access" /> に指定された値が <see langword="Read" /> で、かつ <paramref name="mode" /> に <see langword="Create" />、<see langword="CreateNew" />、<see langword="Truncate" /> または <see langword="Append" /> が指定されました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません \(マップされていないドライブ上のパスなど\)。</exception>
        <exception cref="T:System.IO.IOException">ファイルを開くときに、I\/O エラーが発生しました。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" /> に読み取り専用ファイルが指定されましたが、<paramref name="access" /> が <see langword="Read" /> ではありません。  
  
 \-または\-  
  
 <paramref name="path" /> がディレクトリを指定しました。  
  
 \-または\-  
  
 呼び出し元に、必要なアクセス許可がありません。  
  
 \-または\-  
  
 <paramref name="mode" /> が <see cref="F:System.IO.FileMode.Create" /> ですが、指定されたファイルは隠しファイルです。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="mode" /> または <paramref name="access" /> に正しくない値が指定されました。</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="path" /> で指定されたファイルが見つかりませんでした。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が無効です。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading from and writing to the specified file. Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.FileStream Open (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.FileStream Open(string path, valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access, valuetype System.IO.FileShare share) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="share" Type="System.IO.FileShare" />
      </Parameters>
      <Docs>
        <param name="path">開くファイル。</param>
        <param name="mode">ファイルが存在しない場合はファイルを作成するかどうか、既存ファイルの内容を保持するか上書きするかを指定する <see cref="T:System.IO.FileMode" /> 値。</param>
        <param name="access">ファイルで実行できる操作を指定する <see cref="T:System.IO.FileAccess" /> 値。</param>
        <param name="share">他のスレッドがファイルに対して持つアクセス タイプを指定する <see cref="T:System.IO.FileShare" /> 値。</param>
        <summary>読み取り、書き込み、または読み取り\/書き込みアクセスを持つ指定モードと指定した共有オプションで、指定したパスの <see cref="T:System.IO.FileStream" /> を開きます。</summary>
        <returns>読み取り、書き込み、または読み取り\/書き込みアクセスを持つ指定モードと指定した共有オプションで、指定したパスの <see cref="T:System.IO.FileStream" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `path` 相対パスまたは絶対パス情報を指定するパラメーターを許可します。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例は、ファイル共有を禁止して読み取り専用アクセス権を持つファイルを開きます。  
  
 [!code-cpp[file open3\#1](~/samples/snippets/cpp/VS_Snippets_CLR/File Open3/CPP/file open3.cpp#1)]
 [!code-csharp[file open3\#1](~/samples/snippets/csharp/VS_Snippets_CLR/File Open3/CS/file open3.cs#1)]
 [!code-vb[file open3\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File Open3/VB/file open3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の正しくない文字を含んでいます。  
  
 \-または\-  
  
 <paramref name="access" /> に指定された値が <see langword="Read" /> で、かつ <paramref name="mode" /> に <see langword="Create" />、<see langword="CreateNew" />、<see langword="Truncate" /> または <see langword="Append" /> が指定されました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません \(マップされていないドライブ上のパスなど\)。</exception>
        <exception cref="T:System.IO.IOException">ファイルを開くときに、I\/O エラーが発生しました。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" /> に読み取り専用ファイルが指定されましたが、<paramref name="access" /> が <see langword="Read" /> ではありません。  
  
 \-または\-  
  
 <paramref name="path" /> がディレクトリを指定しました。  
  
 \-または\-  
  
 呼び出し元に、必要なアクセス許可がありません。  
  
 \-または\-  
  
 <paramref name="mode" /> は <see cref="F:System.IO.FileMode.Create" /> であり、指定されたファイルは隠しファイルです。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="mode" />、<paramref name="access" />、または <paramref name="share" /> に正しくない値が指定されました。</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="path" /> で指定されたファイルが見つかりませんでした。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が無効です。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading from and writing to the specified file. Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="OpenRead">
      <MemberSignature Language="C#" Value="public static System.IO.FileStream OpenRead (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.FileStream OpenRead(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.OpenRead(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">読み取り用に開かれるファイル。</param>
        <summary>読み取り用の既存のファイルを開きます。</summary>
        <returns>指定したパスの読み取り専用 <see cref="T:System.IO.FileStream" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、 <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%29> コンス トラクターのオーバー ロードで、 <xref:System.IO.FileMode> の値 <xref:System.IO.FileMode.Open>, 、 <xref:System.IO.FileAccess> の値 <xref:System.IO.FileAccess.Read> と <xref:System.IO.FileShare> の値 <xref:System.IO.FileShare.Read>です。  
  
 `path` 相対パスまたは絶対パス情報を指定するパラメーターを許可します。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例では、読み取り用にファイルを開きます。  
  
 [!code-cpp[file openread\#1](~/samples/snippets/cpp/VS_Snippets_CLR/File OpenRead/CPP/file openread.cpp#1)]
 [!code-csharp[file openread\#1](~/samples/snippets/csharp/VS_Snippets_CLR/File OpenRead/CS/file openread.cs#1)]
 [!code-vb[file openread\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File OpenRead/VB/file openread.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列か、空白のみで構成されるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の正しくない文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません \(マップされていないドライブ上のパスなど\)。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" /> はディレクトリを指定しました。  
  
 \-または\-  
  
 呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="path" /> で指定されたファイルが見つかりませんでした。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <exception cref="T:System.IO.IOException">ファイルを開くときに、I\/O エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading from the specified file. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <Member MemberName="OpenText">
      <MemberSignature Language="C#" Value="public static System.IO.StreamReader OpenText (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.StreamReader OpenText(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.OpenText(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">読み取り用に開かれるファイル。</param>
        <summary>読み取り用の既存の UTF\-8 エンコードされたテキスト ファイルを開きます。</summary>
        <returns>指定したパスの <see cref="T:System.IO.StreamReader" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、 <xref:System.IO.StreamReader.%23ctor%28System.String%29> コンス トラクター オーバー ロードします。  
  
 `path` 相対パスまたは絶対パス情報を指定するパラメーターを許可します。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例では、読み取り用にテキスト ファイルを開きます。  
  
 [!code-cpp[file opentext\#1](~/samples/snippets/cpp/VS_Snippets_CLR/File OpenText/CPP/file opentext.cpp#1)]
 [!code-csharp[file opentext\#1](~/samples/snippets/csharp/VS_Snippets_CLR/File OpenText/CS/file opentext.cs#1)]
 [!code-vb[file opentext\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File OpenText/VB/file opentext.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列であるか、空白のみで構成されるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の使用できない文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが無効です \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="path" /> で指定されたファイルが見つかりませんでした。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が無効です。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading from the specified file. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <Member MemberName="OpenWrite">
      <MemberSignature Language="C#" Value="public static System.IO.FileStream OpenWrite (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.FileStream OpenWrite(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.OpenWrite(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">書き込み用に開かれるファイル。</param>
        <summary>書き込み用に、既存のファイルを開くか新しいファイルを作成します。</summary>
        <returns>指定されたパスに置かれている、非共有の <see cref="T:System.IO.FileStream" /> オブジェクト。アクセス許可は <see cref="F:System.IO.FileAccess.Write" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、 <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%29> ファイル モードを設定コンス トラクターのオーバー ロード <xref:System.IO.FileMode.OpenOrCreate>, 、アクセス設定 <xref:System.IO.FileAccess.Write>, 、および共有モードに設定 <xref:System.IO.FileShare.None>します。  
  
 <xref:System.IO.File.OpenWrite%2A> メソッドが 1 つ既に存在する場合はファイルのパスを 1 つが存在しない場合は、新しいファイルを作成、ファイルを開きます。 既存のファイルを既存のテキストに新しいテキストを追加ことはできません。 代わりに、新しい文字で既存の文字を上書きします。 上書きする場合より長い文字列 \(「OpenWrite メソッドのテストはこの」\) と短いほうの文字列 \("2 つ目の実行\]\) などで、ファイルは、混在文字列 \("2 番目 runtest OpenWrite メソッドの"\) です。  
  
 `path` パラメーターは相対パスまたは絶対パス情報を指定できます。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得する、 <xref:System.IO.Directory.GetCurrentDirectory%2A> メソッドです。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例では、読み取りおよび書き込み用のファイルを開きます。  
  
 [!code-cpp[file openwrite\#1](~/samples/snippets/cpp/VS_Snippets_CLR/File OpenWrite/CPP/file openwrite.cpp#1)]
 [!code-csharp[file openwrite\#1](~/samples/snippets/csharp/VS_Snippets_CLR/File OpenWrite/CS/file openwrite.cs#1)]
 [!code-vb[file openwrite\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File OpenWrite/VB/file openwrite.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。  
  
 または  
  
 <paramref name="path" /> が読み取り専用ファイルまたはディレクトリを指定しました。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> が長さ 0 の文字列であるか、空白のみで構成されるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の使用できない文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません \(マップされていないドライブ上のパスなど\)。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が無効です。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for writing to the specified file. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ReadAllBytes">
      <MemberSignature Language="C#" Value="public static byte[] ReadAllBytes (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] ReadAllBytes(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.ReadAllBytes(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">読み取り用に開かれるファイル。</param>
        <summary>バイナリ ファイルを開き、ファイルの内容をバイト配列に読み取った後、ファイルを閉じます。</summary>
        <returns>ファイルの内容を格納しているバイト配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ファイルの内容をバイト配列に読み取りますファイル パスを指定するには、このメソッドは、ファイルを開きますし、そのファイルを閉じます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の正しくない文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満でなければなりません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.IO.IOException">ファイルを開くときに、I\/O エラーが発生しました。</exception>
        <exception cref="T:System.UnauthorizedAccessException">この操作は、現在のプラットフォームではサポートされていません。  
  
 \-または\-  
  
 <paramref name="path" /> がディレクトリを指定しました。  
  
 \-または\-  
  
 呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="path" /> で指定されたファイルが見つかりませんでした。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for access to read from a file or directory. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ReadAllBytesAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;byte[]&gt; ReadAllBytesAsync (string path, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; ReadAllBytesAsync(string path, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.ReadAllBytesAsync(System.String,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAllLines">
      <MemberSignature Language="C#" Value="public static string[] ReadAllLines (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] ReadAllLines(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.ReadAllLines(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">読み取り用に開かれるファイル。</param>
        <summary>テキスト ファイルを開き、ファイルのすべての行を読み取った後、ファイルを閉じます。</summary>
        <returns>ファイルのすべての行を含む文字列配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、ファイルを開き、ファイルの各行を読み取り、文字列配列の要素として各行を追加します。 ファイルを閉じます。 行はライン フィード \('\\n'\) を文字の後にキャリッジ リターン \('\\r'\) のシーケンスとして定義されている、または、キャリッジ リターンとライン フィードのです。 結果の文字列には、終端のキャリッジ リターンとライン フィードはありません。  
  
 このメソッドは、バイト順マークの有無に基づいてファイルのエンコーディングを自動的に検出を試みます。 Utf\-8 エンコード形式および utf\-32 \(ビッグ エンディアンとリトル エンディアンの両方\) を検出できます。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.IO.File.ReadAllLines%2A> ファイルの内容を表示するメソッドです。 この例では、ファイルが作成された、まだ存在しないし、テキストを追加します。  
  
 [!code-csharp[System.IO.File.AllLines\#00](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.File.AllLines/cs/AllText.cs#00)]
 [!code-vb[System.IO.File.AllLines\#00](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.File.AllLines/vb/AllText.vb#00)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> が長さ 0 の文字列であるか、空白のみで構成されるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の正しくない文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満でなければなりません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.IO.IOException">ファイルを開くときに、I\/O エラーが発生しました。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" /> が読み取り専用のファイルを指定しました。  
  
 \-または\-  
  
 この操作は、現在のプラットフォームではサポートされていません。  
  
 \-または\-  
  
 <paramref name="path" /> がディレクトリを指定しました。  
  
 \-または\-  
  
 呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="path" /> で指定されたファイルが見つかりませんでした。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for access to read from a file or directory. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ReadAllLines">
      <MemberSignature Language="C#" Value="public static string[] ReadAllLines (string path, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] ReadAllLines(string path, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.ReadAllLines(System.String,System.Text.Encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="path">読み取り用に開かれるファイル。</param>
        <param name="encoding">ファイルの内容に適用されるエンコーディング。</param>
        <summary>ファイルを開き、指定したエンコーディングが適用されたファイルのすべての行を読み取った後、ファイルを閉じます。</summary>
        <returns>ファイルのすべての行を格納している文字列配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、ファイルを開き、ファイルの各行を読み取り、文字列配列の要素として各行を追加します。 ファイルを閉じます。 行はライン フィード \('\\n'\) を文字の後にキャリッジ リターン \('\\r'\) のシーケンスとして定義されている、または、キャリッジ リターンとライン フィードのです。 結果の文字列には、終端のキャリッジ リターンとライン フィードはありません。  
  
 このメソッドは、バイト順マークの有無に基づいてファイルのエンコーディングを自動的に検出を試みます。 Utf\-8 エンコード形式および utf\-32 \(ビッグ エンディアンとリトル エンディアンの両方\) を検出できます。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.IO.File.ReadAllLines%2A> ファイルの内容を表示するメソッドです。 この例では、ファイルが作成された、まだ存在しないし、テキストを追加します。  
  
 [!code-csharp[System.IO.File.AllLines\_Encoding\#00](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.File.AllLines_Encoding/cs/AllText_Encoding.cs#00)]
 [!code-vb[System.IO.File.AllLines\_Encoding\#00](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.File.AllLines_Encoding/vb/AllText_Encoding.vb#00)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> が長さ 0 の文字列であるか、空白のみで構成されるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の正しくない文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満でなければなりません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.IO.IOException">ファイルを開くときに、I\/O エラーが発生しました。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" /> が読み取り専用のファイルを指定しました。  
  
 \-または\-  
  
 この操作は、現在のプラットフォームではサポートされていません。  
  
 \-または\-  
  
 <paramref name="path" /> がディレクトリを指定しました。  
  
 \-または\-  
  
 呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="path" /> で指定されたファイルが見つかりませんでした。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for access to read from a file or directory. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ReadAllLinesAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;string[]&gt; ReadAllLinesAsync (string path, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;string[]&gt; ReadAllLinesAsync(string path, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.ReadAllLinesAsync(System.String,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAllLinesAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;string[]&gt; ReadAllLinesAsync (string path, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;string[]&gt; ReadAllLinesAsync(string path, class System.Text.Encoding encoding, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.ReadAllLinesAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="encoding">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAllText">
      <MemberSignature Language="C#" Value="public static string ReadAllText (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ReadAllText(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.ReadAllText(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">読み取り用に開かれるファイル。</param>
        <summary>テキスト ファイルを開き、ファイルのすべての行を読み取った後、ファイルを閉じます。</summary>
        <returns>ファイルのすべての行を格納している文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、ファイルを開き、ファイルの各行を読み取り、文字列の要素として各行を追加します。 ファイルを閉じます。 行はライン フィード \('\\n'\) を文字の後にキャリッジ リターン \('\\r'\) のシーケンスとして定義されている、または、キャリッジ リターンとライン フィードのです。 結果の文字列には、終端のキャリッジ リターンとライン フィードはありません。  
  
 このメソッドは、バイト順マークの有無に基づいてファイルのエンコーディングを自動的に検出を試みます。 Utf\-8 エンコード形式および utf\-32 \(ビッグ エンディアンとリトル エンディアンの両方\) を検出できます。  
  
 使用して、 <xref:System.IO.File.ReadAllText%28System.String%2CSystem.Text.Encoding%29> 文字を認識できないために、インポートされたテキストを含む可能性があるファイルを読み取ることがあります読み出せない正しくメソッドのオーバー ロードします。  
  
 例外が発生した場合でも、この方法により、終了するファイル ハンドルが保証されます。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.IO.File.ReadAllText%2A> ファイルの内容を表示するメソッドです。 この例では、ファイルが作成された、まだ存在しないし、テキストを追加します。  
  
 [!code-csharp[System.IO.File.AllText\#00](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.File.AllText/cs/AllText.cs#00)]
 [!code-vb[System.IO.File.AllText\#00](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.File.AllText/vb/AllText.vb#00)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列であるか、空白のみで構成されているか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の正しくない文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満でなければなりません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.IO.IOException">ファイルを開くときに、I\/O エラーが発生しました。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" /> が読み取り専用のファイルを指定しました。  
  
 \-または\-  
  
 この操作は、現在のプラットフォームではサポートされていません。  
  
 \-または\-  
  
 <paramref name="path" /> がディレクトリを指定しました。  
  
 \-または\-  
  
 呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="path" /> で指定されたファイルが見つかりませんでした。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for access to read from a file or directory. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ReadAllText">
      <MemberSignature Language="C#" Value="public static string ReadAllText (string path, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ReadAllText(string path, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.ReadAllText(System.String,System.Text.Encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="path">読み取り用に開かれるファイル。</param>
        <param name="encoding">ファイルの内容に適用されるエンコーディング。</param>
        <summary>ファイルを開き、指定したエンコーディングが適用されたファイルのすべての行を読み取った後、ファイルを閉じます。</summary>
        <returns>ファイルのすべての行を格納している文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、ファイルを開き、ファイルの各行を読み取り、文字列の要素として各行を追加します。 ファイルを閉じます。 行はライン フィード \('\\n'\) を文字の後にキャリッジ リターン \('\\r'\) のシーケンスとして定義されている、または、キャリッジ リターンとライン フィードのです。 結果の文字列には、終端のキャリッジ リターンとライン フィードはありません。  
  
 このメソッドは、バイト順マークの有無に基づいてファイルのエンコーディングを自動的に検出を試みます。 Utf\-8 エンコード形式および utf\-32 \(ビッグ エンディアンとリトル エンディアンの両方\) を検出できます。  
  
 例外が発生した場合でも、この方法により、終了するファイル ハンドルが保証されます。  
  
 オペレーティング システム用に構成されたエンコードの設定を使用する指定、 <xref:System.Text.Encoding.Default%2A?displayProperty=fullName> プロパティを `encoding` パラメーター。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.IO.File.ReadAllText%2A> ファイルの内容を表示するメソッドです。 この例では、ファイルが作成された、まだ存在しないし、テキストを追加します。  
  
 [!code-csharp[System.IO.File.AllText\_Encoding\#00](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.File.AllText_Encoding/cs/AllText.cs#00)]
 [!code-vb[System.IO.File.AllText\_Encoding\#00](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.File.AllText_Encoding/vb/AllText.vb#00)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列であるか、空白のみで構成されているか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の正しくない文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満でなければなりません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.IO.IOException">ファイルを開くときに、I\/O エラーが発生しました。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" /> が読み取り専用のファイルを指定しました。  
  
 \-または\-  
  
 この操作は、現在のプラットフォームではサポートされていません。  
  
 \-または\-  
  
 <paramref name="path" /> がディレクトリを指定しました。  
  
 \-または\-  
  
 呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="path" /> で指定されたファイルが見つかりませんでした。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for access to read from a file or directory. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ReadAllTextAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;string&gt; ReadAllTextAsync (string path, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;string&gt; ReadAllTextAsync(string path, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.ReadAllTextAsync(System.String,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAllTextAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;string&gt; ReadAllTextAsync (string path, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;string&gt; ReadAllTextAsync(string path, class System.Text.Encoding encoding, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.ReadAllTextAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="encoding">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadLines">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; ReadLines (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; ReadLines(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.ReadLines(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">読み取るファイル。</param>
        <summary>ファイルの行を読み取ります。</summary>
        <returns>ファイルのすべての行、またはクエリの結果の行。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.File.ReadLines%2A> と <xref:System.IO.File.ReadAllLines%2A> メソッドは次のように異なります: を使用すると <xref:System.IO.File.ReadLines%2A>, 、コレクション全体が返される前に、文字列のコレクションの列挙を開始することができます。 使用すると <xref:System.IO.File.ReadAllLines%2A>, 、配列にアクセスする前に、文字列の配列全体は返されるのを待つ必要があります。 非常に大きなファイルを操作する場合にそのため、 <xref:System.IO.File.ReadLines%2A> 効率的であることができます。  
  
 使用することができます、 <xref:System.IO.File.ReadLines%2A> メソッドを次の操作します。  
  
-   実行 [Linq to Object](http://msdn.microsoft.com/ja-jp/73cafe73-37cf-46e7-bfa7-97c7eea7ced9) をフィルター選択された一連の行を取得するファイルをクエリします。  
  
-   ファイルに返される行のコレクションを記述、 <xref:System.IO.File.WriteAllLines%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29?displayProperty=fullName> メソッド、または既存のファイルに追加する際、 <xref:System.IO.File.AppendAllLines%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29?displayProperty=fullName> メソッドです。  
  
-   受け取るコレクションの直後に設定されているインスタンスを作成、 <xref:System.Collections.Generic.IEnumerable%601> 、コンス トラクターの文字列のコレクションなど、 <xref:System.Collections.Generic.IList%601> または <xref:System.Collections.Generic.Queue%601>です。  
  
 このメソッドを使用して <xref:System.Text.Encoding.UTF8%2A> エンコーディングの値にします。  
  
   
  
## 例  
 次の例では、指定した文字列を含む行を検索するファイルの行を読み取ります。  
  
 [!code-csharp[System.IO.File.ReadLines\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.file.readlines/cs/program.cs#1)]
 [!code-vb[System.IO.File.ReadLines\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.file.readlines/vb/program.vb#1)]  
  
 次の例では、 <xref:System.IO.File.ReadLines%2A> .txt 拡張子を持つファイルのすべてのディレクトリを列挙する LINQ クエリ内のメソッドが、ファイルの各行を読み取り、文字列"Microsoft"が含まれている場合、行が表示されます。  
  
 [!code-csharp[System.IO.Directory.EnumerateFiles\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.directory.enumeratefiles/cs/program.cs#1)]
 [!code-vb[System.IO.Directory.EnumerateFiles\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.directory.enumeratefiles/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さゼロの文字列で、空白のみで構成されているか、または <see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドで定義される 1 つ以上の無効な文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="path" /> が有効ではありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="path" /> によって指定されたファイルが見つかりませんでした。</exception>
        <exception cref="T:System.IO.IOException">ファイルを開くときに、I\/O エラーが発生しました。</exception>
        <exception cref="T:System.IO.PathTooLongException">
          <paramref name="path" /> がシステムで定義されている最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" /> は読み取り専用のファイルを指定します。  
  
 または  
  
 この操作は、現在のプラットフォームではサポートされていません。  
  
 または  
  
 <paramref name="path" /> はディレクトリです。  
  
 または  
  
 呼び出し元に、必要なアクセス許可がありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadLines">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; ReadLines (string path, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; ReadLines(string path, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.ReadLines(System.String,System.Text.Encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="path">読み取るファイル。</param>
        <param name="encoding">ファイルの内容に適用されるエンコーディング。</param>
        <summary>指定された方法でエンコーディングされたファイルの行を読み取ります。</summary>
        <returns>ファイルのすべての行、またはクエリの結果の行。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用すると、ファイルの読み取りを使用するのにエンコーディングを指定できます。  
  
 <xref:System.IO.File.ReadLines%2A> と <xref:System.IO.File.ReadAllLines%2A> メソッドは次のように異なります。 を使用すると <xref:System.IO.File.ReadLines%2A>, 、コレクション全体が返される前に、文字列のコレクションを列挙することができます。 使用すると <xref:System.IO.File.ReadAllLines%2A>, 、配列にアクセスする前に、文字列の配列全体は返されるを待つ必要があります。 非常に大きなファイルを操作する場合にそのため、 <xref:System.IO.File.ReadLines%2A> 効率的であることができます。  
  
 使用することができます、 <xref:System.IO.File.ReadLines%2A> メソッドを次の操作します。  
  
-   実行 [Linq to Object](http://msdn.microsoft.com/ja-jp/73cafe73-37cf-46e7-bfa7-97c7eea7ced9) をフィルター選択された一連の行を取得するファイルをクエリします。  
  
-   ファイルに返される行のコレクションを記述、 <xref:System.IO.File.WriteAllLines%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%2CSystem.Text.Encoding%29?displayProperty=fullName> メソッド、または既存のファイルに追加する際、 <xref:System.IO.File.AppendAllLines%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%2CSystem.Text.Encoding%29?displayProperty=fullName> メソッドです。  
  
-   受け取るコレクションの直後に設定されているインスタンスを作成、 <xref:System.Collections.Generic.IEnumerable%601> 、コンス トラクターの文字列のコレクションなど、 <xref:System.Collections.Generic.IList%601> または <xref:System.Collections.Generic.Queue%601>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さゼロの文字列で、空白のみで構成されているか、または <see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドで定義されるように 1 つ以上の無効な文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="path" /> が有効ではありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="path" /> によって指定されたファイルが見つかりませんでした。</exception>
        <exception cref="T:System.IO.IOException">ファイルを開くときに、I\/O エラーが発生しました。</exception>
        <exception cref="T:System.IO.PathTooLongException">
          <paramref name="path" /> がシステムで定義されている最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" /> は読み取り専用のファイルを指定します。  
  
 または  
  
 この操作は、現在のプラットフォームではサポートされていません。  
  
 または  
  
 <paramref name="path" /> はディレクトリです。  
  
 または  
  
 呼び出し元に、必要なアクセス許可がありません。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Replace">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したファイルの内容を別のファイルの内容に置き換えます。置き換えによって元のファイルは削除され、置き換えられたファイルのバックアップが作成されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.File.Replace%2A> メソッドでは、指定したファイルの内容を置き換える別のファイルの内容を使用します。  また、置き換えられたファイルのバックアップを作成します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static void Replace (string sourceFileName, string destinationFileName, string destinationBackupFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.Replace(System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="destinationBackupFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">
          <c>destinationFileName</c> で指定したファイルを置き換えるファイルの名前。</param>
        <param name="destinationFileName">置き換えられるファイルの名前。</param>
        <param name="destinationBackupFileName">バックアップ ファイルの名前。</param>
        <summary>指定したファイルの内容を別のファイルの内容に置き換えます。置き換えによって元のファイルは削除され、置き換えられたファイルのバックアップが作成されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.File.Replace%2A> メソッドが別のファイルの内容と、指定されたファイルの内容を置き換えます。  また、置き換えられたファイルのバックアップを作成します。  
  
 場合、 `sourceFileName` と `destinationFileName` は異なるボリュームにこのメソッドで例外が発生します。 場合、 `destinationBackupFileName` はソース ファイルから別のボリューム、バックアップ ファイルは削除されます。  
  
 渡す `null` に、 `destinationBackupFileName` パラメーターが置き換えられるファイルのバックアップを作成したくない場合。  
  
   
  
## 例  
 次のコード例では、 <xref:System.IO.File.Replace%2A> メソッドを別のファイルを使用してファイルを置換し、置き換えられたファイルのバックアップを作成します。  
  
 [!code-cpp[IO.File.Replace\#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.File.Replace/cpp/sample.cpp#1)]
 [!code-csharp[IO.File.Replace\#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.File.Replace/CS/sample.cs#1)]
 [!code-vb[IO.File.Replace\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.File.Replace/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationFileName" /> パラメーターが示すパスは正しい書式ではありませんでした。  
  
 または  
  
 <paramref name="destinationBackupFileName" /> パラメーターが示すパスは正しい書式ではありませんでした。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.DriveNotFoundException">正しくないドライブが指定されました。</exception>
        <exception cref="T:System.IO.FileNotFoundException">現在の <see cref="T:System.IO.FileInfo" /> オブジェクトが示すファイルが見つかりませんでした。  
  
 または  
  
 <paramref name="destinationBackupFileName" /> パラメーターが示すファイルが見つかりませんでした。</exception>
        <exception cref="T:System.IO.IOException">ファイルを開くときに、I\/O エラーが発生しました。  
  
 または  
  
 <paramref name="sourceFileName" /> および <paramref name="destinationFileName" /> パラメーターは、同じファイルを指定します。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満でなければなりません。</exception>
        <exception cref="T:System.PlatformNotSupportedException">オペレーティング システムは Windows 98 Second Edition 以前であり、ファイル システムは NTFS ではありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="sourceFileName" /> または <paramref name="destinationFileName" /> パラメーターに読み取り専用のファイルを指定します。  
  
 または  
  
 この操作は、現在のプラットフォームではサポートされていません。  
  
 または  
  
 ソースまたはターゲットのパラメーターは、ファイルの代わりにディレクトリを指定します。  
  
 または  
  
 呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for permission to write to file described by the **parameterReference tag is not supported!!!!**  
 parameter if one is specified. Security action: Demand. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static void Replace (string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.Replace(System.String,System.String,System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="destinationBackupFileName" Type="System.String" />
        <Parameter Name="ignoreMetadataErrors" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">
          <c>destinationFileName</c> で指定したファイルを置き換えるファイルの名前。</param>
        <param name="destinationFileName">置き換えられるファイルの名前。</param>
        <param name="destinationBackupFileName">バックアップ ファイルの名前。</param>
        <param name="ignoreMetadataErrors">置換されるファイルから置換ファイルへのマージ エラー \(属性やアクセス制御リスト \(ACL: Access Control List\) など\) を無視する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>指定したファイルの内容を別のファイルの内容に置き換えます。置き換えによって元のファイルは削除され、置き換えられたファイルのバックアップが作成されます。オプションで、マージ エラーを無視することもできます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.File.Replace%2A> メソッドが別のファイルの内容と、指定されたファイルの内容を置き換えます。  また、置き換えられたファイルのバックアップを作成します。  
  
 場合、 `sourceFileName` と `destinationFileName` は異なるボリュームにこのメソッドで例外が発生します。 場合、 `destinationBackupFileName` はソース ファイルから別のボリューム、バックアップ ファイルは削除されます。  
  
 渡す `null` に、 `destinationBackupFileName` パラメーターが置き換えられるファイルのバックアップを作成したくない場合。  
  
   
  
## 例  
 次のコード例では、 <xref:System.IO.File.Replace%2A> メソッドを別のファイルを使用してファイルを置換し、置き換えられたファイルのバックアップを作成します。  
  
 [!code-cpp[IO.File.Replace\#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.File.Replace/cpp/sample.cpp#1)]
 [!code-csharp[IO.File.Replace\#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.File.Replace/CS/sample.cs#1)]
 [!code-vb[IO.File.Replace\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.File.Replace/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationFileName" /> パラメーターが示すパスが正しい書式ではありませんでした。  
  
 または  
  
 <paramref name="destinationBackupFileName" /> パラメーターが示すパスは正しい書式ではありませんでした。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.DriveNotFoundException">正しくないドライブが指定されました。</exception>
        <exception cref="T:System.IO.FileNotFoundException">現在の <see cref="T:System.IO.FileInfo" /> オブジェクトが示すファイルが見つかりませんでした。  
  
 または  
  
 <paramref name="destinationBackupFileName" /> パラメーターが示すファイルが見つかりませんでした。</exception>
        <exception cref="T:System.IO.IOException">ファイルを開くときに、I\/O エラーが発生しました。  
  
 または  
  
 <paramref name="sourceFileName" /> および <paramref name="destinationFileName" /> パラメーターは、同じファイルを指定します。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満でなければなりません。</exception>
        <exception cref="T:System.PlatformNotSupportedException">オペレーティング システムは Windows 98 Second Edition 以前であり、ファイル システムは NTFS ではありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="sourceFileName" /> または <paramref name="destinationFileName" /> パラメーターに読み取り専用のファイルを指定します。  
  
 または  
  
 この操作は、現在のプラットフォームではサポートされていません。  
  
 または  
  
 ソースまたはターゲットのパラメーターは、ファイルの代わりにディレクトリを指定します。  
  
 または  
  
 呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for permission to write to file described by the **parameterReference tag is not supported!!!!**  
 parameter if one is specified. Security action: Demand. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetAccessControl">
      <MemberSignature Language="C#" Value="public static void SetAccessControl (string path, System.Security.AccessControl.FileSecurity fileSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetAccessControl(string path, class System.Security.AccessControl.FileSecurity fileSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="fileSecurity" Type="System.Security.AccessControl.FileSecurity" />
      </Parameters>
      <Docs>
        <param name="path">アクセス制御リスト \(ACL\) のエントリの追加または削除の対象となるファイル。</param>
        <param name="fileSecurity">
          <see cref="T:System.Security.AccessControl.FileSecurity" /> パラメーターによって記述されるファイルに適用する ACL エントリを記述する <c>path</c> オブジェクト。</param>
        <summary>
          <see cref="T:System.Security.AccessControl.FileSecurity" /> オブジェクトによって記述されるアクセス制御リスト \(ACL: Access Control List\) のエントリを、指定したファイルに適用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.File.SetAccessControl%2A> メソッドが継承されない ACL リストを表すファイルにアクセス制御リスト \(ACL\) エントリを適用します。  
  
> [!CAUTION]
>  ACL に指定された、 `fileSecurity` パラメーターは、ファイルの既存の ACL を置き換えます。 新しいユーザーのアクセス許可を追加するには、使用、 <xref:System.IO.File.GetAccessControl%2A> メソッドは、既存の ACL を取得して、変更を使用して、 <xref:System.IO.File.SetAccessControl%2A> ファイルに適用します。  
  
 ACL は、個人やグループがある、または権限がない、特定のファイルの特定のアクションにユーザーを示します。 詳細については、「[How to: Add or Remove an Access Control List Entry](http://msdn.microsoft.com/ja-jp/53758b39-bd9b-4640-bb04-cad5ed8d0abf)」を参照してください。  
  
 <xref:System.IO.File.SetAccessControl%2A> メソッドにのみが引き続き発生する <xref:System.Security.AccessControl.FileSecurity> オブジェクトの作成後に変更されたオブジェクト。  場合、 <xref:System.Security.AccessControl.FileSecurity> オブジェクトが変更されていない、ファイルに保持されません。  したがって、取得することはありません、 <xref:System.Security.AccessControl.FileSecurity> 1 つのファイルからオブジェクトし、別のファイルを同じオブジェクトを再適用します。  
  
 ACL の情報を別の 1 つのファイルにコピーします。 する  
  
1.  使用して、 <xref:System.IO.File.GetAccessControl%2A> を取得するメソッド、 <xref:System.Security.AccessControl.FileSecurity> ソース ファイルからのオブジェクト。  
  
2.  新しい <xref:System.Security.AccessControl.FileSecurity> 先のファイル オブジェクトです。  
  
3.  使用して、 <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm%2A> または <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> メソッドのソースの <xref:System.Security.AccessControl.FileSecurity> ACL 情報を取得するオブジェクト。  
  
4.  使用して、 <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm%2A> または <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> に情報をコピーする方法が先に手順 3 で取得した <xref:System.Security.AccessControl.FileSecurity> オブジェクトです。  
  
5.  リンク先を設定 <xref:System.Security.AccessControl.FileSecurity> 変換先のファイルを使用するオブジェクト、 <xref:System.IO.File.SetAccessControl%2A> メソッドです。  
  
 NTFS の環境で <xref:System.Security.AccessControl.FileSystemRights.ReadAttributes> と <xref:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes> 場合は、ユーザーがあるユーザーに付与されます <xref:System.Security.AccessControl.FileSystemRights.ListDirectory> 親フォルダーの権限です。 拒否する <xref:System.Security.AccessControl.FileSystemRights.ReadAttributes> と <xref:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes>, 、拒否 <xref:System.Security.AccessControl.FileSystemRights.ListDirectory> 親ディレクトリにします。  
  
   
  
## 例  
 次のコード例では、 <xref:System.IO.File.GetAccessControl%2A> と <xref:System.IO.File.SetAccessControl%2A> メソッドを追加し、削除、アクセス制御リスト \(ACL\) エントリをファイルからです。  この例を実行するには、有効なユーザーまたはグループ アカウントを指定する必要があります。  
  
 [!code-cpp[IO.File.GetAccessControl\-SetAccessControl\#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.File.GetAccessControl-SetAccessControl/cpp/sample.cpp#1)]
 [!code-csharp[IO.File.GetAccessControl\-SetAccessControl\#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.File.GetAccessControl-SetAccessControl/CS/sample.cs#1)]
 [!code-vb[IO.File.GetAccessControl\-SetAccessControl\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.File.GetAccessControl-SetAccessControl/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">ファイルを開くときに、I\/O エラーが発生しました。</exception>
        <exception cref="T:System.Runtime.InteropServices.SEHException">
          <paramref name="path" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.SystemException">ファイルが見つかりませんでした。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" /> パラメーターに読み取り専用のファイルが指定されています。  
  
 または  
  
 この操作は、現在のプラットフォームではサポートされていません。  
  
 または  
  
 <paramref name="path" /> パラメーターにディレクトリが指定されています。  
  
 または  
  
 呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="fileSecurity" /> パラメーターが <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for permission to access the file. Security action: Demand. Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.NoAccess" />, <see cref="F:System.Security.AccessControl.AccessControlActions.Change" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="SetAttributes">
      <MemberSignature Language="C#" Value="public static void SetAttributes (string path, System.IO.FileAttributes fileAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetAttributes(string path, valuetype System.IO.FileAttributes fileAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="fileAttributes" Type="System.IO.FileAttributes" />
      </Parameters>
      <Docs>
        <param name="path">ファイルへのパス。</param>
        <param name="fileAttributes">列挙値のビットごとの組み合わせ。</param>
        <summary>指定したパスでファイルの指定された <see cref="T:System.IO.FileAttributes" /> を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `path` 相対パスまたは絶対パス情報を指定するパラメーターを許可します。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 など、特定のファイル属性、 <xref:System.IO.FileAttributes.Hidden> と <xref:System.IO.FileAttributes.ReadOnly>, を組み合わせることができます。 などの他の属性 <xref:System.IO.FileAttributes.Normal>, 、単独で使用する必要があります。  
  
 圧縮状態を変更することはできません、 <xref:System.IO.File> オブジェクトを使用して、 <xref:System.IO.File.SetAttributes%2A> メソッドです。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例で、 `GetAttributes` と `SetAttributes` を適用してメソッド、 `Archive` と `Hidden` ファイル属性します。  
  
 [!code-cpp[File GetAttributes\#1](~/samples/snippets/cpp/VS_Snippets_CLR/File GetAttributes/CPP/file getattributes.cpp#1)]
 [!code-csharp[File GetAttributes\#1](~/samples/snippets/csharp/VS_Snippets_CLR/File GetAttributes/CS/file getattributes.cs#1)]
 [!code-vb[File GetAttributes\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File GetAttributes/VB/file getattributes.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> が空か、空白文字だけを含むか、正しくない文字を含むか、ファイル属性が正しくありません。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません \(マップされていないドライブ上のパスなど\)。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが見つかりません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" /> が読み取り専用のファイルを指定しました。  
  
 \-または\-  
  
 この操作は、現在のプラットフォームではサポートされていません。  
  
 \-または\-  
  
 <paramref name="path" /> がディレクトリを指定しました。  
  
 \-または\-  
  
 呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading and writing files. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="SetCreationTime">
      <MemberSignature Language="C#" Value="public static void SetCreationTime (string path, DateTime creationTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCreationTime(string path, valuetype System.DateTime creationTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.SetCreationTime(System.String,System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="creationTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="path">作成日時情報を設定する対象のファイル。</param>
        <param name="creationTime">
          <c>path</c> の作成日時の設定値を含む <see cref="T:System.DateTime" />。 この値は現地時刻で表示されます。</param>
        <summary>ファイルが作成された日付と時刻を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `path` 相対パスまたは絶対パス情報を指定するパラメーターを許可します。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 NTFS でフォーマットされたドライブは、ファイルのメタ情報、短時間に、ファイルの作成日時などをキャッシュすることができます。 その結果、明示的に上書きするか、既存のファイルを置き換えている場合、ファイルの作成日時を設定する必要があります。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">指定したパスが見つかりませんでした。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列であるか、内容が空白のみであるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の正しくない文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.IO.IOException">操作の実行中に I\/O エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="creationTime" /> は、この操作に許可される日付または時刻のいずれか、またはその両方の範囲外の値を指定しています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for writing to the specified file. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="SetCreationTimeUtc">
      <MemberSignature Language="C#" Value="public static void SetCreationTimeUtc (string path, DateTime creationTimeUtc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCreationTimeUtc(string path, valuetype System.DateTime creationTimeUtc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.SetCreationTimeUtc(System.String,System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="creationTimeUtc" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="path">作成日時情報を設定する対象のファイル。</param>
        <param name="creationTimeUtc">
          <c>path</c> の作成日時の設定値を含む <see cref="T:System.DateTime" />。 この値は UTC 時刻で表現されます。</param>
        <summary>ファイルが作成された日付と時刻を世界協定時刻 \(UTC\) で設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `path` 相対パスまたは絶対パス情報を指定するパラメーターを許可します。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 NTFS でフォーマットされたドライブは、ファイルのメタ情報、短時間に、ファイルの作成日時などをキャッシュすることができます。 その結果、明示的に上書きするか、既存のファイルを置き換えている場合、ファイルの作成日時を設定する必要があります。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">指定したパスが見つかりませんでした。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列であるか、内容が空白のみであるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の正しくない文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.IO.IOException">操作の実行中に I\/O エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="creationTime" /> は、この操作に許可される日付または時刻のいずれか、またはその両方の範囲外の値を指定しています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for writing to the specified file. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="SetLastAccessTime">
      <MemberSignature Language="C#" Value="public static void SetLastAccessTime (string path, DateTime lastAccessTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetLastAccessTime(string path, valuetype System.DateTime lastAccessTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.SetLastAccessTime(System.String,System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="lastAccessTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="path">アクセス日時情報を設定する対象のファイル。</param>
        <param name="lastAccessTime">
          <see cref="T:System.DateTime" /> に最後にアクセスした日付と時刻の設定値を含む <c>path</c>。 この値は現地時刻で表示されます。</param>
        <summary>指定したファイルに最後にアクセスした日付と時刻を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `path` 相対パスまたは絶対パス情報を指定するパラメーターを許可します。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例は、によってファイル システムを作成すると、必要に応じて、指定したファイルにチェックしを設定し、最終アクセス日時を取得します。  
  
 [!code-cpp[file setlastaccess\#1](~/samples/snippets/cpp/VS_Snippets_CLR/File SetLastAccess/CPP/file setlastaccess.cpp#1)]
 [!code-csharp[file setlastaccess\#1](~/samples/snippets/csharp/VS_Snippets_CLR/File SetLastAccess/CS/file setlastaccess.cs#1)]
 [!code-vb[file setlastaccess\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File SetLastAccess/VB/file setlastaccess.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列か、空白のみで構成されるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の正しくない文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.IO.FileNotFoundException">指定したパスが見つかりませんでした。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="lastAccessTime" /> はこの操作に許可される日付または時刻の範囲外の値を指定します。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for writing to the specified file. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="SetLastAccessTimeUtc">
      <MemberSignature Language="C#" Value="public static void SetLastAccessTimeUtc (string path, DateTime lastAccessTimeUtc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetLastAccessTimeUtc(string path, valuetype System.DateTime lastAccessTimeUtc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.SetLastAccessTimeUtc(System.String,System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="lastAccessTimeUtc" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="path">アクセス日時情報を設定する対象のファイル。</param>
        <param name="lastAccessTimeUtc">
          <c>path</c> に最後にアクセスした日付と時刻の設定値を含む <see cref="T:System.DateTime" />。 この値は UTC 時刻で表記されます。</param>
        <summary>指定したファイルに最後にアクセスした日付と時刻を世界協定時刻 \(UTC\) で設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `path` 相対パスまたは絶対パス情報を指定するパラメーターを許可します。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> が長さ 0 の文字列であるか、空白のみで構成されるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の正しくない文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.IO.FileNotFoundException">指定したパスが見つかりませんでした。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="lastAccessTimeUtc" /> はこの操作に許可される日付または時刻の範囲外の値を指定します。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for writing to the specified file. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="SetLastWriteTime">
      <MemberSignature Language="C#" Value="public static void SetLastWriteTime (string path, DateTime lastWriteTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetLastWriteTime(string path, valuetype System.DateTime lastWriteTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.SetLastWriteTime(System.String,System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="lastWriteTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="path">日時情報を設定する対象のファイル。</param>
        <param name="lastWriteTime">
          <see cref="T:System.DateTime" /> に最後に書き込んだ日付と時刻の設定値を含む <c>path</c>。 この値は現地時刻で表示されます。</param>
        <summary>指定したファイルに最後に書き込んだ日付と時刻を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `path` 相対パスまたは絶対パス情報を指定するパラメーターを許可します。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例は、必要に応じて、ファイルを作成する、指定したファイルのファイル システムを確認しを設定し、ファイルの最終書き込み時刻を取得します。  
  
 [!code-cpp[file setlastwrite\#1](~/samples/snippets/cpp/VS_Snippets_CLR/File SetLastWrite/CPP/file setlastwrite.cpp#1)]
 [!code-csharp[file setlastwrite\#1](~/samples/snippets/csharp/VS_Snippets_CLR/File SetLastWrite/CS/file setlastwrite.cs#1)]
 [!code-vb[file setlastwrite\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File SetLastWrite/VB/file setlastwrite.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列か、空白のみで構成されるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の正しくない文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.IO.FileNotFoundException">指定したパスが見つかりませんでした。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="lastWriteTime" /> はこの操作に許可される日付または時刻の範囲外の値を指定します。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for writing to the specified file. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="SetLastWriteTimeUtc">
      <MemberSignature Language="C#" Value="public static void SetLastWriteTimeUtc (string path, DateTime lastWriteTimeUtc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetLastWriteTimeUtc(string path, valuetype System.DateTime lastWriteTimeUtc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.SetLastWriteTimeUtc(System.String,System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="lastWriteTimeUtc" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="path">日時情報を設定する対象のファイル。</param>
        <param name="lastWriteTimeUtc">
          <c>path</c> に最後に書き込んだ日付と時刻の設定値を含む <see cref="T:System.DateTime" />。 この値は UTC 時刻で表現されます。</param>
        <summary>指定したファイルに最後に書き込んだ日付と時刻を世界協定時刻 \(UTC\) で設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `path` 相対パスまたは絶対パス情報を指定するパラメーターを許可します。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> が長さ 0 の文字列であるか、空白のみで構成されるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の正しくない文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.IO.FileNotFoundException">指定したパスが見つかりませんでした。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="lastWriteTimeUtc" /> はこの操作に許可される日付または時刻の範囲外の値を指定します。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for writing to the specified file. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="WriteAllBytes">
      <MemberSignature Language="C#" Value="public static void WriteAllBytes (string path, byte[] bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteAllBytes(string path, unsigned int8[] bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.WriteAllBytes(System.String,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="bytes" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="path">書き込み先のファイル。</param>
        <param name="bytes">ファイルに書き込むバイト。</param>
        <summary>新しいファイルを作成し、指定されたバイト配列をそのファイルに書き込んだ後、ファイルを閉じます。 既存のターゲット ファイルは上書きされます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 バイト配列とファイルのパスを指定するには、このメソッドは、指定したファイルを開き、バイト配列の内容をファイルに書き込み、ファイルを閉じます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の正しくない文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> であるか、またはバイト配列が空です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満でなければなりません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.IO.IOException">ファイルを開くときに、I\/O エラーが発生しました。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" /> が読み取り専用のファイルを指定しました。  
  
 \-または\-  
  
 この操作は、現在のプラットフォームではサポートされていません。  
  
 \-または\-  
  
 <paramref name="path" /> がディレクトリを指定しました。  
  
 \-または\-  
  
 呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for access to write to a file or directory. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="WriteAllBytesAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task WriteAllBytesAsync (string path, byte[] bytes, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task WriteAllBytesAsync(string path, unsigned int8[] bytes, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.WriteAllBytesAsync(System.String,System.Byte[],System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="bytes">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAllLines">
      <MemberSignature Language="C#" Value="public static void WriteAllLines (string path, System.Collections.Generic.IEnumerable&lt;string&gt; contents);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteAllLines(string path, class System.Collections.Generic.IEnumerable`1&lt;string&gt; contents) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="contents" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="path">書き込み先のファイル。</param>
        <param name="contents">ファイルに書き込む行。</param>
        <summary>新しいファイルを作成し、文字列のコレクションをそのファイルに書き込んでから、そのファイルを閉じます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の動作、<xref:System.IO.File.WriteAllLines%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29>方法は、バイト順マーク \(BOM\) なしの utf\-8 エンコーディングを使用してデータを記述します。 ファイルの先頭に、バイト順マークなどの utf\-8 識別子を含める必要がある場合を使用して、<xref:System.IO.File.WriteAllLines%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%2CSystem.Text.Encoding%29>とメソッドのオーバー ロード<xref:System.Text.Encoding.UTF8%2A>エンコードします。  
  
 既存のターゲット ファイルは上書きされます。  
  
 このメソッドを使用するには、内容を受け取るコレクション クラスを作成する、 <xref:System.Collections.Generic.IEnumerable%601> 、コンス トラクターなど、 <xref:System.Collections.Generic.List%601.%23ctor%2A>、 <xref:System.Collections.Generic.HashSet%601.%23ctor%2A>、または<xref:System.Collections.Generic.SortedSet%601.%23ctor%2A>クラスです。  
  
   
  
## 例  
 次の例では、選択した行をサンプル データ ファイルからファイルに書き込みます。  
  
 [!code-csharp[System.IO.File.WriteAllAppendAll\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.file.writeallappendall/cs/program.cs#1)]
 [!code-vb[System.IO.File.WriteAllAppendAll\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.file.writeallappendall/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さゼロの文字列で、空白のみで構成されているか、または <see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドで定義される 1 つ以上の無効な文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name=" path " /> または <paramref name="contents" /> のいずれかが <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="path" /> が有効ではありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.IO.IOException">ファイルを開くときに、I\/O エラーが発生しました。</exception>
        <exception cref="T:System.IO.PathTooLongException">
          <paramref name="path" /> がシステムで定義されている最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" /> は読み取り専用のファイルを指定します。  
  
 または  
  
 この操作は、現在のプラットフォームではサポートされていません。  
  
 または  
  
 <paramref name="path" /> はディレクトリです。  
  
 または  
  
 呼び出し元に、必要なアクセス許可がありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAllLines">
      <MemberSignature Language="C#" Value="public static void WriteAllLines (string path, string[] contents);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteAllLines(string path, string[] contents) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.WriteAllLines(System.String,System.String[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="contents" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="path">書き込み先のファイル。</param>
        <param name="contents">ファイルに書き込む文字列配列。</param>
        <summary>新しいファイルを作成し、指定した文字列配列をそのファイルに書き込んだ後、ファイルを閉じます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既存のターゲット ファイルは上書きされます。  
  
 既定の動作、 <xref:System.IO.File.WriteAllLines%2A> メソッドは、バイト順マーク \(BOM\) なしの utf\-8 エンコーディングを使用してデータを書き込むには。 使用して、ファイルの先頭のバイト順マークなどの utf\-8 識別子を含める必要がある場合、 <xref:System.IO.File.WriteAllLines%28System.String%2CSystem.String%5B%5D%2CSystem.Text.Encoding%29> メソッドのオーバー ロードで <xref:System.Text.Encoding.UTF8%2A> エンコードします。  
  
 文字列配列とファイルのパスを指定するには、このメソッドは、指定したファイルを開き、文字列配列をファイルに書き込んで、後、ファイルを閉じます。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.IO.File.WriteAllLines%2A> にテキストをファイルに書き込みます。 この例では、ファイルが作成された、まだ存在しないし、テキストを追加します。  
  
 [!code-csharp[System.IO.File.AllLines\#00](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.File.AllLines/cs/AllText.cs#00)]
 [!code-vb[System.IO.File.AllLines\#00](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.File.AllLines/vb/AllText.vb#00)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列であるか、空白のみで構成されるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の使用できない文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> または <paramref name="contents" /> のいずれかが <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満でなければなりません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.IO.IOException">ファイルを開くときに、I\/O エラーが発生しました。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" /> が読み取り専用のファイルを指定しました。  
  
 \-または\-  
  
 この操作は、現在のプラットフォームではサポートされていません。  
  
 \-または\-  
  
 <paramref name="path" /> がディレクトリを指定しました。  
  
 \-または\-  
  
 呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for access to write to a file or directory. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="WriteAllLines">
      <MemberSignature Language="C#" Value="public static void WriteAllLines (string path, System.Collections.Generic.IEnumerable&lt;string&gt; contents, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteAllLines(string path, class System.Collections.Generic.IEnumerable`1&lt;string&gt; contents, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="contents" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="path">書き込み先のファイル。</param>
        <param name="contents">ファイルに書き込む行。</param>
        <param name="encoding">使用する文字エンコーディング。</param>
        <summary>指定されたエンコーディングを使用して新しいファイルを作成し、文字列のコレクションをそのファイルに書き込んでから、そのファイルを閉じます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既存のターゲット ファイルは上書きされます。  
  
 このメソッドを使用して、以下を含むファイルを作成することができます。  
  
-   結果、 [LINQ to Objects](http://msdn.microsoft.com/ja-jp/73cafe73-37cf-46e7-bfa7-97c7eea7ced9) を使用して取得時に、ファイルの行にクエリを <xref:System.IO.File.ReadLines%2A> メソッドです。  
  
-   実装するコレクションの内容、 <xref:System.Collections.Generic.IEnumerable%601> 文字列。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さゼロの文字列で、空白のみで構成されているか、または <see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドで定義される 1 つ以上の無効な文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name=" path" />、<paramref name=" contents" />、または <paramref name="encoding" /> のいずれかが <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="path" /> が有効ではありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.IO.IOException">ファイルを開くときに、I\/O エラーが発生しました。</exception>
        <exception cref="T:System.IO.PathTooLongException">
          <paramref name="path" /> がシステムで定義されている最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" /> は読み取り専用のファイルを指定します。  
  
 または  
  
 この操作は、現在のプラットフォームではサポートされていません。  
  
 または  
  
 <paramref name="path" /> はディレクトリです。  
  
 または  
  
 呼び出し元に、必要なアクセス許可がありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAllLines">
      <MemberSignature Language="C#" Value="public static void WriteAllLines (string path, string[] contents, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteAllLines(string path, string[] contents, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.WriteAllLines(System.String,System.String[],System.Text.Encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="contents" Type="System.String[]" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="path">書き込み先のファイル。</param>
        <param name="contents">ファイルに書き込む文字列配列。</param>
        <param name="encoding">文字列配列に適用された文字エンコーディングを表す <see cref="T:System.Text.Encoding" /> オブジェクト。</param>
        <summary>新しいファイルを作成し、指定されたエンコーディングを使用することにより、指定された文字列配列をそのファイルに書き込んでから、そのファイルを閉じます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既存のターゲット ファイルは上書きされます。  
  
 文字列配列とファイルのパスを指定するには、このメソッドは、指定したファイルを開き、文字列の配列を指定したエンコーディングを使用してファイルに書き込みます、ファイルを閉じます。  
  
   
  
## 例  
 次のコード例では、使用、 [WriteAllLines メソッド \(String, String\<xref:System.IO.File.WriteAllLines%2A> にテキストをファイルに書き込みます。 この例では、ファイルが作成された、まだ存在しないし、テキストを追加します。  
  
 [!code-csharp[System.IO.File.AllLines\_Encoding\#00](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.File.AllLines_Encoding/cs/AllText_Encoding.cs#00)]
 [!code-vb[System.IO.File.AllLines\_Encoding\#00](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.File.AllLines_Encoding/vb/AllText_Encoding.vb#00)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列であるか、空白のみで構成されるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の正しくない文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> または <paramref name="contents" /> のいずれかが <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満でなければなりません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.IO.IOException">ファイルを開くときに、I\/O エラーが発生しました。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" /> が読み取り専用のファイルを指定しました。  
  
 \-または\-  
  
 この操作は、現在のプラットフォームではサポートされていません。  
  
 \-または\-  
  
 <paramref name="path" /> がディレクトリを指定しました。  
  
 \-または\-  
  
 呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for access to write to a file or directory. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="WriteAllLinesAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task WriteAllLinesAsync (string path, System.Collections.Generic.IEnumerable&lt;string&gt; contents, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task WriteAllLinesAsync(string path, class System.Collections.Generic.IEnumerable`1&lt;string&gt; contents, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="contents" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="contents">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAllLinesAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task WriteAllLinesAsync (string path, System.Collections.Generic.IEnumerable&lt;string&gt; contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task WriteAllLinesAsync(string path, class System.Collections.Generic.IEnumerable`1&lt;string&gt; contents, class System.Text.Encoding encoding, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="contents" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="contents">To be added.</param>
        <param name="encoding">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAllText">
      <MemberSignature Language="C#" Value="public static void WriteAllText (string path, string contents);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteAllText(string path, string contents) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.WriteAllText(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="contents" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">書き込み先のファイル。</param>
        <param name="contents">ファイルに書き込む文字列。</param>
        <summary>新しいファイルを作成し、指定した文字列をそのファイルに書き込んだ後、ファイルを閉じます。 既存のターゲット ファイルは上書きされます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは utf\-8 バイト オーダー マーク \(BOM\) なしのセットを使用して、 <xref:System.Text.Encoding.GetPreamble%2A> メソッドは空のバイト配列を返します。 使用して、ファイルの先頭のバイト順マークなどの utf\-8 識別子を含める必要がある場合、 <xref:System.IO.File.WriteAllText%28System.String%2CSystem.String%2CSystem.Text.Encoding%29> メソッドのオーバー ロードで <xref:System.Text.Encoding.UTF8%2A> エンコードします。  
  
 文字列とファイルのパスを指定するには、このメソッドは、指定したファイルを開き、文字列をファイルに書き込みます、ファイルを閉じます。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.IO.File.WriteAllText%2A> にテキストをファイルに書き込みます。 この例では、ファイルが作成された、まだ存在しないし、テキストを追加します。  
  
 [!code-csharp[System.IO.File.AllText\#00](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.File.AllText/cs/AllText.cs#00)]
 [!code-vb[System.IO.File.AllText\#00](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.File.AllText/vb/AllText.vb#00)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列であるか、空白のみで構成されているか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の正しくない文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> であるか、<paramref name="contents" /> が空です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満でなければなりません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.IO.IOException">ファイルを開くときに、I\/O エラーが発生しました。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" /> が読み取り専用のファイルを指定しました。  
  
 \-または\-  
  
 この操作は、現在のプラットフォームではサポートされていません。  
  
 \-または\-  
  
 <paramref name="path" /> がディレクトリを指定しました。  
  
 \-または\-  
  
 呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for access to write to a file or directory. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="WriteAllText">
      <MemberSignature Language="C#" Value="public static void WriteAllText (string path, string contents, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteAllText(string path, string contents, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.WriteAllText(System.String,System.String,System.Text.Encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="contents" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="path">書き込み先のファイル。</param>
        <param name="contents">ファイルに書き込む文字列。</param>
        <param name="encoding">文字列に適用するエンコーディング。</param>
        <summary>新しいファイルを作成し、指定したエンコーディングで指定の文字列をそのファイルに書き込んだ後、ファイルを閉じます。 既存のターゲット ファイルは上書きされます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 文字列とファイルのパスを指定するには、このメソッドは、指定したファイルを開き、文字列を指定したエンコーディングを使用してファイルに書き込みます、ファイルを閉じます。 例外が発生した場合でも、このメソッドにより、終了するファイル ハンドルが保証されます。  
  
   
  
## 例  
 使用を次のコード例に示します、<xref:System.IO.File.WriteAllText%2A>ファイルにテキストを書き込みます。 この例では、ファイルが作成されたが存在しないと、テキストを追加します。  
  
 [!code-csharp[System.IO.File.AllText\_Encoding\#00](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.File.AllText_Encoding/cs/AllText.cs#00)]
 [!code-vb[System.IO.File.AllText\_Encoding\#00](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.File.AllText_Encoding/vb/AllText.vb#00)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列であるか、空白のみで構成されるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の正しくない文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> であるか、<paramref name="contents" /> が空です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満でなければなりません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.IO.IOException">ファイルを開くときに、I\/O エラーが発生しました。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" /> が読み取り専用のファイルを指定しました。  
  
 \-または\-  
  
 この操作は、現在のプラットフォームではサポートされていません。  
  
 \-または\-  
  
 <paramref name="path" /> がディレクトリを指定しました。  
  
 \-または\-  
  
 呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for access to write to a file or directory. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="WriteAllTextAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task WriteAllTextAsync (string path, string contents, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task WriteAllTextAsync(string path, string contents, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.WriteAllTextAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="contents" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="contents">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAllTextAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task WriteAllTextAsync (string path, string contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task WriteAllTextAsync(string path, string contents, class System.Text.Encoding encoding, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.WriteAllTextAsync(System.String,System.String,System.Text.Encoding,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="contents" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="contents">To be added.</param>
        <param name="encoding">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したパスでファイルを作成します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Open">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したパスの <see cref="T:System.IO.FileStream" /> を開きます。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ReadAllText">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>テキスト ファイルを開き、ファイルのすべての行を文字列に読み取った後、ファイルを閉じます。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ReadLines">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ファイルの行を読み取ります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="AppendAllText">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した文字列をファイルに追加します。ファイルがまだ存在しない場合は、ファイルを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="AppendAllLines">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ファイルに行を追加してから、そのファイルを閉じます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="WriteAllText">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>新しいファイルを作成し、内容をそのファイルに書き込んだ後、ファイルを閉じます。 既存のターゲット ファイルは上書きされます。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ReadAllLines">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>テキスト ファイルを開き、ファイルのすべての行を文字列配列に読み取った後、ファイルを閉じます。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Copy">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>既存のファイルを新しいファイルにコピーします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="WriteAllLines">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>新しいファイルを作成し、1 つ以上の文字列をそのファイルに書き込んでから、そのファイルを閉じます。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>