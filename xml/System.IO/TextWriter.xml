<Type Name="TextWriter" FullName="System.IO.TextWriter">
  <TypeSignature Language="C#" Value="public abstract class TextWriter : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit TextWriter extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IO.TextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.IO</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>一連の文字を書き込むことができるライターを表します。 このクラスは抽象クラスです。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.TextWriter> 抽象基本クラスは、 <xref:System.IO.StreamWriter> と <xref:System.IO.StringWriter>, 、それぞれストリームや文字列に文字を書き込むします。 インスタンスを作成 <xref:System.IO.TextWriter> オブジェクトを文字列に書き込み、ファイルに文字列を書き込み、または XML をシリアル化します。 インスタンスを使用することもできます。 <xref:System.IO.TextWriter> テキスト文字列またはストリームで使用する同じ Api を使用するカスタム バッキング ストアを書き込むか、テキストの書式設定のサポートを追加します。  
  
 すべての `Write` メソッドの <xref:System.IO.TextWriter> パラメーターが文字列として値を書き込むように、プリミティブ データ型を持ちます。  
  
 既定では、 <xref:System.IO.TextWriter> はスレッド セーフです。 参照してください <xref:System.IO.TextWriter.Synchronized%2A?displayProperty=fullName> のスレッド セーフ ラッパー。  
  
> [!IMPORTANT]
>  この型は、 <xref:System.IDisposable> インターフェイスです。 この型から派生した任意の型を使用してが完了したらを直接または間接的にその破棄する必要があります。 型の直接 dispose を呼び出してその <xref:System.IO.TextWriter.Dispose%2A> メソッドで、 `try`\/`catch` ブロックします。 直接ことのない破棄する場合など言語構成要素を使用して `using` \(c\#\) のまたは `Using` \(Visual Basic で\)。 詳細については、Dispose と"を使用して、オブジェクトを実装して IDisposable"」セクションを参照してください、 <xref:System.IDisposable> インターフェイスに関するトピック。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 <xref:System.IO.TextWriter> クラスは抽象クラスです。 そのため、コードでそれをインスタンス化することはありません。<xref:System.IO.StreamWriter> クラスから派生する <xref:System.IO.TextWriter> し、ストリームに書き込むため、メンバーの実装を提供します。 次の例を使用してテキスト ファイルに文字列の値から成る 2 つの行を書き込む方法を示しています、 <xref:System.IO.StreamWriter.WriteLineAsync%28System.String%29> メソッドです。  
  
 提供する派生クラスで Dispose をオーバーライドします。  
  
 [!code-csharp[System.IO.StreamWriter\#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StreamWriter/CS/example23.cs#23)]
 [!code-vb[System.IO.StreamWriter\#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StreamWriter/VB/example23.vb#23)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>A derived class must minimally implement the <see cref="M:System.IO.TextWriter.Write(System.Char)" /> method to make a useful instance of <see cref="T:System.IO.TextWriter" />.</para>
    </block>
    <altmember cref="T:System.IO.StreamWriter" />
    <altmember cref="T:System.IO.StringWriter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TextWriter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.IO.TextWriter" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値を指定しない場合は、このコンス トラクターのオーバー ロードを使用して、 <xref:System.IO.TextWriter.FormatProvider%2A> プロパティです。 ときに、 <xref:System.IO.TextWriter.FormatProvider%2A> プロパティは、 `null`, 、書式設定に現在のスレッドのカルチャを使用します。  
  
 派生したクラスには、このコンス トラクターを使用します。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TextWriter (IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.#ctor(System.IFormatProvider)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="formatProvider">書式を制御する <see cref="T:System.IFormatProvider" /> オブジェクト。</param>
        <summary>指定した書式プロバイダーで <see cref="T:System.IO.TextWriter" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターのオーバー ロードを使用して、値を提供する、 <xref:System.IO.TextWriter.FormatProvider%2A> プロパティです。 値、 <xref:System.IO.TextWriter.FormatProvider%2A> を呼び出すときに使用されるカルチャ固有の書式設定プロパティの指定、 <xref:System.IO.TextWriter.Write%2A> と <xref:System.IO.TextWriter.WriteLine%2A> メソッドです。 使用してインスタンスを作成、書式プロバイダーを提供しない場合、 <xref:System.IO.TextWriter.%23ctor> コンス トラクターは、設定、 <xref:System.IO.TextWriter.FormatProvider%2A> プロパティを `null`します。 ときに、 <xref:System.IO.TextWriter.FormatProvider%2A> プロパティは、 `null`, 、書式設定に現在のスレッドのカルチャを使用します。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Close" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のライターを終了し、ライターに関連付けられたすべてのシステム リソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This implementation of **languageKeyword tag is not supported!!!!**  
 calls the <xref:System.IO.TextWriter.Dispose%28System.Boolean%29?displayProperty=fullName> method and passes it a **languageKeyword tag is not supported!!!!**  
 value.  
  
 Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.IO.TextWriter.Flush%2A> or **languageKeyword tag is not supported!!!!**  
. Setting the <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=fullName> property to **languageKeyword tag is not supported!!!!**  
 means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state \(partial characters\) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can be encoded only after the encoder receives the adjacent character or characters.  
  
> [!NOTE]
>  In derived classes, do not override the <xref:System.IO.TextWriter.Close%2A> method. Instead, override the <xref:System.IO.TextWriter.Dispose%28System.Boolean%29?displayProperty=fullName> method to add code for releasing resources.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CoreNewLine">
      <MemberSignature Language="C#" Value="protected char[] CoreNewLine;" />
      <MemberSignature Language="ILAsm" Value=".field family char[] CoreNewLine" />
      <MemberSignature Language="DocId" Value="F:System.IO.TextWriter.CoreNewLine" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see langword="TextWriter" /> で使用する改行文字を格納します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.IO.TextWriter" /> オブジェクトによって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Call <xref:System.IO.TextWriter.Dispose%2A> when you are finished using the <xref:System.IO.TextWriter>. The <xref:System.IO.TextWriter.Dispose%2A> method leaves the <xref:System.IO.TextWriter> in an unusable state. After calling <xref:System.IO.TextWriter.Dispose%2A>, you must release all references to the <xref:System.IO.TextWriter> so the garbage collector can reclaim the memory that the <xref:System.IO.TextWriter> was occupying.  
  
 For more information, see [&#91;\<topic:\/\/cpconCleaningUpUnmanagedResources\>&#93;](http://msdn.microsoft.com/ja-jp/a17b0066-71c2-4ba4-9822-8e19332fc213) and [Implementing a Dispose Method](http://msdn.microsoft.com/ja-jp/eb4e1af0-3b48-4fbc-ad4e-fc2f64138bf9).  
  
 **Note** Always call <xref:System.IO.TextWriter.Dispose%2A> before you release your last reference to the <xref:System.IO.TextWriter>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.IO.TextWriter> object's <xref:System.Object.Finalize%2A> method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.IO.TextWriter" /> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method is called by **languageKeyword tag is not supported!!!!**  
 and <xref:System.Object.Finalize%2A>. By default, this method specifies the **parameterReference tag is not supported!!!!**  
 parameter as **languageKeyword tag is not supported!!!!**  
. <xref:System.Object.Finalize%2A> specifies the **parameterReference tag is not supported!!!!**  
 parameter as **languageKeyword tag is not supported!!!!**  
.  
  
 When the **parameterReference tag is not supported!!!!**  
 parameter is **languageKeyword tag is not supported!!!!**  
, this method releases all resources held by any managed objects that this <xref:System.IO.TextWriter> references. This method invokes the **languageKeyword tag is not supported!!!!**  
 method of each referenced object.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.IO.TextWriter.Dispose(System.Boolean)" /> can be called multiple times by other objects. When overriding this method, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />. For more information about how to implement this method, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
 For more information about <see cref="M:System.IDisposable.Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public abstract System.Text.Encoding Encoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.IO.TextWriter.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスによってオーバーライドされると、出力を書き込む文字エンコーディングを返します。</summary>
        <value>出力の書き込み時に適用する文字エンコーディング。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This property is necessary for some XML scenarios where a header must be written containing the encoding used by the **languageKeyword tag is not supported!!!!**  
. This enables the XML code to consume an arbitrary **languageKeyword tag is not supported!!!!**  
 and generate the correct XML header.  
  
 For a list of common I\/O tasks, see [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public virtual void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Flush" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のライターのすべてのバッファーをクリアし、バッファー内のデータを基になるデバイスに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは既定では、何も行われませんが、派生クラスは、適切な機能を提供するメソッドをオーバーライドできます。  
  
 明示的に呼び出さない限りは、ストリームのフラッシュにその基になるエンコーダーはフラッシュされません `Flush` または <xref:System.IO.TextWriter.Close%2A>です。 設定 <xref:System.IO.StreamWriter.AutoFlush%2A> に `true` に、ストリーム バッファーからデータがフラッシュされますが、エンコーダーの状態はフラッシュされないことを意味します。 これにより、次の文字のブロックを正常にエンコードできるように、\(一部の文字\) の状態を保持するエンコーダーです。 このシナリオでは、UTF8、UTF7、特定の文字をエンコードするため、エンコーダーは、隣接する文字または文字列を受信した後に影響します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task FlushAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task FlushAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.FlushAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のライターのすべてのバッファーを非同期にクリアし、バッファー内のデータを基になるデバイスに書き込みます。</summary>
        <returns>非同期のフラッシュ操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">テキスト ライターは破棄されます。</exception>
        <exception cref="T:System.InvalidOperationException">ライターは、前の書き込み操作によって使用は現在です。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName="FormatProvider">
      <MemberSignature Language="C#" Value="public virtual IFormatProvider FormatProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IFormatProvider FormatProvider" />
      <MemberSignature Language="DocId" Value="P:System.IO.TextWriter.FormatProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IFormatProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>書式を制御するオブジェクトを取得します。</summary>
        <value>特定のカルチャ設定の <see cref="T:System.IFormatProvider" /> オブジェクト、または他のカルチャ設定が指定されていない場合は現在のカルチャ設定の書式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値、 <xref:System.IO.TextWriter.FormatProvider%2A> を呼び出すときに使用されるカルチャ固有の書式設定プロパティの指定、 <xref:System.IO.TextWriter.Write%2A> と <xref:System.IO.TextWriter.WriteLine%2A> メソッドです。 使用してインスタンスを作成、書式プロバイダーを提供しない場合、 <xref:System.IO.TextWriter.%23ctor> コンス トラクターは、設定、 <xref:System.IO.TextWriter.FormatProvider%2A> プロパティを `null`します。 ときに、 <xref:System.IO.TextWriter.FormatProvider%2A> プロパティが含まれています `null`, 、書式設定に現在のスレッドのカルチャを使用します。  
  
 ファイルを作成し、テキスト ファイルへの書き込みの例は、次を参照してください。 [&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)します。 ファイルからテキストの読み取りの例は、次を参照してください。 [&#91;\<topic:\/\/cpconreadingtextfromfile\>&#93;](http://msdn.microsoft.com/ja-jp/ed180baa-dfc6-4c69-a725-46e87edafb27)します。 読み取りと書き込みをバイナリ ファイルの例は、次を参照してください。 [&#91;\<topic:\/\/cpconReadingWritingToNewlyCreatedDataFile\>&#93;](http://msdn.microsoft.com/ja-jp/e209d949-31e8-44ea-8e38-87f9093f3093)します。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName="NewLine">
      <MemberSignature Language="C#" Value="public virtual string NewLine { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewLine" />
      <MemberSignature Language="DocId" Value="P:System.IO.TextWriter.NewLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see langword="TextWriter" /> で使用される行終端文字列を取得または設定します。</summary>
        <value>現在の <see langword="TextWriter" /> で使用する行終端文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の行終端記号の文字列は、キャリッジ リターンとライン フィード \("\\r\\n"\) です。  
  
 行終端文字列が 1 つのテキスト ストリームに書き込まれるは `WriteLine` メソッドが呼び出されます。 によって書き込まれたテキストの順序で、 `TextWriter` で読み取ることがある、 <xref:System.IO.TextReader>, 、終端記号の文字列として"\\n"または"\\r\\n"のみを使用する必要があります。 場合 `NewLine` に設定されている `null`, 、既定の改行文字が代わりに使用されます。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName="Null">
      <MemberSignature Language="C#" Value="public static readonly System.IO.TextWriter Null;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.IO.TextWriter Null" />
      <MemberSignature Language="DocId" Value="F:System.IO.TextWriter.Null" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>バッキング ストアを持たない書き込み専用の <see langword="TextWriter" /> を提供します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用 `Null` は任意のオペレーティング システム リソースを消費していないストリームに出力をリダイレクトします。  
  
 ときに、 <xref:System.IO.TextWriter.Write%2A?displayProperty=fullName> でメソッドが呼び出される `Null`, 、呼び出しが単純に返され、実際にデータは、バッキング ストアに書き込まれません。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.IO.TextWriter Synchronized (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.TextWriter Synchronized(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Synchronized(System.IO.TextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">同期する <see langword="TextWriter" />。</param>
        <summary>指定した <see langword="TextWriter" /> をラップするスレッド セーフ ラッパーを作成します。</summary>
        <returns>スレッド セーフ ラッパー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 すべての書き込み操作で返されるラッパーにはスレッド セーフであるになります。 一度に 1 つのスレッドがでメソッドを実行できることを確認するには、このメソッドを呼び出す、 <xref:System.IO.TextWriter> 返されるインスタンス。 同期およびスレッド処理の詳細については、次を参照してください。 [Synchronizing Data for Multithreading](http://msdn.microsoft.com/ja-jp/b980eb4c-71d5-4860-864a-6dfe3692430a)します。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="writer" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">書き込む <see langword="Boolean" /> 値。</param>
        <summary>
          <see langword="Boolean" /> 値のテキスト形式をテキスト文字列またはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定した値のテキスト表現が呼び出しによって生成された、 <xref:System.Boolean.ToString%2A?displayProperty=fullName> メソッドです。  
  
 このメソッドを出力するか <xref:System.Boolean.TrueString?displayProperty=fullName> または <xref:System.Boolean.FalseString?displayProperty=fullName>です。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">テキスト ストリームに書き込む文字。</param>
        <summary>文字をテキスト文字列またはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは既定では、何も行われませんが、派生クラスは、適切な機能を提供するメソッドをオーバーライドできます。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <altmember cref="M:System.IO.StreamWriter.Write(System.Char)" />
        <altmember cref="M:System.IO.StringWriter.Write(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.Char[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">テキスト ストリームに書き込む文字配列。</param>
        <summary>文字配列をテキスト文字列またはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、指定した文字列で個別の改行文字 \(16 進数で 0x000a\) を検索しないため、改行文字は <xref:System.IO.TextWriter.NewLine%2A> に置き換えられません。  
  
 この既定のメソッドを呼び出す、 <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> メソッド全体の文字配列を渡します。 文字配列の場合 `null`, 、何も書き込まれません。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <altmember cref="M:System.IO.StreamWriter.Write(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.Decimal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">書き込む 10 進値。</param>
        <summary>10 進値のテキスト形式をテキスト文字列またはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.TextWriter.FormatProvider%2A> いない場合は、プロパティ `null`, 、カルチャに固有の書式を指定します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">書き込む 8 バイト浮動小数点値。</param>
        <summary>8 バイト浮動小数点値のテキスト形式をテキスト文字列またはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定した値のテキスト表現が呼び出しによって生成された、 <xref:System.Double.ToString%2A?displayProperty=fullName> メソッドです。<xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> いない場合は、プロパティ `null`, 、カルチャに固有の書式を指定します。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">書き込む 4 バイト符号付き整数。</param>
        <summary>4 バイト符号付き整数のテキスト形式をテキスト文字列またはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定した値のテキスト表現が呼び出しによって生成された、 <xref:System.Int32.ToString%2A?displayProperty=fullName> メソッドです。<xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> いない場合は、プロパティ `null`, 、カルチャに固有の書式を指定します。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">書き込む 8 バイト符号付き整数。</param>
        <summary>8 バイト符号付き整数のテキスト形式をテキスト文字列またはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定した値のテキスト表現が呼び出しによって生成された、 <xref:System.Int64.ToString%2A?displayProperty=fullName> メソッドです。<xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> いない場合は、プロパティ `null`, 、カルチャに固有の書式を指定します。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 [&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">書き込むオブジェクト。</param>
        <summary>オブジェクトで <see langword="ToString" /> メソッドを呼び出して、そのオブジェクトのテキスト形式をテキスト文字列またはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このオーバー ロードは、 <xref:System.IO.TextWriter.Write%28System.String%29> オーバー ロードします。  
  
 指定したオブジェクトが場合 `null`, 、何も実行および例外はスローされません。 それ以外の場合、オブジェクトの `ToString` 形式の文字列形式を生成するメソッドが呼び出され、結果の文字列を出力ストリームに書き込まれます。<xref:System.IO.TextWriter.FormatProvider%2A> いない場合は、プロパティ `null`, 、カルチャに固有の書式を指定します。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">書き込む 4 バイト浮動小数点値。</param>
        <summary>4 バイト浮動小数点値のテキスト形式をテキスト文字列またはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定した値のテキスト表現が呼び出しによって生成された、 <xref:System.Single.ToString%2A?displayProperty=fullName> メソッドです。<xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> いない場合は、プロパティ `null`, 、カルチャに固有の書式を指定します。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">書き込む文字列。</param>
        <summary>文字列をテキスト文字列またはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このオーバー ロードは、 <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29> オーバー ロードします。  
  
 このメソッドは、指定した文字列で個別の改行文字 \(16 進数で 0x000a\) を検索しないため、改行文字は <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName> に置き換えられません。  
  
 `value` が `null` の場合は、何もテキスト ストリームに書き込みません。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <altmember cref="M:System.IO.StreamWriter.Write(System.String)" />
        <altmember cref="M:System.IO.StringWriter.Write(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.UInt32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">書き込む 4 バイト符号なし整数。</param>
        <summary>4 バイト符号なし整数のテキスト形式をテキスト文字列またはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定した値のテキスト表現が呼び出しによって生成された、 <xref:System.UInt32.ToString%2A?displayProperty=fullName> メソッドです。<xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> いない場合は、プロパティ `null`, 、カルチャに固有の書式を指定します。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.UInt64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">書き込む 8 バイト符号なし整数。</param>
        <summary>8 バイト符号なし整数のテキスト形式をテキスト文字列またはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定した値のテキスト表現が呼び出しによって生成された、 <xref:System.UInt64.ToString%2A?displayProperty=fullName> メソッドです。<xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> いない場合は、プロパティ `null`, 、カルチャに固有の書式を指定します。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">複合書式指定文字列 \(「解説」を参照\)。</param>
        <param name="arg0">書式設定および書き込みをするオブジェクト。</param>
        <summary>
          <see cref="M:System.String.Format(System.String,System.Object)" /> メソッドと同じセマンティクスを使用して、書式設定された文字列をテキスト文字列またはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して、オブジェクトの値を文字列形式に変換して、その表現を文字列に埋め込むには、.NET Framework のです。 .NET Framework では、次の書式設定のトピックで詳しく説明されている広範な書式設定のサポートを提供します。  
  
-   複合書式指定機能の詳細については、「[Composite Formatting](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49)」を参照してください。  
  
-   数値書式指定子の詳細については、次を参照してください。 [Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467) と [Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4)です。  
  
-   についての日付と時刻の書式指定子の詳細については、次を参照してください。 [Standard DateTime Format Strings](http://msdn.microsoft.com/ja-jp/bb79761a-ca08-44ee-b142-b06b3e2fc22b) と [Custom DateTime Format Strings](http://msdn.microsoft.com/ja-jp/98b374e3-0cc2-4c78-ab44-efb671d71984)です。  
  
-   列挙型書式指定子の詳細については、次を参照してください。 [Enumeration Format Strings](http://msdn.microsoft.com/ja-jp/dd1ff672-1052-42cf-8666-4924fb6cd1a1)します。  
  
-   書式設定に関する詳細については、次を参照してください。 [Formatting Types](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f)します。  
  
 `format` パラメーターは、0 または 1 つ以上のインデックス付きプレース ホルダー、このメソッドのパラメーター リスト内のオブジェクトに対応する書式指定項目と呼ばれる個以上のテキストが混在します。 書式設定のプロセスでは、対応するオブジェクトの値の文字列形式に各書式項目を置換します。  
  
 書式指定項目の構文は次のとおりです。  
  
 {*インデックス*\[、*長さ*\] \[:*formatString*\]}  
  
 角かっこ内の要素は省略できます。 次の表では、各要素について説明します。 複合書式指定項目の構文を含む機能を書式設定の詳細については、次を参照してください。 [Composite Formatting](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49)します。  
  
|要素|説明|  
|--------|--------|  
|インデックス|書式設定するオブジェクトのパラメーター リスト内の 0 から始まる位置。 オブジェクトが指定された場合 *インデックス* は `null`, 、書式指定項目が置き換え <xref:System.String.Empty?displayProperty=fullName>します。 このオーバー ロードは、パラメーターに 1 つのオブジェクトのみを持つためにボックスの一覧の値 *インデックス* 常に 0 があります。 内のパラメーターがない場合、 *インデックス* 、位置、 <xref:System.FormatException> がスローされます。|  
|、*長さ*|パラメーターの文字列表記で文字列の最小数。 正の値は、パラメーター右揃えになります。負の場合は、左揃えをお勧めします。|  
|:*formatString*|書式設定するオブジェクトでサポートされている標準またはカスタム書式指定文字列。 値の *formatString* は、オブジェクトのによってサポートされる値と同じ `ToString(``format``)` メソッドです。 場合 *formatString* が指定されていない書式設定するオブジェクトを実装して、 <xref:System.IFormattable> インターフェイス、 `null` の値として渡される、 `format` パラメーターとして使用されている、 <xref:System.IFormattable.ToString%2A?displayProperty=fullName> 書式指定文字列。|  
  
 先頭および末尾の文字を中かっこ"{"と"}"が必要です。 単一のリテラル中かっこ文字を指定する `format`, 先頭の 2 つの指定、または末尾に中かっこ文字です。 つまり、"{{"または"}}"。  
  
 」を参照してください。 このメソッドは、指定した文字列で個別の改行文字 \(16 進数で 0x000a\) を検索しないため、改行文字は <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName> に置き換えられません。  
  
 指定したオブジェクトがない書式指定文字列で参照されている場合は無視されます。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> 有効な複合書式指定文字列ではありません。  
  
 または  
  
 書式指定項目のインデックスが 0 \(ゼロ\) よりも小さいか \(つまり、このメソッドのオーバー ロードのいずれか\) を書式設定オブジェクトの数以上です。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (string format, object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.String,System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">複合書式指定文字列 \(「解説」を参照\)。</param>
        <param name="arg">書式設定および書き込みをする 0 個以上のオブジェクトを含むオブジェクト配列。</param>
        <summary>
          <see cref="M:System.String.Format(System.String,System.Object[])" /> メソッドと同じセマンティクスを使用して、書式設定された文字列をテキスト文字列またはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して、オブジェクトの値を文字列形式に変換して、その表現を文字列に埋め込むには、.NET Framework のです。 .NET Framework では、次の書式設定のトピックで詳しく説明されている、広範な書式設定サポートを提供します。  
  
-   複合書式指定機能の詳細については、「[Composite Formatting](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49)」を参照してください。  
  
-   数値書式指定子の詳細については、次を参照してください。[Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467)と[Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4)です。  
  
-   についての日付と時刻の書式指定子の詳細については、次を参照してください。[Standard DateTime Format Strings](http://msdn.microsoft.com/ja-jp/bb79761a-ca08-44ee-b142-b06b3e2fc22b)と[Custom DateTime Format Strings](http://msdn.microsoft.com/ja-jp/98b374e3-0cc2-4c78-ab44-efb671d71984)です。  
  
-   列挙型書式指定子の詳細については、次を参照してください。[Enumeration Format Strings](http://msdn.microsoft.com/ja-jp/dd1ff672-1052-42cf-8666-4924fb6cd1a1)です。  
  
-   書式設定に関する詳細については、次を参照してください。[Formatting Types](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f)です。  
  
 `format`パラメーターは、ゼロまたは 0 個以上のインデックス付きプレース ホルダー、このメソッドのパラメーター リスト内のオブジェクトに対応する書式指定項目と呼ばれる個以上のテキストが混在します。 書式設定プロセスでは、対応するオブジェクトの値の文字列形式を各書式項目を置き換えます。  
  
 書式指定項目の構文は次のとおりです。  
  
 {*index*\[,*length*\]\[:*formatString*\]}  
  
 角かっこ内の要素は省略できます。 次の表では、各要素について説明します。 複合書式指定項目の構文を含む、機能を書式設定の詳細については、次を参照してください。[Composite Formatting](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49)です。  
  
|要素|説明|  
|--------|--------|  
|インデックス|書式設定するオブジェクトのパラメーター リスト内の 0 から始まる位置。 オブジェクトを指定して場合*インデックス*は`null`、書式指定項目が置き換え<xref:System.String.Empty?displayProperty=fullName>です。 このオーバー ロードは、パラメーターの配列をあるためにボックスの一覧の値*インデックス*常に、配列の長さよりも小さくする必要があります。 内のパラメーターが存在しない場合、*インデックス*、位置、<xref:System.FormatException>がスローされます。|  
|、*長さ*|パラメーターの文字列表記で文字の最小数。 正の値は、パラメーター右揃えになります。負の場合は、左揃えをお勧めします。|  
|:*formatString*|書式設定するオブジェクトでサポートされている標準またはカスタムの書式指定文字列。 指定できる値*formatString*は、オブジェクトのによってサポートされる値と同じ`ToString(``format``)`メソッドです。 場合*formatString*が指定されていない書式設定するオブジェクトを実装して、<xref:System.IFormattable>インターフェイス、`null`の値として渡される、`format`パラメーターとして使用される、<xref:System.IFormattable.ToString%2A?displayProperty=fullName>書式指定文字列。|  
  
 先頭および末尾の文字を中かっこ"{"と"}"が必要です。 単一のリテラルのかっこ記号を指定する`format`先頭の 2 つの指定、または末尾の文字は; 中かっこを使用は、"{{"または"}}"。  
  
 このメソッドは、指定した文字列で個別の改行文字 \(16 進数で 0x000a\) を検索しないため、改行文字は <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName> に置き換えられません。  
  
 指定したオブジェクトは、書式指定文字列で参照されていないは無視されます。  
  
 共通 I\/O タスクの一覧は、次を参照してください。[Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> または <paramref name="arg" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" />有効な複合書式指定文字列ではありません。  
  
 または  
  
 書式指定項目のインデックスが 0 \(ゼロ\) 未満または以上の長さ、<paramref name="arg" />配列。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">データの書き込み元の文字配列。</param>
        <param name="index">データの取得を開始する、バッファー内の文字位置。</param>
        <param name="count">書き込む文字数。</param>
        <summary>文字の部分配列をテキスト文字列またはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、書き込み `count` にこのデータの文字 `TextWriter` から、 `buffer` 文字配列の位置以降にある `index`です。  
  
 このオーバー ロードは、 [Write メソッド \(Char\<xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29> 内の各文字のオーバー ロード `buffer` 間 `index` と \(`index` \+ `count`\)。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> または <paramref name="count" /> が負の値。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <altmember cref="M:System.IO.StreamWriter.Write(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.IO.StringWriter.Write(System.Char[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.String,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">複合書式指定文字列 \(「解説」を参照\)。</param>
        <param name="arg0">書式設定および書き込みをする最初のオブジェクト。</param>
        <param name="arg1">書式設定および書き込みをする 2 番目のオブジェクト。</param>
        <summary>
          <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> メソッドと同じセマンティクスを使用して、書式設定された文字列をテキスト文字列またはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して、オブジェクトの値を文字列形式に変換して、その表現を文字列に埋め込むには、.NET Framework のです。 .NET Framework では、次の書式設定のトピックで詳しく説明されている広範な書式設定のサポートを提供します。  
  
-   複合書式指定機能の詳細については、「[Composite Formatting](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49)」を参照してください。  
  
-   数値書式指定子の詳細については、次を参照してください。 [Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467) と [Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4)です。  
  
-   についての日付と時刻の書式指定子の詳細については、次を参照してください。 [Standard DateTime Format Strings](http://msdn.microsoft.com/ja-jp/bb79761a-ca08-44ee-b142-b06b3e2fc22b) と [Custom DateTime Format Strings](http://msdn.microsoft.com/ja-jp/98b374e3-0cc2-4c78-ab44-efb671d71984)です。  
  
-   列挙型書式指定子の詳細については、次を参照してください。 [Enumeration Format Strings](http://msdn.microsoft.com/ja-jp/dd1ff672-1052-42cf-8666-4924fb6cd1a1)します。  
  
-   書式設定に関する詳細については、次を参照してください。 [Formatting Types](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f)します。  
  
 `format` パラメーターは、0 または 1 つ以上のインデックス付きプレース ホルダー、このメソッドのパラメーター リスト内のオブジェクトに対応する書式指定項目と呼ばれる個以上のテキストが混在します。 書式設定のプロセスでは、対応するオブジェクトの値の文字列形式に各書式項目を置換します。  
  
 書式指定項目の構文は次のとおりです。  
  
 {*インデックス*\[、*長さ*\] \[:*formatString*\]}  
  
 角かっこ内の要素は省略できます。 次の表では、各要素について説明します。 複合書式指定項目の構文を含む機能を書式設定の詳細については、次を参照してください。 [Composite Formatting](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49)します。  
  
|要素|説明|  
|--------|--------|  
|インデックス|書式設定するオブジェクトのパラメーター リスト内の 0 から始まる位置。 オブジェクトが指定された場合 *インデックス* は `null`, 、書式指定項目が置き換え <xref:System.String.Empty?displayProperty=fullName>します。 このオーバー ロードは、パラメーターに 2 つのオブジェクトを持つためにボックスの一覧の値 *インデックス* 0 または 1 を常にする必要があります。 内のパラメーターがない場合、 *インデックス* 、位置、 <xref:System.FormatException> がスローされます。|  
|、*長さ*|パラメーターの文字列表記で文字列の最小数。 正の値は、パラメーター右揃えになります。負の場合は、左揃えをお勧めします。|  
|:*formatString*|書式設定するオブジェクトでサポートされている標準またはカスタム書式指定文字列。 値の *formatString* は、オブジェクトのによってサポートされる値と同じ `ToString(``format``)` メソッドです。 場合 *formatString* が指定されていない書式設定するオブジェクトを実装して、 <xref:System.IFormattable> インターフェイス、 `null` の値として渡される、 `format` パラメーターとして使用されている、 <xref:System.IFormattable.ToString%2A?displayProperty=fullName> 書式指定文字列。|  
  
 先頭および末尾の文字を中かっこ"{"と"}"が必要です。 単一のリテラル中かっこ文字を指定する `format`, 先頭の 2 つの指定、または末尾に中かっこ文字です。 つまり、"{{"または"}}"。  
  
 このメソッドは、指定した文字列で個別の改行文字 \(16 進数で 0x000a\) を検索しないため、改行文字は <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName> に置き換えられません。  
  
 指定したオブジェクトがない書式指定文字列で参照されている場合は無視されます。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> 有効な複合書式指定文字列ではありません。  
  
 または  
  
 書式指定項目のインデックスが 0 \(ゼロ\) よりも小さいか、このメソッドのオーバー ロードは 2 つ\) を書式設定オブジェクトの数以上です。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.String,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">複合書式指定文字列 \(「解説」を参照\)。</param>
        <param name="arg0">書式設定および書き込みをする最初のオブジェクト。</param>
        <param name="arg1">書式設定および書き込みをする 2 番目のオブジェクト。</param>
        <param name="arg2">書式設定および書き込みをする 3 番目のオブジェクト。</param>
        <summary>
          <see cref="M:System.String.Format(System.String,System.Object,System.Object,System.Object)" /> メソッドと同じセマンティクスを使用して、書式設定された文字列をテキスト文字列またはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して、オブジェクトの値を文字列形式に変換して、その表現を文字列に埋め込むには、.NET Framework のです。 .NET Framework では、次の書式設定のトピックで詳しく説明されている広範な書式設定のサポートを提供します。  
  
-   複合書式指定機能の詳細については、「[Composite Formatting](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49)」を参照してください。  
  
-   数値書式指定子の詳細については、次を参照してください。 [Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467) と [Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4)です。  
  
-   についての日付と時刻の書式指定子の詳細については、次を参照してください。 [Standard DateTime Format Strings](http://msdn.microsoft.com/ja-jp/bb79761a-ca08-44ee-b142-b06b3e2fc22b) と [Custom DateTime Format Strings](http://msdn.microsoft.com/ja-jp/98b374e3-0cc2-4c78-ab44-efb671d71984)です。  
  
-   列挙型書式指定子の詳細については、次を参照してください。 [Enumeration Format Strings](http://msdn.microsoft.com/ja-jp/dd1ff672-1052-42cf-8666-4924fb6cd1a1)します。  
  
-   書式設定に関する詳細については、次を参照してください。 [Formatting Types](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f)します。  
  
 `format` パラメーターは、0 または 1 つ以上のインデックス付きプレース ホルダー、このメソッドのパラメーター リスト内のオブジェクトに対応する書式指定項目と呼ばれる個以上のテキストが混在します。 書式設定のプロセスでは、対応するオブジェクトの値の文字列形式に各書式項目を置換します。  
  
 書式指定項目の構文は次のとおりです。  
  
 {*インデックス*\[、*長さ*\] \[:*formatString*\]}  
  
 角かっこ内の要素は省略できます。 次の表では、各要素について説明します。 複合書式指定項目の構文を含む機能を書式設定の詳細については、次を参照してください。 [Composite Formatting](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49)します。  
  
|要素|説明|  
|--------|--------|  
|インデックス|書式設定するオブジェクトのパラメーター リスト内の 0 から始まる位置。 オブジェクトが指定された場合 *インデックス* は `null`, 、書式指定項目が置き換え <xref:System.String.Empty?displayProperty=fullName>します。 このオーバー ロードは、パラメーターに 3 つのオブジェクトを持つためにボックスの一覧の値 *インデックス* 0、1、または 2 を常にする必要があります。 内のパラメーターがない場合、 *インデックス* 、位置、 <xref:System.FormatException> がスローされます。|  
|、*長さ*|パラメーターの文字列表記で文字列の最小数。 正の値は、パラメーター右揃えになります。負の場合は、左揃えをお勧めします。|  
|:*formatString*|書式設定するオブジェクトでサポートされている標準またはカスタム書式指定文字列。 値の *formatString* は、オブジェクトのによってサポートされる値と同じ `ToString(``format``)` メソッドです。 場合 *formatString* が指定されていない書式設定するオブジェクトを実装して、 <xref:System.IFormattable> インターフェイス、 `null` の値として渡される、 `format` パラメーターとして使用されている、 <xref:System.IFormattable.ToString%2A?displayProperty=fullName> 書式指定文字列。|  
  
 先頭および末尾の文字を中かっこ"{"と"}"が必要です。 単一のリテラル中かっこ文字を指定する `format`, 先頭の 2 つの指定、または末尾に中かっこ文字です。 つまり、"{{"または"}}"。  
  
 このメソッドは個別の改行文字 \(16 進 0x000a\) の指定した文字列を検索されず、単に置き換え <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName>します。  
  
 指定したオブジェクトがない書式指定文字列で参照されている場合は無視されます。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> 有効な複合書式指定文字列ではありません。  
  
 または  
  
 書式指定項目のインデックスが 0 \(ゼロ\) よりも小さいか \(つまり、このメソッドのオーバー ロードのうちの 3 つ\) を書式設定オブジェクトの数以上です。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteAsync (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteAsync(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteAsync(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">テキスト ストリームに書き込む文字。</param>
        <summary>文字をテキスト文字列またはストリームに非同期的に書き込みます。</summary>
        <returns>非同期の書き込み操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.TextWriter> クラスは抽象クラスです。 そのため、コードでそれをインスタンス化することはありません。 使用する例については、 <xref:System.IO.TextWriter.WriteAsync%2A> メソッドを参照してください、 <xref:System.IO.StreamWriter.WriteAsync%2A?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">テキスト ライターは破棄されます。</exception>
        <exception cref="T:System.InvalidOperationException">テキスト ライターは、前の書き込み操作によって使用は現在です。</exception>
        <altmember cref="M:System.IO.StreamWriter.WriteAsync(System.Char)" />
        <altmember cref="M:System.IO.StringWriter.WriteAsync(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteAsync (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteAsync(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteAsync(System.Char[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">テキスト ストリームに書き込む文字配列。<c>buffer</c> が <see langword="null" /> の場合は、何も書き込まれません。</param>
        <summary>文字配列をテキスト文字列またはストリームに非同期的に書き込みます。</summary>
        <returns>非同期の書き込み操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">テキスト ライターは破棄されます。</exception>
        <exception cref="T:System.InvalidOperationException">テキスト ライターは、前の書き込み操作によって使用は現在です。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteAsync (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteAsync(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">書き込む文字列。<c>value</c> が <see langword="null" /> の場合は、何もテキスト ストリームに書き込みません。</param>
        <summary>文字列をテキスト文字列またはストリームに非同期的に書き込みます。</summary>
        <returns>非同期の書き込み操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.TextWriter> クラスは抽象クラスです。 そのため、コードでそれをインスタンス化することはありません。 使用する例については、 <xref:System.IO.TextWriter.WriteAsync%2A> メソッドを参照してください、 <xref:System.IO.StreamWriter.WriteAsync%2A?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">テキスト ライターは破棄されます。</exception>
        <exception cref="T:System.InvalidOperationException">テキスト ライターは、前の書き込み操作によって使用は現在です。</exception>
        <altmember cref="M:System.IO.StreamWriter.WriteAsync(System.String)" />
        <altmember cref="M:System.IO.StringWriter.WriteAsync(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteAsync (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteAsync(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteAsync(System.Char[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">データの書き込み元の文字配列。</param>
        <param name="index">データの取得を開始する、バッファー内の文字位置。</param>
        <param name="count">書き込む文字数。</param>
        <summary>文字の部分配列をテキスト文字列またはストリームに非同期的に書き込みます。</summary>
        <returns>非同期の書き込み操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [WriteAsync メソッド \(Char\<xref:System.IO.TextWriter> クラスは抽象クラスです。 そのため、コードでそれをインスタンス化することはありません。 使用する例については、 [WriteAsync メソッド \(Char\<xref:System.IO.TextWriter.WriteAsync%2A> メソッドを参照してください、 [WriteAsync メソッド \(Char\<xref:System.IO.StreamWriter.WriteAsync%2A?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> に <paramref name="count" /> を加算した値がバッファーの長さを超えています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> または <paramref name="count" /> が負の値。</exception>
        <exception cref="T:System.ObjectDisposedException">テキスト ライターは破棄されます。</exception>
        <exception cref="T:System.InvalidOperationException">テキスト ライターは、前の書き込み操作によって使用は現在です。</exception>
        <altmember cref="M:System.IO.StreamWriter.WriteAsync(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.IO.StringWriter.WriteAsync(System.Char[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>行終端記号をテキスト文字列またはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 行終端記号は、<xref:System.IO.TextWriter.CoreNewLine> フィールドで定義されます。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">書き込む <see langword="Boolean" /> 値。</param>
        <summary>
          <see langword="Boolean" /> 値のテキスト形式をテキスト文字列またはストリームに書き込み、続けて行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定した値のテキスト表現が呼び出しによって生成された、 <xref:System.Boolean.ToString%2A?displayProperty=fullName> メソッドです。  
  
 このメソッドを出力するか <xref:System.Boolean.TrueString?displayProperty=fullName> または <xref:System.Boolean.FalseString?displayProperty=fullName>です。  
  
 行終端記号は、<xref:System.IO.TextWriter.CoreNewLine> フィールドで定義されます。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">テキスト ストリームに書き込む文字。</param>
        <summary>文字をテキスト文字列またはストリームに書き込み、続けて行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このオーバー ロードは <xref:System.IO.TextWriter.Write%28System.Char%29> 続けて <xref:System.IO.TextWriter.WriteLine> します。  
  
 行終端記号は、<xref:System.IO.TextWriter.CoreNewLine> フィールドで定義されます。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.Char[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">データの読み取り元の文字配列。</param>
        <summary>文字の配列をテキスト文字列またはストリームに書き込み、続けて行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 すべての文字 `buffer` は基になるストリームに書き込まれます。 文字配列が `null` の場合は、行終端記号だけが書き込まれます。  
  
 このオーバー ロードは <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29> 続けて <xref:System.IO.TextWriter.WriteLine> します。  
  
 行終端記号は、<xref:System.IO.TextWriter.CoreNewLine> フィールドで定義されます。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.Decimal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">書き込む 10 進値。</param>
        <summary>10 進値のテキスト形式をテキスト文字列またはストリームに書き込み、続けて行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.TextWriter.FormatProvider%2A> いない場合は、プロパティ `null`, 、カルチャに固有の書式を指定します。 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 行終端記号は、<xref:System.IO.TextWriter.CoreNewLine> フィールドで定義されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">書き込む 8 バイト浮動小数点値。</param>
        <summary>8 バイト浮動小数点値のテキスト形式をテキスト文字列またはストリームに書き込み、続けて行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.TextWriter.FormatProvider%2A> いない場合は、プロパティ `null`, 、カルチャに固有の書式を指定します。 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 行終端記号は、<xref:System.IO.TextWriter.CoreNewLine> フィールドで定義されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">書き込む 4 バイト符号付き整数。</param>
        <summary>4 バイト符号付き整数のテキスト形式をテキスト文字列またはストリームに書き込み、続けて行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定した値のテキスト表現が呼び出しによって生成された、 <xref:System.Int32.ToString%2A?displayProperty=fullName> メソッドです。<xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> いない場合は、プロパティ `null`, 、カルチャに固有の書式を指定します。  
  
 行終端記号は、<xref:System.IO.TextWriter.CoreNewLine> フィールドで定義されます。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">書き込む 8 バイト符号付き整数。</param>
        <summary>8 バイト符号付き整数のテキスト形式をテキスト文字列またはストリームに書き込み、続けて行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定した値のテキスト表現が呼び出しによって生成された、 <xref:System.Int64.ToString%2A?displayProperty=fullName> メソッドです。<xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=fullName> いない場合は、プロパティ `null`, 、カルチャに固有の書式を指定します。  
  
 行終端記号は、<xref:System.IO.TextWriter.CoreNewLine> フィールドで定義されます。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">書き込むオブジェクト。<c>value</c> が <see langword="null" /> の場合は、行終端記号だけを書き込みます。</param>
        <summary>オブジェクトで <see langword="ToString" /> メソッドを呼び出して、そのオブジェクトのテキスト形式をテキスト文字列またはストリームに書き込み、続けて行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このオーバー ロードは、<xref:System.IO.TextWriter.Write%28System.String%2CSystem.Object%29>オーバー ロードします。<xref:System.IO.TextWriter.FormatProvider%2A>いない場合は、プロパティ`null`カルチャに固有の書式を指定します。  
  
 行終端記号は、<xref:System.IO.TextWriter.CoreNewLine> フィールドで定義されます。  
  
 共通 I\/O タスクの一覧は、次を参照してください。[Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">書き込む 4 バイト浮動小数点値。</param>
        <summary>4 バイト浮動小数点値のテキスト形式をテキスト文字列またはストリームに書き込み、続けて行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.TextWriter.FormatProvider%2A> いない場合は、プロパティ `null`, 、カルチャに固有の書式を指定します。 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 行終端記号は、<xref:System.IO.TextWriter.CoreNewLine> フィールドで定義されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">書き込む文字列。<c>value</c> が <see langword="null" /> の場合は、行終端記号だけを書き込みます。</param>
        <summary>文字列をテキスト文字列またはストリームに書き込み、続けて行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このオーバー ロードは、<xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29>オーバー ロードします。  
  
 行終端記号は、<xref:System.IO.TextWriter.CoreNewLine> フィールドで定義されます。  
  
 このメソッドは、指定した文字列で個別の改行文字 \(16 進数で 0x000a\) を検索しないため、改行文字は <xref:System.IO.TextWriter.NewLine%2A> に置き換えられません。  
  
 共通 I\/O タスクの一覧は、次を参照してください。[Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.UInt32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">書き込む 4 バイト符号なし整数。</param>
        <summary>4 バイト符号なし整数のテキスト形式をテキスト文字列またはストリームに書き込み、続けて行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定した値のテキスト表現が呼び出しによって生成された、 <xref:System.UInt32.ToString%2A?displayProperty=fullName> メソッドです。<xref:System.IO.TextWriter.FormatProvider%2A> いない場合は、プロパティ `null`, 、カルチャに固有の書式を指定します。  
  
 行終端記号は、<xref:System.IO.TextWriter.CoreNewLine> フィールドで定義されます。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.UInt64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">書き込む 8 バイト符号なし整数。</param>
        <summary>8 バイト符号なし整数のテキスト形式をテキスト文字列またはストリームに書き込み、続けて行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定した値のテキスト表現が呼び出しによって生成された、 <xref:System.UInt64.ToString%2A?displayProperty=fullName> メソッドです。<xref:System.IO.TextWriter.FormatProvider%2A> いない場合は、プロパティ `null`, 、カルチャに固有の書式を指定します。  
  
 行終端記号は、<xref:System.IO.TextWriter.CoreNewLine> フィールドで定義されます。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">複合書式指定文字列 \(「解説」を参照\)。</param>
        <param name="arg0">書式設定および書き込みをするオブジェクト。</param>
        <summary>
          <see cref="M:System.String.Format(System.String,System.Object)" /> メソッドと同じセマンティクスを使用して、書式設定された文字列と改行をテキスト文字列またはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して、オブジェクトの値を文字列形式に変換して、その表現を文字列に埋め込むには、.NET Framework のです。 .NET Framework では、次の書式設定のトピックで詳しく説明されている広範な書式設定のサポートを提供します。  
  
-   複合書式指定機能の詳細については、「[Composite Formatting](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49)」を参照してください。  
  
-   数値書式指定子の詳細については、次を参照してください。 [Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467) と [Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4)です。  
  
-   についての日付と時刻の書式指定子の詳細については、次を参照してください。 [Standard DateTime Format Strings](http://msdn.microsoft.com/ja-jp/bb79761a-ca08-44ee-b142-b06b3e2fc22b) と [Custom DateTime Format Strings](http://msdn.microsoft.com/ja-jp/98b374e3-0cc2-4c78-ab44-efb671d71984)です。  
  
-   列挙型書式指定子の詳細については、次を参照してください。 [Enumeration Format Strings](http://msdn.microsoft.com/ja-jp/dd1ff672-1052-42cf-8666-4924fb6cd1a1)します。  
  
-   書式設定に関する詳細については、次を参照してください。 [Formatting Types](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f)します。  
  
 `format` パラメーターは、0 または 1 つ以上のインデックス付きプレース ホルダー、このメソッドのパラメーター リスト内のオブジェクトに対応する書式指定項目と呼ばれる個以上のテキストが混在します。 書式設定のプロセスでは、対応するオブジェクトの値の文字列形式に各書式項目を置換します。  
  
 書式指定項目の構文は次のとおりです。  
  
 {*インデックス*\[、*長さ*\] \[:*formatString*\]}  
  
 角かっこ内の要素は省略できます。 次の表では、各要素について説明します。 複合書式指定項目の構文を含む機能を書式設定の詳細については、次を参照してください。 [Composite Formatting](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49)します。  
  
|要素|説明|  
|--------|--------|  
|インデックス|書式設定するオブジェクトのパラメーター リスト内の 0 から始まる位置。 オブジェクトが指定された場合 *インデックス* は `null`, 、書式指定項目が置き換え <xref:System.String.Empty?displayProperty=fullName>します。 このオーバー ロードは、パラメーターに 1 つのオブジェクトのみを持つためにボックスの一覧の値 *インデックス* 常に 0 があります。 内のパラメーターがない場合、 *インデックス* 、位置、 <xref:System.FormatException> がスローされます。|  
|、*長さ*|パラメーターの文字列表記で文字列の最小数。 正の値は、パラメーター右揃えになります。負の場合は、左揃えをお勧めします。|  
|:*formatString*|書式設定するオブジェクトでサポートされている標準またはカスタム書式指定文字列。 値の *formatString* は、オブジェクトのによってサポートされる値と同じ `ToString(``format``)` メソッドです。 場合 *formatString* が指定されていない書式設定するオブジェクトを実装して、 <xref:System.IFormattable> インターフェイス、 `null` の値として渡される、 `format` パラメーターとして使用されている、 <xref:System.IFormattable.ToString%2A?displayProperty=fullName> 書式指定文字列。|  
  
 先頭および末尾の文字を中かっこ"{"と"}"が必要です。 単一のリテラル中かっこ文字を指定する `format`, 先頭の 2 つの指定、または末尾に中かっこ文字です。 つまり、"{{"または"}}"。  
  
 このメソッドは、指定した文字列で個別の改行文字 \(16 進数で 0x000a\) を検索しないため、改行文字は <xref:System.IO.TextWriter.NewLine%2A> に置き換えられません。  
  
 指定したオブジェクトがない書式指定文字列で参照されている場合は無視されます。  
  
 行終端記号は、<xref:System.IO.TextWriter.CoreNewLine> フィールドで定義されます。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> 有効な複合書式指定文字列ではありません。  
  
 または  
  
 書式指定項目のインデックスが 0 \(ゼロ\) よりも小さいか \(つまり、このメソッドのオーバー ロードのいずれか\) を書式設定オブジェクトの数以上です。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (string format, object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.String,System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">複合書式指定文字列 \(「解説」を参照\)。</param>
        <param name="arg">書式設定および書き込みをする 0 個以上のオブジェクトを含むオブジェクト配列。</param>
        <summary>
          <see cref="M:System.String.Format(System.String,System.Object)" /> と同じセマンティクスを使用して、書式設定された文字列と改行を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して、オブジェクトの値を文字列形式に変換して、その表現を文字列に埋め込むには、.NET Framework のです。 .NET Framework では、次の書式設定のトピックで詳しく説明されている広範な書式設定のサポートを提供します。  
  
-   複合書式指定機能の詳細については、「[Composite Formatting](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49)」を参照してください。  
  
-   数値書式指定子の詳細については、次を参照してください。 [Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467) と [Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4)です。  
  
-   についての日付と時刻の書式指定子の詳細については、次を参照してください。 [Standard DateTime Format Strings](http://msdn.microsoft.com/ja-jp/bb79761a-ca08-44ee-b142-b06b3e2fc22b) と [Custom DateTime Format Strings](http://msdn.microsoft.com/ja-jp/98b374e3-0cc2-4c78-ab44-efb671d71984)です。  
  
-   列挙型書式指定子の詳細については、次を参照してください。 [Enumeration Format Strings](http://msdn.microsoft.com/ja-jp/dd1ff672-1052-42cf-8666-4924fb6cd1a1)します。  
  
-   書式設定に関する詳細については、次を参照してください。 [Formatting Types](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f)します。  
  
 `format` パラメーターは、0 または 1 つ以上のインデックス付きプレース ホルダー、このメソッドのパラメーター リスト内のオブジェクトに対応する書式指定項目と呼ばれる個以上のテキストが混在します。 書式設定のプロセスでは、対応するオブジェクトの値の文字列形式に各書式項目を置換します。  
  
 書式指定項目の構文は次のとおりです。  
  
 {*インデックス*\[、*長さ*\] \[:*formatString*\]}  
  
 角かっこ内の要素は省略できます。 次の表では、各要素について説明します。 複合書式指定項目の構文を含む機能を書式設定の詳細については、次を参照してください。 [Composite Formatting](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49)します。  
  
|要素|説明|  
|--------|--------|  
|インデックス|書式設定するオブジェクトのパラメーター リスト内の 0 から始まる位置。 オブジェクトが指定された場合 *インデックス* は `null`, 、書式指定項目が置き換え <xref:System.String.Empty?displayProperty=fullName>します。 このオーバー ロードは、パラメーターに配列を持つためにボックスの一覧の値 *インデックス* 常に、配列の長さよりも小さくする必要があります。 内のパラメーターがない場合、 *インデックス* 、位置、 <xref:System.FormatException> がスローされます。|  
|、*長さ*|パラメーターの文字列表記で文字列の最小数。 正の値は、パラメーター右揃えになります。負の場合は、左揃えをお勧めします。|  
|:*formatString*|書式設定するオブジェクトでサポートされている標準またはカスタム書式指定文字列。 値の *formatString* は、オブジェクトのによってサポートされる値と同じ `ToString(``format``)` メソッドです。 場合 *formatString* が指定されていない書式設定するオブジェクトを実装して、 <xref:System.IFormattable> インターフェイス、 `null` の値として渡される、 `format` パラメーターとして使用されている、 <xref:System.IFormattable.ToString%2A?displayProperty=fullName> 書式指定文字列。|  
  
 先頭および末尾の文字を中かっこ"{"と"}"が必要です。 単一のリテラル中かっこ文字を指定する `format`, 先頭の 2 つの指定、または末尾に中かっこ文字です。 つまり、"{{"または"}}"。  
  
 このメソッドは、指定した文字列で個別の改行文字 \(16 進数で 0x000a\) を検索しないため、改行文字は <xref:System.IO.TextWriter.NewLine%2A> に置き換えられません。  
  
 指定したオブジェクトがない書式指定文字列で参照されている場合は無視されます。  
  
 行終端記号は、<xref:System.IO.TextWriter.CoreNewLine> フィールドで定義されます。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">文字列型またはオブジェクトとして渡される <see langword="null" />です。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> 有効な複合書式指定文字列ではありません。  
  
 または  
  
 書式指定項目のインデックスが 0 \(ゼロ\) よりも小さいかの長さ以上、 <paramref name="arg" /> 配列。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">データの読み取り元の文字配列。</param>
        <param name="index">データの読み込みを開始する、<c>buffer</c> 内の文字の位置。</param>
        <param name="count">書き込む文字の最大数。</param>
        <summary>文字の部分配列をテキスト文字列またはストリームに書き込み、続けて行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、書き込み `count` にこのデータの文字 `TextWriter` から、 `buffer` 文字配列の位置以降にある `index`です。  
  
 このオーバー ロードを呼び出すことは、 [WriteLine メソッド \(Char\<xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29> メソッドに続けて [WriteLine メソッド \(Char\<xref:System.IO.TextWriter.WriteLine%2A> 内の各文字の `buffer` 間 `index` と \(`index` \+ `count`\)。  
  
 行終端記号は、[WriteLine メソッド \(Char\<xref:System.IO.TextWriter.CoreNewLine> フィールドで定義されます。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> または <paramref name="count" /> が負の値。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">複合書式指定文字列 \(「解説」を参照\)。</param>
        <param name="arg0">書式設定および書き込みをする最初のオブジェクト。</param>
        <param name="arg1">書式設定および書き込みをする 2 番目のオブジェクト。</param>
        <summary>
          <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> メソッドと同じセマンティクスを使用して、書式設定された文字列と改行をテキスト文字列またはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して、オブジェクトの値を文字列形式に変換して、その表現を文字列に埋め込むには、.NET Framework のです。 .NET Framework では、次の書式設定のトピックで詳しく説明されている広範な書式設定のサポートを提供します。  
  
-   複合書式指定機能の詳細については、「[Composite Formatting](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49)」を参照してください。  
  
-   数値書式指定子の詳細については、次を参照してください。 [Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467) と [Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4)です。  
  
-   についての日付と時刻の書式指定子の詳細については、次を参照してください。 [Standard DateTime Format Strings](http://msdn.microsoft.com/ja-jp/bb79761a-ca08-44ee-b142-b06b3e2fc22b) と [Custom DateTime Format Strings](http://msdn.microsoft.com/ja-jp/98b374e3-0cc2-4c78-ab44-efb671d71984)です。  
  
-   列挙型書式指定子の詳細については、次を参照してください。 [Enumeration Format Strings](http://msdn.microsoft.com/ja-jp/dd1ff672-1052-42cf-8666-4924fb6cd1a1)します。  
  
-   書式設定に関する詳細については、次を参照してください。 [Formatting Types](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f)します。  
  
 `format` パラメーターは、0 または 1 つ以上のインデックス付きプレース ホルダー、このメソッドのパラメーター リスト内のオブジェクトに対応する書式指定項目と呼ばれる個以上のテキストが混在します。 書式設定のプロセスでは、対応するオブジェクトの値の文字列形式に各書式項目を置換します。  
  
 書式指定項目の構文は次のとおりです。  
  
 {*インデックス*\[、*長さ*\] \[:*formatString*\]}  
  
 角かっこ内の要素は省略できます。 次の表では、各要素について説明します。 複合書式指定項目の構文を含む機能を書式設定の詳細については、次を参照してください。 [Composite Formatting](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49)します。  
  
|要素|説明|  
|--------|--------|  
|インデックス|書式設定するオブジェクトのパラメーター リスト内の 0 から始まる位置。 オブジェクトが指定された場合 *インデックス* は `null`, 、書式指定項目が置き換え <xref:System.String.Empty?displayProperty=fullName>します。 このオーバー ロードは、パラメーターに 2 つのオブジェクトを持つためにボックスの一覧の値 *インデックス* 0 または 1 を常にする必要があります。 内のパラメーターがない場合、 *インデックス* 、位置、 <xref:System.FormatException> がスローされます。|  
|、*長さ*|パラメーターの文字列表記で文字列の最小数。 正の値は、パラメーター右揃えになります。負の場合は、左揃えをお勧めします。|  
|:*formatString*|書式設定するオブジェクトでサポートされている標準またはカスタム書式指定文字列。 値の *formatString* は、オブジェクトのによってサポートされる値と同じ `ToString(``format``)` メソッドです。 場合 *formatString* が指定されていない書式設定するオブジェクトを実装して、 <xref:System.IFormattable> インターフェイス、 `null` の値として渡される、 `format` パラメーターとして使用されている、 <xref:System.IFormattable.ToString%2A?displayProperty=fullName> 書式指定文字列。|  
  
 先頭および末尾の文字を中かっこ"{"と"}"が必要です。 単一のリテラル中かっこ文字を指定する `format`, 先頭の 2 つの指定、または末尾に中かっこ文字です。 つまり、"{{"または"}}"。  
  
 このメソッドは、指定した文字列で個別の改行文字 \(16 進数で 0x000a\) を検索しないため、改行文字は <xref:System.IO.TextWriter.NewLine%2A> に置き換えられません。  
  
 指定したオブジェクトがない書式指定文字列で参照されている場合は無視されます。  
  
 行終端記号は、<xref:System.IO.TextWriter.CoreNewLine> フィールドで定義されます。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> 有効な複合書式指定文字列ではありません。  
  
 または  
  
 書式指定項目のインデックスが 0 \(ゼロ\) よりも小さいか、このメソッドのオーバー ロードは 2 つ\) を書式設定オブジェクトの数以上です。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">複合書式指定文字列 \(「解説」を参照\)。</param>
        <param name="arg0">書式設定および書き込みをする最初のオブジェクト。</param>
        <param name="arg1">書式設定および書き込みをする 2 番目のオブジェクト。</param>
        <param name="arg2">書式設定および書き込みをする 3 番目のオブジェクト。</param>
        <summary>
          <see cref="M:System.String.Format(System.String,System.Object)" /> と同じセマンティクスを使用して、書式設定された文字列と改行を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して、オブジェクトの値を文字列形式に変換して、その表現を文字列に埋め込むには、.NET Framework のです。 .NET Framework では、次の書式設定のトピックで詳しく説明されている広範な書式設定のサポートを提供します。  
  
-   複合書式指定機能の詳細については、「[Composite Formatting](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49)」を参照してください。  
  
-   数値書式指定子の詳細については、次を参照してください。 [Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467) と [Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4)です。  
  
-   についての日付と時刻の書式指定子の詳細については、次を参照してください。 [Standard DateTime Format Strings](http://msdn.microsoft.com/ja-jp/bb79761a-ca08-44ee-b142-b06b3e2fc22b) と [Custom DateTime Format Strings](http://msdn.microsoft.com/ja-jp/98b374e3-0cc2-4c78-ab44-efb671d71984)です。  
  
-   列挙型書式指定子の詳細については、次を参照してください。 [Enumeration Format Strings](http://msdn.microsoft.com/ja-jp/dd1ff672-1052-42cf-8666-4924fb6cd1a1)します。  
  
-   書式設定に関する詳細については、次を参照してください。 [Formatting Types](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f)します。  
  
 `format` パラメーターは、0 または 1 つ以上のインデックス付きプレース ホルダー、このメソッドのパラメーター リスト内のオブジェクトに対応する書式指定項目と呼ばれる個以上のテキストが混在します。 書式設定のプロセスでは、対応するオブジェクトの値の文字列形式に各書式項目を置換します。  
  
 書式指定項目の構文は次のとおりです。  
  
 {*インデックス*\[、*長さ*\] \[:*formatString*\]}  
  
 角かっこ内の要素は省略できます。 次の表では、各要素について説明します。 複合書式指定項目の構文を含む機能を書式設定の詳細については、次を参照してください。 [Composite Formatting](http://msdn.microsoft.com/ja-jp/87b7d528-73f6-43c6-b71a-f23043039a49)します。  
  
|要素|説明|  
|--------|--------|  
|インデックス|書式設定するオブジェクトのパラメーター リスト内の 0 から始まる位置。 オブジェクトが指定された場合 *インデックス* は `null`, 、書式指定項目が置き換え <xref:System.String.Empty?displayProperty=fullName>します。 このオーバー ロードは、パラメーターに 3 つのオブジェクトを持つためにボックスの一覧の値 *インデックス* 0、1、または 2 を常にする必要があります。 内のパラメーターがない場合、 *インデックス* 、位置、 <xref:System.FormatException> がスローされます。|  
|、*長さ*|パラメーターの文字列表記で文字列の最小数。 正の値は、パラメーター右揃えになります。負の場合は、左揃えをお勧めします。|  
|:*formatString*|書式設定するオブジェクトでサポートされている標準またはカスタム書式指定文字列。 値の *formatString* は、オブジェクトのによってサポートされる値と同じ `ToString(``format``)` メソッドです。 場合 *formatString* が指定されていない書式設定するオブジェクトを実装して、 <xref:System.IFormattable> インターフェイス、 `null` の値として渡される、 `format` パラメーターとして使用されている、 <xref:System.IFormattable.ToString%2A?displayProperty=fullName> 書式指定文字列。|  
  
 先頭および末尾の文字を中かっこ"{"と"}"が必要です。 単一のリテラル中かっこ文字を指定する `format`, 先頭の 2 つの指定、または末尾に中かっこ文字です。 つまり、"{{"または"}}"。  
  
 このメソッドは、指定した文字列で個別の改行文字 \(16 進数で 0x000a\) を検索しないため、改行文字は <xref:System.IO.TextWriter.NewLine%2A> に置き換えられません。  
  
 指定したオブジェクトがない書式指定文字列で参照されている場合は無視されます。  
  
 行終端記号は、<xref:System.IO.TextWriter.CoreNewLine> フィールドで定義されます。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.TextWriter" /> が閉じています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> 有効な複合書式指定文字列ではありません。  
  
 または  
  
 書式指定項目のインデックスが 0 \(ゼロ\) よりも小さいか \(つまり、このメソッドのオーバー ロードのうちの 3 つ\) を書式設定オブジェクトの数以上です。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteLineAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteLineAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLineAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>行終端記号をテキスト文字列またはストリームに非同期的に書き込みます。</summary>
        <returns>非同期の書き込み操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 行終端記号は、<xref:System.IO.TextWriter.CoreNewLine> フィールドで定義されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">テキスト ライターは破棄されます。</exception>
        <exception cref="T:System.InvalidOperationException">テキスト ライターは、前の書き込み操作によって使用は現在です。</exception>
        <altmember cref="M:System.IO.StreamWriter.WriteLineAsync" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteLineAsync (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteLineAsync(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLineAsync(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">テキスト ストリームに書き込む文字。</param>
        <summary>文字をテキスト文字列またはストリームに非同期的に書き込み、続けて行終端記号を書き込みます。</summary>
        <returns>非同期の書き込み操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 行終端記号は、<xref:System.IO.TextWriter.CoreNewLine> フィールドで定義されます。  
  
 <xref:System.IO.TextWriter> クラスは抽象クラスです。 そのため、コードでそれをインスタンス化することはありません。 使用する例については、 <xref:System.IO.TextWriter.WriteLineAsync%2A> メソッドを参照してください、 <xref:System.IO.StreamWriter.WriteLineAsync%2A?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">テキスト ライターは破棄されます。</exception>
        <exception cref="T:System.InvalidOperationException">テキスト ライターは、前の書き込み操作によって使用は現在です。</exception>
        <altmember cref="M:System.IO.StreamWriter.WriteLineAsync(System.Char)" />
        <altmember cref="M:System.IO.StringWriter.WriteLineAsync(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteLineAsync (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteLineAsync(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLineAsync(System.Char[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">テキスト ストリームに書き込む文字配列。 文字配列が <see langword="null" /> の場合は、行終端記号だけが書き込まれます。</param>
        <summary>文字の配列をテキスト文字列またはストリームに非同期的に書き込み、続けて行終端記号を書き込みます。</summary>
        <returns>非同期の書き込み操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 行終端記号は、<xref:System.IO.TextWriter.CoreNewLine> フィールドで定義されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">テキスト ライターは破棄されます。</exception>
        <exception cref="T:System.InvalidOperationException">テキスト ライターは、前の書き込み操作によって使用は現在です。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteLineAsync (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteLineAsync(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLineAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">書き込む文字列。 値が <see langword="null" /> の場合は、行終端記号だけが書き込まれます。</param>
        <summary>文字列をテキスト文字列またはストリームに非同期的に書き込み、続けて行終端記号を書き込みます。</summary>
        <returns>非同期の書き込み操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 行終端記号は、<xref:System.IO.TextWriter.CoreNewLine> フィールドで定義されます。  
  
 <xref:System.IO.TextWriter> クラスは抽象クラスです。 そのため、コードでそれをインスタンス化することはありません。 使用する例については、 <xref:System.IO.TextWriter.WriteLineAsync%2A> メソッドを参照してください、 <xref:System.IO.StreamWriter.WriteLineAsync%2A?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">テキスト ライターは破棄されます。</exception>
        <exception cref="T:System.InvalidOperationException">テキスト ライターは、前の書き込み操作によって使用は現在です。</exception>
        <altmember cref="M:System.IO.StreamWriter.WriteLineAsync(System.String)" />
        <altmember cref="M:System.IO.StringWriter.WriteLineAsync(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteLineAsync (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteLineAsync(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">データの書き込み元の文字配列。</param>
        <param name="index">データの取得を開始する、バッファー内の文字位置。</param>
        <param name="count">書き込む文字数。</param>
        <summary>文字の部分配列をテキスト文字列またはストリームに非同期的に書き込み、続けて行終端記号を書き込みます。</summary>
        <returns>非同期の書き込み操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 行終端記号は、[WriteLineAsync メソッド \(Char\<xref:System.IO.TextWriter.CoreNewLine> フィールドで定義されます。  
  
 [WriteLineAsync メソッド \(Char\<xref:System.IO.TextWriter> クラスは抽象クラスです。 そのため、コードでそれをインスタンス化することはありません。 使用する例については、 [WriteLineAsync メソッド \(Char\<xref:System.IO.TextWriter.WriteLineAsync%2A> メソッドを参照してください、 [WriteLineAsync メソッド \(Char\<xref:System.IO.StreamWriter.WriteLineAsync%2A?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> に <paramref name="count" /> を加算した値がバッファーの長さを超えています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> または <paramref name="count" /> が負の値。</exception>
        <exception cref="T:System.ObjectDisposedException">テキスト ライターは破棄されます。</exception>
        <exception cref="T:System.InvalidOperationException">テキスト ライターは、前の書き込み操作によって使用は現在です。</exception>
        <altmember cref="M:System.IO.StreamWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.IO.StringWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>データをテキスト文字列またはストリームに書き込みます。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.IO.TextWriter" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="WriteLine">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>データをテキスト文字列またはストリームに書き込み、続けて行終端記号を書き込みます。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="WriteLineAsync">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>データをテキスト文字列またはストリームに非同期的に書き込み、続けて行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.IO.TextWriter" /> オブジェクトによって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="WriteAsync">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>データをテキスト文字列またはストリームに非同期的に書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>