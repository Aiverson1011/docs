<Type Name="Directory" FullName="System.IO.Directory">
  <TypeSignature Language="C#" Value="public static class Directory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Directory extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.Directory" />
  <AssemblyInfo>
    <AssemblyName>System.IO.FileSystem</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>ディレクトリやサブディレクトリを通じて、作成、移動、および列挙するための静的メソッドを公開します。 このクラスは継承できません。  
  
 この型の .NET Framework ソース コードを参照するには、[参照ソース](http://referencesource.microsoft.com/#mscorlib/system/io/directory.cs#b3ad5f0ba800bb28)をご覧ください。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/directory.cs#b3ad5f0ba800bb28). You can browse through the source code online, download the reference for offline viewing, and step through the sources \(including patches and updates\) during debugging; see [instructions](http://referencesource.microsoft.com/).  
  
 Use the <xref:System.IO.Directory> class for typical operations such as copying, moving, renaming, creating, and deleting directories.  
  
-   To create a directory, use one of the <xref:System.IO.Directory.CreateDirectory%2A> methods.  
  
-   To delete a directory, use one of the <xref:System.IO.Directory.Delete%2A> methods.  
  
-   To get or set the current directory for an app, use the <xref:System.IO.Directory.GetCurrentDirectory%2A> or <xref:System.IO.Directory.SetCurrentDirectory%2A> method.  
  
-   To manipulate <xref:System.DateTime> information related to the creation, access, and writing of a directory, use methods such as <xref:System.IO.Directory.SetLastAccessTime%2A> and <xref:System.IO.Directory.SetCreationTime%2A>.  
  
 The static methods of the <xref:System.IO.Directory> class perform security checks on all methods. If you are going to reuse an object several times, consider using the corresponding instance method of <xref:System.IO.DirectoryInfo> instead, because the security check will not always be necessary.  
  
 If you are performing only one directory\-related action, it might be more efficient to use a static <xref:System.IO.Directory> method rather than a corresponding <xref:System.IO.DirectoryInfo> instance method. Most <xref:System.IO.Directory> methods require the path to the directory that you are manipulating.  
  
> [!NOTE]
>  In members that accept a string **parameterReference tag is not supported!!!!**  
>  parameter, that path must be well\-formed or an exception is raised. For example, if a path is fully qualified but begins with a space \(" c:\\temp"\), the path string isn't trimmed, so the path is considered malformed and an exception is raised. In addition, a path or a combination of paths cannot be fully qualified twice. For example, "c:\\temp c:\\windows" also raises an exception. Ensure that your paths are well\-formed when using methods that accept a path string. For more information see <xref:System.IO.Path>.  
  
 In members that accept a path, the path can refer to a file or a directory. You can use a full path, a relative path, or a Universal Naming Convention \(UNC\) path for a server and share name. For example, all the following are acceptable paths:  
  
-   "c:\\\\MyDir" in C\#, or "c:\\MyDir" in Visual Basic.  
  
-   "MyDir\\\\MySubdir" in C\#, or "MyDir\\MySubDir" in Visual Basic.  
  
-   "\\\\\\\\MyServer\\\\MyShare" in C\#, or "\\\\MyServer\\MyShare" in Visual Basic.  
  
 By default, full read\/write access to new directories is granted to all users. However, the app must have the correct security to access existing directories.  
  
 To demand permissions for a directory and all its subdirectories, end the path string with the directory separator character. \(For example, "C:\\Temp\\" grants access to C:\\Temp\\ and all its subdirectories.\) To demand permissions only for a specific directory, end the path string with a period. \(For example, "C:\\Temp\\." grants access only to C:\\Temp\\, not to its subdirectories.\)  
  
 In members that accept a **parameterReference tag is not supported!!!!**  
 parameter, the search string can be any combination of literal characters and two wildcard characters; \* and ?. This parameter does not recognize regular expressions. For more information, see the <xref:System.IO.Directory.EnumerateDirectories%28System.String%2CSystem.String%29> method or any other method that uses the **parameterReference tag is not supported!!!!**  
 parameter.  
  
 For a list of common I\/O tasks, see [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc).  
  
 <xref:System.IO.Directory> and <xref:System.IO.DirectoryInfo> are not supported for use in [!INCLUDE[win8_appstore_long](~/includes/win8-appstore-long-md.md)] apps. For information about how to access files and folders in [!INCLUDE[win8_appstore_long](~/includes/win8-appstore-long-md.md)] apps, see [Accessing data and files \(Windows Store apps\)](http://msdn.microsoft.com/library/windows/apps/hh758319.aspx).  
  
   
  
## 例  
 The following example shows how to retrieve all the text files from a directory and move them to a new directory. After the files are moved, they no longer exist in the original directory.  
  
 [!code-csharp[System.IO.Directory\#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class2.cs#10)]
 [!code-vb[System.IO.Directory\#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class2.vb#10)]  
  
 The following example demonstrates how to use the <xref:System.IO.Directory.EnumerateFiles%2A> method to retrieve a collection of text files from a directory, and then use that collection in a query to find all the lines that contain "Example".  
  
 [!code-csharp[System.IO.Directory\#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class3.cs#11)]
 [!code-vb[System.IO.Directory\#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class3.vb#11)]  
  
 The following example demonstrates how to move a directory and all its files to a new directory. The original directory no longer exists after it has been moved.  
  
 [!code-csharp[System.IO.Directory\#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class6.cs#14)]
 [!code-vb[System.IO.Directory\#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class6.vb#14)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.DriveInfo" />
    <altmember cref="T:System.IO.File" />
    <altmember cref="T:System.IO.DirectoryInfo" />
    <altmember cref="T:System.IO.FileInfo" />
    <altmember cref="T:System.IO.FileSystemWatcher" />
  </Docs>
  <Members>
    <Member MemberName="CreateDirectory">
      <MemberSignature Language="C#" Value="public static System.IO.DirectoryInfo CreateDirectory (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.DirectoryInfo CreateDirectory(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.CreateDirectory(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.DirectoryInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">作成するディレクトリ。</param>
        <summary>既に存在している場合以外は、指定したパスにすべてのディレクトリとサブディレクトリを作成します。</summary>
        <returns>指定したパスに存在するディレクトリを表すオブジェクト。 指定したパスにおいてディレクトリが既に存在するかどうかにかかわりなく、このオブジェクトが返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定されたすべてのディレクトリ `path` か、既に存在している場合を除き、作成の一部 `path` が無効です。 ディレクトリが既に存在すると、このメソッドは、新しいディレクトリを作成できませんが、返す、 <xref:System.IO.DirectoryInfo> 既存のディレクトリのオブジェクト。  
  
 `path` ファイル パスではなく、ディレクトリ パスを指定します。  
  
 末尾から末尾のスペースが削除された、 `path` ディレクトリを作成する前にパラメーター。  
  
 書き込みアクセスが共有上のリモート コンピューターでディレクトリを作成することができます。 UNC パスがサポートされています。次の指定など `path`: `\\2009\Archives\December` Visual basic と `\\\\2009\\Archives\\December` C\# の場合。  
  
 コロン \(:\) で、ディレクトリの作成はサポートされていませんし、により、 `NotSupportedException` がスローされます。  
  
   
  
## 例  
 次の例では、作成し、指定されたディレクトリを削除します。  
  
 [!code-cpp[Dir\_CreateDir\#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dir_CreateDir/CPP/dir_createdir.cpp#1)]
 [!code-csharp[Dir\_CreateDir\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_CreateDir/CS/dir_createdir.cs#1)]
 [!code-vb[Dir\_CreateDir\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_CreateDir/VB/dir_createdir.vb#1)]  
  
 C:\\Users\\User1\\Public\\Html ディレクトリは、現在のディレクトリが C:\\Users\\User1 時に作成するには円記号が正しく解釈されるように、次の呼び出しのいずれかを使用します。  
  
 Visual basic の場合。  
  
```  
Directory.CreateDirectory("Public\Html")   
    Directory.CreateDirectory("\Users\User1\Public\Html")   
    Directory.CreateDirectory("c:\Users\User1\Public\Html")  
```  
  
 C\# の場合:  
  
```  
Directory.CreateDirectory("Public\\Html");  
    Directory.CreateDirectory("\\Users\\User1\\Public\\Html");  
    Directory.CreateDirectory("c:\\Users\\User1\\Public\\Html");  
```  
  
 C\+\+:  
  
```  
Directory::CreateDirectory("Public\\Html");  
    Directory::CreateDirectory("\\Users\\User1\\Public\\Html");  
    Directory::CreateDirectory("c:\\Users\\User1\\Public\\Html");  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <paramref name="path" /> によって指定されたディレクトリはファイルです。  
  
 \-または\-  
  
 ネットワーク名が不明です。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列か、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。  
  
 または  
  
 <paramref name="path" /> のプレフィックスまたは内容がコロン文字 \(:\) だけです。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> に、ドライブ ラベル \(「C:\\」\) の一部ではないコロン文字 \(:\) が含まれています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading and writing files or directories. Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.DirectoryInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDirectory">
      <MemberSignature Language="C#" Value="public static System.IO.DirectoryInfo CreateDirectory (string path, System.Security.AccessControl.DirectorySecurity directorySecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.DirectoryInfo CreateDirectory(string path, class System.Security.AccessControl.DirectorySecurity directorySecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.DirectoryInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="directorySecurity" Type="System.Security.AccessControl.DirectorySecurity" />
      </Parameters>
      <Docs>
        <param name="path">作成するディレクトリ。</param>
        <param name="directorySecurity">ディレクトリに適用するアクセス制御。</param>
        <summary>既に存在している場合以外は、指定したパスにすべてのディレクトリを作成し、指定した Windows セキュリティを適用します。</summary>
        <returns>指定したパスに存在するディレクトリを表すオブジェクト。 指定したパスにおいてディレクトリが既に存在するかどうかにかかわりなく、このオブジェクトが返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドのオーバー ロードを使用すると、セキュリティが適用される前に、ディレクトリにアクセスできる可能性はありませんので、アクセス制御\] で、ディレクトリを作成します。  
  
 指定されたすべてのディレクトリ、 `path` か、既に存在している場合を除き、パラメーターを作成の一部 `path` が無効です。`path` ファイル パスではなく、ディレクトリ パスを指定します。 ディレクトリが既に存在すると、このメソッドは、新しいディレクトリを作成できませんが、返す、 <xref:System.IO.DirectoryInfo> 既存のディレクトリのオブジェクト。  
  
 末尾から末尾のスペースが削除された、 `path` ディレクトリを作成する前にパラメーター。  
  
 書き込みアクセスが共有上のリモート コンピューターでディレクトリを作成することができます。 UNC パスがサポートされています。次の指定など `path`: `\\2009\Archives\December` Visual basic と `\\\\2009\\Archives\\December` C\# の場合。  
  
 コロン \(:\) で、ディレクトリの作成はサポートされていませんし、 `NotSupportedException` がスローされます。  
  
   
  
## 例  
 次の例では、2 つのユーザー アカウントのアクセス ルールを新しいディレクトリを作成します。  
  
 [!code-csharp[System.IO.Directory\#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class7.cs#15)]
 [!code-vb[System.IO.Directory\#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class7.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <paramref name="path" /> によって指定されたディレクトリはファイルです。  
  
 \-または\-  
  
 ネットワーク名が不明です。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列か、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。  
  
 \-または\-  
  
 <paramref name="path" /> のプレフィックスまたは内容がコロン文字 \(:\) だけです。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> に、ドライブ ラベル \(「C:\\」\) の一部ではないコロン文字 \(:\) が含まれています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading and writing files and directories and for access to the destination directory. Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public static void Delete (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Delete(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.Delete(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">削除する空のディレクトリの名前。 このディレクトリは、書き込み可能で空である必要があります。</param>
        <summary>指定されたパスから空のディレクトリを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method behaves identically to <xref:System.IO.Directory.Delete%28System.String%2CSystem.Boolean%29> with **languageKeyword tag is not supported!!!!**  
 specified for the second parameter.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter may specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.  
  
 Trailing spaces are removed from the end of the **parameterReference tag is not supported!!!!**  
 parameter before deleting the directory.  
  
 This method throws an <xref:System.IO.IOException> if the directory specified in the **parameterReference tag is not supported!!!!**  
 parameter contains files or subdirectories.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter is not case\-sensitive.  
  
 In some cases, if you have the specified directory open in File Explorer, the <xref:System.IO.Directory.Delete%2A> method may not be able to delete it.  
  
   
  
## 例  
 The following example shows how to create a new directory and subdirectory, and then delete only the subdirectory.  
  
 [!code-csharp[System.IO.Directory.Delete\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.directory.delete/cs/class1.cs#1)]
 [!code-vb[System.IO.Directory.Delete\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.directory.delete/vb/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <paramref name="path" /> で指定された同じ名前と場所を持つファイルが存在します。  
  
 または  
  
 ディレクトリはアプリケーションの現在の作業ディレクトリです。  
  
 または  
  
 <paramref name="path" /> によって指定されたディレクトリは空ではありません。  
  
 または  
  
 ディレクトリが読み取り専用になっているか、または読み取り専用のファイルが含まれています。  
  
 または  
  
 ディレクトリは別のプロセスによって使用されています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列か、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="path" /> が存在しないか、見つかりませんでした。  
  
 または  
  
 指定されたパスが正しくありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for writing to the specified directory. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public static void Delete (string path, bool recursive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Delete(string path, bool recursive) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.Delete(System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="recursive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">削除するディレクトリの名前。</param>
        <param name="recursive">
          <c>path</c> のディレクトリ、サブディレクトリ、およびファイルを削除する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>指定したディレクトリと、特に指定されている場合はディレクトリ内の任意のサブディレクトリおよびファイルを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **parameterReference tag is not supported!!!!**  
 parameter may specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.  
  
 Trailing spaces are removed from the end of the **parameterReference tag is not supported!!!!**  
 parameter before deleting the directory.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter is not case\-sensitive.  
  
 If the **parameterReference tag is not supported!!!!**  
 parameter is **languageKeyword tag is not supported!!!!**  
, the user must have write permission for the current directory as well as for all subdirectories.  
  
 The behavior of this method differs slightly when deleting a directory that contains a reparse point, such as a symbolic link or a mount point. If the reparse point is a directory, such as a mount point, it is unmounted and the mount point is deleted. This method does not recurse through the reparse point. If the reparse point is a symbolic link to a file, the reparse point is deleted and not the target of the symbolic link.  
  
 In some cases, if you have the specified directory open in File Explorer, the <xref:System.IO.Directory.Delete%2A> method may not be able to delete it.  
  
   
  
## 例  
 The following example shows how to create a new directory, subdirectory, and file in the subdirectory, and then recursively delete all the new items.  
  
 [!code-csharp[System.IO.Directory.Delete\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.directory.delete/cs/class2.cs#2)]
 [!code-vb[System.IO.Directory.Delete\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.directory.delete/vb/class2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <paramref name="path" /> で指定された同じ名前と場所を持つファイルが存在します。  
  
 または  
  
 <paramref name="path" /> で指定されたディレクトリが読み取り専用です。または、<paramref name="recursive" /> が <see langword="false" /> であり、<paramref name="path" /> は空のディレクトリではありません。  
  
 または  
  
 ディレクトリはアプリケーションの現在の作業ディレクトリです。  
  
 または  
  
 ディレクトリに読み取り専用のファイルが含まれています。  
  
 または  
  
 ディレクトリは別のプロセスによって使用されています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列か、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="path" /> が存在しないか、見つかりませんでした。  
  
 または  
  
 指定されたパスが正しくありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for writing to the specified directory. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="EnumerateDirectories">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateDirectories (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateDirectories(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateDirectories(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">検索するディレクトリの相対パスまたは絶対パス。 この文字列の大文字と小文字は区別されません。</param>
        <summary>指定されたパスに存在するディレクトリ名の列挙可能なコレクションを返します。</summary>
        <returns>
          <paramref name="path" /> で指定したディレクトリ内にあるディレクトリの完全名 \(パスを含む\) から成る列挙可能なコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 You can specify relative or absolute path information in the **parameterReference tag is not supported!!!!**  
 parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method. The returned directory names are prefixed with the value you provided in the **parameterReference tag is not supported!!!!**  
 parameter. For example, if you provide a relative path in the **parameterReference tag is not supported!!!!**  
 parameter, the returned directory names will contain a relative path.  
  
 The <xref:System.IO.Directory.EnumerateDirectories%2A> and <xref:System.IO.Directory.GetDirectories%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateDirectories%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetDirectories%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateDirectories%2A> can be more efficient.  
  
 The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the collection will start a new enumeration.  
  
   
  
## 例  
 The following example enumerates the top\-level directories in a specified path.  
  
 [!code-csharp[System.IO.EnumDirs1\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.enumdirs1/cs/program.cs#1)]
 [!code-vb[System.IO.EnumDirs1\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.enumdirs1/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path " /> は長さゼロの文字列で、空白のみで構成されているか、または無効な文字を含んでいます。 無効な文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">たとえば、マップされていないドライブへの参照など、<paramref name="path" /> は無効です。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="path" /> はファイル名です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパス、ファイル名、または結合は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnumerateDirectories">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateDirectories (string path, string searchPattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateDirectories(string path, string searchPattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateDirectories(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="searchPattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">検索するディレクトリの相対パスまたは絶対パス。 この文字列の大文字と小文字は区別されません。</param>
        <param name="searchPattern">
          <c>path</c> 内のディレクトリの名前と照合する検索文字列。  このパラメーターには、有効なリテラル パスとワイルドカード \(\* および ?\)  文字 \(「解説」を参照\) の組み合わせを使用できますが、正規表現はサポートしていません。</param>
        <summary>指定されたパスから、検索パターンに一致するディレクトリ名の列挙可能なコレクションを返します。</summary>
        <returns>指定した検索パターンに一致し、<paramref name="path" /> で指定したディレクトリの中にあるディレクトリの完全名 \(パスを含む\) から成る列挙可能なコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  
  
|Wildcard specifier|Matches|  
|------------------------|-------------|  
|\* \(asterisk\)|Zero or more characters in that position.|  
|? \(question mark\)|Zero or one character in that position.|  
  
 Characters other than the wildcard are literal characters. For example, the **parameterReference tag is not supported!!!!**  
 string "\*t" searches for all names in **parameterReference tag is not supported!!!!**  
 ending with the letter "t". The **parameterReference tag is not supported!!!!**  
 string "s\*" searches for all names in **parameterReference tag is not supported!!!!**  
 beginning with the letter "s".  
  
 `searchPattern` cannot end in two periods \(".."\) or contain two periods \(".."\) followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  
  
 You can specify relative or absolute path information in the **parameterReference tag is not supported!!!!**  
 parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method. The returned directory names are prefixed with the value you provided in the **parameterReference tag is not supported!!!!**  
 parameter. For example, if you provide a relative path in the **parameterReference tag is not supported!!!!**  
 parameter, the returned directory names will contain a relative path.  
  
 The <xref:System.IO.Directory.EnumerateDirectories%2A> and <xref:System.IO.Directory.GetDirectories%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateDirectories%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetDirectories%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateDirectories%2A> can be more efficient.  
  
 The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the collection will start a new enumeration.  
  
   
  
## 例  
 The following example enumerates the top\-level directories in a specified path that match a specified search pattern.  
  
 [!code-csharp[System.IO.EnumDirs2\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.enumdirs2/cs/program.cs#1)]
 [!code-vb[System.IO.EnumDirs2\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.enumdirs2/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path " /> は長さゼロの文字列で、空白のみで構成されているか、または無効な文字を含んでいます。 無効な文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。  
  
 または  
  
 <paramref name="searchPattern" /> には有効なパターンが含まれません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="searchPattern" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">たとえば、マップされていないドライブへの参照など、<paramref name="path" /> は無効です。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="path" /> はファイル名です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパス、ファイル名、または結合は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnumerateDirectories">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateDirectories (string path, string searchPattern, System.IO.SearchOption searchOption);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateDirectories(string path, string searchPattern, valuetype System.IO.SearchOption searchOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="searchPattern" Type="System.String" />
        <Parameter Name="searchOption" Type="System.IO.SearchOption" />
      </Parameters>
      <Docs>
        <param name="path">検索するディレクトリの相対パスまたは絶対パス。 この文字列の大文字と小文字は区別されません。</param>
        <param name="searchPattern">
          <c>path</c> 内のディレクトリの名前と照合する検索文字列。  このパラメーターには、有効なリテラル パスとワイルドカード \(\* および ?\)  文字 \(「解説」を参照\) の組み合わせを使用できますが、正規表現はサポートしていません。</param>
        <param name="searchOption">検索操作に現在のディレクトリのみを含めるのか、またはすべてのサブディレクトリを含めるのかを指定する列挙値の 1 つ。  
  
 既定値は <see cref="F:System.IO.SearchOption.TopDirectoryOnly" /> です。</param>
        <summary>指定されたパスにあるディレクトリのうち、検索パターンに一致するディレクトリ名の列挙可能なコレクションを返します。オプションでサブディレクトリを検索対象にすることができます。</summary>
        <returns>指定した検索パターンおよびオプションに一致し、<paramref name="path" /> で指定したディレクトリの中にあるディレクトリの完全名 \(パスを含む\) から成る列挙可能なコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  
  
|Wildcard specifier|Matches|  
|------------------------|-------------|  
|\* \(asterisk\)|Zero or more characters in that position.|  
|? \(question mark\)|Exactly one character in that position.|  
  
 Characters other than the wildcard are literal characters. For example, the **parameterReference tag is not supported!!!!**  
 string "\*t" searches for all names in **parameterReference tag is not supported!!!!**  
 ending with the letter "t". The **parameterReference tag is not supported!!!!**  
 string "s\*" searches for all names in **parameterReference tag is not supported!!!!**  
 beginning with the letter "s".  
  
 `searchPattern` cannot end in two periods \(".."\) or contain two periods \(".."\) followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  
  
 You can specify relative or absolute path information in the **parameterReference tag is not supported!!!!**  
 parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method. The returned directory names are prefixed with the value you provided in the **parameterReference tag is not supported!!!!**  
 parameter. For example, if you provide a relative path in the **parameterReference tag is not supported!!!!**  
 parameter, the returned directory names will contain a relative path.  
  
 The <xref:System.IO.Directory.EnumerateDirectories%2A> and <xref:System.IO.Directory.GetDirectories%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateDirectories%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetDirectories%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateDirectories%2A> can be more efficient.  
  
 The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the collection will start a new enumeration.  
  
   
  
## 例  
 The following example enumerates directories in a specified path that match a specified search pattern. It uses the **parameterReference tag is not supported!!!!**  
 parameter to specify that all subdirectories should be included in the search.  
  
 [!code-csharp[System.IO.EnumDirs3\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.enumdirs3/cs/program.cs#1)]
 [!code-vb[System.IO.EnumDirs3\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.enumdirs3/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path " /> は長さゼロの文字列で、空白のみで構成されているか、または無効な文字を含んでいます。 無効な文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。  
  
 または  
  
 <paramref name="searchPattern" /> には有効なパターンが含まれません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="searchPattern" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="searchOption" /> は有効な <see cref="T:System.IO.SearchOption" /> 値ではありません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">たとえば、マップされていないドライブへの参照など、<paramref name="path" /> は無効です。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="path" /> はファイル名です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパス、ファイル名、または結合は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnumerateFiles">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateFiles (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateFiles(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateFiles(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">検索するディレクトリの相対パスまたは絶対パス。 この文字列の大文字と小文字は区別されません。</param>
        <summary>指定されたパスに存在するファイル名の列挙可能なコレクションを返します。</summary>
        <returns>
          <paramref name="path" /> で指定したディレクトリ内にあるファイルの完全名 \(パスを含む\) から成る列挙可能なコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 You can specify relative path information with the **parameterReference tag is not supported!!!!**  
 parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method.  
  
 The <xref:System.IO.Directory.EnumerateFiles%2A> and <xref:System.IO.Directory.GetFiles%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFiles%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetFiles%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.  
  
 The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the collection will start a new enumeration.  
  
   
  
## 例  
 The following example shows how to retrieve all the files in a directory and move them to a new directory. After the files are moved, they no longer exist in the original directory.  
  
 [!code-csharp[System.IO.Directory\#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class4.cs#12)]
 [!code-vb[System.IO.Directory\#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class4.vb#12)]  
  
 The following example enumerates the files in the specified directory, reads each line of the file, and displays the line if it contains the string "Europe".  
  
 [!code-csharp[System.IO.Directory.EnumFiles\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.directory.enumfiles/cs/program.cs#1)]
 [!code-vb[System.IO.Directory.EnumFiles\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.directory.enumfiles/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path " /> は長さゼロの文字列で、空白のみで構成されているか、または無効な文字を含んでいます。 無効な文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">たとえば、マップされていないドライブへの参照など、<paramref name="path" /> は無効です。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="path" /> はファイル名です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパス、ファイル名、または結合は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnumerateFiles">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateFiles (string path, string searchPattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateFiles(string path, string searchPattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateFiles(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="searchPattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">検索するディレクトリの相対パスまたは絶対パス。 この文字列の大文字と小文字は区別されません。</param>
        <param name="searchPattern">
          <c>path</c> 内のファイル名と対応させる検索文字列。  このパラメーターには、有効なリテラル パスとワイルドカード \(\* および ?\) の組み合わせを使用できます。 文字 \(「解説」を参照\) の組み合わせを使用できますが、正規表現はサポートしていません。</param>
        <summary>指定されたパスから、検索パターンに一致するファイル名の列挙可能なコレクションを返します。</summary>
        <returns>指定した検索パターンに一致し、<paramref name="path" /> で指定したディレクトリの中にあるファイルの完全名 \(パスを含む\) から成る列挙可能なコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  
  
|Wildcard specifier|Matches|  
|------------------------|-------------|  
|\* \(asterisk\)|Zero or more characters in that position.|  
|? \(question mark\)|Zero or one character in that position.|  
  
 Characters other than the wildcard are literal characters. For example, the **parameterReference tag is not supported!!!!**  
 string "\*t" searches for all names in **parameterReference tag is not supported!!!!**  
 ending with the letter "t". The **parameterReference tag is not supported!!!!**  
 string "s\*" searches for all names in **parameterReference tag is not supported!!!!**  
 beginning with the letter "s".  
  
> [!NOTE]
>  When you use the asterisk wildcard character in a **parameterReference tag is not supported!!!!**  
>  such as "\*.txt", the number of characters in the specified extension affects the search as follows:  
>   
>  -   If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, "\*.xls" returns both "book.xls" and "book.xlsx".  
> -   In all other cases, the method returns files that exactly match the specified extension. For example, "\*.ai" returns "file.ai" but not "file.aif".  
>   
>  When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, "file1.txt" and "file1.txtother", in a directory, a search pattern of "file?.txt" returns just the first file, whereas a search pattern of "file\*.txt" returns both files.  
  
 `searchPattern` cannot end in two periods \(".."\) or contain two periods \(".."\) followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  
  
 You can specify relative path information with the **parameterReference tag is not supported!!!!**  
 parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method.  
  
 The <xref:System.IO.Directory.EnumerateFiles%2A> and <xref:System.IO.Directory.GetFiles%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFiles%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetFiles%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.  
  
 The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the collection will start a new enumeration.  
  
   
  
## 例  
 The following example shows how to retrieve all the text files in a directory and move them to a new directory. After the files are moved, they no longer exist in the original directory.  
  
 [!code-csharp[System.IO.Directory\#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class2.cs#10)]
 [!code-vb[System.IO.Directory\#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class2.vb#10)]  
  
 The following example enumerates the files in the specified directory that have a .txt extension, reads each line of the file, and displays the line if it contains the string "Europe".  
  
 [!code-csharp[System.IO.Directory.EnumFiles2\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.directory.enumfiles2/cs/program.cs#1)]
 [!code-vb[System.IO.Directory.EnumFiles2\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.directory.enumfiles2/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path " /> は長さゼロの文字列で、空白のみで構成されているか、または無効な文字を含んでいます。 無効な文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。  
  
 または  
  
 <paramref name="searchPattern" /> には有効なパターンが含まれません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="searchPattern" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">たとえば、マップされていないドライブへの参照など、<paramref name="path" /> は無効です。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="path" /> はファイル名です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパス、ファイル名、または結合は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnumerateFiles">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateFiles (string path, string searchPattern, System.IO.SearchOption searchOption);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateFiles(string path, string searchPattern, valuetype System.IO.SearchOption searchOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="searchPattern" Type="System.String" />
        <Parameter Name="searchOption" Type="System.IO.SearchOption" />
      </Parameters>
      <Docs>
        <param name="path">検索するディレクトリの相対パスまたは絶対パス。 この文字列の大文字と小文字は区別されません。</param>
        <param name="searchPattern">
          <c>path</c> 内のファイル名と対応させる検索文字列。  このパラメーターには、有効なリテラル パスとワイルドカード \(\* および ?\) の組み合わせを使用できます。 文字 \(「解説」を参照\) の組み合わせを使用できますが、正規表現はサポートしていません。</param>
        <param name="searchOption">検索操作に現在のディレクトリのみを含めるのか、またはすべてのサブディレクトリを含めるのかを指定する列挙値の 1 つ。  
  
 既定値は <see cref="F:System.IO.SearchOption.TopDirectoryOnly" /> です。</param>
        <summary>指定されたパスにあるファイルのうち、検索パターンに一致するファイル名の列挙可能なコレクションを返します。オプションでサブディレクトリを検索対象にすることができます。</summary>
        <returns>指定した検索パターンおよびオプションに一致し、<paramref name="path" /> で指定したディレクトリの中にあるファイルの完全名 \(パスを含む\) から成る列挙可能なコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  
  
|Wildcard specifier|Matches|  
|------------------------|-------------|  
|\* \(asterisk\)|Zero or more characters in that position.|  
|? \(question mark\)|Zero or one character in that position.|  
  
 Characters other than the wildcard are literal characters. For example, the **parameterReference tag is not supported!!!!**  
 string "\*t" searches for all names in **parameterReference tag is not supported!!!!**  
 ending with the letter "t". The **parameterReference tag is not supported!!!!**  
 string "s\*" searches for all names in **parameterReference tag is not supported!!!!**  
 beginning with the letter "s".  
  
> [!NOTE]
>  When you use the asterisk wildcard character in a **parameterReference tag is not supported!!!!**  
>  such as "\*.txt", the number of characters in the specified extension affects the search as follows:  
>   
>  -   If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, "\*.xls" returns both "book.xls" and "book.xlsx".  
> -   In all other cases, the method returns files that exactly match the specified extension. For example, "\*.ai" returns "file.ai" but not "file.aif".  
>   
>  When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, "file1.txt" and "file1.txtother", in a directory, a search pattern of "file?.txt" returns just the first file, whereas a search pattern of "file\*.txt" returns both files.  
  
 `searchPattern` cannot end in two periods \(".."\) or contain two periods \(".."\) followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  
  
 You can specify relative path information with the **parameterReference tag is not supported!!!!**  
 parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method.  
  
 The <xref:System.IO.Directory.EnumerateFiles%2A> and <xref:System.IO.Directory.GetFiles%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFiles%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetFiles%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.  
  
 The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the collection will start a new enumeration.  
  
   
  
## 例  
 The following example shows how to retrieve all the text files in a directory and its subdirectories, and move them to a new directory. After the files are moved, they no longer exist in the original directories.  
  
 [!code-csharp[System.IO.Directory\#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class5.cs#13)]
 [!code-vb[System.IO.Directory\#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class5.vb#13)]  
  
 The following example recursively enumerates all files that have a .txt extension, reads each line of the file, and displays the line if it contains the string "Microsoft".  
  
 [!code-csharp[System.IO.Directory.EnumerateFiles\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.directory.enumeratefiles/cs/program.cs#1)]
 [!code-vb[System.IO.Directory.EnumerateFiles\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.directory.enumeratefiles/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path " /> は長さゼロの文字列で、空白のみで構成されているか、または無効な文字を含んでいます。 無効な文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。  
  
 または  
  
 <paramref name="searchPattern" /> には有効なパターンが含まれません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="searchPattern" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="searchOption" /> は有効な <see cref="T:System.IO.SearchOption" /> 値ではありません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">たとえば、マップされていないドライブへの参照など、<paramref name="path" /> は無効です。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="path" /> はファイル名です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパス、ファイル名、または結合は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnumerateFileSystemEntries">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateFileSystemEntries (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateFileSystemEntries(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateFileSystemEntries(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">検索するディレクトリの相対パスまたは絶対パス。 この文字列の大文字と小文字は区別されません。</param>
        <summary>指定されたパスに存在するファイル名とディレクトリ名の列挙可能なコレクションを返します。</summary>
        <returns>
          <paramref name="path" /> で指定されたディレクトリ内のファイル システム エントリの列挙可能なコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 You can specify relative path information with the **parameterReference tag is not supported!!!!**  
 parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method.  
  
 The <xref:System.IO.Directory.EnumerateFileSystemEntries%2A> and <xref:System.IO.Directory.GetFileSystemEntries%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>, you can start enumerating the collection of entries before the whole collection is returned; when you use <xref:System.IO.Directory.GetFileSystemEntries%2A>, you must wait for the whole array of entries to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.  
  
 The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the collection will start a new enumeration.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path " /> は長さゼロの文字列で、空白のみで構成されているか、または無効な文字を含んでいます。 無効な文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">たとえば、マップされていないドライブへの参照など、<paramref name="path" /> は無効です。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="path" /> はファイル名です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパス、ファイル名、または結合は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnumerateFileSystemEntries">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateFileSystemEntries (string path, string searchPattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateFileSystemEntries(string path, string searchPattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="searchPattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">検索するディレクトリの相対パスまたは絶対パス。 この文字列の大文字と小文字は区別されません。</param>
        <param name="searchPattern">
          <c>path</c> 内のファイル システム エントリの名前と照合する検索文字列。  このパラメーターには、有効なリテラル パスとワイルドカード \(\* および ?\)  文字 \(「解説」を参照\) の組み合わせを使用できますが、正規表現はサポートしていません。</param>
        <summary>指定されたパスから、検索パターンに一致するファイル名とディレクトリ名の列挙可能なコレクションを返します。</summary>
        <returns>
          <paramref name="path" /> で指定されたディレクトリに存在するファイル システム エントリのうち、指定した検索パターンに一致するファイル システム エントリの列挙可能なコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`..  
  
|Wildcard specifier|Matches|  
|------------------------|-------------|  
|\* \(asterisk\)|Zero or more characters in that position.|  
|? \(question mark\)|Zero or one character in that position.|  
  
 Characters other than the wildcard are literal characters. For example, the **parameterReference tag is not supported!!!!**  
 string "\*t" searches for all names in **parameterReference tag is not supported!!!!**  
 ending with the letter "t". The **parameterReference tag is not supported!!!!**  
 string "s\*" searches for all names in **parameterReference tag is not supported!!!!**  
 beginning with the letter "s".  
  
> [!NOTE]
>  When you use the asterisk wildcard character in a **parameterReference tag is not supported!!!!**  
>  such as "\*.txt", the number of characters in the specified extension affects the search as follows:  
>   
>  -   If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, "\*.xls" returns both "book.xls" and "book.xlsx".  
> -   In all other cases, the method returns files that exactly match the specified extension. For example, "\*.ai" returns "file.ai" but not "file.aif".  
>   
>  When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, "file1.txt" and "file1.txtother", in a directory, a search pattern of "file?.txt" returns just the first file, whereas a search pattern of "file\*.txt" returns both files.  
  
 `searchPattern` cannot end in two periods \(".."\) or contain two periods \(".."\) followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  
  
 You can specify relative path information with the **parameterReference tag is not supported!!!!**  
 parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method.  
  
 The <xref:System.IO.Directory.EnumerateFileSystemEntries%2A> and <xref:System.IO.Directory.GetFileSystemEntries%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>, you can start enumerating the collection of entries before the whole collection is returned; when you use <xref:System.IO.Directory.GetFileSystemEntries%2A>, you must wait for the whole array of entries to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.  
  
 The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the collection will start a new enumeration.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path " /> は長さゼロの文字列で、空白のみで構成されているか、または無効な文字が使用されています。 無効な文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。  
  
 または  
  
 <paramref name="searchPattern" /> には有効なパターンが含まれません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="searchPattern" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">たとえば、マップされていないドライブへの参照など、<paramref name="path" /> は無効です。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="path" /> はファイル名です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパス、ファイル名、または結合は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnumerateFileSystemEntries">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateFileSystemEntries (string path, string searchPattern, System.IO.SearchOption searchOption);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateFileSystemEntries(string path, string searchPattern, valuetype System.IO.SearchOption searchOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="searchPattern" Type="System.String" />
        <Parameter Name="searchOption" Type="System.IO.SearchOption" />
      </Parameters>
      <Docs>
        <param name="path">検索するディレクトリの相対パスまたは絶対パス。 この文字列の大文字と小文字は区別されません。</param>
        <param name="searchPattern">
          <c>path</c> 内のファイル システム エントリと対応させる検索文字列。  このパラメーターには、有効なリテラル パスとワイルドカード \(\* および ?\) の組み合わせを使用できます。 文字 \(「解説」を参照\) の組み合わせを使用できますが、正規表現はサポートしていません。</param>
        <param name="searchOption">検索操作に現在のディレクトリのみを含めるのか、またはすべてのサブディレクトリを含めるのかを指定する列挙値の 1 つ。  
  
 既定値は <see cref="F:System.IO.SearchOption.TopDirectoryOnly" /> です。</param>
        <summary>指定されたパスにあるディレクトリのうち、検索パターンに一致するファイル名およびディレクトリ名の列挙可能なコレクションを返します。オプションでサブディレクトリを検索対象にすることができます。</summary>
        <returns>
          <paramref name="path" /> で指定されたディレクトリに存在するファイル システム エントリのうち、指定した検索パターンおよびオプションに一致するファイル システム エントリの列挙可能なコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  
  
|Wildcard specifier|Matches|  
|------------------------|-------------|  
|\* \(asterisk\)|Zero or more characters in that position.|  
|? \(question mark\)|Zero or one character in that position.|  
  
 Characters other than the wildcard are literal characters. For example, the **parameterReference tag is not supported!!!!**  
 string "\*t" searches for all names in **parameterReference tag is not supported!!!!**  
 ending with the letter "t". The **parameterReference tag is not supported!!!!**  
 string "s\*" searches for all names in **parameterReference tag is not supported!!!!**  
 beginning with the letter "s".  
  
> [!NOTE]
>  When you use the asterisk wildcard character in a **parameterReference tag is not supported!!!!**  
>  such as "\*.txt", the number of characters in the specified extension affects the search as follows:  
>   
>  -   If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, "\*.xls" returns both "book.xls" and "book.xlsx".  
> -   In all other cases, the method returns files that exactly match the specified extension. For example, "\*.ai" returns "file.ai" but not "file.aif".  
>   
>  When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, "file1.txt" and "file1.txtother", in a directory, a search pattern of "file?.txt" returns just the first file, whereas a search pattern of "file\*.txt" returns both files.  
  
 `searchPattern` cannot end in two periods \(".."\) or contain two periods \(".."\) followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  
  
 You can specify relative path information with the **parameterReference tag is not supported!!!!**  
 parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method.  
  
 The <xref:System.IO.Directory.EnumerateFileSystemEntries%2A> and <xref:System.IO.Directory.GetFileSystemEntries%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>, you can start enumerating the collection of entries before the whole collection is returned; when you use <xref:System.IO.Directory.GetFileSystemEntries%2A>, you must wait for the whole array of entries to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.  
  
 The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the collection will start a new enumeration.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path " /> は長さゼロの文字列で、空白のみで構成されているか、または無効な文字を含んでいます。 無効な文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。  
  
 または  
  
 <paramref name="searchPattern" /> には有効なパターンが含まれません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="searchPattern" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="searchOption" /> は有効な <see cref="T:System.IO.SearchOption" /> 値ではありません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">たとえば、マップされていないドライブへの参照など、<paramref name="path" /> は無効です。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="path" /> はファイル名です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパス、ファイル名、または結合は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public static bool Exists (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Exists(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.Exists(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">テストするパス。</param>
        <summary>指定したパスがディスク上の既存のディレクトリを参照しているかどうかを確認します。</summary>
        <returns>
          <paramref name="path" /> が既存のディレクトリを参照している場合は <see langword="true" />。ディレクトリが存在していない場合や、指定したディレクトリが存在するかどうかを判断しようとしたときにエラーが発生した場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **parameterReference tag is not supported!!!!**  
 parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory.  
  
 Trailing spaces are removed from the end of the **parameterReference tag is not supported!!!!**  
 parameter before checking whether the directory exists.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter is not case\-sensitive.  
  
 If you do not have at a minimum read\-only permission to the directory, the <xref:System.IO.Directory.Exists%2A> method will return **languageKeyword tag is not supported!!!!**  
.  
  
 The <xref:System.IO.Directory.Exists%2A> method returns **languageKeyword tag is not supported!!!!**  
 if any error occurs while trying to determine if the specified file exists. This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file.  
  
   
  
## 例  
 The following example takes an array of file or directory names on the command line, determines what kind of name it is, and processes it appropriately.  
  
 [!code-cpp[Recursive file finder\#2](~/samples/snippets/cpp/VS_Snippets_CLR/Recursive file finder/CPP/directorylisting.cpp#2)]
 [!code-csharp[Recursive file finder\#2](~/samples/snippets/csharp/VS_Snippets_CLR/Recursive file finder/CS/directorylisting.cs#2)]
 [!code-vb[Recursive file finder\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Recursive file finder/VB/directorylisting.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading files. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.DirectoryInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetAccessControl">
      <MemberSignature Language="C#" Value="public static System.Security.AccessControl.DirectorySecurity GetAccessControl (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.AccessControl.DirectorySecurity GetAccessControl(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetAccessControl(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.DirectorySecurity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">ファイルのアクセス制御リスト \(ACL\) 情報を示す <see cref="T:System.Security.AccessControl.DirectorySecurity" /> オブジェクトを格納しているディレクトリへのパス。</param>
        <summary>指定したディレクトリのアクセス制御リスト \(ACL\) のエントリをカプセル化する <see cref="T:System.Security.AccessControl.DirectorySecurity" /> オブジェクトを取得します。</summary>
        <returns>
          <paramref name="path" /> パラメーターによって記述されるファイルのアクセス制御規則をカプセル化するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.IO.Directory.GetAccessControl%2A> ディレクトリのアクセス制御リスト \(ACL\) エントリを取得します。  
  
 ACL は、個人やグループがある、または権限がない、特定のアクションに指定したファイルまたはディレクトリにユーザーを示します。 詳細については、「[How to: Add or Remove an Access Control List Entry](http://msdn.microsoft.com/ja-jp/53758b39-bd9b-4640-bb04-cad5ed8d0abf)」を参照してください。  
  
 NTFS の環境で <xref:System.Security.AccessControl.FileSystemRights.ReadAttributes> と <xref:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes> 場合は、ユーザーがあるユーザーに付与されます <xref:System.Security.AccessControl.FileSystemRights.ListDirectory> 親フォルダーの権限です。 拒否する <xref:System.Security.AccessControl.FileSystemRights.ReadAttributes> と <xref:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes>, 、拒否 <xref:System.Security.AccessControl.FileSystemRights.ListDirectory> 親ディレクトリにします。  
  
   
  
## 例  
 次の例では、 <xref:System.IO.Directory.GetAccessControl%2A> と <xref:System.IO.Directory.SetAccessControl%2A> 、アクセスを追加するメソッドが制御リスト \(ACL\) エントリと、ディレクトリから ACL エントリを削除します。  この例を実行するには、有効なユーザーまたはグループ アカウントを指定する必要があります。  
  
 [!code-cpp[IO.DiretoryInfo.GetAccessControl\-SetAccessControl\#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/cpp/sample.cpp#1)]
 [!code-csharp[IO.DiretoryInfo.GetAccessControl\-SetAccessControl\#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/CS/sample.cs#1)]
 [!code-vb[IO.DiretoryInfo.GetAccessControl\-SetAccessControl\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.IOException">ディレクトリを開くときに、I\/O エラーが発生しました。</exception>
        <exception cref="T:System.PlatformNotSupportedException">現在のオペレーティング システムは Windows 2000 以降ではありません。</exception>
        <exception cref="T:System.SystemException">ディレクトリが見つからなかったなどのシステム レベルのエラーが発生しました。 特定の例外が <see cref="T:System.SystemException" /> のサブクラスである可能性があります。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" /> パラメーターに読み取り専用のディレクトリが指定されています。  
  
 または  
  
 この操作は、現在のプラットフォームではサポートされていません。  
  
 または  
  
 呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for permission to enumerate access control list \(ACL\) for a directory. Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.NoAccess" /> , <see cref="F:System.Security.AccessControl.AccessControlActions.View" />  
  
 Security action: Demand.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetAccessControl">
      <MemberSignature Language="C#" Value="public static System.Security.AccessControl.DirectorySecurity GetAccessControl (string path, System.Security.AccessControl.AccessControlSections includeSections);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.AccessControl.DirectorySecurity GetAccessControl(string path, valuetype System.Security.AccessControl.AccessControlSections includeSections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.DirectorySecurity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="includeSections" Type="System.Security.AccessControl.AccessControlSections" />
      </Parameters>
      <Docs>
        <param name="path">ファイルのアクセス制御リスト \(ACL\) 情報を示す <see cref="T:System.Security.AccessControl.DirectorySecurity" /> オブジェクトを格納しているディレクトリへのパス。</param>
        <param name="includeSections">取得するアクセス制御リスト \(ACL\) の情報の型を指定する <see cref="T:System.Security.AccessControl.AccessControlSections" /> 値のいずれか。</param>
        <summary>指定したディレクトリの、指定した種類のアクセス制御リスト \(ACL\) エントリをカプセル化する <see cref="T:System.Security.AccessControl.DirectorySecurity" /> オブジェクトを取得します。</summary>
        <returns>
          <paramref name="path" /> パラメーターによって記述されるファイルのアクセス制御規則をカプセル化するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.IO.Directory.GetAccessControl%2A> ディレクトリのアクセス制御リスト \(ACL\) エントリを取得します。  
  
 ACL は、個人やグループがある、または権限がない、特定のアクションに指定したファイルまたはディレクトリにユーザーを示します。 詳細については、「[How to: Add or Remove an Access Control List Entry](http://msdn.microsoft.com/ja-jp/53758b39-bd9b-4640-bb04-cad5ed8d0abf)」を参照してください。  
  
 NTFS の環境で <xref:System.Security.AccessControl.FileSystemRights.ReadAttributes> と <xref:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes> 場合は、ユーザーがあるユーザーに付与されます <xref:System.Security.AccessControl.FileSystemRights.ListDirectory> 親フォルダーの権限です。 拒否する <xref:System.Security.AccessControl.FileSystemRights.ReadAttributes> と <xref:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes>, 、拒否 <xref:System.Security.AccessControl.FileSystemRights.ListDirectory> 親ディレクトリにします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.IOException">ディレクトリを開くときに、I\/O エラーが発生しました。</exception>
        <exception cref="T:System.PlatformNotSupportedException">現在のオペレーティング システムは Windows 2000 以降ではありません。</exception>
        <exception cref="T:System.SystemException">ディレクトリが見つからなかったなどのシステム レベルのエラーが発生しました。 特定の例外が <see cref="T:System.SystemException" /> のサブクラスである可能性があります。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" /> パラメーターに読み取り専用のディレクトリが指定されています。  
  
 または  
  
 この操作は、現在のプラットフォームではサポートされていません。  
  
 または  
  
 呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for permission to enumerate access control list \(ACL\) for a directory. Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.NoAccess" /> , <see cref="F:System.Security.AccessControl.AccessControlActions.View" />  
  
 Security action: Demand.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetCreationTime">
      <MemberSignature Language="C#" Value="public static DateTime GetCreationTime (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime GetCreationTime(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetCreationTime(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">ディレクトリのパス。</param>
        <summary>ディレクトリの作成日時を取得します。</summary>
        <returns>指定したディレクトリの作成日時に設定された構造体。 この値は現地時刻で表示されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  このメソッドは、オペレーティング システムでの値を持つは継続的に更新できませんネイティブ関数を使用しているためにが不正確な値を返すことがあります。  
  
 このメソッドは <xref:System.IO.File.GetCreationTime%2A?displayProperty=fullName>です。  
  
 ディレクトリが記述されている場合、 `path` パラメーターが存在しないか、このメソッドは、西暦 1601 年 1 月 1 日深夜 12時 00分を返します。\(西暦\)世界協定時刻 \(UTC\) では、ローカル時刻に調整します。  
  
 `path` 相対パスまたは絶対パス情報を指定するパラメーターを許可します。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 `path` パラメーターは、大文字小文字を区別することはありません。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例では、指定したディレクトリの作成日時を取得します。  
  
 [!code-cpp[Dir\_GetCreation\#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dir_GetCreation/CPP/dir_getcreation.cpp#1)]
 [!code-csharp[Dir\_GetCreation\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_GetCreation/CS/dir_getcreation.cs#1)]
 [!code-vb[Dir\_GetCreation\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_GetCreation/VB/dir_getcreation.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列か、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading the specified file or directory. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="GetCreationTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime GetCreationTimeUtc (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime GetCreationTimeUtc(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetCreationTimeUtc(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">ディレクトリのパス。</param>
        <summary>世界協定時刻 \(UTC: Coordinated Universal Time\) 形式でのディレクトリの作成日時を取得します。</summary>
        <returns>指定したディレクトリの作成日時に設定された構造体。 この値は UTC 時刻で表現されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  このメソッドは、オペレーティング システムでの値を持つは継続的に更新できませんネイティブ関数を使用しているためにが不正確な値を返すことがあります。  
  
 ディレクトリが記述されている場合、 `path` パラメーターが存在しないか、このメソッドは、西暦 1601 年 1 月 1 日深夜 12時 00分を返します。\(西暦\)世界協定時刻 \(UTC\)。  
  
 このメソッドを使用すると、世界協定時刻 \(UTC\) に基づいてディレクトリの作成時刻を取得します。  
  
   
  
## 例  
 次の例は、世界協定時刻 \(UTC\) を使用した場合の出力の違いを示しています。  
  
 [!code-cpp[System.IO.UTCExample\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.UTCExample/CPP/example.cpp#1)]
 [!code-csharp[System.IO.UTCExample\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.UTCExample/CS/example.cs#1)]
 [!code-vb[System.IO.UTCExample\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.UTCExample/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列か、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading the specified file or directory. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentDirectory">
      <MemberSignature Language="C#" Value="public static string GetCurrentDirectory ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetCurrentDirectory() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetCurrentDirectory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>アプリケーションの現在の作業ディレクトリを取得します。</summary>
        <returns>現在の作業ディレクトリのパスを示す文字列。この文字列の末尾には、円記号 \(\\\) は付きません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 現在のディレクトリとは異なりますが、プロセスが開始された元のディレクトリです。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 `GetCurrentDirectory` メソッドの使用方法を次の例に示します。  
  
 [!code-cpp[Dir\_GetCurDir\#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dir_GetCurDir/CPP/dir_getcurdir.cpp#1)]
 [!code-csharp[Dir\_GetCurDir\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_GetCurDir/CS/dir_getcurdir.cs#1)]
 [!code-vb[Dir\_GetCurDir\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_GetCurDir/VB/dir_getcurdir.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.NotSupportedException">オペレーティング システムは、現在のディレクトリの機能が装備されていない Windows CE です。  
  
 このメソッドは、.NET Compact Framework で使用できますが、現在サポートされていません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for access to path information for the current directory. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetDirectories">
      <MemberSignature Language="C#" Value="public static string[] GetDirectories (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetDirectories(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetDirectories(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">検索するディレクトリの相対パスまたは絶対パス。 この文字列の大文字と小文字は区別されません。</param>
        <summary>指定されたディレクトリ内のサブディレクトリの名前 \(パスを含む\) を返します。</summary>
        <returns>指定したパス内のサブディレクトリのフル ネーム \(パスを含む\) の配列。または、ディレクトリが見つからない場合は空の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを同じ <xref:System.IO.Directory.GetDirectories%28System.String%2CSystem.String%29> 検索パターンとして指定されたアスタリスク \(\*\)、これが返されますすべてのサブディレクトリです。サブディレクトリを検索する必要がある場合、 <xref:System.IO.Directory.GetDirectories%28System.String%2CSystem.String%2CSystem.IO.SearchOption%29> メソッドを持つサブディレクトリの検索を指定することにより、 `searchOption` パラメーター。  
  
 <xref:System.IO.Directory.EnumerateDirectories%2A> と <xref:System.IO.Directory.GetDirectories%2A> メソッドは次のように異なります: を使用すると <xref:System.IO.Directory.EnumerateDirectories%2A>, 、コレクション全体が返される前に、名前のコレクションの列挙を開始することができます。 使用すると <xref:System.IO.Directory.GetDirectories%2A>, 、配列にアクセスする前に返される名前の配列全体を待つ必要があります。 そのため、ときに使用する多数のファイルとディレクトリ、 <xref:System.IO.Directory.EnumerateDirectories%2A> 効率的であることができます。  
  
 `path` パラメーターは、相対パスまたは絶対パス情報を指定できます。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 提供されるディレクトリの情報ではこのメソッドによって返された名前が付きます `path`します。  
  
 `path` パラメーターは、大文字小文字を区別することはありません。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例では、コマンドラインでファイルまたはディレクトリ名の配列を受け取り、名前の種類、され、適切な処理を決定します。  
  
 [!code-cpp[Recursive file finder\#1](~/samples/snippets/cpp/VS_Snippets_CLR/Recursive file finder/CPP/directorylisting.cpp#1)]
 [!code-csharp[Recursive file finder\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Recursive file finder/CS/directorylisting.cs#1)]
 [!code-vb[Recursive file finder\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Recursive file finder/VB/directorylisting.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列か、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="path" /> はファイル名です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for accessing path information for the current directory. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></permission>
        <altmember cref="M:System.IO.Directory.GetCurrentDirectory" />
      </Docs>
    </Member>
    <Member MemberName="GetDirectories">
      <MemberSignature Language="C#" Value="public static string[] GetDirectories (string path, string searchPattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetDirectories(string path, string searchPattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetDirectories(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="searchPattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">検索するディレクトリの相対パスまたは絶対パス。 この文字列の大文字と小文字は区別されません。</param>
        <param name="searchPattern">
          <c>path</c> 内のサブディレクトリの名前と照合する検索文字列。 このパラメーターに、有効なリテラルのパスとワイルドカード文字の組み合わせを含めることができます \(「解説」を参照\) が、正規表現はサポートされていません。</param>
        <summary>指定したディレクトリ内の指定した検索パターンに一致するサブディレクトリ名 \(パスを含む\) を返します。</summary>
        <returns>指定したディレクトリ内の検索パターンに一致するサブディレクトリの完全名 \(パスを含む\) の配列。または、ディレクトリが見つからない場合は空の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、指定した検索パターンに一致する、指定したディレクトリの下にあるすべてのサブディレクトリを返します。 指定したディレクトリには、サブディレクトリがないかに一致するサブディレクトリのかどうか、 `searchPattern` パラメーター、このメソッドは、空の配列を返します。 最上位のディレクトリのみが検索されます。 同様のサブディレクトリを検索する場合を使用して、 <xref:System.IO.Directory.GetDirectories%28System.String%2CSystem.String%2CSystem.IO.SearchOption%29> メソッドを指定し、 <xref:System.IO.SearchOption.AllDirectories> で、 `searchOption` パラメーター。  
  
 `searchPattern` リテラルのパスとワイルドカードの組み合わせは、文字が、正規表現をサポートしていないを指定できます。 次のワイルドカード文字は使用 `searchPattern`します。  
  
|ワイルドカードの指定子|一致する文字列|  
|-----------------|-------------|  
|\* \(アスタリスク\)|その位置に 0 個以上の文字。|  
|? \(疑問符 \(\)\)|その位置に 0 個または 1 文字。|  
  
 ワイルドカード以外の文字は、リテラル文字です。 たとえば、 `searchPattern` 文字列"\* t"ですべての名前を検索 `path` 文字"t"で終わる。`searchPattern` 文字列内のすべての名前を「s \*"検索 `path` "s"の文字で始まります。  
  
 `searchPattern` 2 つのピリオドで終わることはできません \(".."\) 2 つのピリオドが含まれているか \(".."\) 続いて <xref:System.IO.Path.DirectorySeparatorChar> または <xref:System.IO.Path.AltDirectorySeparatorChar>, 、無効な文字を含めることもできます。 正しくない文字を照会するには、<xref:System.IO.Path.GetInvalidPathChars%2A> メソッドを使用します。  
  
 `path` パラメーターの相対パスまたは絶対パス情報を指定でき、小文字は区別されません。  相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 <xref:System.IO.Directory.EnumerateDirectories%2A> と <xref:System.IO.Directory.GetDirectories%2A> メソッドは次のように異なります: を使用すると <xref:System.IO.Directory.EnumerateDirectories%2A>, 、コレクション全体が返される前に、名前のコレクションの列挙を開始することができます。 使用すると <xref:System.IO.Directory.GetDirectories%2A>, 、配列にアクセスする前に返される名前の配列全体を待つ必要があります。 そのため、ときに使用する多数のファイルとディレクトリ、 <xref:System.IO.Directory.EnumerateDirectories%2A> 効率的であることができます。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例では、指定した文字で始まるパス内のディレクトリの数をカウントします。  
  
 [!code-cpp[Dir\_GetDirs2\#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dir_GetDirs2/CPP/dir_getdirs2.cpp#1)]
 [!code-csharp[Dir\_GetDirs2\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_GetDirs2/CS/dir_getdirs2.cs#1)]
 [!code-vb[Dir\_GetDirs2\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_GetDirs2/VB/dir_getdirs2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さゼロの文字列か、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。<see cref="M:System.IO.Path.GetInvalidPathChars" /> を使用して、正しくない文字を検出するクエリを実行できます。  
  
 \-または\-  
  
 <paramref name="searchPattern" /> には有効なパターンが含まれていません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> または <paramref name="searchPattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="path" /> はファイル名です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for access to path information for the current directory. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</permission>
        <altmember cref="M:System.IO.Directory.GetCurrentDirectory" />
      </Docs>
    </Member>
    <Member MemberName="GetDirectories">
      <MemberSignature Language="C#" Value="public static string[] GetDirectories (string path, string searchPattern, System.IO.SearchOption searchOption);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetDirectories(string path, string searchPattern, valuetype System.IO.SearchOption searchOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetDirectories(System.String,System.String,System.IO.SearchOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="searchPattern" Type="System.String" />
        <Parameter Name="searchOption" Type="System.IO.SearchOption" />
      </Parameters>
      <Docs>
        <param name="path">検索するディレクトリの相対パスまたは絶対パス。 この文字列の大文字と小文字は区別されません。</param>
        <param name="searchPattern">
          <c>path</c> 内のサブディレクトリの名前と照合する検索文字列。 このパラメーターに、有効なリテラルのパスとワイルドカード文字の組み合わせを含めることができます \(「解説」を参照\) が、正規表現はサポートされていません。</param>
        <param name="searchOption">検索操作にすべてのサブディレクトリを含めるのか、または現在のディレクトリのみを含めるのかを指定する列挙値の 1 つ。</param>
        <summary>現在のディレクトリ内で、指定された検索パターンに一致するサブディレクトリの名前 \(パスを含む\) を返します。オプションで、サブディレクトリを検索対象にすることができます。</summary>
        <returns>指定した条件に一致するサブディレクトリの完全名 \(パスを含む\) の配列。または、ディレクトリが見つからない場合は空の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `path` パラメーターの相対パスまたは絶対パス情報を指定でき、小文字は区別されません。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 `searchPattern` リテラルのパスとワイルドカードの組み合わせは、文字が、正規表現をサポートしていないを指定できます。 次のワイルドカード文字は使用 `searchPattern`します。  
  
|ワイルドカードの指定子|一致する文字列|  
|-----------------|-------------|  
|\* \(アスタリスク\)|その位置に 0 個以上の文字。|  
|? \(疑問符 \(\)\)|その位置に 0 個または 1 文字。|  
  
 ワイルドカード以外の文字は、リテラル文字です。 たとえば、 `searchPattern` 文字列"\* t"ですべての名前を検索 `path` 文字"t"で終わる。`searchPattern` 文字列内のすべての名前を「s \*"検索 `path` "s"の文字で始まります。  
  
 `searchPattern` 2 つのピリオドで終わることはできません \(".."\) 2 つのピリオドが含まれているか \(".."\) 続いて <xref:System.IO.Path.DirectorySeparatorChar> または <xref:System.IO.Path.AltDirectorySeparatorChar>, 、無効な文字を含めることもできます。 正しくない文字を照会するには、<xref:System.IO.Path.GetInvalidPathChars%2A> メソッドを使用します。  
  
 <xref:System.IO.Directory.EnumerateDirectories%2A> と <xref:System.IO.Directory.GetDirectories%2A> メソッドは次のように異なります: を使用すると <xref:System.IO.Directory.EnumerateDirectories%2A>, 、コレクション全体が返される前に、名前のコレクションの列挙を開始することができます。 使用すると <xref:System.IO.Directory.GetDirectories%2A>, 、配列にアクセスする前に返される名前の配列全体を待つ必要があります。 そのため、ときに使用する多数のファイルとディレクトリ、 <xref:System.IO.Directory.EnumerateDirectories%2A> 効率的であることができます。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例では、ディレクトリのパスで指定された文字で始まる数をカウントします。 最上位レベルのディレクトリのみが検索されます。  
  
 [!code-csharp[Dir\_GetDirs2\#2](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_GetDirs2/CS/dir_getdirs3.cs#2)]
 [!code-vb[Dir\_GetDirs2\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_GetDirs2/VB/dir_getdirs3.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> が長さ 0 の文字列か、空白のみで構成されているか、または正しくない文字を含んでいます。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。  
  
 または  
  
 <paramref name="searchPattern" /> には有効なパターンが含まれません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> または <paramref name="searchPattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="searchOption" /> は有効な <see cref="T:System.IO.SearchOption" /> 値ではありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大文字数を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="path" /> はファイル名です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for access to path information for the current directory. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</permission>
        <altmember cref="M:System.IO.Directory.GetCurrentDirectory" />
      </Docs>
    </Member>
    <Member MemberName="GetDirectoryRoot">
      <MemberSignature Language="C#" Value="public static string GetDirectoryRoot (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetDirectoryRoot(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetDirectoryRoot(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">ファイルまたはディレクトリのパス。</param>
        <summary>指定したパスのボリューム情報、ルート情報、またはその両方を返します。</summary>
        <returns>指定したパスのボリューム情報、ルート情報、またはその両方を含む文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの完全修飾パス名を取得する `path`, によって返される、 <xref:System.IO.Path.GetFullPath%2A>, 、ルート ディレクトリ情報を返すとします。 指定されたパスが存在する必要はありません。  
  
 `path` 相対パスまたは絶対パス情報を指定するパラメーターを許可します。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 `path` パラメーターは、大文字小文字を区別することはありません。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例では、現在のディレクトリを設定し、ディレクトリのルートを表示する方法を示します。  
  
 [!code-cpp[System.IO.DirectoryRoot\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.DirectoryRoot/CPP/example.cpp#1)]
 [!code-csharp[System.IO.DirectoryRoot\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.DirectoryRoot/CS/example.cs#1)]
 [!code-vb[System.IO.DirectoryRoot\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.DirectoryRoot/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列か、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。<see cref="M:System.IO.Path.GetInvalidPathChars" /> を使用して、正しくない文字に対するクエリを実行できます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for access to path information for the current directory. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public static string[] GetFiles (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetFiles(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetFiles(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">検索するディレクトリの相対パスまたは絶対パス。 この文字列の大文字と小文字は区別されません。</param>
        <summary>指定したディレクトリ内のファイルの名前 \(パスを含む\) を返します。</summary>
        <returns>指定したディレクトリ内のファイルの完全名 \(パスを含む\) の配列。または、ファイルが見つからない場合は空の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.Directory.EnumerateFiles%2A> と <xref:System.IO.Directory.GetFiles%2A> メソッドは次のように異なります: を使用すると <xref:System.IO.Directory.EnumerateFiles%2A>, 、コレクション全体が返される前に、名前のコレクションの列挙を開始することができます。 使用すると <xref:System.IO.Directory.GetFiles%2A>, 、配列にアクセスする前に返される名前の配列全体を待つ必要があります。 そのため、ときに使用する多数のファイルとディレクトリ、 <xref:System.IO.Directory.EnumerateFiles%2A> 効率的であることができます。  
  
 返されたファイル名に付加する、指定された `path` パラメーター。  
  
 このメソッドを同じ <xref:System.IO.Directory.GetFiles%28System.String%2CSystem.String%29> アスタリスク \(\*\)、検索パターンとして指定されているとします。  
  
 `path` パラメーターは、相対パスまたは絶対パス情報を指定できます。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 返されるファイル名の順序は保証されません。使用して、 <xref:System.Array.Sort%2A> メソッドの特定の並べ替え順序が必要な場合です。  
  
 `path` パラメーターは、大文字小文字を区別することはありません。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.IO.Directory.GetFiles%2A> ユーザー指定の場所からファイル名を返すメソッド。 この例は、すべてのエラーがこのメソッドに共通に構成されます。  
  
 [!code-cpp[Recursive file finder\#1](~/samples/snippets/cpp/VS_Snippets_CLR/Recursive file finder/CPP/directorylisting.cpp#1)]
 [!code-csharp[Recursive file finder\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Recursive file finder/CS/directorylisting.cs#1)]
 [!code-vb[Recursive file finder\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Recursive file finder/VB/directorylisting.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <paramref name="path" /> はファイル名です。  
  
 または  
  
 ネットワーク エラーが発生しました。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列か、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが見つからないか正しくありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for access to path information for the current directory. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public static string[] GetFiles (string path, string searchPattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetFiles(string path, string searchPattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetFiles(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="searchPattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">検索するディレクトリの相対パスまたは絶対パス。 この文字列の大文字と小文字は区別されません。</param>
        <param name="searchPattern">
          <c>path</c> 内のファイル名と対応させる検索文字列。  このパラメーターには、有効なリテラル パスとワイルドカード \(\* および ?\) の組み合わせを使用できます。 文字 \(「解説」を参照\) の組み合わせを使用できますが、正規表現はサポートしていません。</param>
        <summary>指定したディレクトリ内の指定した検索パターンに一致するファイル名 \(パスを含む\) を返します。</summary>
        <returns>指定したディレクトリ内の指定した検索パターンに一致するファイルの完全名 \(パスを含む\) の配列。または、ファイルが見つからない場合は空の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 返されるファイル名が追加されますを指定された `path` パラメーターと返されるファイル名の順序は保証されません。 を使用して、 <xref:System.Array.Sort%2A> メソッドの特定の並べ替え順序が必要な場合です。  
  
 `searchPattern` リテラルのパスとワイルドカードの組み合わせは、文字が、正規表現をサポートしていないを指定できます。 次のワイルドカード文字は使用 `searchPattern`します。  
  
|ワイルドカードの指定子|一致する文字列|  
|-----------------|-------------|  
|\* \(アスタリスク\)|その位置に 0 個以上の文字。|  
|? \(疑問符 \(\)\)|その位置に 0 個または 1 文字。|  
  
 ワイルドカード以外の文字は、リテラル文字です。 たとえば、 `searchPattern` 文字列"\* t"ですべての名前を検索 `path` 文字"t"で終わる。`searchPattern` 文字列内のすべての名前を「s \*"検索 `path` "s"の文字で始まります。  
  
 `searchPattern` 2 つのピリオドで終わることはできません \(".."\) 2 つのピリオドが含まれているか \(".."\) 続いて <xref:System.IO.Path.DirectorySeparatorChar> または <xref:System.IO.Path.AltDirectorySeparatorChar>, 、無効な文字を含めることもできます。 正しくない文字を照会するには、<xref:System.IO.Path.GetInvalidPathChars%2A> メソッドを使用します。  
  
> [!NOTE]
>  アスタリスクのワイルドカード文字を使用する場合、 `searchPattern` 「\*.txt」など、指定した拡張子の文字数影響を与えます検索次ようにします。  
>   
>  -   指定された拡張機能が 3 文字の場合は、指定した拡張子が始まる拡張子を持つファイルを返します。 たとえば、「\*.xls」には、"book.xls"と"book.xlsx"両方が返されます。  
> -   その他のすべてのケースでは、メソッドは、指定された拡張機能を正確に一致するファイルを返します。 たとえば、"\* .ai"が"file.ai"、"file.aif"を返します。  
>   
>  疑問符 \(\) のワイルドカード文字を使用すると、このメソッドは、指定されたファイル拡張子に一致するファイルのみを返します。 たとえば、ディレクトリの検索パターンに 2 つのファイル、"file1.txt"および"file1.txtother"指定された"ファイル? です。txt"は最初のファイルだけを返し、"file\*.txt"の検索パターンには、両方のファイルが返されます。  
  
> [!NOTE]
>  検索パターンに似ていますので、このメソッドは、8.3 形式のファイル名の形式と長いファイル名の形式の両方でのファイル名をチェックして、"\* \*1\*.txt"予期しないファイル名を返す可能性があります。 検索パターンの使用例を"\* \*1\*.txt"と同等の 8.3 形式のファイル名の形式が"LONGFI~1.TXT"であるため"longfilename.txt"が返されます。  
  
 <xref:System.IO.Directory.EnumerateFiles%2A> と <xref:System.IO.Directory.GetFiles%2A> メソッドは次のように異なります: を使用すると <xref:System.IO.Directory.EnumerateFiles%2A>, 、コレクション全体が返される前に、名前のコレクションの列挙を開始することができます。 使用すると <xref:System.IO.Directory.GetFiles%2A>, 、配列にアクセスする前に返される名前の配列全体を待つ必要があります。 そのため、ときに使用する多数のファイルとディレクトリ、 <xref:System.IO.Directory.EnumerateFiles%2A> 効率的であることができます。  
  
 `path` パラメーターは、相対パスまたは絶対パス情報を指定できます。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 `path` パラメーターは、大文字小文字を区別することはありません。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例では、指定した文字で始まるファイルの数をカウントします。  
  
 [!code-cpp[Dir\_GetFiles2\#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dir_GetFiles2/CPP/dir_getfiles2.cpp#1)]
 [!code-csharp[Dir\_GetFiles2\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_GetFiles2/CS/dir_getfiles2.cs#1)]
 [!code-vb[Dir\_GetFiles2\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_GetFiles2/VB/dir_getfiles2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <paramref name="path" /> はファイル名です。  
  
 または  
  
 ネットワーク エラーが発生しました。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さゼロの文字列か、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。<see cref="M:System.IO.Path.GetInvalidPathChars" /> を使用して、正しくない文字を検出するクエリを実行できます。  
  
 \-または\-  
  
 <paramref name="searchPattern" /> には有効なパターンが含まれていません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> または <paramref name="searchPattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが見つからないか正しくありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for access to path information for the current directory. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public static string[] GetFiles (string path, string searchPattern, System.IO.SearchOption searchOption);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetFiles(string path, string searchPattern, valuetype System.IO.SearchOption searchOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetFiles(System.String,System.String,System.IO.SearchOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="searchPattern" Type="System.String" />
        <Parameter Name="searchOption" Type="System.IO.SearchOption" />
      </Parameters>
      <Docs>
        <param name="path">検索するディレクトリの相対パスまたは絶対パス。 この文字列の大文字と小文字は区別されません。</param>
        <param name="searchPattern">
          <c>path</c> 内のファイル名と対応させる検索文字列。  このパラメーターには、有効なリテラル パスとワイルドカード \(\* および ?\) の組み合わせを使用できます。 文字 \(「解説」を参照\) の組み合わせを使用できますが、正規表現はサポートしていません。</param>
        <param name="searchOption">検索操作にすべてのサブディレクトリを含めるのか、または現在のディレクトリのみを含めるのかを指定する列挙値の 1 つ。</param>
        <summary>指定したディレクトリの中から、指定した検索パターンに一致し、サブディレクトリを検索するかどうかを決定する値を持つファイル名 \(パスを含む\) を返します。</summary>
        <returns>指定したディレクトリ内の指定した検索パターンおよびオプションに一致するファイルの完全名 \(パスを含む\) の配列。または、ファイルが見つからない場合は空の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 返されるファイル名は、指定されたパラメーターに追加されます `path` し、返されるファイル名の順序は保証されません。 使用して、 <xref:System.Array.Sort%2A> メソッドの特定の並べ替え順序が必要な場合です。  
  
 `searchPattern` リテラルのパスとワイルドカードの組み合わせは、文字が、正規表現をサポートしていないを指定できます。 次のワイルドカード文字は使用 `searchPattern`します。  
  
|ワイルドカードの指定子|一致する文字列|  
|-----------------|-------------|  
|\* \(アスタリスク\)|その位置に 0 個以上の文字。|  
|? \(疑問符 \(\)\)|その位置に 0 個または 1 文字。|  
  
 ワイルドカード以外の文字は、リテラル文字です。 たとえば、 `searchPattern` 文字列"\* t"ですべての名前を検索 `path` 文字"t"で終わる。`searchPattern` 文字列内のすべての名前を「s \*"検索 `path` "s"の文字で始まります。  
  
 `searchPattern` 2 つのピリオドで終わることはできません \(".."\) 2 つのピリオドが含まれているか \(".."\) 続いて <xref:System.IO.Path.DirectorySeparatorChar> または <xref:System.IO.Path.AltDirectorySeparatorChar>, 、無効な文字を含めることもできます。 正しくない文字を照会するには、<xref:System.IO.Path.GetInvalidPathChars%2A> メソッドを使用します。  
  
> [!NOTE]
>  アスタリスクのワイルドカード文字を使用する場合、 `searchPattern` 「\*.txt」など、指定した拡張子の文字数影響を与えます検索次ようにします。  
>   
>  -   指定された拡張機能が 3 文字の場合は、指定した拡張子が始まる拡張子を持つファイルを返します。 たとえば、「\*.xls」には、"book.xls"と"book.xlsx"両方が返されます。  
> -   その他のすべてのケースでは、メソッドは、指定された拡張機能を正確に一致するファイルを返します。 たとえば、"\* .ai"が"file.ai"、"file.aif"を返します。  
>   
>  疑問符 \(\) のワイルドカード文字を使用すると、このメソッドは、指定されたファイル拡張子に一致するファイルのみを返します。 たとえば、ディレクトリの検索パターンに 2 つのファイル、"file1.txt"および"file1.txtother"指定された"ファイル? です。txt"は最初のファイルだけを返し、"file\*.txt"の検索パターンには、両方のファイルが返されます。  
  
> [!NOTE]
>  検索パターンに似ていますので、このメソッドは、8.3 形式のファイル名の形式と長いファイル名の形式の両方でのファイル名をチェックして、"\* \*1\*.txt"予期しないファイル名を返す可能性があります。 検索パターンの使用例を"\* \*1\*.txt"と同等の 8.3 形式のファイル名の形式が"LONGFI~1.TXT"であるため"longfilename.txt"が返されます。  
  
 <xref:System.IO.Directory.EnumerateFiles%2A> と <xref:System.IO.Directory.GetFiles%2A> メソッドは次のように異なります: を使用すると <xref:System.IO.Directory.EnumerateFiles%2A>, 、コレクション全体が返される前に、名前のコレクションの列挙を開始することができます。 使用すると <xref:System.IO.Directory.GetFiles%2A>, 、配列にアクセスする前に返される名前の配列全体を待つ必要があります。 そのため、ときに使用する多数のファイルとディレクトリ、 <xref:System.IO.Directory.EnumerateFiles%2A> 効率的であることができます。  
  
 ファイル名には、完全なパスが含まれます。  
  
 `path` パラメーターは、相対パスまたは絶対パス情報を指定できます。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 `path` パラメーターは、大文字小文字を区別することはありません。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列か、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。  
  
 または  
  
 <paramref name="searchPattern" /> には有効なパターンが含まれません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> または <paramref name="searchpattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="searchOption" /> は有効な <see cref="T:System.IO.SearchOption" /> 値ではありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが見つからないか正しくありません \(たとえば、マップされていないドライブ上のパスなど\)。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="path" /> はファイル名です。  
  
 または  
  
 ネットワーク エラーが発生しました。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for access to path information for the current directory. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetFileSystemEntries">
      <MemberSignature Language="C#" Value="public static string[] GetFileSystemEntries (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetFileSystemEntries(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetFileSystemEntries(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">検索するディレクトリの相対パスまたは絶対パス。 この文字列の大文字と小文字は区別されません。</param>
        <summary>指定したパス内のすべてのファイル名とサブディレクトリ名を返します。</summary>
        <returns>指定したディレクトリ内ファイル名またはサブディレクトリ名の配列。ファイルやサブディレクトリが見つからない場合は、空の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 返されるファイルとディレクトリ名の順序は保証されません。使用して、 <xref:System.Array.Sort%2A> メソッドの特定の並べ替え順序が必要な場合です。  
  
 <xref:System.IO.Directory.EnumerateFileSystemEntries%2A> と <xref:System.IO.Directory.GetFileSystemEntries%2A> メソッドは次のように異なります: を使用すると <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>, 、コレクション全体が返される前に、エントリのコレクションの列挙を開始することができます。 使用すると <xref:System.IO.Directory.GetFileSystemEntries%2A>, 、配列にアクセスする前に返されるエントリの配列全体を待つ必要があります。 そのため、ときに使用する多数のファイルとディレクトリ、 <xref:System.IO.Directory.EnumerateFiles%2A> 効率的であることができます。  
  
 このメソッドを同じ <xref:System.IO.Directory.GetFileSystemEntries%2A> アスタリスク \(\*\)、検索パターンとして指定されているとします。  
  
 `path` 相対パスまたは絶対パス情報を指定するパラメーターを許可します。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 `path` パラメーターは、大文字小文字を区別することはありません。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例では、 <xref:System.IO.Directory.GetFileSystemEntries%2A> コンソールに配列の文字列の各メソッドですべてのファイルとユーザー指定の場所と出力内のサブディレクトリの名前を持つ文字列の配列を設定します。 この例は、すべてのエラーがこのメソッドに共通に構成されます。  
  
 [!code-cpp[System.IO.Directory\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Directory/CPP/class1.cpp#1)]
 [!code-csharp[System.IO.Directory\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class1.cs#1)]
 [!code-vb[System.IO.Directory\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列か、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。<see cref="M:System.IO.Path.GetInvalidPathChars" /> を使用して、正しくない文字に対するクエリを実行できます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="path" /> はファイル名です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for access to path information for the current directory. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <altmember cref="T:System.IO.FileSystemInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetFileSystemEntries">
      <MemberSignature Language="C#" Value="public static string[] GetFileSystemEntries (string path, string searchPattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetFileSystemEntries(string path, string searchPattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetFileSystemEntries(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="searchPattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">検索するディレクトリの相対パスまたは絶対パス。 この文字列の大文字と小文字は区別されません。</param>
        <param name="searchPattern">
          <c>path</c> 内のファイルおよびディレクトリの名前と照合する検索文字列。  このパラメーターには、有効なリテラル パスとワイルドカード \(\* および ?\)  文字 \(「解説」を参照\) の組み合わせを使用できますが、正規表現はサポートしていません。</param>
        <summary>指定されたパスから、検索パターンに一致するファイル名とディレクトリ名の配列を返します。</summary>
        <returns>指定した検索条件に一致するファイル名またはディレクトリ名の配列。ファイルやディレクトリが見つからない場合は、空の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 返されるファイルとディレクトリ名の順序は保証されません。使用して、 <xref:System.Array.Sort%2A> メソッドの特定の並べ替え順序が必要な場合です。  
  
 `searchPattern` リテラルのパスとワイルドカードの組み合わせは、文字が、正規表現をサポートしていないを指定できます。 次のワイルドカード文字は使用 `searchPattern`します。  
  
|ワイルドカードの指定子|一致する文字列|  
|-----------------|-------------|  
|\* \(アスタリスク\)|その位置に 0 個以上の文字。|  
|? \(疑問符 \(\)\)|その位置に 0 個または 1 文字。|  
  
 ワイルドカード以外の文字は、リテラル文字です。 たとえば、 `searchPattern` 文字列"\* t"ですべての名前を検索 `path` 文字"t"で終わる。`searchPattern` 文字列内のすべての名前を「s \*"検索 `path` "s"の文字で始まります。  
  
 `searchPattern` 2 つのピリオドで終わることはできません \(".."\) 2 つのピリオドが含まれているか \(".."\) 続いて <xref:System.IO.Path.DirectorySeparatorChar> または <xref:System.IO.Path.AltDirectorySeparatorChar>, 、無効な文字を含めることもできます。 正しくない文字を照会するには、<xref:System.IO.Path.GetInvalidPathChars%2A> メソッドを使用します。  
  
> [!NOTE]
>  アスタリスクのワイルドカード文字を使用する場合、 `searchPattern` 「\*.txt」など、指定した拡張子の文字数影響を与えます検索次ようにします。  
>   
>  -   指定された拡張機能が 3 文字の場合は、指定した拡張子が始まる拡張子を持つファイルを返します。 たとえば、「\*.xls」には、"book.xls"と"book.xlsx"両方が返されます。  
> -   その他のすべてのケースでは、メソッドは、指定された拡張機能を正確に一致するファイルを返します。 たとえば、"\* .ai"が"file.ai"、"file.aif"を返します。  
>   
>  疑問符 \(\) のワイルドカード文字を使用すると、このメソッドは、指定されたファイル拡張子に一致するファイルのみを返します。 たとえば、ディレクトリの検索パターンに 2 つのファイル、"file1.txt"および"file1.txtother"指定された"ファイル? です。txt"は最初のファイルだけを返し、"file\*.txt"の検索パターンには、両方のファイルが返されます。  
  
 `path` 相対パスまたは絶対パス情報を指定するパラメーターを許可します。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 `path` パラメーターは、大文字小文字を区別することはありません。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例では、 <xref:System.IO.Directory.GetFileSystemEntries%2A> メソッドですべての名前を持つ文字列の配列を設定するファイルの特定の場所にユーザーが指定したフィルターに一致して、コンソールに配列内の各文字列を出力します。 この例は、すべてのエラーがこのメソッドに共通に構成されます。  
  
 [!code-cpp[System.IO.Directory\#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Directory/CPP/class1.cpp#2)]
 [!code-csharp[System.IO.Directory\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class1.cs#2)]
 [!code-vb[System.IO.Directory\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> が長さ 0 の文字列か、空白のみで構成されているか、または正しくない文字を含んでいます。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。  
  
 または  
  
 <paramref name="searchPattern" /> には有効なパターンが含まれません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> または <paramref name="searchPattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="path" /> はファイル名です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for access to path information for the current directory. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></permission>
        <altmember cref="T:System.IO.FileSystemInfo" />
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="GetFileSystemEntries">
      <MemberSignature Language="C#" Value="public static string[] GetFileSystemEntries (string path, string searchPattern, System.IO.SearchOption searchOption);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetFileSystemEntries(string path, string searchPattern, valuetype System.IO.SearchOption searchOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="searchPattern" Type="System.String" />
        <Parameter Name="searchOption" Type="System.IO.SearchOption" />
      </Parameters>
      <Docs>
        <param name="path">検索するディレクトリの相対パスまたは絶対パス。 この文字列の大文字と小文字は区別されません。</param>
        <param name="searchPattern">
          <c>path</c> 内のファイルおよびディレクトリの名前と照合する検索文字列。  このパラメーターには、正確なリテラル パスとワイルドカード \(\* と ?\)  文字 \(「解説」を参照\) の組み合わせを使用できますが、正規表現はサポートしていません。</param>
        <param name="searchOption">検索操作に現在のディレクトリのみを含めるのか、またはすべてのサブディレクトリを含めるのかを指定する列挙値の 1 つ。  
  
 既定値は <see cref="F:System.IO.SearchOption.TopDirectoryOnly" /> です。</param>
        <summary>指定されたパスにあるファイルおよびディレクトリのうち、検索パターンに一致するすべてのファイル名およびディレクトリ名の配列を返します。オプションでサブディレクトリを検索対象にすることができます。</summary>
        <returns>指定した検索条件に一致するファイル名またはディレクトリ名の配列。ファイルやディレクトリが見つからない場合は、空の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 返されるファイルとディレクトリ名の順序は保証されません。使用して、 <xref:System.Array.Sort%2A> メソッドの特定の並べ替え順序が必要な場合です。  
  
 `searchPattern` リテラルのパスとワイルドカードの組み合わせは、文字が、正規表現をサポートしていないを指定できます。 次のワイルドカード文字は使用 `searchPattern`します。  
  
|ワイルドカードの指定子|一致する文字列|  
|-----------------|-------------|  
|\* \(アスタリスク\)|その位置に 0 個以上の文字。|  
|? \(疑問符 \(\)\)|その位置に 0 個または 1 文字。|  
  
 ワイルドカード以外の文字は、リテラル文字です。 たとえば、 `searchPattern` 文字列"\* t"ですべての名前を検索 `path` 文字"t"で終わる。`searchPattern` 文字列内のすべての名前を「s \*"検索 `path` "s"の文字で始まります。  
  
 `searchPattern` 2 つのピリオドで終わることはできません \(".."\) 2 つのピリオドが含まれているか \(".."\) 続いて <xref:System.IO.Path.DirectorySeparatorChar> または <xref:System.IO.Path.AltDirectorySeparatorChar>, 、無効な文字を含めることもできます。 正しくない文字を照会するには、<xref:System.IO.Path.GetInvalidPathChars%2A> メソッドを使用します。  
  
> [!NOTE]
>  アスタリスクのワイルドカード文字を使用する場合、 `searchPattern` 「\*.txt」など、指定した拡張子の文字数影響を与えます検索次ようにします。  
>   
>  -   指定された拡張機能が 3 文字の場合は、指定した拡張子が始まる拡張子を持つファイルを返します。 たとえば、「\*.xls」には、"book.xls"と"book.xlsx"両方が返されます。  
> -   その他のすべてのケースでは、メソッドは、指定された拡張機能を正確に一致するファイルを返します。 たとえば、"\* .ai"が"file.ai"、"file.aif"を返します。  
>   
>  疑問符 \(\) のワイルドカード文字を使用すると、このメソッドは、指定されたファイル拡張子に一致するファイルのみを返します。 たとえば、ディレクトリの検索パターンに 2 つのファイル、"file1.txt"および"file1.txtother"指定された"ファイル? です。txt"は最初のファイルだけを返し、"file\*.txt"の検索パターンには、両方のファイルが返されます。  
  
 <xref:System.IO.Directory.EnumerateFileSystemEntries%2A> と <xref:System.IO.Directory.GetFileSystemEntries%2A> メソッドは次のように異なります: を使用すると <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>, 、コレクション全体が返される前に、エントリのコレクションの列挙を開始することができます。 使用すると <xref:System.IO.Directory.GetFileSystemEntries%2A>, 、配列にアクセスする前に返されるエントリの配列全体を待つ必要があります。 そのため、ときに使用する多数のファイルとディレクトリ、 <xref:System.IO.Directory.EnumerateFiles%2A> 効率的であることができます。  
  
 相対パス情報を指定する、 `path` パラメーター。 相対パス情報を使用して指定できますが、現在の作業ディレクトリに対して相対的に解釈されて、 <xref:System.IO.Directory.GetCurrentDirectory%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path " /> は長さゼロの文字列で、空白のみで構成されているか、または無効な文字を含んでいます。 無効な文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。  
  
 または  
  
 <paramref name="searchPattern" /> には有効なパターンが含まれません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="searchPattern" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="searchOption" /> は有効な <see cref="T:System.IO.SearchOption" /> 値ではありません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">たとえば、マップされていないドライブへの参照など、<paramref name="path" /> は無効です。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="path" /> はファイル名です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパス、ファイル名、または結合は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="GetLastAccessTime">
      <MemberSignature Language="C#" Value="public static DateTime GetLastAccessTime (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime GetLastAccessTime(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetLastAccessTime(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">アクセス日時情報を取得する対象のファイルまたはディレクトリ。</param>
        <summary>指定したファイルまたはディレクトリに最後にアクセスした日付と時刻を返します。</summary>
        <returns>指定したファイルまたはディレクトリに最後にアクセスした日時に設定された構造体。 この値は現地時刻で表示されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  このメソッドは、オペレーティング システムでの値を持つは継続的に更新できませんネイティブ関数を使用しているためにが不正確な値を返すことがあります。  
  
 このメソッドを同じ <xref:System.IO.File.GetLastAccessTime%2A?displayProperty=fullName>します。  
  
 ディレクトリが記述されている場合、 `path` パラメーターが存在しないか、このメソッドは、西暦 1601 年 1 月 1 日深夜 12時 00分を返します。\(西暦\)世界協定時刻 \(UTC\) では、ローカル時刻に調整します。  
  
 `path` 相対パスまたは絶対パス情報を指定するパラメーターを許可します。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 `path` パラメーターは、大文字小文字を区別することはありません。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例では、使用して `GetLastAccessTime`します。  
  
 [!code-cpp[Dir\_GetLastAccess\#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dir_GetLastAccess/CPP/dir_getlastaccess.cpp#1)]
 [!code-csharp[Dir\_GetLastAccess\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_GetLastAccess/CS/dir_getlastaccess.cs#1)]
 [!code-vb[Dir\_GetLastAccess\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_GetLastAccess/VB/dir_getlastaccess.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> が長さ 0 の文字列か、空白のみで構成されているか、または正しくない文字を含んでいます。<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用して、正しくない文字に対するクエリを実行できます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> パラメーターは無効な形式で表します。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading the specified file or directory. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="GetLastAccessTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime GetLastAccessTimeUtc (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime GetLastAccessTimeUtc(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetLastAccessTimeUtc(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">アクセス日時情報を取得する対象のファイルまたはディレクトリ。</param>
        <summary>指定されたファイルまたはディレクトリが最後にアクセスされた日付と時刻を世界協定時刻 \(UTC\) 形式で返します。</summary>
        <returns>指定されたファイルまたはディレクトリが最後にアクセスされた日時に設定された構造体。 この値は UTC 時刻で表現されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  このメソッドは、オペレーティング システムでの値を持つは継続的に更新できませんネイティブ関数を使用しているためにが不正確な値を返すことがあります。  
  
 ディレクトリが記述されている場合、 `path` パラメーターが存在しないか、このメソッドは、西暦 1601 年 1 月 1 日深夜 12時 00分を返します。\(西暦\)世界協定時刻 \(UTC\)。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例は、世界協定時刻 \(UTC\) を使用した場合の出力の違いを示しています。  
  
 [!code-cpp[System.IO.UTCExample\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.UTCExample/CPP/example.cpp#1)]
 [!code-csharp[System.IO.UTCExample\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.UTCExample/CS/example.cs#1)]
 [!code-vb[System.IO.UTCExample\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.UTCExample/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列か、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> パラメーターは無効な形式で表します。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading the specified file or directory. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="GetLastWriteTime">
      <MemberSignature Language="C#" Value="public static DateTime GetLastWriteTime (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime GetLastWriteTime(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetLastWriteTime(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">変更日時情報を取得する対象のファイルまたはディレクトリ。</param>
        <summary>指定したファイルまたはディレクトリに最後に書き込んだ日付と時刻を返します。</summary>
        <returns>指定したファイルまたはディレクトリに最後に書き込んだ日時に設定された構造体。 この値は現地時刻で表示されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  このメソッドは、オペレーティング システムでの値を持つは継続的に更新できませんネイティブ関数を使用しているためにが不正確な値を返すことがあります。  
  
 ディレクトリが記述されている場合、 `path` パラメーターが存在しないか、このメソッドは、西暦 1601 年 1 月 1 日深夜 12時 00分を返します。\(西暦\)世界協定時刻 \(UTC\) では、ローカル時刻に調整します。  
  
 `path` 相対パスまたは絶対パス情報を指定するパラメーターを許可します。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 `path` パラメーターは、大文字小文字を区別することはありません。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例では、使用して `GetLastWriteTime`します。  
  
 [!code-cpp[Dir\_GetLastWrite\#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dir_GetLastWrite/CPP/dir_getlastwrite.cpp#1)]
 [!code-csharp[Dir\_GetLastWrite\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_GetLastWrite/CS/dir_getlastwrite.cs#1)]
 [!code-vb[Dir\_GetLastWrite\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_GetLastWrite/VB/dir_getlastwrite.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列か、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading the specified file or directory. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="GetLastWriteTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime GetLastWriteTimeUtc (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime GetLastWriteTimeUtc(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetLastWriteTimeUtc(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">変更日時情報を取得する対象のファイルまたはディレクトリ。</param>
        <summary>指定したファイルまたはディレクトリに最後に書き込んだ日付と時刻を世界協定時刻 \(UTC\) 形式で返します。</summary>
        <returns>指定したファイルまたはディレクトリに最後に書き込んだ日時に設定された構造体。 この値は UTC 時刻で表現されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  このメソッドは、オペレーティング システムでの値を持つは継続的に更新できませんネイティブ関数を使用しているためにが不正確な値を返すことがあります。  
  
 ディレクトリが記述されている場合、 `path` パラメーターが存在しないか、このメソッドは、西暦 1601 年 1 月 1 日深夜 12時 00分を返します。\(西暦\)世界協定時刻 \(UTC\)。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例は、世界協定時刻 \(UTC\) を使用した場合の出力の違いを示しています。  
  
 [!code-cpp[System.IO.UTCExample\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.UTCExample/CPP/example.cpp#1)]
 [!code-csharp[System.IO.UTCExample\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.UTCExample/CS/example.cs#1)]
 [!code-vb[System.IO.UTCExample\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.UTCExample/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列か、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading the specified file or directory. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="GetLogicalDrives">
      <MemberSignature Language="C#" Value="public static string[] GetLogicalDrives ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetLogicalDrives() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetLogicalDrives" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このコンピューターの論理ドライブ名を "&lt;drive letter&gt;:\\" の形式で取得します。</summary>
        <returns>このコンピューターの論理ドライブ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 GetLogicalDrives は、フロッピー ドライブ、光学式ドライブなど、特定のコンピューターにアクセス可能なドライブのすべてを返します。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例では、 <xref:System.IO.Directory.GetLogicalDrives%2A> メソッドを呼び出し側のコンピューター上の各ドライブの名前を文字列の配列に代入します。 この文字列配列の各メンバーは、コンソールに出力されます。 この例は、すべてのエラーがこのメソッドに共通に構成されます。  
  
 [!code-cpp[System.IO.Directory\#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Directory/CPP/class1.cpp#3)]
 [!code-csharp[System.IO.Directory\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class1.cs#3)]
 [!code-vb[System.IO.Directory\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました \(ディスク エラーなど\)。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code, such as calling native code with PInvoke or COM interop. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetParent">
      <MemberSignature Language="C#" Value="public static System.IO.DirectoryInfo GetParent (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.DirectoryInfo GetParent(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetParent(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.DirectoryInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">親ディレクトリを取得する対象のパス。</param>
        <summary>絶対パスと相対パスの両方を含む指定したパスの親ディレクトリを取得します。</summary>
        <returns>親ディレクトリ。または <paramref name="path" /> が UNC サーバーや共有名のルートを含むルート ディレクトリの場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `path` 相対パスまたは絶対パス情報を指定するパラメーターを許可します。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 末尾から末尾のスペースが削除された、 `path` ディレクトリを取得する前にパラメーター。  
  
 このメソッドによって返される文字列へのパスがなどではなく、最後のすべての文字から成る <xref:System.IO.Path.DirectorySeparatorChar> または <xref:System.IO.Path.AltDirectorySeparatorChar>です。 たとえば、"C:\\Directory\\SubDirectory\\test.txt"パスに渡す <xref:System.IO.Directory.GetParent%2A> "C:\\Directory\\SubDirectory"を返します。 "C:\\Directory\\SubDirectory"を渡すには、"C:\\Directory"が返されます。 ただし、渡す"C:\\Directory\\SubDirectory\\"が返されます"C:\\Directory\\SubDirectory"最後のディレクトリ区切り記号が「サブディレクトリ」の後にあるためです。  
  
 `path` パラメーターは、大文字小文字を区別することはありません。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.IO.Directory.GetParent%2A> ユーザー指定の場所の親ディレクトリを取得するメソッドを"path"です。 によって返される値、 <xref:System.IO.Directory.GetParent%2A> メソッドは、コンソールに出力されます。 この例は、すべてのエラーがこのメソッドに共通に構成されます。  
  
 [!code-cpp[System.IO.Directory\#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Directory/CPP/class1.cpp#4)]
 [!code-csharp[System.IO.Directory\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class1.cs#4)]
 [!code-vb[System.IO.Directory\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <paramref name="path" /> によって指定されたディレクトリは読み取り専用です。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列か、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定したパスが見つかりませんでした。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading from files or directories. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.DirectoryInfo" />
      </Docs>
    </Member>
    <Member MemberName="Move">
      <MemberSignature Language="C#" Value="public static void Move (string sourceDirName, string destDirName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Move(string sourceDirName, string destDirName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.Move(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirName" Type="System.String" />
        <Parameter Name="destDirName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceDirName">移動するファイルまたはディレクトリのパス。</param>
        <param name="destDirName">
          <c>sourceDirName</c> の新しい位置へのパス。<c>sourceDirName</c> がファイルの場合は、<c>destDirName</c> もファイル名にする必要があります。</param>
        <summary>ファイルまたはディレクトリ、およびその内容を新しい場所に移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドで指定された名前の新しいディレクトリを作成する `destDirName` の内容を移動および `sourceDirName` 新しく作成先ディレクトリにします。 ディレクトリを既に存在するディレクトリに移動しようとする場合、 <xref:System.IO.IOException> が発生します。 たとえば、c:\\mydir を c:\\public に移動しようとして、c:\\public が既に存在する場合、例外が発生します。 また、"c:\\\\public\\\\mydir"として指定、 `destDirName` mydir というの"c:\\\\public"の下に存在または"c:\\\\newdir"などの新しいディレクトリ名を指定していないを指定されたパラメーター。  
  
 `sourceDirName` と `destDirName` 引数は、相対パスまたは絶対パス情報を指定します。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 末尾のスペースは、ディレクトリを移動する前に、パスのパラメーターの最後から削除されます。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例では、ディレクトリとそのすべてのファイルを新しいディレクトリに移動する方法を示します。 元のディレクトリは、移動された後に存在しません。  
  
 [!code-csharp[System.IO.Directory\#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class6.cs#14)]
 [!code-vb[System.IO.Directory\#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class6.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">ディレクトリを別のボリュームに移動しようとしました。  
  
 または  
  
 <paramref name="destDirName" /> が既に存在します。  
  
 または  
  
 <paramref name="sourceDirName" /> パラメーターと <paramref name="destDirName" /> パラメーターが、同じファイルまたはディレクトリを参照しています。  
  
 または  
  
 ディレクトリ、またはそのディレクトリ内のファイルが別のプロセスによって使用されています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sourceDirName" /> または <paramref name="destDirName" /> は長さ 0 の文字列で、空白のみで構成されているか、正しくない文字を含んでいます。<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用して、正しくない文字に対するクエリを実行できます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceDirName" /> または <paramref name="destDirName" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="sourceDirName" /> で指定されたパスが、マップされていないドライブ上にあるなど、正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading from **parameterReference tag is not supported!!!!**  
 and writing to **parameterReference tag is not supported!!!!**  
 and **parameterReference tag is not supported!!!!**  
. Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetAccessControl">
      <MemberSignature Language="C#" Value="public static void SetAccessControl (string path, System.Security.AccessControl.DirectorySecurity directorySecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetAccessControl(string path, class System.Security.AccessControl.DirectorySecurity directorySecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="directorySecurity" Type="System.Security.AccessControl.DirectorySecurity" />
      </Parameters>
      <Docs>
        <param name="path">アクセス制御リスト \(ACL\) エントリの追加先または削除元となるディレクトリ。</param>
        <param name="directorySecurity">
          <c>path</c> パラメーターが示すディレクトリに適用する ACL エントリを表す <see cref="T:System.Security.AccessControl.DirectorySecurity" /> オブジェクト。</param>
        <summary>
          <see cref="T:System.Security.AccessControl.DirectorySecurity" /> オブジェクトが示すアクセス制御リスト \(ACL: Access Control List\) エントリを、指定したディレクトリに適用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.Directory.SetAccessControl%2A> メソッドが継承されない ACL リストを表すファイルにアクセス制御リスト \(ACL\) エントリを適用します。  
  
> [!CAUTION]
>  ACL に指定された、 `directorySecurity` パラメーターは、既存のディレクトリの ACL を置き換えます。 新しいユーザーのアクセス許可を追加するには、使用、 <xref:System.IO.Directory.GetAccessControl%2A> メソッドを既存の ACL を取得し、それを変更します。  
  
 ACL は、個人やグループがある、または権限がない、特定のアクションに指定したファイルまたはディレクトリにユーザーを示します。 詳細については、「[How to: Add or Remove an Access Control List Entry](http://msdn.microsoft.com/ja-jp/53758b39-bd9b-4640-bb04-cad5ed8d0abf)」を参照してください。  
  
 <xref:System.IO.Directory.SetAccessControl%2A> メソッドにのみが引き続き発生する <xref:System.Security.AccessControl.DirectorySecurity> オブジェクトの作成後に変更されたオブジェクト。  場合、 <xref:System.Security.AccessControl.DirectorySecurity> オブジェクトが変更されていない、ファイルに保持されません。  したがって、取得することはありません、 <xref:System.Security.AccessControl.DirectorySecurity> 1 つのファイルからオブジェクトし、別のファイルを同じオブジェクトを再適用します。  
  
 ACL の情報を別の 1 つのファイルにコピーします。 する  
  
1.  使用して、 <xref:System.IO.Directory.GetAccessControl%2A> を取得するメソッド、 <xref:System.Security.AccessControl.DirectorySecurity> ソース ファイルからのオブジェクト。  
  
2.  新しい <xref:System.Security.AccessControl.DirectorySecurity> 先のファイル オブジェクトです。  
  
3.  使用して、 <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm%2A> または <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> メソッドのソースの <xref:System.Security.AccessControl.DirectorySecurity> ACL 情報を取得するオブジェクト。  
  
4.  使用して、 <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm%2A> または <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> に情報をコピーする方法が先に手順 3 で取得した <xref:System.Security.AccessControl.DirectorySecurity> オブジェクトです。  
  
5.  リンク先を設定 <xref:System.Security.AccessControl.DirectorySecurity> 変換先のファイルを使用するオブジェクト、 <xref:System.IO.Directory.SetAccessControl%2A> メソッドです。  
  
 NTFS の環境で <xref:System.Security.AccessControl.FileSystemRights.ReadAttributes> と <xref:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes> 場合は、ユーザーがあるユーザーに付与されます <xref:System.Security.AccessControl.FileSystemRights.ListDirectory> 親フォルダーの権限です。 拒否する <xref:System.Security.AccessControl.FileSystemRights.ReadAttributes> と <xref:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes>, 、拒否 <xref:System.Security.AccessControl.FileSystemRights.ListDirectory> 親ディレクトリにします。  
  
   
  
## 例  
 次の例では、 <xref:System.IO.Directory.GetAccessControl%2A> と <xref:System.IO.Directory.SetAccessControl%2A> 、アクセスを追加するメソッドが制御リスト \(ACL\) エントリと、ディレクトリから ACL エントリを削除します。  この例を実行するには、有効なユーザーまたはグループ アカウントを指定する必要があります。  
  
 [!code-cpp[IO.DiretoryInfo.GetAccessControl\-SetAccessControl\#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/cpp/sample.cpp#1)]
 [!code-csharp[IO.DiretoryInfo.GetAccessControl\-SetAccessControl\#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/CS/sample.cs#1)]
 [!code-vb[IO.DiretoryInfo.GetAccessControl\-SetAccessControl\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directorySecurity" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">ディレクトリが見つかりません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> が正しくありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">現在のプロセスには、<paramref name="path" /> で指定されたディレクトリへのアクセス権がありません。  
  
 または  
  
 現在のプロセスには、ACL エントリを設定するための十分な特権がありません。</exception>
        <exception cref="T:System.PlatformNotSupportedException">現在のオペレーティング システムは Windows 2000 以降ではありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for permission to enumerate access control list \(ACL\) for a directory. Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.NoAccess" /> , <see cref="F:System.Security.AccessControl.AccessControlActions.View" />  
  
 Security action: Demand.</permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="SetCreationTime">
      <MemberSignature Language="C#" Value="public static void SetCreationTime (string path, DateTime creationTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCreationTime(string path, valuetype System.DateTime creationTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.SetCreationTime(System.String,System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="creationTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="path">作成日時情報を設定する対象のファイルまたはディレクトリ。</param>
        <param name="creationTime">ファイルまたはディレクトリに最後に書き込んだ日付と時刻。 この値は現地時刻で表示されます。</param>
        <summary>指定したファイルまたはディレクトリの作成日時を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `path` 相対パスまたは絶対パス情報を指定するパラメーターを許可します。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 `path` パラメーターは、大文字小文字を区別することはありません。  
  
   
  
## 例  
 次の例は、世界協定時刻 \(UTC\) を使用した場合の出力の違いを示しています。  
  
 [!code-cpp[System.IO.UTCExample\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.UTCExample/CPP/example.cpp#1)]
 [!code-csharp[System.IO.UTCExample\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.UTCExample/CS/example.cs#1)]
 [!code-vb[System.IO.UTCExample\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.UTCExample/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">指定したパスが見つかりませんでした。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="creationTime" /> はこの操作に許可される日付または時刻の範囲外の値を指定します。</exception>
        <exception cref="T:System.PlatformNotSupportedException">現在のオペレーティング システムは Windows NT 以降ではありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for writing to the specified file or directory. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="SetCreationTimeUtc">
      <MemberSignature Language="C#" Value="public static void SetCreationTimeUtc (string path, DateTime creationTimeUtc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCreationTimeUtc(string path, valuetype System.DateTime creationTimeUtc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.SetCreationTimeUtc(System.String,System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="creationTimeUtc" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="path">作成日時情報を設定する対象のファイルまたはディレクトリ。</param>
        <param name="creationTimeUtc">ディレクトリまたはファイルが作成された日時。 この値は現地時刻で表示されます。</param>
        <summary>指定したファイルまたはディレクトリの作成日時を世界協定時刻 \(UTC\) 形式で設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `path` 相対パスまたは絶対パス情報を指定するパラメーターを許可します。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 `path` パラメーターは、大文字小文字を区別することはありません。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">指定したパスが見つかりませんでした。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="creationTime" /> はこの操作に許可される日付または時刻の範囲外の値を指定します。</exception>
        <exception cref="T:System.PlatformNotSupportedException">現在のオペレーティング システムは Windows NT 以降ではありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for writing to the specified file or directory. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="SetCurrentDirectory">
      <MemberSignature Language="C#" Value="public static void SetCurrentDirectory (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCurrentDirectory(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.SetCurrentDirectory(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">現在の作業ディレクトリが設定されるパス。</param>
        <summary>アプリケーションの現在の作業ディレクトリを指定したディレクトリに設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アプリケーションが終了すると、作業ディレクトリが元の場所 \(プロセスが開始されたディレクトリ\) に復元されます。  
  
 `path` 相対パスまたは絶対パス情報を指定するパラメーターを許可します。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 末尾から末尾のスペースが削除された、 `path` ディレクトリを設定する前にパラメーター。  
  
 `path` パラメーターは、大文字小文字を区別することはありません。  
  
 使用して、ドライブが準備ができているかどうかを確認できます \(「a:」フロッピー ディスク ドライブ用\) または CD\-ROM ドライブの「e:」などにリムーバブル メディア ドライブにディレクトリを設定する場合、 <xref:System.IO.DriveInfo.IsReady%2A> プロパティです。  
  
   
  
## 例  
 次の例では、現在のディレクトリを設定し、ディレクトリのルートを表示する方法を示します。  
  
 [!code-cpp[System.IO.DirectoryRoot\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.DirectoryRoot/CPP/example.cpp#1)]
 [!code-csharp[System.IO.DirectoryRoot\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.DirectoryRoot/CS/example.cs#1)]
 [!code-vb[System.IO.DirectoryRoot\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.DirectoryRoot/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さゼロの文字列か、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し側に、アンマネージ コードへのアクセスに必要なアクセス許可がありません。</exception>
        <exception cref="T:System.IO.FileNotFoundException">指定したパスが見つかりませんでした。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたディレクトリが見つかりませんでした。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for writing to files or directories. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="SetLastAccessTime">
      <MemberSignature Language="C#" Value="public static void SetLastAccessTime (string path, DateTime lastAccessTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetLastAccessTime(string path, valuetype System.DateTime lastAccessTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.SetLastAccessTime(System.String,System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="lastAccessTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="path">アクセス日時情報を設定する対象のファイルまたはディレクトリ。</param>
        <param name="lastAccessTime">
          <c>path</c> のアクセス日時の設定値を含むオブジェクト。 この値は現地時刻で表示されます。</param>
        <summary>指定したファイルまたはディレクトリに最後にアクセスした日付と時刻を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `path` 相対パスまたは絶対パス情報を指定するパラメーターを許可します。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 `path` パラメーターは、大文字小文字を区別することはありません。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例では、使用して `SetLastAccessTime`します。  
  
 [!code-cpp[Dir\_SetLastAccess\#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dir_SetLastAccess/CPP/dir_setlastaccess.cpp#1)]
 [!code-csharp[Dir\_SetLastAccess\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_SetLastAccess/CS/dir_setlastaccess.cs#1)]
 [!code-vb[Dir\_SetLastAccess\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_SetLastAccess/VB/dir_setlastaccess.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">指定したパスが見つかりませんでした。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.PlatformNotSupportedException">現在のオペレーティング システムは Windows NT 以降ではありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="lastAccessTime" /> はこの操作に許可される日付または時刻の範囲外の値を指定します。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for writing to the specified file or directory. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="SetLastAccessTimeUtc">
      <MemberSignature Language="C#" Value="public static void SetLastAccessTimeUtc (string path, DateTime lastAccessTimeUtc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetLastAccessTimeUtc(string path, valuetype System.DateTime lastAccessTimeUtc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.SetLastAccessTimeUtc(System.String,System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="lastAccessTimeUtc" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="path">アクセス日時情報を設定する対象のファイルまたはディレクトリ。</param>
        <param name="lastAccessTimeUtc">
          <c>path</c> のアクセス日時の設定値を含むオブジェクト。 この値は UTC 時刻で表現されます。</param>
        <summary>指定したファイルまたはディレクトリに最後にアクセスした日付と時刻を世界協定時刻 \(UTC\) 形式で設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `path` 相対パスまたは絶対パス情報を指定するパラメーターを許可します。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 `path` パラメーターは、大文字小文字を区別することはありません。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例は、世界協定時刻 \(UTC\) を使用した場合の出力の違いを示しています。  
  
 [!code-cpp[System.IO.UTCExample\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.UTCExample/CPP/example.cpp#1)]
 [!code-csharp[System.IO.UTCExample\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.UTCExample/CS/example.cs#1)]
 [!code-vb[System.IO.UTCExample\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.UTCExample/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">指定したパスが見つかりませんでした。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.PlatformNotSupportedException">現在のオペレーティング システムは Windows NT 以降ではありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="lastAccessTimeUtc" /> はこの操作に許可される日付または時刻の範囲外の値を指定します。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for writing to the specified file or directory. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="SetLastWriteTime">
      <MemberSignature Language="C#" Value="public static void SetLastWriteTime (string path, DateTime lastWriteTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetLastWriteTime(string path, valuetype System.DateTime lastWriteTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.SetLastWriteTime(System.String,System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="lastWriteTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="path">ディレクトリのパス。</param>
        <param name="lastWriteTime">ディレクトリに最後に書き込んだ日付と時刻。 この値は現地時刻で表示されます。</param>
        <summary>ディレクトリに最後に書き込んだ日付と時刻を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `path` 相対パスまたは絶対パス情報を指定するパラメーターを許可します。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 `path` パラメーターは、大文字小文字を区別することはありません。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例では、使用して `SetLastWriteTime`します。  
  
 [!code-cpp[Dir\_SetLastWrite\#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dir_SetLastWrite/CPP/dir_setlastwrite.cpp#1)]
 [!code-csharp[Dir\_SetLastWrite\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_SetLastWrite/CS/dir_setlastwrite.cs#1)]
 [!code-vb[Dir\_SetLastWrite\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_SetLastWrite/VB/dir_setlastwrite.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">指定したパスが見つかりませんでした。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.PlatformNotSupportedException">現在のオペレーティング システムは Windows NT 以降ではありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="lastWriteTime" /> はこの操作に許可される日付または時刻の範囲外の値を指定します。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for writing to the specified file or directory. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="SetLastWriteTimeUtc">
      <MemberSignature Language="C#" Value="public static void SetLastWriteTimeUtc (string path, DateTime lastWriteTimeUtc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetLastWriteTimeUtc(string path, valuetype System.DateTime lastWriteTimeUtc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.SetLastWriteTimeUtc(System.String,System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="lastWriteTimeUtc" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="path">ディレクトリのパス。</param>
        <param name="lastWriteTimeUtc">ディレクトリに最後に書き込んだ日付と時刻。 この値は UTC 時刻で表現されます。</param>
        <summary>ディレクトリに最後に書き込んだ日付と時刻を世界協定時刻 \(UTC\) 形式で設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `path` 相対パスまたは絶対パス情報を指定するパラメーターを許可します。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、次を参照してください。 <xref:System.IO.Directory.GetCurrentDirectory%2A>します。  
  
 `path` パラメーターは、大文字小文字を区別することはありません。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例は、世界協定時刻 \(UTC\) を使用した場合の出力の違いを示しています。  
  
 [!code-cpp[System.IO.UTCExample\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.UTCExample/CPP/example.cpp#1)]
 [!code-csharp[System.IO.UTCExample\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.UTCExample/CS/example.cs#1)]
 [!code-vb[System.IO.UTCExample\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.UTCExample/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">指定したパスが見つかりませんでした。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列で、空白のみで構成されているか、または 1 つ以上の正しくない文字を含んでいます。 正しくない文字を照会するには、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドを使用します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.PlatformNotSupportedException">現在のオペレーティング システムは Windows NT 以降ではありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="lastWriteTimeUtc" /> はこの操作に許可される日付または時刻の範囲外の値を指定します。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for writing to the specified file or directory. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EnumerateDirectories">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された条件を満たすディレクトリ名の列挙可能なコレクションを返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="EnumerateFileSystemEntries">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された条件を満たすファイル システム エントリの列挙可能なコレクションを返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetFiles">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した条件を満たすファイルの名前を返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Delete">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定されたディレクトリとオプションでサブディレクトリを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="CreateDirectory">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したパスにすべてのディレクトリを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetFileSystemEntries">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した条件を満たすすべてのファイル名とサブディレクトリ名を返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="EnumerateFiles">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された条件を満たすファイル名の列挙可能なコレクションを返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetDirectories">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した条件を満たすサブディレクトリの名前を返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetAccessControl">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ディレクトリの Windows アクセス制御リスト \(ACL\) を返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>