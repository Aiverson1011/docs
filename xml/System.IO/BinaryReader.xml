<Type Name="BinaryReader" FullName="System.IO.BinaryReader">
  <TypeSignature Language="C#" Value="public class BinaryReader : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BinaryReader extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IO.BinaryReader" />
  <AssemblyInfo>
    <AssemblyName>System.IO</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>プリミティブ データ型を特定のエンコーディングのバイナリ値として読み取ります。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.BinaryReader> クラス プリミティブ データ型のストリームからの読み取りを簡略化するメソッドを提供します。 たとえば、使用、 <xref:System.IO.BinaryReader.ReadBoolean%2A> メソッドをブール値として次のバイトを読み取り、1 バイトをストリームの現在位置を進めます。 クラスには、さまざまなデータ型をサポートする読み取りメソッドが含まれています。  
  
 新しいインスタンスを作成するときに、 <xref:System.IO.BinaryReader> 、クラスを読み取ったり、ストリームを提供し、必要に応じてエンコードの種類を指定して破棄した後に、ストリームのままにするかどうかを開く、 <xref:System.IO.BinaryReader> オブジェクトです。 エンコードの種類を指定しない場合は、utf\-8 が使用されます。  
  
> [!IMPORTANT]
>  この型は、 <xref:System.IDisposable> インターフェイスです。 型の使用が完了したらを直接または間接的にその破棄する必要があります。 型の直接 dispose を呼び出してその <xref:System.IDisposable.Dispose%2A> メソッドで、 `try`\/`catch` ブロックします。 直接ことのない破棄する場合など言語構成要素を使用して `using` \(c\#\) のまたは `Using` \(Visual Basic で\)。 詳細については、"を使用して、オブジェクトを実装して IDisposable"」セクションを参照してください、 <xref:System.IDisposable> インターフェイスに関するトピック。  
  
   
  
## 例  
 次のコード例では、保管およびファイル内のアプリケーション設定を取得する方法を示します。  
  
 [!code-csharp[System.IO.BinaryReaderWriter\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/CS/source.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BinaryReader (System.IO.Stream input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.#ctor(System.IO.Stream)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="input" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">入力ストリーム。</param>
        <summary>指定したストリームに基づき、UTF\-8 エンコーディングを使用する <see cref="T:System.IO.BinaryReader" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次のコード例では、保管およびファイル内のアプリケーション設定を取得する方法を示します。  
  
 [!code-csharp[System.IO.BinaryReaderWriter\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/CS/source.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">ストリームが読み取りをサポートしていない、 <see langword="null" />, が既に閉じたりします。</exception>
        <altmember cref="T:System.Text.UTF8Encoding" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BinaryReader (System.IO.Stream input, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream input, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="input" Type="System.IO.Stream" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="input">入力ストリーム。</param>
        <param name="encoding">使用する文字エンコーディング。</param>
        <summary>指定したストリームと文字エンコーディングに基づいて、<see cref="T:System.IO.BinaryReader" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">ストリームが読み取りをサポートしていない、 <see langword="null" />, が既に閉じたりします。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="encoding" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BinaryReader (System.IO.Stream input, System.Text.Encoding encoding, bool leaveOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream input, class System.Text.Encoding encoding, bool leaveOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="input" Type="System.IO.Stream" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="leaveOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="input">入力ストリーム。</param>
        <param name="encoding">使用する文字エンコーディング。</param>
        <param name="leaveOpen">
          <see cref="T:System.IO.BinaryReader" /> オブジェクトを破棄した後にストリームを開いたままにする場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</param>
        <summary>指定したストリームと文字エンコーディングに基づいて <see cref="T:System.IO.BinaryReader" /> クラスの新しいインスタンスを初期化し、必要に応じて、ストリームを開いたままにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">ストリームが読み取りをサポートしていない、 <see langword="null" />, が既に閉じたりします。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="encoding" /> または <paramref name="input" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="BaseStream">
      <MemberSignature Language="C#" Value="public virtual System.IO.Stream BaseStream { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream BaseStream" />
      <MemberSignature Language="DocId" Value="P:System.IO.BinaryReader.BaseStream" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.IO.BinaryReader" /> の基になるストリームへのアクセスを公開します。</summary>
        <value>
          <see langword="BinaryReader" /> に関連付けられた、基になるストリーム。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!CAUTION]
>  基になるを使用してストリームの読み取り中または使用中に、 `BinaryReader` データの損失や破損が発生することができます。 たとえば、複数回にわたって同じバイトを読み取る、バイトがスキップされる可能性があります。 または文字の読み取りは予測不能になる可能性があります。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次のコード例は、読み取りし、書き込みをする方法を示しています。 `Double` を使用してメモリへのデータ、 `BinaryReader` と <xref:System.IO.BinaryWriter> クラスの上に、 <xref:System.IO.MemoryStream> クラスです。`MemoryStream` 読み取りし、書き込みのみ `Byte` データ。  
  
 [!code-cpp[System.IO.BinaryReaderWriter.RWDouble\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWDouble/CPP/rwdouble.cpp#1)]
 [!code-csharp[System.IO.BinaryReaderWriter.RWDouble\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWDouble/CS/rwdouble.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter.RWDouble\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWDouble/VB/rwdouble.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.Close" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のリーダーと基になるストリームをクローズします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This implementation of **languageKeyword tag is not supported!!!!**  
 calls the <xref:System.IO.BinaryReader.Dispose%2A> method passing a **languageKeyword tag is not supported!!!!**  
 value.  
  
 Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.IO.Stream.Flush%2A> or **languageKeyword tag is not supported!!!!**  
. Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to **languageKeyword tag is not supported!!!!**  
 means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state \(partial characters\) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.IO.BinaryReader" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Call **languageKeyword tag is not supported!!!!**  
 when you are finished using the <xref:System.IO.BinaryReader>. The **languageKeyword tag is not supported!!!!**  
 method leaves the <xref:System.IO.BinaryReader> in an unusable state. After calling **languageKeyword tag is not supported!!!!**  
, you must release all references to the <xref:System.IO.BinaryReader> so the garbage collector can reclaim the memory that the <xref:System.IO.BinaryReader> was occupying.  
  
 For more information, see [Cleaning Up Unmanaged Resources](http://msdn.microsoft.com/ja-jp/a17b0066-71c2-4ba4-9822-8e19332fc213) and [Implementing a Dispose Method](http://msdn.microsoft.com/ja-jp/eb4e1af0-3b48-4fbc-ad4e-fc2f64138bf9).  
  
> [!NOTE]
>  Always call **languageKeyword tag is not supported!!!!**  
>  before you release your last reference to the <xref:System.IO.BinaryReader>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.IO.BinaryReader> object's **languageKeyword tag is not supported!!!!**  
>  method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.IO.BinaryReader" /> クラスによって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method is called by **languageKeyword tag is not supported!!!!**  
 and <xref:System.Object.Finalize%2A>. By default, this method specifies the **parameterReference tag is not supported!!!!**  
 parameter as **languageKeyword tag is not supported!!!!**  
. <xref:System.Object.Finalize%2A> specifies the **parameterReference tag is not supported!!!!**  
 parameter as **languageKeyword tag is not supported!!!!**  
.  
  
 When the **parameterReference tag is not supported!!!!**  
 parameter is **languageKeyword tag is not supported!!!!**  
, this method releases all resources held by any managed objects that this <xref:System.IO.BinaryReader> references. This method invokes the **languageKeyword tag is not supported!!!!**  
 method of each referenced object.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.IO.BinaryReader.Dispose(System.Boolean)" /> can be called multiple times by other objects. When overriding this method, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />. For more information about how to implement this method, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
 For more information about <see cref="M:System.IDisposable.Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="FillBuffer">
      <MemberSignature Language="C#" Value="protected virtual void FillBuffer (int numBytes);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FillBuffer(int32 numBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.FillBuffer(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="numBytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="numBytes">読み取るバイト数。</param>
        <summary>指定したバイト数分だけストリームから読み取ったバイトを内部バッファーに格納します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 内部バッファー サイズが大きい方の値によって返される値と 16 の <xref:System.Text.Encoding.GetMaxByteCount%2A> の指定したエンコードします。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException">前に、ストリームの終わりに達した <paramref name="numBytes" /> を読み取ることができます。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">要求された <paramref name="numBytes" /> が内部バッファー サイズより大きい。</exception>
      </Docs>
    </Member>
    <Member MemberName="PeekChar">
      <MemberSignature Language="C#" Value="public virtual int PeekChar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 PeekChar() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.PeekChar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>読み取り可能な次の文字を返します。バイトの位置または文字の位置は変化しません。</summary>
        <returns>使用できる次の文字。使用できる文字がないか、ストリームがシークをサポートしていない場合は \-1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ストリームの使用でサロゲート文字が予想されるかどうか、 <xref:System.IO.BinaryReader.ReadChars%2A> メソッドは、元の位置に戻さのストリームを設定します。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <exception cref="T:System.ArgumentException">使用して内部文字バッファーに現在の文字をデコードできない、 <see cref="T:System.Text.Encoding" /> ストリーム用に選択します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public virtual int Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.Read" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>基になるストリームから文字を読み取り、使用した <see langword="Encoding" /> とストリームから読み取った特定の文字に従ってストリームの現在位置を進めます。</summary>
        <returns>入力ストリームの次の文字。現在読み取り可能な文字がない場合は \-1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.BinaryReader> 失敗した読み取られた後にファイルの位置は復元されません。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例では、バッキング ストアとしてメモリを使用してデータを読み書きする方法を示します。 この例では、コンソールに無効なファイル パスの文字の一覧を表示します。 コードが無効なファイル パスのすべての文字の一覧を表示しようとすると、表示可能な文字セット内ですべての文字が。 無効な文字の一覧は、システムによって変化する、このコードの出力も異なります。  
  
 [!code-cpp[System.IO.BinaryReaderWriter.RWChar2\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChar2/CPP/rwreadchar.cpp#1)]
 [!code-csharp[System.IO.BinaryReaderWriter.RWChar2\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChar2/CS/rwreadchar.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter.RWChar2\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChar2/VB/rwreadchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public virtual int Read (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Read(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">データを読み取るバッファー。</param>
        <param name="index">バッファー内の、バッファーへの読み取り開始点。</param>
        <param name="count">読み取るバイト数。</param>
        <summary>バイト配列内の指定された位置を開始点として、ストリームから指定されたバイト数を読み取ります。</summary>
        <returns>
          <paramref name="buffer" /> に読み取るバイト数。 要求したバイト数分のバイトを読み取れなかった場合、この値は要求したバイト数より小さくなります。ストリームの末尾に到達した場合は 0 になることがあります。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [Read メソッド \(Byte\<xref:System.IO.BinaryReader> 読み取り操作が失敗した後は、ファイルの位置は復元されません。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例では、バッキング ストアとしてメモリを使用してバイナリ データを作成する方法を示します。 データが正常に書き込まれたかどうかを示すコンソールにメッセージを表示します。  
  
 [!code-csharp[System.IO.BinaryReaderWriter.RWBytes2\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWBytes2/CS/rwreadbytes.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter.RWBytes2\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWBytes2/VB/rwreadbytes.vb#1)]  
  
 この例は、ファイルの内容を読み込んで、16 列形式で各バイトの数値を表示します。 読み取られているファイルの末尾が検出されたときに、 [Read メソッド \(Byte\<xref:System.IO.BinaryReader.Read%2A> メソッドは 0 バイトを返します。  
  
 [!code-csharp[System.IO.BinaryReaderWriter\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/CS/source5.cs#6)]
 [!code-vb[System.IO.BinaryReaderWriter\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/VB/source5.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。  
  
 または  
  
 デコードされた読み取る文字の数がより多い <paramref name="count" />します。 これは、Unicode デコーダーのフォールバック文字またはサロゲート ペアを返す場合に発生することができます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> または <paramref name="count" /> が負の値です。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public virtual int Read (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Read(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">データを読み取るバッファー。</param>
        <param name="index">バッファー内の、バッファーへの読み取り開始点。</param>
        <param name="count">読み取る文字の数。</param>
        <summary>文字配列内の指定された位置を開始点として、ストリームから指定された文字数を読み取ります。</summary>
        <returns>バッファーに読み取られた合計文字数。 要求した文字数分の文字を読み取れなかった場合、この値は要求した文字数より小さくなります。また、ストリームの末尾に到達した場合は 0 になることがあります。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [Read メソッド \(Char\<xref:System.IO.BinaryReader> 読み取り操作が失敗した後は、ファイルの位置は復元されません。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例では、バッキング ストアとしてメモリを使用してデータを読み書きする方法を示します。 この例では、コンソールに無効なファイル パスの文字の一覧を表示します。 コードが無効なファイル パスのすべての文字の一覧を表示しようとすると、表示可能な文字セット内ですべての文字が。 無効な文字の一覧は、システムによって変化する、このコードの出力も異なります。  
  
 [!code-cpp[System.IO.BinaryReaderWriter.RWChars2\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChars2/CPP/rwreadchars.cpp#1)]
 [!code-csharp[System.IO.BinaryReaderWriter.RWChars2\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChars2/CS/rwreadchars.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter.RWChars2\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChars2/VB/rwreadchars.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。  
  
 または  
  
 デコードされた読み取る文字の数がより多い <paramref name="count" />します。 これは、Unicode デコーダーのフォールバック文字またはサロゲート ペアを返す場合に発生することができます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> または <paramref name="count" /> が負の値です。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Read7BitEncodedInt">
      <MemberSignature Language="C#" Value="protected int Read7BitEncodedInt ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance int32 Read7BitEncodedInt() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.Read7BitEncodedInt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>32 ビット整数を圧縮形式で読み取ります。</summary>
        <returns>圧縮形式の 32 ビット整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.BinaryReader> 失敗した読み取られた後にファイルの位置は復元されません。  
  
 整数は、7 ビットに収まる、領域の 1 バイトだけは、整数が表示されます。 書き込まれた整数が期待どおり <xref:System.IO.BinaryWriter.Write7BitEncodedInt%2A?displayProperty=fullName>します。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException">ストリームの末尾に到達します。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <exception cref="T:System.FormatException">ストリームが壊れています。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadBoolean">
      <MemberSignature Language="C#" Value="public virtual bool ReadBoolean ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadBoolean() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.ReadBoolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のストリームから <see langword="Boolean" /> 値を読み取り、ストリームの現在位置を 1 バイトだけ進めます。</summary>
        <returns>読み取ったバイトが 0 以外の場合は <see langword="true" />。0 の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.BinaryReader> 失敗した読み取られた後にファイルの位置は復元されません。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次のコード例では、保管およびファイル内のアプリケーション設定を取得する方法を示します。  
  
 [!code-csharp[System.IO.BinaryReaderWriter\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/CS/source.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException">ストリームの末尾に到達します。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadByte">
      <MemberSignature Language="C#" Value="public virtual byte ReadByte ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8 ReadByte() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.ReadByte" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のストリームから次のバイトを読み取り、ストリームの現在位置を 1 バイトだけ進めます。</summary>
        <returns>現在のストリームから読み取った次のバイト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.BinaryReader> 失敗した読み取られた後にファイルの位置は復元されません。  
  
 データ形式が競合するため、このメソッドを次のエンコーディングを使用することはお勧めしません。  
  
-   UTF\-7  
  
-   ISO 2022\-JP  
  
-   ISCII  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次のコード例では、バッキング ストアとしてメモリを使用してバイナリ データを記述して、データが正常に書き込まれたことを確認する方法を示します。  
  
 [!code-cpp[System.IO.BinaryReaderWriter.RWByte\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWByte/CPP/rwbyte.cpp#1)]
 [!code-csharp[System.IO.BinaryReaderWriter.RWByte\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWByte/CS/rwbyte.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter.RWByte\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWByte/VB/rwbyte.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException">ストリームの末尾に到達します。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadBytes">
      <MemberSignature Language="C#" Value="public virtual byte[] ReadBytes (int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] ReadBytes(int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.ReadBytes(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="count">読み取るバイト数。 この値は 0 以上の数字の必要があり、それ以外の場合は例外が発生します。</param>
        <summary>現在のストリームから指定されたバイト数をバイト配列に読み取り、そのバイト数だけストリーム内の現在位置を進めます。</summary>
        <returns>基になるストリームから読み取ったデータが格納されているバイト配列。 ストリームの末尾に到達した場合は要求したバイト数より小さくなることがあります。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.BinaryReader> 読み取り操作が失敗した後は、ファイルの位置は復元されません。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次のコード例では、バッキング ストアとしてメモリを使用してバイナリ データを記述して、データが正常に書き込まれたことを確認する方法を示します。  
  
 [!code-cpp[System.IO.BinaryReaderWriter.RWBytes1\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWBytes1/CPP/rwbytes.cpp#1)]
 [!code-csharp[System.IO.BinaryReaderWriter.RWBytes1\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWBytes1/CS/rwbytes.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter.RWBytes1\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWBytes1/VB/rwbytes.vb#1)]  
  
 この例では、ファイルの内容を読み取り、コンソールにダンプのテキストとして表示します。 読み取られているファイルの末尾が検出されたときの長さ、 <xref:System.Byte> から返される配列 <xref:System.IO.BinaryReader.ReadBytes%2A> ゼロです。  
  
 [!code-csharp[System.IO.BinaryReaderWriter\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/CS/source5.cs#6)]
 [!code-vb[System.IO.BinaryReaderWriter\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/VB/source5.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">デコードされた読み取る文字の数がより多い <paramref name="count" />します。 これは、Unicode デコーダーのフォールバック文字またはサロゲート ペアを返す場合に発生することができます。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="count" /> は負の値です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadChar">
      <MemberSignature Language="C#" Value="public virtual char ReadChar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance char ReadChar() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.ReadChar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のストリームの次の文字を読み取り、使用した <see langword="Encoding" /> とストリームから読み取った特定の文字に従ってストリームの現在位置を進めます。</summary>
        <returns>現在のストリームから読み取った文字。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.IO.BinaryReader.ReadChar%2A> メソッドを読み取ろうと、ストリーム内の文字にサロゲート、例外が発生し、ストリーム内の位置はページに進みます。 位置が前に元の場所に復元 <xref:System.IO.BinaryReader.ReadChar%2A> 場合に呼び出されますが、ストリームはシーク可能。 ただし、ストリームがシーク可能な場合は、位置も修正されません。 サロゲート文字は、ストリームで予想される場合を使用して、 <xref:System.IO.BinaryReader.ReadChars%2A> メソッド代わりにします。  
  
 データ形式が競合するため、このメソッドを次のエンコーディングを使用することはお勧めしません。  
  
-   UTF\-7  
  
-   ISO 2022\-JP  
  
-   ISCII  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次のコード例では、バッキング ストアとしてメモリを使用してデータを読み書きする方法を示します。  
  
 [!code-cpp[System.IO.BinaryReaderWriter.RWChar1\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChar1/CPP/rwchar.cpp#1)]
 [!code-csharp[System.IO.BinaryReaderWriter.RWChar1\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChar1/CS/rwchar.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter.RWChar1\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChar1/VB/rwchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException">ストリームの末尾に到達します。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <exception cref="T:System.ArgumentException">サロゲート文字が読み取られました。</exception>
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
    <Member MemberName="ReadChars">
      <MemberSignature Language="C#" Value="public virtual char[] ReadChars (int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance char[] ReadChars(int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.ReadChars(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="count">読み取る文字の数。</param>
        <summary>現在のストリームから指定された文字数を読み取り、そのデータを文字配列として返します。また、使用した <see langword="Encoding" /> とストリームから読み取った特定の文字に従って現在位置を進めます。</summary>
        <returns>基になるストリームから読み取ったデータが格納されている文字配列。 ストリームの末尾に到達した場合は、要求された文字数より小さくなることがあります。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.BinaryReader> 読み取り操作が失敗した後は、ファイルの位置は復元されません。  
  
 いくつかのまれなケースでのネットワーク ストリームから読み取るときに、 <xref:System.IO.BinaryReader.ReadChars%2A> メソッドは、場合に、ストリームからの余分な文字を読み取ることがあります、 <xref:System.IO.BinaryReader> Unicode で構築されたエンコードします。 このような場合は、使用、 <xref:System.IO.BinaryReader.ReadBytes%2A> メソッドは、固定長バイト配列の読み取りをするには、その配列を渡す、 <xref:System.IO.BinaryReader.ReadChars%2A> メソッドです。  
  
   
  
## 例  
 次のコード例では、バッキング ストアとしてメモリを使用してデータを読み書きする方法を示します。  
  
 [!code-cpp[System.IO.BinaryReaderWriter.RWChars1\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChars1/CPP/rwchars.cpp#1)]
 [!code-csharp[System.IO.BinaryReaderWriter.RWChars1\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChars1/CS/rwchars.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter.RWChars1\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChars1/VB/rwchars.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">デコードされた読み取る文字の数がより多い <paramref name="count" />します。 これは、Unicode デコーダーのフォールバック文字またはサロゲート ペアを返す場合に発生することができます。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="count" /> は負の値です。</exception>
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
    <Member MemberName="ReadDecimal">
      <MemberSignature Language="C#" Value="public virtual decimal ReadDecimal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Decimal ReadDecimal() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.ReadDecimal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のストリームから 10 進数値を読み取り、ストリームの現在位置を 16 バイトだけ進めます。</summary>
        <returns>現在のストリームから読み取った 10 進数値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.BinaryReader> 失敗した読み取られた後にファイルの位置は復元されません。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException">ストリームの末尾に到達します。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadDouble">
      <MemberSignature Language="C#" Value="public virtual double ReadDouble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ReadDouble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.ReadDouble" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のストリームから 8 バイト浮動小数点値を読み取り、ストリームの現在位置を 8 バイトだけ進めます。</summary>
        <returns>現在のストリームから読み取った 8 バイト浮動小数点値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.BinaryReader> 失敗した読み取られた後にファイルの位置は復元されません。  
  
 `BinaryReader` リトル エンディアン形式の場合は、このデータ型を読み取ります。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次のコード例は、読み取りし、書き込みをする方法を示しています。 `Double` を使用してメモリへのデータ、 `BinaryReader` と <xref:System.IO.BinaryWriter> クラスの上に、 <xref:System.IO.MemoryStream> クラスです。`MemoryStream` 読み取りし、書き込みのみ `Byte` データ。  
  
 [!code-cpp[System.IO.BinaryReaderWriter.RWDouble\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWDouble/CPP/rwdouble.cpp#1)]
 [!code-csharp[System.IO.BinaryReaderWriter.RWDouble\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWDouble/CS/rwdouble.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter.RWDouble\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWDouble/VB/rwdouble.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException">ストリームの末尾に到達します。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadInt16">
      <MemberSignature Language="C#" Value="public virtual short ReadInt16 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int16 ReadInt16() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.ReadInt16" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のストリームから 2 バイト符号付き整数を読み取り、ストリームの現在位置を 2 バイトだけ進めます。</summary>
        <returns>現在のストリームから読み取った 2 バイト符号付き整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.BinaryReader> 失敗した読み取られた後にファイルの位置は復元されません。  
  
 `BinaryReader` リトル エンディアン形式の場合は、このデータ型を読み取ります。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException">ストリームの末尾に到達します。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadInt32">
      <MemberSignature Language="C#" Value="public virtual int ReadInt32 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadInt32() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.ReadInt32" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のストリームから 4 バイト符号付き整数を読み取り、ストリームの現在位置を 4 バイトだけ進めます。</summary>
        <returns>現在のストリームから読み取った 4 バイト符号付き整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.BinaryReader> 失敗した読み取られた後にファイルの位置は復元されません。  
  
 <xref:System.IO.BinaryReader> リトル エンディアン形式の場合は、このデータ型を読み取ります。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次のコード例では、保管およびファイル内のアプリケーション設定を取得する方法を示します。  
  
 [!code-csharp[System.IO.BinaryReaderWriter\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/CS/source.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException">ストリームの末尾に到達します。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadInt64">
      <MemberSignature Language="C#" Value="public virtual long ReadInt64 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 ReadInt64() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.ReadInt64" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のストリームから 8 バイト符号付き整数を読み取り、ストリームの現在位置を 8 バイトだけ進めます。</summary>
        <returns>現在のストリームから読み取った 8 バイト符号付き整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.BinaryReader> 失敗した読み取られた後にファイルの位置は復元されません。  
  
 `BinaryReader` リトル エンディアン形式の場合は、このデータ型を読み取ります。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException">ストリームの末尾に到達します。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadSByte">
      <MemberSignature Language="C#" Value="public virtual sbyte ReadSByte ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int8 ReadSByte() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.ReadSByte" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のストリームから符号付きバイトを読み取り、ストリームの現在位置を 1 バイトだけ進めます。</summary>
        <returns>現在のストリームから読み取った符号付きバイト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.BinaryReader> 失敗した読み取られた後にファイルの位置は復元されません。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException">ストリームの末尾に到達します。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadSingle">
      <MemberSignature Language="C#" Value="public virtual float ReadSingle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 ReadSingle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.ReadSingle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のストリームから 4 バイト浮動小数点値を読み取り、ストリームの現在位置を 4 バイトだけ進めます。</summary>
        <returns>現在のストリームから読み取った 4 バイト浮動小数点値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.BinaryReader> 失敗した読み取られた後にファイルの位置は復元されません。  
  
 `BinaryReader` リトル エンディアン形式の場合は、このデータ型を読み取ります。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次のコード例では、保管およびファイル内のアプリケーション設定を取得する方法を示します。  
  
 [!code-csharp[System.IO.BinaryReaderWriter\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/CS/source.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException">ストリームの末尾に到達します。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadString">
      <MemberSignature Language="C#" Value="public virtual string ReadString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReadString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.ReadString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のストリームから 1 つの文字列を読み取ります。 ストリームの文字列は、7 ビットごとにエンコードされた文字列の長さが先頭に付加されています。</summary>
        <returns>読み取った文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.BinaryReader> 失敗した読み取られた後にファイルの位置は復元されません。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次のコード例では、保管およびファイル内のアプリケーション設定を取得する方法を示します。  
  
 [!code-csharp[System.IO.BinaryReaderWriter\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/CS/source.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException">ストリームの末尾に到達します。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadUInt16">
      <MemberSignature Language="C#" Value="public virtual ushort ReadUInt16 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int16 ReadUInt16() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.ReadUInt16" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>リトル エンディアン エンコーディングを使用して現在のストリームから 2 バイト符号なし整数を読み取り、ストリームの位置を 2 バイトだけ進めます。</summary>
        <returns>現在のストリームから読み取った 2 バイト符号なし整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.BinaryReader> 失敗した読み取られた後にファイルの位置は復元されません。  
  
 `BinaryReader` リトル エンディアン形式の場合は、このデータ型を読み取ります。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException">ストリームの末尾に到達します。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadUInt32">
      <MemberSignature Language="C#" Value="public virtual uint ReadUInt32 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int32 ReadUInt32() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.ReadUInt32" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のストリームから 4 バイト符号なし整数を読み取り、ストリームの位置を 4 バイトだけ進めます。</summary>
        <returns>現在のストリームから読み取った 4 バイト符号なし整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.BinaryReader> 失敗した読み取られた後にファイルの位置は復元されません。  
  
 `BinaryReader` リトル エンディアン形式の場合は、このデータ型を読み取ります。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException">ストリームの末尾に到達します。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadUInt64">
      <MemberSignature Language="C#" Value="public virtual ulong ReadUInt64 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int64 ReadUInt64() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.ReadUInt64" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のストリームから 8 バイト符号なし整数を読み取り、ストリームの位置を 8 バイトだけ進めます。</summary>
        <returns>現在のストリームから読み取った 8 バイト符号なし整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.BinaryReader> 失敗した読み取られた後にファイルの位置は復元されません。  
  
 `BinaryReader` リトル エンディアン形式の場合は、このデータ型を読み取ります。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException">ストリームの末尾に到達します。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生します。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.IO.BinaryReader" /> クラスによって使用されているリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.IO.BinaryReader" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Read">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>基になるストリームからバイトを読み取り、ストリームの現在位置を進めます。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>