<Type Name="StringWriter" FullName="System.IO.StringWriter">
  <TypeSignature Language="C#" Value="public class StringWriter : System.IO.TextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit StringWriter extends System.IO.TextWriter" />
  <TypeSignature Language="DocId" Value="T:System.IO.StringWriter" />
  <AssemblyInfo>
    <AssemblyName>System.IO</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.TextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>文字列に情報を書き込む <see cref="T:System.IO.TextWriter" /> を実装します。 情報は、基になる <see cref="T:System.Text.StringBuilder" /> に格納されます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.StringWriter> 同期または非同期で文字列に書き込むことができます。 時点で、文字を記述することができます、 <xref:System.IO.StringWriter.Write%28System.Char%29> または <xref:System.IO.StringWriter.WriteAsync%28System.Char%29> メソッドを使用して一度に文字列、 <xref:System.IO.StringWriter.Write%28System.String%29> または <xref:System.IO.StringWriter.WriteAsync%28System.String%29> メソッドです。 さらに、文字、文字の配列または文字列のいずれかで非同期的に行終端記号を記述、 <xref:System.IO.StringWriter.WriteLineAsync%2A> メソッドです。  
  
> [!IMPORTANT]
>  この型は、 <xref:System.IDisposable> インターフェイスです。 型の使用が完了したらを直接または間接的にその破棄する必要があります。 型の直接 dispose を呼び出してその <xref:System.IDisposable.Dispose%2A> メソッドで、 `try` \/`catch` ブロックします。 直接ことのない破棄する場合など言語構成要素を使用して `using` \(c\#\) のまたは `Using` \(Visual Basic で\)。 詳細については、"を使用して、オブジェクトを実装して IDisposable"」セクションを参照してください、 <xref:System.IDisposable> インターフェイスに関するトピック。  
  
 次の表は、その他の一般的なまたは関連する I\/O タスクの例を示します。  
  
|目的|参照項目|  
|--------|----------|  
|テキスト ファイルを作成します。|[&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)|  
|テキスト ファイルに書き込みます。|[&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)|  
|テキスト ファイルから読み取ります。|[&#91;\<topic:\/\/cpconreadingtextfromfile\>&#93;](http://msdn.microsoft.com/ja-jp/ed180baa-dfc6-4c69-a725-46e87edafb27)|  
|ファイルにテキストを追加します。|[&#91;\<topic:\/\/cpconopeningappendingtologfile\>&#93;](http://msdn.microsoft.com/ja-jp/74423362-1721-49cb-aa0a-e04005f72a06)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  
|ファイルのサイズを取得します。|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  
|ファイルの属性を取得します。|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  
|ファイルの属性を設定します。|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  
|ファイルの存在を確認します。|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  
|バイナリ ファイルから読み取ります。|[&#91;\<topic:\/\/cpconReadingWritingToNewlyCreatedDataFile\>&#93;](http://msdn.microsoft.com/ja-jp/e209d949-31e8-44ea-8e38-87f9093f3093)|  
|バイナリ ファイルに書き込みます。|[&#91;\<topic:\/\/cpconReadingWritingToNewlyCreatedDataFile\>&#93;](http://msdn.microsoft.com/ja-jp/e209d949-31e8-44ea-8e38-87f9093f3093)|  
  
   
  
## 例  
 次のコード例では、元のテキストにセンテンスをし、段落の変換のグループからの継続的な段落の作成を示します。  
  
 [!code-cpp[System.IO.StringReaderWriter\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.StringReaderWriter/CPP/stringrw.cpp#1)]
 [!code-csharp[System.IO.StringReaderWriter\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StringReaderWriter/CS/stringrw.cs#1)]
 [!code-vb[System.IO.StringReaderWriter\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StringReaderWriter/VB/stringrw.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.StringBuilder" />
    <altmember cref="T:System.IO.StringReader" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StringWriter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringWriter.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.IO.StringWriter" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 新しい <xref:System.Text.StringBuilder> オブジェクトが自動的に作成されの新しいインスタンスに関連付けられている、 <xref:System.IO.StringWriter> クラスです。 新しいインスタンスを初期化はこのコンス トラクターのコントロールの書式設定が指定されていないので <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName>します。  
  
 次の表は、その他の一般的なまたは関連する I\/O タスクの例を示します。  
  
|目的|参照項目|  
|--------|----------|  
|テキスト ファイルを作成します。|[&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)|  
|テキスト ファイルに書き込みます。|[&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)|  
|テキスト ファイルから読み取ります。|[&#91;\<topic:\/\/cpconreadingtextfromfile\>&#93;](http://msdn.microsoft.com/ja-jp/ed180baa-dfc6-4c69-a725-46e87edafb27)|  
|ファイルにテキストを追加します。|[&#91;\<topic:\/\/cpconopeningappendingtologfile\>&#93;](http://msdn.microsoft.com/ja-jp/74423362-1721-49cb-aa0a-e04005f72a06)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  
|ファイルのサイズを取得します。|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  
|ファイルの属性を取得します。|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  
|ファイルの属性を設定します。|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  
|ファイルの存在を確認します。|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  
|バイナリ ファイルから読み取ります。|[&#91;\<topic:\/\/cpconReadingWritingToNewlyCreatedDataFile\>&#93;](http://msdn.microsoft.com/ja-jp/e209d949-31e8-44ea-8e38-87f9093f3093)|  
|バイナリ ファイルに書き込みます。|[&#91;\<topic:\/\/cpconReadingWritingToNewlyCreatedDataFile\>&#93;](http://msdn.microsoft.com/ja-jp/e209d949-31e8-44ea-8e38-87f9093f3093)|  
  
   
  
## 例  
 次のコード例を使用して文字列を構築、 `StringWriter` クラスです。  
  
 [!code-cpp[System.IO.StringWriter1\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.StringWriter1/CPP/strwriter1.cpp#1)]
 [!code-csharp[System.IO.StringWriter1\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StringWriter1/CS/strwriter1.cs#1)]
 [!code-vb[System.IO.StringWriter1\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StringWriter1/VB/strwriter1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StringWriter (IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringWriter.#ctor(System.IFormatProvider)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="formatProvider">書式を制御する <see cref="T:System.IFormatProvider" /> オブジェクト。</param>
        <summary>指定した書式コントロールで <see cref="T:System.IO.StringWriter" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 新しい <xref:System.Text.StringBuilder> オブジェクトが自動的に作成されの新しいインスタンスに関連付けられている、 <xref:System.IO.StringWriter> クラスです。  
  
 次の表は、その他の一般的なまたは関連する I\/O タスクの例を示します。  
  
|目的|参照項目|  
|--------|----------|  
|テキスト ファイルを作成します。|[&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)|  
|テキスト ファイルに書き込みます。|[&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)|  
|テキスト ファイルから読み取ります。|[&#91;\<topic:\/\/cpconreadingtextfromfile\>&#93;](http://msdn.microsoft.com/ja-jp/ed180baa-dfc6-4c69-a725-46e87edafb27)|  
|ファイルにテキストを追加します。|[&#91;\<topic:\/\/cpconopeningappendingtologfile\>&#93;](http://msdn.microsoft.com/ja-jp/74423362-1721-49cb-aa0a-e04005f72a06)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  
|ファイルのサイズを取得します。|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  
|ファイルの属性を取得します。|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  
|ファイルの属性を設定します。|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  
|ファイルの存在を確認します。|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  
|バイナリ ファイルから読み取ります。|[&#91;\<topic:\/\/cpconReadingWritingToNewlyCreatedDataFile\>&#93;](http://msdn.microsoft.com/ja-jp/e209d949-31e8-44ea-8e38-87f9093f3093)|  
|バイナリ ファイルに書き込みます。|[&#91;\<topic:\/\/cpconReadingWritingToNewlyCreatedDataFile\>&#93;](http://msdn.microsoft.com/ja-jp/e209d949-31e8-44ea-8e38-87f9093f3093)|  
  
   
  
## 例  
 次のコード例では、特定のカルチャで文字列を作成する方法を示します。  
  
 [!code-cpp[System.IO.StringWriter2\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.StringWriter2/CPP/strwriter2.cpp#1)]
 [!code-csharp[System.IO.StringWriter2\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StringWriter2/CS/strwriter2.cs#1)]
 [!code-vb[System.IO.StringWriter2\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StringWriter2/VB/strwriter2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StringWriter (System.Text.StringBuilder sb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Text.StringBuilder sb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringWriter.#ctor(System.Text.StringBuilder)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="sb" Type="System.Text.StringBuilder" />
      </Parameters>
      <Docs>
        <param name="sb">書き込み先の <see cref="T:System.Text.StringBuilder" /> オブジェクト。</param>
        <summary>指定した <see cref="T:System.Text.StringBuilder" /> に書き込む <see cref="T:System.IO.StringWriter" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 新しいインスタンスを初期化はこのコンス トラクターのコントロールの書式設定が指定されていないので <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName>します。  
  
 次の表は、その他の一般的なまたは関連する I\/O タスクの例を示します。  
  
|目的|参照項目|  
|--------|----------|  
|テキスト ファイルを作成します。|[&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)|  
|テキスト ファイルに書き込みます。|[&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)|  
|テキスト ファイルから読み取ります。|[&#91;\<topic:\/\/cpconreadingtextfromfile\>&#93;](http://msdn.microsoft.com/ja-jp/ed180baa-dfc6-4c69-a725-46e87edafb27)|  
|ファイルにテキストを追加します。|[&#91;\<topic:\/\/cpconopeningappendingtologfile\>&#93;](http://msdn.microsoft.com/ja-jp/74423362-1721-49cb-aa0a-e04005f72a06)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  
|ファイルのサイズを取得します。|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  
|ファイルの属性を取得します。|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  
|ファイルの属性を設定します。|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  
|ファイルの存在を確認します。|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  
|バイナリ ファイルから読み取ります。|[&#91;\<topic:\/\/cpconReadingWritingToNewlyCreatedDataFile\>&#93;](http://msdn.microsoft.com/ja-jp/e209d949-31e8-44ea-8e38-87f9093f3093)|  
|バイナリ ファイルに書き込みます。|[&#91;\<topic:\/\/cpconReadingWritingToNewlyCreatedDataFile\>&#93;](http://msdn.microsoft.com/ja-jp/e209d949-31e8-44ea-8e38-87f9093f3093)|  
  
   
  
## 例  
 次のコード例では、使用方法を示します、 <xref:System.Text.StringBuilder> 、閉じられたで基になる文字列を変更するクラスに `StringWriter`します。  
  
 [!code-cpp[System.IO.StringWriter3\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.StringWriter3/CPP/strwriter3.cpp#1)]
 [!code-csharp[System.IO.StringWriter3\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StringWriter3/CS/strwriter3.cs#1)]
 [!code-vb[System.IO.StringWriter3\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StringWriter3/VB/strwriter3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sb" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StringWriter (System.Text.StringBuilder sb, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Text.StringBuilder sb, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringWriter.#ctor(System.Text.StringBuilder,System.IFormatProvider)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="sb" Type="System.Text.StringBuilder" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="sb">書き込み先の <see cref="T:System.Text.StringBuilder" /> オブジェクト。</param>
        <param name="formatProvider">書式を制御する <see cref="T:System.IFormatProvider" /> オブジェクト。</param>
        <summary>指定した <see cref="T:System.Text.StringBuilder" /> に書き込み、指定した書式プロバイダーを持つ、<see cref="T:System.IO.StringWriter" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 次の表は、その他の一般的なまたは関連する I\/O タスクの例を示します。  
  
|目的|参照項目|  
|--------|----------|  
|テキスト ファイルを作成します。|[&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)|  
|テキスト ファイルに書き込みます。|[&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)|  
|テキスト ファイルから読み取ります。|[&#91;\<topic:\/\/cpconreadingtextfromfile\>&#93;](http://msdn.microsoft.com/ja-jp/ed180baa-dfc6-4c69-a725-46e87edafb27)|  
|ファイルにテキストを追加します。|[&#91;\<topic:\/\/cpconopeningappendingtologfile\>&#93;](http://msdn.microsoft.com/ja-jp/74423362-1721-49cb-aa0a-e04005f72a06)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  
|ファイルのサイズを取得します。|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  
|ファイルの属性を取得します。|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  
|ファイルの属性を設定します。|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  
|ファイルの存在を確認します。|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  
|バイナリ ファイルから読み取ります。|[&#91;\<topic:\/\/cpconReadingWritingToNewlyCreatedDataFile\>&#93;](http://msdn.microsoft.com/ja-jp/e209d949-31e8-44ea-8e38-87f9093f3093)|  
|バイナリ ファイルに書き込みます。|[&#91;\<topic:\/\/cpconReadingWritingToNewlyCreatedDataFile\>&#93;](http://msdn.microsoft.com/ja-jp/e209d949-31e8-44ea-8e38-87f9093f3093)|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sb" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringWriter.Close" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の閉じ <see cref="T:System.IO.StringWriter" /> と基になるストリーム。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ファイルを作成し、テキスト ファイルへの書き込みの例は、次を参照してください。 [&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)します。 ファイルからテキストの読み取りの例は、次を参照してください。 [&#91;\<topic:\/\/cpconreadingtextfromfile\>&#93;](http://msdn.microsoft.com/ja-jp/ed180baa-dfc6-4c69-a725-46e87edafb27)します。 読み取りと書き込みをバイナリ ファイルの例は、次を参照してください。 [&#91;\<topic:\/\/cpconReadingWritingToNewlyCreatedDataFile\>&#93;](http://msdn.microsoft.com/ja-jp/e209d949-31e8-44ea-8e38-87f9093f3093)します。  
  
 このメソッドは <xref:System.IO.Stream.Close%2A?displayProperty=fullName>です。  
  
 この実装の `Close` 呼び出し、 <xref:System.IO.StringWriter.Dispose%2A> メソッド、 `true` 値。  
  
 明示的に呼び出す場合を除きは、ストリームのフラッシュに基になる、エンコーダーはフラッシュされません `Close`します。 設定 <xref:System.IO.StreamWriter.AutoFlush%2A> に `true` に、ストリーム バッファーからデータがフラッシュされますが、エンコーダーの状態はフラッシュされないことを意味します。 これにより、次の文字のブロックを正常にエンコードできるように、\(一部の文字\) の状態を保持するエンコーダーです。 このシナリオでは、UTF8、UTF7、特定の文字をエンコードするため、エンコーダーは、隣接する文字または文字列を受信した後に影響します。  
  
   
  
## 例  
 このコード例が示されている例の一部は、 <xref:System.IO.StringWriter.%23ctor%28System.Text.StringBuilder%29> コンス トラクターです。  
  
 [!code-cpp[System.IO.StringWriter3\#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.StringWriter3/CPP/strwriter3.cpp#2)]
 [!code-csharp[System.IO.StringWriter3\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StringWriter3/CS/strwriter3.cs#2)]
 [!code-vb[System.IO.StringWriter3\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StringWriter3/VB/strwriter3.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringWriter.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.IO.StringWriter" /> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 When the **parameterReference tag is not supported!!!!**  
 parameter is **languageKeyword tag is not supported!!!!**  
, this method releases all resources held by any managed objects that this <xref:System.IO.StringWriter> references. This method invokes the **languageKeyword tag is not supported!!!!**  
 method of each referenced object.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.IO.StringWriter.Dispose(System.Boolean)" /> can be called multiple times by other objects. When overriding <see cref="M:System.IO.StringWriter.Dispose(System.Boolean)" />, be careful not to reference objects that have been previously disposed in an earlier call to <see cref="M:System.IO.StringWriter.Dispose(System.Boolean)" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public override System.Text.Encoding Encoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.IO.StringWriter.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>出力の書き込みに使用する <see cref="T:System.Text.Encoding" /> を取得します。</summary>
        <value>出力の書き込みに使用する <see langword="Encoding" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This property is necessary for some XML scenarios where a header must be written containing the encoding used by the **languageKeyword tag is not supported!!!!**  
. This allows the XML code to consume an arbitrary **languageKeyword tag is not supported!!!!**  
 and generate the correct XML header.  
  
 The following table lists examples of other typical or related I\/O tasks.  
  
|To do this...|See the example in this topic...|  
|-------------------|--------------------------------------|  
|Create a text file.|[&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)|  
|Write to a text file.|[&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)|  
|Read from a text file.|[&#91;\<topic:\/\/cpconreadingtextfromfile\>&#93;](http://msdn.microsoft.com/ja-jp/ed180baa-dfc6-4c69-a725-46e87edafb27)|  
  
   
  
## 例  
 This code example is part of a larger example provided for the <xref:System.IO.StringWriter.%23ctor> constructor.  
  
 [!code-cpp[System.IO.StringWriter1\#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.StringWriter1/CPP/strwriter1.cpp#4)]
 [!code-csharp[System.IO.StringWriter1\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StringWriter1/CS/strwriter1.cs#4)]
 [!code-vb[System.IO.StringWriter1\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StringWriter1/VB/strwriter1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task FlushAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task FlushAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringWriter.FlushAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のライターのすべてのバッファーを非同期にクリアし、バッファー内のデータを基になるデバイスに書き込みます。</summary>
        <returns>非同期のフラッシュ操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStringBuilder">
      <MemberSignature Language="C#" Value="public virtual System.Text.StringBuilder GetStringBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.StringBuilder GetStringBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringWriter.GetStringBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>基になる <see cref="T:System.Text.StringBuilder" /> を返します。</summary>
        <returns>基になる <see langword="StringBuilder" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 いずれかになります、 `StringBuilder` 、コンス トラクターに渡された、または `StringBuilder` 自動的に作成されました。  
  
 次の表は、その他の一般的なまたは関連する I\/O タスクの例を示します。  
  
|目的|参照項目|  
|--------|----------|  
|テキスト ファイルを作成します。|[&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)|  
|テキスト ファイルに書き込みます。|[&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)|  
|テキスト ファイルから読み取ります。|[&#91;\<topic:\/\/cpconreadingtextfromfile\>&#93;](http://msdn.microsoft.com/ja-jp/ed180baa-dfc6-4c69-a725-46e87edafb27)|  
  
   
  
## 例  
 このコード例が示されている例の一部は、 <xref:System.IO.StringWriter.%23ctor> コンス トラクターです。  
  
 [!code-cpp[System.IO.StringWriter1\#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.StringWriter1/CPP/strwriter1.cpp#3)]
 [!code-csharp[System.IO.StringWriter1\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StringWriter1/CS/strwriter1.cs#3)]
 [!code-vb[System.IO.StringWriter1\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StringWriter1/VB/strwriter1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringWriter.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see langword="StringWriter" /> にこれまでに書き込まれた文字を格納する文字列を返します。</summary>
        <returns>現在の <see langword="StringWriter" /> に書き込まれた文字を格納する文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 次の表は、その他の一般的なまたは関連する I\/O タスクの例を示します。  
  
|目的|参照項目|  
|--------|----------|  
|テキスト ファイルを作成します。|[&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)|  
|テキスト ファイルに書き込みます。|[&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)|  
|テキスト ファイルから読み取ります。|[&#91;\<topic:\/\/cpconreadingtextfromfile\>&#93;](http://msdn.microsoft.com/ja-jp/ed180baa-dfc6-4c69-a725-46e87edafb27)|  
  
   
  
## 例  
 このコード例が示されている例の一部は、 <xref:System.IO.StringWriter.%23ctor%28System.IFormatProvider%29> コンス トラクターです。  
  
 [!code-cpp[System.IO.StringWriter2\#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.StringWriter2/CPP/strwriter2.cpp#2)]
 [!code-csharp[System.IO.StringWriter2\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StringWriter2/CS/strwriter2.cs#2)]
 [!code-vb[System.IO.StringWriter2\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StringWriter2/VB/strwriter2.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringWriter.Write(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">書き込む文字。</param>
        <summary>文字列に文字を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは <xref:System.IO.TextWriter.Write%2A?displayProperty=fullName>です。  
  
 次の表は、その他の一般的なまたは関連する I\/O タスクの例を示します。  
  
|目的|参照項目|  
|--------|----------|  
|テキスト ファイルを作成します。|[&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)|  
|テキスト ファイルに書き込みます。|[&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)|  
|テキスト ファイルから読み取ります。|[&#91;\<topic:\/\/cpconreadingtextfromfile\>&#93;](http://msdn.microsoft.com/ja-jp/ed180baa-dfc6-4c69-a725-46e87edafb27)|  
|ファイルにテキストを追加します。|[&#91;\<topic:\/\/cpconopeningappendingtologfile\>&#93;](http://msdn.microsoft.com/ja-jp/74423362-1721-49cb-aa0a-e04005f72a06)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  
|ファイルのサイズを取得します。|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  
|ファイルの属性を取得します。|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  
|ファイルの属性を設定します。|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  
|ファイルの存在を確認します。|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  
|バイナリ ファイルから読み取ります。|[&#91;\<topic:\/\/cpconReadingWritingToNewlyCreatedDataFile\>&#93;](http://msdn.microsoft.com/ja-jp/e209d949-31e8-44ea-8e38-87f9093f3093)|  
|バイナリ ファイルに書き込みます。|[&#91;\<topic:\/\/cpconReadingWritingToNewlyCreatedDataFile\>&#93;](http://msdn.microsoft.com/ja-jp/e209d949-31e8-44ea-8e38-87f9093f3093)|  
  
   
  
## 例  
 このコード例が示されている例の一部は、 <xref:System.IO.StringWriter.%23ctor> コンス トラクターです。  
  
 [!code-cpp[System.IO.StringWriter1\#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.StringWriter1/CPP/strwriter1.cpp#2)]
 [!code-csharp[System.IO.StringWriter1\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StringWriter1/CS/strwriter1.cs#2)]
 [!code-vb[System.IO.StringWriter1\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StringWriter1/VB/strwriter1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">ライターは閉じられています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringWriter.Write(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">書き込む文字列。</param>
        <summary>現在の文字列に文字列を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは <xref:System.IO.TextWriter.Write%2A?displayProperty=fullName>です。  
  
 指定された文字列が場合 `null`, 、何も書き込まれません。  
  
 次の表は、その他の一般的なまたは関連する I\/O タスクの例を示します。  
  
|目的|参照項目|  
|--------|----------|  
|テキスト ファイルを作成します。|[&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)|  
|テキスト ファイルに書き込みます。|[&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)|  
|テキスト ファイルから読み取ります。|[&#91;\<topic:\/\/cpconreadingtextfromfile\>&#93;](http://msdn.microsoft.com/ja-jp/ed180baa-dfc6-4c69-a725-46e87edafb27)|  
|ファイルにテキストを追加します。|[&#91;\<topic:\/\/cpconopeningappendingtologfile\>&#93;](http://msdn.microsoft.com/ja-jp/74423362-1721-49cb-aa0a-e04005f72a06)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  
|ファイルのサイズを取得します。|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  
|ファイルの属性を取得します。|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  
|ファイルの属性を設定します。|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  
|ファイルの存在を確認します。|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  
|バイナリ ファイルから読み取ります。|[&#91;\<topic:\/\/cpconReadingWritingToNewlyCreatedDataFile\>&#93;](http://msdn.microsoft.com/ja-jp/e209d949-31e8-44ea-8e38-87f9093f3093)|  
|バイナリ ファイルに書き込みます。|[&#91;\<topic:\/\/cpconReadingWritingToNewlyCreatedDataFile\>&#93;](http://msdn.microsoft.com/ja-jp/e209d949-31e8-44ea-8e38-87f9093f3093)|  
  
   
  
## 例  
 このコード例が示されている例の一部は、 <xref:System.IO.StringWriter> クラスです。  
  
 [!code-cpp[System.IO.StringReaderWriter\#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.StringReaderWriter/CPP/stringrw.cpp#3)]
 [!code-csharp[System.IO.StringReaderWriter\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StringReaderWriter/CS/stringrw.cs#3)]
 [!code-vb[System.IO.StringReaderWriter\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StringReaderWriter/VB/stringrw.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">ライターは閉じられています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringWriter.Write(System.Char[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">データの書き込み元の文字配列。</param>
        <param name="index">データの読み取りを開始する、バッファー内の位置。</param>
        <param name="count">書き込む文字の最大数。</param>
        <summary>文字列に文字配列の一部を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは [Write メソッド \(Char\<xref:System.IO.TextWriter.Write%2A?displayProperty=fullName>です。  
  
 このメソッドは書き込みます `count` 文字のデータをこの `StringWriter` から `buffer`, 位置から `index`します。  
  
 次の表は、その他の一般的なまたは関連する I\/O タスクの例を示します。  
  
|目的|参照項目|  
|--------|----------|  
|テキスト ファイルを作成します。|[&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)|  
|テキスト ファイルに書き込みます。|[&#91;\<topic:\/\/cpconwritingtexttofile\>&#93;](http://msdn.microsoft.com/ja-jp/060cbe06-2adf-4337-9e7b-961a5c840208)|  
|テキスト ファイルから読み取ります。|[&#91;\<topic:\/\/cpconreadingtextfromfile\>&#93;](http://msdn.microsoft.com/ja-jp/ed180baa-dfc6-4c69-a725-46e87edafb27)|  
|ファイルにテキストを追加します。|[&#91;\<topic:\/\/cpconopeningappendingtologfile\>&#93;](http://msdn.microsoft.com/ja-jp/74423362-1721-49cb-aa0a-e04005f72a06)<br /><br /> [Write メソッド \(Char\<xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> [Write メソッド \(Char\<xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  
|ファイルのサイズを取得します。|[Write メソッド \(Char\<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  
|ファイルの属性を取得します。|[Write メソッド \(Char\<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  
|ファイルの属性を設定します。|[Write メソッド \(Char\<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  
|ファイルの存在を確認します。|[Write メソッド \(Char\<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  
|バイナリ ファイルから読み取ります。|[&#91;\<topic:\/\/cpconReadingWritingToNewlyCreatedDataFile\>&#93;](http://msdn.microsoft.com/ja-jp/e209d949-31e8-44ea-8e38-87f9093f3093)|  
|バイナリ ファイルに書き込みます。|[&#91;\<topic:\/\/cpconReadingWritingToNewlyCreatedDataFile\>&#93;](http://msdn.microsoft.com/ja-jp/e209d949-31e8-44ea-8e38-87f9093f3093)|  
  
   
  
## 例  
 このコード例が示されている例の一部は、 [Write メソッド \(Char\<xref:System.IO.StringWriter.%23ctor> コンス トラクターです。  
  
 [!code-cpp[System.IO.StringWriter1\#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.StringWriter1/CPP/strwriter1.cpp#2)]
 [!code-csharp[System.IO.StringWriter1\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StringWriter1/CS/strwriter1.cs#2)]
 [!code-vb[System.IO.StringWriter1\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StringWriter1/VB/strwriter1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> または <paramref name="count" /> が負の値です。</exception>
        <exception cref="T:System.ArgumentException">\(<paramref name="index" /> \+ <paramref name="count" />\)&gt; <paramref name="buffer" />。<see langword="Length" />。</exception>
        <exception cref="T:System.ObjectDisposedException">ライターは閉じられています。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteAsync (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteAsync(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringWriter.WriteAsync(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">文字列に書き込む文字。</param>
        <summary>文字を非同期で文字列に書き込みます。</summary>
        <returns>非同期の書き込み操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例を使用して文字を書き込む方法を示しています、 <xref:System.IO.StringWriter.WriteAsync%28System.Char%29> メソッドです。  
  
 [!code-csharp[System.IO.StringWriter\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.stringwriter/cs/example5.cs#5)]
 [!code-vb[System.IO.StringWriter\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.stringwriter/vb/example5.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">文字列ライターが破棄されています。</exception>
        <exception cref="T:System.InvalidOperationException">文字列ライターは現在、前の書き込み操作で使用中です。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteAsync (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteAsync(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringWriter.WriteAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">書き込む文字列。<c>value</c> が <see langword="null" /> の場合は、何もテキスト ストリームに書き込みません。</param>
        <summary>現在の文字列に文字列を非同期的に書き込みます。</summary>
        <returns>非同期の書き込み操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例を使用して文字列を書き込む方法を示しています、 <xref:System.IO.StringWriter.WriteAsync%28System.String%29> メソッドです。  
  
 [!code-csharp[System.IO.StringWriter\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.stringwriter/cs/example4.cs#4)]
 [!code-vb[System.IO.StringWriter\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.stringwriter/vb/example4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">文字列ライターが破棄されています。</exception>
        <exception cref="T:System.InvalidOperationException">文字列ライターは現在、前の書き込み操作で使用中です。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteAsync (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteAsync(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringWriter.WriteAsync(System.Char[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">データの書き込み元の文字配列。</param>
        <param name="index">データの読み取りを開始する、バッファー内の位置。</param>
        <param name="count">書き込む文字の最大数。</param>
        <summary>文字の部分配列を文字列に非同期で書き込みます。</summary>
        <returns>非同期の書き込み操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例を使用して文字を書き込む方法を示しています、 [WriteAsync メソッド \(Char\<xref:System.IO.StringWriter.WriteAsync%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> メソッドです。  
  
 [!code-csharp[System.IO.StringWriter\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.stringwriter/cs/example6.cs#6)]
 [!code-vb[System.IO.StringWriter\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.stringwriter/vb/example6.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> に <paramref name="count" /> を加算した値がバッファーの長さを超えています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> または <paramref name="count" /> が負の値です。</exception>
        <exception cref="T:System.ObjectDisposedException">文字列ライターが破棄されます。</exception>
        <exception cref="T:System.InvalidOperationException">文字列ライターは現在、前の書き込み操作で使用中です。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteLineAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteLineAsync (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteLineAsync(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringWriter.WriteLineAsync(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">文字列に書き込む文字。</param>
        <summary>非同期で文字列に文字を書き込み、続けて行終端記号を書き込みます。</summary>
        <returns>非同期の書き込み操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 行終端記号は、 <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName> プロパティです。  
  
   
  
## 例  
 次の例を使用して文字を書き込む方法を示しています、 <xref:System.IO.StringWriter.WriteLineAsync%28System.Char%29> メソッドです。  
  
 [!code-csharp[System.IO.StringWriter\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.stringwriter/cs/example2.cs#2)]
 [!code-vb[System.IO.StringWriter\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.stringwriter/vb/example2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">文字列ライターが破棄されています。</exception>
        <exception cref="T:System.InvalidOperationException">文字列ライターは現在、前の書き込み操作で使用中です。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteLineAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteLineAsync (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteLineAsync(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringWriter.WriteLineAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">書き込む文字列。 値が <see langword="null" /> の場合は、行終端記号だけが書き込まれます。</param>
        <summary>文字列を非同期で現在の文字列に書き込み、続けて行終端記号を書き込みます。</summary>
        <returns>非同期の書き込み操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 行終端記号は、 <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName> プロパティです。  
  
   
  
## 例  
 次の例を使用して文字列を書き込む方法を示しています、 <xref:System.IO.StringWriter.WriteLineAsync%28System.String%29> メソッドです。  
  
 [!code-csharp[System.IO.StringWriter\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.stringwriter/cs/example.cs#1)]
 [!code-vb[System.IO.StringWriter\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.stringwriter/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">文字列ライターが破棄されています。</exception>
        <exception cref="T:System.InvalidOperationException">文字列ライターは現在、前の書き込み操作で使用中です。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteLineAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteLineAsync (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteLineAsync(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.StringWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">データの書き込み元の文字配列。</param>
        <param name="index">データの読み取りを開始する、バッファー内の位置。</param>
        <param name="count">書き込む文字の最大数。</param>
        <summary>文字の部分配列を文字列に非同期で書き込み、続けて行終端記号を書き込みます。</summary>
        <returns>非同期の書き込み操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 行終端記号は、 [WriteLineAsync メソッド \(Char\<xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName> プロパティです。  
  
   
  
## 例  
 次の例を使用して文字を書き込む方法を示しています、 [WriteLineAsync メソッド \(Char\<xref:System.IO.StringWriter.WriteLineAsync%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> メソッドです。  
  
 [!code-csharp[System.IO.StringWriter\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.stringwriter/cs/example3.cs#3)]
 [!code-vb[System.IO.StringWriter\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.stringwriter/vb/example3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> に <paramref name="count" /> を加算した値がバッファーの長さを超えています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> または <paramref name="count" /> が負の値です。</exception>
        <exception cref="T:System.ObjectDisposedException">文字列ライターが破棄されます。</exception>
        <exception cref="T:System.InvalidOperationException">文字列ライターは現在、前の書き込み操作で使用中です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLineAsync">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>データを非同期で文字列に書き込み、続けて行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.IO.StringWriter" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="WriteAsync">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>文字列にデータを非同期で書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>文字列にデータを書き込みます。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>